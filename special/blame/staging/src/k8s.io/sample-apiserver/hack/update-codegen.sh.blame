0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	KUBE_ROOT=${GOPATH}/src/k8s.io/kubernetes
0000000000000000000000000000000000000000;;	BASE_PATH=k8s.io/kubernetes/staging/src/
0000000000000000000000000000000000000000;;	BASE_PKG=k8s.io/sample-apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	source "${KUBE_ROOT}/hack/lib/init.sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	clientgen="${PWD}/client-gen-binary"
0000000000000000000000000000000000000000;;	listergen="${PWD}/lister-gen"
0000000000000000000000000000000000000000;;	informergen="${PWD}/informer-gen"
0000000000000000000000000000000000000000;;	# Register function to be called on EXIT to remove generated binary.
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	  rm -f "${clientgen:-}"
0000000000000000000000000000000000000000;;	  rm -f "${listergen:-}"
0000000000000000000000000000000000000000;;	  rm -f "${informergen:-}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function generate_group() {
0000000000000000000000000000000000000000;;	  local GROUP_NAME=$1
0000000000000000000000000000000000000000;;	  local VERSION=$2
0000000000000000000000000000000000000000;;	  local SERVER_BASE=${GOPATH}/src/${BASE_PATH}
0000000000000000000000000000000000000000;;	  local CLIENT_PKG=${BASE_PKG}/pkg/client
0000000000000000000000000000000000000000;;	  local LISTERS_PKG=${CLIENT_PKG}/listers_generated
0000000000000000000000000000000000000000;;	  local INFORMERS_PKG=${CLIENT_PKG}/informers_generated
0000000000000000000000000000000000000000;;	  local PREFIX=${BASE_PKG}/pkg/apis
0000000000000000000000000000000000000000;;	  local INPUT_APIS=(
0000000000000000000000000000000000000000;;	    ${GROUP_NAME}/
0000000000000000000000000000000000000000;;	    ${GROUP_NAME}/${VERSION}
0000000000000000000000000000000000000000;;	  )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Building client-gen"
0000000000000000000000000000000000000000;;	  go build -o "${clientgen}" k8s.io/kubernetes/cmd/libs/go2idl/client-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "generating clientset for group ${GROUP_NAME} and version ${VERSION} at ${GOPATH}/${BASE_PATH}${CLIENT_PKG}"
0000000000000000000000000000000000000000;;	  ${clientgen} --input-base ${PREFIX} --input ${INPUT_APIS[@]} --clientset-path ${CLIENT_PKG}/clientset_generated --output-base=${GOPATH}/src/${BASE_PATH}
0000000000000000000000000000000000000000;;	  ${clientgen} --clientset-name="clientset" --input-base ${PREFIX} --input ${GROUP_NAME}/${VERSION} --clientset-path ${CLIENT_PKG}/clientset_generated --output-base=${GOPATH}/src/${BASE_PATH}
0000000000000000000000000000000000000000;;	  
0000000000000000000000000000000000000000;;	  echo "Building lister-gen"
0000000000000000000000000000000000000000;;	  go build -o "${listergen}" k8s.io/kubernetes/cmd/libs/go2idl/lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "generating listers for group ${GROUP_NAME} and version ${VERSION} at ${GOPATH}/${BASE_PATH}${LISTERS_PKG}"
0000000000000000000000000000000000000000;;	  ${listergen} --input-dirs ${BASE_PKG}/pkg/apis/wardle --input-dirs ${BASE_PKG}/pkg/apis/${GROUP_NAME}/${VERSION} --output-package ${LISTERS_PKG} --output-base ${SERVER_BASE}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "Building informer-gen"
0000000000000000000000000000000000000000;;	  go build -o "${informergen}" k8s.io/kubernetes/cmd/libs/go2idl/informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  echo "generating informers for group ${GROUP_NAME} and version ${VERSION} at ${GOPATH}/${BASE_PATH}${INFORMERS_PKG}"
0000000000000000000000000000000000000000;;	  ${informergen} \
0000000000000000000000000000000000000000;;	    --input-dirs ${BASE_PKG}/pkg/apis/${GROUP_NAME} --input-dirs ${BASE_PKG}/pkg/apis/${GROUP_NAME}/${VERSION} \
0000000000000000000000000000000000000000;;	    --versioned-clientset-package ${CLIENT_PKG}/clientset_generated/clientset \
0000000000000000000000000000000000000000;;	    --internal-clientset-package ${CLIENT_PKG}/clientset_generated/internalclientset \
0000000000000000000000000000000000000000;;	    --listers-package ${LISTERS_PKG} \
0000000000000000000000000000000000000000;;	    --output-package ${INFORMERS_PKG} \
0000000000000000000000000000000000000000;;	    --output-base ${SERVER_BASE}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	generate_group wardle v1alpha1
