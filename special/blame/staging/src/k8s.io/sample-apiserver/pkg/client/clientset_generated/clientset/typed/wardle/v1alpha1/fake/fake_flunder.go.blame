0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f63b03861792c91c52922fa5a69ca3d6f393dfa0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		labels "k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		types "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		testing "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		v1alpha1 "k8s.io/sample-apiserver/pkg/apis/wardle/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeFlunders implements FlunderInterface
0000000000000000000000000000000000000000;;	type FakeFlunders struct {
0000000000000000000000000000000000000000;;		Fake *FakeWardleV1alpha1
0000000000000000000000000000000000000000;;		ns   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var flundersResource = schema.GroupVersionResource{Group: "wardle.k8s.io", Version: "v1alpha1", Resource: "flunders"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var flundersKind = schema.GroupVersionKind{Group: "wardle.k8s.io", Version: "v1alpha1", Kind: "Flunder"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Create(flunder *v1alpha1.Flunder) (result *v1alpha1.Flunder, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewCreateAction(flundersResource, c.ns, flunder), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.Flunder), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Update(flunder *v1alpha1.Flunder) (result *v1alpha1.Flunder, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewUpdateAction(flundersResource, c.ns, flunder), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.Flunder), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) UpdateStatus(flunder *v1alpha1.Flunder) (*v1alpha1.Flunder, error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewUpdateSubresourceAction(flundersResource, "status", c.ns, flunder), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.Flunder), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Delete(name string, options *v1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		_, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewDeleteAction(flundersResource, c.ns, name), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
0000000000000000000000000000000000000000;;		action := testing.NewDeleteCollectionAction(flundersResource, c.ns, listOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := c.Fake.Invokes(action, &v1alpha1.FlunderList{})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Get(name string, options v1.GetOptions) (result *v1alpha1.Flunder, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewGetAction(flundersResource, c.ns, name), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.Flunder), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) List(opts v1.ListOptions) (result *v1alpha1.FlunderList, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewListAction(flundersResource, flundersKind, c.ns, opts), &v1alpha1.FlunderList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		label, _, _ := testing.ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		if label == nil {
0000000000000000000000000000000000000000;;			label = labels.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		list := &v1alpha1.FlunderList{}
0000000000000000000000000000000000000000;;		for _, item := range obj.(*v1alpha1.FlunderList).Items {
0000000000000000000000000000000000000000;;			if label.Matches(labels.Set(item.Labels)) {
0000000000000000000000000000000000000000;;				list.Items = append(list.Items, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested flunders.
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Watch(opts v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return c.Fake.
0000000000000000000000000000000000000000;;			InvokesWatch(testing.NewWatchAction(flundersResource, c.ns, opts))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched flunder.
0000000000000000000000000000000000000000;;	func (c *FakeFlunders) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Flunder, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewPatchSubresourceAction(flundersResource, c.ns, name, data, subresources...), &v1alpha1.Flunder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.Flunder), err
0000000000000000000000000000000000000000;;	}
