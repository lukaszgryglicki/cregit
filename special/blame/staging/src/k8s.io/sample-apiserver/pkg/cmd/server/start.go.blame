0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
65e2658d07609908d94d45be9ecdd474b6d84de9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;		"k8s.io/sample-apiserver/pkg/apis/wardle/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/sample-apiserver/pkg/apiserver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultEtcdPathPrefix = "/registry/wardle.kubernetes.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WardleServerOptions struct {
0000000000000000000000000000000000000000;;		RecommendedOptions *genericoptions.RecommendedOptions
0000000000000000000000000000000000000000;;		Admission          *genericoptions.AdmissionOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StdOut io.Writer
0000000000000000000000000000000000000000;;		StdErr io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewWardleServerOptions(out, errOut io.Writer) *WardleServerOptions {
0000000000000000000000000000000000000000;;		o := &WardleServerOptions{
0000000000000000000000000000000000000000;;			RecommendedOptions: genericoptions.NewRecommendedOptions(defaultEtcdPathPrefix, apiserver.Scheme, apiserver.Codecs.LegacyCodec(v1alpha1.SchemeGroupVersion)),
0000000000000000000000000000000000000000;;			Admission:          genericoptions.NewAdmissionOptions(),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			StdOut: out,
0000000000000000000000000000000000000000;;			StdErr: errOut,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *WardleServerOptions) addFlags(flags *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		o.RecommendedOptions.AddFlags(flags)
0000000000000000000000000000000000000000;;		o.Admission.AddFlags(flags)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCommandStartMaster provides a CLI handler for 'start master' command
0000000000000000000000000000000000000000;;	func NewCommandStartWardleServer(out, errOut io.Writer, stopCh <-chan struct{}) *cobra.Command {
0000000000000000000000000000000000000000;;		o := NewWardleServerOptions(out, errOut)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Short: "Launch a wardle API server",
0000000000000000000000000000000000000000;;			Long:  "Launch a wardle API server",
0000000000000000000000000000000000000000;;			RunE: func(c *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;				if err := o.Complete(); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := o.Validate(args); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := o.RunWardleServer(stopCh); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flags := cmd.Flags()
0000000000000000000000000000000000000000;;		o.addFlags(flags)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o WardleServerOptions) Validate(args []string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *WardleServerOptions) Complete() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o WardleServerOptions) Config() (*apiserver.Config, error) {
0000000000000000000000000000000000000000;;		// TODO have a "real" external address
0000000000000000000000000000000000000000;;		if err := o.RecommendedOptions.SecureServing.MaybeDefaultWithSelfSignedCerts("localhost", nil, []net.IP{net.ParseIP("127.0.0.1")}); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error creating self-signed certificates: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverConfig := genericapiserver.NewConfig(apiserver.Codecs)
0000000000000000000000000000000000000000;;		if err := o.RecommendedOptions.ApplyTo(serverConfig); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := o.Admission.ApplyTo(serverConfig); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := &apiserver.Config{
0000000000000000000000000000000000000000;;			GenericConfig: serverConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o WardleServerOptions) RunWardleServer(stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		config, err := o.Config()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server, err := config.Complete().New()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return server.GenericAPIServer.PrepareRun().Run(stopCh)
0000000000000000000000000000000000000000;;	}
