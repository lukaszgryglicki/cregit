0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
65e2658d07609908d94d45be9ecdd474b6d84de9;staging/src/k8s.io/sample-apiserver/pkg/registry/wardle/etcd.go[staging/src/k8s.io/sample-apiserver/pkg/registry/wardle/etcd.go][staging/src/k8s.io/sample-apiserver/pkg/registry/wardle/flunder/etcd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flunder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/sample-apiserver/pkg/apis/wardle"
0000000000000000000000000000000000000000;;		"k8s.io/sample-apiserver/pkg/registry"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTInPeace returns a RESTStorage object that will work against API services.
0000000000000000000000000000000000000000;;	func RESTInPeace(scheme *runtime.Scheme, optsGetter generic.RESTOptionsGetter) *registry.REST {
0000000000000000000000000000000000000000;;		strategy := NewStrategy(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &wardle.Flunder{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &wardle.FlunderList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     MatchFlunder,
0000000000000000000000000000000000000000;;			QualifiedResource: wardle.Resource("flunders"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			err = fmt.Errorf("Unable to create REST storage for flunder resource due to %v. Committing suicide.", err)
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &registry.REST{store}
0000000000000000000000000000000000000000;;	}
