0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
077ad14a056460de9c7c791505f981ea5f884ba0;pkg/apis/batch/v2alpha1/types.go[pkg/apis/batch/v2alpha1/types.go][staging/src/k8s.io/api/batch/v2alpha1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v2alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobTemplate describes a template for creating copies of a predefined pod.
0000000000000000000000000000000000000000;;	type JobTemplate struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Defines jobs that will be created from this template.
0000000000000000000000000000000000000000;;		// https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Template JobTemplateSpec `json:"template,omitempty" protobuf:"bytes,2,opt,name=template"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobTemplateSpec describes the data a Job should have when created from a template
0000000000000000000000000000000000000000;;	type JobTemplateSpec struct {
0000000000000000000000000000000000000000;;		// Standard object's metadata of the jobs created from this template.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of the job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec batchv1.JobSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJob represents the configuration of a single cron job.
0000000000000000000000000000000000000000;;	type CronJob struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of a cron job, including the schedule.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec CronJobSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Current status of a cron job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status CronJobStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobList is a collection of cron jobs.
0000000000000000000000000000000000000000;;	type CronJobList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// items is the list of CronJobs.
0000000000000000000000000000000000000000;;		Items []CronJob `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobSpec describes how the job execution will look like and when it will actually run.
0000000000000000000000000000000000000000;;	type CronJobSpec struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
0000000000000000000000000000000000000000;;		Schedule string `json:"schedule" protobuf:"bytes,1,opt,name=schedule"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional deadline in seconds for starting the job if it misses scheduled
0000000000000000000000000000000000000000;;		// time for any reason.  Missed jobs executions will be counted as failed ones.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartingDeadlineSeconds *int64 `json:"startingDeadlineSeconds,omitempty" protobuf:"varint,2,opt,name=startingDeadlineSeconds"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies how to treat concurrent executions of a Job.
0000000000000000000000000000000000000000;;		// Defaults to Allow.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ConcurrencyPolicy ConcurrencyPolicy `json:"concurrencyPolicy,omitempty" protobuf:"bytes,3,opt,name=concurrencyPolicy,casttype=ConcurrencyPolicy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This flag tells the controller to suspend subsequent executions, it does
0000000000000000000000000000000000000000;;		// not apply to already started executions.  Defaults to false.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Suspend *bool `json:"suspend,omitempty" protobuf:"varint,4,opt,name=suspend"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the job that will be created when executing a CronJob.
0000000000000000000000000000000000000000;;		JobTemplate JobTemplateSpec `json:"jobTemplate" protobuf:"bytes,5,opt,name=jobTemplate"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of successful finished jobs to retain.
0000000000000000000000000000000000000000;;		// This is a pointer to distinguish between explicit zero and not specified.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		SuccessfulJobsHistoryLimit *int32 `json:"successfulJobsHistoryLimit,omitempty" protobuf:"varint,6,opt,name=successfulJobsHistoryLimit"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of failed finished jobs to retain.
0000000000000000000000000000000000000000;;		// This is a pointer to distinguish between explicit zero and not specified.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		FailedJobsHistoryLimit *int32 `json:"failedJobsHistoryLimit,omitempty" protobuf:"varint,7,opt,name=failedJobsHistoryLimit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConcurrencyPolicy describes how the job will be handled.
0000000000000000000000000000000000000000;;	// Only one of the following concurrent policies may be specified.
0000000000000000000000000000000000000000;;	// If none of the following policies is specified, the default one
0000000000000000000000000000000000000000;;	// is AllowConcurrent.
0000000000000000000000000000000000000000;;	type ConcurrencyPolicy string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// AllowConcurrent allows CronJobs to run concurrently.
0000000000000000000000000000000000000000;;		AllowConcurrent ConcurrencyPolicy = "Allow"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForbidConcurrent forbids concurrent runs, skipping next run if previous
0000000000000000000000000000000000000000;;		// hasn't finished yet.
0000000000000000000000000000000000000000;;		ForbidConcurrent ConcurrencyPolicy = "Forbid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ReplaceConcurrent cancels currently running job and replaces it with a new one.
0000000000000000000000000000000000000000;;		ReplaceConcurrent ConcurrencyPolicy = "Replace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobStatus represents the current state of a cron job.
0000000000000000000000000000000000000000;;	type CronJobStatus struct {
0000000000000000000000000000000000000000;;		// A list of pointers to currently running jobs.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Active []v1.ObjectReference `json:"active,omitempty" protobuf:"bytes,1,rep,name=active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information when was the last time the job was successfully scheduled.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastScheduleTime *metav1.Time `json:"lastScheduleTime,omitempty" protobuf:"bytes,4,opt,name=lastScheduleTime"`
0000000000000000000000000000000000000000;;	}
