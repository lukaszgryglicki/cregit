0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
55547f50b65b23d08b9ff9f2e95fb38a5cde47b6;pkg/apis/batch/v1/types.go[pkg/apis/batch/v1/types.go][staging/src/k8s.io/api/batch/v1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Job represents the configuration of a single job.
0000000000000000000000000000000000000000;;	type Job struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of a job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec JobSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Current status of a job.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status JobStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobList is a collection of jobs.
0000000000000000000000000000000000000000;;	type JobList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// items is the list of Jobs.
0000000000000000000000000000000000000000;;		Items []Job `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobSpec describes how the job execution will look like.
0000000000000000000000000000000000000000;;	type JobSpec struct {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the maximum desired number of pods the job should
0000000000000000000000000000000000000000;;		// run at any given time. The actual number of pods running in steady state will
0000000000000000000000000000000000000000;;		// be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
0000000000000000000000000000000000000000;;		// i.e. when the work left to do is less than max parallelism.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Parallelism *int32 `json:"parallelism,omitempty" protobuf:"varint,1,opt,name=parallelism"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specifies the desired number of successfully finished pods the
0000000000000000000000000000000000000000;;		// job should be run with.  Setting to nil means that the success of any
0000000000000000000000000000000000000000;;		// pod signals the success of all pods, and allows parallelism to have any positive
0000000000000000000000000000000000000000;;		// value.  Setting to 1 means that parallelism is limited to 1 and the success of that
0000000000000000000000000000000000000000;;		// pod signals the success of the job.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Completions *int32 `json:"completions,omitempty" protobuf:"varint,2,opt,name=completions"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional duration in seconds relative to the startTime that the job may be active
0000000000000000000000000000000000000000;;		// before the system tries to terminate it; value must be positive integer
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ActiveDeadlineSeconds *int64 `json:"activeDeadlineSeconds,omitempty" protobuf:"varint,3,opt,name=activeDeadlineSeconds"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A label query over pods that should match the pod count.
0000000000000000000000000000000000000000;;		// Normally, the system sets this field for you.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Selector *metav1.LabelSelector `json:"selector,omitempty" protobuf:"bytes,4,opt,name=selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// manualSelector controls generation of pod labels and pod selectors.
0000000000000000000000000000000000000000;;		// Leave `manualSelector` unset unless you are certain what you are doing.
0000000000000000000000000000000000000000;;		// When false or unset, the system pick labels unique to this job
0000000000000000000000000000000000000000;;		// and appends those labels to the pod template.  When true,
0000000000000000000000000000000000000000;;		// the user is responsible for picking unique labels and specifying
0000000000000000000000000000000000000000;;		// the selector.  Failure to pick a unique label may cause this
0000000000000000000000000000000000000000;;		// and other jobs to not function correctly.  However, You may see
0000000000000000000000000000000000000000;;		// `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
0000000000000000000000000000000000000000;;		// API.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ManualSelector *bool `json:"manualSelector,omitempty" protobuf:"varint,5,opt,name=manualSelector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describes the pod that will be created when executing a job.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
0000000000000000000000000000000000000000;;		Template v1.PodTemplateSpec `json:"template" protobuf:"bytes,6,opt,name=template"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobStatus represents the current state of a Job.
0000000000000000000000000000000000000000;;	type JobStatus struct {
0000000000000000000000000000000000000000;;		// The latest available observations of an object's current state.
0000000000000000000000000000000000000000;;		// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		// +patchMergeKey=type
0000000000000000000000000000000000000000;;		// +patchStrategy=merge
0000000000000000000000000000000000000000;;		Conditions []JobCondition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Represents time when the job was acknowledged by the job controller.
0000000000000000000000000000000000000000;;		// It is not guaranteed to be set in happens-before order across separate operations.
0000000000000000000000000000000000000000;;		// It is represented in RFC3339 form and is in UTC.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartTime *metav1.Time `json:"startTime,omitempty" protobuf:"bytes,2,opt,name=startTime"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Represents time when the job was completed. It is not guaranteed to
0000000000000000000000000000000000000000;;		// be set in happens-before order across separate operations.
0000000000000000000000000000000000000000;;		// It is represented in RFC3339 form and is in UTC.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CompletionTime *metav1.Time `json:"completionTime,omitempty" protobuf:"bytes,3,opt,name=completionTime"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of actively running pods.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Active int32 `json:"active,omitempty" protobuf:"varint,4,opt,name=active"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of pods which reached phase Succeeded.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Succeeded int32 `json:"succeeded,omitempty" protobuf:"varint,5,opt,name=succeeded"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The number of pods which reached phase Failed.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Failed int32 `json:"failed,omitempty" protobuf:"varint,6,opt,name=failed"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JobConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid conditions of a job.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// JobComplete means the job has completed its execution.
0000000000000000000000000000000000000000;;		JobComplete JobConditionType = "Complete"
0000000000000000000000000000000000000000;;		// JobFailed means the job has failed its execution.
0000000000000000000000000000000000000000;;		JobFailed JobConditionType = "Failed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JobCondition describes current state of a job.
0000000000000000000000000000000000000000;;	type JobCondition struct {
0000000000000000000000000000000000000000;;		// Type of job condition, Complete or Failed.
0000000000000000000000000000000000000000;;		Type JobConditionType `json:"type" protobuf:"bytes,1,opt,name=type,casttype=JobConditionType"`
0000000000000000000000000000000000000000;;		// Status of the condition, one of True, False, Unknown.
0000000000000000000000000000000000000000;;		Status v1.ConditionStatus `json:"status" protobuf:"bytes,2,opt,name=status,casttype=k8s.io/api/core/v1.ConditionStatus"`
0000000000000000000000000000000000000000;;		// Last time the condition was checked.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastProbeTime metav1.Time `json:"lastProbeTime,omitempty" protobuf:"bytes,3,opt,name=lastProbeTime"`
0000000000000000000000000000000000000000;;		// Last time the condition transit from one status to another.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty" protobuf:"bytes,4,opt,name=lastTransitionTime"`
0000000000000000000000000000000000000000;;		// (brief) reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,5,opt,name=reason"`
0000000000000000000000000000000000000000;;		// Human readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,6,opt,name=message"`
0000000000000000000000000000000000000000;;	}
