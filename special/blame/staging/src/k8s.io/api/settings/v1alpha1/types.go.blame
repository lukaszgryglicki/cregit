0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4f464f4f557a394d8000d8a173a77452fc579f35;pkg/apis/settings/v1alpha1/types.go[pkg/apis/settings/v1alpha1/types.go][staging/src/k8s.io/api/settings/v1alpha1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPreset is a policy resource that defines additional runtime
0000000000000000000000000000000000000000;;	// requirements for a Pod.
0000000000000000000000000000000000000000;;	type PodPreset struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec PodPresetSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPresetSpec is a description of a pod preset.
0000000000000000000000000000000000000000;;	type PodPresetSpec struct {
0000000000000000000000000000000000000000;;		// Selector is a label query over a set of resources, in this case pods.
0000000000000000000000000000000000000000;;		// Required.
0000000000000000000000000000000000000000;;		Selector metav1.LabelSelector `json:"selector,omitempty" protobuf:"bytes,1,opt,name=selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Env defines the collection of EnvVar to inject into containers.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Env []v1.EnvVar `json:"env,omitempty" protobuf:"bytes,2,rep,name=env"`
0000000000000000000000000000000000000000;;		// EnvFrom defines the collection of EnvFromSource to inject into containers.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		EnvFrom []v1.EnvFromSource `json:"envFrom,omitempty" protobuf:"bytes,3,rep,name=envFrom"`
0000000000000000000000000000000000000000;;		// Volumes defines the collection of Volume to inject into the pod.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Volumes []v1.Volume `json:"volumes,omitempty" protobuf:"bytes,4,rep,name=volumes"`
0000000000000000000000000000000000000000;;		// VolumeMounts defines the collection of VolumeMount to inject into containers.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		VolumeMounts []v1.VolumeMount `json:"volumeMounts,omitempty" protobuf:"bytes,5,rep,name=volumeMounts"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPresetList is a list of PodPreset objects.
0000000000000000000000000000000000000000;;	type PodPresetList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Items is a list of schema objects.
0000000000000000000000000000000000000000;;		Items []PodPreset `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
