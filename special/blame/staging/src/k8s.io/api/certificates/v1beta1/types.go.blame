0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5a7597794f104876fd4ef26edc7d65357312cd9e;pkg/apis/certificates/v1alpha1/types.go[pkg/apis/certificates/v1alpha1/types.go][staging/src/k8s.io/api/certificates/v1beta1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describes a certificate signing request
0000000000000000000000000000000000000000;;	type CertificateSigningRequest struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The certificate request itself and any additional information.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec CertificateSigningRequestSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Derived information about the request.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status CertificateSigningRequestStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This information is immutable after the request is created. Only the Request
0000000000000000000000000000000000000000;;	// and Usages fields can be set on creation, other fields are derived by
0000000000000000000000000000000000000000;;	// Kubernetes and cannot be modified by users.
0000000000000000000000000000000000000000;;	type CertificateSigningRequestSpec struct {
0000000000000000000000000000000000000000;;		// Base64-encoded PKCS#10 CSR data
0000000000000000000000000000000000000000;;		Request []byte `json:"request" protobuf:"bytes,1,opt,name=request"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// allowedUsages specifies a set of usage contexts the key will be
0000000000000000000000000000000000000000;;		// valid for.
0000000000000000000000000000000000000000;;		// See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
0000000000000000000000000000000000000000;;		//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
0000000000000000000000000000000000000000;;		Usages []KeyUsage `json:"usages,omitempty" protobuf:"bytes,5,opt,name=keyUsage"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Information about the requesting user.
0000000000000000000000000000000000000000;;		// See user.Info interface for details.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Username string `json:"username,omitempty" protobuf:"bytes,2,opt,name=username"`
0000000000000000000000000000000000000000;;		// UID information about the requesting user.
0000000000000000000000000000000000000000;;		// See user.Info interface for details.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		UID string `json:"uid,omitempty" protobuf:"bytes,3,opt,name=uid"`
0000000000000000000000000000000000000000;;		// Group information about the requesting user.
0000000000000000000000000000000000000000;;		// See user.Info interface for details.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Groups []string `json:"groups,omitempty" protobuf:"bytes,4,rep,name=groups"`
0000000000000000000000000000000000000000;;		// Extra information about the requesting user.
0000000000000000000000000000000000000000;;		// See user.Info interface for details.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extra map[string]ExtraValue `json:"extra,omitempty" protobuf:"bytes,6,rep,name=extra"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtraValue masks the value so protobuf can generate
0000000000000000000000000000000000000000;;	// +protobuf.nullable=true
0000000000000000000000000000000000000000;;	// +protobuf.options.(gogoproto.goproto_stringer)=false
0000000000000000000000000000000000000000;;	type ExtraValue []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t ExtraValue) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v", []string(t))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateSigningRequestStatus struct {
0000000000000000000000000000000000000000;;		// Conditions applied to the request, such as approval or denial.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Conditions []CertificateSigningRequestCondition `json:"conditions,omitempty" protobuf:"bytes,1,rep,name=conditions"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If request was approved, the controller will place the issued certificate here.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Certificate []byte `json:"certificate,omitempty" protobuf:"bytes,2,opt,name=certificate"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RequestConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are the possible conditions for a certificate request.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CertificateApproved RequestConditionType = "Approved"
0000000000000000000000000000000000000000;;		CertificateDenied   RequestConditionType = "Denied"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateSigningRequestCondition struct {
0000000000000000000000000000000000000000;;		// request approval state, currently Approved or Denied.
0000000000000000000000000000000000000000;;		Type RequestConditionType `json:"type" protobuf:"bytes,1,opt,name=type,casttype=RequestConditionType"`
0000000000000000000000000000000000000000;;		// brief reason for the request state
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,2,opt,name=reason"`
0000000000000000000000000000000000000000;;		// human readable message with details about the request state
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,3,opt,name=message"`
0000000000000000000000000000000000000000;;		// timestamp for the last update to this condition
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastUpdateTime metav1.Time `json:"lastUpdateTime,omitempty" protobuf:"bytes,4,opt,name=lastUpdateTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateSigningRequestList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Items []CertificateSigningRequest `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyUsages specifies valid usage contexts for keys.
0000000000000000000000000000000000000000;;	// See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
0000000000000000000000000000000000000000;;	//      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
0000000000000000000000000000000000000000;;	type KeyUsage string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		UsageSigning            KeyUsage = "signing"
0000000000000000000000000000000000000000;;		UsageDigitalSignature   KeyUsage = "digital signature"
0000000000000000000000000000000000000000;;		UsageContentCommittment KeyUsage = "content committment"
0000000000000000000000000000000000000000;;		UsageKeyEncipherment    KeyUsage = "key encipherment"
0000000000000000000000000000000000000000;;		UsageKeyAgreement       KeyUsage = "key agreement"
0000000000000000000000000000000000000000;;		UsageDataEncipherment   KeyUsage = "data encipherment"
0000000000000000000000000000000000000000;;		UsageCertSign           KeyUsage = "cert sign"
0000000000000000000000000000000000000000;;		UsageCRLSign            KeyUsage = "crl sign"
0000000000000000000000000000000000000000;;		UsageEncipherOnly       KeyUsage = "encipher only"
0000000000000000000000000000000000000000;;		UsageDecipherOnly       KeyUsage = "decipher only"
0000000000000000000000000000000000000000;;		UsageAny                KeyUsage = "any"
0000000000000000000000000000000000000000;;		UsageServerAuth         KeyUsage = "server auth"
0000000000000000000000000000000000000000;;		UsageClientAuth         KeyUsage = "client auth"
0000000000000000000000000000000000000000;;		UsageCodeSigning        KeyUsage = "code signing"
0000000000000000000000000000000000000000;;		UsageEmailProtection    KeyUsage = "email protection"
0000000000000000000000000000000000000000;;		UsageSMIME              KeyUsage = "s/mime"
0000000000000000000000000000000000000000;;		UsageIPsecEndSystem     KeyUsage = "ipsec end system"
0000000000000000000000000000000000000000;;		UsageIPsecTunnel        KeyUsage = "ipsec tunnel"
0000000000000000000000000000000000000000;;		UsageIPsecUser          KeyUsage = "ipsec user"
0000000000000000000000000000000000000000;;		UsageTimestamping       KeyUsage = "timestamping"
0000000000000000000000000000000000000000;;		UsageOCSPSigning        KeyUsage = "ocsp signing"
0000000000000000000000000000000000000000;;		UsageMicrosoftSGC       KeyUsage = "microsoft sgc"
0000000000000000000000000000000000000000;;		UsageNetscapSGC         KeyUsage = "netscape sgc"
0000000000000000000000000000000000000000;;	)
