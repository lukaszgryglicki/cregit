0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
65474ab697f89e90e979129e4be3eb06542961c8;pkg/apis/authorization/v1beta1/types.go[pkg/apis/authorization/v1beta1/types.go][staging/src/k8s.io/api/authorization/v1beta1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubjectAccessReview checks whether or not a user or group can perform an action.
0000000000000000000000000000000000000000;;	type SubjectAccessReview struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec holds information about the request being evaluated
0000000000000000000000000000000000000000;;		Spec SubjectAccessReviewSpec `json:"spec" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is filled in by the server and indicates whether the request is allowed or not
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status SubjectAccessReviewStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a
0000000000000000000000000000000000000000;;	// spec.namespace means "in all namespaces".  Self is a special case, because users should always be able
0000000000000000000000000000000000000000;;	// to check whether they can perform an action
0000000000000000000000000000000000000000;;	type SelfSubjectAccessReview struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec holds information about the request being evaluated.  user and groups must be empty
0000000000000000000000000000000000000000;;		Spec SelfSubjectAccessReviewSpec `json:"spec" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is filled in by the server and indicates whether the request is allowed or not
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status SubjectAccessReviewStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace.
0000000000000000000000000000000000000000;;	// Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions
0000000000000000000000000000000000000000;;	// checking.
0000000000000000000000000000000000000000;;	type LocalSubjectAccessReview struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace
0000000000000000000000000000000000000000;;		// you made the request against.  If empty, it is defaulted.
0000000000000000000000000000000000000000;;		Spec SubjectAccessReviewSpec `json:"spec" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status is filled in by the server and indicates whether the request is allowed or not
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status SubjectAccessReviewStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
0000000000000000000000000000000000000000;;	type ResourceAttributes struct {
0000000000000000000000000000000000000000;;		// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
0000000000000000000000000000000000000000;;		// "" (empty) is defaulted for LocalSubjectAccessReviews
0000000000000000000000000000000000000000;;		// "" (empty) is empty for cluster-scoped resources
0000000000000000000000000000000000000000;;		// "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty" protobuf:"bytes,1,opt,name=namespace"`
0000000000000000000000000000000000000000;;		// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Verb string `json:"verb,omitempty" protobuf:"bytes,2,opt,name=verb"`
0000000000000000000000000000000000000000;;		// Group is the API Group of the Resource.  "*" means all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Group string `json:"group,omitempty" protobuf:"bytes,3,opt,name=group"`
0000000000000000000000000000000000000000;;		// Version is the API Version of the Resource.  "*" means all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty" protobuf:"bytes,4,opt,name=version"`
0000000000000000000000000000000000000000;;		// Resource is one of the existing resource types.  "*" means all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Resource string `json:"resource,omitempty" protobuf:"bytes,5,opt,name=resource"`
0000000000000000000000000000000000000000;;		// Subresource is one of the existing resource types.  "" means none.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Subresource string `json:"subresource,omitempty" protobuf:"bytes,6,opt,name=subresource"`
0000000000000000000000000000000000000000;;		// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" protobuf:"bytes,7,opt,name=name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
0000000000000000000000000000000000000000;;	type NonResourceAttributes struct {
0000000000000000000000000000000000000000;;		// Path is the URL path of the request
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Path string `json:"path,omitempty" protobuf:"bytes,1,opt,name=path"`
0000000000000000000000000000000000000000;;		// Verb is the standard HTTP verb
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Verb string `json:"verb,omitempty" protobuf:"bytes,2,opt,name=verb"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes
0000000000000000000000000000000000000000;;	// and NonResourceAuthorizationAttributes must be set
0000000000000000000000000000000000000000;;	type SubjectAccessReviewSpec struct {
0000000000000000000000000000000000000000;;		// ResourceAuthorizationAttributes describes information for a resource access request
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ResourceAttributes *ResourceAttributes `json:"resourceAttributes,omitempty" protobuf:"bytes,1,opt,name=resourceAttributes"`
0000000000000000000000000000000000000000;;		// NonResourceAttributes describes information for a non-resource access request
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NonResourceAttributes *NonResourceAttributes `json:"nonResourceAttributes,omitempty" protobuf:"bytes,2,opt,name=nonResourceAttributes"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// User is the user you're testing for.
0000000000000000000000000000000000000000;;		// If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		User string `json:"user,omitempty" protobuf:"bytes,3,opt,name=verb"`
0000000000000000000000000000000000000000;;		// Groups is the groups you're testing for.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Groups []string `json:"group,omitempty" protobuf:"bytes,4,rep,name=group"`
0000000000000000000000000000000000000000;;		// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer
0000000000000000000000000000000000000000;;		// it needs a reflection here.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extra map[string]ExtraValue `json:"extra,omitempty" protobuf:"bytes,5,rep,name=extra"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtraValue masks the value so protobuf can generate
0000000000000000000000000000000000000000;;	// +protobuf.nullable=true
0000000000000000000000000000000000000000;;	// +protobuf.options.(gogoproto.goproto_stringer)=false
0000000000000000000000000000000000000000;;	type ExtraValue []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t ExtraValue) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v", []string(t))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes
0000000000000000000000000000000000000000;;	// and NonResourceAuthorizationAttributes must be set
0000000000000000000000000000000000000000;;	type SelfSubjectAccessReviewSpec struct {
0000000000000000000000000000000000000000;;		// ResourceAuthorizationAttributes describes information for a resource access request
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ResourceAttributes *ResourceAttributes `json:"resourceAttributes,omitempty" protobuf:"bytes,1,opt,name=resourceAttributes"`
0000000000000000000000000000000000000000;;		// NonResourceAttributes describes information for a non-resource access request
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NonResourceAttributes *NonResourceAttributes `json:"nonResourceAttributes,omitempty" protobuf:"bytes,2,opt,name=nonResourceAttributes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;	type SubjectAccessReviewStatus struct {
0000000000000000000000000000000000000000;;		// Allowed is required.  True if the action would be allowed, false otherwise.
0000000000000000000000000000000000000000;;		Allowed bool `json:"allowed" protobuf:"varint,1,opt,name=allowed"`
0000000000000000000000000000000000000000;;		// Reason is optional.  It indicates why a request was allowed or denied.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,2,opt,name=reason"`
0000000000000000000000000000000000000000;;		// EvaluationError is an indication that some error occurred during the authorization check.
0000000000000000000000000000000000000000;;		// It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
0000000000000000000000000000000000000000;;		// For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		EvaluationError string `json:"evaluationError,omitempty" protobuf:"bytes,3,opt,name=evaluationError"`
0000000000000000000000000000000000000000;;	}
