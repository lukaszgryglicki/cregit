0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
07212a5f9807b1d4634161a3ae804abe134a1971;pkg/apis/authorization/v1/types_swagger_doc_generated.go[pkg/apis/authorization/v1/types_swagger_doc_generated.go][staging/src/k8s.io/api/authorization/v1/types_swagger_doc_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	var map_LocalSubjectAccessReview = map[string]string{
0000000000000000000000000000000000000000;;		"":       "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
0000000000000000000000000000000000000000;;		"spec":   "Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace you made the request against.  If empty, it is defaulted.",
0000000000000000000000000000000000000000;;		"status": "Status is filled in by the server and indicates whether the request is allowed or not",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (LocalSubjectAccessReview) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_LocalSubjectAccessReview
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NonResourceAttributes = map[string]string{
0000000000000000000000000000000000000000;;		"":     "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
0000000000000000000000000000000000000000;;		"path": "Path is the URL path of the request",
0000000000000000000000000000000000000000;;		"verb": "Verb is the standard HTTP verb",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NonResourceAttributes) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NonResourceAttributes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ResourceAttributes = map[string]string{
0000000000000000000000000000000000000000;;		"":            "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
0000000000000000000000000000000000000000;;		"namespace":   "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
0000000000000000000000000000000000000000;;		"verb":        "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
0000000000000000000000000000000000000000;;		"group":       "Group is the API Group of the Resource.  \"*\" means all.",
0000000000000000000000000000000000000000;;		"version":     "Version is the API Version of the Resource.  \"*\" means all.",
0000000000000000000000000000000000000000;;		"resource":    "Resource is one of the existing resource types.  \"*\" means all.",
0000000000000000000000000000000000000000;;		"subresource": "Subresource is one of the existing resource types.  \"\" means none.",
0000000000000000000000000000000000000000;;		"name":        "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ResourceAttributes) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ResourceAttributes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SelfSubjectAccessReview = map[string]string{
0000000000000000000000000000000000000000;;		"":       "SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means \"in all namespaces\".  Self is a special case, because users should always be able to check whether they can perform an action",
0000000000000000000000000000000000000000;;		"spec":   "Spec holds information about the request being evaluated.  user and groups must be empty",
0000000000000000000000000000000000000000;;		"status": "Status is filled in by the server and indicates whether the request is allowed or not",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SelfSubjectAccessReview) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SelfSubjectAccessReview
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SelfSubjectAccessReviewSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                      "SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
0000000000000000000000000000000000000000;;		"resourceAttributes":    "ResourceAuthorizationAttributes describes information for a resource access request",
0000000000000000000000000000000000000000;;		"nonResourceAttributes": "NonResourceAttributes describes information for a non-resource access request",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SelfSubjectAccessReviewSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SelfSubjectAccessReviewSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SubjectAccessReview = map[string]string{
0000000000000000000000000000000000000000;;		"":       "SubjectAccessReview checks whether or not a user or group can perform an action.",
0000000000000000000000000000000000000000;;		"spec":   "Spec holds information about the request being evaluated",
0000000000000000000000000000000000000000;;		"status": "Status is filled in by the server and indicates whether the request is allowed or not",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SubjectAccessReview) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SubjectAccessReview
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SubjectAccessReviewSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                      "SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set",
0000000000000000000000000000000000000000;;		"resourceAttributes":    "ResourceAuthorizationAttributes describes information for a resource access request",
0000000000000000000000000000000000000000;;		"nonResourceAttributes": "NonResourceAttributes describes information for a non-resource access request",
0000000000000000000000000000000000000000;;		"user":                  "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
0000000000000000000000000000000000000000;;		"groups":                "Groups is the groups you're testing for.",
0000000000000000000000000000000000000000;;		"extra":                 "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SubjectAccessReviewSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SubjectAccessReviewSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SubjectAccessReviewStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":                "SubjectAccessReviewStatus",
0000000000000000000000000000000000000000;;		"allowed":         "Allowed is required.  True if the action would be allowed, false otherwise.",
0000000000000000000000000000000000000000;;		"reason":          "Reason is optional.  It indicates why a request was allowed or denied.",
0000000000000000000000000000000000000000;;		"evaluationError": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SubjectAccessReviewStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SubjectAccessReviewStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS END HERE
