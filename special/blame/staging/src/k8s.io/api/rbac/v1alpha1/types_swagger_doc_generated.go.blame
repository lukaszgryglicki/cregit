0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
41d09af91494e0fe417fbc529b3fbc5cae0ac70f;pkg/apis/rbac/v1alpha1/types_swagger_doc_generated.go[pkg/apis/rbac/v1alpha1/types_swagger_doc_generated.go][staging/src/k8s.io/api/rbac/v1alpha1/types_swagger_doc_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	var map_ClusterRole = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"rules":    "Rules holds all the PolicyRules for this ClusterRole",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ClusterRole) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ClusterRole
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ClusterRoleBinding = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"subjects": "Subjects holds references to the objects the role applies to.",
0000000000000000000000000000000000000000;;		"roleRef":  "RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ClusterRoleBinding) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ClusterRoleBinding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ClusterRoleBindingList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ClusterRoleBindingList is a collection of ClusterRoleBindings",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of ClusterRoleBindings",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ClusterRoleBindingList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ClusterRoleBindingList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ClusterRoleList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ClusterRoleList is a collection of ClusterRoles",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of ClusterRoles",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ClusterRoleList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ClusterRoleList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PolicyRule = map[string]string{
0000000000000000000000000000000000000000;;		"":                "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
0000000000000000000000000000000000000000;;		"verbs":           "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
0000000000000000000000000000000000000000;;		"apiGroups":       "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
0000000000000000000000000000000000000000;;		"resources":       "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
0000000000000000000000000000000000000000;;		"resourceNames":   "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
0000000000000000000000000000000000000000;;		"nonResourceURLs": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path This name is intentionally different than the internal type so that the DefaultConvert works nicely and because the ordering may be different. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PolicyRule) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PolicyRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_Role = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"rules":    "Rules holds all the PolicyRules for this Role",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (Role) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_Role
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RoleBinding = map[string]string{
0000000000000000000000000000000000000000;;		"":         "RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"subjects": "Subjects holds references to the objects the role applies to.",
0000000000000000000000000000000000000000;;		"roleRef":  "RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RoleBinding) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RoleBinding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RoleBindingList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "RoleBindingList is a collection of RoleBindings",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of RoleBindings",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RoleBindingList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RoleBindingList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RoleList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "RoleList is a collection of Roles",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of Roles",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RoleList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RoleList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RoleRef = map[string]string{
0000000000000000000000000000000000000000;;		"":         "RoleRef contains information that points to the role being used",
0000000000000000000000000000000000000000;;		"apiGroup": "APIGroup is the group for the resource being referenced",
0000000000000000000000000000000000000000;;		"kind":     "Kind is the type of resource being referenced",
0000000000000000000000000000000000000000;;		"name":     "Name is the name of resource being referenced",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RoleRef) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RoleRef
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_Subject = map[string]string{
0000000000000000000000000000000000000000;;		"":           "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
0000000000000000000000000000000000000000;;		"kind":       "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
0000000000000000000000000000000000000000;;		"apiVersion": "APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects.",
0000000000000000000000000000000000000000;;		"name":       "Name of the object being referenced.",
0000000000000000000000000000000000000000;;		"namespace":  "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (Subject) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_Subject
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS END HERE
