0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c93e7f96b2ee0a4778780dfd1fc1e8a4d809bfea;pkg/api/v1/toleration.go[pkg/api/v1/toleration.go][staging/src/k8s.io/api/core/v1/toleration.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchToleration checks if the toleration matches tolerationToMatch. Tolerations are unique by <key,effect,operator,value>,
0000000000000000000000000000000000000000;;	// if the two tolerations have same <key,effect,operator,value> combination, regard as they match.
0000000000000000000000000000000000000000;;	// TODO: uniqueness check for tolerations in api validations.
0000000000000000000000000000000000000000;;	func (t *Toleration) MatchToleration(tolerationToMatch *Toleration) bool {
0000000000000000000000000000000000000000;;		return t.Key == tolerationToMatch.Key &&
0000000000000000000000000000000000000000;;			t.Effect == tolerationToMatch.Effect &&
0000000000000000000000000000000000000000;;			t.Operator == tolerationToMatch.Operator &&
0000000000000000000000000000000000000000;;			t.Value == tolerationToMatch.Value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToleratesTaint checks if the toleration tolerates the taint.
0000000000000000000000000000000000000000;;	// The matching follows the rules below:
0000000000000000000000000000000000000000;;	// (1) Empty toleration.effect means to match all taint effects,
0000000000000000000000000000000000000000;;	//     otherwise taint effect must equal to toleration.effect.
0000000000000000000000000000000000000000;;	// (2) If toleration.operator is 'Exists', it means to match all taint values.
0000000000000000000000000000000000000000;;	// (3) Empty toleration.key means to match all taint keys.
0000000000000000000000000000000000000000;;	//     If toleration.key is empty, toleration.operator must be 'Exists';
0000000000000000000000000000000000000000;;	//     this combination means to match all taint values and all taint keys.
0000000000000000000000000000000000000000;;	func (t *Toleration) ToleratesTaint(taint *Taint) bool {
0000000000000000000000000000000000000000;;		if len(t.Effect) > 0 && t.Effect != taint.Effect {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(t.Key) > 0 && t.Key != taint.Key {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Use proper defaulting when Toleration becomes a field of PodSpec
0000000000000000000000000000000000000000;;		switch t.Operator {
0000000000000000000000000000000000000000;;		// empty operator means Equal
0000000000000000000000000000000000000000;;		case "", TolerationOpEqual:
0000000000000000000000000000000000000000;;			return t.Value == taint.Value
0000000000000000000000000000000000000000;;		case TolerationOpExists:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
