0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
a0a6ff3e50600118609309ad715f48c98e5c6c73;pkg/api/v1/register.go[pkg/api/v1/register.go][staging/src/k8s.io/api/core/v1/register.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TODO: this file is going to be moved to k8s.io/api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name use in this package
0000000000000000000000000000000000000000;;	const GroupName = ""
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resource takes an unqualified resource and returns a Group qualified GroupResource
0000000000000000000000000000000000000000;;	func Resource(resource string) schema.GroupResource {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithResource(resource).GroupResource()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// We only register manually written functions here. The registration of the
0000000000000000000000000000000000000000;;		// generated functions takes place in the generated files. The separation
0000000000000000000000000000000000000000;;		// makes the code compile even when the generated files are missing.
0000000000000000000000000000000000000000;;		SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)
0000000000000000000000000000000000000000;;		AddToScheme   = SchemeBuilder.AddToScheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Adds the list of known types to api.Scheme.
0000000000000000000000000000000000000000;;	func addKnownTypes(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&Pod{},
0000000000000000000000000000000000000000;;			&PodList{},
0000000000000000000000000000000000000000;;			&PodStatusResult{},
0000000000000000000000000000000000000000;;			&PodTemplate{},
0000000000000000000000000000000000000000;;			&PodTemplateList{},
0000000000000000000000000000000000000000;;			&ReplicationController{},
0000000000000000000000000000000000000000;;			&ReplicationControllerList{},
0000000000000000000000000000000000000000;;			&Service{},
0000000000000000000000000000000000000000;;			&ServiceProxyOptions{},
0000000000000000000000000000000000000000;;			&ServiceList{},
0000000000000000000000000000000000000000;;			&Endpoints{},
0000000000000000000000000000000000000000;;			&EndpointsList{},
0000000000000000000000000000000000000000;;			&Node{},
0000000000000000000000000000000000000000;;			&NodeList{},
0000000000000000000000000000000000000000;;			&NodeProxyOptions{},
0000000000000000000000000000000000000000;;			&Binding{},
0000000000000000000000000000000000000000;;			&Event{},
0000000000000000000000000000000000000000;;			&EventList{},
0000000000000000000000000000000000000000;;			&List{},
0000000000000000000000000000000000000000;;			&LimitRange{},
0000000000000000000000000000000000000000;;			&LimitRangeList{},
0000000000000000000000000000000000000000;;			&ResourceQuota{},
0000000000000000000000000000000000000000;;			&ResourceQuotaList{},
0000000000000000000000000000000000000000;;			&Namespace{},
0000000000000000000000000000000000000000;;			&NamespaceList{},
0000000000000000000000000000000000000000;;			&Secret{},
0000000000000000000000000000000000000000;;			&SecretList{},
0000000000000000000000000000000000000000;;			&ServiceAccount{},
0000000000000000000000000000000000000000;;			&ServiceAccountList{},
0000000000000000000000000000000000000000;;			&PersistentVolume{},
0000000000000000000000000000000000000000;;			&PersistentVolumeList{},
0000000000000000000000000000000000000000;;			&PersistentVolumeClaim{},
0000000000000000000000000000000000000000;;			&PersistentVolumeClaimList{},
0000000000000000000000000000000000000000;;			&PodAttachOptions{},
0000000000000000000000000000000000000000;;			&PodLogOptions{},
0000000000000000000000000000000000000000;;			&PodExecOptions{},
0000000000000000000000000000000000000000;;			&PodPortForwardOptions{},
0000000000000000000000000000000000000000;;			&PodProxyOptions{},
0000000000000000000000000000000000000000;;			&ComponentStatus{},
0000000000000000000000000000000000000000;;			&ComponentStatusList{},
0000000000000000000000000000000000000000;;			&SerializedReference{},
0000000000000000000000000000000000000000;;			&RangeAllocation{},
0000000000000000000000000000000000000000;;			&ConfigMap{},
0000000000000000000000000000000000000000;;			&ConfigMapList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add common types
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion, &metav1.Status{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add the watch version that applies
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
