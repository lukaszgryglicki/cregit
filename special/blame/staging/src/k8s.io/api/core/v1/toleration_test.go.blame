0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c93e7f96b2ee0a4778780dfd1fc1e8a4d809bfea;pkg/api/v1/toleration_test.go[pkg/api/v1/toleration_test.go][staging/src/k8s.io/api/core/v1/toleration_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTolerationToleratesTaint(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			description     string
0000000000000000000000000000000000000000;;			toleration      Toleration
0000000000000000000000000000000000000000;;			taint           Taint
0000000000000000000000000000000000000000;;			expectTolerated bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same key and effect, and operator is Exists, and taint has no value, expect tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "foo",
0000000000000000000000000000000000000000;;					Operator: TolerationOpExists,
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same key and effect, and operator is Exists, and taint has some value, expect tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "foo",
0000000000000000000000000000000000000000;;					Operator: TolerationOpExists,
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same effect, toleration has empty key and operator is Exists, means match all taints, expect tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "",
0000000000000000000000000000000000000000;;					Operator: TolerationOpExists,
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same key, effect and value, and operator is Equal, expect tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "foo",
0000000000000000000000000000000000000000;;					Operator: TolerationOpEqual,
0000000000000000000000000000000000000000;;					Value:    "bar",
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same key and effect, but different values, and operator is Equal, expect not tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "foo",
0000000000000000000000000000000000000000;;					Operator: TolerationOpEqual,
0000000000000000000000000000000000000000;;					Value:    "value1",
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "value2",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "toleration and taint have the same key and value, but different effects, and operator is Equal, expect not tolerated",
0000000000000000000000000000000000000000;;				toleration: Toleration{
0000000000000000000000000000000000000000;;					Key:      "foo",
0000000000000000000000000000000000000000;;					Operator: TolerationOpEqual,
0000000000000000000000000000000000000000;;					Value:    "bar",
0000000000000000000000000000000000000000;;					Effect:   TaintEffectNoSchedule,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				taint: Taint{
0000000000000000000000000000000000000000;;					Key:    "foo",
0000000000000000000000000000000000000000;;					Value:  "bar",
0000000000000000000000000000000000000000;;					Effect: TaintEffectNoExecute,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectTolerated: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			if tolerated := tc.toleration.ToleratesTaint(&tc.taint); tc.expectTolerated != tolerated {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expect %v, got %v: toleration %+v, taint %s", tc.description, tc.expectTolerated, tolerated, tc.toleration, tc.taint.ToString())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
