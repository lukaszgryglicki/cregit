0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0662f350bf7d7627bb70fbddb7e6d7f125821b7d;pkg/apis/networking/v1/types.go[pkg/apis/networking/v1/types.go][staging/src/k8s.io/api/networking/v1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicy describes what network traffic is allowed for a set of Pods
0000000000000000000000000000000000000000;;	type NetworkPolicy struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior for this NetworkPolicy.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec NetworkPolicySpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicySpec provides the specification of a NetworkPolicy
0000000000000000000000000000000000000000;;	type NetworkPolicySpec struct {
0000000000000000000000000000000000000000;;		// Selects the pods to which this NetworkPolicy object applies. The array of
0000000000000000000000000000000000000000;;		// ingress rules is applied to any pods selected by this field. Multiple network
0000000000000000000000000000000000000000;;		// policies can select the same set of pods. In this case, the ingress rules for
0000000000000000000000000000000000000000;;		// each are combined additively. This field is NOT optional and follows standard
0000000000000000000000000000000000000000;;		// label selector semantics. An empty podSelector matches all pods in this
0000000000000000000000000000000000000000;;		// namespace.
0000000000000000000000000000000000000000;;		PodSelector metav1.LabelSelector `json:"podSelector" protobuf:"bytes,1,opt,name=podSelector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of ingress rules to be applied to the selected pods. Traffic is allowed to
0000000000000000000000000000000000000000;;		// a pod if there are no NetworkPolicies selecting the pod
0000000000000000000000000000000000000000;;		// (and cluster policy otherwise allows the traffic), OR if the traffic source is
0000000000000000000000000000000000000000;;		// the pod's local node, OR if the traffic matches at least one ingress rule
0000000000000000000000000000000000000000;;		// across all of the NetworkPolicy objects whose podSelector matches the pod. If
0000000000000000000000000000000000000000;;		// this field is empty then this NetworkPolicy does not allow any traffic (and serves
0000000000000000000000000000000000000000;;		// solely to ensure that the pods it selects are isolated by default)
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Ingress []NetworkPolicyIngressRule `json:"ingress,omitempty" protobuf:"bytes,2,rep,name=ingress"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods
0000000000000000000000000000000000000000;;	// matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
0000000000000000000000000000000000000000;;	type NetworkPolicyIngressRule struct {
0000000000000000000000000000000000000000;;		// List of ports which should be made accessible on the pods selected for this
0000000000000000000000000000000000000000;;		// rule. Each item in this list is combined using a logical OR. If this field is
0000000000000000000000000000000000000000;;		// empty or missing, this rule matches all ports (traffic not restricted by port).
0000000000000000000000000000000000000000;;		// If this field is present and contains at least one item, then this rule allows
0000000000000000000000000000000000000000;;		// traffic only if the traffic matches at least one port in the list.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Ports []NetworkPolicyPort `json:"ports,omitempty" protobuf:"bytes,1,rep,name=ports"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of sources which should be able to access the pods selected for this rule.
0000000000000000000000000000000000000000;;		// Items in this list are combined using a logical OR operation. If this field is
0000000000000000000000000000000000000000;;		// empty or missing, this rule matches all sources (traffic not restricted by
0000000000000000000000000000000000000000;;		// source). If this field is present and contains at least on item, this rule
0000000000000000000000000000000000000000;;		// allows traffic only if the traffic matches at least one item in the from list.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		From []NetworkPolicyPeer `json:"from,omitempty" protobuf:"bytes,2,rep,name=from"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicyPort describes a port to allow traffic on
0000000000000000000000000000000000000000;;	type NetworkPolicyPort struct {
0000000000000000000000000000000000000000;;		// The protocol (TCP or UDP) which traffic must match. If not specified, this
0000000000000000000000000000000000000000;;		// field defaults to TCP.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Protocol *v1.Protocol `json:"protocol,omitempty" protobuf:"bytes,1,opt,name=protocol,casttype=k8s.io/api/core/v1.Protocol"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The port on the given protocol. This can either be a numerical or named port on
0000000000000000000000000000000000000000;;		// a pod. If this field is not provided, this matches all port names and numbers.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Port *intstr.IntOrString `json:"port,omitempty" protobuf:"bytes,2,opt,name=port"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields
0000000000000000000000000000000000000000;;	// must be specified.
0000000000000000000000000000000000000000;;	type NetworkPolicyPeer struct {
0000000000000000000000000000000000000000;;		// This is a label selector which selects Pods in this namespace. This field
0000000000000000000000000000000000000000;;		// follows standard label selector semantics. If present but empty, this selector
0000000000000000000000000000000000000000;;		// selects all pods in this namespace.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		PodSelector *metav1.LabelSelector `json:"podSelector,omitempty" protobuf:"bytes,1,opt,name=podSelector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Selects Namespaces using cluster scoped-labels. This matches all pods in all
0000000000000000000000000000000000000000;;		// namespaces selected by this label selector. This field follows standard label
0000000000000000000000000000000000000000;;		// selector semantics. If present but empty, this selector selects all namespaces.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NamespaceSelector *metav1.LabelSelector `json:"namespaceSelector,omitempty" protobuf:"bytes,2,opt,name=namespaceSelector"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkPolicyList is a list of NetworkPolicy objects.
0000000000000000000000000000000000000000;;	type NetworkPolicyList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Items is a list of schema objects.
0000000000000000000000000000000000000000;;		Items []NetworkPolicy `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
