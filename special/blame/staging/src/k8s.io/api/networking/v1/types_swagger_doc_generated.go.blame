0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
3f5d5c7b9be21ad174dd8d3b7f0029e7d8b99d39;pkg/apis/networking/v1/types_swagger_doc_generated.go[pkg/apis/networking/v1/types_swagger_doc_generated.go][staging/src/k8s.io/api/networking/v1/types_swagger_doc_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	var map_NetworkPolicy = map[string]string{
0000000000000000000000000000000000000000;;		"":         "NetworkPolicy describes what network traffic is allowed for a set of Pods",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "Specification of the desired behavior for this NetworkPolicy.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyIngressRule = map[string]string{
0000000000000000000000000000000000000000;;		"":      "NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.",
0000000000000000000000000000000000000000;;		"ports": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
0000000000000000000000000000000000000000;;		"from":  "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyIngressRule) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyIngressRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "NetworkPolicyList is a list of NetworkPolicy objects.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of schema objects.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyPeer = map[string]string{
0000000000000000000000000000000000000000;;		"":                  "NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.",
0000000000000000000000000000000000000000;;		"podSelector":       "This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.",
0000000000000000000000000000000000000000;;		"namespaceSelector": "Selects Namespaces using cluster scoped-labels. This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyPeer) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyPeer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyPort = map[string]string{
0000000000000000000000000000000000000000;;		"":         "NetworkPolicyPort describes a port to allow traffic on",
0000000000000000000000000000000000000000;;		"protocol": "The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
0000000000000000000000000000000000000000;;		"port":     "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyPort) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyPort
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicySpec = map[string]string{
0000000000000000000000000000000000000000;;		"":            "NetworkPolicySpec provides the specification of a NetworkPolicy",
0000000000000000000000000000000000000000;;		"podSelector": "Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
0000000000000000000000000000000000000000;;		"ingress":     "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicySpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicySpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS END HERE
