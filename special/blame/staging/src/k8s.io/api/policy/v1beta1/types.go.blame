0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
13863151d5d166919a3b81990ee052f7b1458363;pkg/apis/policy/v1beta1/types.go[pkg/apis/policy/v1beta1/types.go][staging/src/k8s.io/api/policy/v1beta1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
0000000000000000000000000000000000000000;;	type PodDisruptionBudgetSpec struct {
0000000000000000000000000000000000000000;;		// An eviction is allowed if at least "minAvailable" pods selected by
0000000000000000000000000000000000000000;;		// "selector" will still be available after the eviction, i.e. even in the
0000000000000000000000000000000000000000;;		// absence of the evicted pod.  So for example you can prevent all voluntary
0000000000000000000000000000000000000000;;		// evictions by specifying "100%".
0000000000000000000000000000000000000000;;		MinAvailable *intstr.IntOrString `json:"minAvailable,omitempty" protobuf:"bytes,1,opt,name=minAvailable"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Label query over pods whose evictions are managed by the disruption
0000000000000000000000000000000000000000;;		// budget.
0000000000000000000000000000000000000000;;		Selector *metav1.LabelSelector `json:"selector,omitempty" protobuf:"bytes,2,opt,name=selector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// An eviction is allowed if at most "maxUnavailable" pods selected by
0000000000000000000000000000000000000000;;		// "selector" are unavailable after the eviction, i.e. even in absence of
0000000000000000000000000000000000000000;;		// the evicted pod. For example, one can prevent all voluntary evictions
0000000000000000000000000000000000000000;;		// by specifying 0. This is a mutually exclusive setting with "minAvailable".
0000000000000000000000000000000000000000;;		MaxUnavailable *intstr.IntOrString `json:"maxUnavailable,omitempty" protobuf:"bytes,3,opt,name=maxUnavailable"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodDisruptionBudgetStatus represents information about the status of a
0000000000000000000000000000000000000000;;	// PodDisruptionBudget. Status may trail the actual state of a system.
0000000000000000000000000000000000000000;;	type PodDisruptionBudgetStatus struct {
0000000000000000000000000000000000000000;;		// Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other
0000000000000000000000000000000000000000;;		// status informatio is valid only if observedGeneration equals to PDB's object generation.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ObservedGeneration int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisruptedPods contains information about pods whose eviction was
0000000000000000000000000000000000000000;;		// processed by the API server eviction subresource handler but has not
0000000000000000000000000000000000000000;;		// yet been observed by the PodDisruptionBudget controller.
0000000000000000000000000000000000000000;;		// A pod will be in this map from the time when the API server processed the
0000000000000000000000000000000000000000;;		// eviction request to the time when the pod is seen by PDB controller
0000000000000000000000000000000000000000;;		// as having been marked for deletion (or after a timeout). The key in the map is the name of the pod
0000000000000000000000000000000000000000;;		// and the value is the time when the API server processed the eviction request. If
0000000000000000000000000000000000000000;;		// the deletion didn't occur and a pod is still there it will be removed from
0000000000000000000000000000000000000000;;		// the list automatically by PodDisruptionBudget controller after some time.
0000000000000000000000000000000000000000;;		// If everything goes smooth this map should be empty for the most of the time.
0000000000000000000000000000000000000000;;		// Large number of entries in the map may indicate problems with pod deletions.
0000000000000000000000000000000000000000;;		DisruptedPods map[string]metav1.Time `json:"disruptedPods" protobuf:"bytes,2,rep,name=disruptedPods"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number of pod disruptions that are currently allowed.
0000000000000000000000000000000000000000;;		PodDisruptionsAllowed int32 `json:"disruptionsAllowed" protobuf:"varint,3,opt,name=disruptionsAllowed"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// current number of healthy pods
0000000000000000000000000000000000000000;;		CurrentHealthy int32 `json:"currentHealthy" protobuf:"varint,4,opt,name=currentHealthy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// minimum desired number of healthy pods
0000000000000000000000000000000000000000;;		DesiredHealthy int32 `json:"desiredHealthy" protobuf:"varint,5,opt,name=desiredHealthy"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// total number of pods counted by this disruption budget
0000000000000000000000000000000000000000;;		ExpectedPods int32 `json:"expectedPods" protobuf:"varint,6,opt,name=expectedPods"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
0000000000000000000000000000000000000000;;	type PodDisruptionBudget struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of the PodDisruptionBudget.
0000000000000000000000000000000000000000;;		Spec PodDisruptionBudgetSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;		// Most recently observed status of the PodDisruptionBudget.
0000000000000000000000000000000000000000;;		Status PodDisruptionBudgetStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
0000000000000000000000000000000000000000;;	type PodDisruptionBudgetList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;		Items           []PodDisruptionBudget `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +noMethods=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Eviction evicts a pod from its node subject to certain policies and safety constraints.
0000000000000000000000000000000000000000;;	// This is a subresource of Pod.  A request to cause such an eviction is
0000000000000000000000000000000000000000;;	// created by POSTing to .../pods/<pod name>/evictions.
0000000000000000000000000000000000000000;;	type Eviction struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ObjectMeta describes the pod that is being evicted.
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeleteOptions may be provided
0000000000000000000000000000000000000000;;		DeleteOptions *metav1.DeleteOptions `json:"deleteOptions,omitempty" protobuf:"bytes,2,opt,name=deleteOptions"`
0000000000000000000000000000000000000000;;	}
