0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c5b7a0af324a4b0948b562f2cde6e7a6c76795a5;pkg/expapi/v1/types_swagger_doc_generated.go[pkg/expapi/v1/types_swagger_doc_generated.go][staging/src/k8s.io/api/extensions/v1beta1/types_swagger_doc_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	var map_APIVersion = map[string]string{
0000000000000000000000000000000000000000;;		"":     "An APIVersion represents a single concrete version of an object model.",
0000000000000000000000000000000000000000;;		"name": "Name of this version (e.g. 'v1').",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (APIVersion) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_APIVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_CustomMetricCurrentStatus = map[string]string{
0000000000000000000000000000000000000000;;		"name":  "Custom Metric name.",
0000000000000000000000000000000000000000;;		"value": "Custom Metric value (average).",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomMetricCurrentStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_CustomMetricCurrentStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_CustomMetricTarget = map[string]string{
0000000000000000000000000000000000000000;;		"":      "Alpha-level support for Custom Metrics in HPA (as annotations).",
0000000000000000000000000000000000000000;;		"name":  "Custom Metric name.",
0000000000000000000000000000000000000000;;		"value": "Custom Metric value (average).",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomMetricTarget) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_CustomMetricTarget
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DaemonSet = map[string]string{
0000000000000000000000000000000000000000;;		"":         "DaemonSet represents the configuration of a daemon set.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;		"status":   "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DaemonSet) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DaemonSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DaemonSetList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "DaemonSetList is a collection of daemon sets.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "A list of daemon sets.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DaemonSetList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DaemonSetList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DaemonSetSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                     "DaemonSetSpec is the specification of a daemon set.",
0000000000000000000000000000000000000000;;		"selector":             "A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
0000000000000000000000000000000000000000;;		"template":             "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
0000000000000000000000000000000000000000;;		"updateStrategy":       "An update strategy to replace existing DaemonSet pods with new pods.",
0000000000000000000000000000000000000000;;		"minReadySeconds":      "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
0000000000000000000000000000000000000000;;		"templateGeneration":   "DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.",
0000000000000000000000000000000000000000;;		"revisionHistoryLimit": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DaemonSetSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DaemonSetSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DaemonSetStatus = map[string]string{
0000000000000000000000000000000000000000;;		"": "DaemonSetStatus represents the current status of a daemon set.",
0000000000000000000000000000000000000000;;		"currentNumberScheduled": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
0000000000000000000000000000000000000000;;		"numberMisscheduled":     "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
0000000000000000000000000000000000000000;;		"desiredNumberScheduled": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
0000000000000000000000000000000000000000;;		"numberReady":            "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
0000000000000000000000000000000000000000;;		"observedGeneration":     "The most recent generation observed by the daemon set controller.",
0000000000000000000000000000000000000000;;		"updatedNumberScheduled": "The total number of nodes that are running updated daemon pod",
0000000000000000000000000000000000000000;;		"numberAvailable":        "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
0000000000000000000000000000000000000000;;		"numberUnavailable":      "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
0000000000000000000000000000000000000000;;		"collisionCount":         "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DaemonSetStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DaemonSetStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DaemonSetUpdateStrategy = map[string]string{
0000000000000000000000000000000000000000;;		"type":          "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is OnDelete.",
0000000000000000000000000000000000000000;;		"rollingUpdate": "Rolling update config params. Present only if type = \"RollingUpdate\".",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DaemonSetUpdateStrategy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DaemonSetUpdateStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_Deployment = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Deployment enables declarative updates for Pods and ReplicaSets.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object metadata.",
0000000000000000000000000000000000000000;;		"spec":     "Specification of the desired behavior of the Deployment.",
0000000000000000000000000000000000000000;;		"status":   "Most recently observed status of the Deployment.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (Deployment) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_Deployment
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentCondition = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "DeploymentCondition describes the state of a deployment at a certain point.",
0000000000000000000000000000000000000000;;		"type":               "Type of deployment condition.",
0000000000000000000000000000000000000000;;		"status":             "Status of the condition, one of True, False, Unknown.",
0000000000000000000000000000000000000000;;		"lastUpdateTime":     "The last time this condition was updated.",
0000000000000000000000000000000000000000;;		"lastTransitionTime": "Last time the condition transitioned from one status to another.",
0000000000000000000000000000000000000000;;		"reason":             "The reason for the condition's last transition.",
0000000000000000000000000000000000000000;;		"message":            "A human readable message indicating details about the transition.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentCondition) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentCondition
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "DeploymentList is a list of Deployments.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is the list of Deployments.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentRollback = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "DeploymentRollback stores the information required to rollback a deployment.",
0000000000000000000000000000000000000000;;		"name":               "Required: This must match the Name of a deployment.",
0000000000000000000000000000000000000000;;		"updatedAnnotations": "The annotations to be updated to a deployment",
0000000000000000000000000000000000000000;;		"rollbackTo":         "The config of this deployment rollback.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentRollback) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentRollback
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                        "DeploymentSpec is the specification of the desired behavior of the Deployment.",
0000000000000000000000000000000000000000;;		"replicas":                "Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.",
0000000000000000000000000000000000000000;;		"selector":                "Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.",
0000000000000000000000000000000000000000;;		"template":                "Template describes the pods that will be created.",
0000000000000000000000000000000000000000;;		"strategy":                "The deployment strategy to use to replace existing pods with new ones.",
0000000000000000000000000000000000000000;;		"minReadySeconds":         "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
0000000000000000000000000000000000000000;;		"revisionHistoryLimit":    "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
0000000000000000000000000000000000000000;;		"paused":                  "Indicates that the deployment is paused and will not be processed by the deployment controller.",
0000000000000000000000000000000000000000;;		"rollbackTo":              "The config this deployment is rolling back to. Will be cleared after rollback is done.",
0000000000000000000000000000000000000000;;		"progressDeadlineSeconds": "The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":                    "DeploymentStatus is the most recently observed status of the Deployment.",
0000000000000000000000000000000000000000;;		"observedGeneration":  "The generation observed by the deployment controller.",
0000000000000000000000000000000000000000;;		"replicas":            "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
0000000000000000000000000000000000000000;;		"updatedReplicas":     "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
0000000000000000000000000000000000000000;;		"readyReplicas":       "Total number of ready pods targeted by this deployment.",
0000000000000000000000000000000000000000;;		"availableReplicas":   "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
0000000000000000000000000000000000000000;;		"unavailableReplicas": "Total number of unavailable pods targeted by this deployment.",
0000000000000000000000000000000000000000;;		"conditions":          "Represents the latest available observations of a deployment's current state.",
0000000000000000000000000000000000000000;;		"collisionCount":      "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_DeploymentStrategy = map[string]string{
0000000000000000000000000000000000000000;;		"":              "DeploymentStrategy describes how to replace existing pods with new ones.",
0000000000000000000000000000000000000000;;		"type":          "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
0000000000000000000000000000000000000000;;		"rollingUpdate": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (DeploymentStrategy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_DeploymentStrategy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_FSGroupStrategyOptions = map[string]string{
0000000000000000000000000000000000000000;;		"":       "FSGroupStrategyOptions defines the strategy type and options used to create the strategy.",
0000000000000000000000000000000000000000;;		"rule":   "Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.",
0000000000000000000000000000000000000000;;		"ranges": "Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (FSGroupStrategyOptions) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_FSGroupStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HTTPIngressPath = map[string]string{
0000000000000000000000000000000000000000;;		"":        "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
0000000000000000000000000000000000000000;;		"path":    "Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
0000000000000000000000000000000000000000;;		"backend": "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HTTPIngressPath) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HTTPIngressPath
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HTTPIngressRuleValue = map[string]string{
0000000000000000000000000000000000000000;;		"":      "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
0000000000000000000000000000000000000000;;		"paths": "A collection of paths that map requests to backends.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HTTPIngressRuleValue) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HTTPIngressRuleValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HostPortRange = map[string]string{
0000000000000000000000000000000000000000;;		"":    "Host Port Range defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.",
0000000000000000000000000000000000000000;;		"min": "min is the start of the range, inclusive.",
0000000000000000000000000000000000000000;;		"max": "max is the end of the range, inclusive.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HostPortRange) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HostPortRange
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IDRange = map[string]string{
0000000000000000000000000000000000000000;;		"":    "ID Range provides a min/max of an allowed range of IDs.",
0000000000000000000000000000000000000000;;		"min": "Min is the start of the range, inclusive.",
0000000000000000000000000000000000000000;;		"max": "Max is the end of the range, inclusive.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IDRange) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IDRange
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_Ingress = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;		"status":   "Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (Ingress) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_Ingress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressBackend = map[string]string{
0000000000000000000000000000000000000000;;		"":            "IngressBackend describes all endpoints for a given service and port.",
0000000000000000000000000000000000000000;;		"serviceName": "Specifies the name of the referenced service.",
0000000000000000000000000000000000000000;;		"servicePort": "Specifies the port of the referenced service.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressBackend) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressBackend
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "IngressList is a collection of Ingress.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "Items is the list of Ingress.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressRule = map[string]string{
0000000000000000000000000000000000000000;;		"":     "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
0000000000000000000000000000000000000000;;		"host": "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the\n\t  IP in the Spec of the parent Ingress.\n2. The `:` delimiter is not respected because ports are not allowed.\n\t  Currently the port of an Ingress is implicitly :80 for http and\n\t  :443 for https.\nBoth these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressRule) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressRuleValue = map[string]string{
0000000000000000000000000000000000000000;;		"": "IngressRuleValue represents a rule to apply against incoming requests. If the rule is satisfied, the request is routed to the specified backend. Currently mixing different types of rules in a single Ingress is disallowed, so exactly one of the following must be set.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressRuleValue) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressRuleValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":        "IngressSpec describes the Ingress the user wishes to exist.",
0000000000000000000000000000000000000000;;		"backend": "A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.",
0000000000000000000000000000000000000000;;		"tls":     "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
0000000000000000000000000000000000000000;;		"rules":   "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":             "IngressStatus describe the current state of the Ingress.",
0000000000000000000000000000000000000000;;		"loadBalancer": "LoadBalancer contains the current status of the load-balancer.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_IngressTLS = map[string]string{
0000000000000000000000000000000000000000;;		"":           "IngressTLS describes the transport layer security associated with an Ingress.",
0000000000000000000000000000000000000000;;		"hosts":      "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
0000000000000000000000000000000000000000;;		"secretName": "SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (IngressTLS) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_IngressTLS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicy = map[string]string{
0000000000000000000000000000000000000000;;		"":         "NetworkPolicy describes what network traffic is allowed for a set of Pods",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "Specification of the desired behavior for this NetworkPolicy.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyIngressRule = map[string]string{
0000000000000000000000000000000000000000;;		"":      "This NetworkPolicyIngressRule matches traffic if and only if the traffic matches both ports AND from.",
0000000000000000000000000000000000000000;;		"ports": "List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
0000000000000000000000000000000000000000;;		"from":  "List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyIngressRule) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyIngressRule
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Network Policy List is a list of NetworkPolicy objects.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of schema objects.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyPeer = map[string]string{
0000000000000000000000000000000000000000;;		"podSelector":       "This is a label selector which selects Pods in this namespace. This field follows standard label selector semantics. If present but empty, this selector selects all pods in this namespace.",
0000000000000000000000000000000000000000;;		"namespaceSelector": "Selects Namespaces using cluster scoped-labels.  This matches all pods in all namespaces selected by this label selector. This field follows standard label selector semantics. If present but empty, this selector selects all namespaces.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyPeer) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyPeer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicyPort = map[string]string{
0000000000000000000000000000000000000000;;		"protocol": "Optional.  The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.",
0000000000000000000000000000000000000000;;		"port":     "If specified, the port on the given protocol.  This can either be a numerical or named port on a pod.  If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicyPort) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicyPort
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_NetworkPolicySpec = map[string]string{
0000000000000000000000000000000000000000;;		"podSelector": "Selects the pods to which this NetworkPolicy object applies.  The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods.  In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.",
0000000000000000000000000000000000000000;;		"ingress":     "List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default).",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (NetworkPolicySpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_NetworkPolicySpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PodSecurityPolicy = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Pod Security Policy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "spec defines the policy enforced.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PodSecurityPolicy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PodSecurityPolicy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PodSecurityPolicyList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "Pod Security Policy List is a list of PodSecurityPolicy objects.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "Items is a list of schema objects.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PodSecurityPolicyList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PodSecurityPolicyList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PodSecurityPolicySpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                         "Pod Security Policy Spec defines the policy enforced.",
0000000000000000000000000000000000000000;;		"privileged":               "privileged determines if a pod can request to be run as privileged.",
0000000000000000000000000000000000000000;;		"defaultAddCapabilities":   "DefaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capabiility in both DefaultAddCapabilities and RequiredDropCapabilities.",
0000000000000000000000000000000000000000;;		"requiredDropCapabilities": "RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.",
0000000000000000000000000000000000000000;;		"allowedCapabilities":      "AllowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both AllowedCapabilities and RequiredDropCapabilities.",
0000000000000000000000000000000000000000;;		"volumes":                  "volumes is a white list of allowed volume plugins.  Empty indicates that all plugins may be used.",
0000000000000000000000000000000000000000;;		"hostNetwork":              "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.",
0000000000000000000000000000000000000000;;		"hostPorts":                "hostPorts determines which host port ranges are allowed to be exposed.",
0000000000000000000000000000000000000000;;		"hostPID":                  "hostPID determines if the policy allows the use of HostPID in the pod spec.",
0000000000000000000000000000000000000000;;		"hostIPC":                  "hostIPC determines if the policy allows the use of HostIPC in the pod spec.",
0000000000000000000000000000000000000000;;		"seLinux":                  "seLinux is the strategy that will dictate the allowable labels that may be set.",
0000000000000000000000000000000000000000;;		"runAsUser":                "runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.",
0000000000000000000000000000000000000000;;		"supplementalGroups":       "SupplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.",
0000000000000000000000000000000000000000;;		"fsGroup":                  "FSGroup is the strategy that will dictate what fs group is used by the SecurityContext.",
0000000000000000000000000000000000000000;;		"readOnlyRootFilesystem":   "ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PodSecurityPolicySpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PodSecurityPolicySpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicaSet = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ReplicaSet represents the configuration of a ReplicaSet.",
0000000000000000000000000000000000000000;;		"metadata": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;		"status":   "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicaSet) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicaSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicaSetCondition = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "ReplicaSetCondition describes the state of a replica set at a certain point.",
0000000000000000000000000000000000000000;;		"type":               "Type of replica set condition.",
0000000000000000000000000000000000000000;;		"status":             "Status of the condition, one of True, False, Unknown.",
0000000000000000000000000000000000000000;;		"lastTransitionTime": "The last time the condition transitioned from one status to another.",
0000000000000000000000000000000000000000;;		"reason":             "The reason for the condition's last transition.",
0000000000000000000000000000000000000000;;		"message":            "A human readable message indicating details about the transition.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicaSetCondition) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicaSetCondition
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicaSetList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ReplicaSetList is a collection of ReplicaSets.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
0000000000000000000000000000000000000000;;		"items":    "List of ReplicaSets. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicaSetList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicaSetList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicaSetSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":                "ReplicaSetSpec is the specification of a ReplicaSet.",
0000000000000000000000000000000000000000;;		"replicas":        "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
0000000000000000000000000000000000000000;;		"minReadySeconds": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
0000000000000000000000000000000000000000;;		"selector":        "Selector is a label query over pods that should match the replica count. If the selector is empty, it is defaulted to the labels present on the pod template. Label keys and values that must match in order to be controlled by this replica set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
0000000000000000000000000000000000000000;;		"template":        "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicaSetSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicaSetSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicaSetStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":                     "ReplicaSetStatus represents the current status of a ReplicaSet.",
0000000000000000000000000000000000000000;;		"replicas":             "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
0000000000000000000000000000000000000000;;		"fullyLabeledReplicas": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
0000000000000000000000000000000000000000;;		"readyReplicas":        "The number of ready replicas for this replica set.",
0000000000000000000000000000000000000000;;		"availableReplicas":    "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
0000000000000000000000000000000000000000;;		"observedGeneration":   "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
0000000000000000000000000000000000000000;;		"conditions":           "Represents the latest available observations of a replica set's current state.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicaSetStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicaSetStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ReplicationControllerDummy = map[string]string{
0000000000000000000000000000000000000000;;		"": "Dummy definition",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ReplicationControllerDummy) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ReplicationControllerDummy
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RollbackConfig = map[string]string{
0000000000000000000000000000000000000000;;		"revision": "The revision to rollback to. If set to 0, rollback to the last revision.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RollbackConfig) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RollbackConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RollingUpdateDaemonSet = map[string]string{
0000000000000000000000000000000000000000;;		"":               "Spec to control the desired behavior of daemon set rolling update.",
0000000000000000000000000000000000000000;;		"maxUnavailable": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RollingUpdateDaemonSet) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RollingUpdateDaemonSet
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RollingUpdateDeployment = map[string]string{
0000000000000000000000000000000000000000;;		"":               "Spec to control the desired behavior of rolling update.",
0000000000000000000000000000000000000000;;		"maxUnavailable": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. By default, a fixed value of 1 is used. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
0000000000000000000000000000000000000000;;		"maxSurge":       "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. By default, a value of 1 is used. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RollingUpdateDeployment) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RollingUpdateDeployment
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_RunAsUserStrategyOptions = map[string]string{
0000000000000000000000000000000000000000;;		"":       "Run A sUser Strategy Options defines the strategy type and any options used to create the strategy.",
0000000000000000000000000000000000000000;;		"rule":   "Rule is the strategy that will dictate the allowable RunAsUser values that may be set.",
0000000000000000000000000000000000000000;;		"ranges": "Ranges are the allowed ranges of uids that may be used.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (RunAsUserStrategyOptions) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_RunAsUserStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SELinuxStrategyOptions = map[string]string{
0000000000000000000000000000000000000000;;		"":               "SELinux  Strategy Options defines the strategy type and any options used to create the strategy.",
0000000000000000000000000000000000000000;;		"rule":           "type is the strategy that will dictate the allowable labels that may be set.",
0000000000000000000000000000000000000000;;		"seLinuxOptions": "seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SELinuxStrategyOptions) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SELinuxStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_Scale = map[string]string{
0000000000000000000000000000000000000000;;		"":         "represents a scaling request for a resource.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.",
0000000000000000000000000000000000000000;;		"spec":     "defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
0000000000000000000000000000000000000000;;		"status":   "current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (Scale) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_Scale
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ScaleSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":         "describes the attributes of a scale subresource",
0000000000000000000000000000000000000000;;		"replicas": "desired number of instances for the scaled object.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ScaleSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ScaleSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ScaleStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":               "represents the current status of a scale subresource.",
0000000000000000000000000000000000000000;;		"replicas":       "actual number of observed instances of the scaled object.",
0000000000000000000000000000000000000000;;		"selector":       "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
0000000000000000000000000000000000000000;;		"targetSelector": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ScaleStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ScaleStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_SupplementalGroupsStrategyOptions = map[string]string{
0000000000000000000000000000000000000000;;		"":       "SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.",
0000000000000000000000000000000000000000;;		"rule":   "Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.",
0000000000000000000000000000000000000000;;		"ranges": "Ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SupplementalGroupsStrategyOptions) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_SupplementalGroupsStrategyOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ThirdPartyResource = map[string]string{
0000000000000000000000000000000000000000;;		"":            "A ThirdPartyResource is a generic representation of a resource, it is used by add-ons and plugins to add new resource types to the API.  It consists of one or more Versions of the api.",
0000000000000000000000000000000000000000;;		"metadata":    "Standard object metadata",
0000000000000000000000000000000000000000;;		"description": "Description is the description of this object.",
0000000000000000000000000000000000000000;;		"versions":    "Versions are versions for this third party object",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ThirdPartyResource) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ThirdPartyResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ThirdPartyResourceData = map[string]string{
0000000000000000000000000000000000000000;;		"":         "An internal object, used for versioned storage in etcd.  Not exposed to the end user.",
0000000000000000000000000000000000000000;;		"metadata": "Standard object metadata.",
0000000000000000000000000000000000000000;;		"data":     "Data is the raw JSON data for this data.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ThirdPartyResourceData) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ThirdPartyResourceData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ThirdPartyResourceDataList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ThirdPartyResrouceDataList is a list of ThirdPartyResourceData.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"items":    "Items is the list of ThirdpartyResourceData.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ThirdPartyResourceDataList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ThirdPartyResourceDataList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ThirdPartyResourceList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "ThirdPartyResourceList is a list of ThirdPartyResources.",
0000000000000000000000000000000000000000;;		"metadata": "Standard list metadata.",
0000000000000000000000000000000000000000;;		"items":    "Items is the list of ThirdPartyResources.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ThirdPartyResourceList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ThirdPartyResourceList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS END HERE
