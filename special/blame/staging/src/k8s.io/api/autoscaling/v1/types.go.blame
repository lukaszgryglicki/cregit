0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5350dd95ecc2cbe035eb913939e158778b8e60c4;pkg/apis/autoscaling/v1/types.go[pkg/apis/autoscaling/v1/types.go][staging/src/k8s.io/api/autoscaling/v1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CrossVersionObjectReference contains enough information to let you identify the referred resource.
0000000000000000000000000000000000000000;;	type CrossVersionObjectReference struct {
0000000000000000000000000000000000000000;;		// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
0000000000000000000000000000000000000000;;		Kind string `json:"kind" protobuf:"bytes,1,opt,name=kind"`
0000000000000000000000000000000000000000;;		// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
0000000000000000000000000000000000000000;;		Name string `json:"name" protobuf:"bytes,2,opt,name=name"`
0000000000000000000000000000000000000000;;		// API version of the referent
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion,omitempty" protobuf:"bytes,3,opt,name=apiVersion"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// specification of a horizontal pod autoscaler.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerSpec struct {
0000000000000000000000000000000000000000;;		// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption
0000000000000000000000000000000000000000;;		// and will set the desired number of pods by using its Scale subresource.
0000000000000000000000000000000000000000;;		ScaleTargetRef CrossVersionObjectReference `json:"scaleTargetRef" protobuf:"bytes,1,opt,name=scaleTargetRef"`
0000000000000000000000000000000000000000;;		// lower limit for the number of pods that can be set by the autoscaler, default 1.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		MinReplicas *int32 `json:"minReplicas,omitempty" protobuf:"varint,2,opt,name=minReplicas"`
0000000000000000000000000000000000000000;;		// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
0000000000000000000000000000000000000000;;		MaxReplicas int32 `json:"maxReplicas" protobuf:"varint,3,opt,name=maxReplicas"`
0000000000000000000000000000000000000000;;		// target average CPU utilization (represented as a percentage of requested CPU) over all the pods;
0000000000000000000000000000000000000000;;		// if not specified the default autoscaling policy will be used.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TargetCPUUtilizationPercentage *int32 `json:"targetCPUUtilizationPercentage,omitempty" protobuf:"varint,4,opt,name=targetCPUUtilizationPercentage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// current status of a horizontal pod autoscaler
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerStatus struct {
0000000000000000000000000000000000000000;;		// most recent generation observed by this autoscaler.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ObservedGeneration *int64 `json:"observedGeneration,omitempty" protobuf:"varint,1,opt,name=observedGeneration"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// last time the HorizontalPodAutoscaler scaled the number of pods;
0000000000000000000000000000000000000000;;		// used by the autoscaler to control how often the number of pods is changed.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastScaleTime *metav1.Time `json:"lastScaleTime,omitempty" protobuf:"bytes,2,opt,name=lastScaleTime"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// current number of replicas of pods managed by this autoscaler.
0000000000000000000000000000000000000000;;		CurrentReplicas int32 `json:"currentReplicas" protobuf:"varint,3,opt,name=currentReplicas"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// desired number of replicas of pods managed by this autoscaler.
0000000000000000000000000000000000000000;;		DesiredReplicas int32 `json:"desiredReplicas" protobuf:"varint,4,opt,name=desiredReplicas"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// current average CPU utilization over all pods, represented as a percentage of requested CPU,
0000000000000000000000000000000000000000;;		// e.g. 70 means that an average pod is using now 70% of its requested CPU.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CurrentCPUUtilizationPercentage *int32 `json:"currentCPUUtilizationPercentage,omitempty" protobuf:"varint,5,opt,name=currentCPUUtilizationPercentage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// configuration of a horizontal pod autoscaler.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscaler struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec HorizontalPodAutoscalerSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// current information about the autoscaler.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status HorizontalPodAutoscalerStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// list of horizontal pod autoscaler objects.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// list of horizontal pod autoscaler objects.
0000000000000000000000000000000000000000;;		Items []HorizontalPodAutoscaler `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scale represents a scaling request for a resource.
0000000000000000000000000000000000000000;;	type Scale struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec ScaleSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// current status of the scale. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status. Read-only.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status ScaleStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleSpec describes the attributes of a scale subresource.
0000000000000000000000000000000000000000;;	type ScaleSpec struct {
0000000000000000000000000000000000000000;;		// desired number of instances for the scaled object.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Replicas int32 `json:"replicas,omitempty" protobuf:"varint,1,opt,name=replicas"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScaleStatus represents the current status of a scale subresource.
0000000000000000000000000000000000000000;;	type ScaleStatus struct {
0000000000000000000000000000000000000000;;		// actual number of observed instances of the scaled object.
0000000000000000000000000000000000000000;;		Replicas int32 `json:"replicas" protobuf:"varint,1,opt,name=replicas"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// label query over pods that should match the replicas count. This is same
0000000000000000000000000000000000000000;;		// as the label selector but in the string format to avoid introspection
0000000000000000000000000000000000000000;;		// by clients. The string will be in the same format as the query-param syntax.
0000000000000000000000000000000000000000;;		// More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Selector string `json:"selector,omitempty" protobuf:"bytes,2,opt,name=selector"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// the types below are used in the alpha metrics annotation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricSourceType indicates the type of metric.
0000000000000000000000000000000000000000;;	type MetricSourceType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ObjectMetricSourceType is a metric describing a kubernetes object
0000000000000000000000000000000000000000;;		// (for example, hits-per-second on an Ingress object).
0000000000000000000000000000000000000000;;		ObjectMetricSourceType MetricSourceType = "Object"
0000000000000000000000000000000000000000;;		// PodsMetricSourceType is a metric describing each pod in the current scale
0000000000000000000000000000000000000000;;		// target (for example, transactions-processed-per-second).  The values
0000000000000000000000000000000000000000;;		// will be averaged together before being compared to the target value.
0000000000000000000000000000000000000000;;		PodsMetricSourceType MetricSourceType = "Pods"
0000000000000000000000000000000000000000;;		// ResourceMetricSourceType is a resource metric known to Kubernetes, as
0000000000000000000000000000000000000000;;		// specified in requests and limits, describing each pod in the current
0000000000000000000000000000000000000000;;		// scale target (e.g. CPU or memory).  Such metrics are built in to
0000000000000000000000000000000000000000;;		// Kubernetes, and have special scaling options on top of those available
0000000000000000000000000000000000000000;;		// to normal per-pod metrics (the "pods" source).
0000000000000000000000000000000000000000;;		ResourceMetricSourceType MetricSourceType = "Resource"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricSpec specifies how to scale based on a single metric
0000000000000000000000000000000000000000;;	// (only `type` and one other matching field should be set at once).
0000000000000000000000000000000000000000;;	type MetricSpec struct {
0000000000000000000000000000000000000000;;		// type is the type of metric source.  It should match one of the fields below.
0000000000000000000000000000000000000000;;		Type MetricSourceType `json:"type" protobuf:"bytes,1,name=type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// object refers to a metric describing a single kubernetes object
0000000000000000000000000000000000000000;;		// (for example, hits-per-second on an Ingress object).
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Object *ObjectMetricSource `json:"object,omitempty" protobuf:"bytes,2,opt,name=object"`
0000000000000000000000000000000000000000;;		// pods refers to a metric describing each pod in the current scale target
0000000000000000000000000000000000000000;;		// (for example, transactions-processed-per-second).  The values will be
0000000000000000000000000000000000000000;;		// averaged together before being compared to the target value.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Pods *PodsMetricSource `json:"pods,omitempty" protobuf:"bytes,3,opt,name=pods"`
0000000000000000000000000000000000000000;;		// resource refers to a resource metric (such as those specified in
0000000000000000000000000000000000000000;;		// requests and limits) known to Kubernetes describing each pod in the
0000000000000000000000000000000000000000;;		// current scale target (e.g. CPU or memory). Such metrics are built in to
0000000000000000000000000000000000000000;;		// Kubernetes, and have special scaling options on top of those available
0000000000000000000000000000000000000000;;		// to normal per-pod metrics using the "pods" source.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Resource *ResourceMetricSource `json:"resource,omitempty" protobuf:"bytes,4,opt,name=resource"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectMetricSource indicates how to scale on a metric describing a
0000000000000000000000000000000000000000;;	// kubernetes object (for example, hits-per-second on an Ingress object).
0000000000000000000000000000000000000000;;	type ObjectMetricSource struct {
0000000000000000000000000000000000000000;;		// target is the described Kubernetes object.
0000000000000000000000000000000000000000;;		Target CrossVersionObjectReference `json:"target" protobuf:"bytes,1,name=target"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// metricName is the name of the metric in question.
0000000000000000000000000000000000000000;;		MetricName string `json:"metricName" protobuf:"bytes,2,name=metricName"`
0000000000000000000000000000000000000000;;		// targetValue is the target value of the metric (as a quantity).
0000000000000000000000000000000000000000;;		TargetValue resource.Quantity `json:"targetValue" protobuf:"bytes,3,name=targetValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodsMetricSource indicates how to scale on a metric describing each pod in
0000000000000000000000000000000000000000;;	// the current scale target (for example, transactions-processed-per-second).
0000000000000000000000000000000000000000;;	// The values will be averaged together before being compared to the target
0000000000000000000000000000000000000000;;	// value.
0000000000000000000000000000000000000000;;	type PodsMetricSource struct {
0000000000000000000000000000000000000000;;		// metricName is the name of the metric in question
0000000000000000000000000000000000000000;;		MetricName string `json:"metricName" protobuf:"bytes,1,name=metricName"`
0000000000000000000000000000000000000000;;		// targetAverageValue is the target value of the average of the
0000000000000000000000000000000000000000;;		// metric across all relevant pods (as a quantity)
0000000000000000000000000000000000000000;;		TargetAverageValue resource.Quantity `json:"targetAverageValue" protobuf:"bytes,2,name=targetAverageValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceMetricSource indicates how to scale on a resource metric known to
0000000000000000000000000000000000000000;;	// Kubernetes, as specified in requests and limits, describing each pod in the
0000000000000000000000000000000000000000;;	// current scale target (e.g. CPU or memory).  The values will be averaged
0000000000000000000000000000000000000000;;	// together before being compared to the target.  Such metrics are built in to
0000000000000000000000000000000000000000;;	// Kubernetes, and have special scaling options on top of those available to
0000000000000000000000000000000000000000;;	// normal per-pod metrics using the "pods" source.  Only one "target" type
0000000000000000000000000000000000000000;;	// should be set.
0000000000000000000000000000000000000000;;	type ResourceMetricSource struct {
0000000000000000000000000000000000000000;;		// name is the name of the resource in question.
0000000000000000000000000000000000000000;;		Name v1.ResourceName `json:"name" protobuf:"bytes,1,name=name"`
0000000000000000000000000000000000000000;;		// targetAverageUtilization is the target value of the average of the
0000000000000000000000000000000000000000;;		// resource metric across all relevant pods, represented as a percentage of
0000000000000000000000000000000000000000;;		// the requested value of the resource for the pods.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TargetAverageUtilization *int32 `json:"targetAverageUtilization,omitempty" protobuf:"varint,2,opt,name=targetAverageUtilization"`
0000000000000000000000000000000000000000;;		// targetAverageValue is the target value of the average of the
0000000000000000000000000000000000000000;;		// resource metric across all relevant pods, as a raw value (instead of as
0000000000000000000000000000000000000000;;		// a percentage of the request), similar to the "pods" metric source type.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TargetAverageValue *resource.Quantity `json:"targetAverageValue,omitempty" protobuf:"bytes,3,opt,name=targetAverageValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricStatus describes the last-read state of a single metric.
0000000000000000000000000000000000000000;;	type MetricStatus struct {
0000000000000000000000000000000000000000;;		// type is the type of metric source.  It will match one of the fields below.
0000000000000000000000000000000000000000;;		Type MetricSourceType `json:"type" protobuf:"bytes,1,name=type"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// object refers to a metric describing a single kubernetes object
0000000000000000000000000000000000000000;;		// (for example, hits-per-second on an Ingress object).
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Object *ObjectMetricStatus `json:"object,omitempty" protobuf:"bytes,2,opt,name=object"`
0000000000000000000000000000000000000000;;		// pods refers to a metric describing each pod in the current scale target
0000000000000000000000000000000000000000;;		// (for example, transactions-processed-per-second).  The values will be
0000000000000000000000000000000000000000;;		// averaged together before being compared to the target value.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Pods *PodsMetricStatus `json:"pods,omitempty" protobuf:"bytes,3,opt,name=pods"`
0000000000000000000000000000000000000000;;		// resource refers to a resource metric (such as those specified in
0000000000000000000000000000000000000000;;		// requests and limits) known to Kubernetes describing each pod in the
0000000000000000000000000000000000000000;;		// current scale target (e.g. CPU or memory). Such metrics are built in to
0000000000000000000000000000000000000000;;		// Kubernetes, and have special scaling options on top of those available
0000000000000000000000000000000000000000;;		// to normal per-pod metrics using the "pods" source.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Resource *ResourceMetricStatus `json:"resource,omitempty" protobuf:"bytes,4,opt,name=resource"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HorizontalPodAutoscalerConditionType are the valid conditions of
0000000000000000000000000000000000000000;;	// a HorizontalPodAutoscaler.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ScalingActive indicates that the HPA controller is able to scale if necessary:
0000000000000000000000000000000000000000;;		// it's correctly configured, can fetch the desired metrics, and isn't disabled.
0000000000000000000000000000000000000000;;		ScalingActive HorizontalPodAutoscalerConditionType = "ScalingActive"
0000000000000000000000000000000000000000;;		// AbleToScale indicates a lack of transient issues which prevent scaling from occuring,
0000000000000000000000000000000000000000;;		// such as being in a backoff window, or being unable to access/update the target scale.
0000000000000000000000000000000000000000;;		AbleToScale HorizontalPodAutoscalerConditionType = "AbleToScale"
0000000000000000000000000000000000000000;;		// ScalingLimited indicates that the calculated scale based on metrics would be above or
0000000000000000000000000000000000000000;;		// below the range for the HPA, and has thus been capped.
0000000000000000000000000000000000000000;;		ScalingLimited HorizontalPodAutoscalerConditionType = "ScalingLimited"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HorizontalPodAutoscalerCondition describes the state of
0000000000000000000000000000000000000000;;	// a HorizontalPodAutoscaler at a certain point.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscalerCondition struct {
0000000000000000000000000000000000000000;;		// type describes the current condition
0000000000000000000000000000000000000000;;		Type HorizontalPodAutoscalerConditionType `json:"type" protobuf:"bytes,1,name=type"`
0000000000000000000000000000000000000000;;		// status is the status of the condition (True, False, Unknown)
0000000000000000000000000000000000000000;;		Status v1.ConditionStatus `json:"status" protobuf:"bytes,2,name=status"`
0000000000000000000000000000000000000000;;		// lastTransitionTime is the last time the condition transitioned from
0000000000000000000000000000000000000000;;		// one status to another
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty" protobuf:"bytes,3,opt,name=lastTransitionTime"`
0000000000000000000000000000000000000000;;		// reason is the reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,4,opt,name=reason"`
0000000000000000000000000000000000000000;;		// message is a human-readable explanation containing details about
0000000000000000000000000000000000000000;;		// the transition
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,5,opt,name=message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectMetricStatus indicates the current value of a metric describing a
0000000000000000000000000000000000000000;;	// kubernetes object (for example, hits-per-second on an Ingress object).
0000000000000000000000000000000000000000;;	type ObjectMetricStatus struct {
0000000000000000000000000000000000000000;;		// target is the described Kubernetes object.
0000000000000000000000000000000000000000;;		Target CrossVersionObjectReference `json:"target" protobuf:"bytes,1,name=target"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// metricName is the name of the metric in question.
0000000000000000000000000000000000000000;;		MetricName string `json:"metricName" protobuf:"bytes,2,name=metricName"`
0000000000000000000000000000000000000000;;		// currentValue is the current value of the metric (as a quantity).
0000000000000000000000000000000000000000;;		CurrentValue resource.Quantity `json:"currentValue" protobuf:"bytes,3,name=currentValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodsMetricStatus indicates the current value of a metric describing each pod in
0000000000000000000000000000000000000000;;	// the current scale target (for example, transactions-processed-per-second).
0000000000000000000000000000000000000000;;	type PodsMetricStatus struct {
0000000000000000000000000000000000000000;;		// metricName is the name of the metric in question
0000000000000000000000000000000000000000;;		MetricName string `json:"metricName" protobuf:"bytes,1,name=metricName"`
0000000000000000000000000000000000000000;;		// currentAverageValue is the current value of the average of the
0000000000000000000000000000000000000000;;		// metric across all relevant pods (as a quantity)
0000000000000000000000000000000000000000;;		CurrentAverageValue resource.Quantity `json:"currentAverageValue" protobuf:"bytes,2,name=currentAverageValue"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceMetricStatus indicates the current value of a resource metric known to
0000000000000000000000000000000000000000;;	// Kubernetes, as specified in requests and limits, describing each pod in the
0000000000000000000000000000000000000000;;	// current scale target (e.g. CPU or memory).  Such metrics are built in to
0000000000000000000000000000000000000000;;	// Kubernetes, and have special scaling options on top of those available to
0000000000000000000000000000000000000000;;	// normal per-pod metrics using the "pods" source.
0000000000000000000000000000000000000000;;	type ResourceMetricStatus struct {
0000000000000000000000000000000000000000;;		// name is the name of the resource in question.
0000000000000000000000000000000000000000;;		Name v1.ResourceName `json:"name" protobuf:"bytes,1,name=name"`
0000000000000000000000000000000000000000;;		// currentAverageUtilization is the current value of the average of the
0000000000000000000000000000000000000000;;		// resource metric across all relevant pods, represented as a percentage of
0000000000000000000000000000000000000000;;		// the requested value of the resource for the pods.  It will only be
0000000000000000000000000000000000000000;;		// present if `targetAverageValue` was set in the corresponding metric
0000000000000000000000000000000000000000;;		// specification.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CurrentAverageUtilization *int32 `json:"currentAverageUtilization,omitempty" protobuf:"bytes,2,opt,name=currentAverageUtilization"`
0000000000000000000000000000000000000000;;		// currentAverageValue is the current value of the average of the
0000000000000000000000000000000000000000;;		// resource metric across all relevant pods, as a raw value (instead of as
0000000000000000000000000000000000000000;;		// a percentage of the request), similar to the "pods" metric source type.
0000000000000000000000000000000000000000;;		// It will always be set, regardless of the corresponding metric specification.
0000000000000000000000000000000000000000;;		CurrentAverageValue resource.Quantity `json:"currentAverageValue" protobuf:"bytes,3,name=currentAverageValue"`
0000000000000000000000000000000000000000;;	}
