0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
6e038459ae542f70bb73c99a83e15b3b4c1aa5b4;pkg/apis/autoscaling/v2alpha1/types_swagger_doc_generated.go[pkg/apis/autoscaling/v2alpha1/types_swagger_doc_generated.go][staging/src/k8s.io/api/autoscaling/v2alpha1/types_swagger_doc_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v2alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file contains a collection of methods that can be used from go-restful to
0000000000000000000000000000000000000000;;	// generate Swagger API documentation for its models. Please read this PR for more
0000000000000000000000000000000000000000;;	// information on the implementation: https://github.com/emicklei/go-restful/pull/215
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
0000000000000000000000000000000000000000;;	// they are on one line! For multiple line or blocks that you want to ignore use ---.
0000000000000000000000000000000000000000;;	// Any context after a --- is ignored.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Those methods can be generated by using hack/update-generated-swagger-docs.sh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS START HERE
0000000000000000000000000000000000000000;;	var map_CrossVersionObjectReference = map[string]string{
0000000000000000000000000000000000000000;;		"":           "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
0000000000000000000000000000000000000000;;		"kind":       "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\"",
0000000000000000000000000000000000000000;;		"name":       "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
0000000000000000000000000000000000000000;;		"apiVersion": "API version of the referent",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CrossVersionObjectReference) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_CrossVersionObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HorizontalPodAutoscaler = map[string]string{
0000000000000000000000000000000000000000;;		"":         "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
0000000000000000000000000000000000000000;;		"metadata": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
0000000000000000000000000000000000000000;;		"spec":     "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status.",
0000000000000000000000000000000000000000;;		"status":   "status is the current information about the autoscaler.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscaler) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HorizontalPodAutoscaler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HorizontalPodAutoscalerCondition = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
0000000000000000000000000000000000000000;;		"type":               "type describes the current condition",
0000000000000000000000000000000000000000;;		"status":             "status is the status of the condition (True, False, Unknown)",
0000000000000000000000000000000000000000;;		"lastTransitionTime": "lastTransitionTime is the last time the condition transitioned from one status to another",
0000000000000000000000000000000000000000;;		"reason":             "reason is the reason for the condition's last transition.",
0000000000000000000000000000000000000000;;		"message":            "message is a human-readable explanation containing details about the transition",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerCondition) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HorizontalPodAutoscalerCondition
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HorizontalPodAutoscalerList = map[string]string{
0000000000000000000000000000000000000000;;		"":         "HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.",
0000000000000000000000000000000000000000;;		"metadata": "metadata is the standard list metadata.",
0000000000000000000000000000000000000000;;		"items":    "items is the list of horizontal pod autoscaler objects.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerList) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HorizontalPodAutoscalerList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HorizontalPodAutoscalerSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":               "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
0000000000000000000000000000000000000000;;		"scaleTargetRef": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.",
0000000000000000000000000000000000000000;;		"minReplicas":    "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.",
0000000000000000000000000000000000000000;;		"maxReplicas":    "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.",
0000000000000000000000000000000000000000;;		"metrics":        "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HorizontalPodAutoscalerSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_HorizontalPodAutoscalerStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
0000000000000000000000000000000000000000;;		"observedGeneration": "observedGeneration is the most recent generation observed by this autoscaler.",
0000000000000000000000000000000000000000;;		"lastScaleTime":      "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.",
0000000000000000000000000000000000000000;;		"currentReplicas":    "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.",
0000000000000000000000000000000000000000;;		"desiredReplicas":    "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.",
0000000000000000000000000000000000000000;;		"currentMetrics":     "currentMetrics is the last read state of the metrics used by this autoscaler.",
0000000000000000000000000000000000000000;;		"conditions":         "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (HorizontalPodAutoscalerStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_HorizontalPodAutoscalerStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_MetricSpec = map[string]string{
0000000000000000000000000000000000000000;;		"":         "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
0000000000000000000000000000000000000000;;		"type":     "type is the type of metric source.  It should match one of the fields below.",
0000000000000000000000000000000000000000;;		"object":   "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
0000000000000000000000000000000000000000;;		"pods":     "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
0000000000000000000000000000000000000000;;		"resource": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (MetricSpec) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_MetricSpec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_MetricStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":         "MetricStatus describes the last-read state of a single metric.",
0000000000000000000000000000000000000000;;		"type":     "type is the type of metric source.  It will match one of the fields below.",
0000000000000000000000000000000000000000;;		"object":   "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).",
0000000000000000000000000000000000000000;;		"pods":     "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.",
0000000000000000000000000000000000000000;;		"resource": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (MetricStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_MetricStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ObjectMetricSource = map[string]string{
0000000000000000000000000000000000000000;;		"":            "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
0000000000000000000000000000000000000000;;		"target":      "target is the described Kubernetes object.",
0000000000000000000000000000000000000000;;		"metricName":  "metricName is the name of the metric in question.",
0000000000000000000000000000000000000000;;		"targetValue": "targetValue is the target value of the metric (as a quantity).",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ObjectMetricSource) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ObjectMetricSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ObjectMetricStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":             "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
0000000000000000000000000000000000000000;;		"target":       "target is the described Kubernetes object.",
0000000000000000000000000000000000000000;;		"metricName":   "metricName is the name of the metric in question.",
0000000000000000000000000000000000000000;;		"currentValue": "currentValue is the current value of the metric (as a quantity).",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ObjectMetricStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ObjectMetricStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PodsMetricSource = map[string]string{
0000000000000000000000000000000000000000;;		"":                   "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
0000000000000000000000000000000000000000;;		"metricName":         "metricName is the name of the metric in question",
0000000000000000000000000000000000000000;;		"targetAverageValue": "targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PodsMetricSource) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PodsMetricSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_PodsMetricStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":                    "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
0000000000000000000000000000000000000000;;		"metricName":          "metricName is the name of the metric in question",
0000000000000000000000000000000000000000;;		"currentAverageValue": "currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (PodsMetricStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_PodsMetricStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ResourceMetricSource = map[string]string{
0000000000000000000000000000000000000000;;		"":     "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
0000000000000000000000000000000000000000;;		"name": "name is the name of the resource in question.",
0000000000000000000000000000000000000000;;		"targetAverageUtilization": "targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.",
0000000000000000000000000000000000000000;;		"targetAverageValue":       "targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ResourceMetricSource) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ResourceMetricSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var map_ResourceMetricStatus = map[string]string{
0000000000000000000000000000000000000000;;		"":     "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
0000000000000000000000000000000000000000;;		"name": "name is the name of the resource in question.",
0000000000000000000000000000000000000000;;		"currentAverageUtilization": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
0000000000000000000000000000000000000000;;		"currentAverageValue":       "currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification.",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ResourceMetricStatus) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map_ResourceMetricStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AUTO-GENERATED FUNCTIONS END HERE
