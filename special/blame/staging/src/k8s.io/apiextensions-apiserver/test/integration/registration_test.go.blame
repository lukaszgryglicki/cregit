0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4e3d6a455f2a82747422df105afe1ab6e9131e40;staging/src/k8s.io/kube-apiextensions-server/test/integration/registration_test.go[staging/src/k8s.io/kube-apiextensions-server/test/integration/registration_test.go][staging/src/k8s.io/apiextensions-apiserver/test/integration/registration_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package integration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		extensionsapiserver "k8s.io/apiextensions-apiserver/pkg/apiserver"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/test/integration/testserver"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func instantiateCustomResource(t *testing.T, instanceToCreate *unstructured.Unstructured, client *dynamic.ResourceClient, definition *apiextensionsv1beta1.CustomResourceDefinition) (*unstructured.Unstructured, error) {
0000000000000000000000000000000000000000;;		createdInstance, err := client.Create(instanceToCreate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Logf("%#v", createdInstance)
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createdObjectMeta, err := meta.Accessor(createdInstance)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// it should have a UUID
0000000000000000000000000000000000000000;;		if len(createdObjectMeta.GetUID()) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("missing uuid: %#v", createdInstance)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createdTypeMeta, err := meta.TypeAccessor(createdInstance)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := definition.Spec.Group+"/"+definition.Spec.Version, createdTypeMeta.GetAPIVersion(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := definition.Spec.Names.Kind, createdTypeMeta.GetKind(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return createdInstance, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNamespacedCustomResourceClient(ns string, client *dynamic.Client, definition *apiextensionsv1beta1.CustomResourceDefinition) *dynamic.ResourceClient {
0000000000000000000000000000000000000000;;		return client.Resource(&metav1.APIResource{
0000000000000000000000000000000000000000;;			Name:       definition.Spec.Names.Plural,
0000000000000000000000000000000000000000;;			Namespaced: definition.Spec.Scope == apiextensionsv1beta1.NamespaceScoped,
0000000000000000000000000000000000000000;;		}, ns)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultipleResourceInstances(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		noxuList, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuListListMeta, err := meta.ListAccessor(noxuList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuNamespacedWatch, err := noxuNamespacedResourceClient.Watch(metav1.ListOptions{ResourceVersion: noxuListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer noxuNamespacedWatch.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances := map[string]*struct {
0000000000000000000000000000000000000000;;			Added    bool
0000000000000000000000000000000000000000;;			Deleted  bool
0000000000000000000000000000000000000000;;			Instance *unstructured.Unstructured
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"foo": {},
0000000000000000000000000000000000000000;;			"bar": {},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for key, val := range instances {
0000000000000000000000000000000000000000;;			val.Instance, err = instantiateCustomResource(t, testserver.NewNoxuInstance(ns, key), noxuNamespacedResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unable to create Noxu Instance %q:%v", key, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addEvents := 0
0000000000000000000000000000000000000000;;		for addEvents < len(instances) {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case watchEvent := <-noxuNamespacedWatch.ResultChan():
0000000000000000000000000000000000000000;;				if e, a := watch.Added, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				name, err := meta.NewAccessor().Name(watchEvent.Object)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("unable to retrieve object name:%v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if instances[name].Added {
0000000000000000000000000000000000000000;;					t.Fatalf("Add event already registered for %q", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				instances[name].Added = true
0000000000000000000000000000000000000000;;				addEvents++
0000000000000000000000000000000000000000;;			case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;				t.Fatalf("missing watch event")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for key, val := range instances {
0000000000000000000000000000000000000000;;			gottenNoxuInstace, err := noxuNamespacedResourceClient.Get(key, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := val.Instance, gottenNoxuInstace; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		listWithItem, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := len(instances), len(listWithItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, a := range listWithItem.(*unstructured.UnstructuredList).Items {
0000000000000000000000000000000000000000;;			if e := instances[a.GetName()].Instance; !reflect.DeepEqual(e, &a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key := range instances {
0000000000000000000000000000000000000000;;			if err := noxuNamespacedResourceClient.Delete(key, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unable to delete %s:%v", key, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		listWithoutItem, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(listWithoutItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deleteEvents := 0
0000000000000000000000000000000000000000;;		for deleteEvents < len(instances) {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case watchEvent := <-noxuNamespacedWatch.ResultChan():
0000000000000000000000000000000000000000;;				if e, a := watch.Deleted, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				name, err := meta.NewAccessor().Name(watchEvent.Object)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unable to retrieve object name:%v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if instances[name].Deleted {
0000000000000000000000000000000000000000;;					t.Errorf("Delete event already registered for %q", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				instances[name].Deleted = true
0000000000000000000000000000000000000000;;				deleteEvents++
0000000000000000000000000000000000000000;;			case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;				t.Errorf("missing watch event")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultipleRegistration(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		sameInstanceName := "foo"
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, sameInstanceName), noxuNamespacedResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create noxu Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gottenNoxuInstance, err := noxuNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := createdNoxuInstance, gottenNoxuInstance; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		curletDefinition := testserver.NewCurletCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		curletVersionClient, err := testserver.CreateNewCustomResourceDefinition(curletDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		curletNamespacedResourceClient := NewNamespacedCustomResourceClient(ns, curletVersionClient, curletDefinition)
0000000000000000000000000000000000000000;;		createdCurletInstance, err := instantiateCustomResource(t, testserver.NewCurletInstance(ns, sameInstanceName), curletNamespacedResourceClient, curletDefinition)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create noxu Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gottenCurletInstance, err := curletNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := createdCurletInstance, gottenCurletInstance; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// now re-GET noxu
0000000000000000000000000000000000000000;;		gottenNoxuInstance2, err := noxuNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := createdNoxuInstance, gottenNoxuInstance2; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeRegistrationAndReRegistration(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		sameInstanceName := "foo"
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			noxuNamespacedResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;			if _, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, sameInstanceName), noxuNamespacedResourceClient, noxuDefinition); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := testserver.DeleteCustomResourceDefinition(noxuDefinition, apiExtensionClient); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := testserver.GetCustomResourceDefinition(noxuDefinition, apiExtensionClient); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err = noxuNamespacedResourceClient.List(metav1.ListOptions{}); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err = noxuNamespacedResourceClient.Get("foo", metav1.GetOptions{}); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			if _, err := testserver.GetCustomResourceDefinition(noxuDefinition, apiExtensionClient); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			noxuNamespacedResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;			initialList, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err = noxuNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{}); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := 0, len(initialList.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createdNoxuInstance, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, sameInstanceName), noxuNamespacedResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			gottenNoxuInstance, err := noxuNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := createdNoxuInstance, gottenNoxuInstance; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			listWithItem, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := 1, len(listWithItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := *createdNoxuInstance, listWithItem.(*unstructured.UnstructuredList).Items[0]; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := noxuNamespacedResourceClient.Delete(sameInstanceName, nil); err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err = noxuNamespacedResourceClient.Get(sameInstanceName, metav1.GetOptions{}); err == nil || !errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				t.Fatalf("expected a NotFound error, got:%v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			listWithoutItem, err := noxuNamespacedResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := 0, len(listWithoutItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdStorage(t *testing.T) {
0000000000000000000000000000000000000000;;		config, err := testserver.DefaultServerConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartServer(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcdPrefix := getPrefixFromConfig(t, config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns1 := "another-default-is-possible"
0000000000000000000000000000000000000000;;		curletDefinition := testserver.NewCurletCustomResourceDefinition(apiextensionsv1beta1.ClusterScoped)
0000000000000000000000000000000000000000;;		curletVersionClient, err := testserver.CreateNewCustomResourceDefinition(curletDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		curletNamespacedResourceClient := NewNamespacedCustomResourceClient(ns1, curletVersionClient, curletDefinition)
0000000000000000000000000000000000000000;;		if _, err := instantiateCustomResource(t, testserver.NewCurletInstance(ns1, "bar"), curletNamespacedResourceClient, curletDefinition); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create curlet cluster scoped Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns2 := "the-cruel-default"
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient := NewNamespacedCustomResourceClient(ns2, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		if _, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns2, "foo"), noxuNamespacedResourceClient, noxuDefinition); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create noxu namespace scoped Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			etcdPath       string
0000000000000000000000000000000000000000;;			expectedObject *metaObject
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"namespacedNoxuDefinition": {
0000000000000000000000000000000000000000;;				etcdPath: "apiextensions.k8s.io/customresourcedefinitions/noxus.mygroup.example.com",
0000000000000000000000000000000000000000;;				expectedObject: &metaObject{
0000000000000000000000000000000000000000;;					Kind:       "CustomResourceDefinition",
0000000000000000000000000000000000000000;;					APIVersion: "apiextensions.k8s.io/v1beta1",
0000000000000000000000000000000000000000;;					Metadata: Metadata{
0000000000000000000000000000000000000000;;						Name:      "noxus.mygroup.example.com",
0000000000000000000000000000000000000000;;						Namespace: "",
0000000000000000000000000000000000000000;;						SelfLink:  "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"namespacedNoxuInstance": {
0000000000000000000000000000000000000000;;				etcdPath: "mygroup.example.com/noxus/the-cruel-default/foo",
0000000000000000000000000000000000000000;;				expectedObject: &metaObject{
0000000000000000000000000000000000000000;;					Kind:       "WishIHadChosenNoxu",
0000000000000000000000000000000000000000;;					APIVersion: "mygroup.example.com/v1beta1",
0000000000000000000000000000000000000000;;					Metadata: Metadata{
0000000000000000000000000000000000000000;;						Name:      "foo",
0000000000000000000000000000000000000000;;						Namespace: "the-cruel-default",
0000000000000000000000000000000000000000;;						SelfLink:  "", // TODO double check: empty?
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"clusteredCurletDefinition": {
0000000000000000000000000000000000000000;;				etcdPath: "apiextensions.k8s.io/customresourcedefinitions/curlets.mygroup.example.com",
0000000000000000000000000000000000000000;;				expectedObject: &metaObject{
0000000000000000000000000000000000000000;;					Kind:       "CustomResourceDefinition",
0000000000000000000000000000000000000000;;					APIVersion: "apiextensions.k8s.io/v1beta1",
0000000000000000000000000000000000000000;;					Metadata: Metadata{
0000000000000000000000000000000000000000;;						Name:      "curlets.mygroup.example.com",
0000000000000000000000000000000000000000;;						Namespace: "",
0000000000000000000000000000000000000000;;						SelfLink:  "",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"clusteredCurletInstance": {
0000000000000000000000000000000000000000;;				etcdPath: "mygroup.example.com/curlets/bar",
0000000000000000000000000000000000000000;;				expectedObject: &metaObject{
0000000000000000000000000000000000000000;;					Kind:       "Curlet",
0000000000000000000000000000000000000000;;					APIVersion: "mygroup.example.com/v1beta1",
0000000000000000000000000000000000000000;;					Metadata: Metadata{
0000000000000000000000000000000000000000;;						Name:      "bar",
0000000000000000000000000000000000000000;;						Namespace: "",
0000000000000000000000000000000000000000;;						SelfLink:  "", // TODO double check: empty?
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcdURL, ok := os.LookupEnv("KUBE_INTEGRATION_ETCD_URL")
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			etcdURL = "http://127.0.0.1:2379"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg := clientv3.Config{
0000000000000000000000000000000000000000;;			Endpoints: []string{etcdURL},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c, err := clientv3.New(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		kv := clientv3.NewKV(c)
0000000000000000000000000000000000000000;;		for testName, tc := range testcases {
0000000000000000000000000000000000000000;;			output, err := getFromEtcd(kv, etcdPrefix, tc.etcdPath)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s - no path gotten from etcd:%v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedObject, output; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%s - expected %#v\n got %#v\n", testName, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPrefixFromConfig(t *testing.T, config *extensionsapiserver.Config) string {
0000000000000000000000000000000000000000;;		extensionsOptionsGetter, ok := config.CRDRESTOptionsGetter.(extensionsapiserver.CRDRESTOptionsGetter)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatal("can't obtain etcd prefix: unable to cast config.CRDRESTOptionsGetter to extensionsapiserver.CRDRESTOptionsGetter")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return extensionsOptionsGetter.StoragePrefix
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getFromEtcd(keys clientv3.KV, prefix, localPath string) (*metaObject, error) {
0000000000000000000000000000000000000000;;		internalPath := path.Join("/", prefix, localPath) // TODO: Double check, should we concatenate two prefixes?
0000000000000000000000000000000000000000;;		response, err := keys.Get(context.Background(), internalPath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if response.More || response.Count != 1 || len(response.Kvs) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Invalid etcd response (not found == %v): %#v", response.Count == 0, response)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj := &metaObject{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(response.Kvs[0].Value, obj); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type metaObject struct {
0000000000000000000000000000000000000000;;		Kind       string `json:"kind,omitempty" protobuf:"bytes,1,opt,name=kind"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion,omitempty" protobuf:"bytes,2,opt,name=apiVersion"`
0000000000000000000000000000000000000000;;		Metadata   `json:"metadata,omitempty" protobuf:"bytes,3,opt,name=metadata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Metadata struct {
0000000000000000000000000000000000000000;;		Name      string `json:"name,omitempty" protobuf:"bytes,1,opt,name=name"`
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty" protobuf:"bytes,2,opt,name=namespace"`
0000000000000000000000000000000000000000;;		SelfLink  string `json:"selfLink,omitempty" protobuf:"bytes,3,opt,name=selfLink"`
0000000000000000000000000000000000000000;;	}
