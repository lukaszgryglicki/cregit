0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ebd01e8e95ce705fb582413d551bed7c9d666b08;staging/src/k8s.io/kube-apiextensions-server/test/integration/testserver/resources.go[staging/src/k8s.io/kube-apiextensions-server/test/integration/testserver/resources.go][staging/src/k8s.io/apiextensions-apiserver/test/integration/testserver/resources.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//NewRandomNameCustomResourceDefinition generates a CRD with random name to avoid name conflict in e2e tests
0000000000000000000000000000000000000000;;	func NewRandomNameCustomResourceDefinition(scope apiextensionsv1beta1.ResourceScope) *apiextensionsv1beta1.CustomResourceDefinition {
0000000000000000000000000000000000000000;;		gName := names.SimpleNameGenerator.GenerateName("foo")
0000000000000000000000000000000000000000;;		return &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: gName + "s.mygroup.example.com"},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   "mygroup.example.com",
0000000000000000000000000000000000000000;;				Version: "v1beta1",
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural:   gName + "s",
0000000000000000000000000000000000000000;;					Singular: gName,
0000000000000000000000000000000000000000;;					Kind:     gName,
0000000000000000000000000000000000000000;;					ListKind: gName + "List",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Scope: scope,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNoxuCustomResourceDefinition(scope apiextensionsv1beta1.ResourceScope) *apiextensionsv1beta1.CustomResourceDefinition {
0000000000000000000000000000000000000000;;		return &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "noxus.mygroup.example.com"},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   "mygroup.example.com",
0000000000000000000000000000000000000000;;				Version: "v1beta1",
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural:     "noxus",
0000000000000000000000000000000000000000;;					Singular:   "nonenglishnoxu",
0000000000000000000000000000000000000000;;					Kind:       "WishIHadChosenNoxu",
0000000000000000000000000000000000000000;;					ShortNames: []string{"foo", "bar", "abc", "def"},
0000000000000000000000000000000000000000;;					ListKind:   "NoxuItemList",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Scope: scope,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNoxuInstance(namespace, name string) *unstructured.Unstructured {
0000000000000000000000000000000000000000;;		return &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": "mygroup.example.com/v1beta1",
0000000000000000000000000000000000000000;;				"kind":       "WishIHadChosenNoxu",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"namespace": namespace,
0000000000000000000000000000000000000000;;					"name":      name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"content": map[string]interface{}{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"num": map[string]interface{}{
0000000000000000000000000000000000000000;;					"num1": 9223372036854775807,
0000000000000000000000000000000000000000;;					"num2": 1000000,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNoxu2CustomResourceDefinition(scope apiextensionsv1beta1.ResourceScope) *apiextensionsv1beta1.CustomResourceDefinition {
0000000000000000000000000000000000000000;;		return &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "noxus2.mygroup.example.com"},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   "mygroup.example.com",
0000000000000000000000000000000000000000;;				Version: "v1alpha1",
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural:     "noxus2",
0000000000000000000000000000000000000000;;					Singular:   "nonenglishnoxu2",
0000000000000000000000000000000000000000;;					Kind:       "WishIHadChosenNoxu2",
0000000000000000000000000000000000000000;;					ShortNames: []string{"foo", "bar", "abc", "def"},
0000000000000000000000000000000000000000;;					ListKind:   "Noxu2ItemList",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Scope: scope,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCurletCustomResourceDefinition(scope apiextensionsv1beta1.ResourceScope) *apiextensionsv1beta1.CustomResourceDefinition {
0000000000000000000000000000000000000000;;		return &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "curlets.mygroup.example.com"},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   "mygroup.example.com",
0000000000000000000000000000000000000000;;				Version: "v1beta1",
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural:   "curlets",
0000000000000000000000000000000000000000;;					Singular: "curlet",
0000000000000000000000000000000000000000;;					Kind:     "Curlet",
0000000000000000000000000000000000000000;;					ListKind: "CurletList",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Scope: scope,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCurletInstance(namespace, name string) *unstructured.Unstructured {
0000000000000000000000000000000000000000;;		return &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": "mygroup.example.com/v1beta1",
0000000000000000000000000000000000000000;;				"kind":       "Curlet",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"namespace": namespace,
0000000000000000000000000000000000000000;;					"name":      name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				"content": map[string]interface{}{
0000000000000000000000000000000000000000;;					"key": "value",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateNewCustomResourceDefinition(crd *apiextensionsv1beta1.CustomResourceDefinition, apiExtensionsClient clientset.Interface, clientPool dynamic.ClientPool) (*dynamic.Client, error) {
0000000000000000000000000000000000000000;;		_, err := apiExtensionsClient.Apiextensions().CustomResourceDefinitions().Create(crd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// wait until the resource appears in discovery
0000000000000000000000000000000000000000;;		err = wait.PollImmediate(500*time.Millisecond, 30*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			resourceList, err := apiExtensionsClient.Discovery().ServerResourcesForGroupVersion(crd.Spec.Group + "/" + crd.Spec.Version)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, resource := range resourceList.APIResources {
0000000000000000000000000000000000000000;;				if resource.Name == crd.Spec.Names.Plural {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dynamicClient, err := clientPool.ClientForGroupVersionResource(schema.GroupVersionResource{Group: crd.Spec.Group, Version: crd.Spec.Version, Resource: crd.Spec.Names.Plural})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This is only for a test.  We need the watch cache to have a resource version that works for the test.
0000000000000000000000000000000000000000;;		// When new REST storage is created, the storage cacher for the CR starts asynchronously.
0000000000000000000000000000000000000000;;		// REST API operations return like list use the RV of etcd, but the storage cacher's reflector's list
0000000000000000000000000000000000000000;;		// can get a different RV because etcd can be touched in between the initial list operation (if that's what you're doing first)
0000000000000000000000000000000000000000;;		// and the storage cache reflector starting.
0000000000000000000000000000000000000000;;		// Later, you can issue a watch with the REST apis list.RV and end up earlier than the storage cacher.
0000000000000000000000000000000000000000;;		// The general working model is that if you get a "resourceVersion too old" message, you re-list and rewatch.
0000000000000000000000000000000000000000;;		// For this test, we'll actually cycle, "list/watch/create/delete" until we get an RV from list that observes the create and not an error.
0000000000000000000000000000000000000000;;		// This way all the tests that are checking for watches don't have to worry about RV too old problems because crazy things *could* happen
0000000000000000000000000000000000000000;;		// before like the created RV could be too old to watch.
0000000000000000000000000000000000000000;;		var primingErr error
0000000000000000000000000000000000000000;;		wait.PollImmediate(500*time.Millisecond, 30*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			primingErr = checkForWatchCachePrimed(crd, dynamicClient)
0000000000000000000000000000000000000000;;			if primingErr == nil {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if primingErr != nil {
0000000000000000000000000000000000000000;;			return nil, primingErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return dynamicClient, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForWatchCachePrimed(crd *apiextensionsv1beta1.CustomResourceDefinition, dynamicClient *dynamic.Client) error {
0000000000000000000000000000000000000000;;		ns := ""
0000000000000000000000000000000000000000;;		if crd.Spec.Scope != apiextensionsv1beta1.ClusterScoped {
0000000000000000000000000000000000000000;;			ns = "aval"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resourceClient := dynamicClient.Resource(&metav1.APIResource{
0000000000000000000000000000000000000000;;			Name:       crd.Spec.Names.Plural,
0000000000000000000000000000000000000000;;			Namespaced: crd.Spec.Scope != apiextensionsv1beta1.ClusterScoped,
0000000000000000000000000000000000000000;;		}, ns)
0000000000000000000000000000000000000000;;		initialList, err := resourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initialListListMeta, err := meta.ListAccessor(initialList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instanceName := "foo"
0000000000000000000000000000000000000000;;		instance := &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": crd.Spec.Group + "/" + crd.Spec.Version,
0000000000000000000000000000000000000000;;				"kind":       crd.Spec.Names.Kind,
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"namespace": ns,
0000000000000000000000000000000000000000;;					"name":      instanceName,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := resourceClient.Create(instance); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// we created something, clean it up
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			resourceClient.Delete(instanceName, nil)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuWatch, err := resourceClient.Watch(metav1.ListOptions{ResourceVersion: initialListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer noxuWatch.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case watchEvent := <-noxuWatch.ResultChan():
0000000000000000000000000000000000000000;;			if watch.Added == watchEvent.Type {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return fmt.Errorf("expected add, but got %#v", watchEvent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;			return fmt.Errorf("gave up waiting for watch event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeleteCustomResourceDefinition(crd *apiextensionsv1beta1.CustomResourceDefinition, apiExtensionsClient clientset.Interface) error {
0000000000000000000000000000000000000000;;		if err := apiExtensionsClient.Apiextensions().CustomResourceDefinitions().Delete(crd.Name, nil); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := wait.PollImmediate(500*time.Millisecond, 30*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			groupResource, err := apiExtensionsClient.Discovery().ServerResourcesForGroupVersion(crd.Spec.Group + "/" + crd.Spec.Version)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, g := range groupResource.APIResources {
0000000000000000000000000000000000000000;;				if g.Name == crd.Spec.Names.Plural {
0000000000000000000000000000000000000000;;					return false, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCustomResourceDefinition(crd *apiextensionsv1beta1.CustomResourceDefinition, apiExtensionsClient clientset.Interface) (*apiextensionsv1beta1.CustomResourceDefinition, error) {
0000000000000000000000000000000000000000;;		return apiExtensionsClient.Apiextensions().CustomResourceDefinitions().Get(crd.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;	}
