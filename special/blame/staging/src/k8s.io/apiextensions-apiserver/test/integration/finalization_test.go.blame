0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
80c9edd65c13df0a28429770236cd14a76007bab;staging/src/k8s.io/kube-apiextensions-server/test/integration/finalization_test.go[staging/src/k8s.io/kube-apiextensions-server/test/integration/finalization_test.go][staging/src/k8s.io/apiextensions-apiserver/test/integration/finalization_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package integration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/test/integration/testserver"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFinalization(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.ClusterScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		name := "foo123"
0000000000000000000000000000000000000000;;		noxuResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instance := testserver.NewNoxuInstance(ns, name)
0000000000000000000000000000000000000000;;		instance.SetFinalizers([]string{"noxu.example.com/finalizer"})
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := instantiateCustomResource(t, instance, noxuResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		uid := createdNoxuInstance.GetUID()
0000000000000000000000000000000000000000;;		err = noxuResourceClient.Delete(name, &metav1.DeleteOptions{
0000000000000000000000000000000000000000;;			Preconditions: &metav1.Preconditions{
0000000000000000000000000000000000000000;;				UID: &uid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deleting something with a finalizer sets deletion timestamp to a not-nil value but does not
0000000000000000000000000000000000000000;;		// remove the object from the API server. Here we read it to confirm this.
0000000000000000000000000000000000000000;;		gottenNoxuInstance, err := noxuResourceClient.Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		require.NotNil(t, gottenNoxuInstance.GetDeletionTimestamp())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Trying to delete it again to confirm it will not remove the object because finalizer is still there.
0000000000000000000000000000000000000000;;		err = noxuResourceClient.Delete(name, &metav1.DeleteOptions{
0000000000000000000000000000000000000000;;			Preconditions: &metav1.Preconditions{
0000000000000000000000000000000000000000;;				UID: &uid,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Removing the finalizers to allow the following delete remove the object.
0000000000000000000000000000000000000000;;		// This step will fail if previous delete wrongly removed the object. The
0000000000000000000000000000000000000000;;		// object will be deleted as part of the finalizer update.
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			gottenNoxuInstance.SetFinalizers(nil)
0000000000000000000000000000000000000000;;			_, err = noxuResourceClient.Update(gottenNoxuInstance)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !errors.IsConflict(err) {
0000000000000000000000000000000000000000;;				require.NoError(t, err) // Fail on unexpected error
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			gottenNoxuInstance, err = noxuResourceClient.Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			require.NoError(t, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check that the object is actually gone.
0000000000000000000000000000000000000000;;		_, err = noxuResourceClient.Get(name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		require.Error(t, err)
0000000000000000000000000000000000000000;;		require.True(t, errors.IsNotFound(err), "%#v", err)
0000000000000000000000000000000000000000;;	}
