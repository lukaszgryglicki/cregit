0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ebd01e8e95ce705fb582413d551bed7c9d666b08;staging/src/k8s.io/kube-apiextensions-server/test/integration/basic_test.go[staging/src/k8s.io/kube-apiextensions-server/test/integration/basic_test.go][staging/src/k8s.io/apiextensions-apiserver/test/integration/basic_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package integration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/test/integration/testserver"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/dynamic"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerUp(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, _, _, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceScopedCRUD(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		testSimpleCRUD(t, ns, noxuDefinition, noxuVersionClient)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClusterScopedCRUD(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.ClusterScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := ""
0000000000000000000000000000000000000000;;		testSimpleCRUD(t, ns, noxuDefinition, noxuVersionClient)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testSimpleCRUD(t *testing.T, ns string, noxuDefinition *apiextensionsv1beta1.CustomResourceDefinition, noxuVersionClient *dynamic.Client) {
0000000000000000000000000000000000000000;;		noxuResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		initialList, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(initialList.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initialListTypeMeta, err := meta.TypeAccessor(initialList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := noxuDefinition.Spec.Group+"/"+noxuDefinition.Spec.Version, initialListTypeMeta.GetAPIVersion(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := noxuDefinition.Spec.Names.ListKind, initialListTypeMeta.GetKind(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initialListListMeta, err := meta.ListAccessor(initialList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noxuWatch, err := noxuResourceClient.Watch(metav1.ListOptions{ResourceVersion: initialListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer noxuWatch.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, "foo"), noxuResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create noxu Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case watchEvent := <-noxuWatch.ResultChan():
0000000000000000000000000000000000000000;;			if e, a := watch.Added, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createdObjectMeta, err := meta.Accessor(watchEvent.Object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// it should have a UUID
0000000000000000000000000000000000000000;;			if len(createdObjectMeta.GetUID()) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("missing uuid: %#v", watchEvent.Object)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := ns, createdObjectMeta.GetNamespace(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			createdTypeMeta, err := meta.TypeAccessor(watchEvent.Object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := noxuDefinition.Spec.Group+"/"+noxuDefinition.Spec.Version, createdTypeMeta.GetAPIVersion(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := noxuDefinition.Spec.Names.Kind, createdTypeMeta.GetKind(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;			t.Errorf("missing watch event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gottenNoxuInstance, err := noxuResourceClient.Get("foo", metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := createdNoxuInstance, gottenNoxuInstance; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		listWithItem, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 1, len(listWithItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := *createdNoxuInstance, listWithItem.(*unstructured.UnstructuredList).Items[0]; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := noxuResourceClient.Delete("foo", nil); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		listWithoutItem, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(listWithoutItem.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case watchEvent := <-noxuWatch.ResultChan():
0000000000000000000000000000000000000000;;			if e, a := watch.Deleted, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			deletedObjectMeta, err := meta.Accessor(watchEvent.Object)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// it should have a UUID
0000000000000000000000000000000000000000;;			createdObjectMeta, err := meta.Accessor(createdNoxuInstance)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := createdObjectMeta.GetUID(), deletedObjectMeta.GetUID(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;			t.Errorf("missing watch event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDiscovery(t *testing.T) {
0000000000000000000000000000000000000000;;		group := "mygroup.example.com"
0000000000000000000000000000000000000000;;		version := "v1beta1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scope := apiextensionsv1beta1.NamespaceScoped
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(scope)
0000000000000000000000000000000000000000;;		_, err = testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check whether it shows up in discovery properly
0000000000000000000000000000000000000000;;		resources, err := apiExtensionClient.Discovery().ServerResourcesForGroupVersion(group + "/" + version)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(resources.APIResources) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected exactly the resource \"noxus\" in group version %v/%v via discovery, got: %v", group, version, resources.APIResources)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := resources.APIResources[0]
0000000000000000000000000000000000000000;;		if r.Name != "noxus" {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected exactly the resource \"noxus\" in group version %v/%v via discovery, got: %v", group, version, r.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if r.Kind != "WishIHadChosenNoxu" {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected exactly the kind \"WishIHadChosenNoxu\" in group version %v/%v via discovery, got: %v", group, version, r.Kind)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := []string{"foo", "bar", "abc", "def"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(r.ShortNames, s) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected exactly the shortnames `foo, bar, abc, def` in group version %v/%v via discovery, got: %v", group, version, r.ShortNames)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Strings(r.Verbs)
0000000000000000000000000000000000000000;;		expectedVerbs := []string{"create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual([]string(r.Verbs), expectedVerbs) {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected verbs for resource \"noxus\" in group version %v/%v via discovery: expected=%v got=%v", group, version, expectedVerbs, r.Verbs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNoNamespaceReject(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := ""
0000000000000000000000000000000000000000;;		noxuResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		initialList, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(initialList.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initialListTypeMeta, err := meta.TypeAccessor(initialList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := noxuDefinition.Spec.Group+"/"+noxuDefinition.Spec.Version, initialListTypeMeta.GetAPIVersion(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := noxuDefinition.Spec.Names.ListKind, initialListTypeMeta.GetKind(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, "foo"), noxuResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected non-error: an empty namespace may not be set during creation while creating noxu instance: %v ", createdNoxuInstance)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSameNameDiffNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns1 := "namespace-1"
0000000000000000000000000000000000000000;;		testSimpleCRUD(t, ns1, noxuDefinition, noxuVersionClient)
0000000000000000000000000000000000000000;;		ns2 := "namespace-2"
0000000000000000000000000000000000000000;;		testSimpleCRUD(t, ns2, noxuDefinition, noxuVersionClient)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelfLink(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// namespace scoped
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient := noxuVersionClient.Resource(&metav1.APIResource{
0000000000000000000000000000000000000000;;			Name:       noxuDefinition.Spec.Names.Plural,
0000000000000000000000000000000000000000;;			Namespaced: noxuDefinition.Spec.Scope == apiextensionsv1beta1.NamespaceScoped,
0000000000000000000000000000000000000000;;		}, ns)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuInstanceToCreate := testserver.NewNoxuInstance(ns, "foo")
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := noxuNamespacedResourceClient.Create(noxuInstanceToCreate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := "/apis/mygroup.example.com/v1beta1/namespaces/not-the-default/noxus/foo", createdNoxuInstance.GetSelfLink(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cluster scoped
0000000000000000000000000000000000000000;;		curletDefinition := testserver.NewCurletCustomResourceDefinition(apiextensionsv1beta1.ClusterScoped)
0000000000000000000000000000000000000000;;		curletVersionClient, err := testserver.CreateNewCustomResourceDefinition(curletDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		curletResourceClient := curletVersionClient.Resource(&metav1.APIResource{
0000000000000000000000000000000000000000;;			Name:       curletDefinition.Spec.Names.Plural,
0000000000000000000000000000000000000000;;			Namespaced: curletDefinition.Spec.Scope == apiextensionsv1beta1.NamespaceScoped,
0000000000000000000000000000000000000000;;		}, ns)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		curletInstanceToCreate := testserver.NewCurletInstance(ns, "foo")
0000000000000000000000000000000000000000;;		createdCurletInstance, err := curletResourceClient.Create(curletInstanceToCreate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := "/apis/mygroup.example.com/v1beta1/foo", createdCurletInstance.GetSelfLink(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPreserveInt(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.ClusterScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := "not-the-default"
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient := noxuVersionClient.Resource(&metav1.APIResource{
0000000000000000000000000000000000000000;;			Name:       noxuDefinition.Spec.Names.Plural,
0000000000000000000000000000000000000000;;			Namespaced: true,
0000000000000000000000000000000000000000;;		}, ns)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuInstanceToCreate := testserver.NewNoxuInstance(ns, "foo")
0000000000000000000000000000000000000000;;		createdNoxuInstance, err := noxuNamespacedResourceClient.Create(noxuInstanceToCreate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		originalJSON, err := runtime.Encode(unstructured.UnstructuredJSONScheme, createdNoxuInstance)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gottenNoxuInstance, err := runtime.Decode(unstructured.UnstructuredJSONScheme, originalJSON)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check if int is preserved.
0000000000000000000000000000000000000000;;		unstructuredObj := gottenNoxuInstance.(*unstructured.Unstructured).Object
0000000000000000000000000000000000000000;;		num := unstructuredObj["num"].(map[string]interface{})
0000000000000000000000000000000000000000;;		num1 := num["num1"].(int64)
0000000000000000000000000000000000000000;;		num2 := num["num2"].(int64)
0000000000000000000000000000000000000000;;		if num1 != 9223372036854775807 || num2 != 1000000 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v, %v", `9223372036854775807, 1000000`, num1, num2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCrossNamespaceListWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		noxuVersionClient, err := testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := ""
0000000000000000000000000000000000000000;;		noxuResourceClient := NewNamespacedCustomResourceClient(ns, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		initialList, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(initialList.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initialListListMeta, err := meta.ListAccessor(initialList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuWatch, err := noxuResourceClient.Watch(metav1.ListOptions{ResourceVersion: initialListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer noxuWatch.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		instances := make(map[string]*unstructured.Unstructured)
0000000000000000000000000000000000000000;;		ns1 := "namespace-1"
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient1 := NewNamespacedCustomResourceClient(ns1, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		instances[ns1] = createInstanceWithNamespaceHelper(t, ns1, "foo1", noxuNamespacedResourceClient1, noxuDefinition)
0000000000000000000000000000000000000000;;		noxuNamespacesWatch1, err := noxuNamespacedResourceClient1.Watch(metav1.ListOptions{ResourceVersion: initialListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		defer noxuNamespacesWatch1.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns2 := "namespace-2"
0000000000000000000000000000000000000000;;		noxuNamespacedResourceClient2 := NewNamespacedCustomResourceClient(ns2, noxuVersionClient, noxuDefinition)
0000000000000000000000000000000000000000;;		instances[ns2] = createInstanceWithNamespaceHelper(t, ns2, "foo2", noxuNamespacedResourceClient2, noxuDefinition)
0000000000000000000000000000000000000000;;		noxuNamespacesWatch2, err := noxuNamespacedResourceClient2.Watch(metav1.ListOptions{ResourceVersion: initialListListMeta.GetResourceVersion()})
0000000000000000000000000000000000000000;;		defer noxuNamespacesWatch2.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createdList, err := noxuResourceClient.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 2, len(createdList.(*unstructured.UnstructuredList).Items); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, a := range createdList.(*unstructured.UnstructuredList).Items {
0000000000000000000000000000000000000000;;			if e := instances[a.GetNamespace()]; !reflect.DeepEqual(e, &a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		addEvents := 0
0000000000000000000000000000000000000000;;		for addEvents < 2 {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case watchEvent := <-noxuWatch.ResultChan():
0000000000000000000000000000000000000000;;				if e, a := watch.Added, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				createdObjectMeta, err := meta.Accessor(watchEvent.Object)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(createdObjectMeta.GetUID()) == 0 {
0000000000000000000000000000000000000000;;					t.Errorf("missing uuid: %#v", watchEvent.Object)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				createdTypeMeta, err := meta.TypeAccessor(watchEvent.Object)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := noxuDefinition.Spec.Group+"/"+noxuDefinition.Spec.Version, createdTypeMeta.GetAPIVersion(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := noxuDefinition.Spec.Names.Kind, createdTypeMeta.GetKind(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				delete(instances, createdObjectMeta.GetNamespace())
0000000000000000000000000000000000000000;;				addEvents++
0000000000000000000000000000000000000000;;			case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;				t.Fatalf("missing watch event")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 0, len(instances); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		checkNamespacesWatchHelper(t, ns1, noxuNamespacesWatch1)
0000000000000000000000000000000000000000;;		checkNamespacesWatchHelper(t, ns2, noxuNamespacesWatch2)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createInstanceWithNamespaceHelper(t *testing.T, ns string, name string, noxuNamespacedResourceClient *dynamic.ResourceClient, noxuDefinition *apiextensionsv1beta1.CustomResourceDefinition) *unstructured.Unstructured {
0000000000000000000000000000000000000000;;		createdInstance, err := instantiateCustomResource(t, testserver.NewNoxuInstance(ns, name), noxuNamespacedResourceClient, noxuDefinition)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to create noxu Instance:%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return createdInstance
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkNamespacesWatchHelper(t *testing.T, ns string, namespacedwatch watch.Interface) {
0000000000000000000000000000000000000000;;		namespacedAddEvent := 0
0000000000000000000000000000000000000000;;		for namespacedAddEvent < 2 {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case watchEvent := <-namespacedwatch.ResultChan():
0000000000000000000000000000000000000000;;				// Check that the namespaced watch only has one result
0000000000000000000000000000000000000000;;				if namespacedAddEvent > 0 {
0000000000000000000000000000000000000000;;					t.Fatalf("extra watch event")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := watch.Added, watchEvent.Type; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				createdObjectMeta, err := meta.Accessor(watchEvent.Object)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := ns, createdObjectMeta.GetNamespace(); e != a {
0000000000000000000000000000000000000000;;					t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case <-time.After(5 * time.Second):
0000000000000000000000000000000000000000;;				if namespacedAddEvent != 1 {
0000000000000000000000000000000000000000;;					t.Fatalf("missing watch event")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			namespacedAddEvent++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNameConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		stopCh, apiExtensionClient, clientPool, err := testserver.StartDefaultServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxuDefinition := testserver.NewNoxuCustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		_, err = testserver.CreateNewCustomResourceDefinition(noxuDefinition, apiExtensionClient, clientPool)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		noxu2Definition := testserver.NewNoxu2CustomResourceDefinition(apiextensionsv1beta1.NamespaceScoped)
0000000000000000000000000000000000000000;;		_, err = apiExtensionClient.Apiextensions().CustomResourceDefinitions().Create(noxu2Definition)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// A NameConflict occurs
0000000000000000000000000000000000000000;;		err = wait.Poll(500*time.Millisecond, wait.ForeverTestTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;			crd, err := testserver.GetCustomResourceDefinition(noxu2Definition, apiExtensionClient)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, condition := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;				if condition.Type == apiextensionsv1beta1.NamesAccepted && condition.Status == apiextensionsv1beta1.ConditionFalse {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = testserver.DeleteCustomResourceDefinition(noxuDefinition, apiExtensionClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Names are now accepted
0000000000000000000000000000000000000000;;		err = wait.Poll(500*time.Millisecond, wait.ForeverTestTimeout, func() (bool, error) {
0000000000000000000000000000000000000000;;			crd, err := testserver.GetCustomResourceDefinition(noxu2Definition, apiExtensionClient)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, condition := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;				if condition.Type == apiextensionsv1beta1.NamesAccepted && condition.Status == apiextensionsv1beta1.ConditionTrue {
0000000000000000000000000000000000000000;;					return true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
