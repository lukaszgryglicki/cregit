0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
651226993597e84f0560508c4720833ae5e2747c;staging/src/k8s.io/kube-apiextensions-server/pkg/client/informers/internalversion/generic.go[staging/src/k8s.io/kube-apiextensions-server/pkg/client/informers/internalversion/generic.go][staging/src/k8s.io/apiextensions-apiserver/pkg/client/informers/internalversion/generic.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
0000000000000000000000000000000000000000;;	// sharedInformers based on type
0000000000000000000000000000000000000000;;	type GenericInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() cache.GenericLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type genericInformer struct {
0000000000000000000000000000000000000000;;		informer cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		resource schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Informer returns the SharedIndexInformer.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.informer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lister returns the GenericLister.
0000000000000000000000000000000000000000;;	func (f *genericInformer) Lister() cache.GenericLister {
0000000000000000000000000000000000000000;;		return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ForResource gives generic access to a shared informer of the matching type
0000000000000000000000000000000000000000;;	// TODO extend this to unknown resources with a client pool
0000000000000000000000000000000000000000;;	func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
0000000000000000000000000000000000000000;;		switch resource {
0000000000000000000000000000000000000000;;		// Group=Apiextensions, Version=InternalVersion
0000000000000000000000000000000000000000;;		case apiextensions.SchemeGroupVersion.WithResource("customresourcedefinitions"):
0000000000000000000000000000000000000000;;			return &genericInformer{resource: resource.GroupResource(), informer: f.Apiextensions().InternalVersion().CustomResourceDefinitions().Informer()}, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("no informer found for %v", resource)
0000000000000000000000000000000000000000;;	}
