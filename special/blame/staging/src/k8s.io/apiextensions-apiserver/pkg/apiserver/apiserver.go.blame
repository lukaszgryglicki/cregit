0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8fc21e21e4759e5e143bc43ef3bcf37a9b783f28;staging/src/k8s.io/kube-apiextensions-server/pkg/apiserver/apiserver.go[staging/src/k8s.io/kube-apiextensions-server/pkg/apiserver/apiserver.go][staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/apiserver.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/discovery"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/install"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/client/clientset/internalclientset"
0000000000000000000000000000000000000000;;		internalinformers "k8s.io/apiextensions-apiserver/pkg/client/informers/internalversion"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/controller/finalizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/controller/status"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/registry/customresourcedefinition"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// make sure the generated client works
0000000000000000000000000000000000000000;;		_ "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
0000000000000000000000000000000000000000;;		_ "k8s.io/apiextensions-apiserver/pkg/client/informers/externalversions"
0000000000000000000000000000000000000000;;		_ "k8s.io/apiextensions-apiserver/pkg/client/informers/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		groupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		registry             = registered.NewOrDie("")
0000000000000000000000000000000000000000;;		Scheme               = runtime.NewScheme()
0000000000000000000000000000000000000000;;		Codecs               = serializer.NewCodecFactory(Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// if you modify this, make sure you update the crEncoder
0000000000000000000000000000000000000000;;		unversionedVersion = schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;		unversionedTypes   = []runtime.Object{
0000000000000000000000000000000000000000;;			&metav1.Status{},
0000000000000000000000000000000000000000;;			&metav1.WatchEvent{},
0000000000000000000000000000000000000000;;			&metav1.APIVersions{},
0000000000000000000000000000000000000000;;			&metav1.APIGroupList{},
0000000000000000000000000000000000000000;;			&metav1.APIGroup{},
0000000000000000000000000000000000000000;;			&metav1.APIResourceList{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		install.Install(groupFactoryRegistry, registry, Scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// we need to add the options to empty v1
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(Scheme, schema.GroupVersion{Group: "", Version: "v1"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Scheme.AddUnversionedTypes(unversionedVersion, unversionedTypes...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		GenericConfig *genericapiserver.Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CRDRESTOptionsGetter genericregistry.RESTOptionsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomResourceDefinitions struct {
0000000000000000000000000000000000000000;;		GenericAPIServer *genericapiserver.GenericAPIServer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// provided for easier embedding
0000000000000000000000000000000000000000;;		Informers internalinformers.SharedInformerFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type completedConfig struct {
0000000000000000000000000000000000000000;;		*Config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Complete fills in any fields not set that are required to have valid data. It's mutating the receiver.
0000000000000000000000000000000000000000;;	func (c *Config) Complete() completedConfig {
0000000000000000000000000000000000000000;;		c.GenericConfig.EnableDiscovery = false
0000000000000000000000000000000000000000;;		c.GenericConfig.Complete()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.GenericConfig.Version = &version.Info{
0000000000000000000000000000000000000000;;			Major: "0",
0000000000000000000000000000000000000000;;			Minor: "1",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return completedConfig{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SkipComplete provides a way to construct a server instance without config completion.
0000000000000000000000000000000000000000;;	func (c *Config) SkipComplete() completedConfig {
0000000000000000000000000000000000000000;;		return completedConfig{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a new instance of CustomResourceDefinitions from the given config.
0000000000000000000000000000000000000000;;	func (c completedConfig) New(delegationTarget genericapiserver.DelegationTarget) (*CustomResourceDefinitions, error) {
0000000000000000000000000000000000000000;;		genericServer, err := c.Config.GenericConfig.SkipComplete().New("apiextensions-apiserver", delegationTarget) // completion is done in Complete, no need for a second time
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s := &CustomResourceDefinitions{
0000000000000000000000000000000000000000;;			GenericAPIServer: genericServer,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiGroupInfo := genericapiserver.NewDefaultAPIGroupInfo(apiextensions.GroupName, registry, Scheme, metav1.ParameterCodec, Codecs)
0000000000000000000000000000000000000000;;		apiGroupInfo.GroupMeta.GroupVersion = v1beta1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		customResourceDefintionStorage := customresourcedefinition.NewREST(Scheme, c.GenericConfig.RESTOptionsGetter)
0000000000000000000000000000000000000000;;		v1beta1storage := map[string]rest.Storage{}
0000000000000000000000000000000000000000;;		v1beta1storage["customresourcedefinitions"] = customResourceDefintionStorage
0000000000000000000000000000000000000000;;		v1beta1storage["customresourcedefinitions/status"] = customresourcedefinition.NewStatusREST(Scheme, customResourceDefintionStorage)
0000000000000000000000000000000000000000;;		apiGroupInfo.VersionedResourcesStorageMap["v1beta1"] = v1beta1storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := s.GenericAPIServer.InstallAPIGroup(&apiGroupInfo); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crdClient, err := internalclientset.NewForConfig(s.GenericAPIServer.LoopbackClientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// it's really bad that this is leaking here, but until we can fix the test (which I'm pretty sure isn't even testing what it wants to test),
0000000000000000000000000000000000000000;;			// we need to be able to move forward
0000000000000000000000000000000000000000;;			kubeAPIVersions := os.Getenv("KUBE_API_VERSIONS")
0000000000000000000000000000000000000000;;			if len(kubeAPIVersions) == 0 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("failed to create clientset: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// KUBE_API_VERSIONS is used in test-update-storage-objects.sh, disabling a number of API
0000000000000000000000000000000000000000;;			// groups. This leads to a nil client above and undefined behaviour further down.
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// TODO: get rid of KUBE_API_VERSIONS or define sane behaviour if set
0000000000000000000000000000000000000000;;			glog.Errorf("Failed to create clientset with KUBE_API_VERSIONS=%q. KUBE_API_VERSIONS is only for testing. Things will break.", kubeAPIVersions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Informers = internalinformers.NewSharedInformerFactory(crdClient, 5*time.Minute)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delegateHandler := delegationTarget.UnprotectedHandler()
0000000000000000000000000000000000000000;;		if delegateHandler == nil {
0000000000000000000000000000000000000000;;			delegateHandler = http.NotFoundHandler()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		versionDiscoveryHandler := &versionDiscoveryHandler{
0000000000000000000000000000000000000000;;			discovery: map[schema.GroupVersion]*discovery.APIVersionHandler{},
0000000000000000000000000000000000000000;;			delegate:  delegateHandler,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		groupDiscoveryHandler := &groupDiscoveryHandler{
0000000000000000000000000000000000000000;;			discovery: map[string]*discovery.APIGroupHandler{},
0000000000000000000000000000000000000000;;			delegate:  delegateHandler,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		crdHandler := NewCustomResourceDefinitionHandler(
0000000000000000000000000000000000000000;;			versionDiscoveryHandler,
0000000000000000000000000000000000000000;;			groupDiscoveryHandler,
0000000000000000000000000000000000000000;;			s.GenericAPIServer.RequestContextMapper(),
0000000000000000000000000000000000000000;;			s.Informers.Apiextensions().InternalVersion().CustomResourceDefinitions().Lister(),
0000000000000000000000000000000000000000;;			delegateHandler,
0000000000000000000000000000000000000000;;			c.CRDRESTOptionsGetter,
0000000000000000000000000000000000000000;;			c.GenericConfig.AdmissionControl,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		s.GenericAPIServer.Handler.NonGoRestfulMux.Handle("/apis", crdHandler)
0000000000000000000000000000000000000000;;		s.GenericAPIServer.Handler.NonGoRestfulMux.HandlePrefix("/apis/", crdHandler)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crdController := NewDiscoveryController(s.Informers.Apiextensions().InternalVersion().CustomResourceDefinitions(), versionDiscoveryHandler, groupDiscoveryHandler, c.GenericConfig.RequestContextMapper)
0000000000000000000000000000000000000000;;		namingController := status.NewNamingConditionController(s.Informers.Apiextensions().InternalVersion().CustomResourceDefinitions(), crdClient)
0000000000000000000000000000000000000000;;		finalizingController := finalizer.NewCRDFinalizer(
0000000000000000000000000000000000000000;;			s.Informers.Apiextensions().InternalVersion().CustomResourceDefinitions(),
0000000000000000000000000000000000000000;;			crdClient,
0000000000000000000000000000000000000000;;			crdHandler,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// this only happens when KUBE_API_VERSIONS is set.  We must return without adding poststarthooks which would affect healthz
0000000000000000000000000000000000000000;;		if crdClient == nil {
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.GenericAPIServer.AddPostStartHook("start-apiextensions-informers", func(context genericapiserver.PostStartHookContext) error {
0000000000000000000000000000000000000000;;			s.Informers.Start(context.StopCh)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		s.GenericAPIServer.AddPostStartHook("start-apiextensions-controllers", func(context genericapiserver.PostStartHookContext) error {
0000000000000000000000000000000000000000;;			go crdController.Run(context.StopCh)
0000000000000000000000000000000000000000;;			go namingController.Run(context.StopCh)
0000000000000000000000000000000000000000;;			go finalizingController.Run(5, context.StopCh)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
