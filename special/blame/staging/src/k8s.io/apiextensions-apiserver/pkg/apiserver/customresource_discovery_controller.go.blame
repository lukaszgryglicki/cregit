0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
478925937fcc89575869a3591897a08b1c355070;staging/src/k8s.io/kube-apiextensions-server/pkg/apiserver/customresource_discovery_controller.go[staging/src/k8s.io/kube-apiextensions-server/pkg/apiserver/customresource_discovery_controller.go][staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_discovery_controller.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/discovery"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
0000000000000000000000000000000000000000;;		informers "k8s.io/apiextensions-apiserver/pkg/client/informers/internalversion/apiextensions/internalversion"
0000000000000000000000000000000000000000;;		listers "k8s.io/apiextensions-apiserver/pkg/client/listers/apiextensions/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiscoveryController struct {
0000000000000000000000000000000000000000;;		versionHandler *versionDiscoveryHandler
0000000000000000000000000000000000000000;;		groupHandler   *groupDiscoveryHandler
0000000000000000000000000000000000000000;;		contextMapper  request.RequestContextMapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crdLister  listers.CustomResourceDefinitionLister
0000000000000000000000000000000000000000;;		crdsSynced cache.InformerSynced
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// To allow injection for testing.
0000000000000000000000000000000000000000;;		syncFn func(version schema.GroupVersion) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		queue workqueue.RateLimitingInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDiscoveryController(crdInformer informers.CustomResourceDefinitionInformer, versionHandler *versionDiscoveryHandler, groupHandler *groupDiscoveryHandler, contextMapper request.RequestContextMapper) *DiscoveryController {
0000000000000000000000000000000000000000;;		c := &DiscoveryController{
0000000000000000000000000000000000000000;;			versionHandler: versionHandler,
0000000000000000000000000000000000000000;;			groupHandler:   groupHandler,
0000000000000000000000000000000000000000;;			crdLister:      crdInformer.Lister(),
0000000000000000000000000000000000000000;;			crdsSynced:     crdInformer.Informer().HasSynced,
0000000000000000000000000000000000000000;;			contextMapper:  contextMapper,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			queue: workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "DiscoveryController"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crdInformer.Informer().AddEventHandler(cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;			AddFunc:    c.addCustomResourceDefinition,
0000000000000000000000000000000000000000;;			UpdateFunc: c.updateCustomResourceDefinition,
0000000000000000000000000000000000000000;;			DeleteFunc: c.deleteCustomResourceDefinition,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.syncFn = c.sync
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) sync(version schema.GroupVersion) error {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiVersionsForDiscovery := []metav1.GroupVersionForDiscovery{}
0000000000000000000000000000000000000000;;		apiResourcesForDiscovery := []metav1.APIResource{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crds, err := c.crdLister.List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		foundVersion := false
0000000000000000000000000000000000000000;;		foundGroup := false
0000000000000000000000000000000000000000;;		for _, crd := range crds {
0000000000000000000000000000000000000000;;			if !apiextensions.IsCRDConditionTrue(crd, apiextensions.Established) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if crd.Spec.Group != version.Group {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			foundGroup = true
0000000000000000000000000000000000000000;;			apiVersionsForDiscovery = append(apiVersionsForDiscovery, metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;				GroupVersion: crd.Spec.Group + "/" + crd.Spec.Version,
0000000000000000000000000000000000000000;;				Version:      crd.Spec.Version,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if crd.Spec.Version != version.Version {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			foundVersion = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			verbs := metav1.Verbs([]string{"delete", "deletecollection", "get", "list", "patch", "create", "update", "watch"})
0000000000000000000000000000000000000000;;			// if we're terminating we don't allow some verbs
0000000000000000000000000000000000000000;;			if apiextensions.IsCRDConditionTrue(crd, apiextensions.Terminating) {
0000000000000000000000000000000000000000;;				verbs = metav1.Verbs([]string{"delete", "deletecollection", "get", "list", "watch"})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apiResourcesForDiscovery = append(apiResourcesForDiscovery, metav1.APIResource{
0000000000000000000000000000000000000000;;				Name:         crd.Status.AcceptedNames.Plural,
0000000000000000000000000000000000000000;;				SingularName: crd.Status.AcceptedNames.Singular,
0000000000000000000000000000000000000000;;				Namespaced:   crd.Spec.Scope == apiextensions.NamespaceScoped,
0000000000000000000000000000000000000000;;				Kind:         crd.Status.AcceptedNames.Kind,
0000000000000000000000000000000000000000;;				Verbs:        verbs,
0000000000000000000000000000000000000000;;				ShortNames:   crd.Status.AcceptedNames.ShortNames,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !foundGroup {
0000000000000000000000000000000000000000;;			c.groupHandler.unsetDiscovery(version.Group)
0000000000000000000000000000000000000000;;			c.versionHandler.unsetDiscovery(version)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiGroup := metav1.APIGroup{
0000000000000000000000000000000000000000;;			Name:     version.Group,
0000000000000000000000000000000000000000;;			Versions: apiVersionsForDiscovery,
0000000000000000000000000000000000000000;;			// the preferred versions for a group is arbitrary since there cannot be duplicate resources
0000000000000000000000000000000000000000;;			PreferredVersion: apiVersionsForDiscovery[0],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.groupHandler.setDiscovery(version.Group, discovery.NewAPIGroupHandler(Codecs, apiGroup, c.contextMapper))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !foundVersion {
0000000000000000000000000000000000000000;;			c.versionHandler.unsetDiscovery(version)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.versionHandler.setDiscovery(version, discovery.NewAPIVersionHandler(Codecs, version, discovery.APIResourceListerFunc(func() []metav1.APIResource {
0000000000000000000000000000000000000000;;			return apiResourcesForDiscovery
0000000000000000000000000000000000000000;;		}), c.contextMapper))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		defer utilruntime.HandleCrash()
0000000000000000000000000000000000000000;;		defer c.queue.ShutDown()
0000000000000000000000000000000000000000;;		defer glog.Infof("Shutting down DiscoveryController")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.Infof("Starting DiscoveryController")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !cache.WaitForCacheSync(stopCh, c.crdsSynced) {
0000000000000000000000000000000000000000;;			utilruntime.HandleError(fmt.Errorf("timed out waiting for caches to sync"))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// only start one worker thread since its a slow moving API
0000000000000000000000000000000000000000;;		go wait.Until(c.runWorker, time.Second, stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-stopCh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) runWorker() {
0000000000000000000000000000000000000000;;		for c.processNextWorkItem() {
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// processNextWorkItem deals with one key off the queue.  It returns false when it's time to quit.
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) processNextWorkItem() bool {
0000000000000000000000000000000000000000;;		key, quit := c.queue.Get()
0000000000000000000000000000000000000000;;		if quit {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer c.queue.Done(key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.syncFn(key.(schema.GroupVersion))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			c.queue.Forget(key)
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilruntime.HandleError(fmt.Errorf("%v failed with: %v", key, err))
0000000000000000000000000000000000000000;;		c.queue.AddRateLimited(key)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) enqueue(obj *apiextensions.CustomResourceDefinition) {
0000000000000000000000000000000000000000;;		c.queue.Add(schema.GroupVersion{Group: obj.Spec.Group, Version: obj.Spec.Version})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) addCustomResourceDefinition(obj interface{}) {
0000000000000000000000000000000000000000;;		castObj := obj.(*apiextensions.CustomResourceDefinition)
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Adding customresourcedefinition %s", castObj.Name)
0000000000000000000000000000000000000000;;		c.enqueue(castObj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) updateCustomResourceDefinition(obj, _ interface{}) {
0000000000000000000000000000000000000000;;		castObj := obj.(*apiextensions.CustomResourceDefinition)
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Updating customresourcedefinition %s", castObj.Name)
0000000000000000000000000000000000000000;;		c.enqueue(castObj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DiscoveryController) deleteCustomResourceDefinition(obj interface{}) {
0000000000000000000000000000000000000000;;		castObj, ok := obj.(*apiextensions.CustomResourceDefinition)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			tombstone, ok := obj.(cache.DeletedFinalStateUnknown)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				glog.Errorf("Couldn't get object from tombstone %#v", obj)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			castObj, ok = tombstone.Obj.(*apiextensions.CustomResourceDefinition)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				glog.Errorf("Tombstone contained object that is not expected %#v", obj)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Deleting customresourcedefinition %q", castObj.Name)
0000000000000000000000000000000000000000;;		c.enqueue(castObj)
0000000000000000000000000000000000000000;;	}
