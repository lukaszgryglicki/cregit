0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8fc21e21e4759e5e143bc43ef3bcf37a9b783f28;staging/src/k8s.io/kube-apiextensions-server/pkg/registry/customresource/etcd.go[staging/src/k8s.io/kube-apiextensions-server/pkg/registry/customresource/etcd.go][staging/src/k8s.io/apiextensions-apiserver/pkg/registry/customresource/etcd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package customresource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rest implements a RESTStorage for API services against etcd
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against API services.
0000000000000000000000000000000000000000;;	func NewREST(resource schema.GroupResource, listKind schema.GroupVersionKind, copier runtime.ObjectCopier, strategy CustomResourceDefinitionStorageStrategy, optsGetter generic.RESTOptionsGetter) *REST {
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:  copier,
0000000000000000000000000000000000000000;;			NewFunc: func() runtime.Object { return &unstructured.Unstructured{} },
0000000000000000000000000000000000000000;;			NewListFunc: func() runtime.Object {
0000000000000000000000000000000000000000;;				// lists are never stored, only manufactured, so stomp in the right kind
0000000000000000000000000000000000000000;;				ret := &unstructured.UnstructuredList{}
0000000000000000000000000000000000000000;;				ret.SetGroupVersionKind(listKind)
0000000000000000000000000000000000000000;;				return ret
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			PredicateFunc:     strategy.MatchCustomResourceDefinitionStorage,
0000000000000000000000000000000000000000;;			QualifiedResource: resource,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: strategy.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &REST{store}
0000000000000000000000000000000000000000;;	}
