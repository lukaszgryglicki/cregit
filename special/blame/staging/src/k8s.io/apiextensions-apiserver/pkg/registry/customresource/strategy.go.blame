0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8fc21e21e4759e5e143bc43ef3bcf37a9b783f28;staging/src/k8s.io/kube-apiextensions-server/pkg/registry/customresource/strategy.go[staging/src/k8s.io/kube-apiextensions-server/pkg/registry/customresource/strategy.go][staging/src/k8s.io/apiextensions-apiserver/pkg/registry/customresource/strategy.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package customresource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/validation"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/names"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionStorageStrategy struct {
0000000000000000000000000000000000000000;;		runtime.ObjectTyper
0000000000000000000000000000000000000000;;		names.NameGenerator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespaceScoped bool
0000000000000000000000000000000000000000;;		validator       customResourceValidator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStrategy(typer runtime.ObjectTyper, namespaceScoped bool, kind schema.GroupVersionKind) CustomResourceDefinitionStorageStrategy {
0000000000000000000000000000000000000000;;		return CustomResourceDefinitionStorageStrategy{
0000000000000000000000000000000000000000;;			ObjectTyper:     typer,
0000000000000000000000000000000000000000;;			NameGenerator:   names.SimpleNameGenerator,
0000000000000000000000000000000000000000;;			namespaceScoped: namespaceScoped,
0000000000000000000000000000000000000000;;			validator: customResourceValidator{
0000000000000000000000000000000000000000;;				namespaceScoped: namespaceScoped,
0000000000000000000000000000000000000000;;				kind:            kind,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CustomResourceDefinitionStorageStrategy) NamespaceScoped() bool {
0000000000000000000000000000000000000000;;		return a.namespaceScoped
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomResourceDefinitionStorageStrategy) PrepareForCreate(ctx genericapirequest.Context, obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomResourceDefinitionStorageStrategy) PrepareForUpdate(ctx genericapirequest.Context, obj, old runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CustomResourceDefinitionStorageStrategy) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return a.validator.Validate(ctx, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomResourceDefinitionStorageStrategy) AllowCreateOnUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomResourceDefinitionStorageStrategy) AllowUnconditionalUpdate() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (CustomResourceDefinitionStorageStrategy) Canonicalize(obj runtime.Object) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CustomResourceDefinitionStorageStrategy) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		return a.validator.ValidateUpdate(ctx, obj, old)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CustomResourceDefinitionStorageStrategy) GetAttrs(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labels.Set(accessor.GetLabels()), objectMetaFieldsSet(accessor, a.namespaceScoped), accessor.GetInitializers() != nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// objectMetaFieldsSet returns a fields that represent the ObjectMeta.
0000000000000000000000000000000000000000;;	func objectMetaFieldsSet(objectMeta metav1.Object, namespaceScoped bool) fields.Set {
0000000000000000000000000000000000000000;;		if namespaceScoped {
0000000000000000000000000000000000000000;;			return fields.Set{
0000000000000000000000000000000000000000;;				"metadata.name":      objectMeta.GetName(),
0000000000000000000000000000000000000000;;				"metadata.namespace": objectMeta.GetNamespace(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fields.Set{
0000000000000000000000000000000000000000;;			"metadata.name": objectMeta.GetName(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CustomResourceDefinitionStorageStrategy) MatchCustomResourceDefinitionStorage(label labels.Selector, field fields.Selector) storage.SelectionPredicate {
0000000000000000000000000000000000000000;;		return storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label:    label,
0000000000000000000000000000000000000000;;			Field:    field,
0000000000000000000000000000000000000000;;			GetAttrs: a.GetAttrs,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type customResourceValidator struct {
0000000000000000000000000000000000000000;;		namespaceScoped bool
0000000000000000000000000000000000000000;;		kind            schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a customResourceValidator) Validate(ctx genericapirequest.Context, obj runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("metadata"), nil, err.Error())}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeAccessor, err := meta.TypeAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("kind"), nil, err.Error())}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeAccessor.GetKind() != a.kind.Kind {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("kind"), typeAccessor.GetKind(), fmt.Sprintf("must be %v", a.kind.Kind))}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeAccessor.GetAPIVersion() != a.kind.Group+"/"+a.kind.Version {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("apiVersion"), typeAccessor.GetKind(), fmt.Sprintf("must be %v", a.kind.Group+"/"+a.kind.Version))}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return validation.ValidateObjectMetaAccessor(accessor, a.namespaceScoped, validation.NameIsDNSSubdomain, field.NewPath("metadata"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a customResourceValidator) ValidateUpdate(ctx genericapirequest.Context, obj, old runtime.Object) field.ErrorList {
0000000000000000000000000000000000000000;;		objAccessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("metadata"), nil, err.Error())}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldAccessor, err := meta.Accessor(old)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("metadata"), nil, err.Error())}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeAccessor, err := meta.TypeAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("kind"), nil, err.Error())}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeAccessor.GetKind() != a.kind.Kind {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("kind"), typeAccessor.GetKind(), fmt.Sprintf("must be %v", a.kind.Kind))}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeAccessor.GetAPIVersion() != a.kind.Group+"/"+a.kind.Version {
0000000000000000000000000000000000000000;;			return field.ErrorList{field.Invalid(field.NewPath("apiVersion"), typeAccessor.GetKind(), fmt.Sprintf("must be %v", a.kind.Group+"/"+a.kind.Version))}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return validation.ValidateObjectMetaAccessorUpdate(objAccessor, oldAccessor, field.NewPath("metadata"))
0000000000000000000000000000000000000000;;	}
