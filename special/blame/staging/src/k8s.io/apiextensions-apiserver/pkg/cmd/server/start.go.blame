0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8fc21e21e4759e5e143bc43ef3bcf37a9b783f28;staging/src/k8s.io/kube-apiextensions-server/pkg/cmd/server/start.go[staging/src/k8s.io/kube-apiextensions-server/pkg/cmd/server/start.go][staging/src/k8s.io/apiextensions-apiserver/pkg/cmd/server/start.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/cobra"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apiextensions-apiserver/pkg/apiserver"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericapiserver "k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		genericoptions "k8s.io/apiserver/pkg/server/options"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const defaultEtcdPathPrefix = "/registry/apiextensions.kubernetes.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionsServerOptions struct {
0000000000000000000000000000000000000000;;		RecommendedOptions *genericoptions.RecommendedOptions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StdOut io.Writer
0000000000000000000000000000000000000000;;		StdErr io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCustomResourceDefinitionsServerOptions(out, errOut io.Writer) *CustomResourceDefinitionsServerOptions {
0000000000000000000000000000000000000000;;		o := &CustomResourceDefinitionsServerOptions{
0000000000000000000000000000000000000000;;			RecommendedOptions: genericoptions.NewRecommendedOptions(defaultEtcdPathPrefix, apiserver.Scheme, apiserver.Codecs.LegacyCodec(v1beta1.SchemeGroupVersion)),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			StdOut: out,
0000000000000000000000000000000000000000;;			StdErr: errOut,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCommandStartCustomResourceDefinitionsServer(out, errOut io.Writer, stopCh <-chan struct{}) *cobra.Command {
0000000000000000000000000000000000000000;;		o := NewCustomResourceDefinitionsServerOptions(out, errOut)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cmd := &cobra.Command{
0000000000000000000000000000000000000000;;			Short: "Launch an API extensions API server",
0000000000000000000000000000000000000000;;			Long:  "Launch an API extensions API server",
0000000000000000000000000000000000000000;;			RunE: func(c *cobra.Command, args []string) error {
0000000000000000000000000000000000000000;;				if err := o.Complete(); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := o.Validate(args); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := o.RunCustomResourceDefinitionsServer(stopCh); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flags := cmd.Flags()
0000000000000000000000000000000000000000;;		o.RecommendedOptions.AddFlags(flags)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cmd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o CustomResourceDefinitionsServerOptions) Validate(args []string) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *CustomResourceDefinitionsServerOptions) Complete() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o CustomResourceDefinitionsServerOptions) Config() (*apiserver.Config, error) {
0000000000000000000000000000000000000000;;		// TODO have a "real" external address
0000000000000000000000000000000000000000;;		if err := o.RecommendedOptions.SecureServing.MaybeDefaultWithSelfSignedCerts("localhost", nil, []net.IP{net.ParseIP("127.0.0.1")}); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("error creating self-signed certificates: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverConfig := genericapiserver.NewConfig(apiserver.Codecs)
0000000000000000000000000000000000000000;;		if err := o.RecommendedOptions.ApplyTo(serverConfig); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := &apiserver.Config{
0000000000000000000000000000000000000000;;			GenericConfig:        serverConfig,
0000000000000000000000000000000000000000;;			CRDRESTOptionsGetter: NewCRDRESTOptionsGetter(*o.RecommendedOptions.Etcd),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return config, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCRDRESTOptionsGetter(etcdOptions genericoptions.EtcdOptions) genericregistry.RESTOptionsGetter {
0000000000000000000000000000000000000000;;		ret := apiserver.CRDRESTOptionsGetter{
0000000000000000000000000000000000000000;;			StorageConfig:         etcdOptions.StorageConfig,
0000000000000000000000000000000000000000;;			StoragePrefix:         etcdOptions.StorageConfig.Prefix,
0000000000000000000000000000000000000000;;			EnableWatchCache:      etcdOptions.EnableWatchCache,
0000000000000000000000000000000000000000;;			DefaultWatchCacheSize: etcdOptions.DefaultWatchCacheSize,
0000000000000000000000000000000000000000;;			// garbage collection for custom resources is forced off until GC works with CRs.
0000000000000000000000000000000000000000;;			// When GC is enabled, this turns back into etcdOptions.EnableGarbageCollection
0000000000000000000000000000000000000000;;			EnableGarbageCollection: false,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: etcdOptions.DeleteCollectionWorkers,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret.StorageConfig.Codec = unstructured.UnstructuredJSONScheme
0000000000000000000000000000000000000000;;		ret.StorageConfig.Copier = apiserver.UnstructuredCopier{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o CustomResourceDefinitionsServerOptions) RunCustomResourceDefinitionsServer(stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		config, err := o.Config()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server, err := config.Complete().New(genericapiserver.EmptyDelegate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return server.GenericAPIServer.PrepareRun().Run(stopCh)
0000000000000000000000000000000000000000;;	}
