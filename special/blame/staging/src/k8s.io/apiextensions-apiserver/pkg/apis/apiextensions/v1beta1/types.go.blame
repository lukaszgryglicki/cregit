0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8230ae79f227841331425c22d4725640d14b952f;staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/v1alpha1/types.go[staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/v1alpha1/types.go][staging/src/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionSpec describes how a user wants their resource to appear
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionSpec struct {
0000000000000000000000000000000000000000;;		// Group is the group this resource belongs in
0000000000000000000000000000000000000000;;		Group string `json:"group" protobuf:"bytes,1,opt,name=group"`
0000000000000000000000000000000000000000;;		// Version is the version this resource belongs in
0000000000000000000000000000000000000000;;		Version string `json:"version" protobuf:"bytes,2,opt,name=version"`
0000000000000000000000000000000000000000;;		// Names are the names used to describe this custom resource
0000000000000000000000000000000000000000;;		Names CustomResourceDefinitionNames `json:"names" protobuf:"bytes,3,opt,name=names"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Scope indicates whether this resource is cluster or namespace scoped.  Default is namespaced
0000000000000000000000000000000000000000;;		Scope ResourceScope `json:"scope" protobuf:"bytes,4,opt,name=scope,casttype=ResourceScope"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionNames struct {
0000000000000000000000000000000000000000;;		// Plural is the plural name of the resource to serve.  It must match the name of the CustomResourceDefinition-registration
0000000000000000000000000000000000000000;;		// too: plural.group and it must be all lowercase.
0000000000000000000000000000000000000000;;		Plural string `json:"plural" protobuf:"bytes,1,opt,name=plural"`
0000000000000000000000000000000000000000;;		// Singular is the singular name of the resource.  It must be all lowercase  Defaults to lowercased <kind>
0000000000000000000000000000000000000000;;		Singular string `json:"singular,omitempty" protobuf:"bytes,2,opt,name=singular"`
0000000000000000000000000000000000000000;;		// ShortNames are short names for the resource.  It must be all lowercase.
0000000000000000000000000000000000000000;;		ShortNames []string `json:"shortNames,omitempty" protobuf:"bytes,3,opt,name=shortNames"`
0000000000000000000000000000000000000000;;		// Kind is the serialized kind of the resource.  It is normally CamelCase and singular.
0000000000000000000000000000000000000000;;		Kind string `json:"kind" protobuf:"bytes,4,opt,name=kind"`
0000000000000000000000000000000000000000;;		// ListKind is the serialized kind of the list for this resource.  Defaults to <kind>List.
0000000000000000000000000000000000000000;;		ListKind string `json:"listKind,omitempty" protobuf:"bytes,5,opt,name=listKind"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceScope is an enum defining the different scopes availabe to a custom resource
0000000000000000000000000000000000000000;;	type ResourceScope string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ClusterScoped   ResourceScope = "Cluster"
0000000000000000000000000000000000000000;;		NamespaceScoped ResourceScope = "Namespaced"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConditionStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid condition statuses. "ConditionTrue" means a resource is in the condition.
0000000000000000000000000000000000000000;;	// "ConditionFalse" means a resource is not in the condition. "ConditionUnknown" means kubernetes
0000000000000000000000000000000000000000;;	// can't decide if a resource is in the condition or not. In the future, we could add other
0000000000000000000000000000000000000000;;	// intermediate conditions, e.g. ConditionDegraded.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ConditionTrue    ConditionStatus = "True"
0000000000000000000000000000000000000000;;		ConditionFalse   ConditionStatus = "False"
0000000000000000000000000000000000000000;;		ConditionUnknown ConditionStatus = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionConditionType is a valid value for CustomResourceDefinitionCondition.Type
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Established means that the resource has become active. A resource is established when all names are
0000000000000000000000000000000000000000;;		// accepted without a conflict for the first time. A resource stays established until deleted, even during
0000000000000000000000000000000000000000;;		// a later NamesAccepted due to changed names. Note that not all names can be changed.
0000000000000000000000000000000000000000;;		Established CustomResourceDefinitionConditionType = "Established"
0000000000000000000000000000000000000000;;		// NamesAccepted means the names chosen for this CustomResourceDefinition do not conflict with others in
0000000000000000000000000000000000000000;;		// the group and are therefore accepted.
0000000000000000000000000000000000000000;;		NamesAccepted CustomResourceDefinitionConditionType = "NamesAccepted"
0000000000000000000000000000000000000000;;		// Terminating means that the CustomResourceDefinition has been deleted and is cleaning up.
0000000000000000000000000000000000000000;;		Terminating CustomResourceDefinitionConditionType = "Terminating"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionCondition contains details for the current condition of this pod.
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionCondition struct {
0000000000000000000000000000000000000000;;		// Type is the type of the condition.
0000000000000000000000000000000000000000;;		Type CustomResourceDefinitionConditionType `json:"type" protobuf:"bytes,1,opt,name=type,casttype=CustomResourceDefinitionConditionType"`
0000000000000000000000000000000000000000;;		// Status is the status of the condition.
0000000000000000000000000000000000000000;;		// Can be True, False, Unknown.
0000000000000000000000000000000000000000;;		Status ConditionStatus `json:"status" protobuf:"bytes,2,opt,name=status,casttype=ConditionStatus"`
0000000000000000000000000000000000000000;;		// Last time the condition transitioned from one status to another.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty" protobuf:"bytes,3,opt,name=lastTransitionTime"`
0000000000000000000000000000000000000000;;		// Unique, one-word, CamelCase reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,4,opt,name=reason"`
0000000000000000000000000000000000000000;;		// Human-readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,5,opt,name=message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionStatus struct {
0000000000000000000000000000000000000000;;		// Conditions indicate state for particular aspects of a CustomResourceDefinition
0000000000000000000000000000000000000000;;		Conditions []CustomResourceDefinitionCondition `json:"conditions" protobuf:"bytes,1,opt,name=conditions"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AcceptedNames are the names that are actually being used to serve discovery
0000000000000000000000000000000000000000;;		// They may be different than the names in spec.
0000000000000000000000000000000000000000;;		AcceptedNames CustomResourceDefinitionNames `json:"acceptedNames" protobuf:"bytes,2,opt,name=acceptedNames"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceCleanupFinalizer is the name of the finalizer which will delete instances of
0000000000000000000000000000000000000000;;	// a CustomResourceDefinition
0000000000000000000000000000000000000000;;	const CustomResourceCleanupFinalizer = "customresourcecleanup.apiextensions.k8s.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format
0000000000000000000000000000000000000000;;	// <.spec.name>.<.spec.group>.
0000000000000000000000000000000000000000;;	type CustomResourceDefinition struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec describes how the user wants the resources to appear
0000000000000000000000000000000000000000;;		Spec CustomResourceDefinitionSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;		// Status indicates the actual state of the CustomResourceDefinition
0000000000000000000000000000000000000000;;		Status CustomResourceDefinitionStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
0000000000000000000000000000000000000000;;	type CustomResourceDefinitionList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Items individual CustomResourceDefinitions
0000000000000000000000000000000000000000;;		Items []CustomResourceDefinition `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
