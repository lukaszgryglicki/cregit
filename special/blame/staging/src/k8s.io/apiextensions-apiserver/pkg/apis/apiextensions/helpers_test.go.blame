0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6fdfaa00d90dd24a01d8a4428a463ae663d27284;staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/helpers_test.go[staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/helpers_test.go][staging/src/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/helpers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiextensions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCRDHasFinalizer(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name             string
0000000000000000000000000000000000000000;;			crd              *CustomResourceDefinition
0000000000000000000000000000000000000000;;			finalizerToCheck string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing",
0000000000000000000000000000000000000000;;				crd: &CustomResourceDefinition{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"not-it"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				finalizerToCheck: "it",
0000000000000000000000000000000000000000;;				expected:         false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "present",
0000000000000000000000000000000000000000;;				crd: &CustomResourceDefinition{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"not-it", "it"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				finalizerToCheck: "it",
0000000000000000000000000000000000000000;;				expected:         true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			actual := CRDHasFinalizer(tc.crd, tc.finalizerToCheck)
0000000000000000000000000000000000000000;;			if tc.expected != actual {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %v", tc.name, tc.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCRDRemoveFinalizer(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name             string
0000000000000000000000000000000000000000;;			crd              *CustomResourceDefinition
0000000000000000000000000000000000000000;;			finalizerToCheck string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expected []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "missing",
0000000000000000000000000000000000000000;;				crd: &CustomResourceDefinition{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"not-it"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				finalizerToCheck: "it",
0000000000000000000000000000000000000000;;				expected:         []string{"not-it"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "present",
0000000000000000000000000000000000000000;;				crd: &CustomResourceDefinition{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Finalizers: []string{"not-it", "it"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				finalizerToCheck: "it",
0000000000000000000000000000000000000000;;				expected:         []string{"not-it"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			CRDRemoveFinalizer(tc.crd, tc.finalizerToCheck)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(tc.expected, tc.crd.Finalizers) {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %v", tc.name, tc.expected, tc.crd.Finalizers)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
