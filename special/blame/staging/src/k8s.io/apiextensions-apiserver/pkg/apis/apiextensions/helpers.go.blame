0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5e7ba88435211b6b448ab330b995393899c40600;staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/helpers.go[staging/src/k8s.io/kube-apiextensions-server/pkg/apis/apiextensions/helpers.go][staging/src/k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/helpers.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiextensions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetCRDCondition sets the status condition.  It either overwrites the existing one or
0000000000000000000000000000000000000000;;	// creates a new one
0000000000000000000000000000000000000000;;	func SetCRDCondition(crd *CustomResourceDefinition, newCondition CustomResourceDefinitionCondition) {
0000000000000000000000000000000000000000;;		existingCondition := FindCRDCondition(crd, newCondition.Type)
0000000000000000000000000000000000000000;;		if existingCondition == nil {
0000000000000000000000000000000000000000;;			crd.Status.Conditions = append(crd.Status.Conditions, newCondition)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if existingCondition.Status != newCondition.Status {
0000000000000000000000000000000000000000;;			existingCondition.Status = newCondition.Status
0000000000000000000000000000000000000000;;			existingCondition.LastTransitionTime = newCondition.LastTransitionTime
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		existingCondition.Reason = newCondition.Reason
0000000000000000000000000000000000000000;;		existingCondition.Message = newCondition.Message
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveCRDCondition removes the status condition.
0000000000000000000000000000000000000000;;	func RemoveCRDCondition(crd *CustomResourceDefinition, conditionType CustomResourceDefinitionConditionType) {
0000000000000000000000000000000000000000;;		newConditions := []CustomResourceDefinitionCondition{}
0000000000000000000000000000000000000000;;		for _, condition := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;			if condition.Type != conditionType {
0000000000000000000000000000000000000000;;				newConditions = append(newConditions, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		crd.Status.Conditions = newConditions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindCRDCondition returns the condition you're looking for or nil
0000000000000000000000000000000000000000;;	func FindCRDCondition(crd *CustomResourceDefinition, conditionType CustomResourceDefinitionConditionType) *CustomResourceDefinitionCondition {
0000000000000000000000000000000000000000;;		for i := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;			if crd.Status.Conditions[i].Type == conditionType {
0000000000000000000000000000000000000000;;				return &crd.Status.Conditions[i]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCRDConditionTrue indicates if the condition is present and strictly true
0000000000000000000000000000000000000000;;	func IsCRDConditionTrue(crd *CustomResourceDefinition, conditionType CustomResourceDefinitionConditionType) bool {
0000000000000000000000000000000000000000;;		return IsCRDConditionPresentAndEqual(crd, conditionType, ConditionTrue)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCRDConditionFalse indicates if the condition is present and false true
0000000000000000000000000000000000000000;;	func IsCRDConditionFalse(crd *CustomResourceDefinition, conditionType CustomResourceDefinitionConditionType) bool {
0000000000000000000000000000000000000000;;		return IsCRDConditionPresentAndEqual(crd, conditionType, ConditionFalse)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCRDConditionPresentAndEqual indicates if the condition is present and equal to the arg
0000000000000000000000000000000000000000;;	func IsCRDConditionPresentAndEqual(crd *CustomResourceDefinition, conditionType CustomResourceDefinitionConditionType, status ConditionStatus) bool {
0000000000000000000000000000000000000000;;		for _, condition := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;			if condition.Type == conditionType {
0000000000000000000000000000000000000000;;				return condition.Status == status
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsCRDConditionEquivalent returns true if the lhs and rhs are equivalent except for times
0000000000000000000000000000000000000000;;	func IsCRDConditionEquivalent(lhs, rhs *CustomResourceDefinitionCondition) bool {
0000000000000000000000000000000000000000;;		if lhs == nil && rhs == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lhs == nil || rhs == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return lhs.Message == rhs.Message && lhs.Reason == rhs.Reason && lhs.Status == rhs.Status && lhs.Type == rhs.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CRDHasFinalizer returns true if the finalizer is in the list
0000000000000000000000000000000000000000;;	func CRDHasFinalizer(crd *CustomResourceDefinition, needle string) bool {
0000000000000000000000000000000000000000;;		for _, finalizer := range crd.Finalizers {
0000000000000000000000000000000000000000;;			if finalizer == needle {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CRDRemoveFinalizer removes the finalizer if present
0000000000000000000000000000000000000000;;	func CRDRemoveFinalizer(crd *CustomResourceDefinition, needle string) {
0000000000000000000000000000000000000000;;		newFinalizers := []string{}
0000000000000000000000000000000000000000;;		for _, finalizer := range crd.Finalizers {
0000000000000000000000000000000000000000;;			if finalizer != needle {
0000000000000000000000000000000000000000;;				newFinalizers = append(newFinalizers, finalizer)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		crd.Finalizers = newFinalizers
0000000000000000000000000000000000000000;;	}
