0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
321aa33e159cc1c682f453bc37893e14956898dd;staging/src/k8s.io/client-go/examples/third-party-resources/client/tpr.go[staging/src/k8s.io/client-go/examples/third-party-resources/client/tpr.go][staging/src/k8s.io/apiextensions-apiserver/examples/client-go/client/cr.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package client
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		crv1 "k8s.io/apiextensions-apiserver/examples/client-go/apis/cr/v1"
0000000000000000000000000000000000000000;;		apiextensionsv1beta1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
0000000000000000000000000000000000000000;;		apiextensionsclient "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		// Uncomment the following line to load the gcp plugin (only required to authenticate against GKE clusters).
0000000000000000000000000000000000000000;;		// _ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const exampleCRDName = crv1.ExampleResourcePlural + "." + crv1.GroupName
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateCustomResourceDefinition(clientset apiextensionsclient.Interface) (*apiextensionsv1beta1.CustomResourceDefinition, error) {
0000000000000000000000000000000000000000;;		crd := &apiextensionsv1beta1.CustomResourceDefinition{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: exampleCRDName,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: apiextensionsv1beta1.CustomResourceDefinitionSpec{
0000000000000000000000000000000000000000;;				Group:   crv1.GroupName,
0000000000000000000000000000000000000000;;				Version: crv1.SchemeGroupVersion.Version,
0000000000000000000000000000000000000000;;				Scope:   apiextensionsv1beta1.NamespaceScoped,
0000000000000000000000000000000000000000;;				Names: apiextensionsv1beta1.CustomResourceDefinitionNames{
0000000000000000000000000000000000000000;;					Plural: crv1.ExampleResourcePlural,
0000000000000000000000000000000000000000;;					Kind:   reflect.TypeOf(crv1.Example{}).Name(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err := clientset.ApiextensionsV1beta1().CustomResourceDefinitions().Create(crd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// wait for CRD being established
0000000000000000000000000000000000000000;;		err = wait.Poll(500*time.Millisecond, 60*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			crd, err = clientset.ApiextensionsV1beta1().CustomResourceDefinitions().Get(exampleCRDName, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, cond := range crd.Status.Conditions {
0000000000000000000000000000000000000000;;				switch cond.Type {
0000000000000000000000000000000000000000;;				case apiextensionsv1beta1.Established:
0000000000000000000000000000000000000000;;					if cond.Status == apiextensionsv1beta1.ConditionTrue {
0000000000000000000000000000000000000000;;						return true, err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case apiextensionsv1beta1.NamesAccepted:
0000000000000000000000000000000000000000;;					if cond.Status == apiextensionsv1beta1.ConditionFalse {
0000000000000000000000000000000000000000;;						fmt.Printf("Name conflict: %v\n", cond.Reason)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			deleteErr := clientset.ApiextensionsV1beta1().CustomResourceDefinitions().Delete(exampleCRDName, nil)
0000000000000000000000000000000000000000;;			if deleteErr != nil {
0000000000000000000000000000000000000000;;				return nil, errors.NewAggregate([]error{err, deleteErr})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return crd, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WaitForExampleInstanceProcessed(exampleClient *rest.RESTClient, name string) error {
0000000000000000000000000000000000000000;;		return wait.Poll(100*time.Millisecond, 10*time.Second, func() (bool, error) {
0000000000000000000000000000000000000000;;			var example crv1.Example
0000000000000000000000000000000000000000;;			err := exampleClient.Get().
0000000000000000000000000000000000000000;;				Resource(crv1.ExampleResourcePlural).
0000000000000000000000000000000000000000;;				Namespace(apiv1.NamespaceDefault).
0000000000000000000000000000000000000000;;				Name(name).
0000000000000000000000000000000000000000;;				Do().Into(&example)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil && example.Status.State == crv1.ExampleStateProcessed {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
