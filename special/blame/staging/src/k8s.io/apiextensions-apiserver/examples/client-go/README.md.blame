0000000000000000000000000000000000000000;;	# Custom Resource Example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Note:** CustomResourceDefinition is the successor of the deprecated ThirdPartyResource.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This particular example demonstrates how to perform basic operations such as:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* How to register a new custom resource (custom resource type) using a CustomResourceDefinition
0000000000000000000000000000000000000000;;	* How to create/get/list instances of your new resource type (update/delete/etc work as well but are not demonstrated)
0000000000000000000000000000000000000000;;	* How to setup a controller on resource handling create/update/delete events
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Running
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	# assumes you have a working kubeconfig, not required if operating in-cluster
0000000000000000000000000000000000000000;;	go run *.go -kubeconfig=$HOME/.kube/config
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Use Cases
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CustomResourceDefinitions can be used to implement custom resource types for your Kubernetes cluster.
0000000000000000000000000000000000000000;;	These act like most other Resources in Kubernetes, and may be `kubectl apply`'d, etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Some example use cases:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Provisioning/Management of external datastores/databases (eg. CloudSQL/RDS instances)
0000000000000000000000000000000000000000;;	* Higher level abstractions around Kubernetes primitives (eg. a single Resource to define an etcd cluster, backed by a Service and a ReplicationController) 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Defining types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Each instance of your custom resource has an attached Spec, which should be defined via a `struct{}` to provide data format validation.
0000000000000000000000000000000000000000;;	In practice, this Spec is arbitrary key-value data that specifies the configuration/behavior of your Resource.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For example, if you were implementing a custom resource for a Database, you might provide a DatabaseSpec like the following:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	type DatabaseSpec struct {
0000000000000000000000000000000000000000;;		Databases []string `json:"databases"`
0000000000000000000000000000000000000000;;		Users     []User   `json:"users"`
0000000000000000000000000000000000000000;;		Version   string   `json:"version"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type User struct {
0000000000000000000000000000000000000000;;		Name     string `json:"name"`
0000000000000000000000000000000000000000;;		Password string `json:"password"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Cleanup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Successfully running this program will clean the created artifacts. If you terminate the program without completing, you can clean up the created CustomResourceDefinition with:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    kubectl delete crd examples.cr.client-go.k8s.io
