0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
79188ebff227a9dcbbc45b67fd2f968481e13919;staging/src/k8s.io/client-go/examples/third-party-resources/types_test.go[staging/src/k8s.io/client-go/examples/third-party-resources/types_test.go][staging/src/k8s.io/apiextensions-apiserver/examples/client-go/apis/cr/v1/types_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/gofuzz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ runtime.Object = &Example{}
0000000000000000000000000000000000000000;;	var _ metav1.ObjectMetaAccessor = &Example{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ runtime.Object = &ExampleList{}
0000000000000000000000000000000000000000;;	var _ metav1.ListMetaAccessor = &ExampleList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func exampleFuzzerFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(obj *ExampleList, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(obj)
0000000000000000000000000000000000000000;;				obj.Items = make([]Example, c.Intn(10))
0000000000000000000000000000000000000000;;				for i := range obj.Items {
0000000000000000000000000000000000000000;;					c.Fuzz(&obj.Items[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestRoundTrip tests that the third-party kinds can be marshaled and unmarshaled correctly to/from JSON
0000000000000000000000000000000000000000;;	// without the loss of information. Moreover, deep copy is tested.
0000000000000000000000000000000000000000;;	func TestRoundTrip(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs := serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AddToScheme(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		seed := rand.Int63()
0000000000000000000000000000000000000000;;		fuzzerFuncs := apitesting.MergeFuzzerFuncs(t, apitesting.GenericFuzzerFuncs(t, codecs), exampleFuzzerFuncs(t))
0000000000000000000000000000000000000000;;		fuzzer := apitesting.FuzzerFor(fuzzerFuncs, rand.NewSource(seed))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apitesting.RoundTripSpecificKindWithoutProtobuf(t, SchemeGroupVersion.WithKind("Example"), scheme, codecs, fuzzer, nil)
0000000000000000000000000000000000000000;;		apitesting.RoundTripSpecificKindWithoutProtobuf(t, SchemeGroupVersion.WithKind("ExampleList"), scheme, codecs, fuzzer, nil)
0000000000000000000000000000000000000000;;	}
