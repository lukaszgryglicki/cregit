0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
321aa33e159cc1c682f453bc37893e14956898dd;staging/src/k8s.io/client-go/examples/third-party-resources/controller/controller.go[staging/src/k8s.io/client-go/examples/third-party-resources/controller/controller.go][staging/src/k8s.io/apiextensions-apiserver/examples/client-go/controller/controller.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package controller
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crv1 "k8s.io/apiextensions-apiserver/examples/client-go/apis/cr/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watcher is an example of watching on resource create/update/delete events
0000000000000000000000000000000000000000;;	type ExampleController struct {
0000000000000000000000000000000000000000;;		ExampleClient *rest.RESTClient
0000000000000000000000000000000000000000;;		ExampleScheme *runtime.Scheme
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run starts an Example resource controller
0000000000000000000000000000000000000000;;	func (c *ExampleController) Run(ctx context.Context) error {
0000000000000000000000000000000000000000;;		fmt.Print("Watch Example objects\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Watch Example objects
0000000000000000000000000000000000000000;;		_, err := c.watchExamples(ctx)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Failed to register watch for Example resource: %v\n", err)
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-ctx.Done()
0000000000000000000000000000000000000000;;		return ctx.Err()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExampleController) watchExamples(ctx context.Context) (cache.Controller, error) {
0000000000000000000000000000000000000000;;		source := cache.NewListWatchFromClient(
0000000000000000000000000000000000000000;;			c.ExampleClient,
0000000000000000000000000000000000000000;;			crv1.ExampleResourcePlural,
0000000000000000000000000000000000000000;;			apiv1.NamespaceAll,
0000000000000000000000000000000000000000;;			fields.Everything())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, controller := cache.NewInformer(
0000000000000000000000000000000000000000;;			source,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// The object type.
0000000000000000000000000000000000000000;;			&crv1.Example{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// resyncPeriod
0000000000000000000000000000000000000000;;			// Every resyncPeriod, all resources in the cache will retrigger events.
0000000000000000000000000000000000000000;;			// Set to 0 to disable the resync.
0000000000000000000000000000000000000000;;			0,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Your custom resource event handlers.
0000000000000000000000000000000000000000;;			cache.ResourceEventHandlerFuncs{
0000000000000000000000000000000000000000;;				AddFunc:    c.onAdd,
0000000000000000000000000000000000000000;;				UpdateFunc: c.onUpdate,
0000000000000000000000000000000000000000;;				DeleteFunc: c.onDelete,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go controller.Run(ctx.Done())
0000000000000000000000000000000000000000;;		return controller, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExampleController) onAdd(obj interface{}) {
0000000000000000000000000000000000000000;;		example := obj.(*crv1.Example)
0000000000000000000000000000000000000000;;		fmt.Printf("[CONTROLLER] OnAdd %s\n", example.ObjectMeta.SelfLink)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NEVER modify objects from the store. It's a read-only, local cache.
0000000000000000000000000000000000000000;;		// You can use exampleScheme.Copy() to make a deep copy of original object and modify this copy
0000000000000000000000000000000000000000;;		// Or create a copy manually for better performance
0000000000000000000000000000000000000000;;		copyObj, err := c.ExampleScheme.Copy(example)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("ERROR creating a deep copy of example object: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exampleCopy := copyObj.(*crv1.Example)
0000000000000000000000000000000000000000;;		exampleCopy.Status = crv1.ExampleStatus{
0000000000000000000000000000000000000000;;			State:   crv1.ExampleStateProcessed,
0000000000000000000000000000000000000000;;			Message: "Successfully processed by controller",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = c.ExampleClient.Put().
0000000000000000000000000000000000000000;;			Name(example.ObjectMeta.Name).
0000000000000000000000000000000000000000;;			Namespace(example.ObjectMeta.Namespace).
0000000000000000000000000000000000000000;;			Resource(crv1.ExampleResourcePlural).
0000000000000000000000000000000000000000;;			Body(exampleCopy).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Error()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("ERROR updating status: %v\n", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			fmt.Printf("UPDATED status: %#v\n", exampleCopy)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExampleController) onUpdate(oldObj, newObj interface{}) {
0000000000000000000000000000000000000000;;		oldExample := oldObj.(*crv1.Example)
0000000000000000000000000000000000000000;;		newExample := newObj.(*crv1.Example)
0000000000000000000000000000000000000000;;		fmt.Printf("[CONTROLLER] OnUpdate oldObj: %s\n", oldExample.ObjectMeta.SelfLink)
0000000000000000000000000000000000000000;;		fmt.Printf("[CONTROLLER] OnUpdate newObj: %s\n", newExample.ObjectMeta.SelfLink)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExampleController) onDelete(obj interface{}) {
0000000000000000000000000000000000000000;;		example := obj.(*crv1.Example)
0000000000000000000000000000000000000000;;		fmt.Printf("[CONTROLLER] OnDelete %s\n", example.ObjectMeta.SelfLink)
0000000000000000000000000000000000000000;;	}
