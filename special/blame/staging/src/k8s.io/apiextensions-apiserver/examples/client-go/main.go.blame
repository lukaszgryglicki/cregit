0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
370c8a012d3af175112c0699f18125b97ddeda6d;staging/src/k8s.io/client-go/examples/third-party-resources/main.go[staging/src/k8s.io/client-go/examples/third-party-resources/main.go][staging/src/k8s.io/apiextensions-apiserver/examples/client-go/main.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Note: the example only works with the code within the same release/branch.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiv1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiextensionsclient "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Uncomment the following line to load the gcp plugin (only required to authenticate against GKE clusters).
0000000000000000000000000000000000000000;;		// _ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		crv1 "k8s.io/apiextensions-apiserver/examples/client-go/apis/cr/v1"
0000000000000000000000000000000000000000;;		exampleclient "k8s.io/apiextensions-apiserver/examples/client-go/client"
0000000000000000000000000000000000000000;;		examplecontroller "k8s.io/apiextensions-apiserver/examples/client-go/controller"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		kubeconfig := flag.String("kubeconfig", "", "Path to a kube config. Only required if out-of-cluster.")
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create the client config. Use kubeconfig if given, otherwise assume in-cluster.
0000000000000000000000000000000000000000;;		config, err := buildConfig(*kubeconfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiextensionsclientset, err := apiextensionsclient.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// initialize custom resource using a CustomResourceDefinition if it does not exist
0000000000000000000000000000000000000000;;		crd, err := exampleclient.CreateCustomResourceDefinition(apiextensionsclientset)
0000000000000000000000000000000000000000;;		if err != nil && !apierrors.IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer apiextensionsclientset.ApiextensionsV1beta1().CustomResourceDefinitions().Delete(crd.Name, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// make a new config for our extension's API group, using the first config as a baseline
0000000000000000000000000000000000000000;;		exampleClient, exampleScheme, err := exampleclient.NewClient(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// start a controller on instances of our custom resource
0000000000000000000000000000000000000000;;		controller := examplecontroller.ExampleController{
0000000000000000000000000000000000000000;;			ExampleClient: exampleClient,
0000000000000000000000000000000000000000;;			ExampleScheme: exampleScheme,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx, cancelFunc := context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;		defer cancelFunc()
0000000000000000000000000000000000000000;;		go controller.Run(ctx)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create an instance of our custom resource
0000000000000000000000000000000000000000;;		example := &crv1.Example{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "example1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Spec: crv1.ExampleSpec{
0000000000000000000000000000000000000000;;				Foo: "hello",
0000000000000000000000000000000000000000;;				Bar: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Status: crv1.ExampleStatus{
0000000000000000000000000000000000000000;;				State:   crv1.ExampleStateCreated,
0000000000000000000000000000000000000000;;				Message: "Created, not processed yet",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var result crv1.Example
0000000000000000000000000000000000000000;;		err = exampleClient.Post().
0000000000000000000000000000000000000000;;			Resource(crv1.ExampleResourcePlural).
0000000000000000000000000000000000000000;;			Namespace(apiv1.NamespaceDefault).
0000000000000000000000000000000000000000;;			Body(example).
0000000000000000000000000000000000000000;;			Do().Into(&result)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			fmt.Printf("CREATED: %#v\n", result)
0000000000000000000000000000000000000000;;		} else if apierrors.IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			fmt.Printf("ALREADY EXISTS: %#v\n", result)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Poll until Example object is handled by controller and gets status updated to "Processed"
0000000000000000000000000000000000000000;;		err = exampleclient.WaitForExampleInstanceProcessed(exampleClient, "example1")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Print("PROCESSED\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Fetch a list of our CRs
0000000000000000000000000000000000000000;;		exampleList := crv1.ExampleList{}
0000000000000000000000000000000000000000;;		err = exampleClient.Get().Resource(crv1.ExampleResourcePlural).Do().Into(&exampleList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("LIST: %#v\n", exampleList)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func buildConfig(kubeconfig string) (*rest.Config, error) {
0000000000000000000000000000000000000000;;		if kubeconfig != "" {
0000000000000000000000000000000000000000;;			return clientcmd.BuildConfigFromFlags("", kubeconfig)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return rest.InClusterConfig()
0000000000000000000000000000000000000000;;	}
