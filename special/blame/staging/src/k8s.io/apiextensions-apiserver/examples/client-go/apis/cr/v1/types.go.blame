0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
321aa33e159cc1c682f453bc37893e14956898dd;staging/src/k8s.io/client-go/examples/third-party-resources/apis/tpr/v1/types.go[staging/src/k8s.io/client-go/examples/third-party-resources/apis/tpr/v1/types.go][staging/src/k8s.io/apiextensions-apiserver/examples/client-go/apis/cr/v1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ExampleResourcePlural = "examples"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Example struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata"`
0000000000000000000000000000000000000000;;		Spec              ExampleSpec   `json:"spec"`
0000000000000000000000000000000000000000;;		Status            ExampleStatus `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExampleSpec struct {
0000000000000000000000000000000000000000;;		Foo string `json:"foo"`
0000000000000000000000000000000000000000;;		Bar bool   `json:"bar"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExampleStatus struct {
0000000000000000000000000000000000000000;;		State   ExampleState `json:"state,omitempty"`
0000000000000000000000000000000000000000;;		Message string       `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExampleState string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ExampleStateCreated   ExampleState = "Created"
0000000000000000000000000000000000000000;;		ExampleStateProcessed ExampleState = "Processed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExampleList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata"`
0000000000000000000000000000000000000000;;		Items           []Example `json:"items"`
0000000000000000000000000000000000000000;;	}
