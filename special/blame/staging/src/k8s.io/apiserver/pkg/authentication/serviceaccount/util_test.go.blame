0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c119e2ed54bc9c4629261b88ee42dc72ca9c5d90;pkg/controller/serviceaccount/util_test.go[pkg/controller/serviceaccount/util_test.go][staging/src/k8s.io/apiserver/pkg/authentication/serviceaccount/util_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package serviceaccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeUsername(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			Namespace   string
0000000000000000000000000000000000000000;;			Name        string
0000000000000000000000000000000000000000;;			ExpectedErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid": {
0000000000000000000000000000000000000000;;				Namespace:   "foo",
0000000000000000000000000000000000000000;;				Name:        "bar",
0000000000000000000000000000000000000000;;				ExpectedErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty namespace": {
0000000000000000000000000000000000000000;;				Namespace:   "",
0000000000000000000000000000000000000000;;				Name:        "foo",
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty name": {
0000000000000000000000000000000000000000;;				Namespace:   "foo",
0000000000000000000000000000000000000000;;				Name:        "",
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"extra segments": {
0000000000000000000000000000000000000000;;				Namespace:   "foo",
0000000000000000000000000000000000000000;;				Name:        "bar:baz",
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid chars in namespace": {
0000000000000000000000000000000000000000;;				Namespace:   "foo ",
0000000000000000000000000000000000000000;;				Name:        "bar",
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid chars in name": {
0000000000000000000000000000000000000000;;				Namespace:   "foo",
0000000000000000000000000000000000000000;;				Name:        "bar ",
0000000000000000000000000000000000000000;;				ExpectedErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testCases {
0000000000000000000000000000000000000000;;			username := MakeUsername(tc.Namespace, tc.Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			namespace, name, err := SplitUsername(username)
0000000000000000000000000000000000000000;;			if (err != nil) != tc.ExpectedErr {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected error=%v, got %v", k, tc.ExpectedErr, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if namespace != tc.Namespace {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected namespace %q, got %q", k, tc.Namespace, namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if name != tc.Name {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected name %q, got %q", k, tc.Name, name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
