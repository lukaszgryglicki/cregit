0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e942ec7de1955c70aaa6b75bde6591053f64dd60;pkg/apiserver/authenticator/delegating.go[pkg/apiserver/authenticator/delegating.go][staging/src/k8s.io/apiserver/pkg/authentication/authenticatorfactory/delegating.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authenticatorfactory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/group"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/anonymous"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/bearertoken"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/headerrequest"
0000000000000000000000000000000000000000;;		unionauth "k8s.io/apiserver/pkg/authentication/request/union"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/websocket"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/request/x509"
0000000000000000000000000000000000000000;;		webhooktoken "k8s.io/apiserver/plugin/pkg/authenticator/token/webhook"
0000000000000000000000000000000000000000;;		authenticationclient "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/cert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DelegatingAuthenticatorConfig is the minimal configuration needed to create an authenticator
0000000000000000000000000000000000000000;;	// built to delegate authentication to a kube API server
0000000000000000000000000000000000000000;;	type DelegatingAuthenticatorConfig struct {
0000000000000000000000000000000000000000;;		Anonymous bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TokenAccessReviewClient authenticationclient.TokenReviewInterface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CacheTTL is the length of time that a token authentication answer will be cached.
0000000000000000000000000000000000000000;;		CacheTTL time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClientCAFile is the CA bundle file used to authenticate client certificates
0000000000000000000000000000000000000000;;		ClientCAFile string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestHeaderConfig *RequestHeaderConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c DelegatingAuthenticatorConfig) New() (authenticator.Request, *spec.SecurityDefinitions, error) {
0000000000000000000000000000000000000000;;		authenticators := []authenticator.Request{}
0000000000000000000000000000000000000000;;		securityDefinitions := spec.SecurityDefinitions{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// front-proxy first, then remote
0000000000000000000000000000000000000000;;		// Add the front proxy authenticator if requested
0000000000000000000000000000000000000000;;		if c.RequestHeaderConfig != nil {
0000000000000000000000000000000000000000;;			requestHeaderAuthenticator, err := headerrequest.NewSecure(
0000000000000000000000000000000000000000;;				c.RequestHeaderConfig.ClientCA,
0000000000000000000000000000000000000000;;				c.RequestHeaderConfig.AllowedClientNames,
0000000000000000000000000000000000000000;;				c.RequestHeaderConfig.UsernameHeaders,
0000000000000000000000000000000000000000;;				c.RequestHeaderConfig.GroupHeaders,
0000000000000000000000000000000000000000;;				c.RequestHeaderConfig.ExtraHeaderPrefixes,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authenticators = append(authenticators, requestHeaderAuthenticator)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// x509 client cert auth
0000000000000000000000000000000000000000;;		if len(c.ClientCAFile) > 0 {
0000000000000000000000000000000000000000;;			clientCAs, err := cert.NewPool(c.ClientCAFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, fmt.Errorf("unable to load client CA file %s: %v", c.ClientCAFile, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			verifyOpts := x509.DefaultVerifyOptions()
0000000000000000000000000000000000000000;;			verifyOpts.Roots = clientCAs
0000000000000000000000000000000000000000;;			authenticators = append(authenticators, x509.New(verifyOpts, x509.CommonNameUserConversion))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if c.TokenAccessReviewClient != nil {
0000000000000000000000000000000000000000;;			tokenAuth, err := webhooktoken.NewFromInterface(c.TokenAccessReviewClient, c.CacheTTL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authenticators = append(authenticators, bearertoken.New(tokenAuth), websocket.NewProtocolAuthenticator(tokenAuth))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			securityDefinitions["BearerToken"] = &spec.SecurityScheme{
0000000000000000000000000000000000000000;;				SecuritySchemeProps: spec.SecuritySchemeProps{
0000000000000000000000000000000000000000;;					Type:        "apiKey",
0000000000000000000000000000000000000000;;					Name:        "authorization",
0000000000000000000000000000000000000000;;					In:          "header",
0000000000000000000000000000000000000000;;					Description: "Bearer Token authentication",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(authenticators) == 0 {
0000000000000000000000000000000000000000;;			if c.Anonymous {
0000000000000000000000000000000000000000;;				return anonymous.NewAuthenticator(), &securityDefinitions, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, nil, errors.New("No authentication method configured")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticator := group.NewAuthenticatedGroupAdder(unionauth.New(authenticators...))
0000000000000000000000000000000000000000;;		if c.Anonymous {
0000000000000000000000000000000000000000;;			authenticator = unionauth.NewFailOnError(authenticator, anonymous.NewAuthenticator())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return authenticator, &securityDefinitions, nil
0000000000000000000000000000000000000000;;	}
