0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7d7e9bdae119ec909aced16aa7be4e460c1beb54;pkg/auth/group/group_adder.go[pkg/auth/group/group_adder.go][staging/src/k8s.io/apiserver/pkg/authentication/group/group_adder.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package group
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupAdder adds groups to an authenticated user.Info
0000000000000000000000000000000000000000;;	type GroupAdder struct {
0000000000000000000000000000000000000000;;		// Authenticator is delegated to make the authentication decision
0000000000000000000000000000000000000000;;		Authenticator authenticator.Request
0000000000000000000000000000000000000000;;		// Groups are additional groups to add to the user.Info from a successful authentication
0000000000000000000000000000000000000000;;		Groups []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewGroupAdder wraps a request authenticator, and adds the specified groups to the returned user when authentication succeeds
0000000000000000000000000000000000000000;;	func NewGroupAdder(auth authenticator.Request, groups []string) authenticator.Request {
0000000000000000000000000000000000000000;;		return &GroupAdder{auth, groups}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (g *GroupAdder) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		u, ok, err := g.Authenticator.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil || !ok {
0000000000000000000000000000000000000000;;			return nil, ok, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{
0000000000000000000000000000000000000000;;			Name:   u.GetName(),
0000000000000000000000000000000000000000;;			UID:    u.GetUID(),
0000000000000000000000000000000000000000;;			Groups: append(u.GetGroups(), g.Groups...),
0000000000000000000000000000000000000000;;			Extra:  u.GetExtra(),
0000000000000000000000000000000000000000;;		}, true, nil
0000000000000000000000000000000000000000;;	}
