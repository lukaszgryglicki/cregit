0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/authenticator/tokenfile/tokenfile.go[pkg/auth/authenticator/tokenfile/tokenfile.go][staging/src/k8s.io/apiserver/pkg/authentication/token/tokenfile/tokenfile.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package tokenfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/csv"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TokenAuthenticator struct {
0000000000000000000000000000000000000000;;		tokens map[string]*user.DefaultInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a TokenAuthenticator for a single token
0000000000000000000000000000000000000000;;	func New(tokens map[string]*user.DefaultInfo) *TokenAuthenticator {
0000000000000000000000000000000000000000;;		return &TokenAuthenticator{
0000000000000000000000000000000000000000;;			tokens: tokens,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCSV returns a TokenAuthenticator, populated from a CSV file.
0000000000000000000000000000000000000000;;	// The CSV file must contain records in the format "token,username,useruid"
0000000000000000000000000000000000000000;;	func NewCSV(path string) (*TokenAuthenticator, error) {
0000000000000000000000000000000000000000;;		file, err := os.Open(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer file.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		recordNum := 0
0000000000000000000000000000000000000000;;		tokens := make(map[string]*user.DefaultInfo)
0000000000000000000000000000000000000000;;		reader := csv.NewReader(file)
0000000000000000000000000000000000000000;;		reader.FieldsPerRecord = -1
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			record, err := reader.Read()
0000000000000000000000000000000000000000;;			if err == io.EOF {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(record) < 3 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("token file '%s' must have at least 3 columns (token, user name, user uid), found %d", path, len(record))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj := &user.DefaultInfo{
0000000000000000000000000000000000000000;;				Name: record[1],
0000000000000000000000000000000000000000;;				UID:  record[2],
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			recordNum++
0000000000000000000000000000000000000000;;			if _, exist := tokens[record[0]]; exist {
0000000000000000000000000000000000000000;;				glog.Warningf("duplicate token has been found in token file '%s', record number '%d'", path, recordNum)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tokens[record[0]] = obj
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(record) >= 4 {
0000000000000000000000000000000000000000;;				obj.Groups = strings.Split(record[3], ",")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &TokenAuthenticator{
0000000000000000000000000000000000000000;;			tokens: tokens,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *TokenAuthenticator) AuthenticateToken(value string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		user, ok := a.tokens[value]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return user, true, nil
0000000000000000000000000000000000000000;;	}
