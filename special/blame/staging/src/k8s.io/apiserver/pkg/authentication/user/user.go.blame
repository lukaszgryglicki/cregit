0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/user/user.go[pkg/auth/user/user.go][staging/src/k8s.io/apiserver/pkg/authentication/user/user.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info describes a user that has been authenticated to the system.
0000000000000000000000000000000000000000;;	type Info interface {
0000000000000000000000000000000000000000;;		// GetName returns the name that uniquely identifies this user among all
0000000000000000000000000000000000000000;;		// other active users.
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;		// GetUID returns a unique value for a particular user that will change
0000000000000000000000000000000000000000;;		// if the user is removed from the system and another user is added with
0000000000000000000000000000000000000000;;		// the same name.
0000000000000000000000000000000000000000;;		GetUID() string
0000000000000000000000000000000000000000;;		// GetGroups returns the names of the groups the user is a member of
0000000000000000000000000000000000000000;;		GetGroups() []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetExtra can contain any additional information that the authenticator
0000000000000000000000000000000000000000;;		// thought was interesting.  One example would be scopes on a token.
0000000000000000000000000000000000000000;;		// Keys in this map should be namespaced to the authenticator or
0000000000000000000000000000000000000000;;		// authenticator/authorizer pair making use of them.
0000000000000000000000000000000000000000;;		// For instance: "example.org/foo" instead of "foo"
0000000000000000000000000000000000000000;;		// This is a map[string][]string because it needs to be serializeable into
0000000000000000000000000000000000000000;;		// a SubjectAccessReviewSpec.authorization.k8s.io for proper authorization
0000000000000000000000000000000000000000;;		// delegation flows
0000000000000000000000000000000000000000;;		// In order to faithfully round-trip through an impersonation flow, these keys
0000000000000000000000000000000000000000;;		// MUST be lowercase.
0000000000000000000000000000000000000000;;		GetExtra() map[string][]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultInfo provides a simple user information exchange object
0000000000000000000000000000000000000000;;	// for components that implement the UserInfo interface.
0000000000000000000000000000000000000000;;	type DefaultInfo struct {
0000000000000000000000000000000000000000;;		Name   string
0000000000000000000000000000000000000000;;		UID    string
0000000000000000000000000000000000000000;;		Groups []string
0000000000000000000000000000000000000000;;		Extra  map[string][]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *DefaultInfo) GetName() string {
0000000000000000000000000000000000000000;;		return i.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *DefaultInfo) GetUID() string {
0000000000000000000000000000000000000000;;		return i.UID
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *DefaultInfo) GetGroups() []string {
0000000000000000000000000000000000000000;;		return i.Groups
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i *DefaultInfo) GetExtra() map[string][]string {
0000000000000000000000000000000000000000;;		return i.Extra
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// well-known user and group names
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SystemPrivilegedGroup = "system:masters"
0000000000000000000000000000000000000000;;		NodesGroup            = "system:nodes"
0000000000000000000000000000000000000000;;		AllUnauthenticated    = "system:unauthenticated"
0000000000000000000000000000000000000000;;		AllAuthenticated      = "system:authenticated"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Anonymous     = "system:anonymous"
0000000000000000000000000000000000000000;;		APIServerUser = "system:apiserver"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// core kubernetes process identities
0000000000000000000000000000000000000000;;		KubeProxy             = "system:kube-proxy"
0000000000000000000000000000000000000000;;		KubeControllerManager = "system:kube-controller-manager"
0000000000000000000000000000000000000000;;		KubeScheduler         = "system:kube-scheduler"
0000000000000000000000000000000000000000;;	)
