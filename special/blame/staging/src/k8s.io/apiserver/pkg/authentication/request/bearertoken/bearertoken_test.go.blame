0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/authenticator/bearertoken/bearertoken_test.go[pkg/auth/authenticator/bearertoken/bearertoken_test.go][staging/src/k8s.io/apiserver/pkg/authentication/request/bearertoken/bearertoken_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bearertoken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequest(t *testing.T) {
0000000000000000000000000000000000000000;;		auth := New(authenticator.TokenFunc(func(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;			if token != "token" {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected token: %s", token)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return &user.DefaultInfo{Name: "user"}, true, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		user, ok, err := auth.AuthenticateRequest(&http.Request{
0000000000000000000000000000000000000000;;			Header: http.Header{"Authorization": []string{"Bearer token"}},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if !ok || user == nil || err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected valid user")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestTokenInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		auth := New(authenticator.TokenFunc(func(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		user, ok, err := auth.AuthenticateRequest(&http.Request{
0000000000000000000000000000000000000000;;			Header: http.Header{"Authorization": []string{"Bearer token"}},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if ok || user != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected not authenticated user")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != invalidToken {
0000000000000000000000000000000000000000;;			t.Errorf("expected invalidToken error, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestTokenInvalidCustomError(t *testing.T) {
0000000000000000000000000000000000000000;;		customError := errors.New("custom")
0000000000000000000000000000000000000000;;		auth := New(authenticator.TokenFunc(func(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;			return nil, false, customError
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		user, ok, err := auth.AuthenticateRequest(&http.Request{
0000000000000000000000000000000000000000;;			Header: http.Header{"Authorization": []string{"Bearer token"}},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if ok || user != nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected not authenticated user")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != customError {
0000000000000000000000000000000000000000;;			t.Errorf("expected custom error, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestTokenError(t *testing.T) {
0000000000000000000000000000000000000000;;		auth := New(authenticator.TokenFunc(func(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;			return nil, false, errors.New("error")
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		user, ok, err := auth.AuthenticateRequest(&http.Request{
0000000000000000000000000000000000000000;;			Header: http.Header{"Authorization": []string{"Bearer token"}},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if ok || user != nil || err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestBadValue(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Req *http.Request
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Req: &http.Request{}},
0000000000000000000000000000000000000000;;			{Req: &http.Request{Header: http.Header{"Authorization": []string{"Bearer"}}}},
0000000000000000000000000000000000000000;;			{Req: &http.Request{Header: http.Header{"Authorization": []string{"bear token"}}}},
0000000000000000000000000000000000000000;;			{Req: &http.Request{Header: http.Header{"Authorization": []string{"Bearer: token"}}}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			auth := New(authenticator.TokenFunc(func(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;				t.Errorf("authentication should not have been called")
0000000000000000000000000000000000000000;;				return nil, false, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			user, ok, err := auth.AuthenticateRequest(testCase.Req)
0000000000000000000000000000000000000000;;			if ok || user != nil || err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected not authenticated (no token)", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBearerToken(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			AuthorizationHeaders []string
0000000000000000000000000000000000000000;;			TokenAuth            authenticator.Token
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectedUserName             string
0000000000000000000000000000000000000000;;			ExpectedOK                   bool
0000000000000000000000000000000000000000;;			ExpectedErr                  bool
0000000000000000000000000000000000000000;;			ExpectedAuthorizationHeaders []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no header": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         nil,
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  false,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty header": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{""},
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  false,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: []string{""},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"non-bearer header": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{"Basic 123"},
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  false,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: []string{"Basic 123"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty bearer token": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{"Bearer "},
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  false,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: []string{"Bearer "},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid bearer token removing header": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{"Bearer 123"},
0000000000000000000000000000000000000000;;				TokenAuth:                    authenticator.TokenFunc(func(t string) (user.Info, bool, error) { return &user.DefaultInfo{Name: "myuser"}, true, nil }),
0000000000000000000000000000000000000000;;				ExpectedUserName:             "myuser",
0000000000000000000000000000000000000000;;				ExpectedOK:                   true,
0000000000000000000000000000000000000000;;				ExpectedErr:                  false,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid bearer token": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{"Bearer 123"},
0000000000000000000000000000000000000000;;				TokenAuth:                    authenticator.TokenFunc(func(t string) (user.Info, bool, error) { return nil, false, nil }),
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  true,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: []string{"Bearer 123"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"error bearer token": {
0000000000000000000000000000000000000000;;				AuthorizationHeaders:         []string{"Bearer 123"},
0000000000000000000000000000000000000000;;				TokenAuth:                    authenticator.TokenFunc(func(t string) (user.Info, bool, error) { return nil, false, errors.New("error") }),
0000000000000000000000000000000000000000;;				ExpectedUserName:             "",
0000000000000000000000000000000000000000;;				ExpectedOK:                   false,
0000000000000000000000000000000000000000;;				ExpectedErr:                  true,
0000000000000000000000000000000000000000;;				ExpectedAuthorizationHeaders: []string{"Bearer 123"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range tests {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest("GET", "/", nil)
0000000000000000000000000000000000000000;;			for _, h := range tc.AuthorizationHeaders {
0000000000000000000000000000000000000000;;				req.Header.Add("Authorization", h)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			bearerAuth := New(tc.TokenAuth)
0000000000000000000000000000000000000000;;			u, ok, err := bearerAuth.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;			if tc.ExpectedErr != (err != nil) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected err=%v, got %v", k, tc.ExpectedErr, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ok != tc.ExpectedOK {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected ok=%v, got %v", k, tc.ExpectedOK, ok)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ok && u.GetName() != tc.ExpectedUserName {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected username=%v, got %v", k, tc.ExpectedUserName, u.GetName())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(req.Header["Authorization"], tc.ExpectedAuthorizationHeaders) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected headers=%#v, got %#v", k, tc.ExpectedAuthorizationHeaders, req.Header["Authorization"])
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
