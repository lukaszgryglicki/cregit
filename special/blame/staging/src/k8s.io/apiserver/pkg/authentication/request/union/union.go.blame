0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b6a04fc14cdaae04c339363de7902dd2811e2bf4;plugin/pkg/auth/authenticator/request/union/union.go[plugin/pkg/auth/authenticator/request/union/union.go][staging/src/k8s.io/apiserver/pkg/authentication/request/union/union.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package union
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// unionAuthRequestHandler authenticates requests using a chain of authenticator.Requests
0000000000000000000000000000000000000000;;	type unionAuthRequestHandler struct {
0000000000000000000000000000000000000000;;		// Handlers is a chain of request authenticators to delegate to
0000000000000000000000000000000000000000;;		Handlers []authenticator.Request
0000000000000000000000000000000000000000;;		// FailOnError determines whether an error returns short-circuits the chain
0000000000000000000000000000000000000000;;		FailOnError bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a request authenticator that validates credentials using a chain of authenticator.Request objects.
0000000000000000000000000000000000000000;;	// The entire chain is tried until one succeeds. If all fail, an aggregate error is returned.
0000000000000000000000000000000000000000;;	func New(authRequestHandlers ...authenticator.Request) authenticator.Request {
0000000000000000000000000000000000000000;;		if len(authRequestHandlers) == 1 {
0000000000000000000000000000000000000000;;			return authRequestHandlers[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &unionAuthRequestHandler{Handlers: authRequestHandlers, FailOnError: false}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFailOnError returns a request authenticator that validates credentials using a chain of authenticator.Request objects.
0000000000000000000000000000000000000000;;	// The first error short-circuits the chain.
0000000000000000000000000000000000000000;;	func NewFailOnError(authRequestHandlers ...authenticator.Request) authenticator.Request {
0000000000000000000000000000000000000000;;		if len(authRequestHandlers) == 1 {
0000000000000000000000000000000000000000;;			return authRequestHandlers[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &unionAuthRequestHandler{Handlers: authRequestHandlers, FailOnError: true}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateRequest authenticates the request using a chain of authenticator.Request objects.
0000000000000000000000000000000000000000;;	func (authHandler *unionAuthRequestHandler) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		var errlist []error
0000000000000000000000000000000000000000;;		for _, currAuthRequestHandler := range authHandler.Handlers {
0000000000000000000000000000000000000000;;			info, ok, err := currAuthRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if authHandler.FailOnError {
0000000000000000000000000000000000000000;;					return info, ok, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				errlist = append(errlist, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				return info, ok, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, false, utilerrors.NewAggregate(errlist)
0000000000000000000000000000000000000000;;	}
