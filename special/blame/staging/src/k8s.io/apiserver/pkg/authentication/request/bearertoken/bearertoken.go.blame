0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/authenticator/bearertoken/bearertoken.go[pkg/auth/authenticator/bearertoken/bearertoken.go][staging/src/k8s.io/apiserver/pkg/authentication/request/bearertoken/bearertoken.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package bearertoken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Authenticator struct {
0000000000000000000000000000000000000000;;		auth authenticator.Token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(auth authenticator.Token) *Authenticator {
0000000000000000000000000000000000000000;;		return &Authenticator{auth}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var invalidToken = errors.New("invalid bearer token")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *Authenticator) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		auth := strings.TrimSpace(req.Header.Get("Authorization"))
0000000000000000000000000000000000000000;;		if auth == "" {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parts := strings.Split(auth, " ")
0000000000000000000000000000000000000000;;		if len(parts) < 2 || strings.ToLower(parts[0]) != "bearer" {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		token := parts[1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Empty bearer tokens aren't valid
0000000000000000000000000000000000000000;;		if len(token) == 0 {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		user, ok, err := a.auth.AuthenticateToken(token)
0000000000000000000000000000000000000000;;		// if we authenticated successfully, go ahead and remove the bearer token so that no one
0000000000000000000000000000000000000000;;		// is ever tempted to use it inside of the API server
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			req.Header.Del("Authorization")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the token authenticator didn't error, provide a default error
0000000000000000000000000000000000000000;;		if !ok && err == nil {
0000000000000000000000000000000000000000;;			err = invalidToken
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return user, ok, err
0000000000000000000000000000000000000000;;	}
