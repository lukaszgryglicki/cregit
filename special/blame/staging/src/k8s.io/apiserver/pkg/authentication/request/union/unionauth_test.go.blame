0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b6a04fc14cdaae04c339363de7902dd2811e2bf4;plugin/pkg/auth/authenticator/request/union/unionauth_test.go[plugin/pkg/auth/authenticator/request/union/unionauth_test.go][staging/src/k8s.io/apiserver/pkg/authentication/request/union/unionauth_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package union
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockAuthRequestHandler struct {
0000000000000000000000000000000000000000;;		returnUser      user.Info
0000000000000000000000000000000000000000;;		isAuthenticated bool
0000000000000000000000000000000000000000;;		err             error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		user1 = &user.DefaultInfo{Name: "fresh_ferret", UID: "alfa"}
0000000000000000000000000000000000000000;;		user2 = &user.DefaultInfo{Name: "elegant_sheep", UID: "bravo"}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mock *mockAuthRequestHandler) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return mock.returnUser, mock.isAuthenticated, mock.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestSecondPasses(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{returnUser: user1}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{returnUser: user2, isAuthenticated: true}
0000000000000000000000000000000000000000;;		authRequestHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticatedUser, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly unauthenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(user2, authenticatedUser) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", user2, authenticatedUser)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestFirstPasses(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{returnUser: user1, isAuthenticated: true}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{returnUser: user2}
0000000000000000000000000000000000000000;;		authRequestHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticatedUser, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly unauthenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(user1, authenticatedUser) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", user1, authenticatedUser)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestSuppressUnnecessaryErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{err: errors.New("first")}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{isAuthenticated: true}
0000000000000000000000000000000000000000;;		authRequestHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly unauthenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestNoAuthenticators(t *testing.T) {
0000000000000000000000000000000000000000;;		authRequestHandler := New()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticatedUser, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly authenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if authenticatedUser != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected authenticatedUser: %v", authenticatedUser)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestNonePass(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{}
0000000000000000000000000000000000000000;;		authRequestHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly authenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestAdditiveErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{err: errors.New("first")}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{err: errors.New("second")}
0000000000000000000000000000000000000000;;		authRequestHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "first") {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error containing %v, got %v", "first", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "second") {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error containing %v, got %v", "second", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly authenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestFailEarly(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthRequestHandler{err: errors.New("first")}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthRequestHandler{err: errors.New("second")}
0000000000000000000000000000000000000000;;		authRequestHandler := NewFailOnError(handler1, handler2)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "http://example.org", nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, isAuthenticated, err := authRequestHandler.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "first") {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error containing %v, got %v", "first", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if strings.Contains(err.Error(), "second") {
0000000000000000000000000000000000000000;;			t.Errorf("Did not expect second error, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if isAuthenticated {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpectedly authenticated: %v", isAuthenticated)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
