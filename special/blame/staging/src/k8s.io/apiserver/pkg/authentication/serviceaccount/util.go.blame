0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
45ed899e078542c35544e4a178a4f6c37b23b86a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package serviceaccount
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apimachineryvalidation "k8s.io/apimachinery/pkg/api/validation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ServiceAccountUsernamePrefix    = "system:serviceaccount:"
0000000000000000000000000000000000000000;;		ServiceAccountUsernameSeparator = ":"
0000000000000000000000000000000000000000;;		ServiceAccountGroupPrefix       = "system:serviceaccounts:"
0000000000000000000000000000000000000000;;		AllServiceAccountsGroup         = "system:serviceaccounts"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeUsername generates a username from the given namespace and ServiceAccount name.
0000000000000000000000000000000000000000;;	// The resulting username can be passed to SplitUsername to extract the original namespace and ServiceAccount name.
0000000000000000000000000000000000000000;;	func MakeUsername(namespace, name string) string {
0000000000000000000000000000000000000000;;		return ServiceAccountUsernamePrefix + namespace + ServiceAccountUsernameSeparator + name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var invalidUsernameErr = fmt.Errorf("Username must be in the form %s", MakeUsername("namespace", "name"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SplitUsername returns the namespace and ServiceAccount name embedded in the given username,
0000000000000000000000000000000000000000;;	// or an error if the username is not a valid name produced by MakeUsername
0000000000000000000000000000000000000000;;	func SplitUsername(username string) (string, string, error) {
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(username, ServiceAccountUsernamePrefix) {
0000000000000000000000000000000000000000;;			return "", "", invalidUsernameErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		trimmed := strings.TrimPrefix(username, ServiceAccountUsernamePrefix)
0000000000000000000000000000000000000000;;		parts := strings.Split(trimmed, ServiceAccountUsernameSeparator)
0000000000000000000000000000000000000000;;		if len(parts) != 2 {
0000000000000000000000000000000000000000;;			return "", "", invalidUsernameErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		namespace, name := parts[0], parts[1]
0000000000000000000000000000000000000000;;		if len(apimachineryvalidation.ValidateNamespaceName(namespace, false)) != 0 {
0000000000000000000000000000000000000000;;			return "", "", invalidUsernameErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(apimachineryvalidation.ValidateServiceAccountName(name, false)) != 0 {
0000000000000000000000000000000000000000;;			return "", "", invalidUsernameErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return namespace, name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeGroupNames generates service account group names for the given namespace and ServiceAccount name
0000000000000000000000000000000000000000;;	func MakeGroupNames(namespace, name string) []string {
0000000000000000000000000000000000000000;;		return []string{
0000000000000000000000000000000000000000;;			AllServiceAccountsGroup,
0000000000000000000000000000000000000000;;			MakeNamespaceGroupName(namespace),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeNamespaceGroupName returns the name of the group all service accounts in the namespace are included in
0000000000000000000000000000000000000000;;	func MakeNamespaceGroupName(namespace string) string {
0000000000000000000000000000000000000000;;		return ServiceAccountGroupPrefix + namespace
0000000000000000000000000000000000000000;;	}
