0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
60807a9d5399a9556b802af5249ae217abc36edc;plugin/pkg/auth/authenticator/request/x509/x509.go[plugin/pkg/auth/authenticator/request/x509/x509.go][staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package x509
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"crypto/x509/pkix"
0000000000000000000000000000000000000000;;		"encoding/asn1"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserConversion defines an interface for extracting user info from a client certificate chain
0000000000000000000000000000000000000000;;	type UserConversion interface {
0000000000000000000000000000000000000000;;		User(chain []*x509.Certificate) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserConversionFunc is a function that implements the UserConversion interface.
0000000000000000000000000000000000000000;;	type UserConversionFunc func(chain []*x509.Certificate) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// User implements x509.UserConversion
0000000000000000000000000000000000000000;;	func (f UserConversionFunc) User(chain []*x509.Certificate) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return f(chain)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticator implements request.Authenticator by extracting user info from verified client certificates
0000000000000000000000000000000000000000;;	type Authenticator struct {
0000000000000000000000000000000000000000;;		opts x509.VerifyOptions
0000000000000000000000000000000000000000;;		user UserConversion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a request.Authenticator that verifies client certificates using the provided
0000000000000000000000000000000000000000;;	// VerifyOptions, and converts valid certificate chains into user.Info using the provided UserConversion
0000000000000000000000000000000000000000;;	func New(opts x509.VerifyOptions, user UserConversion) *Authenticator {
0000000000000000000000000000000000000000;;		return &Authenticator{opts, user}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateRequest authenticates the request using presented client certificates
0000000000000000000000000000000000000000;;	func (a *Authenticator) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		if req.TLS == nil || len(req.TLS.PeerCertificates) == 0 {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use intermediates, if provided
0000000000000000000000000000000000000000;;		optsCopy := a.opts
0000000000000000000000000000000000000000;;		if optsCopy.Intermediates == nil && len(req.TLS.PeerCertificates) > 1 {
0000000000000000000000000000000000000000;;			optsCopy.Intermediates = x509.NewCertPool()
0000000000000000000000000000000000000000;;			for _, intermediate := range req.TLS.PeerCertificates[1:] {
0000000000000000000000000000000000000000;;				optsCopy.Intermediates.AddCert(intermediate)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		chains, err := req.TLS.PeerCertificates[0].Verify(optsCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var errlist []error
0000000000000000000000000000000000000000;;		for _, chain := range chains {
0000000000000000000000000000000000000000;;			user, ok, err := a.user.User(chain)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errlist = append(errlist, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				return user, ok, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, false, utilerrors.NewAggregate(errlist)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Verifier implements request.Authenticator by verifying a client cert on the request, then delegating to the wrapped auth
0000000000000000000000000000000000000000;;	type Verifier struct {
0000000000000000000000000000000000000000;;		opts x509.VerifyOptions
0000000000000000000000000000000000000000;;		auth authenticator.Request
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// allowedCommonNames contains the common names which a verified certificate is allowed to have.
0000000000000000000000000000000000000000;;		// If empty, all verified certificates are allowed.
0000000000000000000000000000000000000000;;		allowedCommonNames sets.String
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewVerifier create a request.Authenticator by verifying a client cert on the request, then delegating to the wrapped auth
0000000000000000000000000000000000000000;;	func NewVerifier(opts x509.VerifyOptions, auth authenticator.Request, allowedCommonNames sets.String) authenticator.Request {
0000000000000000000000000000000000000000;;		return &Verifier{opts, auth, allowedCommonNames}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateRequest verifies the presented client certificate, then delegates to the wrapped auth
0000000000000000000000000000000000000000;;	func (a *Verifier) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		if req.TLS == nil || len(req.TLS.PeerCertificates) == 0 {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Use intermediates, if provided
0000000000000000000000000000000000000000;;		optsCopy := a.opts
0000000000000000000000000000000000000000;;		if optsCopy.Intermediates == nil && len(req.TLS.PeerCertificates) > 1 {
0000000000000000000000000000000000000000;;			optsCopy.Intermediates = x509.NewCertPool()
0000000000000000000000000000000000000000;;			for _, intermediate := range req.TLS.PeerCertificates[1:] {
0000000000000000000000000000000000000000;;				optsCopy.Intermediates.AddCert(intermediate)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := req.TLS.PeerCertificates[0].Verify(optsCopy); err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := a.verifySubject(req.TLS.PeerCertificates[0].Subject); err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a.auth.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *Verifier) verifySubject(subject pkix.Name) error {
0000000000000000000000000000000000000000;;		// No CN restrictions
0000000000000000000000000000000000000000;;		if len(a.allowedCommonNames) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Enforce CN restrictions
0000000000000000000000000000000000000000;;		if a.allowedCommonNames.Has(subject.CommonName) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.Warningf("x509: subject with cn=%s is not in the allowed list: %v", subject.CommonName, a.allowedCommonNames.List())
0000000000000000000000000000000000000000;;		return fmt.Errorf("x509: subject with cn=%s is not allowed", subject.CommonName)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultVerifyOptions returns VerifyOptions that use the system root certificates, current time,
0000000000000000000000000000000000000000;;	// and requires certificates to be valid for client auth (x509.ExtKeyUsageClientAuth)
0000000000000000000000000000000000000000;;	func DefaultVerifyOptions() x509.VerifyOptions {
0000000000000000000000000000000000000000;;		return x509.VerifyOptions{
0000000000000000000000000000000000000000;;			KeyUsages: []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CommonNameUserConversion builds user info from a certificate chain using the subject's CommonName
0000000000000000000000000000000000000000;;	var CommonNameUserConversion = UserConversionFunc(func(chain []*x509.Certificate) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		if len(chain[0].Subject.CommonName) == 0 {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{
0000000000000000000000000000000000000000;;			Name:   chain[0].Subject.CommonName,
0000000000000000000000000000000000000000;;			Groups: chain[0].Subject.Organization,
0000000000000000000000000000000000000000;;		}, true, nil
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DNSNameUserConversion builds user info from a certificate chain using the first DNSName on the certificate
0000000000000000000000000000000000000000;;	var DNSNameUserConversion = UserConversionFunc(func(chain []*x509.Certificate) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		if len(chain[0].DNSNames) == 0 {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{Name: chain[0].DNSNames[0]}, true, nil
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EmailAddressUserConversion builds user info from a certificate chain using the first EmailAddress on the certificate
0000000000000000000000000000000000000000;;	var EmailAddressUserConversion = UserConversionFunc(func(chain []*x509.Certificate) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		var emailAddressOID asn1.ObjectIdentifier = []int{1, 2, 840, 113549, 1, 9, 1}
0000000000000000000000000000000000000000;;		if len(chain[0].EmailAddresses) == 0 {
0000000000000000000000000000000000000000;;			for _, name := range chain[0].Subject.Names {
0000000000000000000000000000000000000000;;				if name.Type.Equal(emailAddressOID) {
0000000000000000000000000000000000000000;;					return &user.DefaultInfo{Name: name.Value.(string)}, true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{Name: chain[0].EmailAddresses[0]}, true, nil
0000000000000000000000000000000000000000;;	})
