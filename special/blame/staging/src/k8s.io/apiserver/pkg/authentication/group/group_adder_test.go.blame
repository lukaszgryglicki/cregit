0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7d7e9bdae119ec909aced16aa7be4e460c1beb54;pkg/auth/group/group_adder_test.go[pkg/auth/group/group_adder_test.go][staging/src/k8s.io/apiserver/pkg/authentication/group/group_adder_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package group
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGroupAdder(t *testing.T) {
0000000000000000000000000000000000000000;;		adder := authenticator.Request(
0000000000000000000000000000000000000000;;			NewGroupAdder(
0000000000000000000000000000000000000000;;				authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;					return &user.DefaultInfo{Name: "user", Groups: []string{"original"}}, true, nil
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				[]string{"added"},
0000000000000000000000000000000000000000;;			),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		user, _, _ := adder.AuthenticateRequest(nil)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(user.GetGroups(), []string{"original", "added"}) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected original,added groups, got %#v", user.GetGroups())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticatedGroupAdder(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name         string
0000000000000000000000000000000000000000;;			inputUser    user.Info
0000000000000000000000000000000000000000;;			expectedUser user.Info
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "add",
0000000000000000000000000000000000000000;;				inputUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{"some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{"some-group", user.AllAuthenticated},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "don't double add",
0000000000000000000000000000000000000000;;				inputUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{user.AllAuthenticated, "some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{user.AllAuthenticated, "some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "don't add for anon",
0000000000000000000000000000000000000000;;				inputUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   user.Anonymous,
0000000000000000000000000000000000000000;;					Groups: []string{"some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   user.Anonymous,
0000000000000000000000000000000000000000;;					Groups: []string{"some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "don't add for unauthenticated group",
0000000000000000000000000000000000000000;;				inputUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{user.AllUnauthenticated, "some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "user",
0000000000000000000000000000000000000000;;					Groups: []string{user.AllUnauthenticated, "some-group"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			adder := authenticator.Request(
0000000000000000000000000000000000000000;;				NewAuthenticatedGroupAdder(
0000000000000000000000000000000000000000;;					authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;						return test.inputUser, true, nil
0000000000000000000000000000000000000000;;					}),
0000000000000000000000000000000000000000;;				),
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			user, _, _ := adder.AuthenticateRequest(nil)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(user, test.expectedUser) {
0000000000000000000000000000000000000000;;				t.Errorf("got %#v", user)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
