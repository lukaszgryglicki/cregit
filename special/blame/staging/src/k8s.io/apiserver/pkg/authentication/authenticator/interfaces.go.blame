0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/authenticator/interfaces.go[pkg/auth/authenticator/interfaces.go][staging/src/k8s.io/apiserver/pkg/authentication/authenticator/interfaces.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authenticator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Token checks a string value against a backing authentication store and returns
0000000000000000000000000000000000000000;;	// information about the current user and true if successful, false if not successful,
0000000000000000000000000000000000000000;;	// or an error if the token could not be checked.
0000000000000000000000000000000000000000;;	type Token interface {
0000000000000000000000000000000000000000;;		AuthenticateToken(token string) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Request attempts to extract authentication information from a request and returns
0000000000000000000000000000000000000000;;	// information about the current user and true if successful, false if not successful,
0000000000000000000000000000000000000000;;	// or an error if the request could not be checked.
0000000000000000000000000000000000000000;;	type Request interface {
0000000000000000000000000000000000000000;;		AuthenticateRequest(req *http.Request) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Password checks a username and password against a backing authentication store and
0000000000000000000000000000000000000000;;	// returns information about the user and true if successful, false if not successful,
0000000000000000000000000000000000000000;;	// or an error if the username and password could not be checked
0000000000000000000000000000000000000000;;	type Password interface {
0000000000000000000000000000000000000000;;		AuthenticatePassword(user, password string) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TokenFunc is a function that implements the Token interface.
0000000000000000000000000000000000000000;;	type TokenFunc func(token string) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateToken implements authenticator.Token.
0000000000000000000000000000000000000000;;	func (f TokenFunc) AuthenticateToken(token string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return f(token)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestFunc is a function that implements the Request interface.
0000000000000000000000000000000000000000;;	type RequestFunc func(req *http.Request) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateRequest implements authenticator.Request.
0000000000000000000000000000000000000000;;	func (f RequestFunc) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return f(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PasswordFunc is a function that implements the Password interface.
0000000000000000000000000000000000000000;;	type PasswordFunc func(user, password string) (user.Info, bool, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatePassword implements authenticator.Password.
0000000000000000000000000000000000000000;;	func (f PasswordFunc) AuthenticatePassword(user, password string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		return f(user, password)
0000000000000000000000000000000000000000;;	}
