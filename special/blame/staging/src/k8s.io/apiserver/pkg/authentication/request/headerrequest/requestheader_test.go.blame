0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
007ba76f4acb1f785973677eec71dbe8e38e80be;plugin/pkg/auth/authenticator/request/headerrequest/requestheader_test.go[plugin/pkg/auth/authenticator/request/headerrequest/requestheader_test.go][staging/src/k8s.io/apiserver/pkg/authentication/request/headerrequest/requestheader_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package headerrequest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRequestHeader(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			nameHeaders        []string
0000000000000000000000000000000000000000;;			groupHeaders       []string
0000000000000000000000000000000000000000;;			extraPrefixHeaders []string
0000000000000000000000000000000000000000;;			requestHeaders     http.Header
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedUser user.Info
0000000000000000000000000000000000000000;;			expectedOk   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {},
0000000000000000000000000000000000000000;;			"user no match": {
0000000000000000000000000000000000000000;;				nameHeaders: []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user match": {
0000000000000000000000000000000000000000;;				nameHeaders:    []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{"X-Remote-User": {"Bob"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Bob",
0000000000000000000000000000000000000000;;					Groups: []string{},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user exact match": {
0000000000000000000000000000000000000000;;				nameHeaders: []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{
0000000000000000000000000000000000000000;;					"Prefixed-X-Remote-User-With-Suffix": {"Bob"},
0000000000000000000000000000000000000000;;					"X-Remote-User-With-Suffix":          {"Bob"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user first match": {
0000000000000000000000000000000000000000;;				nameHeaders: []string{
0000000000000000000000000000000000000000;;					"X-Remote-User",
0000000000000000000000000000000000000000;;					"A-Second-X-Remote-User",
0000000000000000000000000000000000000000;;					"Another-X-Remote-User",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{
0000000000000000000000000000000000000000;;					"X-Remote-User":          {"", "First header, second value"},
0000000000000000000000000000000000000000;;					"A-Second-X-Remote-User": {"Second header, first value", "Second header, second value"},
0000000000000000000000000000000000000000;;					"Another-X-Remote-User":  {"Third header, first value"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Second header, first value",
0000000000000000000000000000000000000000;;					Groups: []string{},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"user case-insensitive": {
0000000000000000000000000000000000000000;;				nameHeaders:    []string{"x-REMOTE-user"},             // configured headers can be case-insensitive
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{"X-Remote-User": {"Bob"}}, // the parsed headers are normalized by the http package
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Bob",
0000000000000000000000000000000000000000;;					Groups: []string{},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"groups none": {
0000000000000000000000000000000000000000;;				nameHeaders:  []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;				groupHeaders: []string{"X-Remote-Group"},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{
0000000000000000000000000000000000000000;;					"X-Remote-User": {"Bob"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Bob",
0000000000000000000000000000000000000000;;					Groups: []string{},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"groups all matches": {
0000000000000000000000000000000000000000;;				nameHeaders:  []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;				groupHeaders: []string{"X-Remote-Group-1", "X-Remote-Group-2"},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{
0000000000000000000000000000000000000000;;					"X-Remote-User":    {"Bob"},
0000000000000000000000000000000000000000;;					"X-Remote-Group-1": {"one-a", "one-b"},
0000000000000000000000000000000000000000;;					"X-Remote-Group-2": {"two-a", "two-b"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Bob",
0000000000000000000000000000000000000000;;					Groups: []string{"one-a", "one-b", "two-a", "two-b"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"extra prefix matches case-insensitive": {
0000000000000000000000000000000000000000;;				nameHeaders:        []string{"X-Remote-User"},
0000000000000000000000000000000000000000;;				groupHeaders:       []string{"X-Remote-Group-1", "X-Remote-Group-2"},
0000000000000000000000000000000000000000;;				extraPrefixHeaders: []string{"X-Remote-Extra-1-", "X-Remote-Extra-2-"},
0000000000000000000000000000000000000000;;				requestHeaders: http.Header{
0000000000000000000000000000000000000000;;					"X-Remote-User":         {"Bob"},
0000000000000000000000000000000000000000;;					"X-Remote-Group-1":      {"one-a", "one-b"},
0000000000000000000000000000000000000000;;					"X-Remote-Group-2":      {"two-a", "two-b"},
0000000000000000000000000000000000000000;;					"X-Remote-extra-1-key1": {"alfa", "bravo"},
0000000000000000000000000000000000000000;;					"X-Remote-Extra-1-Key2": {"charlie", "delta"},
0000000000000000000000000000000000000000;;					"X-Remote-Extra-1-":     {"india", "juliet"},
0000000000000000000000000000000000000000;;					"X-Remote-extra-2-":     {"kilo", "lima"},
0000000000000000000000000000000000000000;;					"X-Remote-extra-2-Key1": {"echo", "foxtrot"},
0000000000000000000000000000000000000000;;					"X-Remote-Extra-2-key2": {"golf", "hotel"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "Bob",
0000000000000000000000000000000000000000;;					Groups: []string{"one-a", "one-b", "two-a", "two-b"},
0000000000000000000000000000000000000000;;					Extra: map[string][]string{
0000000000000000000000000000000000000000;;						"key1": {"alfa", "bravo", "echo", "foxtrot"},
0000000000000000000000000000000000000000;;						"key2": {"charlie", "delta", "golf", "hotel"},
0000000000000000000000000000000000000000;;						"":     {"india", "juliet", "kilo", "lima"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedOk: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, testcase := range testcases {
0000000000000000000000000000000000000000;;			auth, err := New(testcase.nameHeaders, testcase.groupHeaders, testcase.extraPrefixHeaders)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			req := &http.Request{Header: testcase.requestHeaders}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			user, ok, _ := auth.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;			if testcase.expectedOk != ok {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", k, testcase.expectedOk, ok)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := testcase.expectedUser, user; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %#v, got %#v", k, e, a)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
