0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b8242dee41e26a7b8a0156e005dffa89b23f1cfd;pkg/api/context_test.go[pkg/api/context_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/request/context_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package request_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestNamespaceContext validates that a namespace can be get/set on a context object
0000000000000000000000000000000000000000;;	func TestNamespaceContext(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		result, ok := genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if metav1.NamespaceDefault != result {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected: %s, Actual: %s", metav1.NamespaceDefault, result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx = genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		result, ok = genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Should not be ok because there is no namespace on the context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TestUserContext validates that a userinfo can be get/set on a context object
0000000000000000000000000000000000000000;;	func TestUserContext(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		_, ok := genericapirequest.UserFrom(ctx)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Should not be ok because there is no user.Info on the context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx = genericapirequest.WithUser(
0000000000000000000000000000000000000000;;			ctx,
0000000000000000000000000000000000000000;;			&user.DefaultInfo{
0000000000000000000000000000000000000000;;				Name:   "bob",
0000000000000000000000000000000000000000;;				UID:    "123",
0000000000000000000000000000000000000000;;				Groups: []string{"group1"},
0000000000000000000000000000000000000000;;				Extra:  map[string][]string{"foo": {"bar"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		result, ok := genericapirequest.UserFrom(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting user info")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedName := "bob"
0000000000000000000000000000000000000000;;		if result.GetName() != expectedName {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user name error, Expected: %s, Actual: %s", expectedName, result.GetName())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedUID := "123"
0000000000000000000000000000000000000000;;		if result.GetUID() != expectedUID {
0000000000000000000000000000000000000000;;			t.Fatalf("Get UID error, Expected: %s, Actual: %s", expectedUID, result.GetName())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedGroup := "group1"
0000000000000000000000000000000000000000;;		actualGroup := result.GetGroups()
0000000000000000000000000000000000000000;;		if len(actualGroup) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user group number error, Expected: 1, Actual: %d", len(actualGroup))
0000000000000000000000000000000000000000;;		} else if actualGroup[0] != expectedGroup {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user group error, Expected: %s, Actual: %s", expectedGroup, actualGroup[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedExtraKey := "foo"
0000000000000000000000000000000000000000;;		expectedExtraValue := "bar"
0000000000000000000000000000000000000000;;		actualExtra := result.GetExtra()
0000000000000000000000000000000000000000;;		if len(actualExtra[expectedExtraKey]) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user extra map number error, Expected: 1, Actual: %d", len(actualExtra[expectedExtraKey]))
0000000000000000000000000000000000000000;;		} else if actualExtra[expectedExtraKey][0] != expectedExtraValue {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user extra map value error, Expected: %s, Actual: %s", expectedExtraValue, actualExtra[expectedExtraKey])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TestUIDContext validates that a UID can be get/set on a context object
0000000000000000000000000000000000000000;;	func TestUIDContext(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		_, ok := genericapirequest.UIDFrom(ctx)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Should not be ok because there is no UID on the context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx = genericapirequest.WithUID(
0000000000000000000000000000000000000000;;			ctx,
0000000000000000000000000000000000000000;;			types.UID("testUID"),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		_, ok = genericapirequest.UIDFrom(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting UID")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TestUserAgentContext validates that a useragent can be get/set on a context object
0000000000000000000000000000000000000000;;	func TestUserAgentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		_, ok := genericapirequest.UserAgentFrom(ctx)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Should not be ok because there is no UserAgent on the context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx = genericapirequest.WithUserAgent(
0000000000000000000000000000000000000000;;			ctx,
0000000000000000000000000000000000000000;;			"TestUserAgent",
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		result, ok := genericapirequest.UserAgentFrom(ctx)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Error getting UserAgent")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedResult := "TestUserAgent"
0000000000000000000000000000000000000000;;		if result != expectedResult {
0000000000000000000000000000000000000000;;			t.Fatalf("Get user agent error, Expected: %s, Actual: %s", expectedResult, result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
