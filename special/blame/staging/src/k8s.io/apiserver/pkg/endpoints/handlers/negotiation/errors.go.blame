0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
06699f6bbe14a867aaaecd86af05add5cf06668e;pkg/apiserver/handlers/negotiation/errors.go[pkg/apiserver/handlers/negotiation/errors.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/negotiation/errors.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package negotiation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errNotAcceptable indicates Accept negotiation has failed
0000000000000000000000000000000000000000;;	type errNotAcceptable struct {
0000000000000000000000000000000000000000;;		accepted []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotAcceptableError(accepted []string) error {
0000000000000000000000000000000000000000;;		return errNotAcceptable{accepted}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errNotAcceptable) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("only the following media types are accepted: %v", strings.Join(e.accepted, ", "))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errNotAcceptable) Status() metav1.Status {
0000000000000000000000000000000000000000;;		return metav1.Status{
0000000000000000000000000000000000000000;;			Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;			Code:    http.StatusNotAcceptable,
0000000000000000000000000000000000000000;;			Reason:  metav1.StatusReason("NotAcceptable"),
0000000000000000000000000000000000000000;;			Message: e.Error(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errUnsupportedMediaType indicates Content-Type is not recognized
0000000000000000000000000000000000000000;;	type errUnsupportedMediaType struct {
0000000000000000000000000000000000000000;;		accepted []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnsupportedMediaTypeError(accepted []string) error {
0000000000000000000000000000000000000000;;		return errUnsupportedMediaType{accepted}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errUnsupportedMediaType) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("the body of the request was in an unknown format - accepted media types include: %v", strings.Join(e.accepted, ", "))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errUnsupportedMediaType) Status() metav1.Status {
0000000000000000000000000000000000000000;;		return metav1.Status{
0000000000000000000000000000000000000000;;			Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;			Code:    http.StatusUnsupportedMediaType,
0000000000000000000000000000000000000000;;			Reason:  metav1.StatusReason("UnsupportedMediaType"),
0000000000000000000000000000000000000000;;			Message: e.Error(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
