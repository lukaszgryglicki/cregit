0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0afe84e289c9e312c664431f1be5541f9e352ad1;pkg/apiserver/errors_test.go[pkg/apiserver/errors_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/responsewriters/status_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package responsewriters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		stderrs "errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := map[error]metav1.Status{
0000000000000000000000000000000000000000;;			errors.NewNotFound(schema.GroupResource{Group: "legacy.kubernetes.io", Resource: "foos"}, "bar"): {
0000000000000000000000000000000000000000;;				Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;				Code:    http.StatusNotFound,
0000000000000000000000000000000000000000;;				Reason:  metav1.StatusReasonNotFound,
0000000000000000000000000000000000000000;;				Message: "foos.legacy.kubernetes.io \"bar\" not found",
0000000000000000000000000000000000000000;;				Details: &metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Group: "legacy.kubernetes.io",
0000000000000000000000000000000000000000;;					Kind:  "foos",
0000000000000000000000000000000000000000;;					Name:  "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			errors.NewAlreadyExists(schema.GroupResource{Resource: "foos"}, "bar"): {
0000000000000000000000000000000000000000;;				Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;				Code:    http.StatusConflict,
0000000000000000000000000000000000000000;;				Reason:  "AlreadyExists",
0000000000000000000000000000000000000000;;				Message: "foos \"bar\" already exists",
0000000000000000000000000000000000000000;;				Details: &metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;					Kind:  "foos",
0000000000000000000000000000000000000000;;					Name:  "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			errors.NewConflict(schema.GroupResource{Resource: "foos"}, "bar", stderrs.New("failure")): {
0000000000000000000000000000000000000000;;				Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;				Code:    http.StatusConflict,
0000000000000000000000000000000000000000;;				Reason:  "Conflict",
0000000000000000000000000000000000000000;;				Message: "Operation cannot be fulfilled on foos \"bar\": failure",
0000000000000000000000000000000000000000;;				Details: &metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Group: "",
0000000000000000000000000000000000000000;;					Kind:  "foos",
0000000000000000000000000000000000000000;;					Name:  "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range cases {
0000000000000000000000000000000000000000;;			actual := ErrorToAPIStatus(k)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(actual, &v) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected %#v, Got %#v", k, v, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
