0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e613f7aaeeb407dcce0124f27bbd4e65e1ccd9c3;pkg/genericapiserver/endpoints/openapi/openapi_test.go[pkg/genericapiserver/endpoints/openapi/openapi_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/openapi/openapi_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		openapitesting "k8s.io/apiserver/pkg/endpoints/openapi/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func assertEqual(t *testing.T, expected, actual interface{}) {
0000000000000000000000000000000000000000;;		var equal bool
0000000000000000000000000000000000000000;;		if expected == nil || actual == nil {
0000000000000000000000000000000000000000;;			equal = expected == actual
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			equal = reflect.DeepEqual(expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !equal {
0000000000000000000000000000000000000000;;			t.Errorf("%v != %v", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetDefinitionName(t *testing.T) {
0000000000000000000000000000000000000000;;		testType := openapitesting.TestType{}
0000000000000000000000000000000000000000;;		// in production, the name is stripped of ".*vendor/" prefix before passed
0000000000000000000000000000000000000000;;		// to GetDefinitionName, so here typePkgName does not have the
0000000000000000000000000000000000000000;;		// "k8s.io/kubernetes/vendor" prefix.
0000000000000000000000000000000000000000;;		typePkgName := "k8s.io/apiserver/pkg/endpoints/openapi/testing.TestType"
0000000000000000000000000000000000000000;;		typeFriendlyName := "io.k8s.apiserver.pkg.endpoints.openapi.testing.TestType"
0000000000000000000000000000000000000000;;		if strings.HasSuffix(reflect.TypeOf(testType).PkgPath(), "go_default_test") {
0000000000000000000000000000000000000000;;			// the test is running inside bazel where the package name is changed and
0000000000000000000000000000000000000000;;			// "go_default_test" will add to package path.
0000000000000000000000000000000000000000;;			typePkgName = "k8s.io/apiserver/pkg/endpoints/openapi/testing/go_default_test.TestType"
0000000000000000000000000000000000000000;;			typeFriendlyName = "io.k8s.apiserver.pkg.endpoints.openapi.testing.go_default_test.TestType"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := runtime.NewScheme()
0000000000000000000000000000000000000000;;		s.AddKnownTypeWithName(testType.GroupVersionKind(), &testType)
0000000000000000000000000000000000000000;;		namer := NewDefinitionNamer(s)
0000000000000000000000000000000000000000;;		n, e := namer.GetDefinitionName(typePkgName)
0000000000000000000000000000000000000000;;		assertEqual(t, typeFriendlyName, n)
0000000000000000000000000000000000000000;;		assertEqual(t, e["x-kubernetes-group-version-kind"], []v1.GroupVersionKind{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group:   "test",
0000000000000000000000000000000000000000;;				Version: "v1",
0000000000000000000000000000000000000000;;				Kind:    "TestType",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		n, e2 := namer.GetDefinitionName("test.com/another.Type")
0000000000000000000000000000000000000000;;		assertEqual(t, "com.test.another.Type", n)
0000000000000000000000000000000000000000;;		assertEqual(t, e2, spec.Extensions(nil))
0000000000000000000000000000000000000000;;	}
