0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
06699f6bbe14a867aaaecd86af05add5cf06668e;pkg/apiserver/handlers/discovery.go[pkg/apiserver/handlers/discovery.go][staging/src/k8s.io/apiserver/pkg/endpoints/discovery/version.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restful "github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/negotiation"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type APIResourceLister interface {
0000000000000000000000000000000000000000;;		ListAPIResources() []metav1.APIResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type APIResourceListerFunc func() []metav1.APIResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f APIResourceListerFunc) ListAPIResources() []metav1.APIResource {
0000000000000000000000000000000000000000;;		return f()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIVersionHandler creates a webservice serving the supported resources for the version
0000000000000000000000000000000000000000;;	// E.g., such a web service will be registered at /apis/extensions/v1beta1.
0000000000000000000000000000000000000000;;	type APIVersionHandler struct {
0000000000000000000000000000000000000000;;		serializer    runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		contextMapper request.RequestContextMapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupVersion      schema.GroupVersion
0000000000000000000000000000000000000000;;		apiResourceLister APIResourceLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAPIVersionHandler(serializer runtime.NegotiatedSerializer, groupVersion schema.GroupVersion, apiResourceLister APIResourceLister, contextMapper request.RequestContextMapper) *APIVersionHandler {
0000000000000000000000000000000000000000;;		if keepUnversioned(groupVersion.Group) {
0000000000000000000000000000000000000000;;			// Because in release 1.1, /apis/extensions returns response with empty
0000000000000000000000000000000000000000;;			// APIVersion, we use stripVersionNegotiatedSerializer to keep the
0000000000000000000000000000000000000000;;			// response backwards compatible.
0000000000000000000000000000000000000000;;			serializer = stripVersionNegotiatedSerializer{serializer}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &APIVersionHandler{
0000000000000000000000000000000000000000;;			serializer:        serializer,
0000000000000000000000000000000000000000;;			groupVersion:      groupVersion,
0000000000000000000000000000000000000000;;			apiResourceLister: apiResourceLister,
0000000000000000000000000000000000000000;;			contextMapper:     contextMapper,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *APIVersionHandler) AddToWebService(ws *restful.WebService) {
0000000000000000000000000000000000000000;;		mediaTypes, _ := negotiation.MediaTypesForSerializer(s.serializer)
0000000000000000000000000000000000000000;;		ws.Route(ws.GET("/").To(s.handle).
0000000000000000000000000000000000000000;;			Doc("get available resources").
0000000000000000000000000000000000000000;;			Operation("getAPIResources").
0000000000000000000000000000000000000000;;			Produces(mediaTypes...).
0000000000000000000000000000000000000000;;			Consumes(mediaTypes...).
0000000000000000000000000000000000000000;;			Writes(metav1.APIResourceList{}))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handle returns a handler which will return the api.VersionAndVersion of the group.
0000000000000000000000000000000000000000;;	func (s *APIVersionHandler) handle(req *restful.Request, resp *restful.Response) {
0000000000000000000000000000000000000000;;		s.ServeHTTP(resp.ResponseWriter, req.Request)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *APIVersionHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		ctx, ok := s.contextMapper.Get(req)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			responsewriters.InternalError(w, req, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responsewriters.WriteObjectNegotiated(ctx, s.serializer, schema.GroupVersion{}, w, req, http.StatusOK,
0000000000000000000000000000000000000000;;			&metav1.APIResourceList{GroupVersion: s.groupVersion.String(), APIResources: s.apiResourceLister.ListAPIResources()})
0000000000000000000000000000000000000000;;	}
