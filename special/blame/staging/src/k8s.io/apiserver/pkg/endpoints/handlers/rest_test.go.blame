0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b443bd84ef6711fdd11af573673e634d79c77776;pkg/apiserver/resthandler_test.go[pkg/apiserver/resthandler_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package handlers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/evanphx/json-patch"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/strategicpatch"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/example"
0000000000000000000000000000000000000000;;		examplev1 "k8s.io/apiserver/pkg/apis/example/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(scheme, metav1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		example.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		examplev1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testPatchType struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TestPatchSubType `json:",inline"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We explicitly make it public as private types doesn't
0000000000000000000000000000000000000000;;	// work correctly with json inlined types.
0000000000000000000000000000000000000000;;	type TestPatchSubType struct {
0000000000000000000000000000000000000000;;		StringField string `json:"theField"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchAnonymousField(t *testing.T) {
0000000000000000000000000000000000000000;;		testGV := schema.GroupVersion{Group: "", Version: "v"}
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(testGV, &testPatchType{})
0000000000000000000000000000000000000000;;		codec := codecs.LegacyCodec(testGV)
0000000000000000000000000000000000000000;;		defaulter := runtime.ObjectDefaulter(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		original := &testPatchType{
0000000000000000000000000000000000000000;;			TypeMeta:         metav1.TypeMeta{Kind: "testPatchType", APIVersion: "v"},
0000000000000000000000000000000000000000;;			TestPatchSubType: TestPatchSubType{StringField: "my-value"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		patch := `{"theField": "changed!"}`
0000000000000000000000000000000000000000;;		expected := &testPatchType{
0000000000000000000000000000000000000000;;			TypeMeta:         metav1.TypeMeta{Kind: "testPatchType", APIVersion: "v"},
0000000000000000000000000000000000000000;;			TestPatchSubType: TestPatchSubType{StringField: "changed!"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual := &testPatchType{}
0000000000000000000000000000000000000000;;		err := strategicPatchObject(codec, defaulter, original, []byte(patch), actual, &testPatchType{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %#v, got %#v", expected, actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testPatcher struct {
0000000000000000000000000000000000000000;;		t *testing.T
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// startingPod is used for the first Update
0000000000000000000000000000000000000000;;		startingPod *example.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// updatePod is the pod that is used for conflict comparison and used for subsequent Update calls
0000000000000000000000000000000000000000;;		updatePod *example.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		numUpdates int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testPatcher) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &example.Pod{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testPatcher) Update(ctx request.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		currentPod := p.startingPod
0000000000000000000000000000000000000000;;		if p.numUpdates > 0 {
0000000000000000000000000000000000000000;;			currentPod = p.updatePod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p.numUpdates++
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := objInfo.UpdatedObject(ctx, currentPod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		inPod := obj.(*example.Pod)
0000000000000000000000000000000000000000;;		if inPod.ResourceVersion != p.updatePod.ResourceVersion {
0000000000000000000000000000000000000000;;			return nil, false, apierrors.NewConflict(example.Resource("pods"), inPod.Name, fmt.Errorf("existing %v, new %v", p.updatePod.ResourceVersion, inPod.ResourceVersion))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return inPod, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testPatcher) Get(ctx request.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		p.t.Fatal("Unexpected call to testPatcher.Get")
0000000000000000000000000000000000000000;;		return nil, errors.New("Unexpected call to testPatcher.Get")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testNamer struct {
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;		name      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *testNamer) Namespace(req *http.Request) (namespace string, err error) {
0000000000000000000000000000000000000000;;		return p.namespace, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the name from the request, and an optional namespace value if this is a namespace
0000000000000000000000000000000000000000;;	// scoped call. An error is returned if the name is not available.
0000000000000000000000000000000000000000;;	func (p *testNamer) Name(req *http.Request) (namespace, name string, err error) {
0000000000000000000000000000000000000000;;		return p.namespace, p.name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectName returns the namespace and name from an object if they exist, or an error if the object
0000000000000000000000000000000000000000;;	// does not support names.
0000000000000000000000000000000000000000;;	func (p *testNamer) ObjectName(obj runtime.Object) (namespace, name string, err error) {
0000000000000000000000000000000000000000;;		return p.namespace, p.name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetSelfLink sets the provided URL onto the object. The method should return nil if the object
0000000000000000000000000000000000000000;;	// does not support selfLinks.
0000000000000000000000000000000000000000;;	func (p *testNamer) SetSelfLink(obj runtime.Object, url string) error {
0000000000000000000000000000000000000000;;		return errors.New("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenerateLink creates a path and query for a given runtime object that represents the canonical path.
0000000000000000000000000000000000000000;;	func (p *testNamer) GenerateLink(requestInfo *request.RequestInfo, obj runtime.Object) (uri string, err error) {
0000000000000000000000000000000000000000;;		return "", errors.New("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GenerateListLink creates a path and query for a list that represents the canonical path.
0000000000000000000000000000000000000000;;	func (p *testNamer) GenerateListLink(req *http.Request) (uri string, err error) {
0000000000000000000000000000000000000000;;		return "", errors.New("not implemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type patchTestCase struct {
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// admission chain to use, nil is fine
0000000000000000000000000000000000000000;;		admit updateAdmissionFunc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// startingPod is used as the starting point for the first Update
0000000000000000000000000000000000000000;;		startingPod *example.Pod
0000000000000000000000000000000000000000;;		// changedPod is the "destination" pod for the patch.  The test will create a patch from the startingPod to the changedPod
0000000000000000000000000000000000000000;;		// to use when calling the patch operation
0000000000000000000000000000000000000000;;		changedPod *example.Pod
0000000000000000000000000000000000000000;;		// updatePod is the pod that is used for conflict comparison and as the starting point for the second Update
0000000000000000000000000000000000000000;;		updatePod *example.Pod
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// expectedPod is the pod that you expect to get back after the patch is complete
0000000000000000000000000000000000000000;;		expectedPod   *example.Pod
0000000000000000000000000000000000000000;;		expectedError string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tc *patchTestCase) Run(t *testing.T) {
0000000000000000000000000000000000000000;;		t.Logf("Starting test %s", tc.name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespace := tc.startingPod.Namespace
0000000000000000000000000000000000000000;;		name := tc.startingPod.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		codec := codecs.LegacyCodec(examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		admit := tc.admit
0000000000000000000000000000000000000000;;		if admit == nil {
0000000000000000000000000000000000000000;;			admit = func(updatedObject runtime.Object, currentObject runtime.Object) error {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx := request.NewDefaultContext()
0000000000000000000000000000000000000000;;		ctx = request.WithNamespace(ctx, namespace)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namer := &testNamer{namespace, name}
0000000000000000000000000000000000000000;;		copier := runtime.ObjectCopier(scheme)
0000000000000000000000000000000000000000;;		creater := runtime.ObjectCreater(scheme)
0000000000000000000000000000000000000000;;		defaulter := runtime.ObjectDefaulter(scheme)
0000000000000000000000000000000000000000;;		convertor := runtime.UnsafeObjectConvertor(scheme)
0000000000000000000000000000000000000000;;		kind := examplev1.SchemeGroupVersion.WithKind("Pod")
0000000000000000000000000000000000000000;;		resource := examplev1.SchemeGroupVersion.WithResource("pods")
0000000000000000000000000000000000000000;;		versionedObj := &examplev1.Pod{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, patchType := range []types.PatchType{types.JSONPatchType, types.MergePatchType, types.StrategicMergePatchType} {
0000000000000000000000000000000000000000;;			// This needs to be reset on each iteration.
0000000000000000000000000000000000000000;;			testPatcher := &testPatcher{
0000000000000000000000000000000000000000;;				t:           t,
0000000000000000000000000000000000000000;;				startingPod: tc.startingPod,
0000000000000000000000000000000000000000;;				updatePod:   tc.updatePod,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// TODO SUPPORT THIS!
0000000000000000000000000000000000000000;;			if patchType == types.JSONPatchType {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Logf("Working with patchType %v", patchType)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			originalObjJS, err := runtime.Encode(codec, tc.startingPod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			changedJS, err := runtime.Encode(codec, tc.changedPod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			patch := []byte{}
0000000000000000000000000000000000000000;;			switch patchType {
0000000000000000000000000000000000000000;;			case types.JSONPatchType:
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case types.StrategicMergePatchType:
0000000000000000000000000000000000000000;;				patch, err = strategicpatch.CreateTwoWayMergePatch(originalObjJS, changedJS, versionedObj)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			case types.MergePatchType:
0000000000000000000000000000000000000000;;				patch, err = jsonpatch.CreateMergePatch(originalObjJS, changedJS)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resultObj, err := patchResource(ctx, admit, 1*time.Second, versionedObj, testPatcher, name, patchType, patch, namer, copier, creater, defaulter, convertor, kind, resource, codec)
0000000000000000000000000000000000000000;;			if len(tc.expectedError) != 0 {
0000000000000000000000000000000000000000;;				if err == nil || err.Error() != tc.expectedError {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error %v, but got %v", tc.name, tc.expectedError, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if tc.expectedPod == nil {
0000000000000000000000000000000000000000;;				if resultObj != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected result: %v", tc.name, resultObj)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resultPod := resultObj.(*example.Pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// roundtrip to get defaulting
0000000000000000000000000000000000000000;;			expectedJS, err := runtime.Encode(codec, tc.expectedPod)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			expectedObj, err := runtime.Decode(codec, expectedJS)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			reallyExpectedPod := expectedObj.(*example.Pod)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(*reallyExpectedPod, *resultPod) {
0000000000000000000000000000000000000000;;				t.Errorf("%s mismatch: %v\n", tc.name, diff.ObjectGoPrintDiff(reallyExpectedPod, resultPod))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNumberConversion(t *testing.T) {
0000000000000000000000000000000000000000;;		codec := codecs.LegacyCodec(examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		defaulter := runtime.ObjectDefaulter(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		terminationGracePeriodSeconds := int64(42)
0000000000000000000000000000000000000000;;		activeDeadlineSeconds := int64(42)
0000000000000000000000000000000000000000;;		currentVersionedObject := &examplev1.Pod{
0000000000000000000000000000000000000000;;			TypeMeta:   metav1.TypeMeta{Kind: "Example", APIVersion: examplev1.SchemeGroupVersion.String()},
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "test-example"},
0000000000000000000000000000000000000000;;			Spec: examplev1.PodSpec{
0000000000000000000000000000000000000000;;				TerminationGracePeriodSeconds: &terminationGracePeriodSeconds,
0000000000000000000000000000000000000000;;				ActiveDeadlineSeconds:         &activeDeadlineSeconds,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versionedObjToUpdate := &examplev1.Pod{}
0000000000000000000000000000000000000000;;		versionedObj := &examplev1.Pod{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		patchJS := []byte(`{"spec":{"terminationGracePeriodSeconds":42,"activeDeadlineSeconds":120}}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := strategicPatchObject(codec, defaulter, currentVersionedObject, patchJS, versionedObjToUpdate, versionedObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if versionedObjToUpdate.Spec.TerminationGracePeriodSeconds == nil || *versionedObjToUpdate.Spec.TerminationGracePeriodSeconds != 42 ||
0000000000000000000000000000000000000000;;			versionedObjToUpdate.Spec.ActiveDeadlineSeconds == nil || *versionedObjToUpdate.Spec.ActiveDeadlineSeconds != 120 {
0000000000000000000000000000000000000000;;			t.Fatal(errors.New("Ports failed to merge because of number conversion issue"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchResourceNumberConversion(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "bar"
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		uid := types.UID("uid")
0000000000000000000000000000000000000000;;		fifteen := int64(15)
0000000000000000000000000000000000000000;;		thirty := int64(30)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := &patchTestCase{
0000000000000000000000000000000000000000;;			name: "TestPatchResourceNumberConversion",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingPod: &example.Pod{},
0000000000000000000000000000000000000000;;			changedPod:  &example.Pod{},
0000000000000000000000000000000000000000;;			updatePod:   &example.Pod{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedPod: &example.Pod{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.startingPod.Name = name
0000000000000000000000000000000000000000;;		tc.startingPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.startingPod.UID = uid
0000000000000000000000000000000000000000;;		tc.startingPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.startingPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.startingPod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Patch tries to change to 30.
0000000000000000000000000000000000000000;;		tc.changedPod.Name = name
0000000000000000000000000000000000000000;;		tc.changedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.changedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.changedPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.changedPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.changedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Someone else already changed it to 30.
0000000000000000000000000000000000000000;;		// This should be fine since it's not a "meaningful conflict".
0000000000000000000000000000000000000000;;		// Previously this was detected as a meaningful conflict because int64(30) != float64(30).
0000000000000000000000000000000000000000;;		tc.updatePod.Name = name
0000000000000000000000000000000000000000;;		tc.updatePod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.updatePod.UID = uid
0000000000000000000000000000000000000000;;		tc.updatePod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.updatePod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.expectedPod.Name = name
0000000000000000000000000000000000000000;;		tc.expectedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.expectedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.expectedPod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.expectedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;		tc.expectedPod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.Run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchResourceWithVersionConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "bar"
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		uid := types.UID("uid")
0000000000000000000000000000000000000000;;		fifteen := int64(15)
0000000000000000000000000000000000000000;;		thirty := int64(30)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := &patchTestCase{
0000000000000000000000000000000000000000;;			name: "TestPatchResourceWithVersionConflict",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingPod: &example.Pod{},
0000000000000000000000000000000000000000;;			changedPod:  &example.Pod{},
0000000000000000000000000000000000000000;;			updatePod:   &example.Pod{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedPod: &example.Pod{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.startingPod.Name = name
0000000000000000000000000000000000000000;;		tc.startingPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.startingPod.UID = uid
0000000000000000000000000000000000000000;;		tc.startingPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.startingPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.startingPod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.changedPod.Name = name
0000000000000000000000000000000000000000;;		tc.changedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.changedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.changedPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.changedPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.changedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.updatePod.Name = name
0000000000000000000000000000000000000000;;		tc.updatePod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.updatePod.UID = uid
0000000000000000000000000000000000000000;;		tc.updatePod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.updatePod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.expectedPod.Name = name
0000000000000000000000000000000000000000;;		tc.expectedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.expectedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.expectedPod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.expectedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;		tc.expectedPod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.Run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchResourceWithConflict(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "bar"
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		uid := types.UID("uid")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := &patchTestCase{
0000000000000000000000000000000000000000;;			name: "TestPatchResourceWithConflict",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingPod: &example.Pod{},
0000000000000000000000000000000000000000;;			changedPod:  &example.Pod{},
0000000000000000000000000000000000000000;;			updatePod:   &example.Pod{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedError: `Operation cannot be fulfilled on pods.example.apiserver.k8s.io "foo": existing 2, new 1`,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.startingPod.Name = name
0000000000000000000000000000000000000000;;		tc.startingPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.startingPod.UID = uid
0000000000000000000000000000000000000000;;		tc.startingPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.startingPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.startingPod.Spec.NodeName = "here"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.changedPod.Name = name
0000000000000000000000000000000000000000;;		tc.changedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.changedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.changedPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.changedPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.changedPod.Spec.NodeName = "there"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.updatePod.Name = name
0000000000000000000000000000000000000000;;		tc.updatePod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.updatePod.UID = uid
0000000000000000000000000000000000000000;;		tc.updatePod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.updatePod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.Run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchWithAdmissionRejection(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "bar"
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		uid := types.UID("uid")
0000000000000000000000000000000000000000;;		fifteen := int64(15)
0000000000000000000000000000000000000000;;		thirty := int64(30)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := &patchTestCase{
0000000000000000000000000000000000000000;;			name: "TestPatchWithAdmissionRejection",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			admit: func(updatedObject runtime.Object, currentObject runtime.Object) error {
0000000000000000000000000000000000000000;;				return errors.New("admission failure")
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingPod: &example.Pod{},
0000000000000000000000000000000000000000;;			changedPod:  &example.Pod{},
0000000000000000000000000000000000000000;;			updatePod:   &example.Pod{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedError: "admission failure",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.startingPod.Name = name
0000000000000000000000000000000000000000;;		tc.startingPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.startingPod.UID = uid
0000000000000000000000000000000000000000;;		tc.startingPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.startingPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.startingPod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.changedPod.Name = name
0000000000000000000000000000000000000000;;		tc.changedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.changedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.changedPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.changedPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.changedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.Run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatchWithVersionConflictThenAdmissionFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "bar"
0000000000000000000000000000000000000000;;		name := "foo"
0000000000000000000000000000000000000000;;		uid := types.UID("uid")
0000000000000000000000000000000000000000;;		fifteen := int64(15)
0000000000000000000000000000000000000000;;		thirty := int64(30)
0000000000000000000000000000000000000000;;		seen := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := &patchTestCase{
0000000000000000000000000000000000000000;;			name: "TestPatchWithVersionConflictThenAdmissionFailure",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			admit: func(updatedObject runtime.Object, currentObject runtime.Object) error {
0000000000000000000000000000000000000000;;				if seen {
0000000000000000000000000000000000000000;;					return errors.New("admission failure")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				seen = true
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			startingPod: &example.Pod{},
0000000000000000000000000000000000000000;;			changedPod:  &example.Pod{},
0000000000000000000000000000000000000000;;			updatePod:   &example.Pod{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedError: "admission failure",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.startingPod.Name = name
0000000000000000000000000000000000000000;;		tc.startingPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.startingPod.UID = uid
0000000000000000000000000000000000000000;;		tc.startingPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.startingPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.startingPod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.changedPod.Name = name
0000000000000000000000000000000000000000;;		tc.changedPod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.changedPod.UID = uid
0000000000000000000000000000000000000000;;		tc.changedPod.ResourceVersion = "1"
0000000000000000000000000000000000000000;;		tc.changedPod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.changedPod.Spec.ActiveDeadlineSeconds = &thirty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.updatePod.Name = name
0000000000000000000000000000000000000000;;		tc.updatePod.Namespace = namespace
0000000000000000000000000000000000000000;;		tc.updatePod.UID = uid
0000000000000000000000000000000000000000;;		tc.updatePod.ResourceVersion = "2"
0000000000000000000000000000000000000000;;		tc.updatePod.APIVersion = examplev1.SchemeGroupVersion.String()
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.ActiveDeadlineSeconds = &fifteen
0000000000000000000000000000000000000000;;		tc.updatePod.Spec.NodeName = "anywhere"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc.Run(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHasUID(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := []struct {
0000000000000000000000000000000000000000;;			obj    runtime.Object
0000000000000000000000000000000000000000;;			hasUID bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{obj: nil, hasUID: false},
0000000000000000000000000000000000000000;;			{obj: &example.Pod{}, hasUID: false},
0000000000000000000000000000000000000000;;			{obj: nil, hasUID: false},
0000000000000000000000000000000000000000;;			{obj: runtime.Object(nil), hasUID: false},
0000000000000000000000000000000000000000;;			{obj: &example.Pod{ObjectMeta: metav1.ObjectMeta{UID: types.UID("A")}}, hasUID: true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testcases {
0000000000000000000000000000000000000000;;			actual, err := hasUID(tc.obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected error %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.hasUID != actual {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected %v, got %v", i, tc.hasUID, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParseTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		if d := parseTimeout(""); d != 30*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("blank timeout produces %v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if d := parseTimeout("not a timeout"); d != 30*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("bad timeout produces %v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if d := parseTimeout("10s"); d != 10*time.Second {
0000000000000000000000000000000000000000;;			t.Errorf("10s timeout produced: %v", d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFinishRequest(t *testing.T) {
0000000000000000000000000000000000000000;;		exampleObj := &example.Pod{}
0000000000000000000000000000000000000000;;		exampleErr := fmt.Errorf("error")
0000000000000000000000000000000000000000;;		successStatusObj := &metav1.Status{Status: metav1.StatusSuccess, Message: "success message"}
0000000000000000000000000000000000000000;;		errorStatusObj := &metav1.Status{Status: metav1.StatusFailure, Message: "error message"}
0000000000000000000000000000000000000000;;		testcases := []struct {
0000000000000000000000000000000000000000;;			timeout     time.Duration
0000000000000000000000000000000000000000;;			fn          resultFunc
0000000000000000000000000000000000000000;;			expectedObj runtime.Object
0000000000000000000000000000000000000000;;			expectedErr error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Expected obj is returned.
0000000000000000000000000000000000000000;;				timeout: time.Second,
0000000000000000000000000000000000000000;;				fn: func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return exampleObj, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: exampleObj,
0000000000000000000000000000000000000000;;				expectedErr: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Expected error is returned.
0000000000000000000000000000000000000000;;				timeout: time.Second,
0000000000000000000000000000000000000000;;				fn: func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return nil, exampleErr
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: nil,
0000000000000000000000000000000000000000;;				expectedErr: exampleErr,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Successful status object is returned as expected.
0000000000000000000000000000000000000000;;				timeout: time.Second,
0000000000000000000000000000000000000000;;				fn: func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return successStatusObj, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: successStatusObj,
0000000000000000000000000000000000000000;;				expectedErr: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Error status object is converted to StatusError.
0000000000000000000000000000000000000000;;				timeout: time.Second,
0000000000000000000000000000000000000000;;				fn: func() (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return errorStatusObj, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedObj: nil,
0000000000000000000000000000000000000000;;				expectedErr: apierrors.FromObject(errorStatusObj),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range testcases {
0000000000000000000000000000000000000000;;			obj, err := finishRequest(tc.timeout, tc.fn)
0000000000000000000000000000000000000000;;			if (err == nil && tc.expectedErr != nil) || (err != nil && tc.expectedErr == nil) || (err != nil && tc.expectedErr != nil && err.Error() != tc.expectedErr.Error()) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected err. expected: %v, got: %v", i, tc.expectedErr, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(obj, tc.expectedObj) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected obj. expected %#v, got %#v", i, tc.expectedObj, obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
