0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
31fc62ac75e5ebf260b5069e57cfadb26e1b601e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		groupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		registry             = registered.NewOrDie("")
0000000000000000000000000000000000000000;;		scheme               = runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs               = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		// Register Unversioned types under their own special group
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(schema.GroupVersion{Group: "", Version: "v1"},
0000000000000000000000000000000000000000;;			&metav1.Status{},
0000000000000000000000000000000000000000;;			&metav1.APIVersions{},
0000000000000000000000000000000000000000;;			&metav1.APIGroupList{},
0000000000000000000000000000000000000000;;			&metav1.APIGroup{},
0000000000000000000000000000000000000000;;			&metav1.APIResourceList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeResponse(t *testing.T, resp *http.Response, obj interface{}) error {
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		t.Log(string(data))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, obj); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getGroupList(t *testing.T, server *httptest.Server) (*metav1.APIGroupList, error) {
0000000000000000000000000000000000000000;;		resp, err := http.Get(server.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected server response, expected %d, actual: %d", http.StatusOK, resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupList := metav1.APIGroupList{}
0000000000000000000000000000000000000000;;		err = decodeResponse(t, resp, &groupList)
0000000000000000000000000000000000000000;;		return &groupList, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDiscoveryAtAPIS(t *testing.T) {
0000000000000000000000000000000000000000;;		mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		handler := NewRootAPIsHandler(DefaultAddresses{DefaultAddress: "192.168.1.1"}, codecs, mapper)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(request.WithRequestContext(handler, mapper))
0000000000000000000000000000000000000000;;		groupList, err := getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(groupList.Groups))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add a Group.
0000000000000000000000000000000000000000;;		extensionsGroupName := "extensions"
0000000000000000000000000000000000000000;;		extensionsVersions := []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				GroupVersion: extensionsGroupName + "/v1",
0000000000000000000000000000000000000000;;				Version:      "v1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		extensionsPreferredVersion := metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;			GroupVersion: extensionsGroupName + "/preferred",
0000000000000000000000000000000000000000;;			Version:      "preferred",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{
0000000000000000000000000000000000000000;;			Name:             extensionsGroupName,
0000000000000000000000000000000000000000;;			Versions:         extensionsVersions,
0000000000000000000000000000000000000000;;			PreferredVersion: extensionsPreferredVersion,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupList, err = getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, len(groupList.Groups))
0000000000000000000000000000000000000000;;		groupListGroup := groupList.Groups[0]
0000000000000000000000000000000000000000;;		assert.Equal(t, extensionsGroupName, groupListGroup.Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, extensionsVersions, groupListGroup.Versions)
0000000000000000000000000000000000000000;;		assert.Equal(t, extensionsPreferredVersion, groupListGroup.PreferredVersion)
0000000000000000000000000000000000000000;;		assert.Equal(t, handler.addresses.ServerAddressByClientCIDRs(utilnet.GetClientIP(&http.Request{})), groupListGroup.ServerAddressByClientCIDRs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove the group.
0000000000000000000000000000000000000000;;		handler.RemoveGroup(extensionsGroupName)
0000000000000000000000000000000000000000;;		groupList, err = getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(groupList.Groups))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDiscoveryOrdering(t *testing.T) {
0000000000000000000000000000000000000000;;		mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		handler := NewRootAPIsHandler(DefaultAddresses{DefaultAddress: "192.168.1.1"}, codecs, mapper)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(request.WithRequestContext(handler, mapper))
0000000000000000000000000000000000000000;;		groupList, err := getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 0, len(groupList.Groups))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Register three groups
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "x"})
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "y"})
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "z"})
0000000000000000000000000000000000000000;;		// Register three additional groups that come earlier alphabetically
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "a"})
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "b"})
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "c"})
0000000000000000000000000000000000000000;;		// Make sure re-adding doesn't double-register or make a group lose its place
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "x"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupList, err = getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(t, 6, len(groupList.Groups))
0000000000000000000000000000000000000000;;		assert.Equal(t, "x", groupList.Groups[0].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "y", groupList.Groups[1].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "z", groupList.Groups[2].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "a", groupList.Groups[3].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "b", groupList.Groups[4].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "c", groupList.Groups[5].Name)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove a group.
0000000000000000000000000000000000000000;;		handler.RemoveGroup("a")
0000000000000000000000000000000000000000;;		groupList, err = getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 5, len(groupList.Groups))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Re-adding should move to the end.
0000000000000000000000000000000000000000;;		handler.AddGroup(metav1.APIGroup{Name: "a"})
0000000000000000000000000000000000000000;;		groupList, err = getGroupList(t, server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, 6, len(groupList.Groups))
0000000000000000000000000000000000000000;;		assert.Equal(t, "x", groupList.Groups[0].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "y", groupList.Groups[1].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "z", groupList.Groups[2].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "b", groupList.Groups[3].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "c", groupList.Groups[4].Name)
0000000000000000000000000000000000000000;;		assert.Equal(t, "a", groupList.Groups[5].Name)
0000000000000000000000000000000000000000;;	}
