0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
31fc62ac75e5ebf260b5069e57cfadb26e1b601e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restful "github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/negotiation"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupManager is an interface that allows dynamic mutation of the existing webservice to handle
0000000000000000000000000000000000000000;;	// API groups being added or removed.
0000000000000000000000000000000000000000;;	type GroupManager interface {
0000000000000000000000000000000000000000;;		AddGroup(apiGroup metav1.APIGroup)
0000000000000000000000000000000000000000;;		RemoveGroup(groupName string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WebService() *restful.WebService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rootAPIsHandler creates a webservice serving api group discovery.
0000000000000000000000000000000000000000;;	// The list of APIGroups may change while the server is running because additional resources
0000000000000000000000000000000000000000;;	// are registered or removed.  It is not safe to cache the values.
0000000000000000000000000000000000000000;;	type rootAPIsHandler struct {
0000000000000000000000000000000000000000;;		// addresses is used to build cluster IPs for discovery.
0000000000000000000000000000000000000000;;		addresses Addresses
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serializer    runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		contextMapper request.RequestContextMapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Map storing information about all groups to be exposed in discovery response.
0000000000000000000000000000000000000000;;		// The map is from name to the group.
0000000000000000000000000000000000000000;;		lock      sync.RWMutex
0000000000000000000000000000000000000000;;		apiGroups map[string]metav1.APIGroup
0000000000000000000000000000000000000000;;		// apiGroupNames preserves insertion order
0000000000000000000000000000000000000000;;		apiGroupNames []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootAPIsHandler(addresses Addresses, serializer runtime.NegotiatedSerializer, contextMapper request.RequestContextMapper) *rootAPIsHandler {
0000000000000000000000000000000000000000;;		// Because in release 1.1, /apis returns response with empty APIVersion, we
0000000000000000000000000000000000000000;;		// use stripVersionNegotiatedSerializer to keep the response backwards
0000000000000000000000000000000000000000;;		// compatible.
0000000000000000000000000000000000000000;;		serializer = stripVersionNegotiatedSerializer{serializer}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &rootAPIsHandler{
0000000000000000000000000000000000000000;;			addresses:     addresses,
0000000000000000000000000000000000000000;;			serializer:    serializer,
0000000000000000000000000000000000000000;;			apiGroups:     map[string]metav1.APIGroup{},
0000000000000000000000000000000000000000;;			contextMapper: contextMapper,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *rootAPIsHandler) AddGroup(apiGroup metav1.APIGroup) {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, alreadyExists := s.apiGroups[apiGroup.Name]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.apiGroups[apiGroup.Name] = apiGroup
0000000000000000000000000000000000000000;;		if !alreadyExists {
0000000000000000000000000000000000000000;;			s.apiGroupNames = append(s.apiGroupNames, apiGroup.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *rootAPIsHandler) RemoveGroup(groupName string) {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delete(s.apiGroups, groupName)
0000000000000000000000000000000000000000;;		for i := range s.apiGroupNames {
0000000000000000000000000000000000000000;;			if s.apiGroupNames[i] == groupName {
0000000000000000000000000000000000000000;;				s.apiGroupNames = append(s.apiGroupNames[:i], s.apiGroupNames[i+1:]...)
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *rootAPIsHandler) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		ctx, ok := s.contextMapper.Get(req)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			responsewriters.InternalError(resp, req, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.lock.RLock()
0000000000000000000000000000000000000000;;		defer s.lock.RUnlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		orderedGroups := []metav1.APIGroup{}
0000000000000000000000000000000000000000;;		for _, groupName := range s.apiGroupNames {
0000000000000000000000000000000000000000;;			orderedGroups = append(orderedGroups, s.apiGroups[groupName])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientIP := utilnet.GetClientIP(req)
0000000000000000000000000000000000000000;;		serverCIDR := s.addresses.ServerAddressByClientCIDRs(clientIP)
0000000000000000000000000000000000000000;;		groups := make([]metav1.APIGroup, len(orderedGroups))
0000000000000000000000000000000000000000;;		for i := range orderedGroups {
0000000000000000000000000000000000000000;;			groups[i] = orderedGroups[i]
0000000000000000000000000000000000000000;;			groups[i].ServerAddressByClientCIDRs = serverCIDR
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responsewriters.WriteObjectNegotiated(ctx, s.serializer, schema.GroupVersion{}, resp, req, http.StatusOK, &metav1.APIGroupList{Groups: groups})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *rootAPIsHandler) restfulHandle(req *restful.Request, resp *restful.Response) {
0000000000000000000000000000000000000000;;		s.ServeHTTP(resp.ResponseWriter, req.Request)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WebService returns a webservice serving api group discovery.
0000000000000000000000000000000000000000;;	// Note: during the server runtime apiGroups might change.
0000000000000000000000000000000000000000;;	func (s *rootAPIsHandler) WebService() *restful.WebService {
0000000000000000000000000000000000000000;;		mediaTypes, _ := negotiation.MediaTypesForSerializer(s.serializer)
0000000000000000000000000000000000000000;;		ws := new(restful.WebService)
0000000000000000000000000000000000000000;;		ws.Path(APIGroupPrefix)
0000000000000000000000000000000000000000;;		ws.Doc("get available API versions")
0000000000000000000000000000000000000000;;		ws.Route(ws.GET("/").To(s.restfulHandle).
0000000000000000000000000000000000000000;;			Doc("get available API versions").
0000000000000000000000000000000000000000;;			Operation("getAPIVersions").
0000000000000000000000000000000000000000;;			Produces(mediaTypes...).
0000000000000000000000000000000000000000;;			Consumes(mediaTypes...).
0000000000000000000000000000000000000000;;			Writes(metav1.APIGroupList{}))
0000000000000000000000000000000000000000;;		return ws
0000000000000000000000000000000000000000;;	}
