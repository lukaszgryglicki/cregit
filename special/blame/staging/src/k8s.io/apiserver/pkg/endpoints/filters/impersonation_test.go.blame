0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f9bb8fa053463593a16bc18c77bf5f4428634359;pkg/apiserver/handler_impersonation_test.go[pkg/apiserver/handler_impersonation_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/filters/impersonation_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authenticationapi "k8s.io/api/authentication/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type impersonateAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (impersonateAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		user := a.GetUser()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case user.GetName() == "system:admin":
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case user.GetName() == "tester":
0000000000000000000000000000000000000000;;			return false, "", fmt.Errorf("works on my machine")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case user.GetName() == "deny-me":
0000000000000000000000000000000000000000;;			return false, "denied", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 0 && user.GetGroups()[0] == "wheel" && a.GetVerb() == "impersonate" && a.GetResource() == "users" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 0 && user.GetGroups()[0] == "sa-impersonater" && a.GetVerb() == "impersonate" && a.GetResource() == "serviceaccounts" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 0 && user.GetGroups()[0] == "regular-impersonater" && a.GetVerb() == "impersonate" && a.GetResource() == "users" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 1 && user.GetGroups()[1] == "group-impersonater" && a.GetVerb() == "impersonate" && a.GetResource() == "groups" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 1 && user.GetGroups()[1] == "extra-setter-scopes" && a.GetVerb() == "impersonate" && a.GetResource() == "userextras" && a.GetSubresource() == "scopes" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 1 && user.GetGroups()[1] == "extra-setter-particular-scopes" &&
0000000000000000000000000000000000000000;;			a.GetVerb() == "impersonate" && a.GetResource() == "userextras" && a.GetSubresource() == "scopes" && a.GetName() == "scope-a" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(user.GetGroups()) > 1 && user.GetGroups()[1] == "extra-setter-project" && a.GetVerb() == "impersonate" && a.GetResource() == "userextras" && a.GetSubresource() == "project" {
0000000000000000000000000000000000000000;;			return true, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, "deny by default", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestImpersonationFilter(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name                    string
0000000000000000000000000000000000000000;;			user                    user.Info
0000000000000000000000000000000000000000;;			impersonationUser       string
0000000000000000000000000000000000000000;;			impersonationGroups     []string
0000000000000000000000000000000000000000;;			impersonationUserExtras map[string][]string
0000000000000000000000000000000000000000;;			expectedUser            user.Info
0000000000000000000000000000000000000000;;			expectedCode            int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "not-impersonating",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "impersonating-error",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser: "anyone",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "impersonating-group-without-user",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationGroups: []string{"some-group"},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusInternalServerError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "impersonating-extra-without-user",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUserExtras: map[string][]string{"scopes": {"scope-a"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "tester",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusInternalServerError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed-group",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:   "system:admin",
0000000000000000000000000000000000000000;;				impersonationGroups: []string{"some-group"},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "allowed-group",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "group-impersonater"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:   "system:admin",
0000000000000000000000000000000000000000;;				impersonationGroups: []string{"some-group"},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:admin",
0000000000000000000000000000000000000000;;					Groups: []string{"some-group"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed-userextra-1",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:       "system:admin",
0000000000000000000000000000000000000000;;				impersonationGroups:     []string{"some-group"},
0000000000000000000000000000000000000000;;				impersonationUserExtras: map[string][]string{"scopes": {"scope-a"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed-userextra-2",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "extra-setter-project"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:       "system:admin",
0000000000000000000000000000000000000000;;				impersonationGroups:     []string{"some-group"},
0000000000000000000000000000000000000000;;				impersonationUserExtras: map[string][]string{"scopes": {"scope-a"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "extra-setter-project"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed-userextra-3",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "extra-setter-particular-scopes"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:       "system:admin",
0000000000000000000000000000000000000000;;				impersonationGroups:     []string{"some-group"},
0000000000000000000000000000000000000000;;				impersonationUserExtras: map[string][]string{"scopes": {"scope-a", "scope-b"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "extra-setter-particular-scopes"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "allowed-userextras",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"wheel", "extra-setter-scopes"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:       "system:admin",
0000000000000000000000000000000000000000;;				impersonationUserExtras: map[string][]string{"scopes": {"scope-a", "scope-b"}},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:admin",
0000000000000000000000000000000000000000;;					Groups: []string{"system:authenticated"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{"scopes": {"scope-a", "scope-b"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "allowed-users-impersonation",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"regular-impersonater"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser: "tester",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "tester",
0000000000000000000000000000000000000000;;					Groups: []string{"system:authenticated"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "disallowed-impersonating",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"sa-impersonater"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser: "tester",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"sa-impersonater"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusForbidden,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "allowed-sa-impersonating",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "dev",
0000000000000000000000000000000000000000;;					Groups: []string{"sa-impersonater"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser: "system:serviceaccount:foo:default",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:serviceaccount:foo:default",
0000000000000000000000000000000000000000;;					Groups: []string{"system:serviceaccounts", "system:serviceaccounts:foo", "system:authenticated"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "anonymous-username-prevents-adding-authenticated-group",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "system:admin",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser: "system:anonymous",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "system:anonymous",
0000000000000000000000000000000000000000;;					Groups: []string{},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "unauthenticated-group-prevents-adding-authenticated-group",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "system:admin",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:   "unknown",
0000000000000000000000000000000000000000;;				impersonationGroups: []string{"system:unauthenticated"},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "unknown",
0000000000000000000000000000000000000000;;					Groups: []string{"system:unauthenticated"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "unauthenticated-group-prevents-double-adding-authenticated-group",
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name: "system:admin",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				impersonationUser:   "unknown",
0000000000000000000000000000000000000000;;				impersonationGroups: []string{"system:authenticated"},
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "unknown",
0000000000000000000000000000000000000000;;					Groups: []string{"system:authenticated"},
0000000000000000000000000000000000000000;;					Extra:  map[string][]string{},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedCode: http.StatusOK,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestContextMapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		var ctx request.Context
0000000000000000000000000000000000000000;;		var actualUser user.Info
0000000000000000000000000000000000000000;;		var lock sync.Mutex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		doNothingHandler := http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			currentCtx, _ := requestContextMapper.Get(req)
0000000000000000000000000000000000000000;;			user, exists := request.UserFrom(currentCtx)
0000000000000000000000000000000000000000;;			if !exists {
0000000000000000000000000000000000000000;;				actualUser = nil
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actualUser = user
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, ok := req.Header[authenticationapi.ImpersonateUserHeader]; ok {
0000000000000000000000000000000000000000;;				t.Fatal("user header still present")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, ok := req.Header[authenticationapi.ImpersonateGroupHeader]; ok {
0000000000000000000000000000000000000000;;				t.Fatal("group header still present")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for key := range req.Header {
0000000000000000000000000000000000000000;;				if strings.HasPrefix(key, authenticationapi.ImpersonateUserExtraHeaderPrefix) {
0000000000000000000000000000000000000000;;					t.Fatalf("extra header still present: %v", key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		handler := func(delegate http.Handler) http.Handler {
0000000000000000000000000000000000000000;;			return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				defer func() {
0000000000000000000000000000000000000000;;					if r := recover(); r != nil {
0000000000000000000000000000000000000000;;						t.Errorf("Recovered %v", r)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;				lock.Lock()
0000000000000000000000000000000000000000;;				defer lock.Unlock()
0000000000000000000000000000000000000000;;				requestContextMapper.Update(req, ctx)
0000000000000000000000000000000000000000;;				currentCtx, _ := requestContextMapper.Get(req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				user, exists := request.UserFrom(currentCtx)
0000000000000000000000000000000000000000;;				if !exists {
0000000000000000000000000000000000000000;;					actualUser = nil
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					actualUser = user
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				delegate.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}(WithImpersonation(doNothingHandler, requestContextMapper, impersonateAuthorizer{}, serializer.NewCodecFactory(runtime.NewScheme())))
0000000000000000000000000000000000000000;;		handler = request.WithRequestContext(handler, requestContextMapper)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				lock.Lock()
0000000000000000000000000000000000000000;;				defer lock.Unlock()
0000000000000000000000000000000000000000;;				ctx = request.WithUser(request.NewContext(), tc.user)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", server.URL, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tc.impersonationUser) > 0 {
0000000000000000000000000000000000000000;;				req.Header.Add(authenticationapi.ImpersonateUserHeader, tc.impersonationUser)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, group := range tc.impersonationGroups {
0000000000000000000000000000000000000000;;				req.Header.Add(authenticationapi.ImpersonateGroupHeader, group)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for extraKey, values := range tc.impersonationUserExtras {
0000000000000000000000000000000000000000;;				for _, value := range values {
0000000000000000000000000000000000000000;;					req.Header.Add(authenticationapi.ImpersonateUserExtraHeaderPrefix+extraKey, value)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := http.DefaultClient.Do(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if resp.StatusCode != tc.expectedCode {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, actual %v", tc.name, tc.expectedCode, resp.StatusCode)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(actualUser, tc.expectedUser) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %#v, actual %#v", tc.name, tc.expectedUser, actualUser)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
