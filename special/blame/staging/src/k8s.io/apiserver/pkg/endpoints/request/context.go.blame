0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
bba4ce35a31ec367da9f4220010180791d7db530;pkg/api/context.go[pkg/api/context.go][staging/src/k8s.io/apiserver/pkg/endpoints/request/context.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package request
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		stderrs "errors"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context carries values across API boundaries.
0000000000000000000000000000000000000000;;	// This context matches the context.Context interface
0000000000000000000000000000000000000000;;	// (https://blog.golang.org/context), for the purposes
0000000000000000000000000000000000000000;;	// of passing the api.Context through to the storage tier.
0000000000000000000000000000000000000000;;	// TODO: Determine the extent that this abstraction+interface
0000000000000000000000000000000000000000;;	// is used by the api, and whether we can remove.
0000000000000000000000000000000000000000;;	type Context interface {
0000000000000000000000000000000000000000;;		// Value returns the value associated with key or nil if none.
0000000000000000000000000000000000000000;;		Value(key interface{}) interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deadline returns the time when this Context will be canceled, if any.
0000000000000000000000000000000000000000;;		Deadline() (deadline time.Time, ok bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Done returns a channel that is closed when this Context is canceled
0000000000000000000000000000000000000000;;		// or times out.
0000000000000000000000000000000000000000;;		Done() <-chan struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Err indicates why this context was canceled, after the Done channel
0000000000000000000000000000000000000000;;		// is closed.
0000000000000000000000000000000000000000;;		Err() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The key type is unexported to prevent collisions
0000000000000000000000000000000000000000;;	type key int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// namespaceKey is the context key for the request namespace.
0000000000000000000000000000000000000000;;		namespaceKey key = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// userKey is the context key for the request user.
0000000000000000000000000000000000000000;;		userKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// uidKey is the context key for the uid to assign to an object on create.
0000000000000000000000000000000000000000;;		uidKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// userAgentKey is the context key for the request user agent.
0000000000000000000000000000000000000000;;		userAgentKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// auditKey is the context key for the audit event.
0000000000000000000000000000000000000000;;		auditKey
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespaceDefault = "default" // TODO(sttts): solve import cycle when using metav1.NamespaceDefault
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewContext instantiates a base context object for request flows.
0000000000000000000000000000000000000000;;	func NewContext() Context {
0000000000000000000000000000000000000000;;		return context.TODO()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultContext instantiates a base context object for request flows in the default namespace
0000000000000000000000000000000000000000;;	func NewDefaultContext() Context {
0000000000000000000000000000000000000000;;		return WithNamespace(NewContext(), namespaceDefault)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithValue returns a copy of parent in which the value associated with key is val.
0000000000000000000000000000000000000000;;	func WithValue(parent Context, key interface{}, val interface{}) Context {
0000000000000000000000000000000000000000;;		internalCtx, ok := parent.(context.Context)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			panic(stderrs.New("Invalid context type"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return context.WithValue(internalCtx, key, val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithNamespace returns a copy of parent in which the namespace value is set
0000000000000000000000000000000000000000;;	func WithNamespace(parent Context, namespace string) Context {
0000000000000000000000000000000000000000;;		return WithValue(parent, namespaceKey, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceFrom returns the value of the namespace key on the ctx
0000000000000000000000000000000000000000;;	func NamespaceFrom(ctx Context) (string, bool) {
0000000000000000000000000000000000000000;;		namespace, ok := ctx.Value(namespaceKey).(string)
0000000000000000000000000000000000000000;;		return namespace, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespaceValue returns the value of the namespace key on the ctx, or the empty string if none
0000000000000000000000000000000000000000;;	func NamespaceValue(ctx Context) string {
0000000000000000000000000000000000000000;;		namespace, _ := NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;		return namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithNamespaceDefaultIfNone returns a context whose namespace is the default if and only if the parent context has no namespace value
0000000000000000000000000000000000000000;;	func WithNamespaceDefaultIfNone(parent Context) Context {
0000000000000000000000000000000000000000;;		namespace, ok := NamespaceFrom(parent)
0000000000000000000000000000000000000000;;		if !ok || len(namespace) == 0 {
0000000000000000000000000000000000000000;;			return WithNamespace(parent, namespaceDefault)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithUser returns a copy of parent in which the user value is set
0000000000000000000000000000000000000000;;	func WithUser(parent Context, user user.Info) Context {
0000000000000000000000000000000000000000;;		return WithValue(parent, userKey, user)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserFrom returns the value of the user key on the ctx
0000000000000000000000000000000000000000;;	func UserFrom(ctx Context) (user.Info, bool) {
0000000000000000000000000000000000000000;;		user, ok := ctx.Value(userKey).(user.Info)
0000000000000000000000000000000000000000;;		return user, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithUID returns a copy of parent in which the uid value is set
0000000000000000000000000000000000000000;;	func WithUID(parent Context, uid types.UID) Context {
0000000000000000000000000000000000000000;;		return WithValue(parent, uidKey, uid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UIDFrom returns the value of the uid key on the ctx
0000000000000000000000000000000000000000;;	func UIDFrom(ctx Context) (types.UID, bool) {
0000000000000000000000000000000000000000;;		uid, ok := ctx.Value(uidKey).(types.UID)
0000000000000000000000000000000000000000;;		return uid, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithUserAgent returns a copy of parent in which the user value is set
0000000000000000000000000000000000000000;;	func WithUserAgent(parent Context, userAgent string) Context {
0000000000000000000000000000000000000000;;		return WithValue(parent, userAgentKey, userAgent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UserAgentFrom returns the value of the userAgent key on the ctx
0000000000000000000000000000000000000000;;	func UserAgentFrom(ctx Context) (string, bool) {
0000000000000000000000000000000000000000;;		userAgent, ok := ctx.Value(userAgentKey).(string)
0000000000000000000000000000000000000000;;		return userAgent, ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAuditEvent returns set audit event struct.
0000000000000000000000000000000000000000;;	func WithAuditEvent(parent Context, ev *audit.Event) Context {
0000000000000000000000000000000000000000;;		return WithValue(parent, auditKey, ev)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuditEventFrom returns the audit event struct on the ctx
0000000000000000000000000000000000000000;;	func AuditEventFrom(ctx Context) *audit.Event {
0000000000000000000000000000000000000000;;		ev, _ := ctx.Value(auditKey).(*audit.Event)
0000000000000000000000000000000000000000;;		return ev
0000000000000000000000000000000000000000;;	}
