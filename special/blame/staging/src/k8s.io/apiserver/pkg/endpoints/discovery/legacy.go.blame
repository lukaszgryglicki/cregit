0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
31fc62ac75e5ebf260b5069e57cfadb26e1b601e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/negotiation"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// legacyRootAPIHandler creates a webservice serving api group discovery.
0000000000000000000000000000000000000000;;	type legacyRootAPIHandler struct {
0000000000000000000000000000000000000000;;		// addresses is used to build cluster IPs for discovery.
0000000000000000000000000000000000000000;;		addresses     Addresses
0000000000000000000000000000000000000000;;		apiPrefix     string
0000000000000000000000000000000000000000;;		serializer    runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		apiVersions   []string
0000000000000000000000000000000000000000;;		contextMapper request.RequestContextMapper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLegacyRootAPIHandler(addresses Addresses, serializer runtime.NegotiatedSerializer, apiPrefix string, apiVersions []string, contextMapper request.RequestContextMapper) *legacyRootAPIHandler {
0000000000000000000000000000000000000000;;		// Because in release 1.1, /apis returns response with empty APIVersion, we
0000000000000000000000000000000000000000;;		// use stripVersionNegotiatedSerializer to keep the response backwards
0000000000000000000000000000000000000000;;		// compatible.
0000000000000000000000000000000000000000;;		serializer = stripVersionNegotiatedSerializer{serializer}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &legacyRootAPIHandler{
0000000000000000000000000000000000000000;;			addresses:     addresses,
0000000000000000000000000000000000000000;;			apiPrefix:     apiPrefix,
0000000000000000000000000000000000000000;;			serializer:    serializer,
0000000000000000000000000000000000000000;;			apiVersions:   apiVersions,
0000000000000000000000000000000000000000;;			contextMapper: contextMapper,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddApiWebService adds a service to return the supported api versions at the legacy /api.
0000000000000000000000000000000000000000;;	func (s *legacyRootAPIHandler) WebService() *restful.WebService {
0000000000000000000000000000000000000000;;		mediaTypes, _ := negotiation.MediaTypesForSerializer(s.serializer)
0000000000000000000000000000000000000000;;		ws := new(restful.WebService)
0000000000000000000000000000000000000000;;		ws.Path(s.apiPrefix)
0000000000000000000000000000000000000000;;		ws.Doc("get available API versions")
0000000000000000000000000000000000000000;;		ws.Route(ws.GET("/").To(s.handle).
0000000000000000000000000000000000000000;;			Doc("get available API versions").
0000000000000000000000000000000000000000;;			Operation("getAPIVersions").
0000000000000000000000000000000000000000;;			Produces(mediaTypes...).
0000000000000000000000000000000000000000;;			Consumes(mediaTypes...).
0000000000000000000000000000000000000000;;			Writes(metav1.APIVersions{}))
0000000000000000000000000000000000000000;;		return ws
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *legacyRootAPIHandler) handle(req *restful.Request, resp *restful.Response) {
0000000000000000000000000000000000000000;;		ctx, ok := s.contextMapper.Get(req.Request)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			responsewriters.InternalError(resp.ResponseWriter, req.Request, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientIP := utilnet.GetClientIP(req.Request)
0000000000000000000000000000000000000000;;		apiVersions := &metav1.APIVersions{
0000000000000000000000000000000000000000;;			ServerAddressByClientCIDRs: s.addresses.ServerAddressByClientCIDRs(clientIP),
0000000000000000000000000000000000000000;;			Versions:                   s.apiVersions,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responsewriters.WriteObjectNegotiated(ctx, s.serializer, schema.GroupVersion{}, resp.ResponseWriter, req.Request, http.StatusOK, apiVersions)
0000000000000000000000000000000000000000;;	}
