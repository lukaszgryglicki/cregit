0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
70202b76941f978b5b2d3474a176fcf277f5d774;pkg/apiserver/filters/authorization_test.go[pkg/apiserver/filters/authorization_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		batch "k8s.io/api/batch/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAuthorizerAttributes(t *testing.T) {
0000000000000000000000000000000000000000;;		mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Verb               string
0000000000000000000000000000000000000000;;			Path               string
0000000000000000000000000000000000000000;;			ExpectedAttributes *authorizer.AttributesRecord
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"non-resource root": {
0000000000000000000000000000000000000000;;				Verb: "POST",
0000000000000000000000000000000000000000;;				Path: "/",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb: "post",
0000000000000000000000000000000000000000;;					Path: "/",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"non-resource api prefix": {
0000000000000000000000000000000000000000;;				Verb: "GET",
0000000000000000000000000000000000000000;;				Path: "/api/",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb: "get",
0000000000000000000000000000000000000000;;					Path: "/api/",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"non-resource group api prefix": {
0000000000000000000000000000000000000000;;				Verb: "GET",
0000000000000000000000000000000000000000;;				Path: "/apis/extensions/",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb: "get",
0000000000000000000000000000000000000000;;					Path: "/apis/extensions/",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"resource": {
0000000000000000000000000000000000000000;;				Verb: "POST",
0000000000000000000000000000000000000000;;				Path: "/api/v1/nodes/mynode",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb:            "create",
0000000000000000000000000000000000000000;;					Path:            "/api/v1/nodes/mynode",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					Resource:        "nodes",
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;					Name:            "mynode",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"namespaced resource": {
0000000000000000000000000000000000000000;;				Verb: "PUT",
0000000000000000000000000000000000000000;;				Path: "/api/v1/namespaces/myns/pods/mypod",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb:            "update",
0000000000000000000000000000000000000000;;					Path:            "/api/v1/namespaces/myns/pods/mypod",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					Namespace:       "myns",
0000000000000000000000000000000000000000;;					Resource:        "pods",
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;					Name:            "mypod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"API group resource": {
0000000000000000000000000000000000000000;;				Verb: "GET",
0000000000000000000000000000000000000000;;				Path: "/apis/batch/v1/namespaces/myns/jobs",
0000000000000000000000000000000000000000;;				ExpectedAttributes: &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;					Verb:            "list",
0000000000000000000000000000000000000000;;					Path:            "/apis/batch/v1/namespaces/myns/jobs",
0000000000000000000000000000000000000000;;					ResourceRequest: true,
0000000000000000000000000000000000000000;;					APIGroup:        batch.GroupName,
0000000000000000000000000000000000000000;;					APIVersion:      "v1",
0000000000000000000000000000000000000000;;					Namespace:       "myns",
0000000000000000000000000000000000000000;;					Resource:        "jobs",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(tc.Verb, tc.Path, nil)
0000000000000000000000000000000000000000;;			req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var attribs authorizer.Attributes
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				ctx, ok := mapper.Get(req)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					responsewriters.InternalError(w, req, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				attribs, err = GetAuthorizerAttributes(ctx)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			handler = WithRequestInfo(handler, newTestRequestInfoResolver(), mapper)
0000000000000000000000000000000000000000;;			handler = request.WithRequestContext(handler, mapper)
0000000000000000000000000000000000000000;;			handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;			} else if !reflect.DeepEqual(attribs, tc.ExpectedAttributes) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n\t%#v\ngot\n\t%#v", k, tc.ExpectedAttributes, attribs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
