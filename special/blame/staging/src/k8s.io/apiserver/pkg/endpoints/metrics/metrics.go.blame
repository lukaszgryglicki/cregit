0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
58d0b56af56ea05a65350f7c03cdc01c36176520;pkg/apiserver/metrics/metrics.go[pkg/apiserver/metrics/metrics.go][staging/src/k8s.io/apiserver/pkg/endpoints/metrics/metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// TODO(a-robinson): Add unit tests for the handling of these metrics once
0000000000000000000000000000000000000000;;		// the upstream library supports it.
0000000000000000000000000000000000000000;;		requestCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Name: "apiserver_request_count",
0000000000000000000000000000000000000000;;				Help: "Counter of apiserver requests broken out for each verb, API resource, client, and HTTP response contentType and code.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"verb", "resource", "subresource", "client", "contentType", "code"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		requestLatencies = prometheus.NewHistogramVec(
0000000000000000000000000000000000000000;;			prometheus.HistogramOpts{
0000000000000000000000000000000000000000;;				Name: "apiserver_request_latencies",
0000000000000000000000000000000000000000;;				Help: "Response latency distribution in microseconds for each verb, resource and client.",
0000000000000000000000000000000000000000;;				// Use buckets ranging from 125 ms to 8 seconds.
0000000000000000000000000000000000000000;;				Buckets: prometheus.ExponentialBuckets(125000, 2.0, 7),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"verb", "resource", "subresource"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		requestLatenciesSummary = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Name: "apiserver_request_latencies_summary",
0000000000000000000000000000000000000000;;				Help: "Response latency summary in microseconds for each verb and resource.",
0000000000000000000000000000000000000000;;				// Make the sliding window of 1h.
0000000000000000000000000000000000000000;;				MaxAge: time.Hour,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"verb", "resource", "subresource"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		kubectlExeRegexp = regexp.MustCompile(`^.*((?i:kubectl\.exe))`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register all metrics.
0000000000000000000000000000000000000000;;	func Register() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(requestCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(requestLatencies)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(requestLatenciesSummary)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Monitor records a request to the apiserver endpoints that follow the Kubernetes API conventions.  verb must be
0000000000000000000000000000000000000000;;	// uppercase to be backwards compatible with existing monitoring tooling.
0000000000000000000000000000000000000000;;	func Monitor(verb, resource, subresource, client, contentType string, httpCode int, reqStart time.Time) {
0000000000000000000000000000000000000000;;		elapsed := float64((time.Since(reqStart)) / time.Microsecond)
0000000000000000000000000000000000000000;;		requestCounter.WithLabelValues(verb, resource, subresource, client, contentType, codeToString(httpCode)).Inc()
0000000000000000000000000000000000000000;;		requestLatencies.WithLabelValues(verb, resource, subresource).Observe(elapsed)
0000000000000000000000000000000000000000;;		requestLatenciesSummary.WithLabelValues(verb, resource, subresource).Observe(elapsed)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitorRequest handles standard transformations for client and the reported verb and then invokes Monitor to record
0000000000000000000000000000000000000000;;	// a request. verb must be uppercase to be backwards compatible with existing monitoring tooling.
0000000000000000000000000000000000000000;;	func MonitorRequest(request *http.Request, verb, resource, subresource, contentType string, httpCode int, reqStart time.Time) {
0000000000000000000000000000000000000000;;		reportedVerb := verb
0000000000000000000000000000000000000000;;		if verb == "LIST" {
0000000000000000000000000000000000000000;;			// see apimachinery/pkg/runtime/conversion.go Convert_Slice_string_To_bool
0000000000000000000000000000000000000000;;			if values := request.URL.Query()["watch"]; len(values) > 0 {
0000000000000000000000000000000000000000;;				if value := strings.ToLower(values[0]); value != "0" && value != "false" {
0000000000000000000000000000000000000000;;					reportedVerb = "WATCH"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client := cleanUserAgent(utilnet.GetHTTPClient(request))
0000000000000000000000000000000000000000;;		Monitor(reportedVerb, resource, subresource, client, contentType, httpCode, reqStart)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Reset() {
0000000000000000000000000000000000000000;;		requestCounter.Reset()
0000000000000000000000000000000000000000;;		requestLatencies.Reset()
0000000000000000000000000000000000000000;;		requestLatenciesSummary.Reset()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstrumentRouteFunc works like Prometheus' InstrumentHandlerFunc but wraps
0000000000000000000000000000000000000000;;	// the go-restful RouteFunction instead of a HandlerFunc
0000000000000000000000000000000000000000;;	func InstrumentRouteFunc(verb, resource, subresource string, routeFunc restful.RouteFunction) restful.RouteFunction {
0000000000000000000000000000000000000000;;		return restful.RouteFunction(func(request *restful.Request, response *restful.Response) {
0000000000000000000000000000000000000000;;			now := time.Now()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			delegate := &responseWriterDelegator{ResponseWriter: response.ResponseWriter}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			_, cn := response.ResponseWriter.(http.CloseNotifier)
0000000000000000000000000000000000000000;;			_, fl := response.ResponseWriter.(http.Flusher)
0000000000000000000000000000000000000000;;			_, hj := response.ResponseWriter.(http.Hijacker)
0000000000000000000000000000000000000000;;			var rw http.ResponseWriter
0000000000000000000000000000000000000000;;			if cn && fl && hj {
0000000000000000000000000000000000000000;;				rw = &fancyResponseWriterDelegator{delegate}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				rw = delegate
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			response.ResponseWriter = rw
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			routeFunc(request, response)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			MonitorRequest(request.Request, verb, resource, subresource, rw.Header().Get("Content-Type"), delegate.status, now)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func cleanUserAgent(ua string) string {
0000000000000000000000000000000000000000;;		// We collapse all "web browser"-type user agents into one "browser" to reduce metric cardinality.
0000000000000000000000000000000000000000;;		if strings.HasPrefix(ua, "Mozilla/") {
0000000000000000000000000000000000000000;;			return "Browser"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If an old "kubectl.exe" has passed us its full path, we discard the path portion.
0000000000000000000000000000000000000000;;		ua = kubectlExeRegexp.ReplaceAllString(ua, "$1")
0000000000000000000000000000000000000000;;		return ua
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type responseWriterDelegator struct {
0000000000000000000000000000000000000000;;		http.ResponseWriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		status      int
0000000000000000000000000000000000000000;;		written     int64
0000000000000000000000000000000000000000;;		wroteHeader bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *responseWriterDelegator) WriteHeader(code int) {
0000000000000000000000000000000000000000;;		r.status = code
0000000000000000000000000000000000000000;;		r.wroteHeader = true
0000000000000000000000000000000000000000;;		r.ResponseWriter.WriteHeader(code)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *responseWriterDelegator) Write(b []byte) (int, error) {
0000000000000000000000000000000000000000;;		if !r.wroteHeader {
0000000000000000000000000000000000000000;;			r.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err := r.ResponseWriter.Write(b)
0000000000000000000000000000000000000000;;		r.written += int64(n)
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fancyResponseWriterDelegator struct {
0000000000000000000000000000000000000000;;		*responseWriterDelegator
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fancyResponseWriterDelegator) CloseNotify() <-chan bool {
0000000000000000000000000000000000000000;;		return f.ResponseWriter.(http.CloseNotifier).CloseNotify()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fancyResponseWriterDelegator) Flush() {
0000000000000000000000000000000000000000;;		f.ResponseWriter.(http.Flusher).Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fancyResponseWriterDelegator) Hijack() (net.Conn, *bufio.ReadWriter, error) {
0000000000000000000000000000000000000000;;		return f.ResponseWriter.(http.Hijacker).Hijack()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Small optimization over Itoa
0000000000000000000000000000000000000000;;	func codeToString(s int) string {
0000000000000000000000000000000000000000;;		switch s {
0000000000000000000000000000000000000000;;		case 100:
0000000000000000000000000000000000000000;;			return "100"
0000000000000000000000000000000000000000;;		case 101:
0000000000000000000000000000000000000000;;			return "101"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case 200:
0000000000000000000000000000000000000000;;			return "200"
0000000000000000000000000000000000000000;;		case 201:
0000000000000000000000000000000000000000;;			return "201"
0000000000000000000000000000000000000000;;		case 202:
0000000000000000000000000000000000000000;;			return "202"
0000000000000000000000000000000000000000;;		case 203:
0000000000000000000000000000000000000000;;			return "203"
0000000000000000000000000000000000000000;;		case 204:
0000000000000000000000000000000000000000;;			return "204"
0000000000000000000000000000000000000000;;		case 205:
0000000000000000000000000000000000000000;;			return "205"
0000000000000000000000000000000000000000;;		case 206:
0000000000000000000000000000000000000000;;			return "206"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case 300:
0000000000000000000000000000000000000000;;			return "300"
0000000000000000000000000000000000000000;;		case 301:
0000000000000000000000000000000000000000;;			return "301"
0000000000000000000000000000000000000000;;		case 302:
0000000000000000000000000000000000000000;;			return "302"
0000000000000000000000000000000000000000;;		case 304:
0000000000000000000000000000000000000000;;			return "304"
0000000000000000000000000000000000000000;;		case 305:
0000000000000000000000000000000000000000;;			return "305"
0000000000000000000000000000000000000000;;		case 307:
0000000000000000000000000000000000000000;;			return "307"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case 400:
0000000000000000000000000000000000000000;;			return "400"
0000000000000000000000000000000000000000;;		case 401:
0000000000000000000000000000000000000000;;			return "401"
0000000000000000000000000000000000000000;;		case 402:
0000000000000000000000000000000000000000;;			return "402"
0000000000000000000000000000000000000000;;		case 403:
0000000000000000000000000000000000000000;;			return "403"
0000000000000000000000000000000000000000;;		case 404:
0000000000000000000000000000000000000000;;			return "404"
0000000000000000000000000000000000000000;;		case 405:
0000000000000000000000000000000000000000;;			return "405"
0000000000000000000000000000000000000000;;		case 406:
0000000000000000000000000000000000000000;;			return "406"
0000000000000000000000000000000000000000;;		case 407:
0000000000000000000000000000000000000000;;			return "407"
0000000000000000000000000000000000000000;;		case 408:
0000000000000000000000000000000000000000;;			return "408"
0000000000000000000000000000000000000000;;		case 409:
0000000000000000000000000000000000000000;;			return "409"
0000000000000000000000000000000000000000;;		case 410:
0000000000000000000000000000000000000000;;			return "410"
0000000000000000000000000000000000000000;;		case 411:
0000000000000000000000000000000000000000;;			return "411"
0000000000000000000000000000000000000000;;		case 412:
0000000000000000000000000000000000000000;;			return "412"
0000000000000000000000000000000000000000;;		case 413:
0000000000000000000000000000000000000000;;			return "413"
0000000000000000000000000000000000000000;;		case 414:
0000000000000000000000000000000000000000;;			return "414"
0000000000000000000000000000000000000000;;		case 415:
0000000000000000000000000000000000000000;;			return "415"
0000000000000000000000000000000000000000;;		case 416:
0000000000000000000000000000000000000000;;			return "416"
0000000000000000000000000000000000000000;;		case 417:
0000000000000000000000000000000000000000;;			return "417"
0000000000000000000000000000000000000000;;		case 418:
0000000000000000000000000000000000000000;;			return "418"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case 500:
0000000000000000000000000000000000000000;;			return "500"
0000000000000000000000000000000000000000;;		case 501:
0000000000000000000000000000000000000000;;			return "501"
0000000000000000000000000000000000000000;;		case 502:
0000000000000000000000000000000000000000;;			return "502"
0000000000000000000000000000000000000000;;		case 503:
0000000000000000000000000000000000000000;;			return "503"
0000000000000000000000000000000000000000;;		case 504:
0000000000000000000000000000000000000000;;			return "504"
0000000000000000000000000000000000000000;;		case 505:
0000000000000000000000000000000000000000;;			return "505"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case 428:
0000000000000000000000000000000000000000;;			return "428"
0000000000000000000000000000000000000000;;		case 429:
0000000000000000000000000000000000000000;;			return "429"
0000000000000000000000000000000000000000;;		case 431:
0000000000000000000000000000000000000000;;			return "431"
0000000000000000000000000000000000000000;;		case 511:
0000000000000000000000000000000000000000;;			return "511"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return strconv.Itoa(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
