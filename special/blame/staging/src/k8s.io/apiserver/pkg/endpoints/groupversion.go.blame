0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
06699f6bbe14a867aaaecd86af05add5cf06668e;pkg/apiserver/groupversion.go[pkg/apiserver/groupversion.go][staging/src/k8s.io/apiserver/pkg/endpoints/groupversion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/discovery"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIGroupVersion is a helper for exposing rest.Storage objects as http.Handlers via go-restful
0000000000000000000000000000000000000000;;	// It handles URLs of the form:
0000000000000000000000000000000000000000;;	// /${storage_key}[/${object_name}]
0000000000000000000000000000000000000000;;	// Where 'storage_key' points to a rest.Storage object stored in storage.
0000000000000000000000000000000000000000;;	// This object should contain all parameterization necessary for running a particular API version
0000000000000000000000000000000000000000;;	type APIGroupVersion struct {
0000000000000000000000000000000000000000;;		Storage map[string]rest.Storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Root string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GroupVersion is the external group version
0000000000000000000000000000000000000000;;		GroupVersion schema.GroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OptionsExternalVersion controls the Kubernetes APIVersion used for common objects in the apiserver
0000000000000000000000000000000000000000;;		// schema like api.Status, api.DeleteOptions, and metav1.ListOptions. Other implementors may
0000000000000000000000000000000000000000;;		// define a version "v1beta1" but want to use the Kubernetes "v1" internal objects. If
0000000000000000000000000000000000000000;;		// empty, defaults to GroupVersion.
0000000000000000000000000000000000000000;;		OptionsExternalVersion *schema.GroupVersion
0000000000000000000000000000000000000000;;		// MetaGroupVersion defaults to "meta.k8s.io/v1" and is the scheme group version used to decode
0000000000000000000000000000000000000000;;		// common API implementations like ListOptions. Future changes will allow this to vary by group
0000000000000000000000000000000000000000;;		// version (for when the inevitable meta/v2 group emerges).
0000000000000000000000000000000000000000;;		MetaGroupVersion *schema.GroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mapper meta.RESTMapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Serializer is used to determine how to convert responses from API methods into bytes to send over
0000000000000000000000000000000000000000;;		// the wire.
0000000000000000000000000000000000000000;;		Serializer     runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		ParameterCodec runtime.ParameterCodec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Typer           runtime.ObjectTyper
0000000000000000000000000000000000000000;;		Creater         runtime.ObjectCreater
0000000000000000000000000000000000000000;;		Convertor       runtime.ObjectConvertor
0000000000000000000000000000000000000000;;		Copier          runtime.ObjectCopier
0000000000000000000000000000000000000000;;		Defaulter       runtime.ObjectDefaulter
0000000000000000000000000000000000000000;;		Linker          runtime.SelfLinker
0000000000000000000000000000000000000000;;		UnsafeConvertor runtime.ObjectConvertor
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Admit   admission.Interface
0000000000000000000000000000000000000000;;		Context request.RequestContextMapper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MinRequestTimeout time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SubresourceGroupVersionKind contains the GroupVersionKind overrides for each subresource that is
0000000000000000000000000000000000000000;;		// accessible from this API group version. The GroupVersionKind is that of the external version of
0000000000000000000000000000000000000000;;		// the subresource. The key of this map should be the path of the subresource. The keys here should
0000000000000000000000000000000000000000;;		// match the keys in the Storage map above for subresources.
0000000000000000000000000000000000000000;;		SubresourceGroupVersionKind map[string]schema.GroupVersionKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceLister is an interface that knows how to list resources
0000000000000000000000000000000000000000;;		// for this API Group.
0000000000000000000000000000000000000000;;		ResourceLister discovery.APIResourceLister
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EnableAPIResponseCompression indicates whether API Responses should support compression
0000000000000000000000000000000000000000;;		// if the client requests it via Accept-Encoding
0000000000000000000000000000000000000000;;		EnableAPIResponseCompression bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstallREST registers the REST handlers (storage, watch, proxy and redirect) into a restful Container.
0000000000000000000000000000000000000000;;	// It is expected that the provided path root prefix will serve all operations. Root MUST NOT end
0000000000000000000000000000000000000000;;	// in a slash.
0000000000000000000000000000000000000000;;	func (g *APIGroupVersion) InstallREST(container *restful.Container) error {
0000000000000000000000000000000000000000;;		installer := g.newInstaller()
0000000000000000000000000000000000000000;;		ws := installer.NewWebService()
0000000000000000000000000000000000000000;;		apiResources, registrationErrors := installer.Install(ws)
0000000000000000000000000000000000000000;;		lister := g.ResourceLister
0000000000000000000000000000000000000000;;		if lister == nil {
0000000000000000000000000000000000000000;;			lister = staticLister{apiResources}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versionDiscoveryHandler := discovery.NewAPIVersionHandler(g.Serializer, g.GroupVersion, lister, g.Context)
0000000000000000000000000000000000000000;;		versionDiscoveryHandler.AddToWebService(ws)
0000000000000000000000000000000000000000;;		container.Add(ws)
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(registrationErrors)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateREST registers the REST handlers for this APIGroupVersion to an existing web service
0000000000000000000000000000000000000000;;	// in the restful Container.  It will use the prefix (root/version) to find the existing
0000000000000000000000000000000000000000;;	// web service.  If a web service does not exist within the container to support the prefix
0000000000000000000000000000000000000000;;	// this method will return an error.
0000000000000000000000000000000000000000;;	func (g *APIGroupVersion) UpdateREST(container *restful.Container) error {
0000000000000000000000000000000000000000;;		installer := g.newInstaller()
0000000000000000000000000000000000000000;;		var ws *restful.WebService = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, s := range container.RegisteredWebServices() {
0000000000000000000000000000000000000000;;			if s.RootPath() == installer.prefix {
0000000000000000000000000000000000000000;;				ws = container.RegisteredWebServices()[i]
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ws == nil {
0000000000000000000000000000000000000000;;			return apierrors.NewInternalError(fmt.Errorf("unable to find an existing webservice for prefix %s", installer.prefix))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		apiResources, registrationErrors := installer.Install(ws)
0000000000000000000000000000000000000000;;		lister := g.ResourceLister
0000000000000000000000000000000000000000;;		if lister == nil {
0000000000000000000000000000000000000000;;			lister = staticLister{apiResources}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versionDiscoveryHandler := discovery.NewAPIVersionHandler(g.Serializer, g.GroupVersion, lister, g.Context)
0000000000000000000000000000000000000000;;		versionDiscoveryHandler.AddToWebService(ws)
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(registrationErrors)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newInstaller is a helper to create the installer.  Used by InstallREST and UpdateREST.
0000000000000000000000000000000000000000;;	func (g *APIGroupVersion) newInstaller() *APIInstaller {
0000000000000000000000000000000000000000;;		prefix := path.Join(g.Root, g.GroupVersion.Group, g.GroupVersion.Version)
0000000000000000000000000000000000000000;;		installer := &APIInstaller{
0000000000000000000000000000000000000000;;			group:                        g,
0000000000000000000000000000000000000000;;			prefix:                       prefix,
0000000000000000000000000000000000000000;;			minRequestTimeout:            g.MinRequestTimeout,
0000000000000000000000000000000000000000;;			enableAPIResponseCompression: g.EnableAPIResponseCompression,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return installer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// staticLister implements the APIResourceLister interface
0000000000000000000000000000000000000000;;	type staticLister struct {
0000000000000000000000000000000000000000;;		list []metav1.APIResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s staticLister) ListAPIResources() []metav1.APIResource {
0000000000000000000000000000000000000000;;		return s.list
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ discovery.APIResourceLister = &staticLister{}
