0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
8219ab6bca57826e5661ea96ff278e8367b102cf;pkg/auth/handlers/handlers_test.go[pkg/auth/handlers/handlers_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/filters/authentication_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequest(t *testing.T) {
0000000000000000000000000000000000000000;;		success := make(chan struct{})
0000000000000000000000000000000000000000;;		contextMapper := genericapirequest.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		auth := WithAuthentication(
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				ctx, ok := contextMapper.Get(req)
0000000000000000000000000000000000000000;;				if ctx == nil || !ok {
0000000000000000000000000000000000000000;;					t.Errorf("no context stored on contextMapper: %#v", contextMapper)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				user, ok := genericapirequest.UserFrom(ctx)
0000000000000000000000000000000000000000;;				if user == nil || !ok {
0000000000000000000000000000000000000000;;					t.Errorf("no user stored in context: %#v", ctx)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if req.Header.Get("Authorization") != "" {
0000000000000000000000000000000000000000;;					t.Errorf("Authorization header should be removed from request on success: %#v", req)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				close(success)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			contextMapper,
0000000000000000000000000000000000000000;;			authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;				if req.Header.Get("Authorization") == "Something" {
0000000000000000000000000000000000000000;;					return &user.DefaultInfo{Name: "user"}, true, nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil, false, errors.New("Authorization header is missing.")
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected call to failed")
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auth.ServeHTTP(httptest.NewRecorder(), &http.Request{Header: map[string][]string{"Authorization": {"Something"}}})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-success
0000000000000000000000000000000000000000;;		empty, err := genericapirequest.IsEmpty(contextMapper)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !empty {
0000000000000000000000000000000000000000;;			t.Fatalf("contextMapper should have no stored requests: %v", contextMapper)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestFailed(t *testing.T) {
0000000000000000000000000000000000000000;;		failed := make(chan struct{})
0000000000000000000000000000000000000000;;		contextMapper := genericapirequest.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		auth := WithAuthentication(
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected call to handler")
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			contextMapper,
0000000000000000000000000000000000000000;;			authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;				return nil, false, nil
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;				close(failed)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auth.ServeHTTP(httptest.NewRecorder(), &http.Request{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-failed
0000000000000000000000000000000000000000;;		empty, err := genericapirequest.IsEmpty(contextMapper)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !empty {
0000000000000000000000000000000000000000;;			t.Fatalf("contextMapper should have no stored requests: %v", contextMapper)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthenticateRequestError(t *testing.T) {
0000000000000000000000000000000000000000;;		failed := make(chan struct{})
0000000000000000000000000000000000000000;;		contextMapper := genericapirequest.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		auth := WithAuthentication(
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected call to handler")
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			contextMapper,
0000000000000000000000000000000000000000;;			authenticator.RequestFunc(func(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;				return nil, false, errors.New("failure")
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			http.HandlerFunc(func(_ http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;				close(failed)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auth.ServeHTTP(httptest.NewRecorder(), &http.Request{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-failed
0000000000000000000000000000000000000000;;		empty, err := genericapirequest.IsEmpty(contextMapper)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !empty {
0000000000000000000000000000000000000000;;			t.Fatalf("contextMapper should have no stored requests: %v", contextMapper)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
