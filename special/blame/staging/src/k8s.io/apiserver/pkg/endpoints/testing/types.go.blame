0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f9592e8115fa094cfea270dcab997fbc21ad782c;pkg/apiserver/testing/types.go[pkg/apiserver/testing/types.go][staging/src/k8s.io/apiserver/pkg/endpoints/testing/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Simple struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Other string `json:"other,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleRoot struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Other string `json:"other,omitempty"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleGetOptions struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		Param1          string `json:"param1"`
0000000000000000000000000000000000000000;;		Param2          string `json:"param2"`
0000000000000000000000000000000000000000;;		Path            string `json:"atAPath"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (SimpleGetOptions) SwaggerDoc() map[string]string {
0000000000000000000000000000000000000000;;		return map[string]string{
0000000000000000000000000000000000000000;;			"param1": "description for param1",
0000000000000000000000000000000000000000;;			"param2": "description for param2",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,inline"`
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Items []Simple `json:"items,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleXGSubresource is a cross group subresource, i.e. the subresource does not belong to the
0000000000000000000000000000000000000000;;	// same group as its parent resource.
0000000000000000000000000000000000000000;;	type SimpleXGSubresource struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata"`
0000000000000000000000000000000000000000;;		SubresourceInfo   string            `json:"subresourceInfo,omitempty"`
0000000000000000000000000000000000000000;;		Labels            map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
