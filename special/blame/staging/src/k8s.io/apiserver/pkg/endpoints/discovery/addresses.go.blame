0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
fbf5520f9b16aae51a22f43edcb429a0449b1470;pkg/genericapiserver/discovery.go[pkg/genericapiserver/discovery.go][staging/src/k8s.io/apiserver/pkg/endpoints/discovery/addresses.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Addresses interface {
0000000000000000000000000000000000000000;;		ServerAddressByClientCIDRs(net.IP) []metav1.ServerAddressByClientCIDR
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultAddresses is a default implementation of Addresses that will work in most cases
0000000000000000000000000000000000000000;;	type DefaultAddresses struct {
0000000000000000000000000000000000000000;;		// CIDRRules is a list of CIDRs and Addresses to use if a client is in the range
0000000000000000000000000000000000000000;;		CIDRRules []CIDRRule
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultAddress is the address (hostname or IP and port) that should be used in
0000000000000000000000000000000000000000;;		// if no CIDR matches more specifically.
0000000000000000000000000000000000000000;;		DefaultAddress string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CIDRRule is a rule for adding an alternate path to the master based on matching CIDR
0000000000000000000000000000000000000000;;	type CIDRRule struct {
0000000000000000000000000000000000000000;;		IPRange net.IPNet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Address is the address (hostname or IP and port) that should be used in
0000000000000000000000000000000000000000;;		// if this CIDR matches
0000000000000000000000000000000000000000;;		Address string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d DefaultAddresses) ServerAddressByClientCIDRs(clientIP net.IP) []metav1.ServerAddressByClientCIDR {
0000000000000000000000000000000000000000;;		addressCIDRMap := []metav1.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;				ServerAddress: d.DefaultAddress,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, rule := range d.CIDRRules {
0000000000000000000000000000000000000000;;			addressCIDRMap = append(addressCIDRMap, rule.ServerAddressByClientCIDRs(clientIP)...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return addressCIDRMap
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d CIDRRule) ServerAddressByClientCIDRs(clientIP net.IP) []metav1.ServerAddressByClientCIDR {
0000000000000000000000000000000000000000;;		addressCIDRMap := []metav1.ServerAddressByClientCIDR{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if d.IPRange.Contains(clientIP) {
0000000000000000000000000000000000000000;;			addressCIDRMap = append(addressCIDRMap, metav1.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;				ClientCIDR:    d.IPRange.String(),
0000000000000000000000000000000000000000;;				ServerAddress: d.Address,
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return addressCIDRMap
0000000000000000000000000000000000000000;;	}
