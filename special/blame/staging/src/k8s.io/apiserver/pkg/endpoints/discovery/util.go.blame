0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
31fc62ac75e5ebf260b5069e57cfadb26e1b601e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const APIGroupPrefix = "/apis"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func keepUnversioned(group string) bool {
0000000000000000000000000000000000000000;;		return group == "" || group == "extensions"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stripVersionEncoder strips APIVersion field from the encoding output. It's
0000000000000000000000000000000000000000;;	// used to keep the responses at the discovery endpoints backward compatible
0000000000000000000000000000000000000000;;	// with release-1.1, when the responses have empty APIVersion.
0000000000000000000000000000000000000000;;	type stripVersionEncoder struct {
0000000000000000000000000000000000000000;;		encoder    runtime.Encoder
0000000000000000000000000000000000000000;;		serializer runtime.Serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c stripVersionEncoder) Encode(obj runtime.Object, w io.Writer) error {
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		err := c.encoder.Encode(obj, buf)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		roundTrippedObj, gvk, err := c.serializer.Decode(buf.Bytes(), nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gvk.Group = ""
0000000000000000000000000000000000000000;;		gvk.Version = ""
0000000000000000000000000000000000000000;;		roundTrippedObj.GetObjectKind().SetGroupVersionKind(*gvk)
0000000000000000000000000000000000000000;;		return c.serializer.Encode(roundTrippedObj, w)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// stripVersionNegotiatedSerializer will return stripVersionEncoder when
0000000000000000000000000000000000000000;;	// EncoderForVersion is called. See comments for stripVersionEncoder.
0000000000000000000000000000000000000000;;	type stripVersionNegotiatedSerializer struct {
0000000000000000000000000000000000000000;;		runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n stripVersionNegotiatedSerializer) EncoderForVersion(encoder runtime.Encoder, gv runtime.GroupVersioner) runtime.Encoder {
0000000000000000000000000000000000000000;;		serializer, ok := encoder.(runtime.Serializer)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			// The stripVersionEncoder needs both an encoder and decoder, but is called from a context that doesn't have access to the
0000000000000000000000000000000000000000;;			// decoder. We do a best effort cast here (since this code path is only for backwards compatibility) to get access to the caller's
0000000000000000000000000000000000000000;;			// decoder.
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Unable to extract serializer from %#v", encoder))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versioned := n.NegotiatedSerializer.EncoderForVersion(encoder, gv)
0000000000000000000000000000000000000000;;		return stripVersionEncoder{versioned, serializer}
0000000000000000000000000000000000000000;;	}
