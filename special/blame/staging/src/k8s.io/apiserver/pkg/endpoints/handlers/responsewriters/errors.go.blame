0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
70202b76941f978b5b2d3474a176fcf277f5d774;pkg/apiserver/filters/errors.go[pkg/apiserver/filters/errors.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/responsewriters/errors.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package responsewriters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Avoid emitting errors that look like valid HTML. Quotes are okay.
0000000000000000000000000000000000000000;;	var sanitizer = strings.NewReplacer(`&`, "&amp;", `<`, "&lt;", `>`, "&gt;")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BadGatewayError renders a simple bad gateway error.
0000000000000000000000000000000000000000;;	func BadGatewayError(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		w.Header().Set("Content-Type", "text/plain")
0000000000000000000000000000000000000000;;		w.Header().Set("X-Content-Type-Options", "nosniff")
0000000000000000000000000000000000000000;;		w.WriteHeader(http.StatusBadGateway)
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, "Bad Gateway: %q", sanitizer.Replace(req.RequestURI))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Forbidden renders a simple forbidden error
0000000000000000000000000000000000000000;;	func Forbidden(ctx request.Context, attributes authorizer.Attributes, w http.ResponseWriter, req *http.Request, reason string, s runtime.NegotiatedSerializer) {
0000000000000000000000000000000000000000;;		msg := sanitizer.Replace(forbiddenMessage(attributes))
0000000000000000000000000000000000000000;;		w.Header().Set("X-Content-Type-Options", "nosniff")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var errMsg string
0000000000000000000000000000000000000000;;		if len(reason) == 0 {
0000000000000000000000000000000000000000;;			errMsg = fmt.Sprintf("%s", msg)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			errMsg = fmt.Sprintf("%s: %q", msg, reason)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gv := schema.GroupVersion{Group: attributes.GetAPIGroup(), Version: attributes.GetAPIVersion()}
0000000000000000000000000000000000000000;;		gr := schema.GroupResource{Group: attributes.GetAPIGroup(), Resource: attributes.GetResource()}
0000000000000000000000000000000000000000;;		ErrorNegotiated(ctx, apierrors.NewForbidden(gr, attributes.GetName(), fmt.Errorf(errMsg)), s, gv, w, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func forbiddenMessage(attributes authorizer.Attributes) string {
0000000000000000000000000000000000000000;;		username := ""
0000000000000000000000000000000000000000;;		if user := attributes.GetUser(); user != nil {
0000000000000000000000000000000000000000;;			username = user.GetName()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !attributes.IsResourceRequest() {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("User %q cannot %s path %q.", username, attributes.GetVerb(), attributes.GetPath())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resource := attributes.GetResource()
0000000000000000000000000000000000000000;;		if group := attributes.GetAPIGroup(); len(group) > 0 {
0000000000000000000000000000000000000000;;			resource = resource + "." + group
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if subresource := attributes.GetSubresource(); len(subresource) > 0 {
0000000000000000000000000000000000000000;;			resource = resource + "/" + subresource
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ns := attributes.GetNamespace(); len(ns) > 0 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("User %q cannot %s %s in the namespace %q.", username, attributes.GetVerb(), resource, ns)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("User %q cannot %s %s at the cluster scope.", username, attributes.GetVerb(), resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InternalError renders a simple internal error
0000000000000000000000000000000000000000;;	func InternalError(w http.ResponseWriter, req *http.Request, err error) {
0000000000000000000000000000000000000000;;		w.Header().Set("Content-Type", "text/plain")
0000000000000000000000000000000000000000;;		w.Header().Set("X-Content-Type-Options", "nosniff")
0000000000000000000000000000000000000000;;		w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, "Internal Server Error: %q: %v", sanitizer.Replace(req.RequestURI), err)
0000000000000000000000000000000000000000;;		utilruntime.HandleError(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotFound renders a simple not found error.
0000000000000000000000000000000000000000;;	func NotFound(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;		fmt.Fprintf(w, "Not Found: %q", sanitizer.Replace(req.RequestURI))
0000000000000000000000000000000000000000;;	}
