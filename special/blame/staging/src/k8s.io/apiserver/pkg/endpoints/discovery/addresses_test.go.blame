0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
31fc62ac75e5ebf260b5069e57cfadb26e1b601e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerAddressByClientCIDRs(t *testing.T) {
0000000000000000000000000000000000000000;;		publicAddressCIDRMap := []metav1.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ClientCIDR:    "0.0.0.0/0",
0000000000000000000000000000000000000000;;				ServerAddress: "ExternalAddress",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		internalAddressCIDRMap := []metav1.ServerAddressByClientCIDR{
0000000000000000000000000000000000000000;;			publicAddressCIDRMap[0],
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ClientCIDR:    "10.0.0.0/24",
0000000000000000000000000000000000000000;;				ServerAddress: "serviceIP",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		internalIP := "10.0.0.1"
0000000000000000000000000000000000000000;;		publicIP := "1.1.1.1"
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Request     http.Request
0000000000000000000000000000000000000000;;			ExpectedMap []metav1.ServerAddressByClientCIDR
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request:     http.Request{},
0000000000000000000000000000000000000000;;				ExpectedMap: publicAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Real-Ip": {internalIP},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: internalAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Real-Ip": {publicIP},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: publicAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {internalIP},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: internalAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {publicIP},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: publicAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					RemoteAddr: internalIP,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: internalAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					RemoteAddr: publicIP,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: publicAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					RemoteAddr: "invalidIP",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedMap: publicAddressCIDRMap,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, ipRange, _ := net.ParseCIDR("10.0.0.0/24")
0000000000000000000000000000000000000000;;		discoveryAddresses := DefaultAddresses{DefaultAddress: "ExternalAddress"}
0000000000000000000000000000000000000000;;		discoveryAddresses.CIDRRules = append(discoveryAddresses.CIDRRules,
0000000000000000000000000000000000000000;;			CIDRRule{IPRange: *ipRange, Address: "serviceIP"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			if a, e := discoveryAddresses.ServerAddressByClientCIDRs(utilnet.GetClientIP(&test.Request)), test.ExpectedMap; reflect.DeepEqual(e, a) != true {
0000000000000000000000000000000000000000;;				t.Fatalf("test case %d failed. expected: %v, actual: %v", i+1, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
