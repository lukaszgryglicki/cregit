0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7c76be717720b98ceba9f572697a551d221acd03;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		genericapitesting "k8s.io/apiserver/pkg/endpoints/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAuditSink struct {
0000000000000000000000000000000000000000;;		lock   sync.Mutex
0000000000000000000000000000000000000000;;		events []*auditinternal.Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeAuditSink) ProcessEvents(evs ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;		s.events = append(s.events, evs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeAuditSink) Events() []*auditinternal.Event {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;		return append([]*auditinternal.Event{}, s.events...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAudit(t *testing.T) {
0000000000000000000000000000000000000000;;		type eventCheck func(events []*auditinternal.Event) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// fixtures
0000000000000000000000000000000000000000;;		simpleFoo := &genericapitesting.Simple{Other: "foo"}
0000000000000000000000000000000000000000;;		simpleFooJSON, _ := runtime.Encode(testCodec, simpleFoo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		simpleCPrime := &genericapitesting.Simple{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "c", Namespace: "other"},
0000000000000000000000000000000000000000;;			Other:      "bla",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		simpleCPrimeJSON, _ := runtime.Encode(testCodec, simpleCPrime)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// event checks
0000000000000000000000000000000000000000;;		noRequestBody := func(i int) eventCheck {
0000000000000000000000000000000000000000;;			return func(events []*auditinternal.Event) error {
0000000000000000000000000000000000000000;;				if events[i].RequestObject == nil {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return fmt.Errorf("expected RequestBody to be nil, got non-nill '%s'", events[i].RequestObject.Raw)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		requestBodyIs := func(i int, text string) eventCheck {
0000000000000000000000000000000000000000;;			return func(events []*auditinternal.Event) error {
0000000000000000000000000000000000000000;;				if events[i].RequestObject == nil {
0000000000000000000000000000000000000000;;					if text != "" {
0000000000000000000000000000000000000000;;						return fmt.Errorf("expected RequestBody %q, got <nil>", text)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if string(events[i].RequestObject.Raw) != text {
0000000000000000000000000000000000000000;;					return fmt.Errorf("expected RequestBody %q, got %q", text, string(events[i].RequestObject.Raw))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		requestBodyMatches := func(i int, pattern string) eventCheck {
0000000000000000000000000000000000000000;;			return func(events []*auditinternal.Event) error {
0000000000000000000000000000000000000000;;				if matched, _ := regexp.Match(pattern, events[i].RequestObject.Raw); !matched {
0000000000000000000000000000000000000000;;					return fmt.Errorf("expected RequestBody to match %q, but didn't: %q", pattern, string(events[i].RequestObject.Raw))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		noResponseBody := func(i int) eventCheck {
0000000000000000000000000000000000000000;;			return func(events []*auditinternal.Event) error {
0000000000000000000000000000000000000000;;				if events[i].ResponseObject == nil {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return fmt.Errorf("expected ResponseBody to be nil, got non-nill '%s'", events[i].ResponseObject.Raw)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		responseBodyMatches := func(i int, pattern string) eventCheck {
0000000000000000000000000000000000000000;;			return func(events []*auditinternal.Event) error {
0000000000000000000000000000000000000000;;				if matched, _ := regexp.Match(pattern, events[i].ResponseObject.Raw); !matched {
0000000000000000000000000000000000000000;;					return fmt.Errorf("expected ResponseBody to match %q, but didn't: %q", pattern, string(events[i].ResponseObject.Raw))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			desc   string
0000000000000000000000000000000000000000;;			req    func(server string) (*http.Request, error)
0000000000000000000000000000000000000000;;			linker runtime.SelfLinker
0000000000000000000000000000000000000000;;			code   int
0000000000000000000000000000000000000000;;			events int
0000000000000000000000000000000000000000;;			checks []eventCheck
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"get",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("GET", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/other/simple/c", bytes.NewBuffer(simpleFooJSON))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					noRequestBody(0),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"name":"c".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"list",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("GET", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/other/simple?labelSelector=a%3Dfoobar", nil)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&setTestSelfLinker{
0000000000000000000000000000000000000000;;					t:           t,
0000000000000000000000000000000000000000;;					expectedSet: "/" + prefix + "/" + testGroupVersion.Group + "/" + testGroupVersion.Version + "/namespaces/other/simple",
0000000000000000000000000000000000000000;;					namespace:   "other",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					noRequestBody(0),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"name":"a".*"name":"b".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"create",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("POST", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/default/simple", bytes.NewBuffer(simpleFooJSON))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				201,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					requestBodyIs(0, string(simpleFooJSON)),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"foo".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"not-allowed-named-create",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("POST", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/default/simple/named", bytes.NewBuffer(simpleFooJSON))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				405,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					noRequestBody(0),  // the 405 is thrown long before the create handler would be executed
0000000000000000000000000000000000000000;;					noResponseBody(0), // the 405 is thrown long before the create handler would be executed
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"delete",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("DELETE", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/default/simple/a", nil)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					noRequestBody(0),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"kind":"Status".*"status":"Success".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"delete-with-options-in-body",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("DELETE", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/default/simple/a", bytes.NewBuffer([]byte(`{"kind":"DeleteOptions"}`)))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					requestBodyMatches(0, "DeleteOptions"),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"kind":"Status".*"status":"Success".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"update",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("PUT", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/other/simple/c", bytes.NewBuffer(simpleCPrimeJSON))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					requestBodyIs(0, string(simpleCPrimeJSON)),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `{.*"bla".*}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"update-wrong-namespace",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("PUT", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/default/simple/c", bytes.NewBuffer(simpleCPrimeJSON))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				selfLinker,
0000000000000000000000000000000000000000;;				400,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					requestBodyIs(0, string(simpleCPrimeJSON)),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `"Status".*"status":"Failure".*"code":400}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"patch",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					req, _ := http.NewRequest("PATCH", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/other/simple/c", bytes.NewReader([]byte(`{"labels":{"foo":"bar"}}`)))
0000000000000000000000000000000000000000;;					req.Header.Set("Content-Type", "application/merge-patch+json; charset=UTF-8")
0000000000000000000000000000000000000000;;					return req, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&setTestSelfLinker{
0000000000000000000000000000000000000000;;					t:           t,
0000000000000000000000000000000000000000;;					expectedSet: "/" + prefix + "/" + testGroupVersion.Group + "/" + testGroupVersion.Version + "/namespaces/other/simple/c",
0000000000000000000000000000000000000000;;					name:        "c",
0000000000000000000000000000000000000000;;					namespace:   "other",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				2,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					requestBodyIs(0, `{"labels":{"foo":"bar"}}`),
0000000000000000000000000000000000000000;;					responseBodyMatches(0, `"name":"c".*"labels":{"foo":"bar"}`),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"watch",
0000000000000000000000000000000000000000;;				func(server string) (*http.Request, error) {
0000000000000000000000000000000000000000;;					return http.NewRequest("GET", server+"/"+prefix+"/"+testGroupVersion.Group+"/"+testGroupVersion.Version+"/namespaces/other/simple?watch=true", nil)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&setTestSelfLinker{
0000000000000000000000000000000000000000;;					t:           t,
0000000000000000000000000000000000000000;;					expectedSet: "/" + prefix + "/" + testGroupVersion.Group + "/" + testGroupVersion.Version + "/namespaces/other/simple",
0000000000000000000000000000000000000000;;					namespace:   "other",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				200,
0000000000000000000000000000000000000000;;				3,
0000000000000000000000000000000000000000;;				[]eventCheck{
0000000000000000000000000000000000000000;;					noRequestBody(0),
0000000000000000000000000000000000000000;;					noResponseBody(0),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			sink := &fakeAuditSink{}
0000000000000000000000000000000000000000;;			handler := handleInternal(map[string]rest.Storage{
0000000000000000000000000000000000000000;;				"simple": &SimpleRESTStorage{
0000000000000000000000000000000000000000;;					list: []genericapitesting.Simple{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "a", Namespace: "other"},
0000000000000000000000000000000000000000;;							Other:      "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							ObjectMeta: metav1.ObjectMeta{Name: "b", Namespace: "other"},
0000000000000000000000000000000000000000;;							Other:      "foo",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					item: genericapitesting.Simple{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "c", Namespace: "other", UID: "uid"},
0000000000000000000000000000000000000000;;						Other:      "foo",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, admissionControl, selfLinker, sink)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;			client := http.Client{Timeout: 2 * time.Second}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, err := test.req(server.URL)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] error creating the request: %v", test.desc, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			response, err := client.Do(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] error: %v", test.desc, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if response.StatusCode != test.code {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expected http code %d, got %#v", test.desc, test.code, response)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// close body because the handler might block in Flush, unable to send the remaining event.
0000000000000000000000000000000000000000;;			response.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// wait for events to arrive, at least the given number in the test
0000000000000000000000000000000000000000;;			events := []*auditinternal.Event{}
0000000000000000000000000000000000000000;;			err = wait.Poll(50*time.Millisecond, wait.ForeverTestTimeout, wait.ConditionFunc(func() (done bool, err error) {
0000000000000000000000000000000000000000;;				events = sink.Events()
0000000000000000000000000000000000000000;;				return len(events) >= test.events, nil
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] timeout waiting for events", test.desc)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if got := len(events); got != test.events {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] expected %d audit events, got %d", test.desc, test.events, got)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for i, check := range test.checks {
0000000000000000000000000000000000000000;;					err := check(events)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("[%s,%d] %v", test.desc, i, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(events) > 0 {
0000000000000000000000000000000000000000;;				status := events[len(events)-1].ResponseStatus
0000000000000000000000000000000000000000;;				if status == nil {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] expected non-nil ResponseStatus in last event", test.desc)
0000000000000000000000000000000000000000;;				} else if int(status.Code) != test.code {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] expected ResponseStatus.Code=%d, got %d", test.desc, test.code, status.Code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
