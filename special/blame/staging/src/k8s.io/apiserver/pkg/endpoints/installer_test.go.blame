0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5024b324ceaa5f278121ac5ddbc0b3ed5cfb77d3;pkg/apiserver/api_installer_test.go[pkg/apiserver/api_installer_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/installer_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsVowel(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			arg  rune
0000000000000000000000000000000000000000;;			want bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "yes",
0000000000000000000000000000000000000000;;				arg:  'E',
0000000000000000000000000000000000000000;;				want: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "no",
0000000000000000000000000000000000000000;;				arg:  'n',
0000000000000000000000000000000000000000;;				want: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			if got := isVowel(tt.arg); got != tt.want {
0000000000000000000000000000000000000000;;				t.Errorf("%q. IsVowel() = %v, want %v", tt.name, got, tt.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetArticleForNoun(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			noun    string
0000000000000000000000000000000000000000;;			padding string
0000000000000000000000000000000000000000;;			want    string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "Frog",
0000000000000000000000000000000000000000;;				padding: " ",
0000000000000000000000000000000000000000;;				want:    " a ",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "frogs",
0000000000000000000000000000000000000000;;				padding: " ",
0000000000000000000000000000000000000000;;				want:    " ",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "apple",
0000000000000000000000000000000000000000;;				padding: "",
0000000000000000000000000000000000000000;;				want:    "an",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "Apples",
0000000000000000000000000000000000000000;;				padding: " ",
0000000000000000000000000000000000000000;;				want:    " ",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "Ingress",
0000000000000000000000000000000000000000;;				padding: " ",
0000000000000000000000000000000000000000;;				want:    " an ",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				noun:    "Class",
0000000000000000000000000000000000000000;;				padding: " ",
0000000000000000000000000000000000000000;;				want:    " a ",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range tests {
0000000000000000000000000000000000000000;;			if got := getArticleForNoun(tt.noun, tt.padding); got != tt.want {
0000000000000000000000000000000000000000;;				t.Errorf("%q. GetArticleForNoun() = %v, want %v", tt.noun, got, tt.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
