0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a08528ac1a8a5ead8743fbd6b5109e2712ad900a;pkg/apiserver/errors.go[pkg/apiserver/errors.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/responsewriters/status.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package responsewriters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// statusError is an object that can be converted into an metav1.Status
0000000000000000000000000000000000000000;;	type statusError interface {
0000000000000000000000000000000000000000;;		Status() metav1.Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrorToAPIStatus converts an error to an metav1.Status object.
0000000000000000000000000000000000000000;;	func ErrorToAPIStatus(err error) *metav1.Status {
0000000000000000000000000000000000000000;;		switch t := err.(type) {
0000000000000000000000000000000000000000;;		case statusError:
0000000000000000000000000000000000000000;;			status := t.Status()
0000000000000000000000000000000000000000;;			if len(status.Status) == 0 {
0000000000000000000000000000000000000000;;				status.Status = metav1.StatusFailure
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if status.Code == 0 {
0000000000000000000000000000000000000000;;				switch status.Status {
0000000000000000000000000000000000000000;;				case metav1.StatusSuccess:
0000000000000000000000000000000000000000;;					status.Code = http.StatusOK
0000000000000000000000000000000000000000;;				case metav1.StatusFailure:
0000000000000000000000000000000000000000;;					status.Code = http.StatusInternalServerError
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			//TODO: check for invalid responses
0000000000000000000000000000000000000000;;			return &status
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			status := http.StatusInternalServerError
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			//TODO: replace me with NewConflictErr
0000000000000000000000000000000000000000;;			case storage.IsConflict(err):
0000000000000000000000000000000000000000;;				status = http.StatusConflict
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Log errors that were not converted to an error status
0000000000000000000000000000000000000000;;			// by REST storage - these typically indicate programmer
0000000000000000000000000000000000000000;;			// error by not using pkg/api/errors, or unexpected failure
0000000000000000000000000000000000000000;;			// cases.
0000000000000000000000000000000000000000;;			runtime.HandleError(fmt.Errorf("apiserver received an error that is not an metav1.Status: %v", err))
0000000000000000000000000000000000000000;;			return &metav1.Status{
0000000000000000000000000000000000000000;;				Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;				Code:    int32(status),
0000000000000000000000000000000000000000;;				Reason:  metav1.StatusReasonUnknown,
0000000000000000000000000000000000000000;;				Message: err.Error(),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
