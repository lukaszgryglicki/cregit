0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
4758c092ffc994084db024935ddb1a284f3be5c5;pkg/apiserver/negotiate_test.go[pkg/apiserver/negotiate_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/handlers/negotiation/negotiate_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package negotiation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// statusError is an object that can be converted into an metav1.Status
0000000000000000000000000000000000000000;;	type statusError interface {
0000000000000000000000000000000000000000;;		Status() metav1.Status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeNegotiater struct {
0000000000000000000000000000000000000000;;		serializer, streamSerializer runtime.Serializer
0000000000000000000000000000000000000000;;		framer                       runtime.Framer
0000000000000000000000000000000000000000;;		types, streamTypes           []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) SupportedMediaTypes() []runtime.SerializerInfo {
0000000000000000000000000000000000000000;;		var out []runtime.SerializerInfo
0000000000000000000000000000000000000000;;		for _, s := range n.types {
0000000000000000000000000000000000000000;;			info := runtime.SerializerInfo{Serializer: n.serializer, MediaType: s, EncodesAsText: true}
0000000000000000000000000000000000000000;;			for _, t := range n.streamTypes {
0000000000000000000000000000000000000000;;				if t == s {
0000000000000000000000000000000000000000;;					info.StreamSerializer = &runtime.StreamSerializerInfo{
0000000000000000000000000000000000000000;;						EncodesAsText: true,
0000000000000000000000000000000000000000;;						Framer:        n.framer,
0000000000000000000000000000000000000000;;						Serializer:    n.streamSerializer,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out = append(out, info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) EncoderForVersion(serializer runtime.Encoder, gv runtime.GroupVersioner) runtime.Encoder {
0000000000000000000000000000000000000000;;		return n.serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) DecoderToVersion(serializer runtime.Decoder, gv runtime.GroupVersioner) runtime.Decoder {
0000000000000000000000000000000000000000;;		return n.serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var fakeCodec = runtime.NewCodec(runtime.NoopEncoder{}, runtime.NoopDecoder{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNegotiate(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			accept      string
0000000000000000000000000000000000000000;;			req         *http.Request
0000000000000000000000000000000000000000;;			ns          *fakeNegotiater
0000000000000000000000000000000000000000;;			serializer  runtime.Serializer
0000000000000000000000000000000000000000;;			contentType string
0000000000000000000000000000000000000000;;			params      map[string]string
0000000000000000000000000000000000000000;;			errFn       func(error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// pick a default
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				req:         &http.Request{},
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "*/*",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "application/*",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "application/json",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "application/json",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json", "application/protobuf"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "application/protobuf",
0000000000000000000000000000000000000000;;				contentType: "application/protobuf",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json", "application/protobuf"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "application/json; pretty=1",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept:      "unrecognized/stuff,application/json; pretty=1",
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// query param triggers pretty
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				req: &http.Request{
0000000000000000000000000000000000000000;;					Header: http.Header{"Accept": []string{"application/json"}},
0000000000000000000000000000000000000000;;					URL:    &url.URL{RawQuery: "pretty=1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// certain user agents trigger pretty
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				req: &http.Request{
0000000000000000000000000000000000000000;;					Header: http.Header{
0000000000000000000000000000000000000000;;						"Accept":     []string{"application/json"},
0000000000000000000000000000000000000000;;						"User-Agent": []string{"curl"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				req: &http.Request{
0000000000000000000000000000000000000000;;					Header: http.Header{
0000000000000000000000000000000000000000;;						"Accept":     []string{"application/json"},
0000000000000000000000000000000000000000;;						"User-Agent": []string{"Wget"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				req: &http.Request{
0000000000000000000000000000000000000000;;					Header: http.Header{
0000000000000000000000000000000000000000;;						"Accept":     []string{"application/json"},
0000000000000000000000000000000000000000;;						"User-Agent": []string{"Mozilla/5.0"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				contentType: "application/json",
0000000000000000000000000000000000000000;;				ns:          &fakeNegotiater{serializer: fakeCodec, types: []string{"application/json"}},
0000000000000000000000000000000000000000;;				serializer:  fakeCodec,
0000000000000000000000000000000000000000;;				params:      map[string]string{"pretty": "1"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// "application" is not a valid media type, so the server will reject the response during
0000000000000000000000000000000000000000;;			// negotiation (the server, in error, has specified an invalid media type)
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept: "application",
0000000000000000000000000000000000000000;;				ns:     &fakeNegotiater{serializer: fakeCodec, types: []string{"application"}},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool {
0000000000000000000000000000000000000000;;					return err.Error() == "only the following media types are accepted: application"
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ns: &fakeNegotiater{},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool {
0000000000000000000000000000000000000000;;					return err.Error() == "only the following media types are accepted: "
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				accept: "*/*",
0000000000000000000000000000000000000000;;				ns:     &fakeNegotiater{},
0000000000000000000000000000000000000000;;				errFn: func(err error) bool {
0000000000000000000000000000000000000000;;					return err.Error() == "only the following media types are accepted: "
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			req := test.req
0000000000000000000000000000000000000000;;			if req == nil {
0000000000000000000000000000000000000000;;				req = &http.Request{Header: http.Header{}}
0000000000000000000000000000000000000000;;				req.Header.Set("Accept", test.accept)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s, err := NegotiateOutputSerializer(req, test.ns)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && test.errFn != nil:
0000000000000000000000000000000000000000;;				t.Errorf("%d: failed: expected error", i)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil && test.errFn == nil:
0000000000000000000000000000000000000000;;				t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil:
0000000000000000000000000000000000000000;;				if !test.errFn(err) {
0000000000000000000000000000000000000000;;					t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				status, ok := err.(statusError)
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("%d: failed, error should be statusError: %v", i, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if status.Status().Status != metav1.StatusFailure || status.Status().Code != http.StatusNotAcceptable {
0000000000000000000000000000000000000000;;					t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.contentType != s.MediaType {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected %s %s", i, test.contentType, s.MediaType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if s.Serializer != test.serializer {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected %s %s", i, test.serializer, s.Serializer)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
