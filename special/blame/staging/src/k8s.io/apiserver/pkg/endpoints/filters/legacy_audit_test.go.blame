0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7c76be717720b98ceba9f572697a551d221acd03;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLegacyConstructResponseWriter(t *testing.T) {
0000000000000000000000000000000000000000;;		actual := legacyDecorateResponseWriter(&simpleResponseWriter{}, ioutil.Discard, "")
0000000000000000000000000000000000000000;;		switch v := actual.(type) {
0000000000000000000000000000000000000000;;		case *legacyAuditResponseWriter:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			t.Errorf("Expected auditResponseWriter, got %v", reflect.TypeOf(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual = legacyDecorateResponseWriter(&fancyResponseWriter{}, ioutil.Discard, "")
0000000000000000000000000000000000000000;;		switch v := actual.(type) {
0000000000000000000000000000000000000000;;		case *fancyLegacyResponseWriterDelegator:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			t.Errorf("Expected fancyResponseWriterDelegator, got %v", reflect.TypeOf(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLegacyAudit(t *testing.T) {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler := WithLegacyAudit(&fakeHTTPHandler{}, &fakeRequestContextMapper{
0000000000000000000000000000000000000000;;			user: &user.DefaultInfo{Name: "admin"},
0000000000000000000000000000000000000000;;		}, &buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "/api/v1/namespaces/default/pods", nil)
0000000000000000000000000000000000000000;;		req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;		handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;		line := strings.Split(strings.TrimSpace(buf.String()), "\n")
0000000000000000000000000000000000000000;;		if len(line) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected amount of lines in audit log: %d", len(line))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		match, err := regexp.MatchString(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" ip="127.0.0.1" method="GET" user="admin" groups="<none>" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods"`, line[0])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error matching first line: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected first line of audit: %s", line[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		match, err = regexp.MatchString(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" response="200"`, line[1])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error matching second line: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected second line of audit: %s", line[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLegacyAuditNoPanicOnNilUser(t *testing.T) {
0000000000000000000000000000000000000000;;		var buf bytes.Buffer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler := WithLegacyAudit(&fakeHTTPHandler{}, &fakeRequestContextMapper{}, &buf)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "/api/v1/namespaces/default/pods", nil)
0000000000000000000000000000000000000000;;		req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;		handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;		line := strings.Split(strings.TrimSpace(buf.String()), "\n")
0000000000000000000000000000000000000000;;		if len(line) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected amount of lines in audit log: %d", len(line))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		match, err := regexp.MatchString(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" ip="127.0.0.1" method="GET" user="<none>" groups="<none>" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods"`, line[0])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error matching first line: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected first line of audit: %s", line[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		match, err = regexp.MatchString(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" response="200"`, line[1])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error matching second line: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !match {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected second line of audit: %s", line[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
