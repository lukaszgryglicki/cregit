0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
70202b76941f978b5b2d3474a176fcf277f5d774;pkg/apiserver/filters/authorization.go[pkg/apiserver/filters/authorization.go][staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithAuthorizationCheck passes all authorized requests on to handler, and returns a forbidden error otherwise.
0000000000000000000000000000000000000000;;	func WithAuthorization(handler http.Handler, requestContextMapper request.RequestContextMapper, a authorizer.Authorizer, s runtime.NegotiatedSerializer) http.Handler {
0000000000000000000000000000000000000000;;		if a == nil {
0000000000000000000000000000000000000000;;			glog.Warningf("Authorization is disabled")
0000000000000000000000000000000000000000;;			return handler
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			ctx, ok := requestContextMapper.Get(req)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				responsewriters.InternalError(w, req, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			attributes, err := GetAuthorizerAttributes(ctx)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				responsewriters.InternalError(w, req, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authorized, reason, err := a.Authorize(attributes)
0000000000000000000000000000000000000000;;			if authorized {
0000000000000000000000000000000000000000;;				handler.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				responsewriters.InternalError(w, req, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Forbidden: %#v, Reason: %q", req.RequestURI, reason)
0000000000000000000000000000000000000000;;			responsewriters.Forbidden(ctx, attributes, w, req, reason, s)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAuthorizerAttributes(ctx request.Context) (authorizer.Attributes, error) {
0000000000000000000000000000000000000000;;		attribs := authorizer.AttributesRecord{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		user, ok := request.UserFrom(ctx)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			attribs.User = user
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestInfo, found := request.RequestInfoFrom(ctx)
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return nil, errors.New("no RequestInfo found in the context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start with common attributes that apply to resource and non-resource requests
0000000000000000000000000000000000000000;;		attribs.ResourceRequest = requestInfo.IsResourceRequest
0000000000000000000000000000000000000000;;		attribs.Path = requestInfo.Path
0000000000000000000000000000000000000000;;		attribs.Verb = requestInfo.Verb
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		attribs.APIGroup = requestInfo.APIGroup
0000000000000000000000000000000000000000;;		attribs.APIVersion = requestInfo.APIVersion
0000000000000000000000000000000000000000;;		attribs.Resource = requestInfo.Resource
0000000000000000000000000000000000000000;;		attribs.Subresource = requestInfo.Subresource
0000000000000000000000000000000000000000;;		attribs.Namespace = requestInfo.Namespace
0000000000000000000000000000000000000000;;		attribs.Name = requestInfo.Name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &attribs, nil
0000000000000000000000000000000000000000;;	}
