0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5ad25b94f6b622ff688d168460fd582bc5447bca;pkg/apiserver/audit/audit_test.go[pkg/apiserver/audit/audit_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/filters/audit_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pborman/uuid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		auditv1alpha1 "k8s.io/apiserver/pkg/apis/audit/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/audit"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/audit/policy"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		pluginlog "k8s.io/apiserver/plugin/pkg/audit/log"
0000000000000000000000000000000000000000;;		// import to call webhook's init() function to register audit.Event to schema
0000000000000000000000000000000000000000;;		_ "k8s.io/apiserver/plugin/pkg/audit/webhook"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeAuditSink struct {
0000000000000000000000000000000000000000;;		lock   sync.Mutex
0000000000000000000000000000000000000000;;		events []*auditinternal.Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeAuditSink) ProcessEvents(evs ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;		s.events = append(s.events, evs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeAuditSink) Events() []*auditinternal.Event {
0000000000000000000000000000000000000000;;		s.lock.Lock()
0000000000000000000000000000000000000000;;		defer s.lock.Unlock()
0000000000000000000000000000000000000000;;		return append([]*auditinternal.Event{}, s.events...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *fakeAuditSink) Pop(timeout time.Duration) (*auditinternal.Event, error) {
0000000000000000000000000000000000000000;;		var result *auditinternal.Event
0000000000000000000000000000000000000000;;		err := wait.Poll(50*time.Millisecond, wait.ForeverTestTimeout, wait.ConditionFunc(func() (done bool, err error) {
0000000000000000000000000000000000000000;;			s.lock.Lock()
0000000000000000000000000000000000000000;;			defer s.lock.Unlock()
0000000000000000000000000000000000000000;;			if len(s.events) == 0 {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			result = s.events[0]
0000000000000000000000000000000000000000;;			s.events = s.events[1:]
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		return result, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type simpleResponseWriter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ http.ResponseWriter = &simpleResponseWriter{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*simpleResponseWriter) WriteHeader(code int)         {}
0000000000000000000000000000000000000000;;	func (*simpleResponseWriter) Write(bs []byte) (int, error) { return len(bs), nil }
0000000000000000000000000000000000000000;;	func (*simpleResponseWriter) Header() http.Header          { return http.Header{} }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fancyResponseWriter struct {
0000000000000000000000000000000000000000;;		simpleResponseWriter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fancyResponseWriter) CloseNotify() <-chan bool { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fancyResponseWriter) Flush() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fancyResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) { return nil, nil, nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConstructResponseWriter(t *testing.T) {
0000000000000000000000000000000000000000;;		actual := decorateResponseWriter(&simpleResponseWriter{}, nil, nil)
0000000000000000000000000000000000000000;;		switch v := actual.(type) {
0000000000000000000000000000000000000000;;		case *auditResponseWriter:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			t.Errorf("Expected auditResponseWriter, got %v", reflect.TypeOf(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual = decorateResponseWriter(&fancyResponseWriter{}, nil, nil)
0000000000000000000000000000000000000000;;		switch v := actual.(type) {
0000000000000000000000000000000000000000;;		case *fancyResponseWriterDelegator:
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			t.Errorf("Expected fancyResponseWriterDelegator, got %v", reflect.TypeOf(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecorateResponseWriterWithoutChannel(t *testing.T) {
0000000000000000000000000000000000000000;;		ev := &auditinternal.Event{}
0000000000000000000000000000000000000000;;		actual := decorateResponseWriter(&simpleResponseWriter{}, ev, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write status. This will not block because firstEventSentCh is nil
0000000000000000000000000000000000000000;;		actual.WriteHeader(42)
0000000000000000000000000000000000000000;;		if ev.ResponseStatus == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected ResponseStatus to be non-nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ev.ResponseStatus.Code != 42 {
0000000000000000000000000000000000000000;;			t.Errorf("expected status code 42, got %d", ev.ResponseStatus.Code)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecorateResponseWriterWithImplicitWrite(t *testing.T) {
0000000000000000000000000000000000000000;;		ev := &auditinternal.Event{}
0000000000000000000000000000000000000000;;		actual := decorateResponseWriter(&simpleResponseWriter{}, ev, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write status. This will not block because firstEventSentCh is nil
0000000000000000000000000000000000000000;;		actual.Write([]byte("foo"))
0000000000000000000000000000000000000000;;		if ev.ResponseStatus == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected ResponseStatus to be non-nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ev.ResponseStatus.Code != 200 {
0000000000000000000000000000000000000000;;			t.Errorf("expected status code 200, got %d", ev.ResponseStatus.Code)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecorateResponseWriterChannel(t *testing.T) {
0000000000000000000000000000000000000000;;		sink := &fakeAuditSink{}
0000000000000000000000000000000000000000;;		ev := &auditinternal.Event{}
0000000000000000000000000000000000000000;;		actual := decorateResponseWriter(&simpleResponseWriter{}, ev, sink)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		done := make(chan struct{})
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			t.Log("Writing status code 42")
0000000000000000000000000000000000000000;;			actual.WriteHeader(42)
0000000000000000000000000000000000000000;;			t.Log("Finished writing status code 42")
0000000000000000000000000000000000000000;;			close(done)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actual.Write([]byte("foo"))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// sleep some time to give write the possibility to do wrong stuff
0000000000000000000000000000000000000000;;		time.Sleep(100 * time.Millisecond)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t.Log("Waiting for event in the channel")
0000000000000000000000000000000000000000;;		ev1, err := sink.Pop(time.Second)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal("Timeout waiting for events")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("Seen event with status %v", ev1.ResponseStatus)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ev != ev1 {
0000000000000000000000000000000000000000;;			t.Fatalf("ev1 and ev must be equal")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		<-done
0000000000000000000000000000000000000000;;		t.Log("Seen the go routine finished")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// write again
0000000000000000000000000000000000000000;;		_, err = actual.Write([]byte("foo"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeHTTPHandler struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fakeHTTPHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		w.WriteHeader(200)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuditLegacy(t *testing.T) {
0000000000000000000000000000000000000000;;		writingShortRunningPrefix := func(stage string) string {
0000000000000000000000000000000000000000;;			return fmt.Sprintf(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" stage="%s" ip="127.0.0.1" method="update" user="admin" groups="<none>" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods/foo"`, stage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		readOnlyShortRunningPrefix := func(stage string) string {
0000000000000000000000000000000000000000;;			return fmt.Sprintf(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" stage="%s" ip="127.0.0.1" method="get" user="admin" groups="<none>" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods/foo"`, stage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		longRunningPrefix := func(stage string) string {
0000000000000000000000000000000000000000;;			return fmt.Sprintf(`[\d\:\-\.\+TZ]+ AUDIT: id="[\w-]+" stage="%s" ip="127.0.0.1" method="watch" user="admin" groups="<none>" as="<self>" asgroups="<lookup>" namespace="default" uri="/api/v1/namespaces/default/pods\?watch=true"`, stage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		shortRunningPath := "/api/v1/namespaces/default/pods/foo"
0000000000000000000000000000000000000000;;		longRunningPath := "/api/v1/namespaces/default/pods?watch=true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delay := 500 * time.Millisecond
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			desc     string
0000000000000000000000000000000000000000;;			path     string
0000000000000000000000000000000000000000;;			verb     string
0000000000000000000000000000000000000000;;			handler  func(http.ResponseWriter, *http.Request)
0000000000000000000000000000000000000000;;			expected []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// short running requests with read-only verb
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"read-only empty",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					readOnlyShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					readOnlyShortRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"read-only panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					readOnlyShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					readOnlyShortRunningPrefix(auditinternal.StagePanic) + ` response="500"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// short running request with non-read-only verb
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing empty",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing sleep",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing 403+write",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageResponseComplete) + ` response="403"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StagePanic) + ` response="500"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing write+panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					writingShortRunningPrefix(auditinternal.StagePanic) + ` response="500"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// long running requests
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="200"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"sleep longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="200"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"sleep+403 longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="403"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseComplete) + ` response="403"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"write longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="200"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseComplete) + ` response="200"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"403+write longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="403"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseComplete) + ` response="403"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"panic longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StagePanic) + ` response="500"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"write+panic longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]string{
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageRequestReceived) + ` response="<deferred>"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StageResponseStarted) + ` response="200"`,
0000000000000000000000000000000000000000;;					longRunningPrefix(auditinternal.StagePanic) + ` response="500"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			var buf bytes.Buffer
0000000000000000000000000000000000000000;;			backend := pluginlog.NewBackend(&buf, pluginlog.FormatLegacy)
0000000000000000000000000000000000000000;;			policyChecker := policy.FakeChecker(auditinternal.LevelRequestResponse)
0000000000000000000000000000000000000000;;			handler := WithAudit(http.HandlerFunc(test.handler), &fakeRequestContextMapper{
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{Name: "admin"},
0000000000000000000000000000000000000000;;			}, backend, policyChecker, func(r *http.Request, ri *request.RequestInfo) bool {
0000000000000000000000000000000000000000;;				// simplified long-running check
0000000000000000000000000000000000000000;;				return ri.Verb == "watch"
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(test.verb, test.path, nil)
0000000000000000000000000000000000000000;;			req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				defer func() {
0000000000000000000000000000000000000000;;					recover()
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;				handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			t.Logf("[%s] audit log: %v", test.desc, buf.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			line := strings.Split(strings.TrimSpace(buf.String()), "\n")
0000000000000000000000000000000000000000;;			if len(line) != len(test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Unexpected amount of lines in audit log: %d", test.desc, len(line))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i, re := range test.expected {
0000000000000000000000000000000000000000;;				match, err := regexp.MatchString(re, line[i])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected error matching line %d: %v", test.desc, i, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !match {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected line %d of audit: %s", test.desc, i, line[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuditJson(t *testing.T) {
0000000000000000000000000000000000000000;;		shortRunningPath := "/api/v1/namespaces/default/pods/foo"
0000000000000000000000000000000000000000;;		longRunningPath := "/api/v1/namespaces/default/pods?watch=true"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delay := 500 * time.Millisecond
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range []struct {
0000000000000000000000000000000000000000;;			desc     string
0000000000000000000000000000000000000000;;			path     string
0000000000000000000000000000000000000000;;			verb     string
0000000000000000000000000000000000000000;;			auditID  string
0000000000000000000000000000000000000000;;			handler  func(http.ResponseWriter, *http.Request)
0000000000000000000000000000000000000000;;			expected []auditv1alpha1.Event
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// short running requests with read-only verb
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"read-only empty",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "get",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "get",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"short running with auditID",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				uuid.NewRandom().String(),
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "get",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "get",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"read-only panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "get",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StagePanic,
0000000000000000000000000000000000000000;;						Verb:           "get",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 500},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// short running request with non-read-only verb
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing empty",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "update",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "update",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing sleep",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "update",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "update",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing 403+write",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "update",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "update",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 403},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "update",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StagePanic,
0000000000000000000000000000000000000000;;						Verb:           "update",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 500},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"writing write+panic",
0000000000000000000000000000000000000000;;				shortRunningPath,
0000000000000000000000000000000000000000;;				"PUT",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "update",
0000000000000000000000000000000000000000;;						RequestURI: shortRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StagePanic,
0000000000000000000000000000000000000000;;						Verb:           "update",
0000000000000000000000000000000000000000;;						RequestURI:     shortRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 500},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// long running requests
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"empty longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				uuid.NewRandom().String(),
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"sleep longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"sleep+403 longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					time.Sleep(delay)
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 403},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 403},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"write longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"403+write longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.WriteHeader(403)
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 403},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseComplete,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 403},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"panic longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StagePanic,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 500},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"write+panic longrunning",
0000000000000000000000000000000000000000;;				longRunningPath,
0000000000000000000000000000000000000000;;				"GET",
0000000000000000000000000000000000000000;;				"",
0000000000000000000000000000000000000000;;				func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write([]byte("foo"))
0000000000000000000000000000000000000000;;					panic("kaboom")
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				[]auditv1alpha1.Event{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:      auditinternal.StageRequestReceived,
0000000000000000000000000000000000000000;;						Verb:       "watch",
0000000000000000000000000000000000000000;;						RequestURI: longRunningPath,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StageResponseStarted,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 200},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Stage:          auditinternal.StagePanic,
0000000000000000000000000000000000000000;;						Verb:           "watch",
0000000000000000000000000000000000000000;;						RequestURI:     longRunningPath,
0000000000000000000000000000000000000000;;						ResponseStatus: &metav1.Status{Code: 500},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			var buf bytes.Buffer
0000000000000000000000000000000000000000;;			backend := pluginlog.NewBackend(&buf, pluginlog.FormatJson)
0000000000000000000000000000000000000000;;			policyChecker := policy.FakeChecker(auditinternal.LevelRequestResponse)
0000000000000000000000000000000000000000;;			handler := WithAudit(http.HandlerFunc(test.handler), &fakeRequestContextMapper{
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{Name: "admin"},
0000000000000000000000000000000000000000;;			}, backend, policyChecker, func(r *http.Request, ri *request.RequestInfo) bool {
0000000000000000000000000000000000000000;;				// simplified long-running check
0000000000000000000000000000000000000000;;				return ri.Verb == "watch"
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(test.verb, test.path, nil)
0000000000000000000000000000000000000000;;			if test.auditID != "" {
0000000000000000000000000000000000000000;;				req.Header.Add("Audit-ID", test.auditID)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				defer func() {
0000000000000000000000000000000000000000;;					recover()
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;				handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			t.Logf("[%s] audit log: %v", test.desc, buf.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			line := strings.Split(strings.TrimSpace(buf.String()), "\n")
0000000000000000000000000000000000000000;;			if len(line) != len(test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("[%s] Unexpected amount of lines in audit log: %d", test.desc, len(line))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			expectedID := types.UID("")
0000000000000000000000000000000000000000;;			for i, expect := range test.expected {
0000000000000000000000000000000000000000;;				// decode events back to check json elements.
0000000000000000000000000000000000000000;;				event := &auditv1alpha1.Event{}
0000000000000000000000000000000000000000;;				decoder := audit.Codecs.UniversalDecoder(auditv1alpha1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;				if err := runtime.DecodeInto(decoder, []byte(line[i]), event); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("failed decoding line %s: %v", line[i], err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if "admin" != event.User.Username {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected username: %s", test.desc, event.User.Username)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if event.Stage != expect.Stage {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected Stage: %s", test.desc, event.Stage)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if event.Verb != expect.Verb {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected Verb: %s", test.desc, event.Verb)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if event.RequestURI != expect.RequestURI {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected RequestURI: %s", test.desc, event.RequestURI)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if test.auditID != "" && event.AuditID != types.UID(test.auditID) {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected AuditID in audit event, AuditID should be the same with Audit-ID http header", test.desc)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if expectedID == types.UID("") {
0000000000000000000000000000000000000000;;					expectedID = event.AuditID
0000000000000000000000000000000000000000;;				} else if expectedID != event.AuditID {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Audits for one request should share the same AuditID, %s differs from %s", test.desc, expectedID, event.AuditID)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if (event.ResponseStatus == nil) != (expect.ResponseStatus == nil) {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected ResponseStatus: %v", test.desc, event.ResponseStatus)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if (event.ResponseStatus != nil) && (event.ResponseStatus.Code != expect.ResponseStatus.Code) {
0000000000000000000000000000000000000000;;					t.Errorf("[%s] Unexpected status code : %d", test.desc, event.ResponseStatus.Code)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeRequestContextMapper struct {
0000000000000000000000000000000000000000;;		user *user.DefaultInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeRequestContextMapper) Get(req *http.Request) (request.Context, bool) {
0000000000000000000000000000000000000000;;		ctx := request.NewContext()
0000000000000000000000000000000000000000;;		if m.user != nil {
0000000000000000000000000000000000000000;;			ctx = request.WithUser(ctx, m.user)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resolver := newTestRequestInfoResolver()
0000000000000000000000000000000000000000;;		info, err := resolver.NewRequestInfo(req)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			ctx = request.WithRequestInfo(ctx, info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ctx, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fakeRequestContextMapper) Update(req *http.Request, context request.Context) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuditNoPanicOnNilUser(t *testing.T) {
0000000000000000000000000000000000000000;;		policyChecker := policy.FakeChecker(auditinternal.LevelRequestResponse)
0000000000000000000000000000000000000000;;		handler := WithAudit(&fakeHTTPHandler{}, &fakeRequestContextMapper{}, &fakeAuditSink{}, policyChecker, nil)
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "/api/v1/namespaces/default/pods", nil)
0000000000000000000000000000000000000000;;		req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;		handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuditLevelNone(t *testing.T) {
0000000000000000000000000000000000000000;;		sink := &fakeAuditSink{}
0000000000000000000000000000000000000000;;		var handler http.Handler
0000000000000000000000000000000000000000;;		handler = http.HandlerFunc(func(w http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(200)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		policyChecker := policy.FakeChecker(auditinternal.LevelNone)
0000000000000000000000000000000000000000;;		handler = WithAudit(handler, &fakeRequestContextMapper{
0000000000000000000000000000000000000000;;			user: &user.DefaultInfo{Name: "admin"},
0000000000000000000000000000000000000000;;		}, sink, policyChecker, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", "/api/v1/namespaces/default/pods", nil)
0000000000000000000000000000000000000000;;		req.RemoteAddr = "127.0.0.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ServeHTTP(httptest.NewRecorder(), req)
0000000000000000000000000000000000000000;;		if len(sink.events) > 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Generated events, but should not have: %#v", sink.events)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
