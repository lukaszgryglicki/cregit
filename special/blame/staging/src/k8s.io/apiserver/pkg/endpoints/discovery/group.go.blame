0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
06699f6bbe14a867aaaecd86af05add5cf06668e;pkg/apiserver/handlers/discovery.go[pkg/apiserver/handlers/discovery.go][staging/src/k8s.io/apiserver/pkg/endpoints/discovery/group.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/negotiation"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIGroupHandler creates a webservice serving the supported versions, preferred version, and name
0000000000000000000000000000000000000000;;	// of a group. E.g., such a web service will be registered at /apis/extensions.
0000000000000000000000000000000000000000;;	type APIGroupHandler struct {
0000000000000000000000000000000000000000;;		serializer    runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		contextMapper request.RequestContextMapper
0000000000000000000000000000000000000000;;		group         metav1.APIGroup
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAPIGroupHandler(serializer runtime.NegotiatedSerializer, group metav1.APIGroup, contextMapper request.RequestContextMapper) *APIGroupHandler {
0000000000000000000000000000000000000000;;		if keepUnversioned(group.Name) {
0000000000000000000000000000000000000000;;			// Because in release 1.1, /apis/extensions returns response with empty
0000000000000000000000000000000000000000;;			// APIVersion, we use stripVersionNegotiatedSerializer to keep the
0000000000000000000000000000000000000000;;			// response backwards compatible.
0000000000000000000000000000000000000000;;			serializer = stripVersionNegotiatedSerializer{serializer}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &APIGroupHandler{
0000000000000000000000000000000000000000;;			serializer:    serializer,
0000000000000000000000000000000000000000;;			contextMapper: contextMapper,
0000000000000000000000000000000000000000;;			group:         group,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *APIGroupHandler) WebService() *restful.WebService {
0000000000000000000000000000000000000000;;		mediaTypes, _ := negotiation.MediaTypesForSerializer(s.serializer)
0000000000000000000000000000000000000000;;		ws := new(restful.WebService)
0000000000000000000000000000000000000000;;		ws.Path(APIGroupPrefix + "/" + s.group.Name)
0000000000000000000000000000000000000000;;		ws.Doc("get information of a group")
0000000000000000000000000000000000000000;;		ws.Route(ws.GET("/").To(s.handle).
0000000000000000000000000000000000000000;;			Doc("get information of a group").
0000000000000000000000000000000000000000;;			Operation("getAPIGroup").
0000000000000000000000000000000000000000;;			Produces(mediaTypes...).
0000000000000000000000000000000000000000;;			Consumes(mediaTypes...).
0000000000000000000000000000000000000000;;			Writes(metav1.APIGroup{}))
0000000000000000000000000000000000000000;;		return ws
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handle returns a handler which will return the api.GroupAndVersion of the group.
0000000000000000000000000000000000000000;;	func (s *APIGroupHandler) handle(req *restful.Request, resp *restful.Response) {
0000000000000000000000000000000000000000;;		s.ServeHTTP(resp.ResponseWriter, req.Request)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *APIGroupHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		ctx, ok := s.contextMapper.Get(req)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			responsewriters.InternalError(w, req, errors.New("no context found for request"))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		responsewriters.WriteObjectNegotiated(ctx, s.serializer, schema.GroupVersion{}, w, req, http.StatusOK, &s.group)
0000000000000000000000000000000000000000;;	}
