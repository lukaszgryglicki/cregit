0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a7aecb35cfc765043a252f61f05db44f40102637;pkg/apiserver/handlers_test.go[pkg/apiserver/handlers_test.go][staging/src/k8s.io/apiserver/pkg/endpoints/request/requestinfo_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package request
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeRL bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fakeRL) Stop()             {}
0000000000000000000000000000000000000000;;	func (f fakeRL) TryAccept() bool { return bool(f) }
0000000000000000000000000000000000000000;;	func (f fakeRL) Accept()         {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetAPIRequestInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		namespaceAll := "" // TODO(sttts): solve import cycle when using metav1.NamespaceAll
0000000000000000000000000000000000000000;;		successCases := []struct {
0000000000000000000000000000000000000000;;			method              string
0000000000000000000000000000000000000000;;			url                 string
0000000000000000000000000000000000000000;;			expectedVerb        string
0000000000000000000000000000000000000000;;			expectedAPIPrefix   string
0000000000000000000000000000000000000000;;			expectedAPIGroup    string
0000000000000000000000000000000000000000;;			expectedAPIVersion  string
0000000000000000000000000000000000000000;;			expectedNamespace   string
0000000000000000000000000000000000000000;;			expectedResource    string
0000000000000000000000000000000000000000;;			expectedSubresource string
0000000000000000000000000000000000000000;;			expectedName        string
0000000000000000000000000000000000000000;;			expectedParts       []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// resource paths
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces", "list", "api", "", "v1", "", "namespaces", "", "", []string{"namespaces"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other", "get", "api", "", "v1", "other", "namespaces", "", "other", []string{"namespaces", "other"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods", "list", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods/foo", "get", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"HEAD", "/api/v1/namespaces/other/pods/foo", "get", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/pods", "list", "api", "", "v1", namespaceAll, "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"HEAD", "/api/v1/pods", "list", "api", "", "v1", namespaceAll, "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods/foo", "get", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods", "list", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// special verbs
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/proxy/namespaces/other/pods/foo", "proxy", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/proxy/namespaces/other/pods/foo/subpath/not/a/subresource", "proxy", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo", "subpath", "not", "a", "subresource"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/watch/pods", "watch", "api", "", "v1", namespaceAll, "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/pods?watch=true", "watch", "api", "", "v1", namespaceAll, "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/pods?watch=false", "list", "api", "", "v1", namespaceAll, "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/watch/namespaces/other/pods", "watch", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods?watch=1", "watch", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods?watch=0", "list", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// subresource identification
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods/foo/status", "get", "api", "", "v1", "other", "pods", "status", "foo", []string{"pods", "foo", "status"}},
0000000000000000000000000000000000000000;;			{"GET", "/api/v1/namespaces/other/pods/foo/proxy/subpath", "get", "api", "", "v1", "other", "pods", "proxy", "foo", []string{"pods", "foo", "proxy", "subpath"}},
0000000000000000000000000000000000000000;;			{"PUT", "/api/v1/namespaces/other/finalize", "update", "api", "", "v1", "other", "namespaces", "finalize", "other", []string{"namespaces", "other", "finalize"}},
0000000000000000000000000000000000000000;;			{"PUT", "/api/v1/namespaces/other/status", "update", "api", "", "v1", "other", "namespaces", "status", "other", []string{"namespaces", "other", "status"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// verb identification
0000000000000000000000000000000000000000;;			{"PATCH", "/api/v1/namespaces/other/pods/foo", "patch", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"DELETE", "/api/v1/namespaces/other/pods/foo", "delete", "api", "", "v1", "other", "pods", "", "foo", []string{"pods", "foo"}},
0000000000000000000000000000000000000000;;			{"POST", "/api/v1/namespaces/other/pods", "create", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// deletecollection verb identification
0000000000000000000000000000000000000000;;			{"DELETE", "/api/v1/nodes", "deletecollection", "api", "", "v1", "", "nodes", "", "", []string{"nodes"}},
0000000000000000000000000000000000000000;;			{"DELETE", "/api/v1/namespaces", "deletecollection", "api", "", "v1", "", "namespaces", "", "", []string{"namespaces"}},
0000000000000000000000000000000000000000;;			{"DELETE", "/api/v1/namespaces/other/pods", "deletecollection", "api", "", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;			{"DELETE", "/apis/extensions/v1/namespaces/other/pods", "deletecollection", "api", "extensions", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// api group identification
0000000000000000000000000000000000000000;;			{"POST", "/apis/extensions/v1/namespaces/other/pods", "create", "api", "extensions", "v1", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// api version identification
0000000000000000000000000000000000000000;;			{"POST", "/apis/extensions/v1beta3/namespaces/other/pods", "create", "api", "extensions", "v1beta3", "other", "pods", "", "", []string{"pods"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resolver := newTestRequestInfoResolver()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, successCase := range successCases {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest(successCase.method, successCase.url, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apiRequestInfo, err := resolver.NewRequestInfo(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error for url: %s %v", successCase.url, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiRequestInfo.IsResourceRequest {
0000000000000000000000000000000000000000;;				t.Errorf("Expected resource request")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedVerb != apiRequestInfo.Verb {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected verb for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedVerb, apiRequestInfo.Verb)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedAPIVersion != apiRequestInfo.APIVersion {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected apiVersion for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedAPIVersion, apiRequestInfo.APIVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedNamespace != apiRequestInfo.Namespace {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected namespace for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedNamespace, apiRequestInfo.Namespace)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedResource != apiRequestInfo.Resource {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected resource for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedResource, apiRequestInfo.Resource)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedSubresource != apiRequestInfo.Subresource {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected resource for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedSubresource, apiRequestInfo.Subresource)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if successCase.expectedName != apiRequestInfo.Name {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected name for url: %s, expected: %s, actual: %s", successCase.url, successCase.expectedName, apiRequestInfo.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(successCase.expectedParts, apiRequestInfo.Parts) {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected parts for url: %s, expected: %v, actual: %v", successCase.url, successCase.expectedParts, apiRequestInfo.Parts)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := map[string]string{
0000000000000000000000000000000000000000;;			"no resource path":            "/",
0000000000000000000000000000000000000000;;			"just apiversion":             "/api/version/",
0000000000000000000000000000000000000000;;			"just prefix, group, version": "/apis/group/version/",
0000000000000000000000000000000000000000;;			"apiversion with no resource": "/api/version/",
0000000000000000000000000000000000000000;;			"bad prefix":                  "/badprefix/version/resource",
0000000000000000000000000000000000000000;;			"missing api group":           "/apis/version/resource",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range errorCases {
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", v, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			apiRequestInfo, err := resolver.NewRequestInfo(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Unexpected error %v", k, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if apiRequestInfo.IsResourceRequest {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected non-resource request", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetNonAPIRequestInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			url      string
0000000000000000000000000000000000000000;;			expected bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"simple groupless":  {"/api/version/resource", true},
0000000000000000000000000000000000000000;;			"simple group":      {"/apis/group/version/resource/name/subresource", true},
0000000000000000000000000000000000000000;;			"more steps":        {"/api/version/resource/name/subresource", true},
0000000000000000000000000000000000000000;;			"group list":        {"/apis/batch/v1/job", true},
0000000000000000000000000000000000000000;;			"group get":         {"/apis/batch/v1/job/foo", true},
0000000000000000000000000000000000000000;;			"group subresource": {"/apis/batch/v1/job/foo/scale", true},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"bad root":                     {"/not-api/version/resource", false},
0000000000000000000000000000000000000000;;			"group without enough steps":   {"/apis/extensions/v1beta1", false},
0000000000000000000000000000000000000000;;			"group without enough steps 2": {"/apis/extensions/v1beta1/", false},
0000000000000000000000000000000000000000;;			"not enough steps":             {"/api/version", false},
0000000000000000000000000000000000000000;;			"one step":                     {"/api", false},
0000000000000000000000000000000000000000;;			"zero step":                    {"/", false},
0000000000000000000000000000000000000000;;			"empty":                        {"", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resolver := newTestRequestInfoResolver()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for testName, tc := range tests {
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest("GET", tc.url, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apiRequestInfo, err := resolver.NewRequestInfo(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Unexpected error %v", testName, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expected, apiRequestInfo.IsResourceRequest; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, actual %v", testName, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestRequestInfoResolver() *RequestInfoFactory {
0000000000000000000000000000000000000000;;		return &RequestInfoFactory{
0000000000000000000000000000000000000000;;			APIPrefixes:          sets.NewString("api", "apis"),
0000000000000000000000000000000000000000;;			GrouplessAPIPrefixes: sets.NewString("api"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
