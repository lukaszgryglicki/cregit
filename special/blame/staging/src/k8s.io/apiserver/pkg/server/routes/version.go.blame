0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d5f6ddbe9785fd36f3e4fb0345d7a924ad12898e;pkg/genericapiserver/routes/version.go[pkg/genericapiserver/routes/version.go][staging/src/k8s.io/apiserver/pkg/server/routes/version.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package routes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version provides a webservice with version information.
0000000000000000000000000000000000000000;;	type Version struct {
0000000000000000000000000000000000000000;;		Version *version.Info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install registers the APIServer's `/version` handler.
0000000000000000000000000000000000000000;;	func (v Version) Install(c *restful.Container) {
0000000000000000000000000000000000000000;;		if v.Version == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set up a service to return the git code version.
0000000000000000000000000000000000000000;;		versionWS := new(restful.WebService)
0000000000000000000000000000000000000000;;		versionWS.Path("/version")
0000000000000000000000000000000000000000;;		versionWS.Doc("git code version from which this is built")
0000000000000000000000000000000000000000;;		versionWS.Route(
0000000000000000000000000000000000000000;;			versionWS.GET("/").To(v.handleVersion).
0000000000000000000000000000000000000000;;				Doc("get the code version").
0000000000000000000000000000000000000000;;				Operation("getCodeVersion").
0000000000000000000000000000000000000000;;				Produces(restful.MIME_JSON).
0000000000000000000000000000000000000000;;				Consumes(restful.MIME_JSON).
0000000000000000000000000000000000000000;;				Writes(version.Info{}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Add(versionWS)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleVersion writes the server's version information.
0000000000000000000000000000000000000000;;	func (v Version) handleVersion(req *restful.Request, resp *restful.Response) {
0000000000000000000000000000000000000000;;		responsewriters.WriteRawJSON(http.StatusOK, *v.Version, resp.ResponseWriter)
0000000000000000000000000000000000000000;;	}
