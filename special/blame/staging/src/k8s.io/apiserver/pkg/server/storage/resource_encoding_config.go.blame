0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
829d9382ef92e755aad1a7c5c1387462687119c6;pkg/genericapiserver/resource_encoding_config.go[pkg/genericapiserver/resource_encoding_config.go][staging/src/k8s.io/apiserver/pkg/server/storage/resource_encoding_config.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceEncodingConfig interface {
0000000000000000000000000000000000000000;;		// StorageEncoding returns the serialization format for the resource.
0000000000000000000000000000000000000000;;		// TODO this should actually return a GroupVersionKind since you can logically have multiple "matching" Kinds
0000000000000000000000000000000000000000;;		// For now, it returns just the GroupVersion for consistency with old behavior
0000000000000000000000000000000000000000;;		StorageEncodingFor(schema.GroupResource) (schema.GroupVersion, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InMemoryEncodingFor returns the groupVersion for the in memory representation the storage should convert to.
0000000000000000000000000000000000000000;;		InMemoryEncodingFor(schema.GroupResource) (schema.GroupVersion, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefaultResourceEncodingConfig struct {
0000000000000000000000000000000000000000;;		groups   map[string]*GroupResourceEncodingConfig
0000000000000000000000000000000000000000;;		registry *registered.APIRegistrationManager
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupResourceEncodingConfig struct {
0000000000000000000000000000000000000000;;		DefaultExternalEncoding   schema.GroupVersion
0000000000000000000000000000000000000000;;		ExternalResourceEncodings map[string]schema.GroupVersion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultInternalEncoding   schema.GroupVersion
0000000000000000000000000000000000000000;;		InternalResourceEncodings map[string]schema.GroupVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ResourceEncodingConfig = &DefaultResourceEncodingConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDefaultResourceEncodingConfig(registry *registered.APIRegistrationManager) *DefaultResourceEncodingConfig {
0000000000000000000000000000000000000000;;		return &DefaultResourceEncodingConfig{groups: map[string]*GroupResourceEncodingConfig{}, registry: registry}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGroupResourceEncodingConfig(defaultEncoding, defaultInternalVersion schema.GroupVersion) *GroupResourceEncodingConfig {
0000000000000000000000000000000000000000;;		return &GroupResourceEncodingConfig{
0000000000000000000000000000000000000000;;			DefaultExternalEncoding: defaultEncoding, ExternalResourceEncodings: map[string]schema.GroupVersion{},
0000000000000000000000000000000000000000;;			DefaultInternalEncoding: defaultInternalVersion, InternalResourceEncodings: map[string]schema.GroupVersion{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *DefaultResourceEncodingConfig) SetVersionEncoding(group string, externalEncodingVersion, internalVersion schema.GroupVersion) {
0000000000000000000000000000000000000000;;		_, groupExists := o.groups[group]
0000000000000000000000000000000000000000;;		if !groupExists {
0000000000000000000000000000000000000000;;			o.groups[group] = newGroupResourceEncodingConfig(externalEncodingVersion, internalVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.groups[group].DefaultExternalEncoding = externalEncodingVersion
0000000000000000000000000000000000000000;;		o.groups[group].DefaultInternalEncoding = internalVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *DefaultResourceEncodingConfig) SetResourceEncoding(resourceBeingStored schema.GroupResource, externalEncodingVersion, internalVersion schema.GroupVersion) {
0000000000000000000000000000000000000000;;		group := resourceBeingStored.Group
0000000000000000000000000000000000000000;;		_, groupExists := o.groups[group]
0000000000000000000000000000000000000000;;		if !groupExists {
0000000000000000000000000000000000000000;;			o.groups[group] = newGroupResourceEncodingConfig(externalEncodingVersion, internalVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		o.groups[group].ExternalResourceEncodings[resourceBeingStored.Resource] = externalEncodingVersion
0000000000000000000000000000000000000000;;		o.groups[group].InternalResourceEncodings[resourceBeingStored.Resource] = internalVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *DefaultResourceEncodingConfig) StorageEncodingFor(resource schema.GroupResource) (schema.GroupVersion, error) {
0000000000000000000000000000000000000000;;		groupMeta, err := o.registry.Group(resource.Group)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return schema.GroupVersion{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupEncoding, groupExists := o.groups[resource.Group]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !groupExists {
0000000000000000000000000000000000000000;;			// return the most preferred external version for the group
0000000000000000000000000000000000000000;;			return groupMeta.GroupVersion, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceOverride, resourceExists := groupEncoding.ExternalResourceEncodings[resource.Resource]
0000000000000000000000000000000000000000;;		if !resourceExists {
0000000000000000000000000000000000000000;;			return groupEncoding.DefaultExternalEncoding, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resourceOverride, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *DefaultResourceEncodingConfig) InMemoryEncodingFor(resource schema.GroupResource) (schema.GroupVersion, error) {
0000000000000000000000000000000000000000;;		if _, err := o.registry.Group(resource.Group); err != nil {
0000000000000000000000000000000000000000;;			return schema.GroupVersion{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupEncoding, groupExists := o.groups[resource.Group]
0000000000000000000000000000000000000000;;		if !groupExists {
0000000000000000000000000000000000000000;;			return schema.GroupVersion{Group: resource.Group, Version: runtime.APIVersionInternal}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceOverride, resourceExists := groupEncoding.InternalResourceEncodings[resource.Resource]
0000000000000000000000000000000000000000;;		if !resourceExists {
0000000000000000000000000000000000000000;;			return groupEncoding.DefaultInternalEncoding, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resourceOverride, nil
0000000000000000000000000000000000000000;;	}
