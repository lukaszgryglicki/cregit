0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
49fc080c7ab349e740f17b88dfec514c6a495c45;pkg/genericapiserver/openapi/openapi_test.go[pkg/genericapiserver/openapi/openapi_test.go][staging/src/k8s.io/apiserver/pkg/server/openapi/openapi_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/openapi"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setUp is a convenience function for setting up for (most) tests.
0000000000000000000000000000000000000000;;	func setUp(t *testing.T, fullMethods bool) (openAPI, *restful.Container, *assert.Assertions) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		config, container := getConfig(fullMethods)
0000000000000000000000000000000000000000;;		return openAPI{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;			swagger: &spec.Swagger{
0000000000000000000000000000000000000000;;				SwaggerProps: spec.SwaggerProps{
0000000000000000000000000000000000000000;;					Swagger:     OpenAPIVersion,
0000000000000000000000000000000000000000;;					Definitions: spec.Definitions{},
0000000000000000000000000000000000000000;;					Paths:       &spec.Paths{Paths: map[string]spec.PathItem{}},
0000000000000000000000000000000000000000;;					Info:        config.Info,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, container, assert
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func noOp(request *restful.Request, response *restful.Response) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test input
0000000000000000000000000000000000000000;;	type TestInput struct {
0000000000000000000000000000000000000000;;		// Name of the input
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// ID of the input
0000000000000000000000000000000000000000;;		ID   int      `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Tags []string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test output
0000000000000000000000000000000000000000;;	type TestOutput struct {
0000000000000000000000000000000000000000;;		// Name of the output
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		// Number of outputs
0000000000000000000000000000000000000000;;		Count int `json:"count,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ TestInput) OpenAPIDefinition() *openapi.OpenAPIDefinition {
0000000000000000000000000000000000000000;;		schema := spec.Schema{}
0000000000000000000000000000000000000000;;		schema.Description = "Test input"
0000000000000000000000000000000000000000;;		schema.Properties = map[string]spec.Schema{
0000000000000000000000000000000000000000;;			"name": {
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Description: "Name of the input",
0000000000000000000000000000000000000000;;					Type:        []string{"string"},
0000000000000000000000000000000000000000;;					Format:      "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"id": {
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Description: "ID of the input",
0000000000000000000000000000000000000000;;					Type:        []string{"integer"},
0000000000000000000000000000000000000000;;					Format:      "int32",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"tags": {
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Description: "",
0000000000000000000000000000000000000000;;					Type:        []string{"array"},
0000000000000000000000000000000000000000;;					Items: &spec.SchemaOrArray{
0000000000000000000000000000000000000000;;						Schema: &spec.Schema{
0000000000000000000000000000000000000000;;							SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;								Type:   []string{"string"},
0000000000000000000000000000000000000000;;								Format: "",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		schema.Extensions = spec.Extensions{"x-test": "test"}
0000000000000000000000000000000000000000;;		return &openapi.OpenAPIDefinition{
0000000000000000000000000000000000000000;;			Schema:       schema,
0000000000000000000000000000000000000000;;			Dependencies: []string{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (_ TestOutput) OpenAPIDefinition() *openapi.OpenAPIDefinition {
0000000000000000000000000000000000000000;;		schema := spec.Schema{}
0000000000000000000000000000000000000000;;		schema.Description = "Test output"
0000000000000000000000000000000000000000;;		schema.Properties = map[string]spec.Schema{
0000000000000000000000000000000000000000;;			"name": {
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Description: "Name of the output",
0000000000000000000000000000000000000000;;					Type:        []string{"string"},
0000000000000000000000000000000000000000;;					Format:      "",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"count": {
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Description: "Number of outputs",
0000000000000000000000000000000000000000;;					Type:        []string{"integer"},
0000000000000000000000000000000000000000;;					Format:      "int32",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &openapi.OpenAPIDefinition{
0000000000000000000000000000000000000000;;			Schema:       schema,
0000000000000000000000000000000000000000;;			Dependencies: []string{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ openapi.OpenAPIDefinitionGetter = TestInput{}
0000000000000000000000000000000000000000;;	var _ openapi.OpenAPIDefinitionGetter = TestOutput{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestRoute(ws *restful.WebService, method string, additionalParams bool, opPrefix string) *restful.RouteBuilder {
0000000000000000000000000000000000000000;;		ret := ws.Method(method).
0000000000000000000000000000000000000000;;			Path("/test/{path:*}").
0000000000000000000000000000000000000000;;			Doc(fmt.Sprintf("%s test input", method)).
0000000000000000000000000000000000000000;;			Operation(fmt.Sprintf("%s%sTestInput", method, opPrefix)).
0000000000000000000000000000000000000000;;			Produces(restful.MIME_JSON).
0000000000000000000000000000000000000000;;			Consumes(restful.MIME_JSON).
0000000000000000000000000000000000000000;;			Param(ws.PathParameter("path", "path to the resource").DataType("string")).
0000000000000000000000000000000000000000;;			Param(ws.QueryParameter("pretty", "If 'true', then the output is pretty printed.")).
0000000000000000000000000000000000000000;;			Reads(TestInput{}).
0000000000000000000000000000000000000000;;			Returns(200, "OK", TestOutput{}).
0000000000000000000000000000000000000000;;			Writes(TestOutput{}).
0000000000000000000000000000000000000000;;			To(noOp)
0000000000000000000000000000000000000000;;		if additionalParams {
0000000000000000000000000000000000000000;;			ret.Param(ws.HeaderParameter("hparam", "a test head parameter").DataType("integer"))
0000000000000000000000000000000000000000;;			ret.Param(ws.FormParameter("fparam", "a test form parameter").DataType("number"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getConfig(fullMethods bool) (*openapi.Config, *restful.Container) {
0000000000000000000000000000000000000000;;		mux := http.NewServeMux()
0000000000000000000000000000000000000000;;		container := restful.NewContainer()
0000000000000000000000000000000000000000;;		container.ServeMux = mux
0000000000000000000000000000000000000000;;		ws := new(restful.WebService)
0000000000000000000000000000000000000000;;		ws.Path("/foo")
0000000000000000000000000000000000000000;;		ws.Route(getTestRoute(ws, "get", true, "foo"))
0000000000000000000000000000000000000000;;		if fullMethods {
0000000000000000000000000000000000000000;;			ws.Route(getTestRoute(ws, "post", false, "foo")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "put", false, "foo")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "head", false, "foo")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "patch", false, "foo")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "options", false, "foo")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "delete", false, "foo"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ws.Path("/bar")
0000000000000000000000000000000000000000;;		ws.Route(getTestRoute(ws, "get", true, "bar"))
0000000000000000000000000000000000000000;;		if fullMethods {
0000000000000000000000000000000000000000;;			ws.Route(getTestRoute(ws, "post", false, "bar")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "put", false, "bar")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "head", false, "bar")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "patch", false, "bar")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "options", false, "bar")).
0000000000000000000000000000000000000000;;				Route(getTestRoute(ws, "delete", false, "bar"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		container.Add(ws)
0000000000000000000000000000000000000000;;		return &openapi.Config{
0000000000000000000000000000000000000000;;			ProtocolList: []string{"https"},
0000000000000000000000000000000000000000;;			Info: &spec.Info{
0000000000000000000000000000000000000000;;				InfoProps: spec.InfoProps{
0000000000000000000000000000000000000000;;					Title:       "TestAPI",
0000000000000000000000000000000000000000;;					Description: "Test API",
0000000000000000000000000000000000000000;;					Version:     "unversioned",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			GetDefinitions: func(_ openapi.ReferenceCallback) map[string]openapi.OpenAPIDefinition {
0000000000000000000000000000000000000000;;				return map[string]openapi.OpenAPIDefinition{
0000000000000000000000000000000000000000;;					"k8s.io/apiserver/pkg/server/openapi.TestInput":  *TestInput{}.OpenAPIDefinition(),
0000000000000000000000000000000000000000;;					"k8s.io/apiserver/pkg/server/openapi.TestOutput": *TestOutput{}.OpenAPIDefinition(),
0000000000000000000000000000000000000000;;					// Bazel changes the package name, this is ok for testing, but we need to fix it if it happened
0000000000000000000000000000000000000000;;					// in the main code.
0000000000000000000000000000000000000000;;					"k8s.io/apiserver/pkg/server/openapi/go_default_test.TestInput":  *TestInput{}.OpenAPIDefinition(),
0000000000000000000000000000000000000000;;					"k8s.io/apiserver/pkg/server/openapi/go_default_test.TestOutput": *TestOutput{}.OpenAPIDefinition(),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			GetDefinitionName: func(name string) (string, spec.Extensions) {
0000000000000000000000000000000000000000;;				friendlyName := name[strings.LastIndex(name, "/")+1:]
0000000000000000000000000000000000000000;;				if strings.HasPrefix(friendlyName, "go_default_test") {
0000000000000000000000000000000000000000;;					friendlyName = "openapi" + friendlyName[len("go_default_test"):]
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return friendlyName, spec.Extensions{"x-test2": "test2"}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, container
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestOperation(method string, opPrefix string) *spec.Operation {
0000000000000000000000000000000000000000;;		return &spec.Operation{
0000000000000000000000000000000000000000;;			OperationProps: spec.OperationProps{
0000000000000000000000000000000000000000;;				Description: fmt.Sprintf("%s test input", method),
0000000000000000000000000000000000000000;;				Consumes:    []string{"application/json"},
0000000000000000000000000000000000000000;;				Produces:    []string{"application/json"},
0000000000000000000000000000000000000000;;				Schemes:     []string{"https"},
0000000000000000000000000000000000000000;;				Parameters:  []spec.Parameter{},
0000000000000000000000000000000000000000;;				Responses:   getTestResponses(),
0000000000000000000000000000000000000000;;				ID:          fmt.Sprintf("%s%sTestInput", method, opPrefix),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestPathItem(allMethods bool, opPrefix string) spec.PathItem {
0000000000000000000000000000000000000000;;		ret := spec.PathItem{
0000000000000000000000000000000000000000;;			PathItemProps: spec.PathItemProps{
0000000000000000000000000000000000000000;;				Get:        getTestOperation("get", opPrefix),
0000000000000000000000000000000000000000;;				Parameters: getTestCommonParameters(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret.Get.Parameters = getAdditionalTestParameters()
0000000000000000000000000000000000000000;;		if allMethods {
0000000000000000000000000000000000000000;;			ret.Put = getTestOperation("put", opPrefix)
0000000000000000000000000000000000000000;;			ret.Put.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;			ret.Post = getTestOperation("post", opPrefix)
0000000000000000000000000000000000000000;;			ret.Post.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;			ret.Head = getTestOperation("head", opPrefix)
0000000000000000000000000000000000000000;;			ret.Head.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;			ret.Patch = getTestOperation("patch", opPrefix)
0000000000000000000000000000000000000000;;			ret.Patch.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;			ret.Delete = getTestOperation("delete", opPrefix)
0000000000000000000000000000000000000000;;			ret.Delete.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;			ret.Options = getTestOperation("options", opPrefix)
0000000000000000000000000000000000000000;;			ret.Options.Parameters = getTestParameters()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getRefSchema(ref string) *spec.Schema {
0000000000000000000000000000000000000000;;		return &spec.Schema{
0000000000000000000000000000000000000000;;			SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;				Ref: spec.MustCreateRef(ref),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestResponses() *spec.Responses {
0000000000000000000000000000000000000000;;		ret := spec.Responses{
0000000000000000000000000000000000000000;;			ResponsesProps: spec.ResponsesProps{
0000000000000000000000000000000000000000;;				StatusCodeResponses: map[int]spec.Response{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret.StatusCodeResponses[200] = spec.Response{
0000000000000000000000000000000000000000;;			ResponseProps: spec.ResponseProps{
0000000000000000000000000000000000000000;;				Description: "OK",
0000000000000000000000000000000000000000;;				Schema:      getRefSchema("#/definitions/openapi.TestOutput"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestCommonParameters() []spec.Parameter {
0000000000000000000000000000000000000000;;		ret := make([]spec.Parameter, 2)
0000000000000000000000000000000000000000;;		ret[0] = spec.Parameter{
0000000000000000000000000000000000000000;;			SimpleSchema: spec.SimpleSchema{
0000000000000000000000000000000000000000;;				Type: "string",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Description: "path to the resource",
0000000000000000000000000000000000000000;;				Name:        "path",
0000000000000000000000000000000000000000;;				In:          "path",
0000000000000000000000000000000000000000;;				Required:    true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CommonValidations: spec.CommonValidations{
0000000000000000000000000000000000000000;;				UniqueItems: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret[1] = spec.Parameter{
0000000000000000000000000000000000000000;;			SimpleSchema: spec.SimpleSchema{
0000000000000000000000000000000000000000;;				Type: "string",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Description: "If 'true', then the output is pretty printed.",
0000000000000000000000000000000000000000;;				Name:        "pretty",
0000000000000000000000000000000000000000;;				In:          "query",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CommonValidations: spec.CommonValidations{
0000000000000000000000000000000000000000;;				UniqueItems: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestParameters() []spec.Parameter {
0000000000000000000000000000000000000000;;		ret := make([]spec.Parameter, 1)
0000000000000000000000000000000000000000;;		ret[0] = spec.Parameter{
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Name:     "body",
0000000000000000000000000000000000000000;;				In:       "body",
0000000000000000000000000000000000000000;;				Required: true,
0000000000000000000000000000000000000000;;				Schema:   getRefSchema("#/definitions/openapi.TestInput"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getAdditionalTestParameters() []spec.Parameter {
0000000000000000000000000000000000000000;;		ret := make([]spec.Parameter, 3)
0000000000000000000000000000000000000000;;		ret[0] = spec.Parameter{
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Name:     "body",
0000000000000000000000000000000000000000;;				In:       "body",
0000000000000000000000000000000000000000;;				Required: true,
0000000000000000000000000000000000000000;;				Schema:   getRefSchema("#/definitions/openapi.TestInput"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret[1] = spec.Parameter{
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Name:        "fparam",
0000000000000000000000000000000000000000;;				Description: "a test form parameter",
0000000000000000000000000000000000000000;;				In:          "formData",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			SimpleSchema: spec.SimpleSchema{
0000000000000000000000000000000000000000;;				Type: "number",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CommonValidations: spec.CommonValidations{
0000000000000000000000000000000000000000;;				UniqueItems: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret[2] = spec.Parameter{
0000000000000000000000000000000000000000;;			SimpleSchema: spec.SimpleSchema{
0000000000000000000000000000000000000000;;				Type: "integer",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Description: "a test head parameter",
0000000000000000000000000000000000000000;;				Name:        "hparam",
0000000000000000000000000000000000000000;;				In:          "header",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			CommonValidations: spec.CommonValidations{
0000000000000000000000000000000000000000;;				UniqueItems: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestInputDefinition() spec.Schema {
0000000000000000000000000000000000000000;;		return spec.Schema{
0000000000000000000000000000000000000000;;			SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;				Description: "Test input",
0000000000000000000000000000000000000000;;				Properties: map[string]spec.Schema{
0000000000000000000000000000000000000000;;					"id": {
0000000000000000000000000000000000000000;;						SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;							Description: "ID of the input",
0000000000000000000000000000000000000000;;							Type:        spec.StringOrArray{"integer"},
0000000000000000000000000000000000000000;;							Format:      "int32",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"name": {
0000000000000000000000000000000000000000;;						SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;							Description: "Name of the input",
0000000000000000000000000000000000000000;;							Type:        spec.StringOrArray{"string"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"tags": {
0000000000000000000000000000000000000000;;						SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;							Type: spec.StringOrArray{"array"},
0000000000000000000000000000000000000000;;							Items: &spec.SchemaOrArray{
0000000000000000000000000000000000000000;;								Schema: &spec.Schema{
0000000000000000000000000000000000000000;;									SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;										Type: spec.StringOrArray{"string"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VendorExtensible: spec.VendorExtensible{
0000000000000000000000000000000000000000;;				Extensions: spec.Extensions{
0000000000000000000000000000000000000000;;					"x-test":  "test",
0000000000000000000000000000000000000000;;					"x-test2": "test2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTestOutputDefinition() spec.Schema {
0000000000000000000000000000000000000000;;		return spec.Schema{
0000000000000000000000000000000000000000;;			SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;				Description: "Test output",
0000000000000000000000000000000000000000;;				Properties: map[string]spec.Schema{
0000000000000000000000000000000000000000;;					"count": {
0000000000000000000000000000000000000000;;						SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;							Description: "Number of outputs",
0000000000000000000000000000000000000000;;							Type:        spec.StringOrArray{"integer"},
0000000000000000000000000000000000000000;;							Format:      "int32",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"name": {
0000000000000000000000000000000000000000;;						SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;							Description: "Name of the output",
0000000000000000000000000000000000000000;;							Type:        spec.StringOrArray{"string"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VendorExtensible: spec.VendorExtensible{
0000000000000000000000000000000000000000;;				Extensions: spec.Extensions{
0000000000000000000000000000000000000000;;					"x-test2": "test2",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBuildSwaggerSpec(t *testing.T) {
0000000000000000000000000000000000000000;;		o, container, assert := setUp(t, true)
0000000000000000000000000000000000000000;;		expected := &spec.Swagger{
0000000000000000000000000000000000000000;;			SwaggerProps: spec.SwaggerProps{
0000000000000000000000000000000000000000;;				Info: &spec.Info{
0000000000000000000000000000000000000000;;					InfoProps: spec.InfoProps{
0000000000000000000000000000000000000000;;						Title:       "TestAPI",
0000000000000000000000000000000000000000;;						Description: "Test API",
0000000000000000000000000000000000000000;;						Version:     "unversioned",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Swagger: "2.0",
0000000000000000000000000000000000000000;;				Paths: &spec.Paths{
0000000000000000000000000000000000000000;;					Paths: map[string]spec.PathItem{
0000000000000000000000000000000000000000;;						"/foo/test/{path}": getTestPathItem(true, "foo"),
0000000000000000000000000000000000000000;;						"/bar/test/{path}": getTestPathItem(true, "bar"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Definitions: spec.Definitions{
0000000000000000000000000000000000000000;;					"openapi.TestInput":  getTestInputDefinition(),
0000000000000000000000000000000000000000;;					"openapi.TestOutput": getTestOutputDefinition(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := o.init(container.RegisteredWebServices())
0000000000000000000000000000000000000000;;		if !assert.NoError(err) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected_json, err := json.Marshal(expected)
0000000000000000000000000000000000000000;;		if !assert.NoError(err) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual_json, err := json.Marshal(o.swagger)
0000000000000000000000000000000000000000;;		if !assert.NoError(err) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(string(expected_json), string(actual_json))
0000000000000000000000000000000000000000;;	}
