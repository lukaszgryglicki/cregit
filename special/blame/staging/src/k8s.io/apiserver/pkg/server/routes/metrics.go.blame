0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d5f6ddbe9785fd36f3e4fb0345d7a924ad12898e;pkg/routes/metrics.go[pkg/routes/metrics.go][staging/src/k8s.io/apiserver/pkg/server/routes/metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package routes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apimetrics "k8s.io/apiserver/pkg/endpoints/metrics"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/mux"
0000000000000000000000000000000000000000;;		etcdmetrics "k8s.io/apiserver/pkg/storage/etcd/metrics"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultMetrics installs the default prometheus metrics handler
0000000000000000000000000000000000000000;;	type DefaultMetrics struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install adds the DefaultMetrics handler
0000000000000000000000000000000000000000;;	func (m DefaultMetrics) Install(c *mux.PathRecorderMux) {
0000000000000000000000000000000000000000;;		c.Handle("/metrics", prometheus.Handler())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricsWithReset install the prometheus metrics handler extended with support for the DELETE method
0000000000000000000000000000000000000000;;	// which resets the metrics.
0000000000000000000000000000000000000000;;	type MetricsWithReset struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install adds the MetricsWithReset handler
0000000000000000000000000000000000000000;;	func (m MetricsWithReset) Install(c *mux.PathRecorderMux) {
0000000000000000000000000000000000000000;;		defaultMetricsHandler := prometheus.Handler().ServeHTTP
0000000000000000000000000000000000000000;;		c.HandleFunc("/metrics", func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			if req.Method == "DELETE" {
0000000000000000000000000000000000000000;;				apimetrics.Reset()
0000000000000000000000000000000000000000;;				etcdmetrics.Reset()
0000000000000000000000000000000000000000;;				io.WriteString(w, "metrics reset\n")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defaultMetricsHandler(w, req)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
