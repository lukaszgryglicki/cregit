0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4fa123cff3ededa351298350459e08f67c006163;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package encryptionconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/value"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sampleText = "abcdefghijklmnopqrstuvwxyz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sampleContextText = "0123456789"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		correctConfigWithIdentityFirst = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    - namespaces
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - identity: {}
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - aescbc:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - secretbox:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		correctConfigWithAesGcmFirst = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - secretbox:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
0000000000000000000000000000000000000000;;	    - aescbc:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - identity: {}
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		correctConfigWithAesCbcFirst = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - aescbc:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - identity: {}
0000000000000000000000000000000000000000;;	    - secretbox:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		correctConfigWithSecretboxFirst = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - secretbox:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=
0000000000000000000000000000000000000000;;	    - aescbc:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	    - identity: {}
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: dGhpcyBpcyBwYXNzd29yZA==
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		incorrectConfigNoSecretForKey = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - namespaces
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		incorrectConfigInvalidKey = `
0000000000000000000000000000000000000000;;	kind: EncryptionConfig
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	resources:
0000000000000000000000000000000000000000;;	  - resources:
0000000000000000000000000000000000000000;;	    - namespaces
0000000000000000000000000000000000000000;;	    - secrets
0000000000000000000000000000000000000000;;	    providers:
0000000000000000000000000000000000000000;;	    - aesgcm:
0000000000000000000000000000000000000000;;	        keys:
0000000000000000000000000000000000000000;;	        - name: key1
0000000000000000000000000000000000000000;;	          secret: c2VjcmV0IGlzIHNlY3VyZQ==
0000000000000000000000000000000000000000;;	        - name: key2
0000000000000000000000000000000000000000;;	          secret: YSBzZWNyZXQgYSBzZWNyZXQ=
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEncryptionProviderConfigCorrect(t *testing.T) {
0000000000000000000000000000000000000000;;		// Creates two transformers with different ordering of identity and AES transformers.
0000000000000000000000000000000000000000;;		// Transforms data using one of them, and tries to untransform using both of them.
0000000000000000000000000000000000000000;;		// Repeats this for both the possible combinations.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		identityFirstTransformerOverrides, err := ParseEncryptionConfiguration(strings.NewReader(correctConfigWithIdentityFirst))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error while parsing configuration file: %s.\nThe file was:\n%s", err, correctConfigWithIdentityFirst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aesGcmFirstTransformerOverrides, err := ParseEncryptionConfiguration(strings.NewReader(correctConfigWithAesGcmFirst))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error while parsing configuration file: %s.\nThe file was:\n%s", err, correctConfigWithAesGcmFirst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aesCbcFirstTransformerOverrides, err := ParseEncryptionConfiguration(strings.NewReader(correctConfigWithAesCbcFirst))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error while parsing configuration file: %s.\nThe file was:\n%s", err, correctConfigWithAesCbcFirst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secretboxFirstTransformerOverrides, err := ParseEncryptionConfiguration(strings.NewReader(correctConfigWithSecretboxFirst))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error while parsing configuration file: %s.\nThe file was:\n%s", err, correctConfigWithSecretboxFirst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Pick the transformer for any of the returned resources.
0000000000000000000000000000000000000000;;		identityFirstTransformer := identityFirstTransformerOverrides[schema.ParseGroupResource("secrets")]
0000000000000000000000000000000000000000;;		aesGcmFirstTransformer := aesGcmFirstTransformerOverrides[schema.ParseGroupResource("secrets")]
0000000000000000000000000000000000000000;;		aesCbcFirstTransformer := aesCbcFirstTransformerOverrides[schema.ParseGroupResource("secrets")]
0000000000000000000000000000000000000000;;		secretboxFirstTransformer := secretboxFirstTransformerOverrides[schema.ParseGroupResource("secrets")]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		context := value.DefaultContext([]byte(sampleContextText))
0000000000000000000000000000000000000000;;		originalText := []byte(sampleText)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		transformers := []struct {
0000000000000000000000000000000000000000;;			Transformer value.Transformer
0000000000000000000000000000000000000000;;			Name        string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{aesGcmFirstTransformer, "aesGcmFirst"},
0000000000000000000000000000000000000000;;			{aesCbcFirstTransformer, "aesCbcFirst"},
0000000000000000000000000000000000000000;;			{secretboxFirstTransformer, "secretboxFirst"},
0000000000000000000000000000000000000000;;			{identityFirstTransformer, "identityFirst"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, testCase := range transformers {
0000000000000000000000000000000000000000;;			transformedData, err := testCase.Transformer.TransformToStorage(originalText, context)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: error while transforming data to storage: %s", testCase.Name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, transformer := range transformers {
0000000000000000000000000000000000000000;;				untransformedData, stale, err := transformer.Transformer.TransformFromStorage(transformedData, context)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: error while reading using %s transformer: %s", testCase.Name, transformer.Name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if stale != (transformer.Name != testCase.Name) {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: wrong stale information on reading using %s transformer, should be %v", testCase.Name, transformer.Name, testCase.Name == transformer.Name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if bytes.Compare(untransformedData, originalText) != 0 {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: %s transformer transformed data incorrectly. Expected: %v, got %v", testCase.Name, transformer.Name, originalText, untransformedData)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Throw error if key has no secret
0000000000000000000000000000000000000000;;	func TestEncryptionProviderConfigNoSecretForKey(t *testing.T) {
0000000000000000000000000000000000000000;;		if _, err := ParseEncryptionConfiguration(strings.NewReader(incorrectConfigNoSecretForKey)); err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("invalid configuration file (one key has no secret) got parsed:\n%s", incorrectConfigNoSecretForKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Throw error if invalid key for AES
0000000000000000000000000000000000000000;;	func TestEncryptionProviderConfigInvalidKey(t *testing.T) {
0000000000000000000000000000000000000000;;		if _, err := ParseEncryptionConfiguration(strings.NewReader(incorrectConfigInvalidKey)); err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("invalid configuration file (bad AES key) got parsed:\n%s", incorrectConfigInvalidKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
