0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
3aa2dc7cdb9977115bc5eb1263a05481270d1171;pkg/healthz/healthz_test.go[pkg/healthz/healthz_test.go][staging/src/k8s.io/apiserver/pkg/server/healthz/healthz_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package healthz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInstallHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		mux := http.NewServeMux()
0000000000000000000000000000000000000000;;		InstallHandler(mux)
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "http://example.com/healthz", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		mux.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;		if w.Code != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", http.StatusOK, w.Code)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.Body.String() != "ok" {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", "ok", w.Body.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMulitipleChecks(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			path             string
0000000000000000000000000000000000000000;;			expectedResponse string
0000000000000000000000000000000000000000;;			expectedStatus   int
0000000000000000000000000000000000000000;;			addBadCheck      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"/healthz?verbose", "[+]ping ok\nhealthz check passed\n", http.StatusOK, false},
0000000000000000000000000000000000000000;;			{"/healthz/ping", "ok", http.StatusOK, false},
0000000000000000000000000000000000000000;;			{"/healthz", "ok", http.StatusOK, false},
0000000000000000000000000000000000000000;;			{"/healthz?verbose", "[+]ping ok\n[-]bad failed: reason withheld\nhealthz check failed\n", http.StatusInternalServerError, true},
0000000000000000000000000000000000000000;;			{"/healthz/ping", "ok", http.StatusOK, true},
0000000000000000000000000000000000000000;;			{"/healthz/bad", "internal server error: this will fail\n", http.StatusInternalServerError, true},
0000000000000000000000000000000000000000;;			{"/healthz", "[+]ping ok\n[-]bad failed: reason withheld\nhealthz check failed\n", http.StatusInternalServerError, true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			mux := http.NewServeMux()
0000000000000000000000000000000000000000;;			checks := []HealthzChecker{PingHealthz}
0000000000000000000000000000000000000000;;			if test.addBadCheck {
0000000000000000000000000000000000000000;;				checks = append(checks, NamedCheck("bad", func(_ *http.Request) error {
0000000000000000000000000000000000000000;;					return errors.New("this will fail")
0000000000000000000000000000000000000000;;				}))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			InstallHandler(mux, checks...)
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", fmt.Sprintf("http://example.com%v", test.path), nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("case[%d] Unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;			mux.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;			if w.Code != test.expectedStatus {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d] Expected: %v, got: %v", i, test.expectedStatus, w.Code)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if w.Body.String() != test.expectedResponse {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d] Expected:\n%v\ngot:\n%v\n", i, test.expectedResponse, w.Body.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
