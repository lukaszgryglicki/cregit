0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0b1190a5ddfef2e99f0f29bb0c8a9f3d8842ca1d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RecommendedOptions contains the recommended options for running an API server
0000000000000000000000000000000000000000;;	// If you add something to this list, it should be in a logical grouping
0000000000000000000000000000000000000000;;	type RecommendedOptions struct {
0000000000000000000000000000000000000000;;		Etcd           *EtcdOptions
0000000000000000000000000000000000000000;;		SecureServing  *SecureServingOptions
0000000000000000000000000000000000000000;;		Authentication *DelegatingAuthenticationOptions
0000000000000000000000000000000000000000;;		Authorization  *DelegatingAuthorizationOptions
0000000000000000000000000000000000000000;;		Audit          *AuditOptions
0000000000000000000000000000000000000000;;		Features       *FeatureOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRecommendedOptions(prefix string, copier runtime.ObjectCopier, codec runtime.Codec) *RecommendedOptions {
0000000000000000000000000000000000000000;;		return &RecommendedOptions{
0000000000000000000000000000000000000000;;			Etcd:           NewEtcdOptions(storagebackend.NewDefaultConfig(prefix, copier, codec)),
0000000000000000000000000000000000000000;;			SecureServing:  NewSecureServingOptions(),
0000000000000000000000000000000000000000;;			Authentication: NewDelegatingAuthenticationOptions(),
0000000000000000000000000000000000000000;;			Authorization:  NewDelegatingAuthorizationOptions(),
0000000000000000000000000000000000000000;;			Audit:          NewAuditOptions(),
0000000000000000000000000000000000000000;;			Features:       NewFeatureOptions(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *RecommendedOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		o.Etcd.AddFlags(fs)
0000000000000000000000000000000000000000;;		o.SecureServing.AddFlags(fs)
0000000000000000000000000000000000000000;;		o.Authentication.AddFlags(fs)
0000000000000000000000000000000000000000;;		o.Authorization.AddFlags(fs)
0000000000000000000000000000000000000000;;		o.Audit.AddFlags(fs)
0000000000000000000000000000000000000000;;		o.Features.AddFlags(fs)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *RecommendedOptions) ApplyTo(config *server.Config) error {
0000000000000000000000000000000000000000;;		if err := o.Etcd.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := o.SecureServing.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := o.Authentication.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := o.Authorization.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := o.Audit.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := o.Features.ApplyTo(config); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
