0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
829d9382ef92e755aad1a7c5c1387462687119c6;pkg/genericapiserver/storage_factory_test.go[pkg/genericapiserver/storage_factory_test.go][staging/src/k8s.io/apiserver/pkg/server/storage/storage_factory_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/example"
0000000000000000000000000000000000000000;;		exampleinstall "k8s.io/apiserver/pkg/apis/example/install"
0000000000000000000000000000000000000000;;		examplev1 "k8s.io/apiserver/pkg/apis/example/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		v1GroupVersion = schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		registry       = registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;		announce       = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		scheme         = runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs         = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;		parameterCodec = runtime.NewParameterCodec(scheme)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(scheme, metav1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(v1GroupVersion,
0000000000000000000000000000000000000000;;			&metav1.Status{},
0000000000000000000000000000000000000000;;			&metav1.APIVersions{},
0000000000000000000000000000000000000000;;			&metav1.APIGroupList{},
0000000000000000000000000000000000000000;;			&metav1.APIGroup{},
0000000000000000000000000000000000000000;;			&metav1.APIResourceList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		exampleinstall.Install(announce, registry, scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeNegotiater struct {
0000000000000000000000000000000000000000;;		serializer, streamSerializer runtime.Serializer
0000000000000000000000000000000000000000;;		framer                       runtime.Framer
0000000000000000000000000000000000000000;;		types, streamTypes           []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) SupportedMediaTypes() []runtime.SerializerInfo {
0000000000000000000000000000000000000000;;		var out []runtime.SerializerInfo
0000000000000000000000000000000000000000;;		for _, s := range n.types {
0000000000000000000000000000000000000000;;			info := runtime.SerializerInfo{Serializer: n.serializer, MediaType: s, EncodesAsText: true}
0000000000000000000000000000000000000000;;			for _, t := range n.streamTypes {
0000000000000000000000000000000000000000;;				if t == s {
0000000000000000000000000000000000000000;;					info.StreamSerializer = &runtime.StreamSerializerInfo{
0000000000000000000000000000000000000000;;						EncodesAsText: true,
0000000000000000000000000000000000000000;;						Framer:        n.framer,
0000000000000000000000000000000000000000;;						Serializer:    n.streamSerializer,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			out = append(out, info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) UniversalDeserializer() runtime.Decoder {
0000000000000000000000000000000000000000;;		return n.serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) EncoderForVersion(serializer runtime.Encoder, gv runtime.GroupVersioner) runtime.Encoder {
0000000000000000000000000000000000000000;;		return n.serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *fakeNegotiater) DecoderToVersion(serializer runtime.Decoder, gv runtime.GroupVersioner) runtime.Decoder {
0000000000000000000000000000000000000000;;		return n.serializer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConfigurableStorageFactory(t *testing.T) {
0000000000000000000000000000000000000000;;		ns := &fakeNegotiater{types: []string{"test/test"}}
0000000000000000000000000000000000000000;;		f := NewDefaultStorageFactory(storagebackend.Config{}, "test/test", ns, NewDefaultResourceEncodingConfig(registry), NewResourceConfig())
0000000000000000000000000000000000000000;;		f.AddCohabitatingResources(example.Resource("test"), schema.GroupResource{Resource: "test2", Group: "2"})
0000000000000000000000000000000000000000;;		called := false
0000000000000000000000000000000000000000;;		testEncoderChain := func(e runtime.Encoder) runtime.Encoder {
0000000000000000000000000000000000000000;;			called = true
0000000000000000000000000000000000000000;;			return e
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.AddSerializationChains(testEncoderChain, nil, example.Resource("test"))
0000000000000000000000000000000000000000;;		f.SetEtcdLocation(example.Resource("*"), []string{"/server2"})
0000000000000000000000000000000000000000;;		f.SetEtcdPrefix(example.Resource("test"), "/prefix_for_test")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := f.NewConfig(example.Resource("test"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Prefix != "/prefix_for_test" || !reflect.DeepEqual(config.ServerList, []string{"/server2"}) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected config %#v", config)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !called {
0000000000000000000000000000000000000000;;			t.Errorf("expected encoder chain to be called")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateEtcdOverrides(t *testing.T) {
0000000000000000000000000000000000000000;;		registry := registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;		announced := make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		exampleinstall.Install(announced, registry, scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			resource schema.GroupResource
0000000000000000000000000000000000000000;;			servers  []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resource: schema.GroupResource{Group: example.GroupName, Resource: "resource"},
0000000000000000000000000000000000000000;;				servers:  []string{"http://127.0.0.1:10000"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resource: schema.GroupResource{Group: example.GroupName, Resource: "resource"},
0000000000000000000000000000000000000000;;				servers:  []string{"http://127.0.0.1:10000", "http://127.0.0.1:20000"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resource: schema.GroupResource{Group: example.GroupName, Resource: "resource"},
0000000000000000000000000000000000000000;;				servers:  []string{"http://127.0.0.1:10000"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defaultEtcdLocation := []string{"http://127.0.0.1"}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			defaultConfig := storagebackend.Config{
0000000000000000000000000000000000000000;;				Prefix:     "/registry",
0000000000000000000000000000000000000000;;				ServerList: defaultEtcdLocation,
0000000000000000000000000000000000000000;;				Copier:     scheme,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			storageFactory := NewDefaultStorageFactory(defaultConfig, "", codecs, NewDefaultResourceEncodingConfig(registry), NewResourceConfig())
0000000000000000000000000000000000000000;;			storageFactory.SetEtcdLocation(test.resource, test.servers)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var err error
0000000000000000000000000000000000000000;;			config, err := storageFactory.NewConfig(test.resource)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected error %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(config.ServerList, test.servers) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected %v, got %v", i, test.servers, config.ServerList)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			config, err = storageFactory.NewConfig(schema.GroupResource{Group: examplev1.GroupName, Resource: "unlikely"})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected error %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(config.ServerList, defaultEtcdLocation) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected %v, got %v", i, defaultEtcdLocation, config.ServerList)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
