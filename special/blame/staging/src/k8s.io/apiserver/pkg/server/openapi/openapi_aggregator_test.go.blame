0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
191bdee193a42667782373f025f6ecad9b9e6f78;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFilterSpecs(t *testing.T) {
0000000000000000000000000000000000000000;;		var spec1, spec1_filtered *spec.Swagger
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test2"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	  Test2:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      other:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/Other"
0000000000000000000000000000000000000000;;	  Other:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	`), &spec1)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec1_filtered)
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		FilterSpecByPaths(spec1, []string{"/test"})
0000000000000000000000000000000000000000;;		assert.Equal(spec1_filtered, spec1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeSpecsSimple(t *testing.T) {
0000000000000000000000000000000000000000;;		var spec1, spec2, expected *spec.Swagger
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec1)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test2"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test2:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      other:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/Other"
0000000000000000000000000000000000000000;;	  Other:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	`), &spec2)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test2"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	  Test2:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      other:
0000000000000000000000000000000000000000;;	        $ref: "#/definitions/Other"
0000000000000000000000000000000000000000;;	  Other:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	`), &expected)
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		if !assert.NoError(MergeSpecs(spec1, spec2)) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(expected, spec1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeSpecsReuseModel(t *testing.T) {
0000000000000000000000000000000000000000;;		var spec1, spec2, expected *spec.Swagger
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec1)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    description: "This Test has a description"
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "This status has another description"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec2)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &expected)
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		if !assert.NoError(MergeSpecs(spec1, spec2)) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(expected, spec1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeSpecsRenameModel(t *testing.T) {
0000000000000000000000000000000000000000;;		var spec1, spec2, expected *spec.Swagger
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec1)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    description: "This Test has a description"
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &spec2)
0000000000000000000000000000000000000000;;		yaml.Unmarshal([]byte(`
0000000000000000000000000000000000000000;;	swagger: "2.0"
0000000000000000000000000000000000000000;;	paths:
0000000000000000000000000000000000000000;;	  /test:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test"
0000000000000000000000000000000000000000;;	      summary: "Test API"
0000000000000000000000000000000000000000;;	      operationId: "addTest"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test"
0000000000000000000000000000000000000000;;	      responses:
0000000000000000000000000000000000000000;;	        405:
0000000000000000000000000000000000000000;;	          description: "Invalid input"
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/InvalidInput"
0000000000000000000000000000000000000000;;	  /othertest:
0000000000000000000000000000000000000000;;	    post:
0000000000000000000000000000000000000000;;	      tags:
0000000000000000000000000000000000000000;;	      - "test2"
0000000000000000000000000000000000000000;;	      summary: "Test2 API"
0000000000000000000000000000000000000000;;	      operationId: "addTest2"
0000000000000000000000000000000000000000;;	      consumes:
0000000000000000000000000000000000000000;;	      - "application/json"
0000000000000000000000000000000000000000;;	      produces:
0000000000000000000000000000000000000000;;	      - "application/xml"
0000000000000000000000000000000000000000;;	      parameters:
0000000000000000000000000000000000000000;;	      - in: "body"
0000000000000000000000000000000000000000;;	        name: "body"
0000000000000000000000000000000000000000;;	        description: "test2 object"
0000000000000000000000000000000000000000;;	        required: true
0000000000000000000000000000000000000000;;	        schema:
0000000000000000000000000000000000000000;;	          $ref: "#/definitions/Test_v2"
0000000000000000000000000000000000000000;;	definitions:
0000000000000000000000000000000000000000;;	  Test:
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	      status:
0000000000000000000000000000000000000000;;	        type: "string"
0000000000000000000000000000000000000000;;	        description: "Status"
0000000000000000000000000000000000000000;;	  Test_v2:
0000000000000000000000000000000000000000;;	    description: "This Test has a description"
0000000000000000000000000000000000000000;;	    type: "object"
0000000000000000000000000000000000000000;;	    properties:
0000000000000000000000000000000000000000;;	      id:
0000000000000000000000000000000000000000;;	        type: "integer"
0000000000000000000000000000000000000000;;	        format: "int64"
0000000000000000000000000000000000000000;;	  InvalidInput:
0000000000000000000000000000000000000000;;	    type: "string"
0000000000000000000000000000000000000000;;	    format: "string"
0000000000000000000000000000000000000000;;	`), &expected)
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;		if !assert.NoError(MergeSpecs(spec1, spec2)) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expected_yaml, _ := yaml.Marshal(expected)
0000000000000000000000000000000000000000;;		spec1_yaml, _ := yaml.Marshal(spec1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Equal(string(expected_yaml), string(spec1_yaml))
0000000000000000000000000000000000000000;;	}
