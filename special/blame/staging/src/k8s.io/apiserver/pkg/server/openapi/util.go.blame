0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
234b2cb6245be63e03d423c4cf9fd3dfd4e8a0a0;pkg/genericapiserver/openapi/util.go[pkg/genericapiserver/openapi/util.go][staging/src/k8s.io/apiserver/pkg/server/openapi/util.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type parameters []spec.Parameter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s parameters) Len() int      { return len(s) }
0000000000000000000000000000000000000000;;	func (s parameters) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byNameIn used in sorting parameters by Name and In fields.
0000000000000000000000000000000000000000;;	type byNameIn struct {
0000000000000000000000000000000000000000;;		parameters
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s byNameIn) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return s.parameters[i].Name < s.parameters[j].Name || (s.parameters[i].Name == s.parameters[j].Name && s.parameters[i].In < s.parameters[j].In)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SortParameters sorts parameters by Name and In fields.
0000000000000000000000000000000000000000;;	func sortParameters(p []spec.Parameter) {
0000000000000000000000000000000000000000;;		sort.Sort(byNameIn{p})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func groupRoutesByPath(routes []restful.Route) map[string][]restful.Route {
0000000000000000000000000000000000000000;;		pathToRoutes := make(map[string][]restful.Route)
0000000000000000000000000000000000000000;;		for _, r := range routes {
0000000000000000000000000000000000000000;;			pathToRoutes[r.Path] = append(pathToRoutes[r.Path], r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pathToRoutes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mapKeyFromParam(param *restful.Parameter) interface{} {
0000000000000000000000000000000000000000;;		return struct {
0000000000000000000000000000000000000000;;			Name string
0000000000000000000000000000000000000000;;			Kind int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			Name: param.Data().Name,
0000000000000000000000000000000000000000;;			Kind: param.Data().Kind,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
