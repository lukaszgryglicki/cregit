0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d4858aa823ccb434375792cbead7157f838d29d2;pkg/genericapiserver/resource_config_test.go[pkg/genericapiserver/resource_config_test.go][staging/src/k8s.io/apiserver/pkg/server/storage/resource_config_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDisabledVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		g1v1 := schema.GroupVersion{Group: "group1", Version: "version1"}
0000000000000000000000000000000000000000;;		g1v2 := schema.GroupVersion{Group: "group1", Version: "version2"}
0000000000000000000000000000000000000000;;		g2v1 := schema.GroupVersion{Group: "group2", Version: "version1"}
0000000000000000000000000000000000000000;;		g3v1 := schema.GroupVersion{Group: "group3", Version: "version1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceType := "the-resource"
0000000000000000000000000000000000000000;;		disabledResourceType := "the-disabled-resource"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := NewResourceConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config.DisableVersions(g1v1)
0000000000000000000000000000000000000000;;		config.EnableVersions(g1v2, g3v1)
0000000000000000000000000000000000000000;;		config.EnableResources(g1v1.WithResource(resourceType), g2v1.WithResource(resourceType))
0000000000000000000000000000000000000000;;		config.DisableResources(g1v2.WithResource(disabledResourceType))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedEnabledResources := []schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			g1v2.WithResource(resourceType),
0000000000000000000000000000000000000000;;			g2v1.WithResource(resourceType),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedDisabledResources := []schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			g1v1.WithResource(resourceType), g1v1.WithResource(disabledResourceType),
0000000000000000000000000000000000000000;;			g1v2.WithResource(disabledResourceType),
0000000000000000000000000000000000000000;;			g2v1.WithResource(disabledResourceType),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, expectedResource := range expectedEnabledResources {
0000000000000000000000000000000000000000;;			if !config.ResourceEnabled(expectedResource) {
0000000000000000000000000000000000000000;;				t.Errorf("expected enabled for %v, from %v", expectedResource, config)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, expectedResource := range expectedDisabledResources {
0000000000000000000000000000000000000000;;			if config.ResourceEnabled(expectedResource) {
0000000000000000000000000000000000000000;;				t.Errorf("expected disabled for %v, from %v", expectedResource, config)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := false, config.AnyResourcesForVersionEnabled(g1v1); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := false, config.AllResourcesForVersionEnabled(g1v1); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := true, config.AnyResourcesForVersionEnabled(g1v2); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := false, config.AllResourcesForVersionEnabled(g1v2); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := true, config.AnyResourcesForVersionEnabled(g3v1); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := true, config.AllResourcesForVersionEnabled(g3v1); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expectedEnabledAnyVersionResources := []schema.GroupResource{
0000000000000000000000000000000000000000;;			{Group: "group1", Resource: resourceType},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedDisabledAnyResources := []schema.GroupResource{
0000000000000000000000000000000000000000;;			{Group: "group1", Resource: disabledResourceType},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, expectedResource := range expectedEnabledAnyVersionResources {
0000000000000000000000000000000000000000;;			if !config.AnyVersionOfResourceEnabled(expectedResource) {
0000000000000000000000000000000000000000;;				t.Errorf("expected enabled for %v, from %v", expectedResource, config)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, expectedResource := range expectedDisabledAnyResources {
0000000000000000000000000000000000000000;;			if config.AnyVersionOfResourceEnabled(expectedResource) {
0000000000000000000000000000000000000000;;				t.Errorf("expected disabled for %v, from %v", expectedResource, config)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAnyResourcesForGroupEnabled(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			creator   func() APIResourceConfigSource
0000000000000000000000000000000000000000;;			testGroup string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedResult bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "empty",
0000000000000000000000000000000000000000;;				creator: func() APIResourceConfigSource {
0000000000000000000000000000000000000000;;					return NewResourceConfig()
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testGroup: "one",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedResult: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "present, but disabled",
0000000000000000000000000000000000000000;;				creator: func() APIResourceConfigSource {
0000000000000000000000000000000000000000;;					ret := NewResourceConfig()
0000000000000000000000000000000000000000;;					ret.DisableVersions(schema.GroupVersion{Group: "one", Version: "version1"})
0000000000000000000000000000000000000000;;					return ret
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testGroup: "one",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedResult: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "present, and one version enabled",
0000000000000000000000000000000000000000;;				creator: func() APIResourceConfigSource {
0000000000000000000000000000000000000000;;					ret := NewResourceConfig()
0000000000000000000000000000000000000000;;					ret.DisableVersions(schema.GroupVersion{Group: "one", Version: "version1"})
0000000000000000000000000000000000000000;;					ret.EnableVersions(schema.GroupVersion{Group: "one", Version: "version2"})
0000000000000000000000000000000000000000;;					return ret
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testGroup: "one",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "present, and one resource",
0000000000000000000000000000000000000000;;				creator: func() APIResourceConfigSource {
0000000000000000000000000000000000000000;;					ret := NewResourceConfig()
0000000000000000000000000000000000000000;;					ret.DisableVersions(schema.GroupVersion{Group: "one", Version: "version1"})
0000000000000000000000000000000000000000;;					ret.EnableResources(schema.GroupVersionResource{Group: "one", Version: "version2", Resource: "foo"})
0000000000000000000000000000000000000000;;					return ret
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				testGroup: "one",
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedResult: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			if e, a := tc.expectedResult, tc.creator().AnyResourcesForGroupEnabled(tc.testGroup); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
