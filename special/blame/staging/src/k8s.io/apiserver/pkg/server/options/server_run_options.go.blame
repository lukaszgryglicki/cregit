0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b2f86779141221b4a1bc389da79181493c090dc5;pkg/genericapiserver/server_run_options.go[pkg/genericapiserver/server_run_options.go][staging/src/k8s.io/apiserver/pkg/server/options/server_run_options.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		utilfeature "k8s.io/apiserver/pkg/util/feature"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// add the generic feature gates
0000000000000000000000000000000000000000;;		_ "k8s.io/apiserver/pkg/features"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerRunOptions contains the options while running a generic api server.
0000000000000000000000000000000000000000;;	type ServerRunOptions struct {
0000000000000000000000000000000000000000;;		AdvertiseAddress net.IP
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CorsAllowedOriginList       []string
0000000000000000000000000000000000000000;;		ExternalHost                string
0000000000000000000000000000000000000000;;		MaxRequestsInFlight         int
0000000000000000000000000000000000000000;;		MaxMutatingRequestsInFlight int
0000000000000000000000000000000000000000;;		MinRequestTimeout           int
0000000000000000000000000000000000000000;;		TargetRAMMB                 int
0000000000000000000000000000000000000000;;		WatchCacheSizes             []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewServerRunOptions() *ServerRunOptions {
0000000000000000000000000000000000000000;;		defaults := server.NewConfig(serializer.CodecFactory{})
0000000000000000000000000000000000000000;;		return &ServerRunOptions{
0000000000000000000000000000000000000000;;			MaxRequestsInFlight:         defaults.MaxRequestsInFlight,
0000000000000000000000000000000000000000;;			MaxMutatingRequestsInFlight: defaults.MaxMutatingRequestsInFlight,
0000000000000000000000000000000000000000;;			MinRequestTimeout:           defaults.MinRequestTimeout,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ApplyOptions applies the run options to the method receiver and returns self
0000000000000000000000000000000000000000;;	func (s *ServerRunOptions) ApplyTo(c *server.Config) error {
0000000000000000000000000000000000000000;;		c.CorsAllowedOriginList = s.CorsAllowedOriginList
0000000000000000000000000000000000000000;;		c.ExternalAddress = s.ExternalHost
0000000000000000000000000000000000000000;;		c.MaxRequestsInFlight = s.MaxRequestsInFlight
0000000000000000000000000000000000000000;;		c.MaxMutatingRequestsInFlight = s.MaxMutatingRequestsInFlight
0000000000000000000000000000000000000000;;		c.MinRequestTimeout = s.MinRequestTimeout
0000000000000000000000000000000000000000;;		c.PublicAddress = s.AdvertiseAddress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultAdvertiseAddress sets the field AdvertiseAddress if unset. The field will be set based on the SecureServingOptions.
0000000000000000000000000000000000000000;;	func (s *ServerRunOptions) DefaultAdvertiseAddress(secure *SecureServingOptions) error {
0000000000000000000000000000000000000000;;		if secure == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.AdvertiseAddress == nil || s.AdvertiseAddress.IsUnspecified() {
0000000000000000000000000000000000000000;;			hostIP, err := secure.DefaultExternalAddress()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("Unable to find suitable network address.error='%v'. "+
0000000000000000000000000000000000000000;;					"Try to set the AdvertiseAddress directly or provide a valid BindAddress to fix this.", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s.AdvertiseAddress = hostIP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddFlags adds flags for a specific APIServer to the specified FlagSet
0000000000000000000000000000000000000000;;	func (s *ServerRunOptions) AddUniversalFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		// Note: the weird ""+ in below lines seems to be the only way to get gofmt to
0000000000000000000000000000000000000000;;		// arrange these text blocks sensibly. Grrr.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IPVar(&s.AdvertiseAddress, "advertise-address", s.AdvertiseAddress, ""+
0000000000000000000000000000000000000000;;			"The IP address on which to advertise the apiserver to members of the cluster. This "+
0000000000000000000000000000000000000000;;			"address must be reachable by the rest of the cluster. If blank, the --bind-address "+
0000000000000000000000000000000000000000;;			"will be used. If --bind-address is unspecified, the host's default interface will "+
0000000000000000000000000000000000000000;;			"be used.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringSliceVar(&s.CorsAllowedOriginList, "cors-allowed-origins", s.CorsAllowedOriginList, ""+
0000000000000000000000000000000000000000;;			"List of allowed origins for CORS, comma separated.  An allowed origin can be a regular "+
0000000000000000000000000000000000000000;;			"expression to support subdomain matching. If this list is empty CORS will not be enabled.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.TargetRAMMB, "target-ram-mb", s.TargetRAMMB,
0000000000000000000000000000000000000000;;			"Memory limit for apiserver in MB (used to configure sizes of caches, etc.)")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.ExternalHost, "external-hostname", s.ExternalHost,
0000000000000000000000000000000000000000;;			"The hostname to use when generating externalized URLs for this master (e.g. Swagger API Docs).")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: remove post-1.6
0000000000000000000000000000000000000000;;		fs.String("long-running-request-regexp", "", ""+
0000000000000000000000000000000000000000;;			"A regular expression matching long running requests which should "+
0000000000000000000000000000000000000000;;			"be excluded from maximum inflight request handling.")
0000000000000000000000000000000000000000;;		fs.MarkDeprecated("long-running-request-regexp", "regular expression matching of long-running requests is no longer supported")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deprecatedMasterServiceNamespace := metav1.NamespaceDefault
0000000000000000000000000000000000000000;;		fs.StringVar(&deprecatedMasterServiceNamespace, "master-service-namespace", deprecatedMasterServiceNamespace, ""+
0000000000000000000000000000000000000000;;			"DEPRECATED: the namespace from which the kubernetes master services should be injected into pods.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.MaxRequestsInFlight, "max-requests-inflight", s.MaxRequestsInFlight, ""+
0000000000000000000000000000000000000000;;			"The maximum number of non-mutating requests in flight at a given time. When the server exceeds this, "+
0000000000000000000000000000000000000000;;			"it rejects requests. Zero for no limit.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.MaxMutatingRequestsInFlight, "max-mutating-requests-inflight", s.MaxMutatingRequestsInFlight, ""+
0000000000000000000000000000000000000000;;			"The maximum number of mutating requests in flight at a given time. When the server exceeds this, "+
0000000000000000000000000000000000000000;;			"it rejects requests. Zero for no limit.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.MinRequestTimeout, "min-request-timeout", s.MinRequestTimeout, ""+
0000000000000000000000000000000000000000;;			"An optional field indicating the minimum number of seconds a handler must keep "+
0000000000000000000000000000000000000000;;			"a request open before timing it out. Currently only honored by the watch request "+
0000000000000000000000000000000000000000;;			"handler, which picks a randomized value above this number as the connection timeout, "+
0000000000000000000000000000000000000000;;			"to spread out load.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringSliceVar(&s.WatchCacheSizes, "watch-cache-sizes", s.WatchCacheSizes, ""+
0000000000000000000000000000000000000000;;			"List of watch cache sizes for every resource (pods, nodes, etc.), comma separated. "+
0000000000000000000000000000000000000000;;			"The individual override format: resource#size, where size is a number. It takes effect "+
0000000000000000000000000000000000000000;;			"when watch-cache is enabled.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilfeature.DefaultFeatureGate.AddFlag(fs)
0000000000000000000000000000000000000000;;	}
