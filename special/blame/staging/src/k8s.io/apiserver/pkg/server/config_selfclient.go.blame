0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
da418b09948f9ed85ff8dbc0a8915a69a3e2d2aa;pkg/genericapiserver/config_selfclient.go[pkg/genericapiserver/config_selfclient.go][staging/src/k8s.io/apiserver/pkg/server/config_selfclient.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoopbackClientServerNameOverride is passed to the apiserver from the loopback client in order to
0000000000000000000000000000000000000000;;	// select the loopback certificate via SNI if TLS is used.
0000000000000000000000000000000000000000;;	const LoopbackClientServerNameOverride = "apiserver-loopback-client"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SecureServingInfo) NewLoopbackClientConfig(token string, loopbackCert []byte) (*restclient.Config, error) {
0000000000000000000000000000000000000000;;		if s == nil || (s.Cert == nil && len(s.SNICerts) == 0) {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		host, port, err := LoopbackHostPort(s.BindAddress)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &restclient.Config{
0000000000000000000000000000000000000000;;			// Increase QPS limits. The client is currently passed to all admission plugins,
0000000000000000000000000000000000000000;;			// and those can be throttled in case of higher load on apiserver - see #22340 and #22422
0000000000000000000000000000000000000000;;			// for more details. Once #22422 is fixed, we may want to remove it.
0000000000000000000000000000000000000000;;			QPS:         50,
0000000000000000000000000000000000000000;;			Burst:       100,
0000000000000000000000000000000000000000;;			Host:        "https://" + net.JoinHostPort(host, port),
0000000000000000000000000000000000000000;;			BearerToken: token,
0000000000000000000000000000000000000000;;			// override the ServerName to select our loopback certificate via SNI. This name is also
0000000000000000000000000000000000000000;;			// used by the client to compare the returns server certificate against.
0000000000000000000000000000000000000000;;			TLSClientConfig: restclient.TLSClientConfig{
0000000000000000000000000000000000000000;;				ServerName: LoopbackClientServerNameOverride,
0000000000000000000000000000000000000000;;				CAData:     loopbackCert,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LoopbackHostPort returns the host and port loopback REST clients should use
0000000000000000000000000000000000000000;;	// to contact the server.
0000000000000000000000000000000000000000;;	func LoopbackHostPort(bindAddress string) (string, string, error) {
0000000000000000000000000000000000000000;;		host, port, err := net.SplitHostPort(bindAddress)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// should never happen
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("invalid server bind address: %q", bindAddress)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value is expected to be an IP or DNS name, not "0.0.0.0".
0000000000000000000000000000000000000000;;		if host == "0.0.0.0" {
0000000000000000000000000000000000000000;;			host = "localhost"
0000000000000000000000000000000000000000;;			// Get ip of local interface, but fall back to "localhost".
0000000000000000000000000000000000000000;;			// Note that "localhost" is resolved with the external nameserver first with Go's stdlib.
0000000000000000000000000000000000000000;;			// So if localhost.<yoursearchdomain> resolves, we don't get a 127.0.0.1 as expected.
0000000000000000000000000000000000000000;;			addrs, err := net.InterfaceAddrs()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				for _, address := range addrs {
0000000000000000000000000000000000000000;;					if ipnet, ok := address.(*net.IPNet); ok && ipnet.IP.IsLoopback() {
0000000000000000000000000000000000000000;;						host = ipnet.IP.String()
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return host, port, nil
0000000000000000000000000000000000000000;;	}
