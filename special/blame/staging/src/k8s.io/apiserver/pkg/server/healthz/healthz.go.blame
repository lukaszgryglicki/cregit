0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
1dc8e7156d1d6bd5779ebf1aaa1ed73a2a1234ba;pkg/healthz/healthz.go[pkg/healthz/healthz.go][staging/src/k8s.io/apiserver/pkg/server/healthz/healthz.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package healthz
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HealthzChecker is a named healthz checker.
0000000000000000000000000000000000000000;;	type HealthzChecker interface {
0000000000000000000000000000000000000000;;		Name() string
0000000000000000000000000000000000000000;;		Check(req *http.Request) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var defaultHealthz = sync.Once{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultHealthz installs the default healthz check to the http.DefaultServeMux.
0000000000000000000000000000000000000000;;	func DefaultHealthz(checks ...HealthzChecker) {
0000000000000000000000000000000000000000;;		defaultHealthz.Do(func() {
0000000000000000000000000000000000000000;;			InstallHandler(http.DefaultServeMux, checks...)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PingHealthz returns true automatically when checked
0000000000000000000000000000000000000000;;	var PingHealthz HealthzChecker = ping{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ping implements the simplest possible healthz checker.
0000000000000000000000000000000000000000;;	type ping struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ping) Name() string {
0000000000000000000000000000000000000000;;		return "ping"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PingHealthz is a health check that returns true.
0000000000000000000000000000000000000000;;	func (ping) Check(_ *http.Request) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedCheck returns a healthz checker for the given name and function.
0000000000000000000000000000000000000000;;	func NamedCheck(name string, check func(r *http.Request) error) HealthzChecker {
0000000000000000000000000000000000000000;;		return &healthzCheck{name, check}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstallHandler registers a handler for health checking on the path "/healthz" to mux.
0000000000000000000000000000000000000000;;	func InstallHandler(mux mux, checks ...HealthzChecker) {
0000000000000000000000000000000000000000;;		if len(checks) == 0 {
0000000000000000000000000000000000000000;;			checks = []HealthzChecker{PingHealthz}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mux.Handle("/healthz", handleRootHealthz(checks...))
0000000000000000000000000000000000000000;;		for _, check := range checks {
0000000000000000000000000000000000000000;;			mux.Handle(fmt.Sprintf("/healthz/%v", check.Name()), adaptCheckToHandler(check.Check))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mux is an interface describing the methods InstallHandler requires.
0000000000000000000000000000000000000000;;	type mux interface {
0000000000000000000000000000000000000000;;		Handle(pattern string, handler http.Handler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// healthzCheck implements HealthzChecker on an arbitrary name and check function.
0000000000000000000000000000000000000000;;	type healthzCheck struct {
0000000000000000000000000000000000000000;;		name  string
0000000000000000000000000000000000000000;;		check func(r *http.Request) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ HealthzChecker = &healthzCheck{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *healthzCheck) Name() string {
0000000000000000000000000000000000000000;;		return c.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *healthzCheck) Check(r *http.Request) error {
0000000000000000000000000000000000000000;;		return c.check(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// handleRootHealthz returns an http.HandlerFunc that serves the provided checks.
0000000000000000000000000000000000000000;;	func handleRootHealthz(checks ...HealthzChecker) http.HandlerFunc {
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			failed := false
0000000000000000000000000000000000000000;;			var verboseOut bytes.Buffer
0000000000000000000000000000000000000000;;			for _, check := range checks {
0000000000000000000000000000000000000000;;				if check.Check(r) != nil {
0000000000000000000000000000000000000000;;					// don't include the error since this endpoint is public.  If someone wants more detail
0000000000000000000000000000000000000000;;					// they should have explicit permission to the detailed checks.
0000000000000000000000000000000000000000;;					fmt.Fprintf(&verboseOut, "[-]%v failed: reason withheld\n", check.Name())
0000000000000000000000000000000000000000;;					failed = true
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					fmt.Fprintf(&verboseOut, "[+]%v ok\n", check.Name())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// always be verbose on failure
0000000000000000000000000000000000000000;;			if failed {
0000000000000000000000000000000000000000;;				http.Error(w, fmt.Sprintf("%vhealthz check failed", verboseOut.String()), http.StatusInternalServerError)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, found := r.URL.Query()["verbose"]; !found {
0000000000000000000000000000000000000000;;				fmt.Fprint(w, "ok")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			verboseOut.WriteTo(w)
0000000000000000000000000000000000000000;;			fmt.Fprint(w, "healthz check passed\n")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// adaptCheckToHandler returns an http.HandlerFunc that serves the provided checks.
0000000000000000000000000000000000000000;;	func adaptCheckToHandler(c func(r *http.Request) error) http.HandlerFunc {
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			err := c(r)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				http.Error(w, fmt.Sprintf("internal server error: %v", err), http.StatusInternalServerError)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Fprint(w, "ok")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
