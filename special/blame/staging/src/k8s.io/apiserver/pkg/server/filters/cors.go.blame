0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8e5dbdd02c2eaa420abecbec0f800f9e5c8f9f8b;pkg/genericapiserver/filters/cors.go[pkg/genericapiserver/filters/cors.go][staging/src/k8s.io/apiserver/pkg/server/filters/cors.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: use restful.CrossOriginResourceSharing
0000000000000000000000000000000000000000;;	// See github.com/emicklei/go-restful/blob/master/examples/restful-CORS-filter.go, and
0000000000000000000000000000000000000000;;	// github.com/emicklei/go-restful/blob/master/examples/restful-basic-authentication.go
0000000000000000000000000000000000000000;;	// Or, for a more detailed implementation use https://github.com/martini-contrib/cors
0000000000000000000000000000000000000000;;	// or implement CORS at your proxy layer.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCORS is a simple CORS implementation that wraps an http Handler.
0000000000000000000000000000000000000000;;	// Pass nil for allowedMethods and allowedHeaders to use the defaults. If allowedOriginPatterns
0000000000000000000000000000000000000000;;	// is empty or nil, no CORS support is installed.
0000000000000000000000000000000000000000;;	func WithCORS(handler http.Handler, allowedOriginPatterns []string, allowedMethods []string, allowedHeaders []string, exposedHeaders []string, allowCredentials string) http.Handler {
0000000000000000000000000000000000000000;;		if len(allowedOriginPatterns) == 0 {
0000000000000000000000000000000000000000;;			return handler
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		allowedOriginPatternsREs := allowedOriginRegexps(allowedOriginPatterns)
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			origin := req.Header.Get("Origin")
0000000000000000000000000000000000000000;;			if origin != "" {
0000000000000000000000000000000000000000;;				allowed := false
0000000000000000000000000000000000000000;;				for _, re := range allowedOriginPatternsREs {
0000000000000000000000000000000000000000;;					if allowed = re.MatchString(origin); allowed {
0000000000000000000000000000000000000000;;						break
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if allowed {
0000000000000000000000000000000000000000;;					w.Header().Set("Access-Control-Allow-Origin", origin)
0000000000000000000000000000000000000000;;					// Set defaults for methods and headers if nothing was passed
0000000000000000000000000000000000000000;;					if allowedMethods == nil {
0000000000000000000000000000000000000000;;						allowedMethods = []string{"POST", "GET", "OPTIONS", "PUT", "DELETE", "PATCH"}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if allowedHeaders == nil {
0000000000000000000000000000000000000000;;						allowedHeaders = []string{"Content-Type", "Content-Length", "Accept-Encoding", "X-CSRF-Token", "Authorization", "X-Requested-With", "If-Modified-Since"}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if exposedHeaders == nil {
0000000000000000000000000000000000000000;;						exposedHeaders = []string{"Date"}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Access-Control-Allow-Methods", strings.Join(allowedMethods, ", "))
0000000000000000000000000000000000000000;;					w.Header().Set("Access-Control-Allow-Headers", strings.Join(allowedHeaders, ", "))
0000000000000000000000000000000000000000;;					w.Header().Set("Access-Control-Expose-Headers", strings.Join(exposedHeaders, ", "))
0000000000000000000000000000000000000000;;					w.Header().Set("Access-Control-Allow-Credentials", allowCredentials)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Stop here if its a preflight OPTIONS request
0000000000000000000000000000000000000000;;					if req.Method == "OPTIONS" {
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNoContent)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Dispatch to the next handler
0000000000000000000000000000000000000000;;			handler.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func allowedOriginRegexps(allowedOrigins []string) []*regexp.Regexp {
0000000000000000000000000000000000000000;;		res, err := compileRegexps(allowedOrigins)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Invalid CORS allowed origin, --cors-allowed-origins flag was set to %v - %v", strings.Join(allowedOrigins, ","), err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return res
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Takes a list of strings and compiles them into a list of regular expressions
0000000000000000000000000000000000000000;;	func compileRegexps(regexpStrings []string) ([]*regexp.Regexp, error) {
0000000000000000000000000000000000000000;;		regexps := []*regexp.Regexp{}
0000000000000000000000000000000000000000;;		for _, regexpStr := range regexpStrings {
0000000000000000000000000000000000000000;;			r, err := regexp.Compile(regexpStr)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return []*regexp.Regexp{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			regexps = append(regexps, r)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return regexps, nil
0000000000000000000000000000000000000000;;	}
