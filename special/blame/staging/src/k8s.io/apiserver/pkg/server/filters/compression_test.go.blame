0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
27962518eaf04bb3898519189a335b68adf6da5a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"compress/gzip"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/filters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCompression(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			encoding string
0000000000000000000000000000000000000000;;			watch    bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"", false},
0000000000000000000000000000000000000000;;			{"gzip", true},
0000000000000000000000000000000000000000;;			{"gzip", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responseData := []byte("1234")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		requestContextMapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			handler := WithCompression(
0000000000000000000000000000000000000000;;				http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					w.Write(responseData)
0000000000000000000000000000000000000000;;				}),
0000000000000000000000000000000000000000;;				requestContextMapper,
0000000000000000000000000000000000000000;;			)
0000000000000000000000000000000000000000;;			handler = filters.WithRequestInfo(handler, newTestRequestInfoResolver(), requestContextMapper)
0000000000000000000000000000000000000000;;			handler = request.WithRequestContext(handler, requestContextMapper)
0000000000000000000000000000000000000000;;			server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;			client := http.Client{
0000000000000000000000000000000000000000;;				Transport: &http.Transport{
0000000000000000000000000000000000000000;;					DisableCompression: true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			url := server.URL + "/api/v1/pods"
0000000000000000000000000000000000000000;;			if test.watch {
0000000000000000000000000000000000000000;;				url = url + "?watch=1"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			request, err := http.NewRequest("GET", url, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			request.Header.Set("Accept-Encoding", test.encoding)
0000000000000000000000000000000000000000;;			response, err := client.Do(request)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var reader io.Reader
0000000000000000000000000000000000000000;;			if test.encoding == "gzip" && !test.watch {
0000000000000000000000000000000000000000;;				if response.Header.Get("Content-Encoding") != "gzip" {
0000000000000000000000000000000000000000;;					t.Fatal("expected response header Content-Encoding to be set to \"gzip\"")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if response.Header.Get("Vary") != "Accept-Encoding" {
0000000000000000000000000000000000000000;;					t.Fatal("expected response header Vary to be set to \"Accept-Encoding\"")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				reader, err = gzip.NewReader(response.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if response.Header.Get("Content-Encoding") == "gzip" {
0000000000000000000000000000000000000000;;					t.Fatal("expected response header Content-Encoding not to be set")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				reader = response.Body
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			body, err := ioutil.ReadAll(reader)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatal("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !bytes.Equal(body, responseData) {
0000000000000000000000000000000000000000;;				t.Fatalf("Expected response body %s to equal %s", body, responseData)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTestRequestInfoResolver() *request.RequestInfoFactory {
0000000000000000000000000000000000000000;;		return &request.RequestInfoFactory{
0000000000000000000000000000000000000000;;			APIPrefixes:          sets.NewString("api", "apis"),
0000000000000000000000000000000000000000;;			GrouplessAPIPrefixes: sets.NewString("api"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
