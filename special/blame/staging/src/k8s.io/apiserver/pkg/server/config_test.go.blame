0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
66e4cb7fd3262540e43581b42d1cfde46b696117;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/healthz"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/informers"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewWithDelegate(t *testing.T) {
0000000000000000000000000000000000000000;;		delegateConfig := NewConfig(codecs)
0000000000000000000000000000000000000000;;		delegateConfig.PublicAddress = net.ParseIP("192.168.10.4")
0000000000000000000000000000000000000000;;		delegateConfig.RequestContextMapper = genericapirequest.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		delegateConfig.LegacyAPIGroupPrefixes = sets.NewString("/api")
0000000000000000000000000000000000000000;;		delegateConfig.LoopbackClientConfig = &rest.Config{}
0000000000000000000000000000000000000000;;		delegateConfig.SwaggerConfig = DefaultSwaggerConfig()
0000000000000000000000000000000000000000;;		clientset := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;		if clientset == nil {
0000000000000000000000000000000000000000;;			t.Fatal("unable to create fake client set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegateConfig.SharedInformerFactory = informers.NewSharedInformerFactory(clientset, delegateConfig.LoopbackClientConfig.Timeout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delegateHealthzCalled := false
0000000000000000000000000000000000000000;;		delegateConfig.HealthzChecks = append(delegateConfig.HealthzChecks, healthz.NamedCheck("delegate-health", func(r *http.Request) error {
0000000000000000000000000000000000000000;;			delegateHealthzCalled = true
0000000000000000000000000000000000000000;;			return fmt.Errorf("delegate failed healthcheck")
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delegateServer, err := delegateConfig.SkipComplete().New("test", EmptyDelegate)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		delegateServer.Handler.NonGoRestfulMux.HandleFunc("/foo", func(w http.ResponseWriter, _ *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusForbidden)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		delegateServer.AddPostStartHook("delegate-post-start-hook", func(context PostStartHookContext) error {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// this wires up swagger
0000000000000000000000000000000000000000;;		delegateServer.PrepareRun()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrappingConfig := NewConfig(codecs)
0000000000000000000000000000000000000000;;		wrappingConfig.PublicAddress = net.ParseIP("192.168.10.4")
0000000000000000000000000000000000000000;;		wrappingConfig.RequestContextMapper = genericapirequest.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		wrappingConfig.LegacyAPIGroupPrefixes = sets.NewString("/api")
0000000000000000000000000000000000000000;;		wrappingConfig.LoopbackClientConfig = &rest.Config{}
0000000000000000000000000000000000000000;;		wrappingConfig.SwaggerConfig = DefaultSwaggerConfig()
0000000000000000000000000000000000000000;;		wrappingConfig.SharedInformerFactory = informers.NewSharedInformerFactory(clientset, wrappingConfig.LoopbackClientConfig.Timeout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrappingHealthzCalled := false
0000000000000000000000000000000000000000;;		wrappingConfig.HealthzChecks = append(wrappingConfig.HealthzChecks, healthz.NamedCheck("wrapping-health", func(r *http.Request) error {
0000000000000000000000000000000000000000;;			wrappingHealthzCalled = true
0000000000000000000000000000000000000000;;			return fmt.Errorf("wrapping failed healthcheck")
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrappingServer, err := wrappingConfig.Complete().New("test", delegateServer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wrappingServer.Handler.NonGoRestfulMux.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusUnauthorized)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wrappingServer.AddPostStartHook("wrapping-post-start-hook", func(context PostStartHookContext) error {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stopCh := make(chan struct{})
0000000000000000000000000000000000000000;;		defer close(stopCh)
0000000000000000000000000000000000000000;;		wrappingServer.PrepareRun()
0000000000000000000000000000000000000000;;		wrappingServer.RunPostStartHooks(stopCh)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(wrappingServer.Handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		checkPath(server.URL, http.StatusOK, `{
0000000000000000000000000000000000000000;;	  "paths": [
0000000000000000000000000000000000000000;;	    "/apis",
0000000000000000000000000000000000000000;;	    "/bar",
0000000000000000000000000000000000000000;;	    "/foo",
0000000000000000000000000000000000000000;;	    "/healthz",
0000000000000000000000000000000000000000;;	    "/healthz/delegate-health",
0000000000000000000000000000000000000000;;	    "/healthz/ping",
0000000000000000000000000000000000000000;;	    "/healthz/poststarthook/delegate-post-start-hook",
0000000000000000000000000000000000000000;;	    "/healthz/poststarthook/generic-apiserver-start-informers",
0000000000000000000000000000000000000000;;	    "/healthz/poststarthook/wrapping-post-start-hook",
0000000000000000000000000000000000000000;;	    "/healthz/wrapping-health",
0000000000000000000000000000000000000000;;	    "/swaggerapi"
0000000000000000000000000000000000000000;;	  ]
0000000000000000000000000000000000000000;;	}`, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/healthz", http.StatusInternalServerError, `[+]ping ok
0000000000000000000000000000000000000000;;	[-]wrapping-health failed: reason withheld
0000000000000000000000000000000000000000;;	[-]delegate-health failed: reason withheld
0000000000000000000000000000000000000000;;	[+]poststarthook/generic-apiserver-start-informers ok
0000000000000000000000000000000000000000;;	[+]poststarthook/delegate-post-start-hook ok
0000000000000000000000000000000000000000;;	[+]poststarthook/wrapping-post-start-hook ok
0000000000000000000000000000000000000000;;	healthz check failed
0000000000000000000000000000000000000000;;	`, t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/healthz/delegate-health", http.StatusInternalServerError, `internal server error: delegate failed healthcheck
0000000000000000000000000000000000000000;;	`, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/healthz/wrapping-health", http.StatusInternalServerError, `internal server error: wrapping failed healthcheck
0000000000000000000000000000000000000000;;	`, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/healthz/poststarthook/delegate-post-start-hook", http.StatusOK, `ok`, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/healthz/poststarthook/wrapping-post-start-hook", http.StatusOK, `ok`, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/foo", http.StatusForbidden, ``, t)
0000000000000000000000000000000000000000;;		checkPath(server.URL+"/bar", http.StatusUnauthorized, ``, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkPath(url string, expectedStatusCode int, expectedBody string, t *testing.T) {
0000000000000000000000000000000000000000;;		resp, err := http.Get(url)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dump, _ := httputil.DumpResponse(resp, true)
0000000000000000000000000000000000000000;;		t.Log(string(dump))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := expectedBody, string(body); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("%q expected %v, got %v", url, e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expectedStatusCode, resp.StatusCode; e != a {
0000000000000000000000000000000000000000;;			t.Errorf("%q expected %v, got %v", url, e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
