0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e545bf7cbd4a4afc6c5610b883a1f78e9399a404;pkg/genericapiserver/mux/container_test.go[pkg/genericapiserver/mux/container_test.go][staging/src/k8s.io/apiserver/pkg/server/mux/pathrecorder_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package mux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSecretHandlers(t *testing.T) {
0000000000000000000000000000000000000000;;		c := NewPathRecorderMux("test")
0000000000000000000000000000000000000000;;		c.UnlistedHandleFunc("/secret", func(http.ResponseWriter, *http.Request) {})
0000000000000000000000000000000000000000;;		c.HandleFunc("/nonswagger", func(http.ResponseWriter, *http.Request) {})
0000000000000000000000000000000000000000;;		assert.NotContains(t, c.ListedPaths(), "/secret")
0000000000000000000000000000000000000000;;		assert.Contains(t, c.ListedPaths(), "/nonswagger")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnregisterHandlers(t *testing.T) {
0000000000000000000000000000000000000000;;		first := 0
0000000000000000000000000000000000000000;;		second := 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := NewPathRecorderMux("test")
0000000000000000000000000000000000000000;;		s := httptest.NewServer(c)
0000000000000000000000000000000000000000;;		defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.UnlistedHandleFunc("/secret", func(http.ResponseWriter, *http.Request) {})
0000000000000000000000000000000000000000;;		c.HandleFunc("/nonswagger", func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			first = first + 1
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.NotContains(t, c.ListedPaths(), "/secret")
0000000000000000000000000000000000000000;;		assert.Contains(t, c.ListedPaths(), "/nonswagger")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, _ := http.Get(s.URL + "/nonswagger")
0000000000000000000000000000000000000000;;		assert.Equal(t, first, 1)
0000000000000000000000000000000000000000;;		assert.Equal(t, resp.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Unregister("/nonswagger")
0000000000000000000000000000000000000000;;		assert.NotContains(t, c.ListedPaths(), "/nonswagger")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, _ = http.Get(s.URL + "/nonswagger")
0000000000000000000000000000000000000000;;		assert.Equal(t, first, 1)
0000000000000000000000000000000000000000;;		assert.Equal(t, resp.StatusCode, http.StatusNotFound)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.HandleFunc("/nonswagger", func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			second = second + 1
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.Contains(t, c.ListedPaths(), "/nonswagger")
0000000000000000000000000000000000000000;;		resp, _ = http.Get(s.URL + "/nonswagger")
0000000000000000000000000000000000000000;;		assert.Equal(t, first, 1)
0000000000000000000000000000000000000000;;		assert.Equal(t, second, 1)
0000000000000000000000000000000000000000;;		assert.Equal(t, resp.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrefixHandlers(t *testing.T) {
0000000000000000000000000000000000000000;;		c := NewPathRecorderMux("test")
0000000000000000000000000000000000000000;;		s := httptest.NewServer(c)
0000000000000000000000000000000000000000;;		defer s.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		secretPrefixCount := 0
0000000000000000000000000000000000000000;;		c.UnlistedHandlePrefix("/secretPrefix/", http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			secretPrefixCount = secretPrefixCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		publicPrefixCount := 0
0000000000000000000000000000000000000000;;		c.HandlePrefix("/publicPrefix/", http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			publicPrefixCount = publicPrefixCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		precisePrefixCount := 0
0000000000000000000000000000000000000000;;		c.HandlePrefix("/publicPrefix/but-more-precise/", http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			precisePrefixCount = precisePrefixCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		exactMatchCount := 0
0000000000000000000000000000000000000000;;		c.Handle("/publicPrefix/exactmatch", http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			exactMatchCount = exactMatchCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		slashMatchCount := 0
0000000000000000000000000000000000000000;;		c.Handle("/otherPublic/exactmatchslash/", http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			slashMatchCount = slashMatchCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		fallThroughCount := 0
0000000000000000000000000000000000000000;;		c.NotFoundHandler(http.HandlerFunc(func(http.ResponseWriter, *http.Request) {
0000000000000000000000000000000000000000;;			fallThroughCount = fallThroughCount + 1
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.NotContains(t, c.ListedPaths(), "/secretPrefix/")
0000000000000000000000000000000000000000;;		assert.Contains(t, c.ListedPaths(), "/publicPrefix/")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, _ := http.Get(s.URL + "/fallthrough")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, fallThroughCount)
0000000000000000000000000000000000000000;;		assert.Equal(t, resp.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;		resp, _ = http.Get(s.URL + "/publicPrefix")
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, fallThroughCount)
0000000000000000000000000000000000000000;;		assert.Equal(t, resp.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, publicPrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/something")
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, publicPrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/but-more-precise")
0000000000000000000000000000000000000000;;		assert.Equal(t, 3, publicPrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/but-more-precise/")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, precisePrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/but-more-precise/more-stuff")
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, precisePrefixCount)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/exactmatch")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, exactMatchCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/publicPrefix/exactmatch/")
0000000000000000000000000000000000000000;;		assert.Equal(t, 4, publicPrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/otherPublic/exactmatchslash")
0000000000000000000000000000000000000000;;		assert.Equal(t, 3, fallThroughCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/otherPublic/exactmatchslash/")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, slashMatchCount)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/secretPrefix/")
0000000000000000000000000000000000000000;;		assert.Equal(t, 1, secretPrefixCount)
0000000000000000000000000000000000000000;;		http.Get(s.URL + "/secretPrefix/something")
0000000000000000000000000000000000000000;;		assert.Equal(t, 2, secretPrefixCount)
0000000000000000000000000000000000000000;;	}
