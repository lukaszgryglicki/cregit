0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a08528ac1a8a5ead8743fbd6b5109e2712ad900a;pkg/apiserver/index.go[pkg/apiserver/index.go][staging/src/k8s.io/apiserver/pkg/server/routes/index.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package routes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/handlers/responsewriters"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/mux"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListedPathProvider is an interface for providing paths that should be reported at /.
0000000000000000000000000000000000000000;;	type ListedPathProvider interface {
0000000000000000000000000000000000000000;;		// ListedPaths is an alphabetically sorted list of paths to be reported at /.
0000000000000000000000000000000000000000;;		ListedPaths() []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListedPathProviders is a convenient way to combine multiple ListedPathProviders
0000000000000000000000000000000000000000;;	type ListedPathProviders []ListedPathProvider
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListedPaths unions and sorts the included paths.
0000000000000000000000000000000000000000;;	func (p ListedPathProviders) ListedPaths() []string {
0000000000000000000000000000000000000000;;		ret := sets.String{}
0000000000000000000000000000000000000000;;		for _, provider := range p {
0000000000000000000000000000000000000000;;			for _, path := range provider.ListedPaths() {
0000000000000000000000000000000000000000;;				ret.Insert(path)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret.List()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Index provides a webservice for the http root / listing all known paths.
0000000000000000000000000000000000000000;;	type Index struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Install adds the Index webservice to the given mux.
0000000000000000000000000000000000000000;;	func (i Index) Install(pathProvider ListedPathProvider, mux *mux.PathRecorderMux) {
0000000000000000000000000000000000000000;;		handler := IndexLister{StatusCode: http.StatusOK, PathProvider: pathProvider}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mux.UnlistedHandle("/", handler)
0000000000000000000000000000000000000000;;		mux.UnlistedHandle("/index.html", handler)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IndexLister lists the available indexes with the status code provided
0000000000000000000000000000000000000000;;	type IndexLister struct {
0000000000000000000000000000000000000000;;		StatusCode   int
0000000000000000000000000000000000000000;;		PathProvider ListedPathProvider
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServeHTTP serves the available paths.
0000000000000000000000000000000000000000;;	func (i IndexLister) ServeHTTP(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		responsewriters.WriteRawJSON(i.StatusCode, metav1.RootPaths{Paths: i.PathProvider.ListedPaths()}, w)
0000000000000000000000000000000000000000;;	}
