0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6f76738a54845c3750ed3075347597daab3049ad;pkg/httplog/log_test.go[pkg/httplog/log_test.go][staging/src/k8s.io/apiserver/pkg/server/httplog/log_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package httplog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDefaultStacktracePred(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, x := range []int{101, 200, 204, 302, 400, 404} {
0000000000000000000000000000000000000000;;			if DefaultStacktracePred(x) {
0000000000000000000000000000000000000000;;				t.Fatalf("should not log on %v by default", x)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, x := range []int{500, 100} {
0000000000000000000000000000000000000000;;			if !DefaultStacktracePred(x) {
0000000000000000000000000000000000000000;;				t.Fatalf("should log on %v by default", x)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		want := &httptest.ResponseRecorder{
0000000000000000000000000000000000000000;;			HeaderMap: make(http.Header),
0000000000000000000000000000000000000000;;			Body:      new(bytes.Buffer),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		want.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		mux := http.NewServeMux()
0000000000000000000000000000000000000000;;		handler := Handler(mux, DefaultStacktracePred)
0000000000000000000000000000000000000000;;		mux.HandleFunc("/kube", func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "http://example.com/kube", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		handler.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(want, w) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", want, w)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStatusIsNot(t *testing.T) {
0000000000000000000000000000000000000000;;		statusTestTable := []struct {
0000000000000000000000000000000000000000;;			status   int
0000000000000000000000000000000000000000;;			statuses []int
0000000000000000000000000000000000000000;;			want     bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{http.StatusOK, []int{}, true},
0000000000000000000000000000000000000000;;			{http.StatusOK, []int{http.StatusOK}, false},
0000000000000000000000000000000000000000;;			{http.StatusCreated, []int{http.StatusOK, http.StatusAccepted}, true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tt := range statusTestTable {
0000000000000000000000000000000000000000;;			sp := StatusIsNot(tt.statuses...)
0000000000000000000000000000000000000000;;			got := sp(tt.status)
0000000000000000000000000000000000000000;;			if got != tt.want {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", tt.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewLogged(t *testing.T) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "http://example.com", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		handler := func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			NewLogged(req, &w)
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				if r := recover(); r == nil {
0000000000000000000000000000000000000000;;					t.Errorf("Expected NewLogged to panic")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			NewLogged(req, &w)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;		handler(w, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLogOf(t *testing.T) {
0000000000000000000000000000000000000000;;		logOfTests := []bool{true, false}
0000000000000000000000000000000000000000;;		for _, makeLogger := range logOfTests {
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", "http://example.com", nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			handler := func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				var want string
0000000000000000000000000000000000000000;;				if makeLogger {
0000000000000000000000000000000000000000;;					NewLogged(req, &w)
0000000000000000000000000000000000000000;;					want = "*httplog.respLogger"
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					want = "*httplog.passthroughLogger"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				got := reflect.TypeOf(LogOf(r, w)).String()
0000000000000000000000000000000000000000;;				if want != got {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, got %v", want, got)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;			handler(w, req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnlogged(t *testing.T) {
0000000000000000000000000000000000000000;;		unloggedTests := []bool{true, false}
0000000000000000000000000000000000000000;;		for _, makeLogger := range unloggedTests {
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", "http://example.com", nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			handler := func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				want := w
0000000000000000000000000000000000000000;;				if makeLogger {
0000000000000000000000000000000000000000;;					NewLogged(req, &w)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				got := Unlogged(w)
0000000000000000000000000000000000000000;;				if want != got {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, got %v", want, got)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w := httptest.NewRecorder()
0000000000000000000000000000000000000000;;			handler(w, req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testResponseWriter struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*testResponseWriter) Header() http.Header       { return nil }
0000000000000000000000000000000000000000;;	func (*testResponseWriter) Write([]byte) (int, error) { return 0, nil }
0000000000000000000000000000000000000000;;	func (*testResponseWriter) WriteHeader(int)           {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoggedStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", "http://example.com", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var tw http.ResponseWriter = new(testResponseWriter)
0000000000000000000000000000000000000000;;		logger := NewLogged(req, &tw)
0000000000000000000000000000000000000000;;		logger.Write(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if logger.status != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Errorf("expected status after write to be %v, got %v", http.StatusOK, logger.status)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tw = new(testResponseWriter)
0000000000000000000000000000000000000000;;		logger = NewLogged(req, &tw)
0000000000000000000000000000000000000000;;		logger.WriteHeader(http.StatusForbidden)
0000000000000000000000000000000000000000;;		logger.Write(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if logger.status != http.StatusForbidden {
0000000000000000000000000000000000000000;;			t.Errorf("expected status after write to remain %v, got %v", http.StatusForbidden, logger.status)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
