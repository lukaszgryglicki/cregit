0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8e5dbdd02c2eaa420abecbec0f800f9e5c8f9f8b;pkg/genericapiserver/filters/timeout_test.go[pkg/genericapiserver/filters/timeout_test.go][staging/src/k8s.io/apiserver/pkg/server/filters/timeout_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type recorder struct {
0000000000000000000000000000000000000000;;		lock  sync.Mutex
0000000000000000000000000000000000000000;;		count int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *recorder) Record() {
0000000000000000000000000000000000000000;;		r.lock.Lock()
0000000000000000000000000000000000000000;;		defer r.lock.Unlock()
0000000000000000000000000000000000000000;;		r.count++
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *recorder) Count() int {
0000000000000000000000000000000000000000;;		r.lock.Lock()
0000000000000000000000000000000000000000;;		defer r.lock.Unlock()
0000000000000000000000000000000000000000;;		return r.count
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		sendResponse := make(chan struct{}, 1)
0000000000000000000000000000000000000000;;		writeErrors := make(chan error, 1)
0000000000000000000000000000000000000000;;		timeout := make(chan time.Time, 1)
0000000000000000000000000000000000000000;;		resp := "test response"
0000000000000000000000000000000000000000;;		timeoutErr := apierrors.NewServerTimeout(schema.GroupResource{Group: "foo", Resource: "bar"}, "get", 0)
0000000000000000000000000000000000000000;;		record := &recorder{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ts := httptest.NewServer(WithTimeout(http.HandlerFunc(
0000000000000000000000000000000000000000;;			func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				<-sendResponse
0000000000000000000000000000000000000000;;				_, err := w.Write([]byte(resp))
0000000000000000000000000000000000000000;;				writeErrors <- err
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			func(*http.Request) (<-chan time.Time, func(), *apierrors.StatusError) {
0000000000000000000000000000000000000000;;				return timeout, record.Record, timeoutErr
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;		defer ts.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// No timeouts
0000000000000000000000000000000000000000;;		sendResponse <- struct{}{}
0000000000000000000000000000000000000000;;		res, err := http.Get(ts.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;			t.Errorf("got res.StatusCode %d; expected %d", res.StatusCode, http.StatusOK)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body, _ := ioutil.ReadAll(res.Body)
0000000000000000000000000000000000000000;;		if string(body) != resp {
0000000000000000000000000000000000000000;;			t.Errorf("got body %q; expected %q", string(body), resp)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := <-writeErrors; err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("got unexpected Write error on first request: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if record.Count() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("invoked record method: %#v", record)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Times out
0000000000000000000000000000000000000000;;		timeout <- time.Time{}
0000000000000000000000000000000000000000;;		res, err = http.Get(ts.URL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res.StatusCode != http.StatusGatewayTimeout {
0000000000000000000000000000000000000000;;			t.Errorf("got res.StatusCode %d; expected %d", res.StatusCode, http.StatusServiceUnavailable)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		body, _ = ioutil.ReadAll(res.Body)
0000000000000000000000000000000000000000;;		status := &metav1.Status{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(body, status); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(status, &timeoutErr.ErrStatus) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected object: %s", diff.ObjectReflectDiff(&timeoutErr.ErrStatus, status))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if record.Count() != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("did not invoke record method: %#v", record)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Now try to send a response
0000000000000000000000000000000000000000;;		sendResponse <- struct{}{}
0000000000000000000000000000000000000000;;		if err := <-writeErrors; err != http.ErrHandlerTimeout {
0000000000000000000000000000000000000000;;			t.Errorf("got Write error of %v; expected %v", err, http.ErrHandlerTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
