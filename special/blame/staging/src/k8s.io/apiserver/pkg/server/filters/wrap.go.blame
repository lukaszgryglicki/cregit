0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
efe3eb032e121ad695afb07f52f99d83c9c6c92c;pkg/genericapiserver/filters/panics.go[pkg/genericapiserver/filters/panics.go][staging/src/k8s.io/apiserver/pkg/server/filters/wrap.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package filters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"runtime/debug"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/httplog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithPanicRecovery wraps an http Handler to recover and log panics.
0000000000000000000000000000000000000000;;	func WithPanicRecovery(handler http.Handler) http.Handler {
0000000000000000000000000000000000000000;;		return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			defer runtime.HandleCrash(func(err interface{}) {
0000000000000000000000000000000000000000;;				http.Error(w, "This request caused apisever to panic. Look in log for details.", http.StatusInternalServerError)
0000000000000000000000000000000000000000;;				glog.Errorf("APIServer panic'd on %v %v: %v\n%s\n", req.Method, req.RequestURI, err, debug.Stack())
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			logger := httplog.NewLogged(req, &w)
0000000000000000000000000000000000000000;;			defer logger.Log()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Dispatch to the internal handler
0000000000000000000000000000000000000000;;			handler.ServeHTTP(w, req)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
