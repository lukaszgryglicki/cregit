0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8b8970b5eab3701e64d13b7dedd36bce0ac25ea0;pkg/genericapiserver/options/etcd_options.go[pkg/genericapiserver/options/etcd_options.go][staging/src/k8s.io/apiserver/pkg/server/options/etcd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package options
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server"
0000000000000000000000000000000000000000;;		serverstorage "k8s.io/apiserver/pkg/server/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EtcdOptions struct {
0000000000000000000000000000000000000000;;		StorageConfig                    storagebackend.Config
0000000000000000000000000000000000000000;;		EncryptionProviderConfigFilepath string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EtcdServersOverrides []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// To enable protobuf as storage format, it is enough
0000000000000000000000000000000000000000;;		// to set it to "application/vnd.kubernetes.protobuf".
0000000000000000000000000000000000000000;;		DefaultStorageMediaType string
0000000000000000000000000000000000000000;;		DeleteCollectionWorkers int
0000000000000000000000000000000000000000;;		EnableGarbageCollection bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Set EnableWatchCache to false to disable all watch caches
0000000000000000000000000000000000000000;;		EnableWatchCache bool
0000000000000000000000000000000000000000;;		// Set DefaultWatchCacheSize to zero to disable watch caches for those resources that have no explicit cache size set
0000000000000000000000000000000000000000;;		DefaultWatchCacheSize int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewEtcdOptions(backendConfig *storagebackend.Config) *EtcdOptions {
0000000000000000000000000000000000000000;;		return &EtcdOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           *backendConfig,
0000000000000000000000000000000000000000;;			DefaultStorageMediaType: "application/json",
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: 1,
0000000000000000000000000000000000000000;;			EnableGarbageCollection: true,
0000000000000000000000000000000000000000;;			EnableWatchCache:        true,
0000000000000000000000000000000000000000;;			DefaultWatchCacheSize:   100,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EtcdOptions) Validate() []error {
0000000000000000000000000000000000000000;;		allErrors := []error{}
0000000000000000000000000000000000000000;;		if len(s.StorageConfig.ServerList) == 0 {
0000000000000000000000000000000000000000;;			allErrors = append(allErrors, fmt.Errorf("--etcd-servers must be specified"))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return allErrors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddEtcdFlags adds flags related to etcd storage for a specific APIServer to the specified FlagSet
0000000000000000000000000000000000000000;;	func (s *EtcdOptions) AddFlags(fs *pflag.FlagSet) {
0000000000000000000000000000000000000000;;		fs.StringSliceVar(&s.EtcdServersOverrides, "etcd-servers-overrides", s.EtcdServersOverrides, ""+
0000000000000000000000000000000000000000;;			"Per-resource etcd servers overrides, comma separated. The individual override "+
0000000000000000000000000000000000000000;;			"format: group/resource#servers, where servers are http://ip:port, semicolon separated.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.DefaultStorageMediaType, "storage-media-type", s.DefaultStorageMediaType, ""+
0000000000000000000000000000000000000000;;			"The media type to use to store objects in storage. "+
0000000000000000000000000000000000000000;;			"Some resources or storage backends may only support a specific media type and will ignore this setting.")
0000000000000000000000000000000000000000;;		fs.IntVar(&s.DeleteCollectionWorkers, "delete-collection-workers", s.DeleteCollectionWorkers,
0000000000000000000000000000000000000000;;			"Number of workers spawned for DeleteCollection call. These are used to speed up namespace cleanup.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.EnableGarbageCollection, "enable-garbage-collector", s.EnableGarbageCollection, ""+
0000000000000000000000000000000000000000;;			"Enables the generic garbage collector. MUST be synced with the corresponding flag "+
0000000000000000000000000000000000000000;;			"of the kube-controller-manager.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: enable cache in integration tests.
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.EnableWatchCache, "watch-cache", s.EnableWatchCache,
0000000000000000000000000000000000000000;;			"Enable watch caching in the apiserver")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.StorageConfig.Type, "storage-backend", s.StorageConfig.Type,
0000000000000000000000000000000000000000;;			"The storage backend for persistence. Options: 'etcd3' (default), 'etcd2'.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.IntVar(&s.StorageConfig.DeserializationCacheSize, "deserialization-cache-size", s.StorageConfig.DeserializationCacheSize,
0000000000000000000000000000000000000000;;			"Number of deserialized json objects to cache in memory.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringSliceVar(&s.StorageConfig.ServerList, "etcd-servers", s.StorageConfig.ServerList,
0000000000000000000000000000000000000000;;			"List of etcd servers to connect with (scheme://ip:port), comma separated.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.StorageConfig.Prefix, "etcd-prefix", s.StorageConfig.Prefix,
0000000000000000000000000000000000000000;;			"The prefix to prepend to all resource paths in etcd.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.StorageConfig.KeyFile, "etcd-keyfile", s.StorageConfig.KeyFile,
0000000000000000000000000000000000000000;;			"SSL key file used to secure etcd communication.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.StorageConfig.CertFile, "etcd-certfile", s.StorageConfig.CertFile,
0000000000000000000000000000000000000000;;			"SSL certification file used to secure etcd communication.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.StorageConfig.CAFile, "etcd-cafile", s.StorageConfig.CAFile,
0000000000000000000000000000000000000000;;			"SSL Certificate Authority file used to secure etcd communication.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.BoolVar(&s.StorageConfig.Quorum, "etcd-quorum-read", s.StorageConfig.Quorum,
0000000000000000000000000000000000000000;;			"If true, enable quorum read.")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fs.StringVar(&s.EncryptionProviderConfigFilepath, "experimental-encryption-provider-config", s.EncryptionProviderConfigFilepath,
0000000000000000000000000000000000000000;;			"The file containing configuration for encryption providers to be used for storing secrets in etcd")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EtcdOptions) ApplyTo(c *server.Config) error {
0000000000000000000000000000000000000000;;		c.RESTOptionsGetter = &SimpleRestOptionsFactory{Options: *s}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EtcdOptions) ApplyWithStorageFactoryTo(factory serverstorage.StorageFactory, c *server.Config) error {
0000000000000000000000000000000000000000;;		c.RESTOptionsGetter = &storageFactoryRestOptionsFactory{Options: *s, StorageFactory: factory}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleRestOptionsFactory struct {
0000000000000000000000000000000000000000;;		Options EtcdOptions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *SimpleRestOptionsFactory) GetRESTOptions(resource schema.GroupResource) (generic.RESTOptions, error) {
0000000000000000000000000000000000000000;;		ret := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           &f.Options.StorageConfig,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			EnableGarbageCollection: f.Options.EnableGarbageCollection,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: f.Options.DeleteCollectionWorkers,
0000000000000000000000000000000000000000;;			ResourcePrefix:          resource.Group + "/" + resource.Resource,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.Options.EnableWatchCache {
0000000000000000000000000000000000000000;;			ret.Decorator = genericregistry.StorageWithCacher(f.Options.DefaultWatchCacheSize)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type storageFactoryRestOptionsFactory struct {
0000000000000000000000000000000000000000;;		Options        EtcdOptions
0000000000000000000000000000000000000000;;		StorageFactory serverstorage.StorageFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *storageFactoryRestOptionsFactory) GetRESTOptions(resource schema.GroupResource) (generic.RESTOptions, error) {
0000000000000000000000000000000000000000;;		storageConfig, err := f.StorageFactory.NewConfig(resource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return generic.RESTOptions{}, fmt.Errorf("unable to find storage destination for %v, due to %v", resource, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ret := generic.RESTOptions{
0000000000000000000000000000000000000000;;			StorageConfig:           storageConfig,
0000000000000000000000000000000000000000;;			Decorator:               generic.UndecoratedStorage,
0000000000000000000000000000000000000000;;			DeleteCollectionWorkers: f.Options.DeleteCollectionWorkers,
0000000000000000000000000000000000000000;;			EnableGarbageCollection: f.Options.EnableGarbageCollection,
0000000000000000000000000000000000000000;;			ResourcePrefix:          f.StorageFactory.ResourcePrefix(resource),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.Options.EnableWatchCache {
0000000000000000000000000000000000000000;;			ret.Decorator = genericregistry.StorageWithCacher(f.Options.DefaultWatchCacheSize)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
