0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
d4858aa823ccb434375792cbead7157f838d29d2;pkg/genericapiserver/resource_config.go[pkg/genericapiserver/resource_config.go][staging/src/k8s.io/apiserver/pkg/server/storage/resource_config.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIResourceConfigSource is the interface to determine which versions and resources are enabled
0000000000000000000000000000000000000000;;	type APIResourceConfigSource interface {
0000000000000000000000000000000000000000;;		AnyVersionOfResourceEnabled(resource schema.GroupResource) bool
0000000000000000000000000000000000000000;;		ResourceEnabled(resource schema.GroupVersionResource) bool
0000000000000000000000000000000000000000;;		AllResourcesForVersionEnabled(version schema.GroupVersion) bool
0000000000000000000000000000000000000000;;		AnyResourcesForVersionEnabled(version schema.GroupVersion) bool
0000000000000000000000000000000000000000;;		AnyResourcesForGroupEnabled(group string) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Specifies the overrides for various API group versions.
0000000000000000000000000000000000000000;;	// This can be used to enable/disable entire group versions or specific resources.
0000000000000000000000000000000000000000;;	type GroupVersionResourceConfig struct {
0000000000000000000000000000000000000000;;		// Whether to enable or disable this entire group version.  This dominates any enablement check.
0000000000000000000000000000000000000000;;		// Enable=true means the group version is enabled, and EnabledResources/DisabledResources are considered.
0000000000000000000000000000000000000000;;		// Enable=false means the group version is disabled, and EnabledResources/DisabledResources are not considered.
0000000000000000000000000000000000000000;;		Enable bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisabledResources lists the resources that are specifically disabled for a group/version
0000000000000000000000000000000000000000;;		// DisabledResources trumps EnabledResources
0000000000000000000000000000000000000000;;		DisabledResources sets.String
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EnabledResources lists the resources that should be enabled by default.  This is a little
0000000000000000000000000000000000000000;;		// unusual, but we need it for compatibility with old code for now.  An empty set means
0000000000000000000000000000000000000000;;		// enable all, a non-empty set means that all other resources are disabled.
0000000000000000000000000000000000000000;;		EnabledResources sets.String
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ APIResourceConfigSource = &ResourceConfig{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceConfig struct {
0000000000000000000000000000000000000000;;		GroupVersionResourceConfigs map[schema.GroupVersion]*GroupVersionResourceConfig
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourceConfig() *ResourceConfig {
0000000000000000000000000000000000000000;;		return &ResourceConfig{GroupVersionResourceConfigs: map[schema.GroupVersion]*GroupVersionResourceConfig{}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGroupVersionResourceConfig() *GroupVersionResourceConfig {
0000000000000000000000000000000000000000;;		return &GroupVersionResourceConfig{Enable: true, DisabledResources: sets.String{}, EnabledResources: sets.String{}}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableVersions disables the versions entirely.  No resources (even those whitelisted in EnabledResources) will be enabled
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) DisableVersions(versions ...schema.GroupVersion) {
0000000000000000000000000000000000000000;;		for _, version := range versions {
0000000000000000000000000000000000000000;;			_, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;			if !versionExists {
0000000000000000000000000000000000000000;;				o.GroupVersionResourceConfigs[version] = NewGroupVersionResourceConfig()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			o.GroupVersionResourceConfigs[version].Enable = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) EnableVersions(versions ...schema.GroupVersion) {
0000000000000000000000000000000000000000;;		for _, version := range versions {
0000000000000000000000000000000000000000;;			_, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;			if !versionExists {
0000000000000000000000000000000000000000;;				o.GroupVersionResourceConfigs[version] = NewGroupVersionResourceConfig()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			o.GroupVersionResourceConfigs[version].Enable = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) DisableResources(resources ...schema.GroupVersionResource) {
0000000000000000000000000000000000000000;;		for _, resource := range resources {
0000000000000000000000000000000000000000;;			version := resource.GroupVersion()
0000000000000000000000000000000000000000;;			_, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;			if !versionExists {
0000000000000000000000000000000000000000;;				o.GroupVersionResourceConfigs[version] = NewGroupVersionResourceConfig()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			o.GroupVersionResourceConfigs[version].DisabledResources.Insert(resource.Resource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) EnableResources(resources ...schema.GroupVersionResource) {
0000000000000000000000000000000000000000;;		for _, resource := range resources {
0000000000000000000000000000000000000000;;			version := resource.GroupVersion()
0000000000000000000000000000000000000000;;			_, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;			if !versionExists {
0000000000000000000000000000000000000000;;				o.GroupVersionResourceConfigs[version] = NewGroupVersionResourceConfig()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			o.GroupVersionResourceConfigs[version].EnabledResources.Insert(resource.Resource)
0000000000000000000000000000000000000000;;			o.GroupVersionResourceConfigs[version].DisabledResources.Delete(resource.Resource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AnyResourcesForVersionEnabled only considers matches based on exactly group/resource lexical matching.  This means that
0000000000000000000000000000000000000000;;	// resource renames across versions are NOT considered to be the same resource by this method. You'll need to manually check
0000000000000000000000000000000000000000;;	// using the ResourceEnabled function.
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) AnyVersionOfResourceEnabled(resource schema.GroupResource) bool {
0000000000000000000000000000000000000000;;		for version := range o.GroupVersionResourceConfigs {
0000000000000000000000000000000000000000;;			if version.Group != resource.Group {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if o.ResourceEnabled(version.WithResource(resource.Resource)) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) ResourceEnabled(resource schema.GroupVersionResource) bool {
0000000000000000000000000000000000000000;;		versionOverride, versionExists := o.GroupVersionResourceConfigs[resource.GroupVersion()]
0000000000000000000000000000000000000000;;		if !versionExists {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !versionOverride.Enable {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if versionOverride.DisabledResources.Has(resource.Resource) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(versionOverride.EnabledResources) > 0 {
0000000000000000000000000000000000000000;;			return versionOverride.EnabledResources.Has(resource.Resource)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) AllResourcesForVersionEnabled(version schema.GroupVersion) bool {
0000000000000000000000000000000000000000;;		versionOverride, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;		if !versionExists {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !versionOverride.Enable {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(versionOverride.EnabledResources) == 0 && len(versionOverride.DisabledResources) == 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) AnyResourcesForVersionEnabled(version schema.GroupVersion) bool {
0000000000000000000000000000000000000000;;		versionOverride, versionExists := o.GroupVersionResourceConfigs[version]
0000000000000000000000000000000000000000;;		if !versionExists {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return versionOverride.Enable
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *ResourceConfig) AnyResourcesForGroupEnabled(group string) bool {
0000000000000000000000000000000000000000;;		for version := range o.GroupVersionResourceConfigs {
0000000000000000000000000000000000000000;;			if version.Group == group {
0000000000000000000000000000000000000000;;				if o.AnyResourcesForVersionEnabled(version) {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
