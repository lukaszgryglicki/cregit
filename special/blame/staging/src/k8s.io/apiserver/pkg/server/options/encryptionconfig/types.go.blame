0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4fa123cff3ededa351298350459e08f67c006163;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package encryptionconfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EncryptionConfig stores the complete configuration for encryption providers.
0000000000000000000000000000000000000000;;	type EncryptionConfig struct {
0000000000000000000000000000000000000000;;		// kind is the type of configuration file.
0000000000000000000000000000000000000000;;		Kind string `json:"kind"`
0000000000000000000000000000000000000000;;		// apiVersion is the API version this file has to be parsed as.
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion"`
0000000000000000000000000000000000000000;;		// resources is a list containing resources, and their corresponding encryption providers.
0000000000000000000000000000000000000000;;		Resources []ResourceConfig `json:"resources"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceConfig stores per resource configuration.
0000000000000000000000000000000000000000;;	type ResourceConfig struct {
0000000000000000000000000000000000000000;;		// resources is a list of kubernetes resources which have to be encrypted.
0000000000000000000000000000000000000000;;		Resources []string `json:"resources"`
0000000000000000000000000000000000000000;;		// providers is a list of transformers to be used for reading and writing the resources to disk.
0000000000000000000000000000000000000000;;		// eg: aes, identity.
0000000000000000000000000000000000000000;;		Providers []ProviderConfig `json:"providers"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProviderConfig stores the provided configuration for an encryption provider.
0000000000000000000000000000000000000000;;	type ProviderConfig struct {
0000000000000000000000000000000000000000;;		// aesgcm is the configuration for the AES-GCM transformer.
0000000000000000000000000000000000000000;;		AESGCM *AESConfig `json:"aesgcm,omitempty"`
0000000000000000000000000000000000000000;;		// aescbc is the configuration for the AES-CBC transformer.
0000000000000000000000000000000000000000;;		AESCBC *AESConfig `json:"aescbc,omitempty"`
0000000000000000000000000000000000000000;;		// secretbox is the configuration for the Secretbox based transformer.
0000000000000000000000000000000000000000;;		Secretbox *SecretboxConfig `json:"secretbox,omitempty"`
0000000000000000000000000000000000000000;;		// identity is the (empty) configuration for the identity transformer.
0000000000000000000000000000000000000000;;		Identity *IdentityConfig `json:"identity,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AESConfig contains the API configuration for an AES transformer.
0000000000000000000000000000000000000000;;	type AESConfig struct {
0000000000000000000000000000000000000000;;		// keys is a list of keys to be used for creating the AES transformer.
0000000000000000000000000000000000000000;;		Keys []Key `json:"keys"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SECRETBOXConfig contains the API configuration for an Secretbox transformer.
0000000000000000000000000000000000000000;;	type SecretboxConfig struct {
0000000000000000000000000000000000000000;;		// keys is a list of keys to be used for creating the Secretbox transformer.
0000000000000000000000000000000000000000;;		Keys []Key `json:"keys"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Key contains name and secret of the provided key for AES transformer.
0000000000000000000000000000000000000000;;	type Key struct {
0000000000000000000000000000000000000000;;		// name is the name of the key to be used while storing data to disk.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// secret is the actual AES key, encoded in base64. It has to be 16, 24 or 32 bytes long.
0000000000000000000000000000000000000000;;		Secret string `json:"secret"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IdentityConfig is an empty struct to allow identity transformer in provider configuration.
0000000000000000000000000000000000000000;;	type IdentityConfig struct{}
