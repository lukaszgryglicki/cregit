0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
49fc080c7ab349e740f17b88dfec514c6a495c45;pkg/genericapiserver/openapi/openapi.go[pkg/genericapiserver/openapi/openapi.go][staging/src/k8s.io/apiserver/pkg/server/openapi/openapi.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/sha512"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restful "github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/openapi"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/trie"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		OpenAPIVersion  = "2.0"
0000000000000000000000000000000000000000;;		extensionPrefix = "x-kubernetes-"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		JSON_EXT = ".json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MIME_JSON = "application/json"
0000000000000000000000000000000000000000;;		// TODO(mehdy): change @68f4ded to a version tag when gnostic add version tags.
0000000000000000000000000000000000000000;;		MIME_PB    = "application/com.github.googleapis.gnostic.OpenAPIv2@68f4ded+protobuf"
0000000000000000000000000000000000000000;;		MIME_PB_GZ = "application/x-gzip"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type openAPI struct {
0000000000000000000000000000000000000000;;		config       *openapi.Config
0000000000000000000000000000000000000000;;		swagger      *spec.Swagger
0000000000000000000000000000000000000000;;		protocolList []string
0000000000000000000000000000000000000000;;		definitions  map[string]openapi.OpenAPIDefinition
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func computeEtag(data []byte) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("\"%X\"", sha512.Sum512(data))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BuildSwaggerSpec(webServices []*restful.WebService, config *openapi.Config) (*spec.Swagger, error) {
0000000000000000000000000000000000000000;;		o := openAPI{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;			swagger: &spec.Swagger{
0000000000000000000000000000000000000000;;				SwaggerProps: spec.SwaggerProps{
0000000000000000000000000000000000000000;;					Swagger:     OpenAPIVersion,
0000000000000000000000000000000000000000;;					Definitions: spec.Definitions{},
0000000000000000000000000000000000000000;;					Paths:       &spec.Paths{Paths: map[string]spec.PathItem{}},
0000000000000000000000000000000000000000;;					Info:        config.Info,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := o.init(webServices)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return o.swagger, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) init(webServices []*restful.WebService) error {
0000000000000000000000000000000000000000;;		if o.config.GetOperationIDAndTags == nil {
0000000000000000000000000000000000000000;;			o.config.GetOperationIDAndTags = func(r *restful.Route) (string, []string, error) {
0000000000000000000000000000000000000000;;				return r.Operation, nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.config.GetDefinitionName == nil {
0000000000000000000000000000000000000000;;			o.config.GetDefinitionName = func(name string) (string, spec.Extensions) {
0000000000000000000000000000000000000000;;				return name[strings.LastIndex(name, "/")+1:], nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		o.definitions = o.config.GetDefinitions(func(name string) spec.Ref {
0000000000000000000000000000000000000000;;			defName, _ := o.config.GetDefinitionName(name)
0000000000000000000000000000000000000000;;			return spec.MustCreateRef(DEFINITION_PREFIX + openapi.EscapeJsonPointer(defName))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if o.config.CommonResponses == nil {
0000000000000000000000000000000000000000;;			o.config.CommonResponses = map[int]spec.Response{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := o.buildPaths(webServices)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.config.SecurityDefinitions != nil {
0000000000000000000000000000000000000000;;			o.swagger.SecurityDefinitions = *o.config.SecurityDefinitions
0000000000000000000000000000000000000000;;			o.swagger.Security = o.config.DefaultSecurity
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.config.PostProcessSpec != nil {
0000000000000000000000000000000000000000;;			o.swagger, err = o.config.PostProcessSpec(o.swagger)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getCanonicalizeTypeName(t reflect.Type) string {
0000000000000000000000000000000000000000;;		if t.PkgPath() == "" {
0000000000000000000000000000000000000000;;			return t.Name()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		path := t.PkgPath()
0000000000000000000000000000000000000000;;		if strings.Contains(path, "/vendor/") {
0000000000000000000000000000000000000000;;			path = path[strings.Index(path, "/vendor/")+len("/vendor/"):]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return path + "." + t.Name()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) buildDefinitionRecursively(name string) error {
0000000000000000000000000000000000000000;;		uniqueName, extensions := o.config.GetDefinitionName(name)
0000000000000000000000000000000000000000;;		if _, ok := o.swagger.Definitions[uniqueName]; ok {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if item, ok := o.definitions[name]; ok {
0000000000000000000000000000000000000000;;			schema := spec.Schema{
0000000000000000000000000000000000000000;;				VendorExtensible:   item.Schema.VendorExtensible,
0000000000000000000000000000000000000000;;				SchemaProps:        item.Schema.SchemaProps,
0000000000000000000000000000000000000000;;				SwaggerSchemaProps: item.Schema.SwaggerSchemaProps,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if extensions != nil {
0000000000000000000000000000000000000000;;				if schema.Extensions == nil {
0000000000000000000000000000000000000000;;					schema.Extensions = spec.Extensions{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for k, v := range extensions {
0000000000000000000000000000000000000000;;					schema.Extensions[k] = v
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			o.swagger.Definitions[uniqueName] = schema
0000000000000000000000000000000000000000;;			for _, v := range item.Dependencies {
0000000000000000000000000000000000000000;;				if err := o.buildDefinitionRecursively(v); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return fmt.Errorf("cannot find model definition for %v. If you added a new type, you may need to add +k8s:openapi-gen=true to the package or type and run code-gen again.", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildDefinitionForType build a definition for a given type and return a referable name to it's definition.
0000000000000000000000000000000000000000;;	// This is the main function that keep track of definitions used in this spec and is depend on code generated
0000000000000000000000000000000000000000;;	// by k8s.io/kubernetes/cmd/libs/go2idl/openapi-gen.
0000000000000000000000000000000000000000;;	func (o *openAPI) buildDefinitionForType(sample interface{}) (string, error) {
0000000000000000000000000000000000000000;;		t := reflect.TypeOf(sample)
0000000000000000000000000000000000000000;;		if t.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			t = t.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		name := getCanonicalizeTypeName(t)
0000000000000000000000000000000000000000;;		if err := o.buildDefinitionRecursively(name); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defName, _ := o.config.GetDefinitionName(name)
0000000000000000000000000000000000000000;;		return DEFINITION_PREFIX + openapi.EscapeJsonPointer(defName), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildPaths builds OpenAPI paths using go-restful's web services.
0000000000000000000000000000000000000000;;	func (o *openAPI) buildPaths(webServices []*restful.WebService) error {
0000000000000000000000000000000000000000;;		pathsToIgnore := trie.New(o.config.IgnorePrefixes)
0000000000000000000000000000000000000000;;		duplicateOpId := make(map[string]string)
0000000000000000000000000000000000000000;;		for _, w := range webServices {
0000000000000000000000000000000000000000;;			rootPath := w.RootPath()
0000000000000000000000000000000000000000;;			if pathsToIgnore.HasPrefix(rootPath) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			commonParams, err := o.buildParameters(w.PathParameters())
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for path, routes := range groupRoutesByPath(w.Routes()) {
0000000000000000000000000000000000000000;;				// go-swagger has special variable definition {$NAME:*} that can only be
0000000000000000000000000000000000000000;;				// used at the end of the path and it is not recognized by OpenAPI.
0000000000000000000000000000000000000000;;				if strings.HasSuffix(path, ":*}") {
0000000000000000000000000000000000000000;;					path = path[:len(path)-3] + "}"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if pathsToIgnore.HasPrefix(path) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// Aggregating common parameters make API spec (and generated clients) simpler
0000000000000000000000000000000000000000;;				inPathCommonParamsMap, err := o.findCommonParameters(routes)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pathItem, exists := o.swagger.Paths.Paths[path]
0000000000000000000000000000000000000000;;				if exists {
0000000000000000000000000000000000000000;;					return fmt.Errorf("duplicate webservice route has been found for path: %v", path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pathItem = spec.PathItem{
0000000000000000000000000000000000000000;;					PathItemProps: spec.PathItemProps{
0000000000000000000000000000000000000000;;						Parameters: make([]spec.Parameter, 0),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// add web services's parameters as well as any parameters appears in all ops, as common parameters
0000000000000000000000000000000000000000;;				pathItem.Parameters = append(pathItem.Parameters, commonParams...)
0000000000000000000000000000000000000000;;				for _, p := range inPathCommonParamsMap {
0000000000000000000000000000000000000000;;					pathItem.Parameters = append(pathItem.Parameters, p)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sortParameters(pathItem.Parameters)
0000000000000000000000000000000000000000;;				for _, route := range routes {
0000000000000000000000000000000000000000;;					op, err := o.buildOperations(route, inPathCommonParamsMap)
0000000000000000000000000000000000000000;;					sortParameters(op.Parameters)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					dpath, exists := duplicateOpId[op.ID]
0000000000000000000000000000000000000000;;					if exists {
0000000000000000000000000000000000000000;;						return fmt.Errorf("Duplicate Operation ID %v for path %v and %v.", op.ID, dpath, path)
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						duplicateOpId[op.ID] = path
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					switch strings.ToUpper(route.Method) {
0000000000000000000000000000000000000000;;					case "GET":
0000000000000000000000000000000000000000;;						pathItem.Get = op
0000000000000000000000000000000000000000;;					case "POST":
0000000000000000000000000000000000000000;;						pathItem.Post = op
0000000000000000000000000000000000000000;;					case "HEAD":
0000000000000000000000000000000000000000;;						pathItem.Head = op
0000000000000000000000000000000000000000;;					case "PUT":
0000000000000000000000000000000000000000;;						pathItem.Put = op
0000000000000000000000000000000000000000;;					case "DELETE":
0000000000000000000000000000000000000000;;						pathItem.Delete = op
0000000000000000000000000000000000000000;;					case "OPTIONS":
0000000000000000000000000000000000000000;;						pathItem.Options = op
0000000000000000000000000000000000000000;;					case "PATCH":
0000000000000000000000000000000000000000;;						pathItem.Patch = op
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				o.swagger.Paths.Paths[path] = pathItem
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// buildOperations builds operations for each webservice path
0000000000000000000000000000000000000000;;	func (o *openAPI) buildOperations(route restful.Route, inPathCommonParamsMap map[interface{}]spec.Parameter) (ret *spec.Operation, err error) {
0000000000000000000000000000000000000000;;		ret = &spec.Operation{
0000000000000000000000000000000000000000;;			OperationProps: spec.OperationProps{
0000000000000000000000000000000000000000;;				Description: route.Doc,
0000000000000000000000000000000000000000;;				Consumes:    route.Consumes,
0000000000000000000000000000000000000000;;				Produces:    route.Produces,
0000000000000000000000000000000000000000;;				Schemes:     o.config.ProtocolList,
0000000000000000000000000000000000000000;;				Responses: &spec.Responses{
0000000000000000000000000000000000000000;;					ResponsesProps: spec.ResponsesProps{
0000000000000000000000000000000000000000;;						StatusCodeResponses: make(map[int]spec.Response),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range route.Metadata {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(k, extensionPrefix) {
0000000000000000000000000000000000000000;;				if ret.Extensions == nil {
0000000000000000000000000000000000000000;;					ret.Extensions = spec.Extensions{}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ret.Extensions.Add(k, v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ret.ID, ret.Tags, err = o.config.GetOperationIDAndTags(&route); err != nil {
0000000000000000000000000000000000000000;;			return ret, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Build responses
0000000000000000000000000000000000000000;;		for _, resp := range route.ResponseErrors {
0000000000000000000000000000000000000000;;			ret.Responses.StatusCodeResponses[resp.Code], err = o.buildResponse(resp.Model, resp.Message)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return ret, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If there is no response but a write sample, assume that write sample is an http.StatusOK response.
0000000000000000000000000000000000000000;;		if len(ret.Responses.StatusCodeResponses) == 0 && route.WriteSample != nil {
0000000000000000000000000000000000000000;;			ret.Responses.StatusCodeResponses[http.StatusOK], err = o.buildResponse(route.WriteSample, "OK")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return ret, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for code, resp := range o.config.CommonResponses {
0000000000000000000000000000000000000000;;			if _, exists := ret.Responses.StatusCodeResponses[code]; !exists {
0000000000000000000000000000000000000000;;				ret.Responses.StatusCodeResponses[code] = resp
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// If there is still no response, use default response provided.
0000000000000000000000000000000000000000;;		if len(ret.Responses.StatusCodeResponses) == 0 {
0000000000000000000000000000000000000000;;			ret.Responses.Default = o.config.DefaultResponse
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Build non-common Parameters
0000000000000000000000000000000000000000;;		ret.Parameters = make([]spec.Parameter, 0)
0000000000000000000000000000000000000000;;		for _, param := range route.ParameterDocs {
0000000000000000000000000000000000000000;;			if _, isCommon := inPathCommonParamsMap[mapKeyFromParam(param)]; !isCommon {
0000000000000000000000000000000000000000;;				openAPIParam, err := o.buildParameter(param.Data(), route.ReadSample)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return ret, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ret.Parameters = append(ret.Parameters, openAPIParam)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) buildResponse(model interface{}, description string) (spec.Response, error) {
0000000000000000000000000000000000000000;;		schema, err := o.toSchema(model)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return spec.Response{}, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return spec.Response{
0000000000000000000000000000000000000000;;			ResponseProps: spec.ResponseProps{
0000000000000000000000000000000000000000;;				Description: description,
0000000000000000000000000000000000000000;;				Schema:      schema,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) findCommonParameters(routes []restful.Route) (map[interface{}]spec.Parameter, error) {
0000000000000000000000000000000000000000;;		commonParamsMap := make(map[interface{}]spec.Parameter, 0)
0000000000000000000000000000000000000000;;		paramOpsCountByName := make(map[interface{}]int, 0)
0000000000000000000000000000000000000000;;		paramNameKindToDataMap := make(map[interface{}]restful.ParameterData, 0)
0000000000000000000000000000000000000000;;		for _, route := range routes {
0000000000000000000000000000000000000000;;			routeParamDuplicateMap := make(map[interface{}]bool)
0000000000000000000000000000000000000000;;			s := ""
0000000000000000000000000000000000000000;;			for _, param := range route.ParameterDocs {
0000000000000000000000000000000000000000;;				m, _ := json.Marshal(param.Data())
0000000000000000000000000000000000000000;;				s += string(m) + "\n"
0000000000000000000000000000000000000000;;				key := mapKeyFromParam(param)
0000000000000000000000000000000000000000;;				if routeParamDuplicateMap[key] {
0000000000000000000000000000000000000000;;					msg, _ := json.Marshal(route.ParameterDocs)
0000000000000000000000000000000000000000;;					return commonParamsMap, fmt.Errorf("duplicate parameter %v for route %v, %v.", param.Data().Name, string(msg), s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				routeParamDuplicateMap[key] = true
0000000000000000000000000000000000000000;;				paramOpsCountByName[key]++
0000000000000000000000000000000000000000;;				paramNameKindToDataMap[key] = param.Data()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, count := range paramOpsCountByName {
0000000000000000000000000000000000000000;;			paramData := paramNameKindToDataMap[key]
0000000000000000000000000000000000000000;;			if count == len(routes) && paramData.Kind != restful.BodyParameterKind {
0000000000000000000000000000000000000000;;				openAPIParam, err := o.buildParameter(paramData, nil)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return commonParamsMap, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				commonParamsMap[key] = openAPIParam
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return commonParamsMap, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) toSchema(model interface{}) (_ *spec.Schema, err error) {
0000000000000000000000000000000000000000;;		if openAPIType, openAPIFormat := openapi.GetOpenAPITypeFormat(getCanonicalizeTypeName(reflect.TypeOf(model))); openAPIType != "" {
0000000000000000000000000000000000000000;;			return &spec.Schema{
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Type:   []string{openAPIType},
0000000000000000000000000000000000000000;;					Format: openAPIFormat,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ref, err := o.buildDefinitionForType(model)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return &spec.Schema{
0000000000000000000000000000000000000000;;				SchemaProps: spec.SchemaProps{
0000000000000000000000000000000000000000;;					Ref: spec.MustCreateRef(ref),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) buildParameter(restParam restful.ParameterData, bodySample interface{}) (ret spec.Parameter, err error) {
0000000000000000000000000000000000000000;;		ret = spec.Parameter{
0000000000000000000000000000000000000000;;			ParamProps: spec.ParamProps{
0000000000000000000000000000000000000000;;				Name:        restParam.Name,
0000000000000000000000000000000000000000;;				Description: restParam.Description,
0000000000000000000000000000000000000000;;				Required:    restParam.Required,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch restParam.Kind {
0000000000000000000000000000000000000000;;		case restful.BodyParameterKind:
0000000000000000000000000000000000000000;;			if bodySample != nil {
0000000000000000000000000000000000000000;;				ret.In = "body"
0000000000000000000000000000000000000000;;				ret.Schema, err = o.toSchema(bodySample)
0000000000000000000000000000000000000000;;				return ret, err
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// There is not enough information in the body parameter to build the definition.
0000000000000000000000000000000000000000;;				// Body parameter has a data type that is a short name but we need full package name
0000000000000000000000000000000000000000;;				// of the type to create a definition.
0000000000000000000000000000000000000000;;				return ret, fmt.Errorf("restful body parameters are not supported: %v", restParam.DataType)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case restful.PathParameterKind:
0000000000000000000000000000000000000000;;			ret.In = "path"
0000000000000000000000000000000000000000;;			if !restParam.Required {
0000000000000000000000000000000000000000;;				return ret, fmt.Errorf("path parameters should be marked at required for parameter %v", restParam)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case restful.QueryParameterKind:
0000000000000000000000000000000000000000;;			ret.In = "query"
0000000000000000000000000000000000000000;;		case restful.HeaderParameterKind:
0000000000000000000000000000000000000000;;			ret.In = "header"
0000000000000000000000000000000000000000;;		case restful.FormParameterKind:
0000000000000000000000000000000000000000;;			ret.In = "formData"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return ret, fmt.Errorf("unknown restful operation kind : %v", restParam.Kind)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		openAPIType, openAPIFormat := openapi.GetOpenAPITypeFormat(restParam.DataType)
0000000000000000000000000000000000000000;;		if openAPIType == "" {
0000000000000000000000000000000000000000;;			return ret, fmt.Errorf("non-body Restful parameter type should be a simple type, but got : %v", restParam.DataType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret.Type = openAPIType
0000000000000000000000000000000000000000;;		ret.Format = openAPIFormat
0000000000000000000000000000000000000000;;		ret.UniqueItems = !restParam.AllowMultiple
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o *openAPI) buildParameters(restParam []*restful.Parameter) (ret []spec.Parameter, err error) {
0000000000000000000000000000000000000000;;		ret = make([]spec.Parameter, len(restParam))
0000000000000000000000000000000000000000;;		for i, v := range restParam {
0000000000000000000000000000000000000000;;			ret[i], err = o.buildParameter(v.Data(), nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return ret, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
