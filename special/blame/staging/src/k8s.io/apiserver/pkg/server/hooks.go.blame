0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7802b316946edff8d0d6e776538711453d5478fe;pkg/genericapiserver/hooks.go[pkg/genericapiserver/hooks.go][staging/src/k8s.io/apiserver/pkg/server/hooks.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package server
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilruntime "k8s.io/apimachinery/pkg/util/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/server/healthz"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PostStartHookFunc is a function that is called after the server has started.
0000000000000000000000000000000000000000;;	// It must properly handle cases like:
0000000000000000000000000000000000000000;;	//  1. asynchronous start in multiple API server processes
0000000000000000000000000000000000000000;;	//  2. conflicts between the different processes all trying to perform the same action
0000000000000000000000000000000000000000;;	//  3. partially complete work (API server crashes while running your hook)
0000000000000000000000000000000000000000;;	//  4. API server access **BEFORE** your hook has completed
0000000000000000000000000000000000000000;;	// Think of it like a mini-controller that is super privileged and gets to run in-process
0000000000000000000000000000000000000000;;	// If you use this feature, tag @deads2k on github who has promised to review code for anyone's PostStartHook
0000000000000000000000000000000000000000;;	// until it becomes easier to use.
0000000000000000000000000000000000000000;;	type PostStartHookFunc func(context PostStartHookContext) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PostStartHookContext provides information about this API server to a PostStartHookFunc
0000000000000000000000000000000000000000;;	type PostStartHookContext struct {
0000000000000000000000000000000000000000;;		// LoopbackClientConfig is a config for a privileged loopback connection to the API server
0000000000000000000000000000000000000000;;		LoopbackClientConfig *restclient.Config
0000000000000000000000000000000000000000;;		// StopCh is the channel that will be closed when the server stops
0000000000000000000000000000000000000000;;		StopCh <-chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PostStartHookProvider is an interface in addition to provide a post start hook for the api server
0000000000000000000000000000000000000000;;	type PostStartHookProvider interface {
0000000000000000000000000000000000000000;;		PostStartHook() (string, PostStartHookFunc, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type postStartHookEntry struct {
0000000000000000000000000000000000000000;;		hook PostStartHookFunc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// done will be closed when the postHook is finished
0000000000000000000000000000000000000000;;		done chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPostStartHook allows you to add a PostStartHook.
0000000000000000000000000000000000000000;;	func (s *GenericAPIServer) AddPostStartHook(name string, hook PostStartHookFunc) error {
0000000000000000000000000000000000000000;;		if len(name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("missing name")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if hook == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.disabledPostStartHooks.Has(name) {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.postStartHookLock.Lock()
0000000000000000000000000000000000000000;;		defer s.postStartHookLock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s.postStartHooksCalled {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to add %q because PostStartHooks have already been called", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, exists := s.postStartHooks[name]; exists {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unable to add %q because it is already registered", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// done is closed when the poststarthook is finished.  This is used by the health check to be able to indicate
0000000000000000000000000000000000000000;;		// that the poststarthook is finished
0000000000000000000000000000000000000000;;		done := make(chan struct{})
0000000000000000000000000000000000000000;;		s.AddHealthzChecks(postStartHookHealthz{name: "poststarthook/" + name, done: done})
0000000000000000000000000000000000000000;;		s.postStartHooks[name] = postStartHookEntry{hook: hook, done: done}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunPostStartHooks runs the PostStartHooks for the server
0000000000000000000000000000000000000000;;	func (s *GenericAPIServer) RunPostStartHooks(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		s.postStartHookLock.Lock()
0000000000000000000000000000000000000000;;		defer s.postStartHookLock.Unlock()
0000000000000000000000000000000000000000;;		s.postStartHooksCalled = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		context := PostStartHookContext{
0000000000000000000000000000000000000000;;			LoopbackClientConfig: s.LoopbackClientConfig,
0000000000000000000000000000000000000000;;			StopCh:               stopCh,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for hookName, hookEntry := range s.postStartHooks {
0000000000000000000000000000000000000000;;			go runPostStartHook(hookName, hookEntry, context)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isHookRegistered checks whether a given hook is registered
0000000000000000000000000000000000000000;;	func (s *GenericAPIServer) isHookRegistered(name string) bool {
0000000000000000000000000000000000000000;;		s.postStartHookLock.Lock()
0000000000000000000000000000000000000000;;		defer s.postStartHookLock.Unlock()
0000000000000000000000000000000000000000;;		_, exists := s.postStartHooks[name]
0000000000000000000000000000000000000000;;		return exists
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func runPostStartHook(name string, entry postStartHookEntry, context PostStartHookContext) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			// don't let the hook *accidentally* panic and kill the server
0000000000000000000000000000000000000000;;			defer utilruntime.HandleCrash()
0000000000000000000000000000000000000000;;			err = entry.hook(context)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		// if the hook intentionally wants to kill server, let it.
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("PostStartHook %q failed: %v", name, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		close(entry.done)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// postStartHookHealthz implements a healthz check for poststarthooks.  It will return a "hookNotFinished"
0000000000000000000000000000000000000000;;	// error until the poststarthook is finished.
0000000000000000000000000000000000000000;;	type postStartHookHealthz struct {
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// done will be closed when the postStartHook is finished
0000000000000000000000000000000000000000;;		done chan struct{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ healthz.HealthzChecker = postStartHookHealthz{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h postStartHookHealthz) Name() string {
0000000000000000000000000000000000000000;;		return h.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var hookNotFinished = errors.New("not finished")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h postStartHookHealthz) Check(req *http.Request) error {
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-h.done:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return hookNotFinished
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
