0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
866c247c0d9a1ff1c3786364f7f873087c948ea7;pkg/auth/authorizer/union/union.go[pkg/auth/authorizer/union/union.go][staging/src/k8s.io/apiserver/pkg/authorization/union/union.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package union
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// unionAuthzHandler authorizer against a chain of authorizer.Authorizer
0000000000000000000000000000000000000000;;	type unionAuthzHandler []authorizer.Authorizer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns an authorizer that authorizes against a chain of authorizer.Authorizer objects
0000000000000000000000000000000000000000;;	func New(authorizationHandlers ...authorizer.Authorizer) authorizer.Authorizer {
0000000000000000000000000000000000000000;;		return unionAuthzHandler(authorizationHandlers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authorizes against a chain of authorizer.Authorizer objects and returns nil if successful and returns error if unsuccessful
0000000000000000000000000000000000000000;;	func (authzHandler unionAuthzHandler) Authorize(a authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			errlist    []error
0000000000000000000000000000000000000000;;			reasonlist []string
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, currAuthzHandler := range authzHandler {
0000000000000000000000000000000000000000;;			authorized, reason, err := currAuthzHandler.Authorize(a)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				errlist = append(errlist, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(reason) != 0 {
0000000000000000000000000000000000000000;;				reasonlist = append(reasonlist, reason)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !authorized {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, reason, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, strings.Join(reasonlist, "\n"), utilerrors.NewAggregate(errlist)
0000000000000000000000000000000000000000;;	}
