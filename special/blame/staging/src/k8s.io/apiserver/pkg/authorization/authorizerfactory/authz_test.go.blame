0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
34b329bc4c2098e1688f27e19f8b7891b68b1e7b;pkg/apiserver/authz_test.go[pkg/apiserver/authz_test.go][staging/src/k8s.io/apiserver/pkg/authorization/authorizerfactory/authz_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authorizerfactory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAlwaysAllowAuthorizer must return a struct which implements authorizer.Authorizer
0000000000000000000000000000000000000000;;	// and always return nil.
0000000000000000000000000000000000000000;;	func TestNewAlwaysAllowAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		aaa := NewAlwaysAllowAuthorizer()
0000000000000000000000000000000000000000;;		if authorized, _, _ := aaa.Authorize(nil); !authorized {
0000000000000000000000000000000000000000;;			t.Errorf("AlwaysAllowAuthorizer.Authorize did not authorize successfully.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAlwaysDenyAuthorizer must return a struct which implements authorizer.Authorizer
0000000000000000000000000000000000000000;;	// and always return an error as everything is forbidden.
0000000000000000000000000000000000000000;;	func TestNewAlwaysDenyAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		ada := NewAlwaysDenyAuthorizer()
0000000000000000000000000000000000000000;;		if authorized, _, _ := ada.Authorize(nil); authorized {
0000000000000000000000000000000000000000;;			t.Errorf("AlwaysDenyAuthorizer.Authorize returned nil instead of error.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrivilegedGroupAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		auth := NewPrivilegedGroups("allow-01", "allow-01")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		yes := authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"no", "allow-01"}}}
0000000000000000000000000000000000000000;;		no := authorizer.AttributesRecord{User: &user.DefaultInfo{Groups: []string{"no", "deny-01"}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if authorized, _, _ := auth.Authorize(yes); !authorized {
0000000000000000000000000000000000000000;;			t.Errorf("failed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if authorized, _, _ := auth.Authorize(no); authorized {
0000000000000000000000000000000000000000;;			t.Errorf("failed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
