0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
866c247c0d9a1ff1c3786364f7f873087c948ea7;pkg/auth/authorizer/union/union_test.go[pkg/auth/authorizer/union/union_test.go][staging/src/k8s.io/apiserver/pkg/authorization/union/union_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package union
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockAuthzHandler struct {
0000000000000000000000000000000000000000;;		isAuthorized bool
0000000000000000000000000000000000000000;;		err          error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mock *mockAuthzHandler) Authorize(a authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		if mock.err != nil {
0000000000000000000000000000000000000000;;			return false, "", mock.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !mock.isAuthorized {
0000000000000000000000000000000000000000;;			return false, "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizationSecondPasses(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthzHandler{isAuthorized: false}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthzHandler{isAuthorized: true}
0000000000000000000000000000000000000000;;		authzHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorized, _, _ := authzHandler.Authorize(nil)
0000000000000000000000000000000000000000;;		if !authorized {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected authorization failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizationFirstPasses(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthzHandler{isAuthorized: true}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthzHandler{isAuthorized: false}
0000000000000000000000000000000000000000;;		authzHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorized, _, _ := authzHandler.Authorize(nil)
0000000000000000000000000000000000000000;;		if !authorized {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected authorization failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizationNonePasses(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthzHandler{isAuthorized: false}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthzHandler{isAuthorized: false}
0000000000000000000000000000000000000000;;		authzHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		authorized, _, _ := authzHandler.Authorize(nil)
0000000000000000000000000000000000000000;;		if authorized {
0000000000000000000000000000000000000000;;			t.Errorf("Expected failed authorization")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAuthorizationError(t *testing.T) {
0000000000000000000000000000000000000000;;		handler1 := &mockAuthzHandler{err: fmt.Errorf("foo")}
0000000000000000000000000000000000000000;;		handler2 := &mockAuthzHandler{err: fmt.Errorf("foo")}
0000000000000000000000000000000000000000;;		authzHandler := New(handler1, handler2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err := authzHandler.Authorize(nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
