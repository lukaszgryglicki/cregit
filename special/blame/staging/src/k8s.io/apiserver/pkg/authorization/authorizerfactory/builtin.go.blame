0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1d9c0401154ad97906df09974b4ea04e78f787d6;pkg/apiserver/authz.go[pkg/apiserver/authz.go][staging/src/k8s.io/apiserver/pkg/authorization/authorizerfactory/builtin.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package authorizerfactory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// alwaysAllowAuthorizer is an implementation of authorizer.Attributes
0000000000000000000000000000000000000000;;	// which always says yes to an authorization request.
0000000000000000000000000000000000000000;;	// It is useful in tests and when using kubernetes in an open manner.
0000000000000000000000000000000000000000;;	type alwaysAllowAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (alwaysAllowAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		return true, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAlwaysAllowAuthorizer() authorizer.Authorizer {
0000000000000000000000000000000000000000;;		return new(alwaysAllowAuthorizer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// alwaysDenyAuthorizer is an implementation of authorizer.Attributes
0000000000000000000000000000000000000000;;	// which always says no to an authorization request.
0000000000000000000000000000000000000000;;	// It is useful in unit tests to force an operation to be forbidden.
0000000000000000000000000000000000000000;;	type alwaysDenyAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (alwaysDenyAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		return false, "Everything is forbidden.", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAlwaysDenyAuthorizer() authorizer.Authorizer {
0000000000000000000000000000000000000000;;		return new(alwaysDenyAuthorizer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// alwaysFailAuthorizer is an implementation of authorizer.Attributes
0000000000000000000000000000000000000000;;	// which always says no to an authorization request.
0000000000000000000000000000000000000000;;	// It is useful in unit tests to force an operation to fail with error.
0000000000000000000000000000000000000000;;	type alwaysFailAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (alwaysFailAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		return false, "", errors.New("Authorization failure.")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAlwaysFailAuthorizer() authorizer.Authorizer {
0000000000000000000000000000000000000000;;		return new(alwaysFailAuthorizer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type privilegedGroupAuthorizer struct {
0000000000000000000000000000000000000000;;		groups []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *privilegedGroupAuthorizer) Authorize(attr authorizer.Attributes) (bool, string, error) {
0000000000000000000000000000000000000000;;		if attr.GetUser() == nil {
0000000000000000000000000000000000000000;;			return false, "Error", errors.New("no user on request.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, attr_group := range attr.GetUser().GetGroups() {
0000000000000000000000000000000000000000;;			for _, priv_group := range r.groups {
0000000000000000000000000000000000000000;;				if priv_group == attr_group {
0000000000000000000000000000000000000000;;					return true, "", nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, "", nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPrivilegedGroups is for use in loopback scenarios
0000000000000000000000000000000000000000;;	func NewPrivilegedGroups(groups ...string) *privilegedGroupAuthorizer {
0000000000000000000000000000000000000000;;		return &privilegedGroupAuthorizer{
0000000000000000000000000000000000000000;;			groups: groups,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
