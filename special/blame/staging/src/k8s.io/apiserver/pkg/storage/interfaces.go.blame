0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
077d66aba8f75c968107a26a70f46f5196c718ad;pkg/storage/interfaces.go[pkg/storage/interfaces.go][staging/src/k8s.io/apiserver/pkg/storage/interfaces.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Versioner abstracts setting and retrieving metadata fields from database response
0000000000000000000000000000000000000000;;	// onto the object ot list. It is required to maintain storage invariants - updating an
0000000000000000000000000000000000000000;;	// object twice with the same data except for the ResourceVersion and SelfLink must be
0000000000000000000000000000000000000000;;	// a no-op.
0000000000000000000000000000000000000000;;	type Versioner interface {
0000000000000000000000000000000000000000;;		// UpdateObject sets storage metadata into an API object. Returns an error if the object
0000000000000000000000000000000000000000;;		// cannot be updated correctly. May return nil if the requested object does not need metadata
0000000000000000000000000000000000000000;;		// from database.
0000000000000000000000000000000000000000;;		UpdateObject(obj runtime.Object, resourceVersion uint64) error
0000000000000000000000000000000000000000;;		// UpdateList sets the resource version into an API list object. Returns an error if the object
0000000000000000000000000000000000000000;;		// cannot be updated correctly. May return nil if the requested object does not need metadata
0000000000000000000000000000000000000000;;		// from database.
0000000000000000000000000000000000000000;;		UpdateList(obj runtime.Object, resourceVersion uint64) error
0000000000000000000000000000000000000000;;		// PrepareObjectForStorage should set SelfLink and ResourceVersion to the empty value. Should
0000000000000000000000000000000000000000;;		// return an error if the specified object cannot be updated.
0000000000000000000000000000000000000000;;		PrepareObjectForStorage(obj runtime.Object) error
0000000000000000000000000000000000000000;;		// ObjectResourceVersion returns the resource version (for persistence) of the specified object.
0000000000000000000000000000000000000000;;		// Should return an error if the specified object does not have a persistable version.
0000000000000000000000000000000000000000;;		ObjectResourceVersion(obj runtime.Object) (uint64, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseMeta contains information about the database metadata that is associated with
0000000000000000000000000000000000000000;;	// an object. It abstracts the actual underlying objects to prevent coupling with concrete
0000000000000000000000000000000000000000;;	// database and to improve testability.
0000000000000000000000000000000000000000;;	type ResponseMeta struct {
0000000000000000000000000000000000000000;;		// TTL is the time to live of the node that contained the returned object. It may be
0000000000000000000000000000000000000000;;		// zero or negative in some cases (objects may be expired after the requested
0000000000000000000000000000000000000000;;		// expiration time due to server lag).
0000000000000000000000000000000000000000;;		TTL int64
0000000000000000000000000000000000000000;;		// The resource version of the node that contained the returned object.
0000000000000000000000000000000000000000;;		ResourceVersion uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MatchValue defines a pair (<index name>, <value for that index>).
0000000000000000000000000000000000000000;;	type MatchValue struct {
0000000000000000000000000000000000000000;;		IndexName string
0000000000000000000000000000000000000000;;		Value     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TriggerPublisherFunc is a function that takes an object, and returns a list of pairs
0000000000000000000000000000000000000000;;	// (<index name>, <index value for the given object>) for all indexes known
0000000000000000000000000000000000000000;;	// to that function.
0000000000000000000000000000000000000000;;	type TriggerPublisherFunc func(obj runtime.Object) []MatchValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FilterFunc takes an API object and returns true if the object satisfies some requirements.
0000000000000000000000000000000000000000;;	// TODO: We will remove this type and use SelectionPredicate everywhere.
0000000000000000000000000000000000000000;;	type FilterFunc func(obj runtime.Object) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Everything accepts all objects.
0000000000000000000000000000000000000000;;	var Everything = SelectionPredicate{
0000000000000000000000000000000000000000;;		Label: labels.Everything(),
0000000000000000000000000000000000000000;;		Field: fields.Everything(),
0000000000000000000000000000000000000000;;		// TODO: split this into a new top level constant?
0000000000000000000000000000000000000000;;		IncludeUninitialized: true,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pass an UpdateFunc to Interface.GuaranteedUpdate to make an update
0000000000000000000000000000000000000000;;	// that is guaranteed to succeed.
0000000000000000000000000000000000000000;;	// See the comment for GuaranteedUpdate for more details.
0000000000000000000000000000000000000000;;	type UpdateFunc func(input runtime.Object, res ResponseMeta) (output runtime.Object, ttl *uint64, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
0000000000000000000000000000000000000000;;	type Preconditions struct {
0000000000000000000000000000000000000000;;		// Specifies the target UID.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		UID *types.UID `json:"uid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUIDPreconditions returns a Preconditions with UID set.
0000000000000000000000000000000000000000;;	func NewUIDPreconditions(uid string) *Preconditions {
0000000000000000000000000000000000000000;;		u := types.UID(uid)
0000000000000000000000000000000000000000;;		return &Preconditions{UID: &u}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface offers a common interface for object marshaling/unmarshaling operations and
0000000000000000000000000000000000000000;;	// hides all the storage-related operations behind it.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		// Returns Versioner associated with this interface.
0000000000000000000000000000000000000000;;		Versioner() Versioner
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create adds a new object at a key unless it already exists. 'ttl' is time-to-live
0000000000000000000000000000000000000000;;		// in seconds (0 means forever). If no error is returned and out is not nil, out will be
0000000000000000000000000000000000000000;;		// set to the read value from database.
0000000000000000000000000000000000000000;;		Create(ctx context.Context, key string, obj, out runtime.Object, ttl uint64) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete removes the specified key and returns the value that existed at that spot.
0000000000000000000000000000000000000000;;		// If key didn't exist, it will return NotFound storage error.
0000000000000000000000000000000000000000;;		Delete(ctx context.Context, key string, out runtime.Object, preconditions *Preconditions) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Watch begins watching the specified key. Events are decoded into API objects,
0000000000000000000000000000000000000000;;		// and any items selected by 'p' are sent down to returned watch.Interface.
0000000000000000000000000000000000000000;;		// resourceVersion may be used to specify what version to begin watching,
0000000000000000000000000000000000000000;;		// which should be the current resourceVersion, and no longer rv+1
0000000000000000000000000000000000000000;;		// (e.g. reconnecting without missing any updates).
0000000000000000000000000000000000000000;;		// If resource version is "0", this interface will get current object at given key
0000000000000000000000000000000000000000;;		// and send it in an "ADDED" event, before watch starts.
0000000000000000000000000000000000000000;;		Watch(ctx context.Context, key string, resourceVersion string, p SelectionPredicate) (watch.Interface, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// WatchList begins watching the specified key's items. Items are decoded into API
0000000000000000000000000000000000000000;;		// objects and any item selected by 'p' are sent down to returned watch.Interface.
0000000000000000000000000000000000000000;;		// resourceVersion may be used to specify what version to begin watching,
0000000000000000000000000000000000000000;;		// which should be the current resourceVersion, and no longer rv+1
0000000000000000000000000000000000000000;;		// (e.g. reconnecting without missing any updates).
0000000000000000000000000000000000000000;;		// If resource version is "0", this interface will list current objects directory defined by key
0000000000000000000000000000000000000000;;		// and send them in "ADDED" events, before watch starts.
0000000000000000000000000000000000000000;;		WatchList(ctx context.Context, key string, resourceVersion string, p SelectionPredicate) (watch.Interface, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get unmarshals json found at key into objPtr. On a not found error, will either
0000000000000000000000000000000000000000;;		// return a zero object of the requested type, or an error, depending on ignoreNotFound.
0000000000000000000000000000000000000000;;		// Treats empty responses and nil response nodes exactly like a not found error.
0000000000000000000000000000000000000000;;		// The returned contents may be delayed, but it is guaranteed that they will
0000000000000000000000000000000000000000;;		// be have at least 'resourceVersion'.
0000000000000000000000000000000000000000;;		Get(ctx context.Context, key string, resourceVersion string, objPtr runtime.Object, ignoreNotFound bool) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetToList unmarshals json found at key and opaque it into *List api object
0000000000000000000000000000000000000000;;		// (an object that satisfies the runtime.IsList definition).
0000000000000000000000000000000000000000;;		// The returned contents may be delayed, but it is guaranteed that they will
0000000000000000000000000000000000000000;;		// be have at least 'resourceVersion'.
0000000000000000000000000000000000000000;;		GetToList(ctx context.Context, key string, resourceVersion string, p SelectionPredicate, listObj runtime.Object) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List unmarshalls jsons found at directory defined by key and opaque them
0000000000000000000000000000000000000000;;		// into *List api object (an object that satisfies runtime.IsList definition).
0000000000000000000000000000000000000000;;		// The returned contents may be delayed, but it is guaranteed that they will
0000000000000000000000000000000000000000;;		// be have at least 'resourceVersion'.
0000000000000000000000000000000000000000;;		List(ctx context.Context, key string, resourceVersion string, p SelectionPredicate, listObj runtime.Object) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GuaranteedUpdate keeps calling 'tryUpdate()' to update key 'key' (of type 'ptrToType')
0000000000000000000000000000000000000000;;		// retrying the update until success if there is index conflict.
0000000000000000000000000000000000000000;;		// Note that object passed to tryUpdate may change across invocations of tryUpdate() if
0000000000000000000000000000000000000000;;		// other writers are simultaneously updating it, so tryUpdate() needs to take into account
0000000000000000000000000000000000000000;;		// the current contents of the object when deciding how the update object should look.
0000000000000000000000000000000000000000;;		// If the key doesn't exist, it will return NotFound storage error if ignoreNotFound=false
0000000000000000000000000000000000000000;;		// or zero value in 'ptrToType' parameter otherwise.
0000000000000000000000000000000000000000;;		// If the object to update has the same value as previous, it won't do any update
0000000000000000000000000000000000000000;;		// but will return the object in 'ptrToType' parameter.
0000000000000000000000000000000000000000;;		// If 'suggestion' can contain zero or one element - in such case this can be used as
0000000000000000000000000000000000000000;;		// a suggestion about the current version of the object to avoid read operation from
0000000000000000000000000000000000000000;;		// storage to get it.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Example:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// s := /* implementation of Interface */
0000000000000000000000000000000000000000;;		// err := s.GuaranteedUpdate(
0000000000000000000000000000000000000000;;		//     "myKey", &MyType{}, true,
0000000000000000000000000000000000000000;;		//     func(input runtime.Object, res ResponseMeta) (runtime.Object, *uint64, error) {
0000000000000000000000000000000000000000;;		//       // Before each incovation of the user defined function, "input" is reset to
0000000000000000000000000000000000000000;;		//       // current contents for "myKey" in database.
0000000000000000000000000000000000000000;;		//       curr := input.(*MyType)  // Guaranteed to succeed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//       // Make the modification
0000000000000000000000000000000000000000;;		//       curr.Counter++
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//       // Return the modified object - return an error to stop iterating. Return
0000000000000000000000000000000000000000;;		//       // a uint64 to alter the TTL on the object, or nil to keep it the same value.
0000000000000000000000000000000000000000;;		//       return cur, nil, nil
0000000000000000000000000000000000000000;;		//    }
0000000000000000000000000000000000000000;;		// })
0000000000000000000000000000000000000000;;		GuaranteedUpdate(
0000000000000000000000000000000000000000;;			ctx context.Context, key string, ptrToType runtime.Object, ignoreNotFound bool,
0000000000000000000000000000000000000000;;			precondtions *Preconditions, tryUpdate UpdateFunc, suggestion ...runtime.Object) error
0000000000000000000000000000000000000000;;	}
