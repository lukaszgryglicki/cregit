0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
8743a18be39210ffc123c5c71384371b2d21c92c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testTransformer struct {
0000000000000000000000000000000000000000;;		from, to                 []byte
0000000000000000000000000000000000000000;;		err                      error
0000000000000000000000000000000000000000;;		stale                    bool
0000000000000000000000000000000000000000;;		receivedFrom, receivedTo []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testTransformer) TransformFromStorage(from []byte, context Context) (data []byte, stale bool, err error) {
0000000000000000000000000000000000000000;;		t.receivedFrom = from
0000000000000000000000000000000000000000;;		return t.from, t.stale, t.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testTransformer) TransformToStorage(to []byte, context Context) (data []byte, err error) {
0000000000000000000000000000000000000000;;		t.receivedTo = to
0000000000000000000000000000000000000000;;		return t.to, t.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrefixFrom(t *testing.T) {
0000000000000000000000000000000000000000;;		testErr := fmt.Errorf("test error")
0000000000000000000000000000000000000000;;		transformErr := fmt.Errorf("test error")
0000000000000000000000000000000000000000;;		transformers := []PrefixTransformer{
0000000000000000000000000000000000000000;;			{Prefix: []byte("first:"), Transformer: &testTransformer{from: []byte("value1")}},
0000000000000000000000000000000000000000;;			{Prefix: []byte("second:"), Transformer: &testTransformer{from: []byte("value2")}},
0000000000000000000000000000000000000000;;			{Prefix: []byte("fails:"), Transformer: &testTransformer{err: transformErr}},
0000000000000000000000000000000000000000;;			{Prefix: []byte("stale:"), Transformer: &testTransformer{from: []byte("value3"), stale: true}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p := NewPrefixTransformers(testErr, transformers...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			input  []byte
0000000000000000000000000000000000000000;;			expect []byte
0000000000000000000000000000000000000000;;			stale  bool
0000000000000000000000000000000000000000;;			err    error
0000000000000000000000000000000000000000;;			match  int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{[]byte("first:value"), []byte("value1"), false, nil, 0},
0000000000000000000000000000000000000000;;			{[]byte("second:value"), []byte("value2"), true, nil, 1},
0000000000000000000000000000000000000000;;			{[]byte("third:value"), nil, false, testErr, -1},
0000000000000000000000000000000000000000;;			{[]byte("fails:value"), nil, true, transformErr, 2},
0000000000000000000000000000000000000000;;			{[]byte("stale:value"), []byte("value3"), true, nil, 3},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			got, stale, err := p.TransformFromStorage(test.input, nil)
0000000000000000000000000000000000000000;;			if err != test.err || stale != test.stale || !bytes.Equal(got, test.expect) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected out: %q %t %#v", i, string(got), stale, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.match != -1 && !bytes.Equal([]byte("value"), transformers[test.match].Transformer.(*testTransformer).receivedFrom) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected value received by transformer: %s", i, transformers[test.match].Transformer.(*testTransformer).receivedFrom)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrefixTo(t *testing.T) {
0000000000000000000000000000000000000000;;		testErr := fmt.Errorf("test error")
0000000000000000000000000000000000000000;;		transformErr := fmt.Errorf("test error")
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			transformers []PrefixTransformer
0000000000000000000000000000000000000000;;			expect       []byte
0000000000000000000000000000000000000000;;			err          error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{[]PrefixTransformer{{Prefix: []byte("first:"), Transformer: &testTransformer{to: []byte("value1")}}}, []byte("first:value1"), nil},
0000000000000000000000000000000000000000;;			{[]PrefixTransformer{{Prefix: []byte("second:"), Transformer: &testTransformer{to: []byte("value2")}}}, []byte("second:value2"), nil},
0000000000000000000000000000000000000000;;			{[]PrefixTransformer{{Prefix: []byte("fails:"), Transformer: &testTransformer{err: transformErr}}}, nil, transformErr},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			p := NewPrefixTransformers(testErr, test.transformers...)
0000000000000000000000000000000000000000;;			got, err := p.TransformToStorage([]byte("value"), nil)
0000000000000000000000000000000000000000;;			if err != test.err || !bytes.Equal(got, test.expect) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected out: %q %#v", i, string(got), err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !bytes.Equal([]byte("value"), test.transformers[0].Transformer.(*testTransformer).receivedTo) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected value received by transformer: %s", i, test.transformers[0].Transformer.(*testTransformer).receivedTo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
