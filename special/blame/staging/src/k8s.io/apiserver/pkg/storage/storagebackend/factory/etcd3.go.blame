0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e955367d053d2ebf4bee4ac2c428c7879f1c363a;pkg/storage/storagebackend/etcd3.go[pkg/storage/storagebackend/etcd3.go][staging/src/k8s.io/apiserver/pkg/storage/storagebackend/factory/etcd3.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package factory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/transport"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/etcd3"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/value"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newETCD3Storage(c storagebackend.Config) (storage.Interface, DestroyFunc, error) {
0000000000000000000000000000000000000000;;		tlsInfo := transport.TLSInfo{
0000000000000000000000000000000000000000;;			CertFile: c.CertFile,
0000000000000000000000000000000000000000;;			KeyFile:  c.KeyFile,
0000000000000000000000000000000000000000;;			CAFile:   c.CAFile,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tlsConfig, err := tlsInfo.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// NOTE: Client relies on nil tlsConfig
0000000000000000000000000000000000000000;;		// for non-secure connections, update the implicit variable
0000000000000000000000000000000000000000;;		if len(c.CertFile) == 0 && len(c.KeyFile) == 0 && len(c.CAFile) == 0 {
0000000000000000000000000000000000000000;;			tlsConfig = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg := clientv3.Config{
0000000000000000000000000000000000000000;;			Endpoints: c.ServerList,
0000000000000000000000000000000000000000;;			TLS:       tlsConfig,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := clientv3.New(cfg)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;		etcd3.StartCompactor(ctx, client)
0000000000000000000000000000000000000000;;		destroyFunc := func() {
0000000000000000000000000000000000000000;;			cancel()
0000000000000000000000000000000000000000;;			client.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		transformer := c.Transformer
0000000000000000000000000000000000000000;;		if transformer == nil {
0000000000000000000000000000000000000000;;			transformer = value.IdentityTransformer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.Quorum {
0000000000000000000000000000000000000000;;			return etcd3.New(client, c.Codec, c.Prefix, transformer), destroyFunc, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return etcd3.NewWithNoQuorumRead(client, c.Codec, c.Prefix, transformer), destroyFunc, nil
0000000000000000000000000000000000000000;;	}
