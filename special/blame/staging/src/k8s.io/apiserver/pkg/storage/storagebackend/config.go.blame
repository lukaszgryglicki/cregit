0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e955367d053d2ebf4bee4ac2c428c7879f1c363a;pkg/storage/storagebackend/config.go[pkg/storage/storagebackend/config.go][staging/src/k8s.io/apiserver/pkg/storage/storagebackend/config.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storagebackend
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/value"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		StorageTypeUnset = ""
0000000000000000000000000000000000000000;;		StorageTypeETCD2 = "etcd2"
0000000000000000000000000000000000000000;;		StorageTypeETCD3 = "etcd3"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config is configuration for creating a storage backend.
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// Type defines the type of storage backend, e.g. "etcd2", etcd3". Default ("") is "etcd3".
0000000000000000000000000000000000000000;;		Type string
0000000000000000000000000000000000000000;;		// Prefix is the prefix to all keys passed to storage.Interface methods.
0000000000000000000000000000000000000000;;		Prefix string
0000000000000000000000000000000000000000;;		// ServerList is the list of storage servers to connect with.
0000000000000000000000000000000000000000;;		ServerList []string
0000000000000000000000000000000000000000;;		// TLS credentials
0000000000000000000000000000000000000000;;		KeyFile  string
0000000000000000000000000000000000000000;;		CertFile string
0000000000000000000000000000000000000000;;		CAFile   string
0000000000000000000000000000000000000000;;		// Quorum indicates that whether read operations should be quorum-level consistent.
0000000000000000000000000000000000000000;;		Quorum bool
0000000000000000000000000000000000000000;;		// DeserializationCacheSize is the size of cache of deserialized objects.
0000000000000000000000000000000000000000;;		// Currently this is only supported in etcd2.
0000000000000000000000000000000000000000;;		// We will drop the cache once using protobuf.
0000000000000000000000000000000000000000;;		DeserializationCacheSize int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Codec  runtime.Codec
0000000000000000000000000000000000000000;;		Copier runtime.ObjectCopier
0000000000000000000000000000000000000000;;		// Transformer allows the value to be transformed prior to persisting into etcd.
0000000000000000000000000000000000000000;;		Transformer value.Transformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDefaultConfig(prefix string, copier runtime.ObjectCopier, codec runtime.Codec) *Config {
0000000000000000000000000000000000000000;;		return &Config{
0000000000000000000000000000000000000000;;			Prefix: prefix,
0000000000000000000000000000000000000000;;			// Default cache size to 0 - if unset, its size will be set based on target
0000000000000000000000000000000000000000;;			// memory usage.
0000000000000000000000000000000000000000;;			DeserializationCacheSize: 0,
0000000000000000000000000000000000000000;;			Copier: copier,
0000000000000000000000000000000000000000;;			Codec:  codec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
