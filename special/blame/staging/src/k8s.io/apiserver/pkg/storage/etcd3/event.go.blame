0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9524e06cb3de8c702646be485d1f0cdd7df08203;pkg/storage/etcd3/event.go[pkg/storage/etcd3/event.go][staging/src/k8s.io/apiserver/pkg/storage/etcd3/event.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package etcd3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/clientv3"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/mvcc/mvccpb"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type event struct {
0000000000000000000000000000000000000000;;		key       string
0000000000000000000000000000000000000000;;		value     []byte
0000000000000000000000000000000000000000;;		prevValue []byte
0000000000000000000000000000000000000000;;		rev       int64
0000000000000000000000000000000000000000;;		isDeleted bool
0000000000000000000000000000000000000000;;		isCreated bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseKV converts a KeyValue retrieved from an initial sync() listing to a synthetic isCreated event.
0000000000000000000000000000000000000000;;	func parseKV(kv *mvccpb.KeyValue) *event {
0000000000000000000000000000000000000000;;		return &event{
0000000000000000000000000000000000000000;;			key:       string(kv.Key),
0000000000000000000000000000000000000000;;			value:     kv.Value,
0000000000000000000000000000000000000000;;			prevValue: nil,
0000000000000000000000000000000000000000;;			rev:       kv.ModRevision,
0000000000000000000000000000000000000000;;			isDeleted: false,
0000000000000000000000000000000000000000;;			isCreated: true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseEvent(e *clientv3.Event) *event {
0000000000000000000000000000000000000000;;		ret := &event{
0000000000000000000000000000000000000000;;			key:       string(e.Kv.Key),
0000000000000000000000000000000000000000;;			value:     e.Kv.Value,
0000000000000000000000000000000000000000;;			rev:       e.Kv.ModRevision,
0000000000000000000000000000000000000000;;			isDeleted: e.Type == clientv3.EventTypeDelete,
0000000000000000000000000000000000000000;;			isCreated: e.IsCreate(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e.PrevKv != nil {
0000000000000000000000000000000000000000;;			ret.prevValue = e.PrevKv.Value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
