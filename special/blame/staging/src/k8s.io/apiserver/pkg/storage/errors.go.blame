0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
5698a70537e8f7934cf19ce64a0cca8d1e16de1e;pkg/storage/errors.go[pkg/storage/errors.go][staging/src/k8s.io/apiserver/pkg/storage/errors.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ErrCodeKeyNotFound int = iota + 1
0000000000000000000000000000000000000000;;		ErrCodeKeyExists
0000000000000000000000000000000000000000;;		ErrCodeResourceVersionConflicts
0000000000000000000000000000000000000000;;		ErrCodeInvalidObj
0000000000000000000000000000000000000000;;		ErrCodeUnreachable
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errCodeToMessage = map[int]string{
0000000000000000000000000000000000000000;;		ErrCodeKeyNotFound:              "key not found",
0000000000000000000000000000000000000000;;		ErrCodeKeyExists:                "key exists",
0000000000000000000000000000000000000000;;		ErrCodeResourceVersionConflicts: "resource version conflicts",
0000000000000000000000000000000000000000;;		ErrCodeInvalidObj:               "invalid object",
0000000000000000000000000000000000000000;;		ErrCodeUnreachable:              "server unreachable",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKeyNotFoundError(key string, rv int64) *StorageError {
0000000000000000000000000000000000000000;;		return &StorageError{
0000000000000000000000000000000000000000;;			Code:            ErrCodeKeyNotFound,
0000000000000000000000000000000000000000;;			Key:             key,
0000000000000000000000000000000000000000;;			ResourceVersion: rv,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewKeyExistsError(key string, rv int64) *StorageError {
0000000000000000000000000000000000000000;;		return &StorageError{
0000000000000000000000000000000000000000;;			Code:            ErrCodeKeyExists,
0000000000000000000000000000000000000000;;			Key:             key,
0000000000000000000000000000000000000000;;			ResourceVersion: rv,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourceVersionConflictsError(key string, rv int64) *StorageError {
0000000000000000000000000000000000000000;;		return &StorageError{
0000000000000000000000000000000000000000;;			Code:            ErrCodeResourceVersionConflicts,
0000000000000000000000000000000000000000;;			Key:             key,
0000000000000000000000000000000000000000;;			ResourceVersion: rv,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnreachableError(key string, rv int64) *StorageError {
0000000000000000000000000000000000000000;;		return &StorageError{
0000000000000000000000000000000000000000;;			Code:            ErrCodeUnreachable,
0000000000000000000000000000000000000000;;			Key:             key,
0000000000000000000000000000000000000000;;			ResourceVersion: rv,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInvalidObjError(key, msg string) *StorageError {
0000000000000000000000000000000000000000;;		return &StorageError{
0000000000000000000000000000000000000000;;			Code:               ErrCodeInvalidObj,
0000000000000000000000000000000000000000;;			Key:                key,
0000000000000000000000000000000000000000;;			AdditionalErrorMsg: msg,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageError struct {
0000000000000000000000000000000000000000;;		Code               int
0000000000000000000000000000000000000000;;		Key                string
0000000000000000000000000000000000000000;;		ResourceVersion    int64
0000000000000000000000000000000000000000;;		AdditionalErrorMsg string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *StorageError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("StorageError: %s, Code: %d, Key: %s, ResourceVersion: %d, AdditionalErrorMsg: %s",
0000000000000000000000000000000000000000;;			errCodeToMessage[e.Code], e.Code, e.Key, e.ResourceVersion, e.AdditionalErrorMsg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNotFound returns true if and only if err is "key" not found error.
0000000000000000000000000000000000000000;;	func IsNotFound(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeKeyNotFound)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNodeExist returns true if and only if err is an node already exist error.
0000000000000000000000000000000000000000;;	func IsNodeExist(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeKeyExists)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUnreachable returns true if and only if err indicates the server could not be reached.
0000000000000000000000000000000000000000;;	func IsUnreachable(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeUnreachable)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsConflict returns true if and only if err is a write conflict.
0000000000000000000000000000000000000000;;	func IsConflict(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeResourceVersionConflicts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsInvalidObj returns true if and only if err is invalid error
0000000000000000000000000000000000000000;;	func IsInvalidObj(err error) bool {
0000000000000000000000000000000000000000;;		return isErrCode(err, ErrCodeInvalidObj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isErrCode(err error, code int) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, ok := err.(*StorageError); ok {
0000000000000000000000000000000000000000;;			return e.Code == code
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InvalidError is generated when an error caused by invalid API object occurs
0000000000000000000000000000000000000000;;	// in the storage package.
0000000000000000000000000000000000000000;;	type InvalidError struct {
0000000000000000000000000000000000000000;;		Errs field.ErrorList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e InvalidError) Error() string {
0000000000000000000000000000000000000000;;		return e.Errs.ToAggregate().Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsInvalidError returns true if and only if err is an InvalidError.
0000000000000000000000000000000000000000;;	func IsInvalidError(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(InvalidError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInvalidError(errors field.ErrorList) InvalidError {
0000000000000000000000000000000000000000;;		return InvalidError{errors}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InternalError is generated when an error occurs in the storage package, i.e.,
0000000000000000000000000000000000000000;;	// not from the underlying storage backend (e.g., etcd).
0000000000000000000000000000000000000000;;	type InternalError struct {
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e InternalError) Error() string {
0000000000000000000000000000000000000000;;		return e.Reason
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsInternalError returns true if and only if err is an InternalError.
0000000000000000000000000000000000000000;;	func IsInternalError(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(InternalError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInternalError(reason string) InternalError {
0000000000000000000000000000000000000000;;		return InternalError{reason}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewInternalErrorf(format string, a ...interface{}) InternalError {
0000000000000000000000000000000000000000;;		return InternalError{fmt.Sprintf(format, a)}
0000000000000000000000000000000000000000;;	}
