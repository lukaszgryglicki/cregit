0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d938b9056feb6a4fecc5ffcbd8e8274bf46c9fa2;pkg/tools/etcd_object.go[pkg/tools/etcd_object.go][staging/src/k8s.io/apiserver/pkg/storage/etcd/api_object_versioner.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package etcd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIObjectVersioner implements versioning and extracting etcd node information
0000000000000000000000000000000000000000;;	// for objects that have an embedded ObjectMeta or ListMeta field.
0000000000000000000000000000000000000000;;	type APIObjectVersioner struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateObject implements Versioner
0000000000000000000000000000000000000000;;	func (a APIObjectVersioner) UpdateObject(obj runtime.Object, resourceVersion uint64) error {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versionString := ""
0000000000000000000000000000000000000000;;		if resourceVersion != 0 {
0000000000000000000000000000000000000000;;			versionString = strconv.FormatUint(resourceVersion, 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetResourceVersion(versionString)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateList implements Versioner
0000000000000000000000000000000000000000;;	func (a APIObjectVersioner) UpdateList(obj runtime.Object, resourceVersion uint64) error {
0000000000000000000000000000000000000000;;		listAccessor, err := meta.ListAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil || listAccessor == nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		versionString := ""
0000000000000000000000000000000000000000;;		if resourceVersion != 0 {
0000000000000000000000000000000000000000;;			versionString = strconv.FormatUint(resourceVersion, 10)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		listAccessor.SetResourceVersion(versionString)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrepareObjectForStorage clears resource version and self link prior to writing to etcd.
0000000000000000000000000000000000000000;;	func (a APIObjectVersioner) PrepareObjectForStorage(obj runtime.Object) error {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetResourceVersion("")
0000000000000000000000000000000000000000;;		accessor.SetSelfLink("")
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectResourceVersion implements Versioner
0000000000000000000000000000000000000000;;	func (a APIObjectVersioner) ObjectResourceVersion(obj runtime.Object) (uint64, error) {
0000000000000000000000000000000000000000;;		accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		version := accessor.GetResourceVersion()
0000000000000000000000000000000000000000;;		if len(version) == 0 {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strconv.ParseUint(version, 10, 64)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIObjectVersioner implements Versioner
0000000000000000000000000000000000000000;;	var Versioner storage.Versioner = APIObjectVersioner{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompareResourceVersion compares etcd resource versions.  Outside this API they are all strings,
0000000000000000000000000000000000000000;;	// but etcd resource versions are special, they're actually ints, so we can easily compare them.
0000000000000000000000000000000000000000;;	func (a APIObjectVersioner) CompareResourceVersion(lhs, rhs runtime.Object) int {
0000000000000000000000000000000000000000;;		lhsVersion, err := Versioner.ObjectResourceVersion(lhs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// coder error
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rhsVersion, err := Versioner.ObjectResourceVersion(rhs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			// coder error
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lhsVersion == rhsVersion {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lhsVersion < rhsVersion {
0000000000000000000000000000000000000000;;			return -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return 1
0000000000000000000000000000000000000000;;	}
