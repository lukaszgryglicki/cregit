0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5da2dc0a37bcde203fffb0bed5ffadf7c76f0631;pkg/util/etcd_tools_test.go[pkg/util/etcd_tools_test.go][staging/src/k8s.io/apiserver/pkg/storage/etcd/etcd_helper_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package etcd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcd "github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/example"
0000000000000000000000000000000000000000;;		examplev1 "k8s.io/apiserver/pkg/apis/example/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/etcd/etcdtest"
0000000000000000000000000000000000000000;;		etcdtesting "k8s.io/apiserver/pkg/storage/etcd/testing"
0000000000000000000000000000000000000000;;		storagetesting "k8s.io/apiserver/pkg/storage/testing"
0000000000000000000000000000000000000000;;		storagetests "k8s.io/apiserver/pkg/storage/tests"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// prefixTransformer adds and verifies that all data has the correct prefix on its way in and out.
0000000000000000000000000000000000000000;;	type prefixTransformer struct {
0000000000000000000000000000000000000000;;		prefix string
0000000000000000000000000000000000000000;;		stale  bool
0000000000000000000000000000000000000000;;		err    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p prefixTransformer) TransformStringFromStorage(s string) (string, bool, error) {
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(s, p.prefix) {
0000000000000000000000000000000000000000;;			return "", false, fmt.Errorf("value does not have expected prefix: %s", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.TrimPrefix(s, p.prefix), p.stale, p.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (p prefixTransformer) TransformStringToStorage(s string) (string, error) {
0000000000000000000000000000000000000000;;		if len(s) > 0 {
0000000000000000000000000000000000000000;;			return p.prefix + s, p.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, p.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultPrefix(s string) string {
0000000000000000000000000000000000000000;;		return "test!" + s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func defaultPrefixValue(value []byte) string {
0000000000000000000000000000000000000000;;		return defaultPrefix(string(value))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testScheme(t *testing.T) (*runtime.Scheme, serializer.CodecFactory) {
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;		scheme.Log(t)
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(schema.GroupVersion{Version: runtime.APIVersionInternal}, &storagetesting.TestResource{})
0000000000000000000000000000000000000000;;		example.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		examplev1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		if err := scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			func(in *storagetesting.TestResource, out *storagetesting.TestResource, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				*out = *in
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in, out *time.Time, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				*out = *in
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		codecs := serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;		return scheme, codecs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newEtcdHelper(client etcd.Client, scheme *runtime.Scheme, codec runtime.Codec, prefix string) etcdHelper {
0000000000000000000000000000000000000000;;		return *NewEtcdStorage(client, codec, prefix, false, etcdtest.DeserializationCacheSize, scheme, prefixTransformer{prefix: "test!"}).(*etcdHelper)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns an encoded version of example.Pod with the given name.
0000000000000000000000000000000000000000;;	func getEncodedPod(name string, codec runtime.Codec) string {
0000000000000000000000000000000000000000;;		pod, _ := runtime.Encode(codec, &examplev1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return string(pod)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createObj(t *testing.T, helper etcdHelper, name string, obj, out runtime.Object, ttl uint64) error {
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), name, obj, out, ttl)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createPodList(t *testing.T, helper etcdHelper, list *example.PodList) error {
0000000000000000000000000000000000000000;;		for i := range list.Items {
0000000000000000000000000000000000000000;;			returnedObj := &example.Pod{}
0000000000000000000000000000000000000000;;			err := createObj(t, helper, list.Items[i].Name, &list.Items[i], returnedObj, 0)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			list.Items[i] = *returnedObj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list := example.PodList{
0000000000000000000000000000000000000000;;			Items: []example.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createPodList(t, helper, &list)
0000000000000000000000000000000000000000;;		var got example.PodList
0000000000000000000000000000000000000000;;		// TODO: a sorted filter function could be applied such implied
0000000000000000000000000000000000000000;;		// ordering on the returned list doesn't matter.
0000000000000000000000000000000000000000;;		err := helper.List(context.TODO(), "/", "", storage.Everything, &got)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := list.Items, got.Items; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTransformationFailure(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pods := []example.Pod{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;				Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Name: "baz"},
0000000000000000000000000000000000000000;;				Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		createPodList(t, helper, &example.PodList{Items: pods[:1]})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create a second resource with an invalid prefix
0000000000000000000000000000000000000000;;		oldTransformer := helper.transformer
0000000000000000000000000000000000000000;;		helper.transformer = prefixTransformer{prefix: "otherprefix!"}
0000000000000000000000000000000000000000;;		createPodList(t, helper, &example.PodList{Items: pods[1:]})
0000000000000000000000000000000000000000;;		helper.transformer = oldTransformer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// only the first item is returned, and no error
0000000000000000000000000000000000000000;;		var got example.PodList
0000000000000000000000000000000000000000;;		if err := helper.List(context.TODO(), "/", "", storage.Everything, &got); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := pods[:1], got.Items; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected: %s", diff.ObjectReflectDiff(e, a))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get should fail
0000000000000000000000000000000000000000;;		if err := helper.Get(context.TODO(), "/baz", "", &example.Pod{}, false); !storage.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// GuaranteedUpdate should return an error
0000000000000000000000000000000000000000;;		if err := helper.GuaranteedUpdate(context.TODO(), "/baz", &example.Pod{}, false, nil, func(input runtime.Object, res storage.ResponseMeta) (output runtime.Object, ttl *uint64, err error) {
0000000000000000000000000000000000000000;;			return input, nil, nil
0000000000000000000000000000000000000000;;		}, &pods[1]); !storage.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete succeeds but reports an error because we cannot access the body
0000000000000000000000000000000000000000;;		if err := helper.Delete(context.TODO(), "/baz", &example.Pod{}, nil); !storage.IsInternalError(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := helper.Get(context.TODO(), "/baz", "", &example.Pod{}, false); !storage.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestListFiltered(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list := example.PodList{
0000000000000000000000000000000000000000;;			Items: []example.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createPodList(t, helper, &list)
0000000000000000000000000000000000000000;;		// List only "bar" pod
0000000000000000000000000000000000000000;;		p := storage.SelectionPredicate{
0000000000000000000000000000000000000000;;			Label: labels.Everything(),
0000000000000000000000000000000000000000;;			Field: fields.SelectorFromSet(fields.Set{"metadata.name": "bar"}),
0000000000000000000000000000000000000000;;			GetAttrs: func(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;				pod := obj.(*example.Pod)
0000000000000000000000000000000000000000;;				return labels.Set(pod.Labels), fields.Set{"metadata.name": pod.Name}, pod.Initializers != nil, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var got example.PodList
0000000000000000000000000000000000000000;;		err := helper.List(context.TODO(), "/", "", p, &got)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Check to make certain that the filter function only returns "bar"
0000000000000000000000000000000000000000;;		if e, a := list.Items[0], got.Items[0]; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestListAcrossDirectories ensures that the client excludes directories and flattens tree-response - simulates cross-namespace query
0000000000000000000000000000000000000000;;	func TestListAcrossDirectories(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		roothelper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		helper1 := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix()+"/dir1")
0000000000000000000000000000000000000000;;		helper2 := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix()+"/dir2")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list := example.PodList{
0000000000000000000000000000000000000000;;			Items: []example.Pod{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "baz"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "bar"},
0000000000000000000000000000000000000000;;					Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		returnedObj := &example.Pod{}
0000000000000000000000000000000000000000;;		// create the 1st 2 elements in one directory
0000000000000000000000000000000000000000;;		createObj(t, helper1, list.Items[0].Name, &list.Items[0], returnedObj, 0)
0000000000000000000000000000000000000000;;		list.Items[0] = *returnedObj
0000000000000000000000000000000000000000;;		createObj(t, helper1, list.Items[1].Name, &list.Items[1], returnedObj, 0)
0000000000000000000000000000000000000000;;		list.Items[1] = *returnedObj
0000000000000000000000000000000000000000;;		// create the last element in the other directory
0000000000000000000000000000000000000000;;		createObj(t, helper2, list.Items[2].Name, &list.Items[2], returnedObj, 0)
0000000000000000000000000000000000000000;;		list.Items[2] = *returnedObj
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got example.PodList
0000000000000000000000000000000000000000;;		err := roothelper.List(context.TODO(), "/", "", storage.Everything, &got)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := list.Items, got.Items; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		key := "/some/key"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		expect := example.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;			Spec:       storagetests.DeepEqualSafePodSpec(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var got example.Pod
0000000000000000000000000000000000000000;;		if err := helper.Create(context.TODO(), key, &expect, &got, 0); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expect = got
0000000000000000000000000000000000000000;;		if err := helper.Get(context.TODO(), key, "", &got, false); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(got, expect) {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted %#v, got %#v", expect, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetNotFoundErr(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Version: "v1"})
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		boguskey := "/some/boguskey"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got example.Pod
0000000000000000000000000000000000000000;;		err := helper.Get(context.TODO(), boguskey, "", &got, false)
0000000000000000000000000000000000000000;;		if !storage.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected reponse on key=%v, err=%v", boguskey, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		obj := &example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}}
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		returnedObj := &example.Pod{}
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), "/some/key", obj, returnedObj, 5)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = runtime.Encode(codec, obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = helper.Get(context.TODO(), "/some/key", "", returnedObj, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, err = runtime.Encode(codec, returnedObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if obj.Name != returnedObj.Name {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted %v, got %v", obj.Name, returnedObj.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateNilOutParam(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		obj := &example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}}
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), "/some/key", obj, nil, 5)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGuaranteedUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		key := "/some/key"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: 1}
0000000000000000000000000000000000000000;;		err := helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update an existing node.
0000000000000000000000000000000000000000;;		callbackCalled := false
0000000000000000000000000000000000000000;;		objUpdate := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: 2}
0000000000000000000000000000000000000000;;		err = helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			callbackCalled = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if in.(*storagetesting.TestResource).Value != 1 {
0000000000000000000000000000000000000000;;				t.Errorf("Callback input was not current set value")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return objUpdate, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objCheck := &storagetesting.TestResource{}
0000000000000000000000000000000000000000;;		err = helper.Get(context.TODO(), key, "", objCheck, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if objCheck.Value != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Value should have been 2 but got %v", objCheck.Value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !callbackCalled {
0000000000000000000000000000000000000000;;			t.Errorf("tryUpdate callback should have been called.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGuaranteedUpdateNoChange(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		key := "/some/key"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: 1}
0000000000000000000000000000000000000000;;		original := &storagetesting.TestResource{}
0000000000000000000000000000000000000000;;		err := helper.GuaranteedUpdate(context.TODO(), key, original, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update an existing node with the same data
0000000000000000000000000000000000000000;;		callbackCalled := false
0000000000000000000000000000000000000000;;		objUpdate := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo", ResourceVersion: original.ResourceVersion}, Value: 1}
0000000000000000000000000000000000000000;;		result := &storagetesting.TestResource{}
0000000000000000000000000000000000000000;;		err = helper.GuaranteedUpdate(context.TODO(), key, result, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			callbackCalled = true
0000000000000000000000000000000000000000;;			return objUpdate, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !callbackCalled {
0000000000000000000000000000000000000000;;			t.Errorf("tryUpdate callback should have been called.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result.ResourceVersion != original.ResourceVersion {
0000000000000000000000000000000000000000;;			t.Fatalf("updated the object resource version")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update an existing node with the same data but return stale
0000000000000000000000000000000000000000;;		helper.transformer = prefixTransformer{prefix: "test!", stale: true}
0000000000000000000000000000000000000000;;		callbackCalled = false
0000000000000000000000000000000000000000;;		result = &storagetesting.TestResource{}
0000000000000000000000000000000000000000;;		objUpdate = &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: 1}
0000000000000000000000000000000000000000;;		err = helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			callbackCalled = true
0000000000000000000000000000000000000000;;			return objUpdate, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !callbackCalled {
0000000000000000000000000000000000000000;;			t.Errorf("tryUpdate callback should have been called.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if result.ResourceVersion == original.ResourceVersion {
0000000000000000000000000000000000000000;;			t.Errorf("did not update the object resource version")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGuaranteedUpdateKeyNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		key := "/some/key"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create a new node.
0000000000000000000000000000000000000000;;		obj := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: 1}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ignoreNotFound := false
0000000000000000000000000000000000000000;;		err := helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, ignoreNotFound, nil, f)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error for key not found.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ignoreNotFound = true
0000000000000000000000000000000000000000;;		err = helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, ignoreNotFound, nil, f)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %v.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGuaranteedUpdate_CreateCollision(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		key := "/some/key"
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		const concurrency = 10
0000000000000000000000000000000000000000;;		var wgDone sync.WaitGroup
0000000000000000000000000000000000000000;;		var wgForceCollision sync.WaitGroup
0000000000000000000000000000000000000000;;		wgDone.Add(concurrency)
0000000000000000000000000000000000000000;;		wgForceCollision.Add(concurrency)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < concurrency; i++ {
0000000000000000000000000000000000000000;;			// Increment storagetesting.TestResource.Value by 1
0000000000000000000000000000000000000000;;			go func() {
0000000000000000000000000000000000000000;;				defer wgDone.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				firstCall := true
0000000000000000000000000000000000000000;;				err := helper.GuaranteedUpdate(context.TODO(), key, &storagetesting.TestResource{}, true, nil, storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;					defer func() { firstCall = false }()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					if firstCall {
0000000000000000000000000000000000000000;;						// Force collision by joining all concurrent GuaranteedUpdate operations here.
0000000000000000000000000000000000000000;;						wgForceCollision.Done()
0000000000000000000000000000000000000000;;						wgForceCollision.Wait()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					currValue := in.(*storagetesting.TestResource).Value
0000000000000000000000000000000000000000;;					obj := &storagetesting.TestResource{ObjectMeta: metav1.ObjectMeta{Name: "foo"}, Value: currValue + 1}
0000000000000000000000000000000000000000;;					return obj, nil
0000000000000000000000000000000000000000;;				}))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wgDone.Wait()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		stored := &storagetesting.TestResource{}
0000000000000000000000000000000000000000;;		err := helper.Get(context.TODO(), key, "", stored, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", stored)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if stored.Value != concurrency {
0000000000000000000000000000000000000000;;			t.Errorf("Some of the writes were lost. Stored value: %d", stored.Value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGuaranteedUpdateUIDMismatch(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		prefix := path.Join("/", etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, prefix)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", UID: "A"}}
0000000000000000000000000000000000000000;;		podPtr := &example.Pod{}
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), "/some/key", obj, podPtr, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = helper.GuaranteedUpdate(context.TODO(), "/some/key", podPtr, true, storage.NewUIDPreconditions("B"), storage.SimpleUpdate(func(in runtime.Object) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return obj, nil
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		if !storage.IsInvalidObj(err) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expect a Test Failed (write conflict) error, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteUIDMismatch(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		prefix := path.Join("/", etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, prefix)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", UID: "A"}}
0000000000000000000000000000000000000000;;		podPtr := &example.Pod{}
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), "/some/key", obj, podPtr, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = helper.Delete(context.TODO(), "/some/key", obj, storage.NewUIDPreconditions("B"))
0000000000000000000000000000000000000000;;		if !storage.IsInvalidObj(err) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expect a Test Failed (write conflict) error, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type getFunc func(ctx context.Context, key string, opts *etcd.GetOptions) (*etcd.Response, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDeleteKeysAPI struct {
0000000000000000000000000000000000000000;;		etcd.KeysAPI
0000000000000000000000000000000000000000;;		fakeGetFunc getFunc
0000000000000000000000000000000000000000;;		getCount    int
0000000000000000000000000000000000000000;;		// The fakeGetFunc will be called fakeGetCap times before the KeysAPI's Get will be called.
0000000000000000000000000000000000000000;;		fakeGetCap int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeDeleteKeysAPI) Get(ctx context.Context, key string, opts *etcd.GetOptions) (*etcd.Response, error) {
0000000000000000000000000000000000000000;;		f.getCount++
0000000000000000000000000000000000000000;;		if f.getCount < f.fakeGetCap {
0000000000000000000000000000000000000000;;			return f.fakeGetFunc(ctx, key, opts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return f.KeysAPI.Get(ctx, key, opts)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is to emulate the case where another party updates the object when
0000000000000000000000000000000000000000;;	// etcdHelper.Delete has verified the preconditions, but hasn't carried out the
0000000000000000000000000000000000000000;;	// deletion yet. Etcd will fail the deletion and report the conflict. etcdHelper
0000000000000000000000000000000000000000;;	// should retry until there is no conflict.
0000000000000000000000000000000000000000;;	func TestDeleteWithRetry(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;		prefix := path.Join("/", etcdtest.PathPrefix())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj := &example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo", UID: "A"}}
0000000000000000000000000000000000000000;;		// fakeGet returns a large ModifiedIndex to emulate the case that another
0000000000000000000000000000000000000000;;		// party has updated the object.
0000000000000000000000000000000000000000;;		fakeGet := func(ctx context.Context, key string, opts *etcd.GetOptions) (*etcd.Response, error) {
0000000000000000000000000000000000000000;;			data, _ := runtime.Encode(codec, obj)
0000000000000000000000000000000000000000;;			return &etcd.Response{Node: &etcd.Node{Value: defaultPrefixValue(data), ModifiedIndex: 99}}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedRetries := 3
0000000000000000000000000000000000000000;;		helper := newEtcdHelper(server.Client, scheme, codec, prefix)
0000000000000000000000000000000000000000;;		fake := &fakeDeleteKeysAPI{KeysAPI: helper.etcdKeysAPI, fakeGetCap: expectedRetries, fakeGetFunc: fakeGet}
0000000000000000000000000000000000000000;;		helper.etcdKeysAPI = fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		returnedObj := &example.Pod{}
0000000000000000000000000000000000000000;;		err := helper.Create(context.TODO(), "/some/key", obj, returnedObj, 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = helper.Delete(context.TODO(), "/some/key", obj, storage.NewUIDPreconditions("A"))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fake.getCount != expectedRetries {
0000000000000000000000000000000000000000;;			t.Errorf("Expect %d retries, got %d", expectedRetries, fake.getCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = helper.Get(context.TODO(), "/some/key", "", obj, false)
0000000000000000000000000000000000000000;;		if !storage.IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Expect an NotFound error, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		scheme, codecs := testScheme(t)
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, examplev1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		server := etcdtesting.NewEtcdTestClientServer(t)
0000000000000000000000000000000000000000;;		defer server.Terminate(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]string{
0000000000000000000000000000000000000000;;			"custom/prefix":     "/custom/prefix",
0000000000000000000000000000000000000000;;			"/custom//prefix//": "/custom/prefix",
0000000000000000000000000000000000000000;;			"/registry":         "/registry",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for configuredPrefix, effectivePrefix := range testcases {
0000000000000000000000000000000000000000;;			helper := newEtcdHelper(server.Client, scheme, codec, configuredPrefix)
0000000000000000000000000000000000000000;;			if helper.pathPrefix != effectivePrefix {
0000000000000000000000000000000000000000;;				t.Errorf("configured prefix of %s, expected effective prefix of %s, got %s", configuredPrefix, effectivePrefix, helper.pathPrefix)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
