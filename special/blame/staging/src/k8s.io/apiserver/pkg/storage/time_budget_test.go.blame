0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f427bab5b3a32e1add038ae97fa45240580251f9;pkg/storage/time_budget_test.go[pkg/storage/time_budget_test.go][staging/src/k8s.io/apiserver/pkg/storage/time_budget_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeBudget(t *testing.T) {
0000000000000000000000000000000000000000;;		budget := &timeBudget{
0000000000000000000000000000000000000000;;			budget:    time.Duration(0),
0000000000000000000000000000000000000000;;			maxBudget: time.Duration(200),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(0) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(0), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		budget.budget = time.Duration(100)
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(100) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(100), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(0) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(0), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		budget.returnUnused(time.Duration(50))
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(50) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(50), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		budget.budget = time.Duration(100)
0000000000000000000000000000000000000000;;		budget.returnUnused(-time.Duration(50))
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(100) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(100), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// test overflow.
0000000000000000000000000000000000000000;;		budget.returnUnused(time.Duration(500))
0000000000000000000000000000000000000000;;		if res := budget.takeAvailable(); res != time.Duration(200) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected: %v, got: %v", time.Duration(200), res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
