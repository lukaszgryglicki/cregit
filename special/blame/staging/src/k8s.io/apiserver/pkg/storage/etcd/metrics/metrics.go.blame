0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
d4f5437c13bfb079fce9e74aa0995a83c6ae0b87;pkg/tools/metrics/metrics.go[pkg/tools/metrics/metrics.go][staging/src/k8s.io/apiserver/pkg/storage/etcd/metrics/metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		cacheHitCounterOpts = prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Name: "etcd_helper_cache_hit_count",
0000000000000000000000000000000000000000;;			Help: "Counter of etcd helper cache hits.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cacheHitCounter      = prometheus.NewCounter(cacheHitCounterOpts)
0000000000000000000000000000000000000000;;		cacheMissCounterOpts = prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Name: "etcd_helper_cache_miss_count",
0000000000000000000000000000000000000000;;			Help: "Counter of etcd helper cache miss.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cacheMissCounter      = prometheus.NewCounter(cacheMissCounterOpts)
0000000000000000000000000000000000000000;;		cacheEntryCounterOpts = prometheus.CounterOpts{
0000000000000000000000000000000000000000;;			Name: "etcd_helper_cache_entry_count",
0000000000000000000000000000000000000000;;			Help: "Counter of etcd helper cache entries. This can be different from etcd_helper_cache_miss_count " +
0000000000000000000000000000000000000000;;				"because two concurrent threads can miss the cache and generate the same entry twice.",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cacheEntryCounter = prometheus.NewCounter(cacheEntryCounterOpts)
0000000000000000000000000000000000000000;;		cacheGetLatency   = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Name: "etcd_request_cache_get_latencies_summary",
0000000000000000000000000000000000000000;;				Help: "Latency in microseconds of getting an object from etcd cache",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		cacheAddLatency = prometheus.NewSummary(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Name: "etcd_request_cache_add_latencies_summary",
0000000000000000000000000000000000000000;;				Help: "Latency in microseconds of adding an object to etcd cache",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		etcdRequestLatenciesSummary = prometheus.NewSummaryVec(
0000000000000000000000000000000000000000;;			prometheus.SummaryOpts{
0000000000000000000000000000000000000000;;				Name: "etcd_request_latencies_summary",
0000000000000000000000000000000000000000;;				Help: "Etcd request latency summary in microseconds for each operation and object type.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"operation", "type"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registerMetrics sync.Once
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register all metrics.
0000000000000000000000000000000000000000;;	func Register() {
0000000000000000000000000000000000000000;;		// Register the metrics.
0000000000000000000000000000000000000000;;		registerMetrics.Do(func() {
0000000000000000000000000000000000000000;;			prometheus.MustRegister(cacheHitCounter)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(cacheMissCounter)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(cacheEntryCounter)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(cacheAddLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(cacheGetLatency)
0000000000000000000000000000000000000000;;			prometheus.MustRegister(etcdRequestLatenciesSummary)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RecordEtcdRequestLatency(verb, resource string, startTime time.Time) {
0000000000000000000000000000000000000000;;		etcdRequestLatenciesSummary.WithLabelValues(verb, resource).Observe(float64(time.Since(startTime) / time.Microsecond))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObserveGetCache(startTime time.Time) {
0000000000000000000000000000000000000000;;		cacheGetLatency.Observe(float64(time.Since(startTime) / time.Microsecond))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObserveAddCache(startTime time.Time) {
0000000000000000000000000000000000000000;;		cacheAddLatency.Observe(float64(time.Since(startTime) / time.Microsecond))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObserveCacheHit() {
0000000000000000000000000000000000000000;;		cacheHitCounter.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObserveCacheMiss() {
0000000000000000000000000000000000000000;;		cacheMissCounter.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ObserveNewEntry() {
0000000000000000000000000000000000000000;;		cacheEntryCounter.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Reset() {
0000000000000000000000000000000000000000;;		cacheHitCounter = prometheus.NewCounter(cacheHitCounterOpts)
0000000000000000000000000000000000000000;;		cacheMissCounter = prometheus.NewCounter(cacheMissCounterOpts)
0000000000000000000000000000000000000000;;		cacheEntryCounter = prometheus.NewCounter(cacheEntryCounterOpts)
0000000000000000000000000000000000000000;;		// TODO: Reset cacheAddLatency.
0000000000000000000000000000000000000000;;		// TODO: Reset cacheGetLatency.
0000000000000000000000000000000000000000;;		etcdRequestLatenciesSummary.Reset()
0000000000000000000000000000000000000000;;	}
