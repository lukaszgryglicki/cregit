0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
650604ab4bae345fc2e32be274f880f3dd2a68bf;pkg/client/cache/watch_cache_test.go[pkg/client/cache/watch_cache_test.go][staging/src/k8s.io/apiserver/pkg/storage/watch_cache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeTestPod(name string, resourceVersion uint64) *v1.Pod {
0000000000000000000000000000000000000000;;		return &v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Namespace:       "ns",
0000000000000000000000000000000000000000;;				Name:            name,
0000000000000000000000000000000000000000;;				ResourceVersion: strconv.FormatUint(resourceVersion, 10),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newTestWatchCache just adds a fake clock.
0000000000000000000000000000000000000000;;	func newTestWatchCache(capacity int) *watchCache {
0000000000000000000000000000000000000000;;		keyFunc := func(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;			return NamespaceKeyFunc("prefix", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getAttrsFunc := func(obj runtime.Object) (labels.Set, fields.Set, bool, error) {
0000000000000000000000000000000000000000;;			return nil, nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wc := newWatchCache(capacity, keyFunc, getAttrsFunc)
0000000000000000000000000000000000000000;;		wc.clock = clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		return wc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatchCacheBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Add/Update/Delete.
0000000000000000000000000000000000000000;;		pod1 := makeTestPod("pod", 1)
0000000000000000000000000000000000000000;;		if err := store.Add(pod1); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if item, ok, _ := store.Get(pod1); !ok {
0000000000000000000000000000000000000000;;			t.Errorf("didn't find pod")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(&storeElement{Key: "prefix/ns/pod", Object: pod1}, item) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", pod1, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod2 := makeTestPod("pod", 2)
0000000000000000000000000000000000000000;;		if err := store.Update(pod2); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if item, ok, _ := store.Get(pod2); !ok {
0000000000000000000000000000000000000000;;			t.Errorf("didn't find pod")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(&storeElement{Key: "prefix/ns/pod", Object: pod2}, item) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", pod1, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pod3 := makeTestPod("pod", 3)
0000000000000000000000000000000000000000;;		if err := store.Delete(pod3); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok, _ := store.Get(pod3); ok {
0000000000000000000000000000000000000000;;			t.Errorf("found pod")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test List.
0000000000000000000000000000000000000000;;		store.Add(makeTestPod("pod1", 4))
0000000000000000000000000000000000000000;;		store.Add(makeTestPod("pod2", 5))
0000000000000000000000000000000000000000;;		store.Add(makeTestPod("pod3", 6))
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			podNames := sets.String{}
0000000000000000000000000000000000000000;;			for _, item := range store.List() {
0000000000000000000000000000000000000000;;				podNames.Insert(item.(*storeElement).Object.(*v1.Pod).ObjectMeta.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !podNames.HasAll("pod1", "pod2", "pod3") {
0000000000000000000000000000000000000000;;				t.Errorf("missing pods, found %v", podNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(podNames) != 3 {
0000000000000000000000000000000000000000;;				t.Errorf("found missing/extra items")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Replace.
0000000000000000000000000000000000000000;;		store.Replace([]interface{}{
0000000000000000000000000000000000000000;;			makeTestPod("pod4", 7),
0000000000000000000000000000000000000000;;			makeTestPod("pod5", 8),
0000000000000000000000000000000000000000;;		}, "8")
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			podNames := sets.String{}
0000000000000000000000000000000000000000;;			for _, item := range store.List() {
0000000000000000000000000000000000000000;;				podNames.Insert(item.(*storeElement).Object.(*v1.Pod).ObjectMeta.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !podNames.HasAll("pod4", "pod5") {
0000000000000000000000000000000000000000;;				t.Errorf("missing pods, found %v", podNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(podNames) != 2 {
0000000000000000000000000000000000000000;;				t.Errorf("found missing/extra items")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEvents(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(5)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store.Add(makeTestPod("pod", 3))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test for Added event.
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			_, err := store.GetAllEventsSince(1)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error too old")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, ok := err.(*errors.StatusError); !ok {
0000000000000000000000000000000000000000;;				t.Errorf("expected error to be of type StatusError")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			result, err := store.GetAllEventsSince(2)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(result) != 1 {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected events: %v", result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result[0].Type != watch.Added {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected event type: %v", result[0].Type)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod := makeTestPod("pod", uint64(3))
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(pod, result[0].Object) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected item: %v, expected: %v", result[0].Object, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result[0].PrevObject != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected item: %v", result[0].PrevObject)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store.Update(makeTestPod("pod", 4))
0000000000000000000000000000000000000000;;		store.Update(makeTestPod("pod", 5))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test with not full cache.
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			_, err := store.GetAllEventsSince(1)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error too old")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			result, err := store.GetAllEventsSince(3)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(result) != 2 {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected events: %v", result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;				if result[i].Type != watch.Modified {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected event type: %v", result[i].Type)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				pod := makeTestPod("pod", uint64(i+4))
0000000000000000000000000000000000000000;;				if !apiequality.Semantic.DeepEqual(pod, result[i].Object) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected item: %v, expected: %v", result[i].Object, pod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				prevPod := makeTestPod("pod", uint64(i+3))
0000000000000000000000000000000000000000;;				if !apiequality.Semantic.DeepEqual(prevPod, result[i].PrevObject) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected item: %v, expected: %v", result[i].PrevObject, prevPod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 6; i < 10; i++ {
0000000000000000000000000000000000000000;;			store.Update(makeTestPod("pod", uint64(i)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test with full cache - there should be elements from 5 to 9.
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			_, err := store.GetAllEventsSince(3)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error too old")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			result, err := store.GetAllEventsSince(4)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(result) != 5 {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected events: %v", result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := 0; i < 5; i++ {
0000000000000000000000000000000000000000;;				pod := makeTestPod("pod", uint64(i+5))
0000000000000000000000000000000000000000;;				if !apiequality.Semantic.DeepEqual(pod, result[i].Object) {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected item: %v, expected: %v", result[i].Object, pod)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test for delete event.
0000000000000000000000000000000000000000;;		store.Delete(makeTestPod("pod", uint64(10)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			result, err := store.GetAllEventsSince(9)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(result) != 1 {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected events: %v", result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result[0].Type != watch.Deleted {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected event type: %v", result[0].Type)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pod := makeTestPod("pod", uint64(10))
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(pod, result[0].Object) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected item: %v, expected: %v", result[0].Object, pod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			prevPod := makeTestPod("pod", uint64(9))
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(prevPod, result[0].PrevObject) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected item: %v, expected: %v", result[0].PrevObject, prevPod)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWaitUntilFreshAndList(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// In background, update the store.
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			store.Add(makeTestPod("foo", 2))
0000000000000000000000000000000000000000;;			store.Add(makeTestPod("bar", 5))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, resourceVersion, err := store.WaitUntilFreshAndList(5, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resourceVersion != 5 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resourceVersion: %v, expected: 5", resourceVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(list) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected list returned: %#v", list)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWaitUntilFreshAndGet(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// In background, update the store.
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			store.Add(makeTestPod("foo", 2))
0000000000000000000000000000000000000000;;			store.Add(makeTestPod("bar", 5))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, exists, resourceVersion, err := store.WaitUntilFreshAndGet(5, "prefix/ns/bar", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resourceVersion != 5 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected resourceVersion: %v, expected: 5", resourceVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			t.Fatalf("no results returned: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !apiequality.Semantic.DeepEqual(&storeElement{Key: "prefix/ns/bar", Object: makeTestPod("bar", 5)}, obj) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected element returned: %#v", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWaitUntilFreshAndListTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(3)
0000000000000000000000000000000000000000;;		fc := store.clock.(*clock.FakeClock)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// In background, step clock after the below call starts the timer.
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for !fc.HasWaiters() {
0000000000000000000000000000000000000000;;				time.Sleep(time.Millisecond)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fc.Step(blockTimeout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Add an object to make sure the test would
0000000000000000000000000000000000000000;;			// eventually fail instead of just waiting
0000000000000000000000000000000000000000;;			// forever.
0000000000000000000000000000000000000000;;			time.Sleep(30 * time.Second)
0000000000000000000000000000000000000000;;			store.Add(makeTestPod("bar", 5))
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, err := store.WaitUntilFreshAndList(5, nil)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected lack of timeout error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testLW struct {
0000000000000000000000000000000000000000;;		ListFunc  func(options metav1.ListOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;		WatchFunc func(options metav1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testLW) List(options metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return t.ListFunc(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (t *testLW) Watch(options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return t.WatchFunc(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReflectorForWatchCache(t *testing.T) {
0000000000000000000000000000000000000000;;		store := newTestWatchCache(5)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			_, version, err := store.WaitUntilFreshAndList(0, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if version != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected resource version: %d", version)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lw := &testLW{
0000000000000000000000000000000000000000;;			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;				fw := watch.NewFake()
0000000000000000000000000000000000000000;;				go fw.Stop()
0000000000000000000000000000000000000000;;				return fw, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;				return &v1.PodList{ListMeta: metav1.ListMeta{ResourceVersion: "10"}}, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r := cache.NewReflector(lw, &v1.Pod{}, store, 0)
0000000000000000000000000000000000000000;;		r.ListAndWatch(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			_, version, err := store.WaitUntilFreshAndList(10, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if version != 10 {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected resource version: %d", version)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
