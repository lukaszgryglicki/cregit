0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6c6b79624f5ca15b220f88cdd468924a7bb5f854;pkg/api/generate.go[pkg/api/generate.go][staging/src/k8s.io/apiserver/pkg/storage/names/generate.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package names
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilrand "k8s.io/apimachinery/pkg/util/rand"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NameGenerator generates names for objects. Some backends may have more information
0000000000000000000000000000000000000000;;	// available to guide selection of new names and this interface hides those details.
0000000000000000000000000000000000000000;;	type NameGenerator interface {
0000000000000000000000000000000000000000;;		// GenerateName generates a valid name from the base name, adding a random suffix to the
0000000000000000000000000000000000000000;;		// the base. If base is valid, the returned name must also be valid. The generator is
0000000000000000000000000000000000000000;;		// responsible for knowing the maximum valid name length.
0000000000000000000000000000000000000000;;		GenerateName(base string) string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// simpleNameGenerator generates random names.
0000000000000000000000000000000000000000;;	type simpleNameGenerator struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleNameGenerator is a generator that returns the name plus a random suffix of five alphanumerics
0000000000000000000000000000000000000000;;	// when a name is requested. The string is guaranteed to not exceed the length of a standard Kubernetes
0000000000000000000000000000000000000000;;	// name (63 characters)
0000000000000000000000000000000000000000;;	var SimpleNameGenerator NameGenerator = simpleNameGenerator{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// TODO: make this flexible for non-core resources with alternate naming rules.
0000000000000000000000000000000000000000;;		maxNameLength          = 63
0000000000000000000000000000000000000000;;		randomLength           = 5
0000000000000000000000000000000000000000;;		maxGeneratedNameLength = maxNameLength - randomLength
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (simpleNameGenerator) GenerateName(base string) string {
0000000000000000000000000000000000000000;;		if len(base) > maxGeneratedNameLength {
0000000000000000000000000000000000000000;;			base = base[:maxGeneratedNameLength]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s%s", base, utilrand.String(randomLength))
0000000000000000000000000000000000000000;;	}
