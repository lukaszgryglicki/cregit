0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0ed2c2f6a44f1a62c8fa2d294ed3372c93e37fa9;pkg/storage/etcd/util/etcd_util_test.go[pkg/storage/etcd/util/etcd_util_test.go][staging/src/k8s.io/apiserver/pkg/storage/etcd/util/etcd_util_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package util
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcd "github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const validEtcdVersion = "etcd 2.0.9"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsEtcdNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		try := func(err error, isNotFound bool) {
0000000000000000000000000000000000000000;;			if IsEtcdNotFound(err) != isNotFound {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %#v to return %v, but it did not", err, isNotFound)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		try(&etcd.Error{Code: 101}, false)
0000000000000000000000000000000000000000;;		try(nil, false)
0000000000000000000000000000000000000000;;		try(fmt.Errorf("some other kind of error"), false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEtcdVersion_ValidVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		testServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			fmt.Fprint(w, validEtcdVersion)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer testServer.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var version string
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if version, err = GetEtcdVersion(testServer.URL); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		assert.Equal(t, validEtcdVersion, version, "Unexpected version")
0000000000000000000000000000000000000000;;		assert.Nil(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEtcdVersion_ErrorStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		testServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusServiceUnavailable)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer testServer.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := GetEtcdVersion(testServer.URL)
0000000000000000000000000000000000000000;;		assert.NotNil(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetEtcdVersion_NotListening(t *testing.T) {
0000000000000000000000000000000000000000;;		portIsOpen := func(port int) bool {
0000000000000000000000000000000000000000;;			conn, err := net.DialTimeout("tcp", "127.0.0.1:"+strconv.Itoa(port), 1*time.Second)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				conn.Close()
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		port := rand.Intn((1 << 16) - 1)
0000000000000000000000000000000000000000;;		for tried := 0; portIsOpen(port); tried++ {
0000000000000000000000000000000000000000;;			if tried >= 10 {
0000000000000000000000000000000000000000;;				t.Fatal("Couldn't find a closed TCP port to continue testing")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			port++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := GetEtcdVersion("http://127.0.0.1:" + strconv.Itoa(port))
0000000000000000000000000000000000000000;;		assert.NotNil(t, err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdHealthCheck(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			data      string
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:      "{\"health\": \"true\"}",
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:      "{\"health\": \"false\"}",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:      "invalid json",
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := EtcdHealthCheck([]byte(test.data))
0000000000000000000000000000000000000000;;			if err != nil && !test.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err == nil && test.expectErr {
0000000000000000000000000000000000000000;;				t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
