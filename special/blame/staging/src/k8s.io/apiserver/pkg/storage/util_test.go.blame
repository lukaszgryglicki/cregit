0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
2d509fc0ef3a21f78ad3a055140ea33dc598e966;pkg/storage/util_test.go[pkg/storage/util_test.go][staging/src/k8s.io/apiserver/pkg/storage/util_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEtcdParseWatchResourceVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Version       string
0000000000000000000000000000000000000000;;			ExpectVersion uint64
0000000000000000000000000000000000000000;;			Err           bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Version: "", ExpectVersion: 0},
0000000000000000000000000000000000000000;;			{Version: "a", Err: true},
0000000000000000000000000000000000000000;;			{Version: " ", Err: true},
0000000000000000000000000000000000000000;;			{Version: "1", ExpectVersion: 1},
0000000000000000000000000000000000000000;;			{Version: "10", ExpectVersion: 10},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range testCases {
0000000000000000000000000000000000000000;;			version, err := ParseWatchResourceVersion(testCase.Version)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case testCase.Err:
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected non-error", testCase.Version)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !IsInvalidError(err) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: unexpected error: %v", testCase.Version, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case !testCase.Err && err != nil:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", testCase.Version, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if version != testCase.ExpectVersion {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected version %d but was %d", testCase.Version, testCase.ExpectVersion, version)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHasPathPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		validTestcases := []struct {
0000000000000000000000000000000000000000;;			s      string
0000000000000000000000000000000000000000;;			prefix string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Exact matches
0000000000000000000000000000000000000000;;			{"", ""},
0000000000000000000000000000000000000000;;			{"a", "a"},
0000000000000000000000000000000000000000;;			{"a/", "a/"},
0000000000000000000000000000000000000000;;			{"a/../", "a/../"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Path prefix matches
0000000000000000000000000000000000000000;;			{"a/b", "a"},
0000000000000000000000000000000000000000;;			{"a/b", "a/"},
0000000000000000000000000000000000000000;;			{"中文/", "中文"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range validTestcases {
0000000000000000000000000000000000000000;;			if !hasPathPrefix(tc.s, tc.prefix) {
0000000000000000000000000000000000000000;;				t.Errorf(`%d: Expected hasPathPrefix("%s","%s") to be true`, i, tc.s, tc.prefix)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidTestcases := []struct {
0000000000000000000000000000000000000000;;			s      string
0000000000000000000000000000000000000000;;			prefix string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Mismatch
0000000000000000000000000000000000000000;;			{"a", "b"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Dir requirement
0000000000000000000000000000000000000000;;			{"a", "a/"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Prefix mismatch
0000000000000000000000000000000000000000;;			{"ns2", "ns"},
0000000000000000000000000000000000000000;;			{"ns2", "ns/"},
0000000000000000000000000000000000000000;;			{"中文文", "中文"},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Ensure no normalization is applied
0000000000000000000000000000000000000000;;			{"a/c/../b/", "a/b/"},
0000000000000000000000000000000000000000;;			{"a/", "a/b/.."},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, tc := range invalidTestcases {
0000000000000000000000000000000000000000;;			if hasPathPrefix(tc.s, tc.prefix) {
0000000000000000000000000000000000000000;;				t.Errorf(`%d: Expected hasPathPrefix("%s","%s") to be false`, i, tc.s, tc.prefix)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHighWaterMark(t *testing.T) {
0000000000000000000000000000000000000000;;		var h HighWaterMark
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := int64(10); i < 20; i++ {
0000000000000000000000000000000000000000;;			if !h.Update(i) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected false for %v", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if h.Update(i - 1) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected true for %v", i-1)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := int64(0)
0000000000000000000000000000000000000000;;		wg := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		for i := 0; i < 300; i++ {
0000000000000000000000000000000000000000;;			wg.Add(1)
0000000000000000000000000000000000000000;;			v := rand.Int63()
0000000000000000000000000000000000000000;;			go func(v int64) {
0000000000000000000000000000000000000000;;				defer wg.Done()
0000000000000000000000000000000000000000;;				h.Update(v)
0000000000000000000000000000000000000000;;			}(v)
0000000000000000000000000000000000000000;;			if v > m {
0000000000000000000000000000000000000000;;				m = v
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;		if m != int64(h) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected value, wanted %v, got %v", m, int64(h))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
