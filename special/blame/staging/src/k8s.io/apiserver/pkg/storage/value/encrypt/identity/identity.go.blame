0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
4fa123cff3ededa351298350459e08f67c006163;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package identity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/value"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// encryptIdentityTransformer performs no transformation on provided data, but validates
0000000000000000000000000000000000000000;;	// that the data is not encrypted data during TransformFromStorage
0000000000000000000000000000000000000000;;	type identityTransformer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEncryptCheckTransformer returns an identityTransformer which returns an error
0000000000000000000000000000000000000000;;	// on attempts to read encrypted data
0000000000000000000000000000000000000000;;	func NewEncryptCheckTransformer() value.Transformer {
0000000000000000000000000000000000000000;;		return identityTransformer{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TransformFromStorage returns the input bytes if the data is not encrypted
0000000000000000000000000000000000000000;;	func (identityTransformer) TransformFromStorage(b []byte, context value.Context) ([]byte, bool, error) {
0000000000000000000000000000000000000000;;		// EncryptIdentityTransformer has to return an error if the data is encoded using another transformer.
0000000000000000000000000000000000000000;;		// JSON data starts with '{'. Protobuf data has a prefix 'k8s[\x00-\xFF]'.
0000000000000000000000000000000000000000;;		// Prefix 'k8s:enc:' is reserved for encrypted data on disk.
0000000000000000000000000000000000000000;;		if bytes.HasPrefix(b, []byte("k8s:enc:")) {
0000000000000000000000000000000000000000;;			return []byte{}, false, fmt.Errorf("identity transformer tried to read encrypted data")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return b, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TransformToStorage implements the Transformer interface for encryptIdentityTransformer
0000000000000000000000000000000000000000;;	func (identityTransformer) TransformToStorage(b []byte, context value.Context) ([]byte, error) {
0000000000000000000000000000000000000000;;		return b, nil
0000000000000000000000000000000000000000;;	}
