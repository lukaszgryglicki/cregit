0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e955367d053d2ebf4bee4ac2c428c7879f1c363a;pkg/storage/storagebackend/etdc2.go[pkg/storage/storagebackend/etdc2.go][staging/src/k8s.io/apiserver/pkg/storage/storagebackend/factory/etcd2.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package factory
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		etcd2client "github.com/coreos/etcd/client"
0000000000000000000000000000000000000000;;		"github.com/coreos/etcd/pkg/transport"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/etcd"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newETCD2Storage(c storagebackend.Config) (storage.Interface, DestroyFunc, error) {
0000000000000000000000000000000000000000;;		tr, err := newTransportForETCD2(c.CertFile, c.KeyFile, c.CAFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := newETCD2Client(tr, c.ServerList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := etcd.NewEtcdStorage(client, c.Codec, c.Prefix, c.Quorum, c.DeserializationCacheSize, c.Copier, etcd.IdentityTransformer)
0000000000000000000000000000000000000000;;		return s, tr.CloseIdleConnections, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newETCD2Client(tr *http.Transport, serverList []string) (etcd2client.Client, error) {
0000000000000000000000000000000000000000;;		cli, err := etcd2client.New(etcd2client.Config{
0000000000000000000000000000000000000000;;			Endpoints: serverList,
0000000000000000000000000000000000000000;;			Transport: tr,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return cli, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTransportForETCD2(certFile, keyFile, caFile string) (*http.Transport, error) {
0000000000000000000000000000000000000000;;		info := transport.TLSInfo{
0000000000000000000000000000000000000000;;			CertFile: certFile,
0000000000000000000000000000000000000000;;			KeyFile:  keyFile,
0000000000000000000000000000000000000000;;			CAFile:   caFile,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cfg, err := info.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Copied from etcd.DefaultTransport declaration.
0000000000000000000000000000000000000000;;		// TODO: Determine if transport needs optimization
0000000000000000000000000000000000000000;;		tr := utilnet.SetTransportDefaults(&http.Transport{
0000000000000000000000000000000000000000;;			Proxy: http.ProxyFromEnvironment,
0000000000000000000000000000000000000000;;			Dial: (&net.Dialer{
0000000000000000000000000000000000000000;;				Timeout:   30 * time.Second,
0000000000000000000000000000000000000000;;				KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;			}).Dial,
0000000000000000000000000000000000000000;;			TLSHandshakeTimeout: 10 * time.Second,
0000000000000000000000000000000000000000;;			MaxIdleConnsPerHost: 500,
0000000000000000000000000000000000000000;;			TLSClientConfig:     cfg,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return tr, nil
0000000000000000000000000000000000000000;;	}
