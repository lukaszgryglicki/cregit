0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
183033180d1a825969af6404ece95ae38cff2969;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretListError converts a generic error on a retrieval
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretListError(err error, qualifiedResource schema.GroupResource) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsNotFound(err):
0000000000000000000000000000000000000000;;			return errors.NewNotFound(qualifiedResource, "")
0000000000000000000000000000000000000000;;		case storage.IsUnreachable(err):
0000000000000000000000000000000000000000;;			return errors.NewServerTimeout(qualifiedResource, "list", 2) // TODO: make configurable or handled at a higher level
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretGetError converts a generic error on a retrieval
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretGetError(err error, qualifiedResource schema.GroupResource, name string) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsNotFound(err):
0000000000000000000000000000000000000000;;			return errors.NewNotFound(qualifiedResource, name)
0000000000000000000000000000000000000000;;		case storage.IsUnreachable(err):
0000000000000000000000000000000000000000;;			return errors.NewServerTimeout(qualifiedResource, "get", 2) // TODO: make configurable or handled at a higher level
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretCreateError converts a generic error on a create
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretCreateError(err error, qualifiedResource schema.GroupResource, name string) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsNodeExist(err):
0000000000000000000000000000000000000000;;			return errors.NewAlreadyExists(qualifiedResource, name)
0000000000000000000000000000000000000000;;		case storage.IsUnreachable(err):
0000000000000000000000000000000000000000;;			return errors.NewServerTimeout(qualifiedResource, "create", 2) // TODO: make configurable or handled at a higher level
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretUpdateError converts a generic error on an update
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretUpdateError(err error, qualifiedResource schema.GroupResource, name string) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsConflict(err), storage.IsNodeExist(err), storage.IsInvalidObj(err):
0000000000000000000000000000000000000000;;			return errors.NewConflict(qualifiedResource, name, err)
0000000000000000000000000000000000000000;;		case storage.IsUnreachable(err):
0000000000000000000000000000000000000000;;			return errors.NewServerTimeout(qualifiedResource, "update", 2) // TODO: make configurable or handled at a higher level
0000000000000000000000000000000000000000;;		case storage.IsNotFound(err):
0000000000000000000000000000000000000000;;			return errors.NewNotFound(qualifiedResource, name)
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretDeleteError converts a generic error on a delete
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretDeleteError(err error, qualifiedResource schema.GroupResource, name string) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsNotFound(err):
0000000000000000000000000000000000000000;;			return errors.NewNotFound(qualifiedResource, name)
0000000000000000000000000000000000000000;;		case storage.IsUnreachable(err):
0000000000000000000000000000000000000000;;			return errors.NewServerTimeout(qualifiedResource, "delete", 2) // TODO: make configurable or handled at a higher level
0000000000000000000000000000000000000000;;		case storage.IsConflict(err), storage.IsNodeExist(err), storage.IsInvalidObj(err):
0000000000000000000000000000000000000000;;			return errors.NewConflict(qualifiedResource, name, err)
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InterpretWatchError converts a generic error on a watch
0000000000000000000000000000000000000000;;	// operation into the appropriate API error.
0000000000000000000000000000000000000000;;	func InterpretWatchError(err error, resource schema.GroupResource, name string) error {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case storage.IsInvalidError(err):
0000000000000000000000000000000000000000;;			invalidError, _ := err.(storage.InvalidError)
0000000000000000000000000000000000000000;;			return errors.NewInvalid(schema.GroupKind{Group: resource.Group, Kind: resource.Resource}, name, invalidError.Errs)
0000000000000000000000000000000000000000;;		case storage.IsInternalError(err):
0000000000000000000000000000000000000000;;			return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
