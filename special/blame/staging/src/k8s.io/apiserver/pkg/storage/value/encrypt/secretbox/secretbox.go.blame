0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
830521d76096c8e1dbd3b82b6b968337e3734b24;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package secretbox transforms values for storage at rest using XSalsa20 and Poly1305.
0000000000000000000000000000000000000000;;	package secretbox
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/rand"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/crypto/nacl/secretbox"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/value"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// secretbox implements at rest encryption of the provided values given a 32 byte secret key.
0000000000000000000000000000000000000000;;	// Uses a standard 24 byte nonce (placed at the the beginning of the cipher text) generated
0000000000000000000000000000000000000000;;	// from crypto/rand. Does not perform authentication of the data at rest.
0000000000000000000000000000000000000000;;	type secretboxTransformer struct {
0000000000000000000000000000000000000000;;		key [32]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const nonceSize = 24
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSecretboxTransformer takes the given key and performs encryption and decryption on the given
0000000000000000000000000000000000000000;;	// data.
0000000000000000000000000000000000000000;;	func NewSecretboxTransformer(key [32]byte) value.Transformer {
0000000000000000000000000000000000000000;;		return &secretboxTransformer{key: key}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *secretboxTransformer) TransformFromStorage(data []byte, context value.Context) ([]byte, bool, error) {
0000000000000000000000000000000000000000;;		if len(data) < (secretbox.Overhead + nonceSize) {
0000000000000000000000000000000000000000;;			return nil, false, fmt.Errorf("the stored data was shorter than the required size")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var nonce [nonceSize]byte
0000000000000000000000000000000000000000;;		copy(nonce[:], data[:nonceSize])
0000000000000000000000000000000000000000;;		data = data[nonceSize:]
0000000000000000000000000000000000000000;;		out := make([]byte, 0, len(data)-secretbox.Overhead)
0000000000000000000000000000000000000000;;		result, ok := secretbox.Open(out, data, &nonce, &t.key)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, false, fmt.Errorf("output array was not large enough for encryption")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *secretboxTransformer) TransformToStorage(data []byte, context value.Context) ([]byte, error) {
0000000000000000000000000000000000000000;;		var nonce [nonceSize]byte
0000000000000000000000000000000000000000;;		n, err := rand.Read(nonce[:])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n != nonceSize {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to read sufficient random bytes")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return secretbox.Seal(nonce[:], data, &nonce, &t.key), nil
0000000000000000000000000000000000000000;;	}
