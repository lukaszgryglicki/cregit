0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a5d0a3980ea92b4321a18ea3ec1c22f1a717fc1d;pkg/registry/generic/registry_test.go[pkg/registry/generic/registry_test.go][staging/src/k8s.io/apiserver/pkg/storage/selection_predicate_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package storage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ignored struct {
0000000000000000000000000000000000000000;;		ID string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IgnoredList struct {
0000000000000000000000000000000000000000;;		Items []Ignored
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *Ignored) GetObjectKind() schema.ObjectKind     { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	func (obj *IgnoredList) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSelectionPredicate(t *testing.T) {
0000000000000000000000000000000000000000;;		table := map[string]struct {
0000000000000000000000000000000000000000;;			labelSelector, fieldSelector string
0000000000000000000000000000000000000000;;			labels                       labels.Set
0000000000000000000000000000000000000000;;			fields                       fields.Set
0000000000000000000000000000000000000000;;			uninitialized                bool
0000000000000000000000000000000000000000;;			err                          error
0000000000000000000000000000000000000000;;			shouldMatch                  bool
0000000000000000000000000000000000000000;;			matchSingleKey               string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"A": {
0000000000000000000000000000000000000000;;				labelSelector: "name=foo",
0000000000000000000000000000000000000000;;				fieldSelector: "uid=12345",
0000000000000000000000000000000000000000;;				labels:        labels.Set{"name": "foo"},
0000000000000000000000000000000000000000;;				fields:        fields.Set{"uid": "12345"},
0000000000000000000000000000000000000000;;				shouldMatch:   true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"B": {
0000000000000000000000000000000000000000;;				labelSelector: "name=foo",
0000000000000000000000000000000000000000;;				fieldSelector: "uid=12345",
0000000000000000000000000000000000000000;;				labels:        labels.Set{"name": "foo"},
0000000000000000000000000000000000000000;;				fields:        fields.Set{},
0000000000000000000000000000000000000000;;				shouldMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"C": {
0000000000000000000000000000000000000000;;				labelSelector: "name=foo",
0000000000000000000000000000000000000000;;				fieldSelector: "uid=12345",
0000000000000000000000000000000000000000;;				labels:        labels.Set{},
0000000000000000000000000000000000000000;;				fields:        fields.Set{"uid": "12345"},
0000000000000000000000000000000000000000;;				shouldMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"D": {
0000000000000000000000000000000000000000;;				fieldSelector:  "metadata.name=12345",
0000000000000000000000000000000000000000;;				labels:         labels.Set{},
0000000000000000000000000000000000000000;;				fields:         fields.Set{"metadata.name": "12345"},
0000000000000000000000000000000000000000;;				shouldMatch:    true,
0000000000000000000000000000000000000000;;				matchSingleKey: "12345",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"E": {
0000000000000000000000000000000000000000;;				fieldSelector:  "metadata.name=12345",
0000000000000000000000000000000000000000;;				labels:         labels.Set{},
0000000000000000000000000000000000000000;;				fields:         fields.Set{"metadata.name": "12345"},
0000000000000000000000000000000000000000;;				uninitialized:  true,
0000000000000000000000000000000000000000;;				shouldMatch:    false,
0000000000000000000000000000000000000000;;				matchSingleKey: "12345",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"error": {
0000000000000000000000000000000000000000;;				labelSelector: "name=foo",
0000000000000000000000000000000000000000;;				fieldSelector: "uid=12345",
0000000000000000000000000000000000000000;;				err:           errors.New("maybe this is a 'wrong object type' error"),
0000000000000000000000000000000000000000;;				shouldMatch:   false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, item := range table {
0000000000000000000000000000000000000000;;			parsedLabel, err := labels.Parse(item.labelSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			parsedField, err := fields.ParseSelector(item.fieldSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			sp := &SelectionPredicate{
0000000000000000000000000000000000000000;;				Label: parsedLabel,
0000000000000000000000000000000000000000;;				Field: parsedField,
0000000000000000000000000000000000000000;;				GetAttrs: func(runtime.Object) (label labels.Set, field fields.Set, uninitialized bool, err error) {
0000000000000000000000000000000000000000;;					return item.labels, item.fields, item.uninitialized, item.err
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got, err := sp.Matches(&Ignored{})
0000000000000000000000000000000000000000;;			if e, a := item.err, err; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.shouldMatch, got; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key := item.matchSingleKey; key != "" {
0000000000000000000000000000000000000000;;				got, ok := sp.MatchesSingle()
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Errorf("%v: expected single match", name)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := key, got; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%v: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
