0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
abe4e986f343162a208d8637043f7835e7d322f3;pkg/util/flushwriter/writer_test.go[pkg/util/flushwriter/writer_test.go][staging/src/k8s.io/apiserver/pkg/util/flushwriter/writer_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flushwriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type writerWithFlush struct {
0000000000000000000000000000000000000000;;		writeCount, flushCount int
0000000000000000000000000000000000000000;;		err                    error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *writerWithFlush) Flush() {
0000000000000000000000000000000000000000;;		w.flushCount++
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *writerWithFlush) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		w.writeCount++
0000000000000000000000000000000000000000;;		return len(p), w.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type writerWithNoFlush struct {
0000000000000000000000000000000000000000;;		writeCount int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (w *writerWithNoFlush) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		w.writeCount++
0000000000000000000000000000000000000000;;		return len(p), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWriteWithFlush(t *testing.T) {
0000000000000000000000000000000000000000;;		w := &writerWithFlush{}
0000000000000000000000000000000000000000;;		fw := Wrap(w)
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			_, err := fw.Write([]byte("Test write"))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error while writing with flush writer: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.flushCount != 10 {
0000000000000000000000000000000000000000;;			t.Errorf("Flush not called the expected number of times. Actual: %d", w.flushCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.writeCount != 10 {
0000000000000000000000000000000000000000;;			t.Errorf("Write not called the expected number of times. Actual: %d", w.writeCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWriteWithoutFlush(t *testing.T) {
0000000000000000000000000000000000000000;;		w := &writerWithNoFlush{}
0000000000000000000000000000000000000000;;		fw := Wrap(w)
0000000000000000000000000000000000000000;;		for i := 0; i < 10; i++ {
0000000000000000000000000000000000000000;;			_, err := fw.Write([]byte("Test write"))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error while writing with flush writer: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if w.writeCount != 10 {
0000000000000000000000000000000000000000;;			t.Errorf("Write not called the expected number of times. Actual: %d", w.writeCount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWriteError(t *testing.T) {
0000000000000000000000000000000000000000;;		e := fmt.Errorf("Error")
0000000000000000000000000000000000000000;;		w := &writerWithFlush{err: e}
0000000000000000000000000000000000000000;;		fw := Wrap(w)
0000000000000000000000000000000000000000;;		_, err := fw.Write([]byte("Test write"))
0000000000000000000000000000000000000000;;		if err != e {
0000000000000000000000000000000000000000;;			t.Errorf("Did not get expected error. Got: %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
