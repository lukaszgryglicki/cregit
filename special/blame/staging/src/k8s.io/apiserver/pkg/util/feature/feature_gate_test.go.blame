0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
1e71d4b598a10932febf978325f27cb07ad91bf1;pkg/util/config/feature_gate_test.go[pkg/util/config/feature_gate_test.go][staging/src/k8s.io/apiserver/pkg/util/feature/feature_gate_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package feature
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFeatureGateFlag(t *testing.T) {
0000000000000000000000000000000000000000;;		// gates for testing
0000000000000000000000000000000000000000;;		const testAlphaGate Feature = "TestAlpha"
0000000000000000000000000000000000000000;;		const testBetaGate Feature = "TestBeta"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			arg        string
0000000000000000000000000000000000000000;;			expect     map[Feature]bool
0000000000000000000000000000000000000000;;			parseError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "fooBarBaz=maybeidk",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				parseError: "unrecognized key: fooBarBaz",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "AllAlpha=false",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "AllAlpha=true",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  true,
0000000000000000000000000000000000000000;;					testAlphaGate: true,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "AllAlpha=banana",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				parseError: "invalid value of AllAlpha",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "AllAlpha=false,TestAlpha=true",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: true,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "TestAlpha=true,AllAlpha=false",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: true,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "AllAlpha=true,TestAlpha=false",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  true,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "TestAlpha=false,AllAlpha=true",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  true,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  false,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				arg: "TestBeta=true,AllAlpha=false",
0000000000000000000000000000000000000000;;				expect: map[Feature]bool{
0000000000000000000000000000000000000000;;					allAlphaGate:  false,
0000000000000000000000000000000000000000;;					testAlphaGate: false,
0000000000000000000000000000000000000000;;					testBetaGate:  true,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			fs := pflag.NewFlagSet("testfeaturegateflag", pflag.ContinueOnError)
0000000000000000000000000000000000000000;;			f := NewFeatureGate()
0000000000000000000000000000000000000000;;			f.Add(map[Feature]FeatureSpec{
0000000000000000000000000000000000000000;;				testAlphaGate: {Default: false, PreRelease: Alpha},
0000000000000000000000000000000000000000;;				testBetaGate:  {Default: false, PreRelease: Beta},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			f.AddFlag(fs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := fs.Parse([]string{fmt.Sprintf("--%s=%s", flagName, test.arg)})
0000000000000000000000000000000000000000;;			if test.parseError != "" {
0000000000000000000000000000000000000000;;				if !strings.Contains(err.Error(), test.parseError) {
0000000000000000000000000000000000000000;;					t.Errorf("%d: Parse() Expected %v, Got %v", i, test.parseError, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: Parse() Expected nil, Got %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k, v := range test.expect {
0000000000000000000000000000000000000000;;				if f.enabled[k] != v {
0000000000000000000000000000000000000000;;					t.Errorf("%d: expected %s=%v, Got %v", i, k, v, f.enabled[k])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFeatureGateOverride(t *testing.T) {
0000000000000000000000000000000000000000;;		const testAlphaGate Feature = "TestAlpha"
0000000000000000000000000000000000000000;;		const testBetaGate Feature = "TestBeta"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Don't parse the flag, assert defaults are used.
0000000000000000000000000000000000000000;;		var f FeatureGate = NewFeatureGate()
0000000000000000000000000000000000000000;;		f.Add(map[Feature]FeatureSpec{
0000000000000000000000000000000000000000;;			testAlphaGate: {Default: false, PreRelease: Alpha},
0000000000000000000000000000000000000000;;			testBetaGate:  {Default: false, PreRelease: Beta},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.Set("TestAlpha=true,TestBeta=true")
0000000000000000000000000000000000000000;;		if f.Enabled(testAlphaGate) != true {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.Enabled(testBetaGate) != true {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f.Set("TestAlpha=false")
0000000000000000000000000000000000000000;;		if f.Enabled(testAlphaGate) != false {
0000000000000000000000000000000000000000;;			t.Errorf("Expected false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.Enabled(testBetaGate) != true {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFeatureGateFlagDefaults(t *testing.T) {
0000000000000000000000000000000000000000;;		// gates for testing
0000000000000000000000000000000000000000;;		const testAlphaGate Feature = "TestAlpha"
0000000000000000000000000000000000000000;;		const testBetaGate Feature = "TestBeta"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Don't parse the flag, assert defaults are used.
0000000000000000000000000000000000000000;;		var f FeatureGate = NewFeatureGate()
0000000000000000000000000000000000000000;;		f.Add(map[Feature]FeatureSpec{
0000000000000000000000000000000000000000;;			testAlphaGate: {Default: false, PreRelease: Alpha},
0000000000000000000000000000000000000000;;			testBetaGate:  {Default: true, PreRelease: Beta},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if f.Enabled(testAlphaGate) != false {
0000000000000000000000000000000000000000;;			t.Errorf("Expected false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f.Enabled(testBetaGate) != true {
0000000000000000000000000000000000000000;;			t.Errorf("Expected true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
