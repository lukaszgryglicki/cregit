0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
33096dcb4a7ee010e89bc58069b003b7394bd911;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;		v1listers "k8s.io/client-go/listers/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResolve(t *testing.T) {
0000000000000000000000000000000000000000;;		matchingEndpoints := func(svc *v1.Service) []*v1.Endpoints {
0000000000000000000000000000000000000000;;			ports := []v1.EndpointPort{}
0000000000000000000000000000000000000000;;			for _, p := range svc.Spec.Ports {
0000000000000000000000000000000000000000;;				if p.TargetPort.Type != intstr.Int {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ports = append(ports, v1.EndpointPort{Name: p.Name, Port: p.TargetPort.IntVal})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return []*v1.Endpoints{{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{Namespace: svc.Namespace, Name: svc.Name},
0000000000000000000000000000000000000000;;				Subsets: []v1.EndpointSubset{{
0000000000000000000000000000000000000000;;					Addresses: []v1.EndpointAddress{{Hostname: "dummy-host", IP: "127.0.0.1"}},
0000000000000000000000000000000000000000;;					Ports:     ports,
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			}}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type expectation struct {
0000000000000000000000000000000000000000;;			url   string
0000000000000000000000000000000000000000;;			error bool
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			services  []*v1.Service
0000000000000000000000000000000000000000;;			endpoints func(svc *v1.Service) []*v1.Endpoints
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clusterMode  expectation
0000000000000000000000000000000000000000;;			endpointMode expectation
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cluster ip without 443 port",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;							ClusterIP: "hit",
0000000000000000000000000000000000000000;;							Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;								{Port: 1234, TargetPort: intstr.FromInt(1234)},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: matchingEndpoints,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{error: true},
0000000000000000000000000000000000000000;;				endpointMode: expectation{error: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cluster ip",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;							ClusterIP: "hit",
0000000000000000000000000000000000000000;;							Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;								{Name: "https", Port: 443, TargetPort: intstr.FromInt(1443)},
0000000000000000000000000000000000000000;;								{Port: 1234, TargetPort: intstr.FromInt(1234)},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: matchingEndpoints,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{url: "https://hit:443"},
0000000000000000000000000000000000000000;;				endpointMode: expectation{url: "https://127.0.0.1:1443"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "cluster ip without endpoints",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;							ClusterIP: "hit",
0000000000000000000000000000000000000000;;							Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;								{Name: "https", Port: 443, TargetPort: intstr.FromInt(1443)},
0000000000000000000000000000000000000000;;								{Port: 1234, TargetPort: intstr.FromInt(1234)},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{url: "https://hit:443"},
0000000000000000000000000000000000000000;;				endpointMode: expectation{error: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "none cluster ip",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;							ClusterIP: v1.ClusterIPNone,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{error: true},
0000000000000000000000000000000000000000;;				endpointMode: expectation{error: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "loadbalancer",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeLoadBalancer,
0000000000000000000000000000000000000000;;							ClusterIP: "lb",
0000000000000000000000000000000000000000;;							Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;								{Name: "https", Port: 443, TargetPort: intstr.FromInt(1443)},
0000000000000000000000000000000000000000;;								{Port: 1234, TargetPort: intstr.FromInt(1234)},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: matchingEndpoints,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{url: "https://lb:443"},
0000000000000000000000000000000000000000;;				endpointMode: expectation{url: "https://127.0.0.1:1443"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "node port",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:      v1.ServiceTypeNodePort,
0000000000000000000000000000000000000000;;							ClusterIP: "np",
0000000000000000000000000000000000000000;;							Ports: []v1.ServicePort{
0000000000000000000000000000000000000000;;								{Name: "https", Port: 443, TargetPort: intstr.FromInt(1443)},
0000000000000000000000000000000000000000;;								{Port: 1234, TargetPort: intstr.FromInt(1234)},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: matchingEndpoints,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{url: "https://np:443"},
0000000000000000000000000000000000000000;;				endpointMode: expectation{url: "https://127.0.0.1:1443"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "external name",
0000000000000000000000000000000000000000;;				services: []*v1.Service{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Namespace: "one", Name: "alfa"},
0000000000000000000000000000000000000000;;						Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;							Type:         v1.ServiceTypeExternalName,
0000000000000000000000000000000000000000;;							ExternalName: "foo.bar.com",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				endpoints: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{url: "https://foo.bar.com:443"},
0000000000000000000000000000000000000000;;				endpointMode: expectation{error: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "missing service",
0000000000000000000000000000000000000000;;				services:  nil,
0000000000000000000000000000000000000000;;				endpoints: nil,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				clusterMode:  expectation{error: true},
0000000000000000000000000000000000000000;;				endpointMode: expectation{error: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			serviceCache := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			serviceLister := v1listers.NewServiceLister(serviceCache)
0000000000000000000000000000000000000000;;			for i := range test.services {
0000000000000000000000000000000000000000;;				if err := serviceCache.Add(test.services[i]); err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s unexpected service add error: %v", test.name, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			endpointCache := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			endpointLister := v1listers.NewEndpointsLister(endpointCache)
0000000000000000000000000000000000000000;;			if test.endpoints != nil {
0000000000000000000000000000000000000000;;				for _, svc := range test.services {
0000000000000000000000000000000000000000;;					for _, ep := range test.endpoints(svc) {
0000000000000000000000000000000000000000;;						if err := endpointCache.Add(ep); err != nil {
0000000000000000000000000000000000000000;;							t.Fatalf("%s unexpected endpoint add error: %v", test.name, err)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			check := func(mode string, expected expectation, url *url.URL, err error) {
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case err == nil && expected.error:
0000000000000000000000000000000000000000;;					t.Errorf("%s in %s mode expected error, got none", test.name, mode)
0000000000000000000000000000000000000000;;				case err != nil && expected.error:
0000000000000000000000000000000000000000;;					// ignore
0000000000000000000000000000000000000000;;				case err != nil:
0000000000000000000000000000000000000000;;					t.Errorf("%s in %s mode unexpected error: %v", test.name, mode, err)
0000000000000000000000000000000000000000;;				case url.String() != expected.url:
0000000000000000000000000000000000000000;;					t.Errorf("%s in %s mode expected url %q, got %q", test.name, mode, expected.url, url.String())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clusterURL, err := ResolveCluster(serviceLister, "one", "alfa")
0000000000000000000000000000000000000000;;			check("cluster", test.clusterMode, clusterURL, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			endpointURL, err := ResolveEndpoint(serviceLister, endpointLister, "one", "alfa")
0000000000000000000000000000000000000000;;			check("endpoint", test.endpointMode, endpointURL, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
