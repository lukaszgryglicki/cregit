0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6675cf7137616d72207fb5afdd03d088c90a800d;pkg/util/string_flag.go[pkg/util/string_flag.go][staging/src/k8s.io/apiserver/pkg/util/flag/string_flag.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StringFlag is a string flag compatible with flags and pflags that keeps track of whether it had a value supplied or not.
0000000000000000000000000000000000000000;;	type StringFlag struct {
0000000000000000000000000000000000000000;;		// If Set has been invoked this value is true
0000000000000000000000000000000000000000;;		provided bool
0000000000000000000000000000000000000000;;		// The exact value provided on the flag
0000000000000000000000000000000000000000;;		value string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStringFlag(defaultVal string) StringFlag {
0000000000000000000000000000000000000000;;		return StringFlag{value: defaultVal}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *StringFlag) Default(value string) {
0000000000000000000000000000000000000000;;		f.value = value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f StringFlag) String() string {
0000000000000000000000000000000000000000;;		return f.value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f StringFlag) Value() string {
0000000000000000000000000000000000000000;;		return f.value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *StringFlag) Set(value string) error {
0000000000000000000000000000000000000000;;		f.value = value
0000000000000000000000000000000000000000;;		f.provided = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f StringFlag) Provided() bool {
0000000000000000000000000000000000000000;;		return f.provided
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *StringFlag) Type() string {
0000000000000000000000000000000000000000;;		return "string"
0000000000000000000000000000000000000000;;	}
