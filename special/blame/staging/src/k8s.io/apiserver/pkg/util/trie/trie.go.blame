0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5bd12dbf0565f452527f00a877161ee6f20d38c1;pkg/util/trie.go[pkg/util/trie.go][staging/src/k8s.io/apiserver/pkg/util/trie/trie.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package trie
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A simple trie implementation with Add an HasPrefix methods only.
0000000000000000000000000000000000000000;;	type Trie struct {
0000000000000000000000000000000000000000;;		children map[byte]*Trie
0000000000000000000000000000000000000000;;		wordTail bool
0000000000000000000000000000000000000000;;		word     string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a Trie and add all strings in the provided list to it.
0000000000000000000000000000000000000000;;	func New(list []string) Trie {
0000000000000000000000000000000000000000;;		ret := Trie{
0000000000000000000000000000000000000000;;			children: make(map[byte]*Trie),
0000000000000000000000000000000000000000;;			wordTail: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, v := range list {
0000000000000000000000000000000000000000;;			ret.Add(v)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add adds a word to this trie
0000000000000000000000000000000000000000;;	func (t *Trie) Add(v string) {
0000000000000000000000000000000000000000;;		root := t
0000000000000000000000000000000000000000;;		for _, b := range []byte(v) {
0000000000000000000000000000000000000000;;			child, exists := root.children[b]
0000000000000000000000000000000000000000;;			if !exists {
0000000000000000000000000000000000000000;;				child = &Trie{
0000000000000000000000000000000000000000;;					children: make(map[byte]*Trie),
0000000000000000000000000000000000000000;;					wordTail: false,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				root.children[b] = child
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			root = child
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		root.wordTail = true
0000000000000000000000000000000000000000;;		root.word = v
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HasPrefix returns true of v has any of the prefixes stored in this trie.
0000000000000000000000000000000000000000;;	func (t *Trie) HasPrefix(v string) bool {
0000000000000000000000000000000000000000;;		_, has := t.GetPrefix(v)
0000000000000000000000000000000000000000;;		return has
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPrefix is like HasPrefix but return the prefix in case of match or empty string otherwise.
0000000000000000000000000000000000000000;;	func (t *Trie) GetPrefix(v string) (string, bool) {
0000000000000000000000000000000000000000;;		root := t
0000000000000000000000000000000000000000;;		if root.wordTail {
0000000000000000000000000000000000000000;;			return root.word, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, b := range []byte(v) {
0000000000000000000000000000000000000000;;			child, exists := root.children[b]
0000000000000000000000000000000000000000;;			if !exists {
0000000000000000000000000000000000000000;;				return "", false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if child.wordTail {
0000000000000000000000000000000000000000;;				return child.word, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			root = child
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", false
0000000000000000000000000000000000000000;;	}
