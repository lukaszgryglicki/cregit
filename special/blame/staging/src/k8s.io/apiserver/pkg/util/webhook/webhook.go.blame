0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
65367a5f42db7940d3507f7dbca9c5e9df45ace9;plugin/pkg/webhook/webhook.go[plugin/pkg/webhook/webhook.go][staging/src/k8s.io/apiserver/pkg/util/webhook/webhook.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package webhook implements a generic HTTP webhook plugin.
0000000000000000000000000000000000000000;;	package webhook
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		runtimeserializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericWebhook struct {
0000000000000000000000000000000000000000;;		RestClient     *rest.RESTClient
0000000000000000000000000000000000000000;;		initialBackoff time.Duration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewGenericWebhook creates a new GenericWebhook from the provided kubeconfig file.
0000000000000000000000000000000000000000;;	func NewGenericWebhook(registry *registered.APIRegistrationManager, codecFactory serializer.CodecFactory, kubeConfigFile string, groupVersions []schema.GroupVersion, initialBackoff time.Duration) (*GenericWebhook, error) {
0000000000000000000000000000000000000000;;		for _, groupVersion := range groupVersions {
0000000000000000000000000000000000000000;;			if !registry.IsEnabledVersion(groupVersion) {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("webhook plugin requires enabling extension resource: %s", groupVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := clientcmd.NewDefaultClientConfigLoadingRules()
0000000000000000000000000000000000000000;;		loadingRules.ExplicitPath = kubeConfigFile
0000000000000000000000000000000000000000;;		loader := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loadingRules, &clientcmd.ConfigOverrides{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := loader.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		codec := codecFactory.LegacyCodec(groupVersions...)
0000000000000000000000000000000000000000;;		clientConfig.ContentConfig.NegotiatedSerializer = runtimeserializer.NegotiatedSerializerWrapper(runtime.SerializerInfo{Serializer: codec})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restClient, err := rest.UnversionedRESTClientFor(clientConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(ericchiang): Can we ensure remote service is reachable?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &GenericWebhook{restClient, initialBackoff}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithExponentialBackoff will retry webhookFn() up to 5 times with exponentially increasing backoff when
0000000000000000000000000000000000000000;;	// it returns an error for which apierrors.SuggestsClientDelay() or apierrors.IsInternalError() returns true.
0000000000000000000000000000000000000000;;	func (g *GenericWebhook) WithExponentialBackoff(webhookFn func() rest.Result) rest.Result {
0000000000000000000000000000000000000000;;		var result rest.Result
0000000000000000000000000000000000000000;;		WithExponentialBackoff(g.initialBackoff, func() error {
0000000000000000000000000000000000000000;;			result = webhookFn()
0000000000000000000000000000000000000000;;			return result.Error()
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithExponentialBackoff will retry webhookFn() up to 5 times with exponentially increasing backoff when
0000000000000000000000000000000000000000;;	// it returns an error for which apierrors.SuggestsClientDelay() or apierrors.IsInternalError() returns true.
0000000000000000000000000000000000000000;;	func WithExponentialBackoff(initialBackoff time.Duration, webhookFn func() error) error {
0000000000000000000000000000000000000000;;		backoff := wait.Backoff{
0000000000000000000000000000000000000000;;			Duration: initialBackoff,
0000000000000000000000000000000000000000;;			Factor:   1.5,
0000000000000000000000000000000000000000;;			Jitter:   0.2,
0000000000000000000000000000000000000000;;			Steps:    5,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		wait.ExponentialBackoff(backoff, func() (bool, error) {
0000000000000000000000000000000000000000;;			err = webhookFn()
0000000000000000000000000000000000000000;;			if _, shouldRetry := apierrors.SuggestsClientDelay(err); shouldRetry {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if apierrors.IsInternalError(err) {
0000000000000000000000000000000000000000;;				return false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return false, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
