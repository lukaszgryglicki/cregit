0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
a7c63508c0829508ff7528ded36f886d09d18408;pkg/util/configuration_map.go[pkg/util/configuration_map.go][staging/src/k8s.io/apiserver/pkg/util/flag/configuration_map.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigurationMap map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ConfigurationMap) String() string {
0000000000000000000000000000000000000000;;		pairs := []string{}
0000000000000000000000000000000000000000;;		for k, v := range *m {
0000000000000000000000000000000000000000;;			pairs = append(pairs, fmt.Sprintf("%s=%s", k, v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Strings(pairs)
0000000000000000000000000000000000000000;;		return strings.Join(pairs, ",")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ConfigurationMap) Set(value string) error {
0000000000000000000000000000000000000000;;		for _, s := range strings.Split(value, ",") {
0000000000000000000000000000000000000000;;			if len(s) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			arr := strings.SplitN(s, "=", 2)
0000000000000000000000000000000000000000;;			if len(arr) == 2 {
0000000000000000000000000000000000000000;;				(*m)[strings.TrimSpace(arr[0])] = strings.TrimSpace(arr[1])
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				(*m)[strings.TrimSpace(arr[0])] = ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*ConfigurationMap) Type() string {
0000000000000000000000000000000000000000;;		return "mapStringString"
0000000000000000000000000000000000000000;;	}
