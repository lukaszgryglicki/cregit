0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9171420671af71bdcfbb02bdf6e90d80feb2c3d9;pkg/util/flags.go[pkg/util/flags.go][staging/src/k8s.io/apiserver/pkg/util/flag/flags.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		goflag "flag"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WordSepNormalizeFunc changes all flags that contain "_" separators
0000000000000000000000000000000000000000;;	func WordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {
0000000000000000000000000000000000000000;;		if strings.Contains(name, "_") {
0000000000000000000000000000000000000000;;			return pflag.NormalizedName(strings.Replace(name, "_", "-", -1))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pflag.NormalizedName(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WarnWordSepNormalizeFunc changes and warns for flags that contain "_" separators
0000000000000000000000000000000000000000;;	func WarnWordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {
0000000000000000000000000000000000000000;;		if strings.Contains(name, "_") {
0000000000000000000000000000000000000000;;			nname := strings.Replace(name, "_", "-", -1)
0000000000000000000000000000000000000000;;			glog.Warningf("%s is DEPRECATED and will be removed in a future version. Use %s instead.", name, nname)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return pflag.NormalizedName(nname)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return pflag.NormalizedName(name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InitFlags normalizes, parses, then logs the command line flags
0000000000000000000000000000000000000000;;	func InitFlags() {
0000000000000000000000000000000000000000;;		pflag.CommandLine.SetNormalizeFunc(WordSepNormalizeFunc)
0000000000000000000000000000000000000000;;		pflag.CommandLine.AddGoFlagSet(goflag.CommandLine)
0000000000000000000000000000000000000000;;		pflag.Parse()
0000000000000000000000000000000000000000;;		pflag.VisitAll(func(flag *pflag.Flag) {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("FLAG: --%s=%q", flag.Name, flag.Value)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
