0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
abe4e986f343162a208d8637043f7835e7d322f3;pkg/util/flushwriter/writer.go[pkg/util/flushwriter/writer.go][staging/src/k8s.io/apiserver/pkg/util/flushwriter/writer.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flushwriter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Wrap wraps an io.Writer into a writer that flushes after every write if
0000000000000000000000000000000000000000;;	// the writer implements the Flusher interface.
0000000000000000000000000000000000000000;;	func Wrap(w io.Writer) io.Writer {
0000000000000000000000000000000000000000;;		fw := &flushWriter{
0000000000000000000000000000000000000000;;			writer: w,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flusher, ok := w.(http.Flusher); ok {
0000000000000000000000000000000000000000;;			fw.flusher = flusher
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fw
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// flushWriter provides wrapper for responseWriter with HTTP streaming capabilities
0000000000000000000000000000000000000000;;	type flushWriter struct {
0000000000000000000000000000000000000000;;		flusher http.Flusher
0000000000000000000000000000000000000000;;		writer  io.Writer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write is a FlushWriter implementation of the io.Writer that sends any buffered
0000000000000000000000000000000000000000;;	// data to the client.
0000000000000000000000000000000000000000;;	func (fw *flushWriter) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		n, err = fw.writer.Write(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fw.flusher != nil {
0000000000000000000000000000000000000000;;			fw.flusher.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
