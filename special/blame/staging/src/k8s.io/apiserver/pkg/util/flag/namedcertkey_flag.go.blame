0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
026f71bac912c3396ba215e8f9bdecbf263f53a0;pkg/util/config/namedcertkey_flag.go[pkg/util/config/namedcertkey_flag.go][staging/src/k8s.io/apiserver/pkg/util/flag/namedcertkey_flag.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedCertKey is a flag value parsing "certfile,keyfile" and "certfile,keyfile:name,name,name".
0000000000000000000000000000000000000000;;	type NamedCertKey struct {
0000000000000000000000000000000000000000;;		Names             []string
0000000000000000000000000000000000000000;;		CertFile, KeyFile string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ flag.Value = &NamedCertKey{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nkc *NamedCertKey) String() string {
0000000000000000000000000000000000000000;;		s := nkc.CertFile + "," + nkc.KeyFile
0000000000000000000000000000000000000000;;		if len(nkc.Names) > 0 {
0000000000000000000000000000000000000000;;			s = s + ":" + strings.Join(nkc.Names, ",")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (nkc *NamedCertKey) Set(value string) error {
0000000000000000000000000000000000000000;;		cs := strings.SplitN(value, ":", 2)
0000000000000000000000000000000000000000;;		var keycert string
0000000000000000000000000000000000000000;;		if len(cs) == 2 {
0000000000000000000000000000000000000000;;			var names string
0000000000000000000000000000000000000000;;			keycert, names = strings.TrimSpace(cs[0]), strings.TrimSpace(cs[1])
0000000000000000000000000000000000000000;;			if names == "" {
0000000000000000000000000000000000000000;;				return errors.New("empty names list is not allowed")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			nkc.Names = nil
0000000000000000000000000000000000000000;;			for _, name := range strings.Split(names, ",") {
0000000000000000000000000000000000000000;;				nkc.Names = append(nkc.Names, strings.TrimSpace(name))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			nkc.Names = nil
0000000000000000000000000000000000000000;;			keycert = strings.TrimSpace(cs[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cs = strings.Split(keycert, ",")
0000000000000000000000000000000000000000;;		if len(cs) != 2 {
0000000000000000000000000000000000000000;;			return errors.New("expected comma separated certificate and key file paths")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nkc.CertFile = strings.TrimSpace(cs[0])
0000000000000000000000000000000000000000;;		nkc.KeyFile = strings.TrimSpace(cs[1])
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*NamedCertKey) Type() string {
0000000000000000000000000000000000000000;;		return "namedCertKey"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedCertKeyArray is a flag value parsing NamedCertKeys, each passed with its own
0000000000000000000000000000000000000000;;	// flag instance (in contrast to comma separated slices).
0000000000000000000000000000000000000000;;	type NamedCertKeyArray struct {
0000000000000000000000000000000000000000;;		value   *[]NamedCertKey
0000000000000000000000000000000000000000;;		changed bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ flag.Value = &NamedCertKey{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNamedKeyCertArray creates a new NamedCertKeyArray with the internal value
0000000000000000000000000000000000000000;;	// pointing to p.
0000000000000000000000000000000000000000;;	func NewNamedCertKeyArray(p *[]NamedCertKey) *NamedCertKeyArray {
0000000000000000000000000000000000000000;;		return &NamedCertKeyArray{
0000000000000000000000000000000000000000;;			value: p,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *NamedCertKeyArray) Set(val string) error {
0000000000000000000000000000000000000000;;		nkc := NamedCertKey{}
0000000000000000000000000000000000000000;;		err := nkc.Set(val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !a.changed {
0000000000000000000000000000000000000000;;			*a.value = []NamedCertKey{nkc}
0000000000000000000000000000000000000000;;			a.changed = true
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			*a.value = append(*a.value, nkc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *NamedCertKeyArray) Type() string {
0000000000000000000000000000000000000000;;		return "namedCertKey"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *NamedCertKeyArray) String() string {
0000000000000000000000000000000000000000;;		nkcs := make([]string, 0, len(*a.value))
0000000000000000000000000000000000000000;;		for i := range *a.value {
0000000000000000000000000000000000000000;;			nkcs = append(nkcs, (*a.value)[i].String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "[" + strings.Join(nkcs, ";") + "]"
0000000000000000000000000000000000000000;;	}
