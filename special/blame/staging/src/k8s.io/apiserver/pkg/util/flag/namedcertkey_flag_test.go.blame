0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
026f71bac912c3396ba215e8f9bdecbf263f53a0;pkg/util/config/namedcertkey_flag_test.go[pkg/util/config/namedcertkey_flag_test.go][staging/src/k8s.io/apiserver/pkg/util/flag/namedcertkey_flag_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package flag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamedCertKeyArrayFlag(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			args       []string
0000000000000000000000000000000000000000;;			def        []NamedCertKey
0000000000000000000000000000000000000000;;			expected   []NamedCertKey
0000000000000000000000000000000000000000;;			parseError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:     []string{},
0000000000000000000000000000000000000000;;				expected: nil,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key"},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"  foo.crt , foo.key    "},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key:abc"},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;					Names:    []string{"abc"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key: abc  "},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;					Names:    []string{"abc"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:       []string{"foo.crt,foo.key:"},
0000000000000000000000000000000000000000;;				parseError: "empty names list is not allowed",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:       []string{""},
0000000000000000000000000000000000000000;;				parseError: "expected comma separated certificate and key file paths",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:       []string{"   "},
0000000000000000000000000000000000000000;;				parseError: "expected comma separated certificate and key file paths",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args:       []string{"a,b,c"},
0000000000000000000000000000000000000000;;				parseError: "expected comma separated certificate and key file paths",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key:abc,def,ghi"},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;					Names:    []string{"abc", "def", "ghi"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key:*.*.*"},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;					Names:    []string{"*.*.*"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				args: []string{"foo.crt,foo.key", "bar.crt,bar.key"},
0000000000000000000000000000000000000000;;				expected: []NamedCertKey{{
0000000000000000000000000000000000000000;;					KeyFile:  "foo.key",
0000000000000000000000000000000000000000;;					CertFile: "foo.crt",
0000000000000000000000000000000000000000;;				}, {
0000000000000000000000000000000000000000;;					KeyFile:  "bar.key",
0000000000000000000000000000000000000000;;					CertFile: "bar.crt",
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			fs := pflag.NewFlagSet("testNamedCertKeyArray", pflag.ContinueOnError)
0000000000000000000000000000000000000000;;			var nkcs []NamedCertKey
0000000000000000000000000000000000000000;;			for _, d := range test.def {
0000000000000000000000000000000000000000;;				nkcs = append(nkcs, d)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fs.Var(NewNamedCertKeyArray(&nkcs), "tls-sni-cert-key", "usage")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			args := []string{}
0000000000000000000000000000000000000000;;			for _, a := range test.args {
0000000000000000000000000000000000000000;;				args = append(args, fmt.Sprintf("--tls-sni-cert-key=%s", a))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err := fs.Parse(args)
0000000000000000000000000000000000000000;;			if test.parseError != "" {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("%d: expected error %q, got nil", i, test.parseError)
0000000000000000000000000000000000000000;;				} else if !strings.Contains(err.Error(), test.parseError) {
0000000000000000000000000000000000000000;;					t.Errorf("%d: expected error %q, got %q", i, test.parseError, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected nil error, got %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(nkcs, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected %+v, got %+v", i, test.expected, nkcs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
