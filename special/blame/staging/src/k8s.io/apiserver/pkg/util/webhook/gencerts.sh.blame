0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# gencerts.sh generates the certificates for the webhook tests.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# It is not expected to be run often (there is no go generate rule), and mainly
0000000000000000000000000000000000000000;;	# exists for documentation purposes.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CN_BASE="webhook_tests"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat > server.conf << EOF
0000000000000000000000000000000000000000;;	[req]
0000000000000000000000000000000000000000;;	req_extensions = v3_req
0000000000000000000000000000000000000000;;	distinguished_name = req_distinguished_name
0000000000000000000000000000000000000000;;	[req_distinguished_name]
0000000000000000000000000000000000000000;;	[ v3_req ]
0000000000000000000000000000000000000000;;	basicConstraints = CA:FALSE
0000000000000000000000000000000000000000;;	keyUsage = nonRepudiation, digitalSignature, keyEncipherment
0000000000000000000000000000000000000000;;	extendedKeyUsage = clientAuth, serverAuth
0000000000000000000000000000000000000000;;	subjectAltName = @alt_names
0000000000000000000000000000000000000000;;	[alt_names]
0000000000000000000000000000000000000000;;	IP.1 = 127.0.0.1
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat > client.conf << EOF
0000000000000000000000000000000000000000;;	[req]
0000000000000000000000000000000000000000;;	req_extensions = v3_req
0000000000000000000000000000000000000000;;	distinguished_name = req_distinguished_name
0000000000000000000000000000000000000000;;	[req_distinguished_name]
0000000000000000000000000000000000000000;;	[ v3_req ]
0000000000000000000000000000000000000000;;	basicConstraints = CA:FALSE
0000000000000000000000000000000000000000;;	keyUsage = nonRepudiation, digitalSignature, keyEncipherment
0000000000000000000000000000000000000000;;	extendedKeyUsage = clientAuth, serverAuth
0000000000000000000000000000000000000000;;	subjectAltName = @alt_names
0000000000000000000000000000000000000000;;	[alt_names]
0000000000000000000000000000000000000000;;	IP.1 = 127.0.0.1
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a certificate authority
0000000000000000000000000000000000000000;;	openssl genrsa -out caKey.pem 2048
0000000000000000000000000000000000000000;;	openssl req -x509 -new -nodes -key caKey.pem -days 100000 -out caCert.pem -subj "/CN=${CN_BASE}_ca"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a second certificate authority
0000000000000000000000000000000000000000;;	openssl genrsa -out badCAKey.pem 2048
0000000000000000000000000000000000000000;;	openssl req -x509 -new -nodes -key badCAKey.pem -days 100000 -out badCACert.pem -subj "/CN=${CN_BASE}_ca"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a server certiticate
0000000000000000000000000000000000000000;;	openssl genrsa -out serverKey.pem 2048
0000000000000000000000000000000000000000;;	openssl req -new -key serverKey.pem -out server.csr -subj "/CN=${CN_BASE}_server" -config server.conf
0000000000000000000000000000000000000000;;	openssl x509 -req -in server.csr -CA caCert.pem -CAkey caKey.pem -CAcreateserial -out serverCert.pem -days 100000 -extensions v3_req -extfile server.conf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Create a client certiticate
0000000000000000000000000000000000000000;;	openssl genrsa -out clientKey.pem 2048
0000000000000000000000000000000000000000;;	openssl req -new -key clientKey.pem -out client.csr -subj "/CN=${CN_BASE}_client" -config client.conf
0000000000000000000000000000000000000000;;	openssl x509 -req -in client.csr -CA caCert.pem -CAkey caKey.pem -CAcreateserial -out clientCert.pem -days 100000 -extensions v3_req -extfile client.conf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	outfile=certs_test.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	cat > $outfile << EOF
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	EOF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo "// This file was generated using openssl by the gencerts.sh script" >> $outfile
0000000000000000000000000000000000000000;;	echo "// and holds raw certificates for the webhook tests." >> $outfile
0000000000000000000000000000000000000000;;	echo "" >> $outfile
0000000000000000000000000000000000000000;;	echo "package webhook" >> $outfile
0000000000000000000000000000000000000000;;	for file in caKey caCert badCAKey badCACert serverKey serverCert clientKey clientCert; do
0000000000000000000000000000000000000000;;		data=$(cat ${file}.pem)
0000000000000000000000000000000000000000;;		echo "" >> $outfile
0000000000000000000000000000000000000000;;		echo "var $file = []byte(\`$data\`)" >> $outfile
0000000000000000000000000000000000000000;;	done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Clean up after we're done.
0000000000000000000000000000000000000000;;	rm *.pem
0000000000000000000000000000000000000000;;	rm *.csr
0000000000000000000000000000000000000000;;	rm *.srl
0000000000000000000000000000000000000000;;	rm *.conf
