0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
75d2b5bd08eb96f7382b7ba2830cb1b53c8b359e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package audit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/prometheus/client_golang/prometheus"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		subsystem = "apiserver_audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		eventCounter = prometheus.NewCounter(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: subsystem,
0000000000000000000000000000000000000000;;				Name:      "event_total",
0000000000000000000000000000000000000000;;				Help:      "Counter of audit events generated and sent to the audit backend.",
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		errorCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: subsystem,
0000000000000000000000000000000000000000;;				Name:      "error_total",
0000000000000000000000000000000000000000;;				Help: "Counter of audit events that failed to be audited properly. " +
0000000000000000000000000000000000000000;;					"Plugin identifies the plugin affected by the error.",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"plugin"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		levelCounter = prometheus.NewCounterVec(
0000000000000000000000000000000000000000;;			prometheus.CounterOpts{
0000000000000000000000000000000000000000;;				Subsystem: subsystem,
0000000000000000000000000000000000000000;;				Name:      "level_total",
0000000000000000000000000000000000000000;;				Help:      "Counter of policy levels for audit events (1 per request).",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			[]string{"level"},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		prometheus.MustRegister(eventCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(errorCounter)
0000000000000000000000000000000000000000;;		prometheus.MustRegister(levelCounter)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObserveEvent updates the relevant prometheus metrics for the generated audit event.
0000000000000000000000000000000000000000;;	func ObserveEvent() {
0000000000000000000000000000000000000000;;		eventCounter.Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObservePolicyLevel updates the relevant prometheus metrics with the audit level for a request.
0000000000000000000000000000000000000000;;	func ObservePolicyLevel(level auditinternal.Level) {
0000000000000000000000000000000000000000;;		levelCounter.WithLabelValues(string(level)).Inc()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandlePluginError handles an error that occurred in an audit plugin. This method should only be
0000000000000000000000000000000000000000;;	// used if the error may have prevented the audit event from being properly recorded. The events are
0000000000000000000000000000000000000000;;	// logged to the debug log.
0000000000000000000000000000000000000000;;	func HandlePluginError(plugin string, err error, impacted ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		// Count the error.
0000000000000000000000000000000000000000;;		errorCounter.WithLabelValues(plugin).Add(float64(len(impacted)))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Log the audit events to the debug log.
0000000000000000000000000000000000000000;;		msg := fmt.Sprintf("Error in audit plugin '%s' affecting %d audit events: %v\nImpacted events:\n",
0000000000000000000000000000000000000000;;			plugin, len(impacted), err)
0000000000000000000000000000000000000000;;		for _, ev := range impacted {
0000000000000000000000000000000000000000;;			msg = msg + EventString(ev) + "\n"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.Error(msg)
0000000000000000000000000000000000000000;;	}
