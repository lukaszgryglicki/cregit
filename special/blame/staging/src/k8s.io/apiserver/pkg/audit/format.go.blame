0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
75d2b5bd08eb96f7382b7ba2830cb1b53c8b359e;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package audit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EventString creates a 1-line text representation of an audit event, using a subset of the
0000000000000000000000000000000000000000;;	// information in the event struct.
0000000000000000000000000000000000000000;;	func EventString(ev *auditinternal.Event) string {
0000000000000000000000000000000000000000;;		username := "<none>"
0000000000000000000000000000000000000000;;		groups := "<none>"
0000000000000000000000000000000000000000;;		if len(ev.User.Username) > 0 {
0000000000000000000000000000000000000000;;			username = ev.User.Username
0000000000000000000000000000000000000000;;			if len(ev.User.Groups) > 0 {
0000000000000000000000000000000000000000;;				groups = auditStringSlice(ev.User.Groups)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		asuser := "<self>"
0000000000000000000000000000000000000000;;		asgroups := "<lookup>"
0000000000000000000000000000000000000000;;		if ev.ImpersonatedUser != nil {
0000000000000000000000000000000000000000;;			asuser = ev.ImpersonatedUser.Username
0000000000000000000000000000000000000000;;			if ev.ImpersonatedUser.Groups != nil {
0000000000000000000000000000000000000000;;				asgroups = auditStringSlice(ev.ImpersonatedUser.Groups)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		namespace := "<none>"
0000000000000000000000000000000000000000;;		if ev.ObjectRef != nil && len(ev.ObjectRef.Namespace) != 0 {
0000000000000000000000000000000000000000;;			namespace = ev.ObjectRef.Namespace
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		response := "<deferred>"
0000000000000000000000000000000000000000;;		if ev.ResponseStatus != nil {
0000000000000000000000000000000000000000;;			response = strconv.Itoa(int(ev.ResponseStatus.Code))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ip := "<unknown>"
0000000000000000000000000000000000000000;;		if len(ev.SourceIPs) > 0 {
0000000000000000000000000000000000000000;;			ip = ev.SourceIPs[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s AUDIT: id=%q stage=%q ip=%q method=%q user=%q groups=%q as=%q asgroups=%q namespace=%q uri=%q response=\"%s\"",
0000000000000000000000000000000000000000;;			ev.Timestamp.Format(time.RFC3339Nano), ev.AuditID, ev.Stage, ip, ev.Verb, username, groups, asuser, asgroups, namespace, ev.RequestURI, response)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func auditStringSlice(inList []string) string {
0000000000000000000000000000000000000000;;		quotedElements := make([]string, len(inList))
0000000000000000000000000000000000000000;;		for i, in := range inList {
0000000000000000000000000000000000000000;;			quotedElements[i] = fmt.Sprintf("%q", in)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(quotedElements, ",")
0000000000000000000000000000000000000000;;	}
