0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
620b8240db3e28807eba9eaf682194ac638c69e8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package audit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Union returns an audit Backend which logs events to a set of backends. The returned
0000000000000000000000000000000000000000;;	// Sink implementation blocks in turn for each call to ProcessEvents.
0000000000000000000000000000000000000000;;	func Union(backends ...Backend) Backend {
0000000000000000000000000000000000000000;;		if len(backends) == 1 {
0000000000000000000000000000000000000000;;			return backends[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return union{backends}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type union struct {
0000000000000000000000000000000000000000;;		backends []Backend
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u union) ProcessEvents(events ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		for _, backend := range u.backends {
0000000000000000000000000000000000000000;;			backend.ProcessEvents(events...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u union) Run(stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		var funcs []func() error
0000000000000000000000000000000000000000;;		for _, backend := range u.backends {
0000000000000000000000000000000000000000;;			funcs = append(funcs, func() error {
0000000000000000000000000000000000000000;;				return backend.Run(stopCh)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errors.AggregateGoroutines(funcs...)
0000000000000000000000000000000000000000;;	}
