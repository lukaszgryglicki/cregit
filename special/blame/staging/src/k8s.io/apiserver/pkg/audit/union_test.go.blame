0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
620b8240db3e28807eba9eaf682194ac638c69e8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package audit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeBackend struct {
0000000000000000000000000000000000000000;;		events []*auditinternal.Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeBackend) ProcessEvents(events ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		f.events = append(f.events, events...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeBackend) Run(stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnion(t *testing.T) {
0000000000000000000000000000000000000000;;		backends := []Backend{
0000000000000000000000000000000000000000;;			new(fakeBackend),
0000000000000000000000000000000000000000;;			new(fakeBackend),
0000000000000000000000000000000000000000;;			new(fakeBackend),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b := Union(backends...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		n := 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var events []*auditinternal.Event
0000000000000000000000000000000000000000;;		for i := 0; i < n; i++ {
0000000000000000000000000000000000000000;;			events = append(events, &auditinternal.Event{
0000000000000000000000000000000000000000;;				AuditID: types.UID(strconv.Itoa(i)),
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b.ProcessEvents(events...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, b := range backends {
0000000000000000000000000000000000000000;;			// so we can inspect the underlying events.
0000000000000000000000000000000000000000;;			backend := b.(*fakeBackend)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if got := len(backend.events); got != n {
0000000000000000000000000000000000000000;;				t.Errorf("backend %d wanted %d events, got %d", i, n, got)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for j, event := range backend.events {
0000000000000000000000000000000000000000;;				wantID := types.UID(strconv.Itoa(j))
0000000000000000000000000000000000000000;;				if event.AuditID != wantID {
0000000000000000000000000000000000000000;;					t.Errorf("backend %d event %d wanted id %s, got %s", i, j, wantID, event.AuditID)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
