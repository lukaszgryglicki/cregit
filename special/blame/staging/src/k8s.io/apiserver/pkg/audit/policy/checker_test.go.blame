0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a7319ac0b5b58130f54b3bb52fa9e005a464b861;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package policy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestChecker(t *testing.T) {
0000000000000000000000000000000000000000;;		tim := &user.DefaultInfo{
0000000000000000000000000000000000000000;;			Name:   "tim@k8s.io",
0000000000000000000000000000000000000000;;			Groups: []string{"humans", "developers"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		attrs := map[string]authorizer.Attributes{
0000000000000000000000000000000000000000;;			"namespaced": &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User:            tim,
0000000000000000000000000000000000000000;;				Verb:            "get",
0000000000000000000000000000000000000000;;				Namespace:       "default",
0000000000000000000000000000000000000000;;				APIGroup:        "", // Core
0000000000000000000000000000000000000000;;				APIVersion:      "v1",
0000000000000000000000000000000000000000;;				Resource:        "pods",
0000000000000000000000000000000000000000;;				Name:            "busybox",
0000000000000000000000000000000000000000;;				ResourceRequest: true,
0000000000000000000000000000000000000000;;				Path:            "/api/v1/namespaces/default/pods/busybox",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cluster": &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User:            tim,
0000000000000000000000000000000000000000;;				Verb:            "get",
0000000000000000000000000000000000000000;;				APIGroup:        "rbac.authorization.k8s.io", // Core
0000000000000000000000000000000000000000;;				APIVersion:      "v1beta1",
0000000000000000000000000000000000000000;;				Resource:        "clusterroles",
0000000000000000000000000000000000000000;;				Name:            "edit",
0000000000000000000000000000000000000000;;				ResourceRequest: true,
0000000000000000000000000000000000000000;;				Path:            "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/edit",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nonResource": &authorizer.AttributesRecord{
0000000000000000000000000000000000000000;;				User:            tim,
0000000000000000000000000000000000000000;;				Verb:            "get",
0000000000000000000000000000000000000000;;				ResourceRequest: false,
0000000000000000000000000000000000000000;;				Path:            "/logs/kubelet.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rules := map[string]audit.PolicyRule{
0000000000000000000000000000000000000000;;			"default": {
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"create": {
0000000000000000000000000000000000000000;;				Level: audit.LevelRequest,
0000000000000000000000000000000000000000;;				Verbs: []string{"create"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"tims": {
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;				Users: []string{"tim@k8s.io"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"humans": {
0000000000000000000000000000000000000000;;				Level:      audit.LevelMetadata,
0000000000000000000000000000000000000000;;				UserGroups: []string{"humans"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"serviceAccounts": {
0000000000000000000000000000000000000000;;				Level:      audit.LevelRequest,
0000000000000000000000000000000000000000;;				UserGroups: []string{"system:serviceaccounts"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"getPods": {
0000000000000000000000000000000000000000;;				Level:     audit.LevelRequestResponse,
0000000000000000000000000000000000000000;;				Verbs:     []string{"get"},
0000000000000000000000000000000000000000;;				Resources: []audit.GroupResources{{Resources: []string{"pods"}}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"getClusterRoles": {
0000000000000000000000000000000000000000;;				Level: audit.LevelRequestResponse,
0000000000000000000000000000000000000000;;				Verbs: []string{"get"},
0000000000000000000000000000000000000000;;				Resources: []audit.GroupResources{{
0000000000000000000000000000000000000000;;					Group:     "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;					Resources: []string{"clusterroles"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;				Namespaces: []string{""},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"getLogs": {
0000000000000000000000000000000000000000;;				Level: audit.LevelRequestResponse,
0000000000000000000000000000000000000000;;				Verbs: []string{"get"},
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"/logs*",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"getMetrics": {
0000000000000000000000000000000000000000;;				Level: audit.LevelRequest,
0000000000000000000000000000000000000000;;				Verbs: []string{"get"},
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"/metrics",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test := func(req string, expected audit.Level, ruleNames ...string) {
0000000000000000000000000000000000000000;;			policy := audit.Policy{}
0000000000000000000000000000000000000000;;			for _, rule := range ruleNames {
0000000000000000000000000000000000000000;;				require.Contains(t, rules, rule)
0000000000000000000000000000000000000000;;				policy.Rules = append(policy.Rules, rules[rule])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			require.Contains(t, attrs, req)
0000000000000000000000000000000000000000;;			actual := NewChecker(&policy).Level(attrs[req])
0000000000000000000000000000000000000000;;			assert.Equal(t, expected, actual, "request:%s rules:%s", req, strings.Join(ruleNames, ","))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelMetadata, "default")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelNone, "create")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelMetadata, "tims")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelMetadata, "humans")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelNone, "serviceAccounts")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelRequestResponse, "getPods")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelNone, "getClusterRoles")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelNone, "getLogs")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelNone, "getMetrics")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelMetadata, "getMetrics", "serviceAccounts", "default")
0000000000000000000000000000000000000000;;		test("namespaced", audit.LevelRequestResponse, "getMetrics", "getPods", "default")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelMetadata, "default")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelNone, "create")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelMetadata, "tims")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelMetadata, "humans")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelNone, "serviceAccounts")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelNone, "getPods")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelRequestResponse, "getClusterRoles")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelNone, "getLogs")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelNone, "getMetrics")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelMetadata, "getMetrics", "serviceAccounts", "default")
0000000000000000000000000000000000000000;;		test("cluster", audit.LevelRequestResponse, "getMetrics", "getClusterRoles", "default")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelMetadata, "default")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelNone, "create")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelMetadata, "tims")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelMetadata, "humans")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelNone, "serviceAccounts")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelNone, "getPods")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelNone, "getClusterRoles")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelRequestResponse, "getLogs")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelNone, "getMetrics")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelMetadata, "getMetrics", "serviceAccounts", "default")
0000000000000000000000000000000000000000;;		test("nonResource", audit.LevelRequestResponse, "getLogs", "getClusterRoles", "default")
0000000000000000000000000000000000000000;;	}
