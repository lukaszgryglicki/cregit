0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7c76be717720b98ceba9f572697a551d221acd03;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package audit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sink interface {
0000000000000000000000000000000000000000;;		// ProcessEvents handles events. Per audit ID it might be that ProcessEvents is called up to three times.
0000000000000000000000000000000000000000;;		// Errors might be logged by the sink itself. If an error should be fatal, leading to an internal
0000000000000000000000000000000000000000;;		// error, ProcessEvents is supposed to panic. The event must not be mutated and is reused by the caller
0000000000000000000000000000000000000000;;		// after the call returns, i.e. the sink has to make a deepcopy to keep a copy around if necessary.
0000000000000000000000000000000000000000;;		ProcessEvents(events ...*auditinternal.Event)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Backend interface {
0000000000000000000000000000000000000000;;		Sink
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Run will initialize the backend. It must not block, but may run go routines in the background. If
0000000000000000000000000000000000000000;;		// stopCh is closed, it is supposed to stop them. Run will be called before the first call to ProcessEvents.
0000000000000000000000000000000000000000;;		Run(stopCh <-chan struct{}) error
0000000000000000000000000000000000000000;;	}
