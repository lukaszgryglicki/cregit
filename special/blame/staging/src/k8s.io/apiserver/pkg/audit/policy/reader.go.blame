0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a7319ac0b5b58130f54b3bb52fa9e005a464b861;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package policy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		auditv1alpha1 "k8s.io/apiserver/pkg/apis/audit/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/audit/validation"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/audit"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LoadPolicyFromFile(filePath string) (*auditinternal.Policy, error) {
0000000000000000000000000000000000000000;;		if filePath == "" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("file path not specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		policyDef, err := ioutil.ReadFile(filePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed to read file path %q: %+v", filePath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		policyVersioned := &auditv1alpha1.Policy{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		decoder := audit.Codecs.UniversalDecoder(auditv1alpha1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		if err := runtime.DecodeInto(decoder, policyDef, policyVersioned); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed decoding file %q: %v", filePath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		policy := &auditinternal.Policy{}
0000000000000000000000000000000000000000;;		if err := audit.Scheme.Convert(policyVersioned, policy, nil); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("failed converting policy: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := validation.ValidatePolicy(policy); err != nil {
0000000000000000000000000000000000000000;;			return nil, err.ToAggregate()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Loaded %d audit policy rules from file %s\n", len(policy.Rules), filePath)
0000000000000000000000000000000000000000;;		return policy, nil
0000000000000000000000000000000000000000;;	}
