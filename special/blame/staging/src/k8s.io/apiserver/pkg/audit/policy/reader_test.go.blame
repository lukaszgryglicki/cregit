0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a7319ac0b5b58130f54b3bb52fa9e005a464b861;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package policy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/require"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const policyDef = `
0000000000000000000000000000000000000000;;	rules:
0000000000000000000000000000000000000000;;	  - level: None
0000000000000000000000000000000000000000;;	    nonResourceURLs:
0000000000000000000000000000000000000000;;	      - /healthz*
0000000000000000000000000000000000000000;;	      - /version
0000000000000000000000000000000000000000;;	  - level: RequestResponse
0000000000000000000000000000000000000000;;	    users: ["tim"]
0000000000000000000000000000000000000000;;	    userGroups: ["testers", "developers"]
0000000000000000000000000000000000000000;;	    verbs: ["patch", "delete", "create"]
0000000000000000000000000000000000000000;;	    resources:
0000000000000000000000000000000000000000;;	      - group: ""
0000000000000000000000000000000000000000;;	      - group: "rbac.authorization.k8s.io"
0000000000000000000000000000000000000000;;	        resources: ["clusterroles", "clusterrolebindings"]
0000000000000000000000000000000000000000;;	    namespaces: ["default", "kube-system"]
0000000000000000000000000000000000000000;;	  - level: Metadata
0000000000000000000000000000000000000000;;	`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var expectedPolicy = &audit.Policy{
0000000000000000000000000000000000000000;;		Rules: []audit.PolicyRule{{
0000000000000000000000000000000000000000;;			Level:           audit.LevelNone,
0000000000000000000000000000000000000000;;			NonResourceURLs: []string{"/healthz*", "/version"},
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			Level:      audit.LevelRequestResponse,
0000000000000000000000000000000000000000;;			Users:      []string{"tim"},
0000000000000000000000000000000000000000;;			UserGroups: []string{"testers", "developers"},
0000000000000000000000000000000000000000;;			Verbs:      []string{"patch", "delete", "create"},
0000000000000000000000000000000000000000;;			Resources: []audit.GroupResources{{}, {
0000000000000000000000000000000000000000;;				Group:     "rbac.authorization.k8s.io",
0000000000000000000000000000000000000000;;				Resources: []string{"clusterroles", "clusterrolebindings"},
0000000000000000000000000000000000000000;;			}},
0000000000000000000000000000000000000000;;			Namespaces: []string{"default", "kube-system"},
0000000000000000000000000000000000000000;;		}, {
0000000000000000000000000000000000000000;;			Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;		}},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParser(t *testing.T) {
0000000000000000000000000000000000000000;;		// Create a policy file.
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "policy.yaml")
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = f.WriteString(policyDef)
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;		require.NoError(t, f.Close())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		policy, err := LoadPolicyFromFile(f.Name())
0000000000000000000000000000000000000000;;		require.NoError(t, err)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert.Len(t, policy.Rules, 3) // Sanity check.
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(policy, expectedPolicy) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected policy! Diff:\n%s", diff.ObjectDiff(policy, expectedPolicy))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
