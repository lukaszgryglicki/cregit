0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6336e1863a9aa68d5ece4751b75d6dd346155110;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package features
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		utilfeature "k8s.io/apiserver/pkg/util/feature"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Every feature gate should add method here following this template:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// // owner: @username
0000000000000000000000000000000000000000;;		// // alpha: v1.4
0000000000000000000000000000000000000000;;		// MyFeature() bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: tallclair
0000000000000000000000000000000000000000;;		// alpha: v1.5
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// StreamingProxyRedirects controls whether the apiserver should intercept (and follow)
0000000000000000000000000000000000000000;;		// redirects from the backend (Kubelet) for streaming requests (exec/attach/port-forward).
0000000000000000000000000000000000000000;;		StreamingProxyRedirects utilfeature.Feature = "StreamingProxyRedirects"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: tallclair
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// AdvancedAuditing enables a much more general API auditing pipeline, which includes support for
0000000000000000000000000000000000000000;;		// pluggable output backends and an audit policy specifying how different requests should be
0000000000000000000000000000000000000000;;		// audited.
0000000000000000000000000000000000000000;;		AdvancedAuditing utilfeature.Feature = "AdvancedAuditing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// owner: @ilackams
0000000000000000000000000000000000000000;;		// alpha: v1.7
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Enables compression of REST responses (GET and LIST only)
0000000000000000000000000000000000000000;;		APIResponseCompression utilfeature.Feature = "APIResponseCompression"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		utilfeature.DefaultFeatureGate.Add(defaultKubernetesFeatureGates)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultKubernetesFeatureGates consists of all known Kubernetes-specific feature keys.
0000000000000000000000000000000000000000;;	// To add a new feature, define a key for it above and add it here. The features will be
0000000000000000000000000000000000000000;;	// available throughout Kubernetes binaries.
0000000000000000000000000000000000000000;;	var defaultKubernetesFeatureGates = map[utilfeature.Feature]utilfeature.FeatureSpec{
0000000000000000000000000000000000000000;;		StreamingProxyRedirects: {Default: true, PreRelease: utilfeature.Beta},
0000000000000000000000000000000000000000;;		AdvancedAuditing:        {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;		APIResponseCompression:  {Default: false, PreRelease: utilfeature.Alpha},
0000000000000000000000000000000000000000;;	}
