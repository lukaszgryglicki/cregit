0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a7319ac0b5b58130f54b3bb52fa9e005a464b861;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		validRules := []audit.PolicyRule{
0000000000000000000000000000000000000000;;			{ // Defaulting rule
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;			}, { // Matching non-humans
0000000000000000000000000000000000000000;;				Level:      audit.LevelNone,
0000000000000000000000000000000000000000;;				UserGroups: []string{"system:serviceaccounts", "system:nodes"},
0000000000000000000000000000000000000000;;			}, { // Specific request
0000000000000000000000000000000000000000;;				Level:      audit.LevelRequestResponse,
0000000000000000000000000000000000000000;;				Verbs:      []string{"get"},
0000000000000000000000000000000000000000;;				Resources:  []audit.GroupResources{{Group: "rbac.authorization.k8s.io", Resources: []string{"roles", "rolebindings"}}},
0000000000000000000000000000000000000000;;				Namespaces: []string{"kube-system"},
0000000000000000000000000000000000000000;;			}, { // Some non-resource URLs
0000000000000000000000000000000000000000;;				Level:      audit.LevelMetadata,
0000000000000000000000000000000000000000;;				UserGroups: []string{"developers"},
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"/logs*",
0000000000000000000000000000000000000000;;					"/healthz*",
0000000000000000000000000000000000000000;;					"/metrics",
0000000000000000000000000000000000000000;;					"*",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases := []audit.Policy{}
0000000000000000000000000000000000000000;;		for _, rule := range validRules {
0000000000000000000000000000000000000000;;			successCases = append(successCases, audit.Policy{Rules: []audit.PolicyRule{rule}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		successCases = append(successCases, audit.Policy{})                  // Empty policy is valid.
0000000000000000000000000000000000000000;;		successCases = append(successCases, audit.Policy{Rules: validRules}) // Multiple rules.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, policy := range successCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePolicy(&policy); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Expected policy %#v to be valid: %v", i, policy, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidRules := []audit.PolicyRule{
0000000000000000000000000000000000000000;;			{}, // Empty rule (missing Level)
0000000000000000000000000000000000000000;;			{ // Missing level
0000000000000000000000000000000000000000;;				Verbs:      []string{"get"},
0000000000000000000000000000000000000000;;				Resources:  []audit.GroupResources{{Resources: []string{"secrets"}}},
0000000000000000000000000000000000000000;;				Namespaces: []string{"kube-system"},
0000000000000000000000000000000000000000;;			}, { // Invalid Level
0000000000000000000000000000000000000000;;				Level: "FooBar",
0000000000000000000000000000000000000000;;			}, { // NonResourceURLs + Namespaces
0000000000000000000000000000000000000000;;				Level:           audit.LevelMetadata,
0000000000000000000000000000000000000000;;				Namespaces:      []string{"default"},
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{"/logs*"},
0000000000000000000000000000000000000000;;			}, { // NonResourceURLs + ResourceKinds
0000000000000000000000000000000000000000;;				Level:           audit.LevelMetadata,
0000000000000000000000000000000000000000;;				Resources:       []audit.GroupResources{{Resources: []string{"secrets"}}},
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{"/logs*"},
0000000000000000000000000000000000000000;;			}, { // invalid group name
0000000000000000000000000000000000000000;;				Level:     audit.LevelMetadata,
0000000000000000000000000000000000000000;;				Resources: []audit.GroupResources{{Group: "rbac.authorization.k8s.io/v1beta1", Resources: []string{"roles"}}},
0000000000000000000000000000000000000000;;			}, { // invalid non-resource URLs
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"logs",
0000000000000000000000000000000000000000;;					"/healthz*",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, { // empty non-resource URLs
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"",
0000000000000000000000000000000000000000;;					"/healthz*",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, { // invalid non-resource URLs with multi "*"
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"/logs/*/*",
0000000000000000000000000000000000000000;;					"/metrics",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, { // invalid non-resrouce URLs with "*" not in the end
0000000000000000000000000000000000000000;;				Level: audit.LevelMetadata,
0000000000000000000000000000000000000000;;				NonResourceURLs: []string{
0000000000000000000000000000000000000000;;					"/logs/*.log",
0000000000000000000000000000000000000000;;					"/metrics",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases := []audit.Policy{}
0000000000000000000000000000000000000000;;		for _, rule := range invalidRules {
0000000000000000000000000000000000000000;;			errorCases = append(errorCases, audit.Policy{Rules: []audit.PolicyRule{rule}})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errorCases = append(errorCases, audit.Policy{Rules: append(validRules, audit.PolicyRule{})}) // Multiple rules.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, policy := range errorCases {
0000000000000000000000000000000000000000;;			if errs := ValidatePolicy(&policy); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Expected policy %#v to be invalid!", i, policy)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
