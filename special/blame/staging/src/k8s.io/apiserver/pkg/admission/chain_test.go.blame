0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
21badd08536b0f5a90f776b15151bb1658dabd5f;pkg/admission/chain_test.go[pkg/admission/chain_test.go][staging/src/k8s.io/apiserver/pkg/admission/chain_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeHandler struct {
0000000000000000000000000000000000000000;;		*Handler
0000000000000000000000000000000000000000;;		name        string
0000000000000000000000000000000000000000;;		admit       bool
0000000000000000000000000000000000000000;;		admitCalled bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *FakeHandler) Admit(a Attributes) (err error) {
0000000000000000000000000000000000000000;;		h.admitCalled = true
0000000000000000000000000000000000000000;;		if h.admit {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Errorf("Don't admit")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeHandler(name string, admit bool, ops ...Operation) Interface {
0000000000000000000000000000000000000000;;		return &FakeHandler{
0000000000000000000000000000000000000000;;			name:    name,
0000000000000000000000000000000000000000;;			admit:   admit,
0000000000000000000000000000000000000000;;			Handler: NewHandler(ops...),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAdmit(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			operation Operation
0000000000000000000000000000000000000000;;			chain     chainAdmissionHandler
0000000000000000000000000000000000000000;;			accept    bool
0000000000000000000000000000000000000000;;			calls     map[string]bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "all accept",
0000000000000000000000000000000000000000;;				operation: Create,
0000000000000000000000000000000000000000;;				chain: []Interface{
0000000000000000000000000000000000000000;;					makeHandler("a", true, Update, Delete, Create),
0000000000000000000000000000000000000000;;					makeHandler("b", true, Delete, Create),
0000000000000000000000000000000000000000;;					makeHandler("c", true, Create),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				calls:  map[string]bool{"a": true, "b": true, "c": true},
0000000000000000000000000000000000000000;;				accept: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "ignore handler",
0000000000000000000000000000000000000000;;				operation: Create,
0000000000000000000000000000000000000000;;				chain: []Interface{
0000000000000000000000000000000000000000;;					makeHandler("a", true, Update, Delete, Create),
0000000000000000000000000000000000000000;;					makeHandler("b", false, Delete),
0000000000000000000000000000000000000000;;					makeHandler("c", true, Create),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				calls:  map[string]bool{"a": true, "c": true},
0000000000000000000000000000000000000000;;				accept: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "ignore all",
0000000000000000000000000000000000000000;;				operation: Connect,
0000000000000000000000000000000000000000;;				chain: []Interface{
0000000000000000000000000000000000000000;;					makeHandler("a", true, Update, Delete, Create),
0000000000000000000000000000000000000000;;					makeHandler("b", false, Delete),
0000000000000000000000000000000000000000;;					makeHandler("c", true, Create),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				calls:  map[string]bool{},
0000000000000000000000000000000000000000;;				accept: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "reject one",
0000000000000000000000000000000000000000;;				operation: Delete,
0000000000000000000000000000000000000000;;				chain: []Interface{
0000000000000000000000000000000000000000;;					makeHandler("a", true, Update, Delete, Create),
0000000000000000000000000000000000000000;;					makeHandler("b", false, Delete),
0000000000000000000000000000000000000000;;					makeHandler("c", true, Create),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				calls:  map[string]bool{"a": true, "b": true},
0000000000000000000000000000000000000000;;				accept: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := test.chain.Admit(NewAttributesRecord(nil, nil, schema.GroupVersionKind{}, "", "", schema.GroupVersionResource{}, "", test.operation, nil))
0000000000000000000000000000000000000000;;			accepted := (err == nil)
0000000000000000000000000000000000000000;;			if accepted != test.accept {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected result of admit call: %v\n", test.name, accepted)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, h := range test.chain {
0000000000000000000000000000000000000000;;				fake := h.(*FakeHandler)
0000000000000000000000000000000000000000;;				_, shouldBeCalled := test.calls[fake.name]
0000000000000000000000000000000000000000;;				if shouldBeCalled != fake.admitCalled {
0000000000000000000000000000000000000000;;					t.Errorf("%s: handler %s not called as expected: %v", test.name, fake.name, fake.admitCalled)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandles(t *testing.T) {
0000000000000000000000000000000000000000;;		chain := chainAdmissionHandler{
0000000000000000000000000000000000000000;;			makeHandler("a", true, Update, Delete, Create),
0000000000000000000000000000000000000000;;			makeHandler("b", true, Delete, Create),
0000000000000000000000000000000000000000;;			makeHandler("c", true, Create),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			operation Operation
0000000000000000000000000000000000000000;;			chain     chainAdmissionHandler
0000000000000000000000000000000000000000;;			expected  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "all handle",
0000000000000000000000000000000000000000;;				operation: Create,
0000000000000000000000000000000000000000;;				expected:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "none handle",
0000000000000000000000000000000000000000;;				operation: Connect,
0000000000000000000000000000000000000000;;				expected:  false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "some handle",
0000000000000000000000000000000000000000;;				operation: Delete,
0000000000000000000000000000000000000000;;				expected:  true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			handles := chain.Handles(test.operation)
0000000000000000000000000000000000000000;;			if handles != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected handles result. Expected: %v. Actual: %v", test.expected, handles)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
