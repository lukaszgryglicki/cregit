0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
44b569512d482b102387b2cf47ea8dcdededb4a9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package initializer_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission/initializer"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authorization/authorizer"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/informers"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestWantsAuthorizer ensures that the authorizer is injected
0000000000000000000000000000000000000000;;	// when the WantsAuthorizer interface is implemented by a plugin.
0000000000000000000000000000000000000000;;	func TestWantsAuthorizer(t *testing.T) {
0000000000000000000000000000000000000000;;		target, err := initializer.New(nil, nil, &TestAuthorizer{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected to create an instance of initializer but got an error = %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wantAuthorizerAdmission := &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;		target.Initialize(wantAuthorizerAdmission)
0000000000000000000000000000000000000000;;		if wantAuthorizerAdmission.auth == nil {
0000000000000000000000000000000000000000;;			t.Errorf("expected authorizer to be initialized but found nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestWantsExternalKubeClientSet ensures that the clienset is injected
0000000000000000000000000000000000000000;;	// when the WantsExternalKubeClientSet interface is implemented by a plugin.
0000000000000000000000000000000000000000;;	func TestWantsExternalKubeClientSet(t *testing.T) {
0000000000000000000000000000000000000000;;		cs := &fake.Clientset{}
0000000000000000000000000000000000000000;;		target, err := initializer.New(cs, nil, &TestAuthorizer{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected to create an instance of initializer but got an error = %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wantExternalKubeClientSet := &WantExternalKubeClientSet{}
0000000000000000000000000000000000000000;;		target.Initialize(wantExternalKubeClientSet)
0000000000000000000000000000000000000000;;		if wantExternalKubeClientSet.cs != cs {
0000000000000000000000000000000000000000;;			t.Errorf("expected clientset to be initialized")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestWantsExternalKubeInformerFactory ensures that the informer factory is injected
0000000000000000000000000000000000000000;;	// when the WantsExternalKubeInformerFactory interface is implemented by a plugin.
0000000000000000000000000000000000000000;;	func TestWantsExternalKubeInformerFactory(t *testing.T) {
0000000000000000000000000000000000000000;;		cs := &fake.Clientset{}
0000000000000000000000000000000000000000;;		sf := informers.NewSharedInformerFactory(cs, time.Duration(1)*time.Second)
0000000000000000000000000000000000000000;;		target, err := initializer.New(cs, sf, &TestAuthorizer{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected to create an instance of initializer but got an error = %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wantExternalKubeInformerFactory := &WantExternalKubeInformerFactory{}
0000000000000000000000000000000000000000;;		target.Initialize(wantExternalKubeInformerFactory)
0000000000000000000000000000000000000000;;		if wantExternalKubeInformerFactory.sf != sf {
0000000000000000000000000000000000000000;;			t.Errorf("expected informer factory to be initialized")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantExternalKubeInformerFactory is a test stub that fulfills the WantsExternalKubeInformerFactory interface
0000000000000000000000000000000000000000;;	type WantExternalKubeInformerFactory struct {
0000000000000000000000000000000000000000;;		sf informers.SharedInformerFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeInformerFactory) SetExternalKubeInformerFactory(sf informers.SharedInformerFactory) {
0000000000000000000000000000000000000000;;		self.sf = sf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeInformerFactory) Admit(a admission.Attributes) error { return nil }
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeInformerFactory) Handles(o admission.Operation) bool { return false }
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeInformerFactory) Validate() error                    { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.Interface = &WantExternalKubeInformerFactory{}
0000000000000000000000000000000000000000;;	var _ initializer.WantsExternalKubeInformerFactory = &WantExternalKubeInformerFactory{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantExternalKubeClientSet is a test stub that fulfills the WantsExternalKubeClientSet interface
0000000000000000000000000000000000000000;;	type WantExternalKubeClientSet struct {
0000000000000000000000000000000000000000;;		cs kubernetes.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeClientSet) SetExternalKubeClientSet(cs kubernetes.Interface) { self.cs = cs }
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeClientSet) Admit(a admission.Attributes) error               { return nil }
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeClientSet) Handles(o admission.Operation) bool               { return false }
0000000000000000000000000000000000000000;;	func (self *WantExternalKubeClientSet) Validate() error                                  { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.Interface = &WantExternalKubeClientSet{}
0000000000000000000000000000000000000000;;	var _ initializer.WantsExternalKubeClientSet = &WantExternalKubeClientSet{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WantAuthorizerAdmission is a test stub that fulfills the WantsAuthorizer interface.
0000000000000000000000000000000000000000;;	type WantAuthorizerAdmission struct {
0000000000000000000000000000000000000000;;		auth authorizer.Authorizer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (self *WantAuthorizerAdmission) SetAuthorizer(a authorizer.Authorizer) { self.auth = a }
0000000000000000000000000000000000000000;;	func (self *WantAuthorizerAdmission) Admit(a admission.Attributes) error    { return nil }
0000000000000000000000000000000000000000;;	func (self *WantAuthorizerAdmission) Handles(o admission.Operation) bool    { return false }
0000000000000000000000000000000000000000;;	func (self *WantAuthorizerAdmission) Validate() error                       { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ admission.Interface = &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;	var _ initializer.WantsAuthorizer = &WantAuthorizerAdmission{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAuthorizer is a test stub for testing that fulfills the authorizer interface.
0000000000000000000000000000000000000000;;	type TestAuthorizer struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *TestAuthorizer) Authorize(a authorizer.Attributes) (authorized bool, reason string, err error) {
0000000000000000000000000000000000000000;;		return false, "", nil
0000000000000000000000000000000000000000;;	}
