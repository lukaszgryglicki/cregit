0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
45fb76a09e08545a2832d788e4834004315e297e;pkg/admission/attributes.go[pkg/admission/attributes.go][staging/src/k8s.io/apiserver/pkg/admission/attributes.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type attributesRecord struct {
0000000000000000000000000000000000000000;;		kind        schema.GroupVersionKind
0000000000000000000000000000000000000000;;		namespace   string
0000000000000000000000000000000000000000;;		name        string
0000000000000000000000000000000000000000;;		resource    schema.GroupVersionResource
0000000000000000000000000000000000000000;;		subresource string
0000000000000000000000000000000000000000;;		operation   Operation
0000000000000000000000000000000000000000;;		object      runtime.Object
0000000000000000000000000000000000000000;;		oldObject   runtime.Object
0000000000000000000000000000000000000000;;		userInfo    user.Info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAttributesRecord(object runtime.Object, oldObject runtime.Object, kind schema.GroupVersionKind, namespace, name string, resource schema.GroupVersionResource, subresource string, operation Operation, userInfo user.Info) Attributes {
0000000000000000000000000000000000000000;;		return &attributesRecord{
0000000000000000000000000000000000000000;;			kind:        kind,
0000000000000000000000000000000000000000;;			namespace:   namespace,
0000000000000000000000000000000000000000;;			name:        name,
0000000000000000000000000000000000000000;;			resource:    resource,
0000000000000000000000000000000000000000;;			subresource: subresource,
0000000000000000000000000000000000000000;;			operation:   operation,
0000000000000000000000000000000000000000;;			object:      object,
0000000000000000000000000000000000000000;;			oldObject:   oldObject,
0000000000000000000000000000000000000000;;			userInfo:    userInfo,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return record.kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetNamespace() string {
0000000000000000000000000000000000000000;;		return record.namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetName() string {
0000000000000000000000000000000000000000;;		return record.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetResource() schema.GroupVersionResource {
0000000000000000000000000000000000000000;;		return record.resource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetSubresource() string {
0000000000000000000000000000000000000000;;		return record.subresource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetOperation() Operation {
0000000000000000000000000000000000000000;;		return record.operation
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetObject() runtime.Object {
0000000000000000000000000000000000000000;;		return record.object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetOldObject() runtime.Object {
0000000000000000000000000000000000000000;;		return record.oldObject
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (record *attributesRecord) GetUserInfo() user.Info {
0000000000000000000000000000000000000000;;		return record.userInfo
0000000000000000000000000000000000000000;;	}
