0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
45fb76a09e08545a2832d788e4834004315e297e;pkg/admission/chain.go[pkg/admission/chain.go][staging/src/k8s.io/apiserver/pkg/admission/chain.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// chainAdmissionHandler is an instance of admission.Interface that performs admission control using a chain of admission handlers
0000000000000000000000000000000000000000;;	type chainAdmissionHandler []Interface
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewChainHandler creates a new chain handler from an array of handlers. Used for testing.
0000000000000000000000000000000000000000;;	func NewChainHandler(handlers ...Interface) Interface {
0000000000000000000000000000000000000000;;		return chainAdmissionHandler(handlers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admit performs an admission control check using a chain of handlers, and returns immediately on first error
0000000000000000000000000000000000000000;;	func (admissionHandler chainAdmissionHandler) Admit(a Attributes) error {
0000000000000000000000000000000000000000;;		for _, handler := range admissionHandler {
0000000000000000000000000000000000000000;;			if !handler.Handles(a.GetOperation()) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			err := handler.Admit(a)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handles will return true if any of the handlers handles the given operation
0000000000000000000000000000000000000000;;	func (admissionHandler chainAdmissionHandler) Handles(operation Operation) bool {
0000000000000000000000000000000000000000;;		for _, handler := range admissionHandler {
0000000000000000000000000000000000000000;;			if handler.Handles(operation) {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
