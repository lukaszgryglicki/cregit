0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
80eac196533012682beef837d560841c4d20ce54;pkg/admission/errors.go[pkg/admission/errors.go][staging/src/k8s.io/apiserver/pkg/admission/errors.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		apierrors "k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func extractResourceName(a Attributes) (name string, resource schema.GroupResource, err error) {
0000000000000000000000000000000000000000;;		name = "Unknown"
0000000000000000000000000000000000000000;;		resource = a.GetResource().GroupResource()
0000000000000000000000000000000000000000;;		obj := a.GetObject()
0000000000000000000000000000000000000000;;		if obj != nil {
0000000000000000000000000000000000000000;;			accessor, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", schema.GroupResource{}, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// this is necessary because name object name generation has not occurred yet
0000000000000000000000000000000000000000;;			if len(accessor.GetName()) > 0 {
0000000000000000000000000000000000000000;;				name = accessor.GetName()
0000000000000000000000000000000000000000;;			} else if len(accessor.GetGenerateName()) > 0 {
0000000000000000000000000000000000000000;;				name = accessor.GetGenerateName()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return name, resource, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForbidden is a utility function to return a well-formatted admission control error response
0000000000000000000000000000000000000000;;	func NewForbidden(a Attributes, internalError error) error {
0000000000000000000000000000000000000000;;		// do not double wrap an error of same type
0000000000000000000000000000000000000000;;		if apierrors.IsForbidden(internalError) {
0000000000000000000000000000000000000000;;			return internalError
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		name, resource, err := extractResourceName(a)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return apierrors.NewInternalError(utilerrors.NewAggregate([]error{internalError, err}))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return apierrors.NewForbidden(resource, name, internalError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewNotFound is a utility function to return a well-formatted admission control error response
0000000000000000000000000000000000000000;;	func NewNotFound(a Attributes) error {
0000000000000000000000000000000000000000;;		name, resource, err := extractResourceName(a)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return apierrors.NewInternalError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return apierrors.NewNotFound(resource, name)
0000000000000000000000000000000000000000;;	}
