0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c6ef654a672947e35901b74389390f9adb2cd3b2;pkg/admission/config.go[pkg/admission/config.go][staging/src/k8s.io/apiserver/pkg/admission/config.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/announced"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/apiserver"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/apiserver/install"
0000000000000000000000000000000000000000;;		apiserverv1alpha1 "k8s.io/apiserver/pkg/apis/apiserver/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		groupFactoryRegistry = make(announced.APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		registry             = registered.NewOrDie(os.Getenv("KUBE_API_VERSIONS"))
0000000000000000000000000000000000000000;;		scheme               = runtime.NewScheme()
0000000000000000000000000000000000000000;;		codecs               = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		install.Install(groupFactoryRegistry, registry, scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeAbs(path, base string) (string, error) {
0000000000000000000000000000000000000000;;		if filepath.IsAbs(path) {
0000000000000000000000000000000000000000;;			return path, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(base) == 0 || base == "." {
0000000000000000000000000000000000000000;;			cwd, err := os.Getwd()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			base = cwd
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filepath.Join(base, path), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadAdmissionConfiguration reads the admission configuration at the specified path.
0000000000000000000000000000000000000000;;	// It returns the loaded admission configuration if the input file aligns with the required syntax.
0000000000000000000000000000000000000000;;	// If it does not align with the provided syntax, it returns a default configuration for the enumerated
0000000000000000000000000000000000000000;;	// set of pluginNames whose config location references the specified configFilePath.
0000000000000000000000000000000000000000;;	// It does this to preserve backward compatibility when admission control files were opaque.
0000000000000000000000000000000000000000;;	// It returns an error if the file did not exist.
0000000000000000000000000000000000000000;;	func ReadAdmissionConfiguration(pluginNames []string, configFilePath string) (ConfigProvider, error) {
0000000000000000000000000000000000000000;;		if configFilePath == "" {
0000000000000000000000000000000000000000;;			return configProvider{config: &apiserver.AdmissionConfiguration{}}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// a file was provided, so we just read it.
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadFile(configFilePath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to read admission control configuration from %q [%v]", configFilePath, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoder := codecs.UniversalDecoder()
0000000000000000000000000000000000000000;;		decodedObj, err := runtime.Decode(decoder, data)
0000000000000000000000000000000000000000;;		// we were able to decode the file successfully
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			decodedConfig, ok := decodedObj.(*apiserver.AdmissionConfiguration)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unexpected type: %T", decodedObj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			baseDir := path.Dir(configFilePath)
0000000000000000000000000000000000000000;;			for i := range decodedConfig.Plugins {
0000000000000000000000000000000000000000;;				if decodedConfig.Plugins[i].Path == "" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// we update relative file paths to absolute paths
0000000000000000000000000000000000000000;;				absPath, err := makeAbs(decodedConfig.Plugins[i].Path, baseDir)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				decodedConfig.Plugins[i].Path = absPath
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return configProvider{config: decodedConfig}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// we got an error where the decode wasn't related to a missing type
0000000000000000000000000000000000000000;;		if !(runtime.IsMissingVersion(err) || runtime.IsMissingKind(err) || runtime.IsNotRegisteredError(err)) {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// convert the legacy format to the new admission control format
0000000000000000000000000000000000000000;;		// in order to preserve backwards compatibility, we set plugins that
0000000000000000000000000000000000000000;;		// previously read input from a non-versioned file configuration to the
0000000000000000000000000000000000000000;;		// current input file.
0000000000000000000000000000000000000000;;		legacyPluginsWithUnversionedConfig := sets.NewString("ImagePolicyWebhook", "PodNodeSelector")
0000000000000000000000000000000000000000;;		externalConfig := &apiserverv1alpha1.AdmissionConfiguration{}
0000000000000000000000000000000000000000;;		for _, pluginName := range pluginNames {
0000000000000000000000000000000000000000;;			if legacyPluginsWithUnversionedConfig.Has(pluginName) {
0000000000000000000000000000000000000000;;				externalConfig.Plugins = append(externalConfig.Plugins,
0000000000000000000000000000000000000000;;					apiserverv1alpha1.AdmissionPluginConfiguration{
0000000000000000000000000000000000000000;;						Name: pluginName,
0000000000000000000000000000000000000000;;						Path: configFilePath})
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scheme.Default(externalConfig)
0000000000000000000000000000000000000000;;		internalConfig := &apiserver.AdmissionConfiguration{}
0000000000000000000000000000000000000000;;		if err := scheme.Convert(externalConfig, internalConfig, nil); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return configProvider{config: internalConfig}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configProvider struct {
0000000000000000000000000000000000000000;;		config *apiserver.AdmissionConfiguration
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAdmissionPluginConfigurationFor returns a reader that holds the admission plugin configuration.
0000000000000000000000000000000000000000;;	func GetAdmissionPluginConfigurationFor(pluginCfg apiserver.AdmissionPluginConfiguration) (io.Reader, error) {
0000000000000000000000000000000000000000;;		// if there is nothing nested in the object, we return the named location
0000000000000000000000000000000000000000;;		obj := pluginCfg.Configuration
0000000000000000000000000000000000000000;;		if obj != nil {
0000000000000000000000000000000000000000;;			// serialize the configuration and build a reader for it
0000000000000000000000000000000000000000;;			content, err := writeYAML(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return bytes.NewBuffer(content), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// there is nothing nested, so we delegate to path
0000000000000000000000000000000000000000;;		if pluginCfg.Path != "" {
0000000000000000000000000000000000000000;;			content, err := ioutil.ReadFile(pluginCfg.Path)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				glog.Fatalf("Couldn't open admission plugin configuration %s: %#v", pluginCfg.Path, err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return bytes.NewBuffer(content), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// there is no special config at all
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetAdmissionPluginConfiguration takes the admission configuration and returns a reader
0000000000000000000000000000000000000000;;	// for the specified plugin.  If no specific configuration is present, we return a nil reader.
0000000000000000000000000000000000000000;;	func (p configProvider) ConfigFor(pluginName string) (io.Reader, error) {
0000000000000000000000000000000000000000;;		// there is no config, so there is no potential config
0000000000000000000000000000000000000000;;		if p.config == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// look for matching plugin and get configuration
0000000000000000000000000000000000000000;;		for _, pluginCfg := range p.config.Plugins {
0000000000000000000000000000000000000000;;			if pluginName != pluginCfg.Name {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pluginConfig, err := GetAdmissionPluginConfigurationFor(pluginCfg)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return pluginConfig, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// there is no registered config that matches on plugin name.
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// writeYAML writes the specified object to a byte array as yaml.
0000000000000000000000000000000000000000;;	func writeYAML(obj runtime.Object) ([]byte, error) {
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(codecs.LegacyCodec(), obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		content, err := yaml.JSONToYAML(json)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return content, err
0000000000000000000000000000000000000000;;	}
