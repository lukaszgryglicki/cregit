0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
45fb76a09e08545a2832d788e4834004315e297e;pkg/admission/interfaces.go[pkg/admission/interfaces.go][staging/src/k8s.io/apiserver/pkg/admission/interfaces.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Attributes is an interface used by AdmissionController to get information about a request
0000000000000000000000000000000000000000;;	// that is used to make an admission decision.
0000000000000000000000000000000000000000;;	type Attributes interface {
0000000000000000000000000000000000000000;;		// GetName returns the name of the object as presented in the request.  On a CREATE operation, the client
0000000000000000000000000000000000000000;;		// may omit name and rely on the server to generate the name.  If that is the case, this method will return
0000000000000000000000000000000000000000;;		// the empty string
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;		// GetNamespace is the namespace associated with the request (if any)
0000000000000000000000000000000000000000;;		GetNamespace() string
0000000000000000000000000000000000000000;;		// GetResource is the name of the resource being requested.  This is not the kind.  For example: pods
0000000000000000000000000000000000000000;;		GetResource() schema.GroupVersionResource
0000000000000000000000000000000000000000;;		// GetSubresource is the name of the subresource being requested.  This is a different resource, scoped to the parent resource, but it may have a different kind.
0000000000000000000000000000000000000000;;		// For instance, /pods has the resource "pods" and the kind "Pod", while /pods/foo/status has the resource "pods", the sub resource "status", and the kind "Pod"
0000000000000000000000000000000000000000;;		// (because status operates on pods). The binding resource for a pod though may be /pods/foo/binding, which has resource "pods", subresource "binding", and kind "Binding".
0000000000000000000000000000000000000000;;		GetSubresource() string
0000000000000000000000000000000000000000;;		// GetOperation is the operation being performed
0000000000000000000000000000000000000000;;		GetOperation() Operation
0000000000000000000000000000000000000000;;		// GetObject is the object from the incoming request prior to default values being applied
0000000000000000000000000000000000000000;;		GetObject() runtime.Object
0000000000000000000000000000000000000000;;		// GetOldObject is the existing object. Only populated for UPDATE requests.
0000000000000000000000000000000000000000;;		GetOldObject() runtime.Object
0000000000000000000000000000000000000000;;		// GetKind is the type of object being manipulated.  For example: Pod
0000000000000000000000000000000000000000;;		GetKind() schema.GroupVersionKind
0000000000000000000000000000000000000000;;		// GetUserInfo is information about the requesting user
0000000000000000000000000000000000000000;;		GetUserInfo() user.Info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface is an abstract, pluggable interface for Admission Control decisions.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		// Admit makes an admission decision based on the request attributes
0000000000000000000000000000000000000000;;		Admit(a Attributes) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handles returns true if this admission controller can handle the given operation
0000000000000000000000000000000000000000;;		// where operation can be one of CREATE, UPDATE, DELETE, or CONNECT
0000000000000000000000000000000000000000;;		Handles(operation Operation) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation is the type of resource operation being checked for admission control
0000000000000000000000000000000000000000;;	type Operation string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		Create  Operation = "CREATE"
0000000000000000000000000000000000000000;;		Update  Operation = "UPDATE"
0000000000000000000000000000000000000000;;		Delete  Operation = "DELETE"
0000000000000000000000000000000000000000;;		Connect Operation = "CONNECT"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PluginInitializer is used for initialization of shareable resources between admission plugins.
0000000000000000000000000000000000000000;;	// After initialization the resources have to be set separately
0000000000000000000000000000000000000000;;	type PluginInitializer interface {
0000000000000000000000000000000000000000;;		Initialize(plugin Interface)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Validator holds Validate functions, which are responsible for validation of initialized shared resources
0000000000000000000000000000000000000000;;	// and should be implemented on admission plugins
0000000000000000000000000000000000000000;;	type Validator interface {
0000000000000000000000000000000000000000;;		Validate() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConfigProvider provides a way to get configuration for an admission plugin based on its name
0000000000000000000000000000000000000000;;	type ConfigProvider interface {
0000000000000000000000000000000000000000;;		ConfigFor(pluginName string) (io.Reader, error)
0000000000000000000000000000000000000000;;	}
