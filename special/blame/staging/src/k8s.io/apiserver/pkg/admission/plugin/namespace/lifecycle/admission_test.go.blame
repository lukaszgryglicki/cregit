0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
3f099cd43246053823a5a9ba8f6a059eb0989e3d;plugin/pkg/admission/namespace/lifecycle/admission_test.go[plugin/pkg/admission/namespace/lifecycle/admission_test.go][staging/src/k8s.io/apiserver/pkg/admission/plugin/namespace/lifecycle/admission_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package lifecycle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/admission"
0000000000000000000000000000000000000000;;		kubeadmission "k8s.io/apiserver/pkg/admission/initializer"
0000000000000000000000000000000000000000;;		informers "k8s.io/client-go/informers"
0000000000000000000000000000000000000000;;		clientset "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/fake"
0000000000000000000000000000000000000000;;		core "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newHandlerForTest returns a configured handler for testing.
0000000000000000000000000000000000000000;;	func newHandlerForTest(c clientset.Interface) (admission.Interface, informers.SharedInformerFactory, error) {
0000000000000000000000000000000000000000;;		return newHandlerForTestWithClock(c, clock.RealClock{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newHandlerForTestWithClock returns a configured handler for testing.
0000000000000000000000000000000000000000;;	func newHandlerForTestWithClock(c clientset.Interface, cacheClock clock.Clock) (admission.Interface, informers.SharedInformerFactory, error) {
0000000000000000000000000000000000000000;;		f := informers.NewSharedInformerFactory(c, 5*time.Minute)
0000000000000000000000000000000000000000;;		handler, err := newLifecycleWithClock(sets.NewString(metav1.NamespaceDefault, metav1.NamespaceSystem), cacheClock)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, f, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pluginInitializer, err := kubeadmission.New(c, f, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return handler, f, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pluginInitializer.Initialize(handler)
0000000000000000000000000000000000000000;;		err = admission.Validate(handler)
0000000000000000000000000000000000000000;;		return handler, f, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newMockClientForTest creates a mock client that returns a client configured for the specified list of namespaces with the specified phase.
0000000000000000000000000000000000000000;;	func newMockClientForTest(namespaces map[string]v1.NamespacePhase) *fake.Clientset {
0000000000000000000000000000000000000000;;		mockClient := &fake.Clientset{}
0000000000000000000000000000000000000000;;		mockClient.AddReactor("list", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			namespaceList := &v1.NamespaceList{
0000000000000000000000000000000000000000;;				ListMeta: metav1.ListMeta{
0000000000000000000000000000000000000000;;					ResourceVersion: fmt.Sprintf("%d", len(namespaces)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			index := 0
0000000000000000000000000000000000000000;;			for name, phase := range namespaces {
0000000000000000000000000000000000000000;;				namespaceList.Items = append(namespaceList.Items, v1.Namespace{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;						Name:            name,
0000000000000000000000000000000000000000;;						ResourceVersion: fmt.Sprintf("%d", index),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Status: v1.NamespaceStatus{
0000000000000000000000000000000000000000;;						Phase: phase,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				})
0000000000000000000000000000000000000000;;				index++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return true, namespaceList, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return mockClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newPod returns a new pod for the specified namespace
0000000000000000000000000000000000000000;;	func newPod(namespace string) v1.Pod {
0000000000000000000000000000000000000000;;		return v1.Pod{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: "123", Namespace: namespace},
0000000000000000000000000000000000000000;;			Spec: v1.PodSpec{
0000000000000000000000000000000000000000;;				Volumes:    []v1.Volume{{Name: "vol"}},
0000000000000000000000000000000000000000;;				Containers: []v1.Container{{Name: "ctr", Image: "image"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAccessReviewCheckOnMissingNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest(map[string]v1.NamespacePhase{})
0000000000000000000000000000000000000000;;		mockClient.AddReactor("get", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, fmt.Errorf("nope, out of luck")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(nil, nil, schema.GroupVersionKind{Group: "authorization.k8s.io", Version: "v1", Kind: "LocalSubjectAccesReview"}, namespace, "", schema.GroupVersionResource{Group: "authorization.k8s.io", Version: "v1", Resource: "localsubjectaccessreviews"}, "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmissionNamespaceDoesNotExist verifies pod is not admitted if namespace does not exist.
0000000000000000000000000000000000000000;;	func TestAdmissionNamespaceDoesNotExist(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest(map[string]v1.NamespacePhase{})
0000000000000000000000000000000000000000;;		mockClient.AddReactor("get", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			return true, nil, fmt.Errorf("nope, out of luck")
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			actions := ""
0000000000000000000000000000000000000000;;			for _, action := range mockClient.Actions() {
0000000000000000000000000000000000000000;;				actions = actions + action.GetVerb() + ":" + action.GetResource().Resource + ":" + action.GetSubresource() + ", "
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Errorf("expected error returned from admission handler: %v", actions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmissionNamespaceActive verifies a resource is admitted when the namespace is active.
0000000000000000000000000000000000000000;;	func TestAdmissionNamespaceActive(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest(map[string]v1.NamespacePhase{
0000000000000000000000000000000000000000;;			namespace: v1.NamespaceActive,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error returned from admission handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmissionNamespaceTerminating verifies a resource is not created when the namespace is active.
0000000000000000000000000000000000000000;;	func TestAdmissionNamespaceTerminating(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest(map[string]v1.NamespacePhase{
0000000000000000000000000000000000000000;;			namespace: v1.NamespaceTerminating,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTest(mockClient)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		// verify create operations in the namespace cause an error
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error rejecting creates in a namespace when it is terminating")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify update operations in the namespace can proceed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Update, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error returned from admission handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify delete operations in the namespace can proceed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(nil, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Delete, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error returned from admission handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify delete of namespace default can never proceed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(nil, nil, v1.SchemeGroupVersion.WithKind("Namespace").GroupKind().WithVersion("version"), "", metav1.NamespaceDefault, v1.Resource("namespaces").WithVersion("version"), "", admission.Delete, nil))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected an error that this namespace can never be deleted")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify delete of namespace other than default can proceed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(nil, nil, v1.SchemeGroupVersion.WithKind("Namespace").GroupKind().WithVersion("version"), "", "other", v1.Resource("namespaces").WithVersion("version"), "", admission.Delete, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Did not expect an error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAdmissionNamespaceForceLiveLookup verifies live lookups are done after deleting a namespace
0000000000000000000000000000000000000000;;	func TestAdmissionNamespaceForceLiveLookup(t *testing.T) {
0000000000000000000000000000000000000000;;		namespace := "test"
0000000000000000000000000000000000000000;;		getCalls := int64(0)
0000000000000000000000000000000000000000;;		phases := map[string]v1.NamespacePhase{namespace: v1.NamespaceActive}
0000000000000000000000000000000000000000;;		mockClient := newMockClientForTest(phases)
0000000000000000000000000000000000000000;;		mockClient.AddReactor("get", "namespaces", func(action core.Action) (bool, runtime.Object, error) {
0000000000000000000000000000000000000000;;			getCalls++
0000000000000000000000000000000000000000;;			return true, &v1.Namespace{ObjectMeta: metav1.ObjectMeta{Name: namespace}, Status: v1.NamespaceStatus{Phase: phases[namespace]}}, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler, informerFactory, err := newHandlerForTestWithClock(mockClient, fakeClock)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error initializing handler: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		informerFactory.Start(wait.NeverStop)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := newPod(namespace)
0000000000000000000000000000000000000000;;		// verify create operations in the namespace is allowed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error rejecting creates in an active namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if getCalls != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no live lookups of the namespace, got %d", getCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getCalls = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify delete of namespace can proceed
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(nil, nil, v1.SchemeGroupVersion.WithKind("Namespace").GroupKind().WithVersion("version"), "", namespace, v1.Resource("namespaces").WithVersion("version"), "", admission.Delete, nil))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected namespace deletion to be allowed")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if getCalls != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no live lookups of the namespace, got %d", getCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getCalls = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// simulate the phase changing
0000000000000000000000000000000000000000;;		phases[namespace] = v1.NamespaceTerminating
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify create operations in the namespace cause an error
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error rejecting creates in a namespace right after deleting it")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if getCalls != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a live lookup of the namespace at t=0, got %d", getCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getCalls = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ensure the live lookup is still forced up to forceLiveLookupTTL
0000000000000000000000000000000000000000;;		fakeClock.Step(forceLiveLookupTTL)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify create operations in the namespace cause an error
0000000000000000000000000000000000000000;;		err = handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Expected error rejecting creates in a namespace right after deleting it")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if getCalls != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected a live lookup of the namespace at t=forceLiveLookupTTL, got %d", getCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getCalls = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ensure the live lookup expires
0000000000000000000000000000000000000000;;		fakeClock.Step(time.Millisecond)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify create operations in the namespace don't force a live lookup after the timeout
0000000000000000000000000000000000000000;;		handler.Admit(admission.NewAttributesRecord(&pod, nil, v1.SchemeGroupVersion.WithKind("Pod").GroupKind().WithVersion("version"), pod.Namespace, pod.Name, v1.Resource("pods").WithVersion("version"), "", admission.Create, nil))
0000000000000000000000000000000000000000;;		if getCalls != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected no live lookup of the namespace at t=forceLiveLookupTTL+1ms, got %d", getCalls)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		getCalls = 0
0000000000000000000000000000000000000000;;	}
