0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c6ef654a672947e35901b74389390f9adb2cd3b2;pkg/admission/config_test.go[pkg/admission/config_test.go][staging/src/k8s.io/apiserver/pkg/admission/config_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package admission
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/apiserver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadAdmissionConfiguration(t *testing.T) {
0000000000000000000000000000000000000000;;		// create a place holder file to hold per test config
0000000000000000000000000000000000000000;;		configFile, err := ioutil.TempFile("", "admission-plugin-config")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = configFile.Close(); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		configFileName := configFile.Name()
0000000000000000000000000000000000000000;;		// the location that will be fixed up to be relative to the test config file.
0000000000000000000000000000000000000000;;		imagePolicyWebhookFile, err := makeAbs("image-policy-webhook.json", os.TempDir())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// individual test scenarios
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			ConfigBody              string
0000000000000000000000000000000000000000;;			ExpectedAdmissionConfig *apiserver.AdmissionConfiguration
0000000000000000000000000000000000000000;;			PluginNames             []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"v1Alpha1 configuration - path fixup": {
0000000000000000000000000000000000000000;;				ConfigBody: `{
0000000000000000000000000000000000000000;;	"apiVersion": "apiserver.k8s.io/v1alpha1",
0000000000000000000000000000000000000000;;	"kind": "AdmissionConfiguration",
0000000000000000000000000000000000000000;;	"plugins": [
0000000000000000000000000000000000000000;;	  {"name": "ImagePolicyWebhook", "path": "image-policy-webhook.json"},
0000000000000000000000000000000000000000;;	  {"name": "ResourceQuota"}
0000000000000000000000000000000000000000;;	]}`,
0000000000000000000000000000000000000000;;				ExpectedAdmissionConfig: &apiserver.AdmissionConfiguration{
0000000000000000000000000000000000000000;;					Plugins: []apiserver.AdmissionPluginConfiguration{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "ImagePolicyWebhook",
0000000000000000000000000000000000000000;;							Path: imagePolicyWebhookFile,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "ResourceQuota",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PluginNames: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"v1Alpha1 configuration - abspath": {
0000000000000000000000000000000000000000;;				ConfigBody: `{
0000000000000000000000000000000000000000;;	"apiVersion": "apiserver.k8s.io/v1alpha1",
0000000000000000000000000000000000000000;;	"kind": "AdmissionConfiguration",
0000000000000000000000000000000000000000;;	"plugins": [
0000000000000000000000000000000000000000;;	  {"name": "ImagePolicyWebhook", "path": "/tmp/image-policy-webhook.json"},
0000000000000000000000000000000000000000;;	  {"name": "ResourceQuota"}
0000000000000000000000000000000000000000;;	]}`,
0000000000000000000000000000000000000000;;				ExpectedAdmissionConfig: &apiserver.AdmissionConfiguration{
0000000000000000000000000000000000000000;;					Plugins: []apiserver.AdmissionPluginConfiguration{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "ImagePolicyWebhook",
0000000000000000000000000000000000000000;;							Path: "/tmp/image-policy-webhook.json",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "ResourceQuota",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PluginNames: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"legacy configuration with using legacy plugins": {
0000000000000000000000000000000000000000;;				ConfigBody: `{
0000000000000000000000000000000000000000;;	"imagePolicy": {
0000000000000000000000000000000000000000;;	  "kubeConfigFile": "/home/user/.kube/config",
0000000000000000000000000000000000000000;;	  "allowTTL": 30,
0000000000000000000000000000000000000000;;	  "denyTTL": 30,
0000000000000000000000000000000000000000;;	  "retryBackoff": 500,
0000000000000000000000000000000000000000;;	  "defaultAllow": true
0000000000000000000000000000000000000000;;	},
0000000000000000000000000000000000000000;;	"podNodeSelectorPluginConfig": {
0000000000000000000000000000000000000000;;	  "clusterDefaultNodeSelector": ""
0000000000000000000000000000000000000000;;	}  
0000000000000000000000000000000000000000;;	}`,
0000000000000000000000000000000000000000;;				ExpectedAdmissionConfig: &apiserver.AdmissionConfiguration{
0000000000000000000000000000000000000000;;					Plugins: []apiserver.AdmissionPluginConfiguration{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "ImagePolicyWebhook",
0000000000000000000000000000000000000000;;							Path: configFileName,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "PodNodeSelector",
0000000000000000000000000000000000000000;;							Path: configFileName,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				PluginNames: []string{"ImagePolicyWebhook", "PodNodeSelector"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"legacy configuration not using legacy plugins": {
0000000000000000000000000000000000000000;;				ConfigBody: `{
0000000000000000000000000000000000000000;;	"imagePolicy": {
0000000000000000000000000000000000000000;;	  "kubeConfigFile": "/home/user/.kube/config",
0000000000000000000000000000000000000000;;	  "allowTTL": 30,
0000000000000000000000000000000000000000;;	  "denyTTL": 30,
0000000000000000000000000000000000000000;;	  "retryBackoff": 500,
0000000000000000000000000000000000000000;;	  "defaultAllow": true
0000000000000000000000000000000000000000;;	},
0000000000000000000000000000000000000000;;	"podNodeSelectorPluginConfig": {
0000000000000000000000000000000000000000;;	  "clusterDefaultNodeSelector": ""
0000000000000000000000000000000000000000;;	}  
0000000000000000000000000000000000000000;;	}`,
0000000000000000000000000000000000000000;;				ExpectedAdmissionConfig: &apiserver.AdmissionConfiguration{},
0000000000000000000000000000000000000000;;				PluginNames:             []string{"NamespaceLifecycle", "InitialResources"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for testName, testCase := range testCases {
0000000000000000000000000000000000000000;;			if err = ioutil.WriteFile(configFileName, []byte(testCase.ConfigBody), 0644); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected err writing temp file: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			config, err := ReadAdmissionConfiguration(testCase.PluginNames, configFileName)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(config.(configProvider).config, testCase.ExpectedAdmissionConfig) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected:\n\t%#v\nGot:\n\t%#v", testName, testCase.ExpectedAdmissionConfig, config.(configProvider).config)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
