0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
016183e25f216f13e7a44f2da39f03fee169088e;pkg/registry/generic/storage_decorator.go[pkg/registry/generic/storage_decorator.go][staging/src/k8s.io/apiserver/pkg/registry/generic/storage_decorator.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend/factory"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageDecorator is a function signature for producing a storage.Interface
0000000000000000000000000000000000000000;;	// and an associated DestroyFunc from given parameters.
0000000000000000000000000000000000000000;;	// A zero capacity means to disable caching, nil means to use a default.
0000000000000000000000000000000000000000;;	type StorageDecorator func(
0000000000000000000000000000000000000000;;		copier runtime.ObjectCopier,
0000000000000000000000000000000000000000;;		config *storagebackend.Config,
0000000000000000000000000000000000000000;;		capacity *int,
0000000000000000000000000000000000000000;;		objectType runtime.Object,
0000000000000000000000000000000000000000;;		resourcePrefix string,
0000000000000000000000000000000000000000;;		keyFunc func(obj runtime.Object) (string, error),
0000000000000000000000000000000000000000;;		newListFunc func() runtime.Object,
0000000000000000000000000000000000000000;;		getAttrsFunc storage.AttrFunc,
0000000000000000000000000000000000000000;;		trigger storage.TriggerPublisherFunc) (storage.Interface, factory.DestroyFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UndecoratedStorage returns the given a new storage from the given config
0000000000000000000000000000000000000000;;	// without any decoration.
0000000000000000000000000000000000000000;;	func UndecoratedStorage(
0000000000000000000000000000000000000000;;		copier runtime.ObjectCopier,
0000000000000000000000000000000000000000;;		config *storagebackend.Config,
0000000000000000000000000000000000000000;;		capacity *int,
0000000000000000000000000000000000000000;;		objectType runtime.Object,
0000000000000000000000000000000000000000;;		resourcePrefix string,
0000000000000000000000000000000000000000;;		keyFunc func(obj runtime.Object) (string, error),
0000000000000000000000000000000000000000;;		newListFunc func() runtime.Object,
0000000000000000000000000000000000000000;;		getAttrsFunc storage.AttrFunc,
0000000000000000000000000000000000000000;;		trigger storage.TriggerPublisherFunc) (storage.Interface, factory.DestroyFunc) {
0000000000000000000000000000000000000000;;		return NewRawStorage(config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRawStorage creates the low level kv storage. This is a work-around for current
0000000000000000000000000000000000000000;;	// two layer of same storage interface.
0000000000000000000000000000000000000000;;	// TODO: Once cacher is enabled on all registries (event registry is special), we will remove this method.
0000000000000000000000000000000000000000;;	func NewRawStorage(config *storagebackend.Config) (storage.Interface, factory.DestroyFunc) {
0000000000000000000000000000000000000000;;		s, d, err := factory.Create(*config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Fatalf("Unable to create storage backend: config (%v), err (%v)", config, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, d
0000000000000000000000000000000000000000;;	}
