0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
016183e25f216f13e7a44f2da39f03fee169088e;pkg/registry/generic/etcd/storage_factory.go[pkg/registry/generic/etcd/storage_factory.go][staging/src/k8s.io/apiserver/pkg/registry/generic/registry/storage_factory.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage"
0000000000000000000000000000000000000000;;		etcdstorage "k8s.io/apiserver/pkg/storage/etcd"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/storage/storagebackend/factory"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creates a cacher based given storageConfig.
0000000000000000000000000000000000000000;;	func StorageWithCacher(defaultCapacity int) generic.StorageDecorator {
0000000000000000000000000000000000000000;;		return func(
0000000000000000000000000000000000000000;;			copier runtime.ObjectCopier,
0000000000000000000000000000000000000000;;			storageConfig *storagebackend.Config,
0000000000000000000000000000000000000000;;			requestedSize *int,
0000000000000000000000000000000000000000;;			objectType runtime.Object,
0000000000000000000000000000000000000000;;			resourcePrefix string,
0000000000000000000000000000000000000000;;			keyFunc func(obj runtime.Object) (string, error),
0000000000000000000000000000000000000000;;			newListFunc func() runtime.Object,
0000000000000000000000000000000000000000;;			getAttrsFunc storage.AttrFunc,
0000000000000000000000000000000000000000;;			triggerFunc storage.TriggerPublisherFunc) (storage.Interface, factory.DestroyFunc) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			capacity := defaultCapacity
0000000000000000000000000000000000000000;;			if requestedSize != nil && *requestedSize == 0 {
0000000000000000000000000000000000000000;;				panic("StorageWithCacher must not be called with zero cache size")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if requestedSize != nil {
0000000000000000000000000000000000000000;;				capacity = *requestedSize
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			s, d := generic.NewRawStorage(storageConfig)
0000000000000000000000000000000000000000;;			// TODO: we would change this later to make storage always have cacher and hide low level KV layer inside.
0000000000000000000000000000000000000000;;			// Currently it has two layers of same storage interface -- cacher and low level kv.
0000000000000000000000000000000000000000;;			cacherConfig := storage.CacherConfig{
0000000000000000000000000000000000000000;;				CacheCapacity:        capacity,
0000000000000000000000000000000000000000;;				Storage:              s,
0000000000000000000000000000000000000000;;				Versioner:            etcdstorage.APIObjectVersioner{},
0000000000000000000000000000000000000000;;				Copier:               copier,
0000000000000000000000000000000000000000;;				Type:                 objectType,
0000000000000000000000000000000000000000;;				ResourcePrefix:       resourcePrefix,
0000000000000000000000000000000000000000;;				KeyFunc:              keyFunc,
0000000000000000000000000000000000000000;;				NewListFunc:          newListFunc,
0000000000000000000000000000000000000000;;				GetAttrsFunc:         getAttrsFunc,
0000000000000000000000000000000000000000;;				TriggerPublisherFunc: triggerFunc,
0000000000000000000000000000000000000000;;				Codec:                storageConfig.Codec,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cacher := storage.NewCacherFromConfig(cacherConfig)
0000000000000000000000000000000000000000;;			destroyFunc := func() {
0000000000000000000000000000000000000000;;				cacher.Stop()
0000000000000000000000000000000000000000;;				d()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return cacher, destroyFunc
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
