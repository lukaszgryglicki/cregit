0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
5c072ec1f8c80fba2afff1a962fe90efcf1649e7;pkg/api/rest/meta_test.go[pkg/api/rest/meta_test.go][staging/src/k8s.io/apiserver/pkg/registry/rest/meta_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/uuid"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/example"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestFillObjectMetaSystemFields validates that system populated fields are set on an object
0000000000000000000000000000000000000000;;	func TestFillObjectMetaSystemFields(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		resource := metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		FillObjectMetaSystemFields(ctx, &resource)
0000000000000000000000000000000000000000;;		if resource.CreationTimestamp.Time.IsZero() {
0000000000000000000000000000000000000000;;			t.Errorf("resource.CreationTimestamp is zero")
0000000000000000000000000000000000000000;;		} else if len(resource.UID) == 0 {
0000000000000000000000000000000000000000;;			t.Errorf("resource.UID missing")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// verify we can inject a UID
0000000000000000000000000000000000000000;;		uid := uuid.NewUUID()
0000000000000000000000000000000000000000;;		ctx = genericapirequest.WithUID(ctx, uid)
0000000000000000000000000000000000000000;;		resource = metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		FillObjectMetaSystemFields(ctx, &resource)
0000000000000000000000000000000000000000;;		if resource.UID != uid {
0000000000000000000000000000000000000000;;			t.Errorf("resource.UID expected: %v, actual: %v", uid, resource.UID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestHasObjectMetaSystemFieldValues validates that true is returned if and only if all fields are populated
0000000000000000000000000000000000000000;;	func TestHasObjectMetaSystemFieldValues(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		resource := metav1.ObjectMeta{}
0000000000000000000000000000000000000000;;		objMeta, err := meta.Accessor(&resource)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if metav1.HasObjectMetaSystemFieldValues(objMeta) {
0000000000000000000000000000000000000000;;			t.Errorf("the resource does not have all fields yet populated, but incorrectly reports it does")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		FillObjectMetaSystemFields(ctx, &resource)
0000000000000000000000000000000000000000;;		if !metav1.HasObjectMetaSystemFieldValues(objMeta) {
0000000000000000000000000000000000000000;;			t.Errorf("the resource does have all fields populated, but incorrectly reports it does not")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestValidNamespace validates that namespace rules are enforced on a resource prior to create or update
0000000000000000000000000000000000000000;;	func TestValidNamespace(t *testing.T) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewDefaultContext()
0000000000000000000000000000000000000000;;		namespace, _ := genericapirequest.NamespaceFrom(ctx)
0000000000000000000000000000000000000000;;		// TODO: use some genericapiserver type here instead of clientapiv1
0000000000000000000000000000000000000000;;		resource := example.Pod{}
0000000000000000000000000000000000000000;;		if !ValidNamespace(ctx, &resource.ObjectMeta) {
0000000000000000000000000000000000000000;;			t.Fatalf("expected success")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if namespace != resource.Namespace {
0000000000000000000000000000000000000000;;			t.Fatalf("expected resource to have the default namespace assigned during validation")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resource = example.Pod{ObjectMeta: metav1.ObjectMeta{Namespace: "other"}}
0000000000000000000000000000000000000000;;		if ValidNamespace(ctx, &resource.ObjectMeta) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error that resource and context errors do not match because resource has different namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ctx = genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		if ValidNamespace(ctx, &resource.ObjectMeta) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error that resource and context errors do not match since context has no namespace")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx = genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		ns := genericapirequest.NamespaceValue(ctx)
0000000000000000000000000000000000000000;;		if ns != "" {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected the empty string")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
