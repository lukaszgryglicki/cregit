0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
cecc8123b8b9e398543d485c450f61b5fa0d617b;pkg/registry/generic/rest/response_checker.go[pkg/registry/generic/rest/response_checker.go][staging/src/k8s.io/apiserver/pkg/registry/generic/rest/response_checker.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check the http error status from a location URL.
0000000000000000000000000000000000000000;;	// And convert an error into a structured API object.
0000000000000000000000000000000000000000;;	// Finally ensure we close the body before returning the error
0000000000000000000000000000000000000000;;	type HttpResponseChecker interface {
0000000000000000000000000000000000000000;;		Check(resp *http.Response) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Max length read from the response body of a location which returns error status
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxReadLength = 50000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A generic http response checker to transform the error.
0000000000000000000000000000000000000000;;	type GenericHttpResponseChecker struct {
0000000000000000000000000000000000000000;;		QualifiedResource schema.GroupResource
0000000000000000000000000000000000000000;;		Name              string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (checker GenericHttpResponseChecker) Check(resp *http.Response) error {
0000000000000000000000000000000000000000;;		if resp.StatusCode < http.StatusOK || resp.StatusCode > http.StatusPartialContent {
0000000000000000000000000000000000000000;;			defer resp.Body.Close()
0000000000000000000000000000000000000000;;			bodyBytes, err := ioutil.ReadAll(io.LimitReader(resp.Body, maxReadLength))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return errors.NewInternalError(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			bodyText := string(bodyBytes)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case resp.StatusCode == http.StatusInternalServerError:
0000000000000000000000000000000000000000;;				return errors.NewInternalError(fmt.Errorf("%s", bodyText))
0000000000000000000000000000000000000000;;			case resp.StatusCode == http.StatusBadRequest:
0000000000000000000000000000000000000000;;				return errors.NewBadRequest(bodyText)
0000000000000000000000000000000000000000;;			case resp.StatusCode == http.StatusNotFound:
0000000000000000000000000000000000000000;;				return errors.NewGenericServerResponse(resp.StatusCode, "", checker.QualifiedResource, checker.Name, bodyText, 0, false)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return errors.NewGenericServerResponse(resp.StatusCode, "", checker.QualifiedResource, checker.Name, bodyText, 0, false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGenericHttpResponseChecker(qualifiedResource schema.GroupResource, name string) GenericHttpResponseChecker {
0000000000000000000000000000000000000000;;		return GenericHttpResponseChecker{QualifiedResource: qualifiedResource, Name: name}
0000000000000000000000000000000000000000;;	}
