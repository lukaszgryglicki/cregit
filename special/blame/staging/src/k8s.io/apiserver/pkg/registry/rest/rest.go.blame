0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
4b30cd4472631d0059c53c4053188c41e644bd64;pkg/apiserver/interfaces.go[pkg/apiserver/interfaces.go][staging/src/k8s.io/apiserver/pkg/registry/rest/rest.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metainternalversion "k8s.io/apimachinery/pkg/apis/meta/internalversion"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//TODO:
0000000000000000000000000000000000000000;;	// Storage interfaces need to be separated into two groups; those that operate
0000000000000000000000000000000000000000;;	// on collections and those that operate on individually named items.
0000000000000000000000000000000000000000;;	// Collection interfaces:
0000000000000000000000000000000000000000;;	// (Method: Current -> Proposed)
0000000000000000000000000000000000000000;;	//    GET: Lister -> CollectionGetter
0000000000000000000000000000000000000000;;	//    WATCH: Watcher -> CollectionWatcher
0000000000000000000000000000000000000000;;	//    CREATE: Creater -> CollectionCreater
0000000000000000000000000000000000000000;;	//    DELETE: (n/a) -> CollectionDeleter
0000000000000000000000000000000000000000;;	//    UPDATE: (n/a) -> CollectionUpdater
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Single item interfaces:
0000000000000000000000000000000000000000;;	// (Method: Current -> Proposed)
0000000000000000000000000000000000000000;;	//    GET: Getter -> NamedGetter
0000000000000000000000000000000000000000;;	//    WATCH: (n/a) -> NamedWatcher
0000000000000000000000000000000000000000;;	//    CREATE: (n/a) -> NamedCreater
0000000000000000000000000000000000000000;;	//    DELETE: Deleter -> NamedDeleter
0000000000000000000000000000000000000000;;	//    UPDATE: Update -> NamedUpdater
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage is a generic interface for RESTful storage services.
0000000000000000000000000000000000000000;;	// Resources which are exported to the RESTful API of apiserver need to implement this interface. It is expected
0000000000000000000000000000000000000000;;	// that objects may implement any of the below interfaces.
0000000000000000000000000000000000000000;;	type Storage interface {
0000000000000000000000000000000000000000;;		// New returns an empty object that can be used with Create and Update after request data has been put into it.
0000000000000000000000000000000000000000;;		// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)
0000000000000000000000000000000000000000;;		New() runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KindProvider specifies a different kind for its API than for its internal storage.  This is necessary for external
0000000000000000000000000000000000000000;;	// objects that are not compiled into the api server.  For such objects, there is no in-memory representation for
0000000000000000000000000000000000000000;;	// the object, so they must be represented as generic objects (e.g. runtime.Unknown), but when we present the object as part of
0000000000000000000000000000000000000000;;	// API discovery we want to present the specific kind, not the generic internal representation.
0000000000000000000000000000000000000000;;	type KindProvider interface {
0000000000000000000000000000000000000000;;		Kind() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShortNamesProvider is an interface for RESTful storage services. Delivers a list of short names for a resource. The list is used by kubectl to have short names representation of resources.
0000000000000000000000000000000000000000;;	type ShortNamesProvider interface {
0000000000000000000000000000000000000000;;		ShortNames() []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CategoriesProvider allows a resource to specify which groups of resources (categories) it's part of. Categories can
0000000000000000000000000000000000000000;;	// be used by API clients to refer to a batch of resources by using a single name (e.g. "all" could translate to "pod,rc,svc,...").
0000000000000000000000000000000000000000;;	type CategoriesProvider interface {
0000000000000000000000000000000000000000;;		Categories() []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Lister is an object that can retrieve resources that match the provided field and label criteria.
0000000000000000000000000000000000000000;;	type Lister interface {
0000000000000000000000000000000000000000;;		// NewList returns an empty object that can be used with the List call.
0000000000000000000000000000000000000000;;		// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)
0000000000000000000000000000000000000000;;		NewList() runtime.Object
0000000000000000000000000000000000000000;;		// List selects resources in the storage which match to the selector. 'options' can be nil.
0000000000000000000000000000000000000000;;		List(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exporter is an object that knows how to strip a RESTful resource for export
0000000000000000000000000000000000000000;;	type Exporter interface {
0000000000000000000000000000000000000000;;		// Export an object.  Fields that are not user specified (e.g. Status, ObjectMeta.ResourceVersion) are stripped out
0000000000000000000000000000000000000000;;		// Returns the stripped object.  If 'exact' is true, fields that are specific to the cluster (e.g. namespace) are
0000000000000000000000000000000000000000;;		// retained, otherwise they are stripped also.
0000000000000000000000000000000000000000;;		Export(ctx genericapirequest.Context, name string, opts metav1.ExportOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Getter is an object that can retrieve a named RESTful resource.
0000000000000000000000000000000000000000;;	type Getter interface {
0000000000000000000000000000000000000000;;		// Get finds a resource in the storage by name and returns it.
0000000000000000000000000000000000000000;;		// Although it can return an arbitrary error value, IsNotFound(err) is true for the
0000000000000000000000000000000000000000;;		// returned error value err when the specified resource is not found.
0000000000000000000000000000000000000000;;		Get(ctx genericapirequest.Context, name string, options *metav1.GetOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetterWithOptions is an object that retrieve a named RESTful resource and takes
0000000000000000000000000000000000000000;;	// additional options on the get request. It allows a caller to also receive the
0000000000000000000000000000000000000000;;	// subpath of the GET request.
0000000000000000000000000000000000000000;;	type GetterWithOptions interface {
0000000000000000000000000000000000000000;;		// Get finds a resource in the storage by name and returns it.
0000000000000000000000000000000000000000;;		// Although it can return an arbitrary error value, IsNotFound(err) is true for the
0000000000000000000000000000000000000000;;		// returned error value err when the specified resource is not found.
0000000000000000000000000000000000000000;;		// The options object passed to it is of the same type returned by the NewGetOptions
0000000000000000000000000000000000000000;;		// method.
0000000000000000000000000000000000000000;;		// TODO: Pass metav1.GetOptions.
0000000000000000000000000000000000000000;;		Get(ctx genericapirequest.Context, name string, options runtime.Object) (runtime.Object, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NewGetOptions returns an empty options object that will be used to pass
0000000000000000000000000000000000000000;;		// options to the Get method. It may return a bool and a string, if true, the
0000000000000000000000000000000000000000;;		// value of the request path below the object will be included as the named
0000000000000000000000000000000000000000;;		// string in the serialization of the runtime object. E.g., returning "path"
0000000000000000000000000000000000000000;;		// will convert the trailing request scheme value to "path" in the map[string][]string
0000000000000000000000000000000000000000;;		// passed to the converter.
0000000000000000000000000000000000000000;;		NewGetOptions() (runtime.Object, bool, string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TableConvertor interface {
0000000000000000000000000000000000000000;;		ConvertToTable(ctx genericapirequest.Context, object runtime.Object, tableOptions runtime.Object) (*metav1alpha1.Table, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Deleter is an object that can delete a named RESTful resource.
0000000000000000000000000000000000000000;;	type Deleter interface {
0000000000000000000000000000000000000000;;		// Delete finds a resource in the storage and deletes it.
0000000000000000000000000000000000000000;;		// Although it can return an arbitrary error value, IsNotFound(err) is true for the
0000000000000000000000000000000000000000;;		// returned error value err when the specified resource is not found.
0000000000000000000000000000000000000000;;		// Delete *may* return the object that was deleted, or a status object indicating additional
0000000000000000000000000000000000000000;;		// information about deletion.
0000000000000000000000000000000000000000;;		Delete(ctx genericapirequest.Context, name string) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GracefulDeleter knows how to pass deletion options to allow delayed deletion of a
0000000000000000000000000000000000000000;;	// RESTful object.
0000000000000000000000000000000000000000;;	type GracefulDeleter interface {
0000000000000000000000000000000000000000;;		// Delete finds a resource in the storage and deletes it.
0000000000000000000000000000000000000000;;		// If options are provided, the resource will attempt to honor them or return an invalid
0000000000000000000000000000000000000000;;		// request error.
0000000000000000000000000000000000000000;;		// Although it can return an arbitrary error value, IsNotFound(err) is true for the
0000000000000000000000000000000000000000;;		// returned error value err when the specified resource is not found.
0000000000000000000000000000000000000000;;		// Delete *may* return the object that was deleted, or a status object indicating additional
0000000000000000000000000000000000000000;;		// information about deletion.
0000000000000000000000000000000000000000;;		// It also returns a boolean which is set to true if the resource was instantly
0000000000000000000000000000000000000000;;		// deleted or false if it will be deleted asynchronously.
0000000000000000000000000000000000000000;;		Delete(ctx genericapirequest.Context, name string, options *metav1.DeleteOptions) (runtime.Object, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GracefulDeleteAdapter adapts the Deleter interface to GracefulDeleter
0000000000000000000000000000000000000000;;	type GracefulDeleteAdapter struct {
0000000000000000000000000000000000000000;;		Deleter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete implements RESTGracefulDeleter in terms of Deleter
0000000000000000000000000000000000000000;;	func (w GracefulDeleteAdapter) Delete(ctx genericapirequest.Context, name string, options *metav1.DeleteOptions) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		obj, err := w.Deleter.Delete(ctx, name)
0000000000000000000000000000000000000000;;		return obj, true, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectionDeleter is an object that can delete a collection
0000000000000000000000000000000000000000;;	// of RESTful resources.
0000000000000000000000000000000000000000;;	type CollectionDeleter interface {
0000000000000000000000000000000000000000;;		// DeleteCollection selects all resources in the storage matching given 'listOptions'
0000000000000000000000000000000000000000;;		// and deletes them. If 'options' are provided, the resource will attempt to honor
0000000000000000000000000000000000000000;;		// them or return an invalid request error.
0000000000000000000000000000000000000000;;		// DeleteCollection may not be atomic - i.e. it may delete some objects and still
0000000000000000000000000000000000000000;;		// return an error after it. On success, returns a list of deleted objects.
0000000000000000000000000000000000000000;;		DeleteCollection(ctx genericapirequest.Context, options *metav1.DeleteOptions, listOptions *metainternalversion.ListOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Creater is an object that can create an instance of a RESTful object.
0000000000000000000000000000000000000000;;	type Creater interface {
0000000000000000000000000000000000000000;;		// New returns an empty object that can be used with Create after request data has been put into it.
0000000000000000000000000000000000000000;;		// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)
0000000000000000000000000000000000000000;;		New() runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create creates a new version of a resource. If includeUninitialized is set, the object may be returned
0000000000000000000000000000000000000000;;		// without completing initialization.
0000000000000000000000000000000000000000;;		Create(ctx genericapirequest.Context, obj runtime.Object, includeUninitialized bool) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedCreater is an object that can create an instance of a RESTful object using a name parameter.
0000000000000000000000000000000000000000;;	type NamedCreater interface {
0000000000000000000000000000000000000000;;		// New returns an empty object that can be used with Create after request data has been put into it.
0000000000000000000000000000000000000000;;		// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)
0000000000000000000000000000000000000000;;		New() runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create creates a new version of a resource. It expects a name parameter from the path.
0000000000000000000000000000000000000000;;		// This is needed for create operations on subresources which include the name of the parent
0000000000000000000000000000000000000000;;		// resource in the path. If includeUninitialized is set, the object may be returned without
0000000000000000000000000000000000000000;;		// completing initialization.
0000000000000000000000000000000000000000;;		Create(ctx genericapirequest.Context, name string, obj runtime.Object, includeUninitialized bool) (runtime.Object, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatedObjectInfo provides information about an updated object to an Updater.
0000000000000000000000000000000000000000;;	// It requires access to the old object in order to return the newly updated object.
0000000000000000000000000000000000000000;;	type UpdatedObjectInfo interface {
0000000000000000000000000000000000000000;;		// Returns preconditions built from the updated object, if applicable.
0000000000000000000000000000000000000000;;		// May return nil, or a preconditions object containing nil fields,
0000000000000000000000000000000000000000;;		// if no preconditions can be determined from the updated object.
0000000000000000000000000000000000000000;;		Preconditions() *metav1.Preconditions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdatedObject returns the updated object, given a context and old object.
0000000000000000000000000000000000000000;;		// The only time an empty oldObj should be passed in is if a "create on update" is occurring (there is no oldObj).
0000000000000000000000000000000000000000;;		UpdatedObject(ctx genericapirequest.Context, oldObj runtime.Object) (newObj runtime.Object, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Updater is an object that can update an instance of a RESTful object.
0000000000000000000000000000000000000000;;	type Updater interface {
0000000000000000000000000000000000000000;;		// New returns an empty object that can be used with Update after request data has been put into it.
0000000000000000000000000000000000000000;;		// This object must be a pointer type for use with Codec.DecodeInto([]byte, runtime.Object)
0000000000000000000000000000000000000000;;		New() runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update finds a resource in the storage and updates it. Some implementations
0000000000000000000000000000000000000000;;		// may allow updates creates the object - they should set the created boolean
0000000000000000000000000000000000000000;;		// to true.
0000000000000000000000000000000000000000;;		Update(ctx genericapirequest.Context, name string, objInfo UpdatedObjectInfo) (runtime.Object, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreaterUpdater is a storage object that must support both create and update.
0000000000000000000000000000000000000000;;	// Go prevents embedded interfaces that implement the same method.
0000000000000000000000000000000000000000;;	type CreaterUpdater interface {
0000000000000000000000000000000000000000;;		Creater
0000000000000000000000000000000000000000;;		Update(ctx genericapirequest.Context, name string, objInfo UpdatedObjectInfo) (runtime.Object, bool, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreaterUpdater must satisfy the Updater interface.
0000000000000000000000000000000000000000;;	var _ Updater = CreaterUpdater(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patcher is a storage object that supports both get and update.
0000000000000000000000000000000000000000;;	type Patcher interface {
0000000000000000000000000000000000000000;;		Getter
0000000000000000000000000000000000000000;;		Updater
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watcher should be implemented by all Storage objects that
0000000000000000000000000000000000000000;;	// want to offer the ability to watch for changes through the watch api.
0000000000000000000000000000000000000000;;	type Watcher interface {
0000000000000000000000000000000000000000;;		// 'label' selects on labels; 'field' selects on the object's fields. Not all fields
0000000000000000000000000000000000000000;;		// are supported; an error should be returned if 'field' tries to select on a field that
0000000000000000000000000000000000000000;;		// isn't supported. 'resourceVersion' allows for continuing/starting a watch at a
0000000000000000000000000000000000000000;;		// particular version.
0000000000000000000000000000000000000000;;		Watch(ctx genericapirequest.Context, options *metainternalversion.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StandardStorage is an interface covering the common verbs. Provided for testing whether a
0000000000000000000000000000000000000000;;	// resource satisfies the normal storage methods. Use Storage when passing opaque storage objects.
0000000000000000000000000000000000000000;;	type StandardStorage interface {
0000000000000000000000000000000000000000;;		Getter
0000000000000000000000000000000000000000;;		Lister
0000000000000000000000000000000000000000;;		CreaterUpdater
0000000000000000000000000000000000000000;;		GracefulDeleter
0000000000000000000000000000000000000000;;		CollectionDeleter
0000000000000000000000000000000000000000;;		Watcher
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Redirector know how to return a remote resource's location.
0000000000000000000000000000000000000000;;	type Redirector interface {
0000000000000000000000000000000000000000;;		// ResourceLocation should return the remote location of the given resource, and an optional transport to use to request it, or an error.
0000000000000000000000000000000000000000;;		ResourceLocation(ctx genericapirequest.Context, id string) (remoteLocation *url.URL, transport http.RoundTripper, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Responder abstracts the normal response behavior for a REST method and is passed to callers that
0000000000000000000000000000000000000000;;	// may wish to handle the response directly in some cases, but delegate to the normal error or object
0000000000000000000000000000000000000000;;	// behavior in other cases.
0000000000000000000000000000000000000000;;	type Responder interface {
0000000000000000000000000000000000000000;;		// Object writes the provided object to the response. Invoking this method multiple times is undefined.
0000000000000000000000000000000000000000;;		Object(statusCode int, obj runtime.Object)
0000000000000000000000000000000000000000;;		// Error writes the provided error to the response. This method may only be invoked once.
0000000000000000000000000000000000000000;;		Error(err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Connecter is a storage object that responds to a connection request.
0000000000000000000000000000000000000000;;	type Connecter interface {
0000000000000000000000000000000000000000;;		// Connect returns an http.Handler that will handle the request/response for a given API invocation.
0000000000000000000000000000000000000000;;		// The provided responder may be used for common API responses. The responder will write both status
0000000000000000000000000000000000000000;;		// code and body, so the ServeHTTP method should exit after invoking the responder. The Handler will
0000000000000000000000000000000000000000;;		// be used for a single API request and then discarded. The Responder is guaranteed to write to the
0000000000000000000000000000000000000000;;		// same http.ResponseWriter passed to ServeHTTP.
0000000000000000000000000000000000000000;;		Connect(ctx genericapirequest.Context, id string, options runtime.Object, r Responder) (http.Handler, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NewConnectOptions returns an empty options object that will be used to pass
0000000000000000000000000000000000000000;;		// options to the Connect method. If nil, then a nil options object is passed to
0000000000000000000000000000000000000000;;		// Connect. It may return a bool and a string. If true, the value of the request
0000000000000000000000000000000000000000;;		// path below the object will be included as the named string in the serialization
0000000000000000000000000000000000000000;;		// of the runtime object.
0000000000000000000000000000000000000000;;		NewConnectOptions() (runtime.Object, bool, string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ConnectMethods returns the list of HTTP methods handled by Connect
0000000000000000000000000000000000000000;;		ConnectMethods() []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceStreamer is an interface implemented by objects that prefer to be streamed from the server
0000000000000000000000000000000000000000;;	// instead of decoded directly.
0000000000000000000000000000000000000000;;	type ResourceStreamer interface {
0000000000000000000000000000000000000000;;		// InputStream should return an io.ReadCloser if the provided object supports streaming. The desired
0000000000000000000000000000000000000000;;		// api version and an accept header (may be empty) are passed to the call. If no error occurs,
0000000000000000000000000000000000000000;;		// the caller may return a flag indicating whether the result should be flushed as writes occur
0000000000000000000000000000000000000000;;		// and a content type string that indicates the type of the stream.
0000000000000000000000000000000000000000;;		// If a null stream is returned, a StatusNoContent response wil be generated.
0000000000000000000000000000000000000000;;		InputStream(apiVersion, acceptHeader string) (stream io.ReadCloser, flush bool, mimeType string, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageMetadata is an optional interface that callers can implement to provide additional
0000000000000000000000000000000000000000;;	// information about their Storage objects.
0000000000000000000000000000000000000000;;	type StorageMetadata interface {
0000000000000000000000000000000000000000;;		// ProducesMIMETypes returns a list of the MIME types the specified HTTP verb (GET, POST, DELETE,
0000000000000000000000000000000000000000;;		// PATCH) can respond with.
0000000000000000000000000000000000000000;;		ProducesMIMETypes(verb string) []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ProducesObject returns an object the specified HTTP verb respond with. It will overwrite storage object if
0000000000000000000000000000000000000000;;		// it is not nil. Only the type of the return object matters, the value will be ignored.
0000000000000000000000000000000000000000;;		ProducesObject(verb string) interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectRequest is an object passed to admission control for Connect operations
0000000000000000000000000000000000000000;;	type ConnectRequest struct {
0000000000000000000000000000000000000000;;		// Name is the name of the object on which the connect request was made
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Options is the options object passed to the connect request. See the NewConnectOptions method on Connecter
0000000000000000000000000000000000000000;;		Options runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourcePath is the path for the resource in the REST server (ie. "pods/proxy")
0000000000000000000000000000000000000000;;		ResourcePath string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *ConnectRequest) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
