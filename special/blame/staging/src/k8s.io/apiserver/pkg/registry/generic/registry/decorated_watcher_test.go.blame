0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2e83d02eea1f99d7a67687d9571cd258c111e901;pkg/registry/generic/registry/decorated_watcher_test.go[pkg/registry/generic/registry/decorated_watcher_test.go][staging/src/k8s.io/apiserver/pkg/registry/generic/registry/decorated_watcher_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package registry
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/apis/example"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecoratedWatcher(t *testing.T) {
0000000000000000000000000000000000000000;;		w := watch.NewFake()
0000000000000000000000000000000000000000;;		decorator := func(obj runtime.Object) error {
0000000000000000000000000000000000000000;;			pod := obj.(*example.Pod)
0000000000000000000000000000000000000000;;			pod.Annotations = map[string]string{"decorated": "true"}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dw := newDecoratedWatcher(w, decorator)
0000000000000000000000000000000000000000;;		defer dw.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go w.Add(&example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case e := <-dw.ResultChan():
0000000000000000000000000000000000000000;;			pod, ok := e.Object.(*example.Pod)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("Should received object of type *api.Pod, get type (%T)", e.Object)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if pod.Annotations["decorated"] != "true" {
0000000000000000000000000000000000000000;;				t.Errorf("pod.Annotations[\"decorated\"], want=%s, get=%s", "true", pod.Labels["decorated"])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;			t.Errorf("timeout after %v", wait.ForeverTestTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecoratedWatcherError(t *testing.T) {
0000000000000000000000000000000000000000;;		w := watch.NewFake()
0000000000000000000000000000000000000000;;		expErr := fmt.Errorf("expected error")
0000000000000000000000000000000000000000;;		decorator := func(obj runtime.Object) error {
0000000000000000000000000000000000000000;;			return expErr
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dw := newDecoratedWatcher(w, decorator)
0000000000000000000000000000000000000000;;		defer dw.Stop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go w.Add(&example.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}})
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case e := <-dw.ResultChan():
0000000000000000000000000000000000000000;;			if e.Type != watch.Error {
0000000000000000000000000000000000000000;;				t.Errorf("event type want=%v, get=%v", watch.Error, e.Type)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;			t.Errorf("timeout after %v", wait.ForeverTestTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
