0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
cecc8123b8b9e398543d485c450f61b5fa0d617b;pkg/registry/generic/rest/response_checker_test.go[pkg/registry/generic/rest/response_checker_test.go][staging/src/k8s.io/apiserver/pkg/registry/generic/rest/response_checker_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenericHttpResponseChecker(t *testing.T) {
0000000000000000000000000000000000000000;;		responseChecker := NewGenericHttpResponseChecker(v1.Resource("pods"), "foo")
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			resp        *http.Response
0000000000000000000000000000000000000000;;			expectError bool
0000000000000000000000000000000000000000;;			expected    error
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resp: &http.Response{
0000000000000000000000000000000000000000;;					Body:       ioutil.NopCloser(bytes.NewBufferString("Success")),
0000000000000000000000000000000000000000;;					StatusCode: http.StatusOK,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: false,
0000000000000000000000000000000000000000;;				name:        "ok",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resp: &http.Response{
0000000000000000000000000000000000000000;;					Body:       ioutil.NopCloser(bytes.NewBufferString("Invalid request.")),
0000000000000000000000000000000000000000;;					StatusCode: http.StatusBadRequest,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				expected:    errors.NewBadRequest("Invalid request."),
0000000000000000000000000000000000000000;;				name:        "bad request",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resp: &http.Response{
0000000000000000000000000000000000000000;;					Body:       ioutil.NopCloser(bytes.NewBufferString("Pod does not exist.")),
0000000000000000000000000000000000000000;;					StatusCode: http.StatusInternalServerError,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError: true,
0000000000000000000000000000000000000000;;				expected:    errors.NewInternalError(fmt.Errorf("%s", "Pod does not exist.")),
0000000000000000000000000000000000000000;;				name:        "internal server error",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			err := responseChecker.Check(test.resp)
0000000000000000000000000000000000000000;;			if test.expectError && err == nil {
0000000000000000000000000000000000000000;;				t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectError && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectError && !reflect.DeepEqual(err, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("expected: %s, saw: %s", test.expected, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGenericHttpResponseCheckerLimitReader(t *testing.T) {
0000000000000000000000000000000000000000;;		responseChecker := NewGenericHttpResponseChecker(v1.Resource("pods"), "foo")
0000000000000000000000000000000000000000;;		excessedString := strings.Repeat("a", (maxReadLength + 10000))
0000000000000000000000000000000000000000;;		resp := &http.Response{
0000000000000000000000000000000000000000;;			Body:       ioutil.NopCloser(bytes.NewBufferString(excessedString)),
0000000000000000000000000000000000000000;;			StatusCode: http.StatusBadRequest,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := responseChecker.Check(resp)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(err.Error()) != maxReadLength {
0000000000000000000000000000000000000000;;			t.Errorf("expected lenth of error message: %d, saw: %d", maxReadLength, len(err.Error()))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
