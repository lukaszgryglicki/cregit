0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f796bba9076deebf7d76f8c3cd7b806a11d01fe8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type defaultTableConvertor struct {
0000000000000000000000000000000000000000;;		qualifiedResource schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultTableConvertor creates a default convertor for the provided resource.
0000000000000000000000000000000000000000;;	func NewDefaultTableConvertor(resource schema.GroupResource) TableConvertor {
0000000000000000000000000000000000000000;;		return defaultTableConvertor{qualifiedResource: resource}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var swaggerMetadataDescriptions = metav1.ObjectMeta{}.SwaggerDoc()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c defaultTableConvertor) ConvertToTable(ctx genericapirequest.Context, object runtime.Object, tableOptions runtime.Object) (*metav1alpha1.Table, error) {
0000000000000000000000000000000000000000;;		var table metav1alpha1.Table
0000000000000000000000000000000000000000;;		fn := func(obj runtime.Object) error {
0000000000000000000000000000000000000000;;			m, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return errNotAcceptable{resource: c.qualifiedResource}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			table.Rows = append(table.Rows, metav1alpha1.TableRow{
0000000000000000000000000000000000000000;;				Cells:  []interface{}{m.GetName(), m.GetCreationTimestamp().Time.UTC().Format(time.RFC3339)},
0000000000000000000000000000000000000000;;				Object: runtime.RawExtension{Object: obj},
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case meta.IsListType(object):
0000000000000000000000000000000000000000;;			if err := meta.EachListItem(object, fn); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			if err := fn(object); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		table.ColumnDefinitions = []metav1alpha1.TableColumnDefinition{
0000000000000000000000000000000000000000;;			{Name: "Name", Type: "string", Description: swaggerMetadataDescriptions["name"]},
0000000000000000000000000000000000000000;;			{Name: "Created At", Type: "date", Description: swaggerMetadataDescriptions["creationTimestamp"]},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &table, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errNotAcceptable indicates the resource doesn't support Table conversion
0000000000000000000000000000000000000000;;	type errNotAcceptable struct {
0000000000000000000000000000000000000000;;		resource schema.GroupResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errNotAcceptable) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("the resource %s does not support being converted to a Table", e.resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e errNotAcceptable) Status() metav1.Status {
0000000000000000000000000000000000000000;;		return metav1.Status{
0000000000000000000000000000000000000000;;			Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;			Code:    http.StatusNotAcceptable,
0000000000000000000000000000000000000000;;			Reason:  metav1.StatusReason("NotAcceptable"),
0000000000000000000000000000000000000000;;			Message: e.Error(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
