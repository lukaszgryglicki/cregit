0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9875a63620da3b70ba43addf245cc9008779cef9;plugin/pkg/auth/authenticator/request/basicauth/basicauth.go[plugin/pkg/auth/authenticator/request/basicauth/basicauth.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/request/basicauth/basicauth.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package basicauth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authenticator authenticates requests using basic auth
0000000000000000000000000000000000000000;;	type Authenticator struct {
0000000000000000000000000000000000000000;;		auth authenticator.Password
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a request authenticator that validates credentials using the provided password authenticator
0000000000000000000000000000000000000000;;	func New(auth authenticator.Password) *Authenticator {
0000000000000000000000000000000000000000;;		return &Authenticator{auth}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errInvalidAuth = errors.New("invalid username/password combination")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticateRequest authenticates the request using the "Authorization: Basic" header in the request
0000000000000000000000000000000000000000;;	func (a *Authenticator) AuthenticateRequest(req *http.Request) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		username, password, found := req.BasicAuth()
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		user, ok, err := a.auth.AuthenticatePassword(username, password)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the password authenticator didn't error, provide a default error
0000000000000000000000000000000000000000;;		if !ok && err == nil {
0000000000000000000000000000000000000000;;			err = errInvalidAuth
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return user, ok, err
0000000000000000000000000000000000000000;;	}
