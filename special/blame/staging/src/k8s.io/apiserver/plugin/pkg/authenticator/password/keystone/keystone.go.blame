0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0d63b9d9b24bbeabd1dfee9715336319b3aec9d6;plugin/pkg/auth/authenticator/request/keystone/keystone.go[plugin/pkg/auth/authenticator/request/keystone/keystone.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/password/keystone/keystone.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package keystone
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud"
0000000000000000000000000000000000000000;;		"github.com/gophercloud/gophercloud/openstack"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		netutil "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		certutil "k8s.io/client-go/util/cert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeystoneAuthenticator contacts openstack keystone to validate user's credentials passed in the request.
0000000000000000000000000000000000000000;;	// The keystone endpoint is passed during apiserver startup
0000000000000000000000000000000000000000;;	type KeystoneAuthenticator struct {
0000000000000000000000000000000000000000;;		authURL   string
0000000000000000000000000000000000000000;;		transport http.RoundTripper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatePassword checks the username, password via keystone call
0000000000000000000000000000000000000000;;	func (keystoneAuthenticator *KeystoneAuthenticator) AuthenticatePassword(username string, password string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		opts := gophercloud.AuthOptions{
0000000000000000000000000000000000000000;;			IdentityEndpoint: keystoneAuthenticator.authURL,
0000000000000000000000000000000000000000;;			Username:         username,
0000000000000000000000000000000000000000;;			Password:         password,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := keystoneAuthenticator.AuthenticatedClient(opts)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.Info("Failed: Starting openstack authenticate client:" + err.Error())
0000000000000000000000000000000000000000;;			return nil, false, errors.New("Failed to authenticate")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{Name: username}, true, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatedClient logs in to an OpenStack cloud found at the identity endpoint specified by options, acquires a
0000000000000000000000000000000000000000;;	// token, and returns a Client instance that's ready to operate.
0000000000000000000000000000000000000000;;	func (keystoneAuthenticator *KeystoneAuthenticator) AuthenticatedClient(options gophercloud.AuthOptions) (*gophercloud.ProviderClient, error) {
0000000000000000000000000000000000000000;;		client, err := openstack.NewClient(options.IdentityEndpoint)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if keystoneAuthenticator.transport != nil {
0000000000000000000000000000000000000000;;			client.HTTPClient.Transport = keystoneAuthenticator.transport
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = openstack.Authenticate(client, options)
0000000000000000000000000000000000000000;;		return client, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewKeystoneAuthenticator returns a password authenticator that validates credentials using openstack keystone
0000000000000000000000000000000000000000;;	func NewKeystoneAuthenticator(authURL string, caFile string) (*KeystoneAuthenticator, error) {
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(authURL, "https") {
0000000000000000000000000000000000000000;;			return nil, errors.New("Auth URL should be secure and start with https")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if authURL == "" {
0000000000000000000000000000000000000000;;			return nil, errors.New("Auth URL is empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if caFile != "" {
0000000000000000000000000000000000000000;;			roots, err := certutil.NewPool(caFile)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			config := &tls.Config{}
0000000000000000000000000000000000000000;;			config.RootCAs = roots
0000000000000000000000000000000000000000;;			transport := netutil.SetOldTransportDefaults(&http.Transport{TLSClientConfig: config})
0000000000000000000000000000000000000000;;			return &KeystoneAuthenticator{authURL, transport}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &KeystoneAuthenticator{authURL: authURL}, nil
0000000000000000000000000000000000000000;;	}
