0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9875a63620da3b70ba43addf245cc9008779cef9;plugin/pkg/auth/authenticator/password/allow/allow_test.go[plugin/pkg/auth/authenticator/password/allow/allow_test.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/password/allow/allow_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package allow
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAllowEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		allow := NewAllow()
0000000000000000000000000000000000000000;;		user, ok, err := allow.AuthenticatePassword("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected success")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if user != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected user: %v", user)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAllowPresent(t *testing.T) {
0000000000000000000000000000000000000000;;		allow := NewAllow()
0000000000000000000000000000000000000000;;		user, ok, err := allow.AuthenticatePassword("myuser", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected failure")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if user.GetName() != "myuser" || user.GetUID() != "myuser" {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected user name or uid: %v", user)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
