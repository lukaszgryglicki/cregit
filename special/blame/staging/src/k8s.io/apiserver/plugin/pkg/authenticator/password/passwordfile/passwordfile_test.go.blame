0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b4e8bb6bd5f2e5407ff7545d7d50df6857e89bd2;plugin/pkg/auth/authenticator/password/passwordfile/passwordfile_test.go[plugin/pkg/auth/authenticator/password/passwordfile/passwordfile_test.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/password/passwordfile/passwordfile_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package passwordfile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPasswordFile(t *testing.T) {
0000000000000000000000000000000000000000;;		auth, err := newWithContents(t, `
0000000000000000000000000000000000000000;;	password1,user1,uid1
0000000000000000000000000000000000000000;;	password2,user2,uid2
0000000000000000000000000000000000000000;;	password3,user3,uid3,"group1,group2"
0000000000000000000000000000000000000000;;	password4,user4,uid4,"group2"
0000000000000000000000000000000000000000;;	password5,user5,uid5,group5
0000000000000000000000000000000000000000;;	password6,user6,uid6,group5,otherdata
0000000000000000000000000000000000000000;;	password7,user7,uid7,"group1,group2",otherdata
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unable to read passwordfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Username string
0000000000000000000000000000000000000000;;			Password string
0000000000000000000000000000000000000000;;			User     *user.DefaultInfo
0000000000000000000000000000000000000000;;			Ok       bool
0000000000000000000000000000000000000000;;			Err      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user1",
0000000000000000000000000000000000000000;;				Password: "password1",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user1", UID: "uid1"},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user2",
0000000000000000000000000000000000000000;;				Password: "password2",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user2", UID: "uid2"},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user1",
0000000000000000000000000000000000000000;;				Password: "password2",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user2",
0000000000000000000000000000000000000000;;				Password: "password1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user3",
0000000000000000000000000000000000000000;;				Password: "password3",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user3", UID: "uid3", Groups: []string{"group1", "group2"}},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user4",
0000000000000000000000000000000000000000;;				Password: "password4",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user4", UID: "uid4", Groups: []string{"group2"}},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user5",
0000000000000000000000000000000000000000;;				Password: "password5",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user5", UID: "uid5", Groups: []string{"group5"}},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user6",
0000000000000000000000000000000000000000;;				Password: "password6",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user6", UID: "uid6", Groups: []string{"group5"}},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user7",
0000000000000000000000000000000000000000;;				Password: "password7",
0000000000000000000000000000000000000000;;				User:     &user.DefaultInfo{Name: "user7", UID: "uid7", Groups: []string{"group1", "group2"}},
0000000000000000000000000000000000000000;;				Ok:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user7",
0000000000000000000000000000000000000000;;				Password: "passwordbad",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "userbad",
0000000000000000000000000000000000000000;;				Password: "password7",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Username: "user8",
0000000000000000000000000000000000000000;;				Password: "password8",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			user, ok, err := auth.AuthenticatePassword(testCase.Username, testCase.Password)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.User == nil {
0000000000000000000000000000000000000000;;				if user != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%d: unexpected non-nil user %#v", i, user)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if !reflect.DeepEqual(testCase.User, user) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected user %#v, got %#v", i, testCase.User, user)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.Ok != ok {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected auth %v, got %v", i, testCase.Ok, ok)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBadPasswordFile(t *testing.T) {
0000000000000000000000000000000000000000;;		if _, err := newWithContents(t, `
0000000000000000000000000000000000000000;;	password1,user1,uid1
0000000000000000000000000000000000000000;;	password2,user2,uid2
0000000000000000000000000000000000000000;;	password3,user3
0000000000000000000000000000000000000000;;	password4
0000000000000000000000000000000000000000;;	`); err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected non error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInsufficientColumnsPasswordFile(t *testing.T) {
0000000000000000000000000000000000000000;;		if _, err := newWithContents(t, "password4\n"); err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected non error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newWithContents(t *testing.T, contents string) (auth *PasswordAuthenticator, err error) {
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "passwordfile_test")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error creating passwordfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.Close()
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(f.Name(), []byte(contents), 0700); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error writing passwordfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewCSV(f.Name())
0000000000000000000000000000000000000000;;	}
