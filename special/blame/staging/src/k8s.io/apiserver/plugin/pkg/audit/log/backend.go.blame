0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7c76be717720b98ceba9f572697a551d221acd03;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package log
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		auditinternal "k8s.io/apiserver/pkg/apis/audit"
0000000000000000000000000000000000000000;;		auditv1alpha1 "k8s.io/apiserver/pkg/apis/audit/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/audit"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// FormatLegacy saves event in 1-line text format.
0000000000000000000000000000000000000000;;		FormatLegacy = "legacy"
0000000000000000000000000000000000000000;;		// FormatJson saves event in structured json format.
0000000000000000000000000000000000000000;;		FormatJson = "json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AllowedFormats are the formats known by log backend.
0000000000000000000000000000000000000000;;	var AllowedFormats = []string{
0000000000000000000000000000000000000000;;		FormatLegacy,
0000000000000000000000000000000000000000;;		FormatJson,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type backend struct {
0000000000000000000000000000000000000000;;		out    io.Writer
0000000000000000000000000000000000000000;;		format string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ audit.Backend = &backend{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBackend(out io.Writer, format string) *backend {
0000000000000000000000000000000000000000;;		return &backend{
0000000000000000000000000000000000000000;;			out:    out,
0000000000000000000000000000000000000000;;			format: format,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *backend) ProcessEvents(events ...*auditinternal.Event) {
0000000000000000000000000000000000000000;;		for _, ev := range events {
0000000000000000000000000000000000000000;;			b.logEvent(ev)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *backend) logEvent(ev *auditinternal.Event) {
0000000000000000000000000000000000000000;;		line := ""
0000000000000000000000000000000000000000;;		switch b.format {
0000000000000000000000000000000000000000;;		case FormatLegacy:
0000000000000000000000000000000000000000;;			line = audit.EventString(ev) + "\n"
0000000000000000000000000000000000000000;;		case FormatJson:
0000000000000000000000000000000000000000;;			bs, err := runtime.Encode(audit.Codecs.LegacyCodec(auditv1alpha1.SchemeGroupVersion), ev)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				audit.HandlePluginError("log", err, ev)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			line = string(bs[:])
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			audit.HandlePluginError("log", fmt.Errorf("log format %q is not in list of known formats (%s)",
0000000000000000000000000000000000000000;;				b.format, strings.Join(AllowedFormats, ",")), ev)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := fmt.Fprint(b.out, line); err != nil {
0000000000000000000000000000000000000000;;			audit.HandlePluginError("log", err, ev)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *backend) Run(stopCh <-chan struct{}) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
