0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9875a63620da3b70ba43addf245cc9008779cef9;plugin/pkg/auth/authenticator/request/basicauth/basicauth_test.go[plugin/pkg/auth/authenticator/request/basicauth/basicauth_test.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/request/basicauth/basicauth_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package basicauth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testPassword struct {
0000000000000000000000000000000000000000;;		Username string
0000000000000000000000000000000000000000;;		Password string
0000000000000000000000000000000000000000;;		Called   bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		User user.Info
0000000000000000000000000000000000000000;;		OK   bool
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *testPassword) AuthenticatePassword(user, password string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		t.Called = true
0000000000000000000000000000000000000000;;		t.Username = user
0000000000000000000000000000000000000000;;		t.Password = password
0000000000000000000000000000000000000000;;		return t.User, t.OK, t.Err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasicAuth(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			Header   string
0000000000000000000000000000000000000000;;			Password testPassword
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectedCalled   bool
0000000000000000000000000000000000000000;;			ExpectedUsername string
0000000000000000000000000000000000000000;;			ExpectedPassword string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectedUser string
0000000000000000000000000000000000000000;;			ExpectedOK   bool
0000000000000000000000000000000000000000;;			ExpectedErr  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no auth": {},
0000000000000000000000000000000000000000;;			"empty password basic header": {
0000000000000000000000000000000000000000;;				ExpectedCalled:   true,
0000000000000000000000000000000000000000;;				ExpectedUsername: "user_with_empty_password",
0000000000000000000000000000000000000000;;				ExpectedPassword: "",
0000000000000000000000000000000000000000;;				ExpectedErr:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid basic header": {
0000000000000000000000000000000000000000;;				ExpectedCalled:   true,
0000000000000000000000000000000000000000;;				ExpectedUsername: "myuser",
0000000000000000000000000000000000000000;;				ExpectedPassword: "mypassword:withcolon",
0000000000000000000000000000000000000000;;				ExpectedErr:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"password auth returned user": {
0000000000000000000000000000000000000000;;				Password:         testPassword{User: &user.DefaultInfo{Name: "returneduser"}, OK: true},
0000000000000000000000000000000000000000;;				ExpectedCalled:   true,
0000000000000000000000000000000000000000;;				ExpectedUsername: "myuser",
0000000000000000000000000000000000000000;;				ExpectedPassword: "mypw",
0000000000000000000000000000000000000000;;				ExpectedUser:     "returneduser",
0000000000000000000000000000000000000000;;				ExpectedOK:       true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"password auth returned error": {
0000000000000000000000000000000000000000;;				Password:         testPassword{Err: errors.New("auth error")},
0000000000000000000000000000000000000000;;				ExpectedCalled:   true,
0000000000000000000000000000000000000000;;				ExpectedUsername: "myuser",
0000000000000000000000000000000000000000;;				ExpectedPassword: "mypw",
0000000000000000000000000000000000000000;;				ExpectedErr:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, testCase := range testCases {
0000000000000000000000000000000000000000;;			password := testCase.Password
0000000000000000000000000000000000000000;;			auth := authenticator.Request(New(&password))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, _ := http.NewRequest("GET", "/", nil)
0000000000000000000000000000000000000000;;			if testCase.ExpectedUsername != "" || testCase.ExpectedPassword != "" {
0000000000000000000000000000000000000000;;				req.SetBasicAuth(testCase.ExpectedUsername, testCase.ExpectedPassword)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			user, ok, err := auth.AuthenticateRequest(req)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if testCase.ExpectedCalled != password.Called {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected called=%v, got %v", k, testCase.ExpectedCalled, password.Called)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.ExpectedUsername != password.Username {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected called with username=%v, got %v", k, testCase.ExpectedUsername, password.Username)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.ExpectedPassword != password.Password {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected called with password=%v, got %v", k, testCase.ExpectedPassword, password.Password)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if testCase.ExpectedErr != (err != nil) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected err=%v, got err=%v", k, testCase.ExpectedErr, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.ExpectedOK != ok {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected ok=%v, got ok=%v", k, testCase.ExpectedOK, ok)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if testCase.ExpectedUser != "" && testCase.ExpectedUser != user.GetName() {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected user.GetName()=%v, got %v", k, testCase.ExpectedUser, user.GetName())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
