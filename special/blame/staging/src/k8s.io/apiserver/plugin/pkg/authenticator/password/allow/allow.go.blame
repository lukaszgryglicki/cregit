0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
9875a63620da3b70ba43addf245cc9008779cef9;plugin/pkg/auth/authenticator/password/allow/allow.go[plugin/pkg/auth/authenticator/password/allow/allow.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/password/allow/allow.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package allow
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/authenticator"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type allowAuthenticator struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAllow returns a password authenticator that allows any non-empty username
0000000000000000000000000000000000000000;;	func NewAllow() authenticator.Password {
0000000000000000000000000000000000000000;;		return allowAuthenticator{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticatePassword implements authenticator.Password to allow any non-empty username,
0000000000000000000000000000000000000000;;	// using the specified username as the name and UID
0000000000000000000000000000000000000000;;	func (allowAuthenticator) AuthenticatePassword(username, password string) (user.Info, bool, error) {
0000000000000000000000000000000000000000;;		if username == "" {
0000000000000000000000000000000000000000;;			return nil, false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &user.DefaultInfo{Name: username, UID: username}, true, nil
0000000000000000000000000000000000000000;;	}
