0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
e72b36d4a5b1da4131ae9378f0372e844e4edec3;plugin/pkg/auth/authenticator/token/anytoken/anytoken_test.go[plugin/pkg/auth/authenticator/token/anytoken/anytoken_test.go][staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/anytoken/anytoken_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package anytoken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAnyTokenAuthenticator(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name  string
0000000000000000000000000000000000000000;;			token string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedUser user.Info
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "user only",
0000000000000000000000000000000000000000;;				token:        "joe",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{Name: "joe"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "user with slash",
0000000000000000000000000000000000000000;;				token:        "scheme/joe/",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{Name: "scheme/joe"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "user with groups",
0000000000000000000000000000000000000000;;				token:        "joe/group1,group2",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{Name: "joe", Groups: []string{"group1", "group2"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:         "user with slash and groups",
0000000000000000000000000000000000000000;;				token:        "scheme/joe/group1,group2",
0000000000000000000000000000000000000000;;				expectedUser: &user.DefaultInfo{Name: "scheme/joe", Groups: []string{"group1", "group2"}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			actualUser, _, _ := AnyTokenAuthenticator{}.AuthenticateToken(tc.token)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(actualUser.GetExtra()) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q: got extra: %v", tc.name, actualUser.GetExtra())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(actualUser.GetUID()) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%q: got extra: %v", tc.name, actualUser.GetUID())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedUser.GetName(), actualUser.GetName(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%q: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedUser.GetGroups(), actualUser.GetGroups(); !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("%q: expected %v, got %v", tc.name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
