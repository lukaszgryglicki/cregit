0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5b0a8b9e8d5569350f276035e93907e42362d3c5;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Info contains versioning information.
0000000000000000000000000000000000000000;;	// TODO: Add []string of api versions supported? It's still unclear
0000000000000000000000000000000000000000;;	// how we'll want to distribute that information.
0000000000000000000000000000000000000000;;	type Info struct {
0000000000000000000000000000000000000000;;		Major        string `json:"major"`
0000000000000000000000000000000000000000;;		Minor        string `json:"minor"`
0000000000000000000000000000000000000000;;		GitVersion   string `json:"gitVersion"`
0000000000000000000000000000000000000000;;		GitCommit    string `json:"gitCommit"`
0000000000000000000000000000000000000000;;		GitTreeState string `json:"gitTreeState"`
0000000000000000000000000000000000000000;;		BuildDate    string `json:"buildDate"`
0000000000000000000000000000000000000000;;		GoVersion    string `json:"goVersion"`
0000000000000000000000000000000000000000;;		Compiler     string `json:"compiler"`
0000000000000000000000000000000000000000;;		Platform     string `json:"platform"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns info as a human-friendly version string.
0000000000000000000000000000000000000000;;	func (info Info) String() string {
0000000000000000000000000000000000000000;;		return info.GitVersion
0000000000000000000000000000000000000000;;	}
