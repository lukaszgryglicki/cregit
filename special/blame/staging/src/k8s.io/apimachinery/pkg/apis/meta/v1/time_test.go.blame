0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeHolder struct {
0000000000000000000000000000000000000000;;		T Time `json:"t"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeMarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  Time
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Time{}, "t: null\n"},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 1, 5, 5, 50, time.FixedZone("test", -4*60*60)), "t: 1998-05-05T05:05:05Z\n"},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 0, time.UTC), "t: 1998-05-05T05:05:05Z\n"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := TimeHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := yaml.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: '%v': expected %+v, got %q", input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeUnmarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result Time
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"t: null\n", Time{}},
0000000000000000000000000000000000000000;;			{"t: 1998-05-05T05:05:05Z\n", Time{Date(1998, time.May, 5, 5, 5, 5, 0, time.UTC).Local()}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result TimeHolder
0000000000000000000000000000000000000000;;			if err := yaml.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result.T != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': expected %+v, got %+v", c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeMarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  Time
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Time{}, "{\"t\":null}"},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 50, time.UTC), "{\"t\":\"1998-05-05T05:05:05Z\"}"},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 0, time.UTC), "{\"t\":\"1998-05-05T05:05:05Z\"}"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := TimeHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: '%v': expected %+v, got %q", input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result Time
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"{\"t\":null}", Time{}},
0000000000000000000000000000000000000000;;			{"{\"t\":\"1998-05-05T05:05:05Z\"}", Time{Date(1998, time.May, 5, 5, 5, 5, 0, time.UTC).Local()}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result TimeHolder
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result.T != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': expected %+v, got %+v", c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeMarshalJSONUnmarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input Time
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Time{}},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 50, time.Local).Rfc3339Copy()},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 0, time.Local).Rfc3339Copy()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			input := TimeHolder{c.input}
0000000000000000000000000000000000000000;;			jsonMarshalled, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d-1: Failed to marshal input: '%v': %v", i, input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var result TimeHolder
0000000000000000000000000000000000000000;;			err = yaml.Unmarshal(jsonMarshalled, &result)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d-2: Failed to unmarshal '%+v': %v", i, string(jsonMarshalled), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			iN, iO := input.T.Zone()
0000000000000000000000000000000000000000;;			oN, oO := result.T.Zone()
0000000000000000000000000000000000000000;;			if iN != oN || iO != oO {
0000000000000000000000000000000000000000;;				t.Errorf("%d-3: Time zones differ before and after serialization %s:%d %s:%d", i, iN, iO, oN, oO)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if input.T.UnixNano() != result.T.UnixNano() {
0000000000000000000000000000000000000000;;				t.Errorf("%d-4: Failed to marshal input '%#v': got %#v", i, input, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTimeProto(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input Time
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Time{}},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 1, 5, 5, 0, time.Local)},
0000000000000000000000000000000000000000;;			{Date(1998, time.May, 5, 5, 5, 5, 0, time.Local)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := c.input
0000000000000000000000000000000000000000;;			data, err := input.Marshal()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to marshal input: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			time := Time{}
0000000000000000000000000000000000000000;;			if err := time.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to unmarshal output: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(input, time) {
0000000000000000000000000000000000000000;;				t.Errorf("Marshal->Unmarshal is not idempotent: '%v' vs '%v'", input, time)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
