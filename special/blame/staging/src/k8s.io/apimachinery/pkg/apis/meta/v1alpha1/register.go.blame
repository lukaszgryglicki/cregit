0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a83e52a4771d6dceb68ba7362e30bf5d8eca2c07;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name for this API.
0000000000000000000000000000000000000000;;	const GroupName = "meta.k8s.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: "v1alpha1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind takes an unqualified kind and returns a Group qualified GroupKind
0000000000000000000000000000000000000000;;	func Kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithKind(kind).GroupKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scheme is the registry for the common types that adhere to the meta v1alpha1 API spec.
0000000000000000000000000000000000000000;;	var scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterCodec knows about query parameters used with the meta v1alpha1 API spec.
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&Table{},
0000000000000000000000000000000000000000;;			&TableOptions{},
0000000000000000000000000000000000000000;;			&PartialObjectMetadata{},
0000000000000000000000000000000000000000;;			&PartialObjectMetadataList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// register manually. This usually goes through the SchemeBuilder, which we cannot use here.
0000000000000000000000000000000000000000;;		//scheme.AddGeneratedDeepCopyFuncs(GetGeneratedDeepCopyFuncs()...)
0000000000000000000000000000000000000000;;	}
