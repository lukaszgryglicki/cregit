0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: move this, Object, List, and Type to a different package
0000000000000000000000000000000000000000;;	type ObjectMetaAccessor interface {
0000000000000000000000000000000000000000;;		GetObjectMeta() Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Object lets you work with object metadata from any of the versioned or
0000000000000000000000000000000000000000;;	// internal API objects. Attempting to set or retrieve a field on an object that does
0000000000000000000000000000000000000000;;	// not support that field (Name, UID, Namespace on lists) will be a no-op and return
0000000000000000000000000000000000000000;;	// a default value.
0000000000000000000000000000000000000000;;	type Object interface {
0000000000000000000000000000000000000000;;		GetNamespace() string
0000000000000000000000000000000000000000;;		SetNamespace(namespace string)
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;		SetName(name string)
0000000000000000000000000000000000000000;;		GetGenerateName() string
0000000000000000000000000000000000000000;;		SetGenerateName(name string)
0000000000000000000000000000000000000000;;		GetUID() types.UID
0000000000000000000000000000000000000000;;		SetUID(uid types.UID)
0000000000000000000000000000000000000000;;		GetResourceVersion() string
0000000000000000000000000000000000000000;;		SetResourceVersion(version string)
0000000000000000000000000000000000000000;;		GetGeneration() int64
0000000000000000000000000000000000000000;;		SetGeneration(generation int64)
0000000000000000000000000000000000000000;;		GetSelfLink() string
0000000000000000000000000000000000000000;;		SetSelfLink(selfLink string)
0000000000000000000000000000000000000000;;		GetCreationTimestamp() Time
0000000000000000000000000000000000000000;;		SetCreationTimestamp(timestamp Time)
0000000000000000000000000000000000000000;;		GetDeletionTimestamp() *Time
0000000000000000000000000000000000000000;;		SetDeletionTimestamp(timestamp *Time)
0000000000000000000000000000000000000000;;		GetDeletionGracePeriodSeconds() *int64
0000000000000000000000000000000000000000;;		SetDeletionGracePeriodSeconds(*int64)
0000000000000000000000000000000000000000;;		GetLabels() map[string]string
0000000000000000000000000000000000000000;;		SetLabels(labels map[string]string)
0000000000000000000000000000000000000000;;		GetAnnotations() map[string]string
0000000000000000000000000000000000000000;;		SetAnnotations(annotations map[string]string)
0000000000000000000000000000000000000000;;		GetInitializers() *Initializers
0000000000000000000000000000000000000000;;		SetInitializers(initializers *Initializers)
0000000000000000000000000000000000000000;;		GetFinalizers() []string
0000000000000000000000000000000000000000;;		SetFinalizers(finalizers []string)
0000000000000000000000000000000000000000;;		GetOwnerReferences() []OwnerReference
0000000000000000000000000000000000000000;;		SetOwnerReferences([]OwnerReference)
0000000000000000000000000000000000000000;;		GetClusterName() string
0000000000000000000000000000000000000000;;		SetClusterName(clusterName string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMetaAccessor retrieves the list interface from an object
0000000000000000000000000000000000000000;;	type ListMetaAccessor interface {
0000000000000000000000000000000000000000;;		GetListMeta() List
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lets you work with list metadata from any of the versioned or
0000000000000000000000000000000000000000;;	// internal API objects. Attempting to set or retrieve a field on an object that does
0000000000000000000000000000000000000000;;	// not support that field will be a no-op and return a default value.
0000000000000000000000000000000000000000;;	// TODO: move this, and TypeMeta and ListMeta, to a different package
0000000000000000000000000000000000000000;;	type List interface {
0000000000000000000000000000000000000000;;		GetResourceVersion() string
0000000000000000000000000000000000000000;;		SetResourceVersion(version string)
0000000000000000000000000000000000000000;;		GetSelfLink() string
0000000000000000000000000000000000000000;;		SetSelfLink(selfLink string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Type exposes the type and APIVersion of versioned or internal API objects.
0000000000000000000000000000000000000000;;	// TODO: move this, and TypeMeta and ListMeta, to a different package
0000000000000000000000000000000000000000;;	type Type interface {
0000000000000000000000000000000000000000;;		GetAPIVersion() string
0000000000000000000000000000000000000000;;		SetAPIVersion(version string)
0000000000000000000000000000000000000000;;		GetKind() string
0000000000000000000000000000000000000000;;		SetKind(kind string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (meta *ListMeta) GetResourceVersion() string        { return meta.ResourceVersion }
0000000000000000000000000000000000000000;;	func (meta *ListMeta) SetResourceVersion(version string) { meta.ResourceVersion = version }
0000000000000000000000000000000000000000;;	func (meta *ListMeta) GetSelfLink() string               { return meta.SelfLink }
0000000000000000000000000000000000000000;;	func (meta *ListMeta) SetSelfLink(selfLink string)       { meta.SelfLink = selfLink }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *ListMeta) GetListMeta() List { return obj }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *ObjectMeta) GetObjectMeta() Object { return obj }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Namespace implements metav1.Object for any object with an ObjectMeta typed field. Allows
0000000000000000000000000000000000000000;;	// fast, direct access to metadata fields for API objects.
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetNamespace() string                { return meta.Namespace }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetNamespace(namespace string)       { meta.Namespace = namespace }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetName() string                     { return meta.Name }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetName(name string)                 { meta.Name = name }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetGenerateName() string             { return meta.GenerateName }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetGenerateName(generateName string) { meta.GenerateName = generateName }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetUID() types.UID                   { return meta.UID }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetUID(uid types.UID)                { meta.UID = uid }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetResourceVersion() string          { return meta.ResourceVersion }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetResourceVersion(version string)   { meta.ResourceVersion = version }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetGeneration() int64                { return meta.Generation }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetGeneration(generation int64)      { meta.Generation = generation }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetSelfLink() string                 { return meta.SelfLink }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetSelfLink(selfLink string)         { meta.SelfLink = selfLink }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetCreationTimestamp() Time          { return meta.CreationTimestamp }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetCreationTimestamp(creationTimestamp Time) {
0000000000000000000000000000000000000000;;		meta.CreationTimestamp = creationTimestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetDeletionTimestamp() *Time { return meta.DeletionTimestamp }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetDeletionTimestamp(deletionTimestamp *Time) {
0000000000000000000000000000000000000000;;		meta.DeletionTimestamp = deletionTimestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetDeletionGracePeriodSeconds() *int64 { return meta.DeletionGracePeriodSeconds }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetDeletionGracePeriodSeconds(deletionGracePeriodSeconds *int64) {
0000000000000000000000000000000000000000;;		meta.DeletionGracePeriodSeconds = deletionGracePeriodSeconds
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetLabels() map[string]string                 { return meta.Labels }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetLabels(labels map[string]string)           { meta.Labels = labels }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetAnnotations() map[string]string            { return meta.Annotations }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetAnnotations(annotations map[string]string) { meta.Annotations = annotations }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetInitializers() *Initializers               { return meta.Initializers }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetInitializers(initializers *Initializers)   { meta.Initializers = initializers }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetFinalizers() []string                      { return meta.Finalizers }
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetFinalizers(finalizers []string)            { meta.Finalizers = finalizers }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetOwnerReferences() []OwnerReference {
0000000000000000000000000000000000000000;;		if meta.OwnerReferences == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := make([]OwnerReference, len(meta.OwnerReferences))
0000000000000000000000000000000000000000;;		for i := 0; i < len(meta.OwnerReferences); i++ {
0000000000000000000000000000000000000000;;			ret[i].Kind = meta.OwnerReferences[i].Kind
0000000000000000000000000000000000000000;;			ret[i].Name = meta.OwnerReferences[i].Name
0000000000000000000000000000000000000000;;			ret[i].UID = meta.OwnerReferences[i].UID
0000000000000000000000000000000000000000;;			ret[i].APIVersion = meta.OwnerReferences[i].APIVersion
0000000000000000000000000000000000000000;;			if meta.OwnerReferences[i].Controller != nil {
0000000000000000000000000000000000000000;;				value := *meta.OwnerReferences[i].Controller
0000000000000000000000000000000000000000;;				ret[i].Controller = &value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if meta.OwnerReferences[i].BlockOwnerDeletion != nil {
0000000000000000000000000000000000000000;;				value := *meta.OwnerReferences[i].BlockOwnerDeletion
0000000000000000000000000000000000000000;;				ret[i].BlockOwnerDeletion = &value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetOwnerReferences(references []OwnerReference) {
0000000000000000000000000000000000000000;;		if references == nil {
0000000000000000000000000000000000000000;;			meta.OwnerReferences = nil
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newReferences := make([]OwnerReference, len(references))
0000000000000000000000000000000000000000;;		for i := 0; i < len(references); i++ {
0000000000000000000000000000000000000000;;			newReferences[i].Kind = references[i].Kind
0000000000000000000000000000000000000000;;			newReferences[i].Name = references[i].Name
0000000000000000000000000000000000000000;;			newReferences[i].UID = references[i].UID
0000000000000000000000000000000000000000;;			newReferences[i].APIVersion = references[i].APIVersion
0000000000000000000000000000000000000000;;			if references[i].Controller != nil {
0000000000000000000000000000000000000000;;				value := *references[i].Controller
0000000000000000000000000000000000000000;;				newReferences[i].Controller = &value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if references[i].BlockOwnerDeletion != nil {
0000000000000000000000000000000000000000;;				value := *references[i].BlockOwnerDeletion
0000000000000000000000000000000000000000;;				newReferences[i].BlockOwnerDeletion = &value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		meta.OwnerReferences = newReferences
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) GetClusterName() string {
0000000000000000000000000000000000000000;;		return meta.ClusterName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (meta *ObjectMeta) SetClusterName(clusterName string) {
0000000000000000000000000000000000000000;;		meta.ClusterName = clusterName
0000000000000000000000000000000000000000;;	}
