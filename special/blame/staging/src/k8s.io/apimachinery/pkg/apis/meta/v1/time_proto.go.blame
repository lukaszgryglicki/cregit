0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timestamp is a struct that is equivalent to Time, but intended for
0000000000000000000000000000000000000000;;	// protobuf marshalling/unmarshalling. It is generated into a serialization
0000000000000000000000000000000000000000;;	// that matches Time. Do not use in Go structs.
0000000000000000000000000000000000000000;;	type Timestamp struct {
0000000000000000000000000000000000000000;;		// Represents seconds of UTC time since Unix epoch
0000000000000000000000000000000000000000;;		// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
0000000000000000000000000000000000000000;;		// 9999-12-31T23:59:59Z inclusive.
0000000000000000000000000000000000000000;;		Seconds int64 `json:"seconds" protobuf:"varint,1,opt,name=seconds"`
0000000000000000000000000000000000000000;;		// Non-negative fractions of a second at nanosecond resolution. Negative
0000000000000000000000000000000000000000;;		// second values with fractions must still have non-negative nanos values
0000000000000000000000000000000000000000;;		// that count forward in time. Must be from 0 to 999,999,999
0000000000000000000000000000000000000000;;		// inclusive. This field may be limited in precision depending on context.
0000000000000000000000000000000000000000;;		Nanos int32 `json:"nanos" protobuf:"varint,2,opt,name=nanos"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timestamp returns the Time as a new Timestamp value.
0000000000000000000000000000000000000000;;	func (m *Time) ProtoTime() *Timestamp {
0000000000000000000000000000000000000000;;		if m == nil {
0000000000000000000000000000000000000000;;			return &Timestamp{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Timestamp{
0000000000000000000000000000000000000000;;			Seconds: m.Time.Unix(),
0000000000000000000000000000000000000000;;			// leaving this here for the record.  our JSON only handled seconds, so this results in writes by
0000000000000000000000000000000000000000;;			// protobuf clients storing values that aren't read by json clients, which results in unexpected
0000000000000000000000000000000000000000;;			// field mutation, which fails various validation and equality code.
0000000000000000000000000000000000000000;;			// Nanos:   int32(m.Time.Nanosecond()),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Size implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *Time) Size() (n int) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoTime().Size()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reset implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *Time) Unmarshal(data []byte) error {
0000000000000000000000000000000000000000;;		if len(data) == 0 {
0000000000000000000000000000000000000000;;			m.Time = time.Time{}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p := Timestamp{}
0000000000000000000000000000000000000000;;		if err := p.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// leaving this here for the record.  our JSON only handled seconds, so this results in writes by
0000000000000000000000000000000000000000;;		// protobuf clients storing values that aren't read by json clients, which results in unexpected
0000000000000000000000000000000000000000;;		// field mutation, which fails various validation and equality code.
0000000000000000000000000000000000000000;;		// m.Time = time.Unix(p.Seconds, int64(p.Nanos)).Local()
0000000000000000000000000000000000000000;;		m.Time = time.Unix(p.Seconds, int64(0)).Local()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *Time) Marshal() (data []byte, err error) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoTime().Marshal()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalTo implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *Time) MarshalTo(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoTime().MarshalTo(data)
0000000000000000000000000000000000000000;;	}
