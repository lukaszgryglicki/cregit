0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
ba8aeff1a1372da5e0f8b543e133f79e92d45011;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timestamp is declared in time_proto.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timestamp returns the Time as a new Timestamp value.
0000000000000000000000000000000000000000;;	func (m *MicroTime) ProtoMicroTime() *Timestamp {
0000000000000000000000000000000000000000;;		if m == nil {
0000000000000000000000000000000000000000;;			return &Timestamp{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &Timestamp{
0000000000000000000000000000000000000000;;			Seconds: m.Time.Unix(),
0000000000000000000000000000000000000000;;			Nanos:   int32(m.Time.Nanosecond()),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Size implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *MicroTime) Size() (n int) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoMicroTime().Size()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Reset implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *MicroTime) Unmarshal(data []byte) error {
0000000000000000000000000000000000000000;;		if len(data) == 0 {
0000000000000000000000000000000000000000;;			m.Time = time.Time{}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p := Timestamp{}
0000000000000000000000000000000000000000;;		if err := p.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		m.Time = time.Unix(p.Seconds, int64(p.Nanos)).Local()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *MicroTime) Marshal() (data []byte, err error) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoMicroTime().Marshal()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalTo implements the protobuf marshalling interface.
0000000000000000000000000000000000000000;;	func (m *MicroTime) MarshalTo(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		if m == nil || m.Time.IsZero() {
0000000000000000000000000000000000000000;;			return 0, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return m.ProtoMicroTime().MarshalTo(data)
0000000000000000000000000000000000000000;;	}
