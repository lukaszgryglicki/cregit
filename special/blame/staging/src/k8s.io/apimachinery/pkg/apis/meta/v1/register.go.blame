0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name for this API.
0000000000000000000000000000000000000000;;	const GroupName = "meta.k8s.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unversioned is group version for unversioned API objects
0000000000000000000000000000000000000000;;	// TODO: this should be v1 probably
0000000000000000000000000000000000000000;;	var Unversioned = schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatchEventKind is name reserved for serializing watch events.
0000000000000000000000000000000000000000;;	const WatchEventKind = "WatchEvent"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind takes an unqualified kind and returns a Group qualified GroupKind
0000000000000000000000000000000000000000;;	func Kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithKind(kind).GroupKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddToGroupVersion registers common meta types into schemas.
0000000000000000000000000000000000000000;;	func AddToGroupVersion(scheme *runtime.Scheme, groupVersion schema.GroupVersion) {
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(groupVersion.WithKind(WatchEventKind), &WatchEvent{})
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(
0000000000000000000000000000000000000000;;			schema.GroupVersion{Group: groupVersion.Group, Version: runtime.APIVersionInternal}.WithKind(WatchEventKind),
0000000000000000000000000000000000000000;;			&InternalEvent{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// Supports legacy code paths, most callers should use metav1.ParameterCodec for now
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(groupVersion,
0000000000000000000000000000000000000000;;			&ListOptions{},
0000000000000000000000000000000000000000;;			&ExportOptions{},
0000000000000000000000000000000000000000;;			&GetOptions{},
0000000000000000000000000000000000000000;;			&DeleteOptions{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_versioned_Event_to_watch_Event,
0000000000000000000000000000000000000000;;			Convert_versioned_InternalEvent_to_versioned_Event,
0000000000000000000000000000000000000000;;			Convert_watch_Event_to_versioned_Event,
0000000000000000000000000000000000000000;;			Convert_versioned_Event_to_versioned_InternalEvent,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Register Unversioned types under their own special group
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(Unversioned,
0000000000000000000000000000000000000000;;			&Status{},
0000000000000000000000000000000000000000;;			&APIVersions{},
0000000000000000000000000000000000000000;;			&APIGroupList{},
0000000000000000000000000000000000000000;;			&APIGroup{},
0000000000000000000000000000000000000000;;			&APIResourceList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// register manually. This usually goes through the SchemeBuilder, which we cannot use here.
0000000000000000000000000000000000000000;;		scheme.AddGeneratedDeepCopyFuncs(GetGeneratedDeepCopyFuncs()...)
0000000000000000000000000000000000000000;;		AddConversionFuncs(scheme)
0000000000000000000000000000000000000000;;		RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// scheme is the registry for the common types that adhere to the meta v1 API spec.
0000000000000000000000000000000000000000;;	var scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterCodec knows about query parameters used with the meta v1 API spec.
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&ListOptions{},
0000000000000000000000000000000000000000;;			&ExportOptions{},
0000000000000000000000000000000000000000;;			&GetOptions{},
0000000000000000000000000000000000000000;;			&DeleteOptions{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// register manually. This usually goes through the SchemeBuilder, which we cannot use here.
0000000000000000000000000000000000000000;;		scheme.AddGeneratedDeepCopyFuncs(GetGeneratedDeepCopyFuncs()...)
0000000000000000000000000000000000000000;;		RegisterDefaults(scheme)
0000000000000000000000000000000000000000;;	}
