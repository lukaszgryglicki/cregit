0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ugorji/go/codec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GroupVersionHolder struct {
0000000000000000000000000000000000000000;;		GV GroupVersion `json:"val"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGroupVersionUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  []byte
0000000000000000000000000000000000000000;;			expect GroupVersion
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{[]byte(`{"val": "v1"}`), GroupVersion{"", "v1"}},
0000000000000000000000000000000000000000;;			{[]byte(`{"val": "extensions/v1beta1"}`), GroupVersion{"extensions", "v1beta1"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result GroupVersionHolder
0000000000000000000000000000000000000000;;			// test golang lib's JSON codec
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("JSON codec failed to unmarshal input '%v': %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(result.GV, c.expect) {
0000000000000000000000000000000000000000;;				t.Errorf("JSON codec failed to unmarshal input '%s': expected %+v, got %+v", c.input, c.expect, result.GV)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// test the Ugorji codec
0000000000000000000000000000000000000000;;			if err := codec.NewDecoderBytes(c.input, new(codec.JsonHandle)).Decode(&result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Ugorji codec failed to unmarshal input '%v': %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(result.GV, c.expect) {
0000000000000000000000000000000000000000;;				t.Errorf("Ugorji codec failed to unmarshal input '%s': expected %+v, got %+v", c.input, c.expect, result.GV)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGroupVersionMarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  GroupVersion
0000000000000000000000000000000000000000;;			expect []byte
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{GroupVersion{"", "v1"}, []byte(`{"val":"v1"}`)},
0000000000000000000000000000000000000000;;			{GroupVersion{"extensions", "v1beta1"}, []byte(`{"val":"extensions/v1beta1"}`)},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := GroupVersionHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(result, c.expect) {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input '%+v': expected: %s, got: %s", input, c.expect, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
