0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b203b91c4570389381fc1051522387197e3a6e47;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type metaObj struct {
0000000000000000000000000000000000000000;;		ObjectMeta
0000000000000000000000000000000000000000;;		TypeMeta
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewControllerRef(t *testing.T) {
0000000000000000000000000000000000000000;;		gvk := schema.GroupVersionKind{
0000000000000000000000000000000000000000;;			Group:   "group",
0000000000000000000000000000000000000000;;			Version: "v1",
0000000000000000000000000000000000000000;;			Kind:    "Kind",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj1 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				Name: "name",
0000000000000000000000000000000000000000;;				UID:  "uid1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controllerRef := NewControllerRef(obj1, gvk)
0000000000000000000000000000000000000000;;		if controllerRef.UID != obj1.UID {
0000000000000000000000000000000000000000;;			t.Errorf("Incorrect UID: %s", controllerRef.UID)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if controllerRef.Controller == nil || *controllerRef.Controller != true {
0000000000000000000000000000000000000000;;			t.Error("Controller must be set to true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if controllerRef.BlockOwnerDeletion == nil || *controllerRef.BlockOwnerDeletion != true {
0000000000000000000000000000000000000000;;			t.Error("BlockOwnerDeletion must be set to true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if controllerRef.APIVersion == "" ||
0000000000000000000000000000000000000000;;			controllerRef.Kind == "" ||
0000000000000000000000000000000000000000;;			controllerRef.Name == "" {
0000000000000000000000000000000000000000;;			t.Errorf("All controllerRef fields must be set: %v", controllerRef)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetControllerOf(t *testing.T) {
0000000000000000000000000000000000000000;;		gvk := schema.GroupVersionKind{
0000000000000000000000000000000000000000;;			Group:   "group",
0000000000000000000000000000000000000000;;			Version: "v1",
0000000000000000000000000000000000000000;;			Kind:    "Kind",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj1 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				UID:  "uid1",
0000000000000000000000000000000000000000;;				Name: "name1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		controllerRef := NewControllerRef(obj1, gvk)
0000000000000000000000000000000000000000;;		var falseRef = false
0000000000000000000000000000000000000000;;		obj2 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				UID:  "uid2",
0000000000000000000000000000000000000000;;				Name: "name1",
0000000000000000000000000000000000000000;;				OwnerReferences: []OwnerReference{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:       "owner1",
0000000000000000000000000000000000000000;;						Controller: &falseRef,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					*controllerRef,
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:       "owner2",
0000000000000000000000000000000000000000;;						Controller: &falseRef,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if GetControllerOf(obj1) != nil {
0000000000000000000000000000000000000000;;			t.Error("GetControllerOf must return null")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := GetControllerOf(obj2)
0000000000000000000000000000000000000000;;		if c.Name != controllerRef.Name || c.UID != controllerRef.UID {
0000000000000000000000000000000000000000;;			t.Errorf("Incorrect result of GetControllerOf: %v", c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsControlledBy(t *testing.T) {
0000000000000000000000000000000000000000;;		gvk := schema.GroupVersionKind{
0000000000000000000000000000000000000000;;			Group:   "group",
0000000000000000000000000000000000000000;;			Version: "v1",
0000000000000000000000000000000000000000;;			Kind:    "Kind",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj1 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				UID: "uid1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj2 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				UID: "uid2",
0000000000000000000000000000000000000000;;				OwnerReferences: []OwnerReference{
0000000000000000000000000000000000000000;;					*NewControllerRef(obj1, gvk),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		obj3 := &metaObj{
0000000000000000000000000000000000000000;;			ObjectMeta: ObjectMeta{
0000000000000000000000000000000000000000;;				UID: "uid3",
0000000000000000000000000000000000000000;;				OwnerReferences: []OwnerReference{
0000000000000000000000000000000000000000;;					*NewControllerRef(obj2, gvk),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsControlledBy(obj2, obj1) || !IsControlledBy(obj3, obj2) {
0000000000000000000000000000000000000000;;			t.Error("Incorrect IsControlledBy result: false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsControlledBy(obj3, obj1) {
0000000000000000000000000000000000000000;;			t.Error("Incorrect IsControlledBy result: true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
