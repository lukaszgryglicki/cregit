0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DurationHolder struct {
0000000000000000000000000000000000000000;;		D Duration `json:"d"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDurationMarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  Duration
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Duration{5 * time.Second}, "d: 5s\n"},
0000000000000000000000000000000000000000;;			{Duration{2 * time.Minute}, "d: 2m0s\n"},
0000000000000000000000000000000000000000;;			{Duration{time.Hour + 3*time.Millisecond}, "d: 1h0m0.003s\n"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := DurationHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := yaml.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: %q: %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: %q: expected %q, got %q", input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDurationUnmarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"d: 0s\n", Duration{}},
0000000000000000000000000000000000000000;;			{"d: 5s\n", Duration{5 * time.Second}},
0000000000000000000000000000000000000000;;			{"d: 2m0s\n", Duration{2 * time.Minute}},
0000000000000000000000000000000000000000;;			{"d: 1h0m0.003s\n", Duration{time.Hour + 3*time.Millisecond}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Units with zero values can optionally be dropped
0000000000000000000000000000000000000000;;			{"d: 2m\n", Duration{2 * time.Minute}},
0000000000000000000000000000000000000000;;			{"d: 1h0.003s\n", Duration{time.Hour + 3*time.Millisecond}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result DurationHolder
0000000000000000000000000000000000000000;;			if err := yaml.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input %q: %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result.D != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input %q: expected %q, got %q", c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDurationMarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  Duration
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Duration{5 * time.Second}, `{"d":"5s"}`},
0000000000000000000000000000000000000000;;			{Duration{2 * time.Minute}, `{"d":"2m0s"}`},
0000000000000000000000000000000000000000;;			{Duration{time.Hour + 3*time.Millisecond}, `{"d":"1h0m0.003s"}`},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := DurationHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: %q: %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input: %q: expected %q, got %q", input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDurationUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{`{"d":"0s"}`, Duration{}},
0000000000000000000000000000000000000000;;			{`{"d":"5s"}`, Duration{5 * time.Second}},
0000000000000000000000000000000000000000;;			{`{"d":"2m0s"}`, Duration{2 * time.Minute}},
0000000000000000000000000000000000000000;;			{`{"d":"1h0m0.003s"}`, Duration{time.Hour + 3*time.Millisecond}},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Units with zero values can optionally be dropped
0000000000000000000000000000000000000000;;			{`{"d":"2m"}`, Duration{2 * time.Minute}},
0000000000000000000000000000000000000000;;			{`{"d":"1h0.003s"}`, Duration{time.Hour + 3*time.Millisecond}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result DurationHolder
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input %q: %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result.D != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input %q: expected %q, got %q", c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDurationMarshalJSONUnmarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input Duration
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Duration{}},
0000000000000000000000000000000000000000;;			{Duration{5 * time.Second}},
0000000000000000000000000000000000000000;;			{Duration{2 * time.Minute}},
0000000000000000000000000000000000000000;;			{Duration{time.Hour + 3*time.Millisecond}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			input := DurationHolder{c.input}
0000000000000000000000000000000000000000;;			jsonMarshalled, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d-1: Failed to marshal input: '%v': %v", i, input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var result DurationHolder
0000000000000000000000000000000000000000;;			if err := yaml.Unmarshal(jsonMarshalled, &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d-2: Failed to unmarshal '%+v': %v", i, string(jsonMarshalled), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if input.D != result.D {
0000000000000000000000000000000000000000;;				t.Errorf("%d-4: Failed to marshal input '%#v': got %#v", i, input, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
