0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
080f4e2b08b44ae35eb18c0e03a721bdf44dd8c9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fuzzer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/google/gofuzz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		runtimeserializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// overrideGenericFuncs override some generic fuzzer funcs from k8s.io/apimachinery in order to have more realistic
0000000000000000000000000000000000000000;;	// values in a Kubernetes context.
0000000000000000000000000000000000000000;;	func overrideGenericFuncs(t apitesting.TestingCommon, codecs runtimeserializer.CodecFactory) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(j *runtime.Object, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// TODO: uncomment when round trip starts from a versioned object
0000000000000000000000000000000000000000;;				if true { //c.RandBool() {
0000000000000000000000000000000000000000;;					*j = &runtime.Unknown{
0000000000000000000000000000000000000000;;						// We do not set TypeMeta here because it is not carried through a round trip
0000000000000000000000000000000000000000;;						Raw:         []byte(`{"apiVersion":"unknown.group/unknown","kind":"Something","someKey":"someValue"}`),
0000000000000000000000000000000000000000;;						ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					types := []runtime.Object{&testapigroup.Carp{}}
0000000000000000000000000000000000000000;;					t := types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;					c.Fuzz(t)
0000000000000000000000000000000000000000;;					*j = t
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(r *runtime.RawExtension, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				// Pick an arbitrary type and fuzz it
0000000000000000000000000000000000000000;;				types := []runtime.Object{&testapigroup.Carp{}}
0000000000000000000000000000000000000000;;				obj := types[c.Rand.Intn(len(types))]
0000000000000000000000000000000000000000;;				c.Fuzz(obj)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Convert the object to raw bytes
0000000000000000000000000000000000000000;;				bytes, err := runtime.Encode(apitesting.TestCodec(codecs, v1.SchemeGroupVersion), obj)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Failed to encode object: %v", err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Set the bytes field on the RawExtension
0000000000000000000000000000000000000000;;				r.Raw = bytes
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testapigroupFuncs(t apitesting.TestingCommon) []interface{} {
0000000000000000000000000000000000000000;;		return []interface{}{
0000000000000000000000000000000000000000;;			func(s *testapigroup.CarpSpec, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				c.FuzzNoCustom(s)
0000000000000000000000000000000000000000;;				// has a default value
0000000000000000000000000000000000000000;;				ttl := int64(30)
0000000000000000000000000000000000000000;;				if c.RandBool() {
0000000000000000000000000000000000000000;;					ttl = int64(c.Uint32())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				s.TerminationGracePeriodSeconds = &ttl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if s.SchedulerName == "" {
0000000000000000000000000000000000000000;;					s.SchedulerName = "default-scheduler"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(j *testapigroup.CarpPhase, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				statuses := []testapigroup.CarpPhase{"Pending", "Running", "Succeeded", "Failed", "Unknown"}
0000000000000000000000000000000000000000;;				*j = statuses[c.Rand.Intn(len(statuses))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(rp *testapigroup.RestartPolicy, c fuzz.Continue) {
0000000000000000000000000000000000000000;;				policies := []testapigroup.RestartPolicy{"Always", "Never", "OnFailure"}
0000000000000000000000000000000000000000;;				*rp = policies[c.Rand.Intn(len(policies))]
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Funcs(t apitesting.TestingCommon, codecs runtimeserializer.CodecFactory) []interface{} {
0000000000000000000000000000000000000000;;		return apitesting.MergeFuzzerFuncs(t,
0000000000000000000000000000000000000000;;			apitesting.GenericFuzzerFuncs(t, codecs),
0000000000000000000000000000000000000000;;			overrideGenericFuncs(t, codecs),
0000000000000000000000000000000000000000;;			testapigroupFuncs(t),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
