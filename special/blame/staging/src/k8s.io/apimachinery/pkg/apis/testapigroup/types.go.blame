0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
080f4e2b08b44ae35eb18c0e03a721bdf44dd8c9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testapigroup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		ConditionStatus   string
0000000000000000000000000000000000000000;;		CarpConditionType string
0000000000000000000000000000000000000000;;		CarpPhase         string
0000000000000000000000000000000000000000;;		RestartPolicy     string
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Carp is a collection of containers, used as either input (create, update) or as output (list, get).
0000000000000000000000000000000000000000;;	type Carp struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec defines the behavior of a carp.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec CarpSpec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status represents the current information about a carp. This data may not be up
0000000000000000000000000000000000000000;;		// to date.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status CarpStatus
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpStatus represents information about the status of a carp. Status may trail the actual
0000000000000000000000000000000000000000;;	// state of a system.
0000000000000000000000000000000000000000;;	type CarpStatus struct {
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Phase CarpPhase
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Conditions []CarpCondition
0000000000000000000000000000000000000000;;		// A human readable message indicating details about why the carp is in this state.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;		// A brief CamelCase message indicating details about why the carp is in this state. e.g. 'OutOfDisk'
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HostIP string
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CarpIP string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Date and time at which the object was acknowledged by the Kubelet.
0000000000000000000000000000000000000000;;		// This is before the Kubelet pulled the container image(s) for the carp.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartTime *metav1.Time
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CarpCondition struct {
0000000000000000000000000000000000000000;;		Type   CarpConditionType
0000000000000000000000000000000000000000;;		Status ConditionStatus
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastProbeTime metav1.Time
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpSpec is a description of a carp
0000000000000000000000000000000000000000;;	type CarpSpec struct {
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		RestartPolicy RestartPolicy
0000000000000000000000000000000000000000;;		// Optional duration in seconds the carp needs to terminate gracefully. May be decreased in delete request.
0000000000000000000000000000000000000000;;		// Value must be non-negative integer. The value zero indicates delete immediately.
0000000000000000000000000000000000000000;;		// If this value is nil, the default grace period will be used instead.
0000000000000000000000000000000000000000;;		// The grace period is the duration in seconds after the processes running in the carp are sent
0000000000000000000000000000000000000000;;		// a termination signal and the time when the processes are forcibly halted with a kill signal.
0000000000000000000000000000000000000000;;		// Set this value longer than the expected cleanup time for your process.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TerminationGracePeriodSeconds *int64
0000000000000000000000000000000000000000;;		// Optional duration in seconds relative to the StartTime that the carp may be active on a node
0000000000000000000000000000000000000000;;		// before the system actively tries to terminate the carp; value must be positive integer
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ActiveDeadlineSeconds *int64
0000000000000000000000000000000000000000;;		// NodeSelector is a selector which must be true for the carp to fit on a node
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NodeSelector map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceAccountName is the name of the ServiceAccount to use to run this carp
0000000000000000000000000000000000000000;;		// The carp will be allowed to use secrets referenced by the ServiceAccount
0000000000000000000000000000000000000000;;		ServiceAccountName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodeName is a request to schedule this carp onto a specific node.  If it is non-empty,
0000000000000000000000000000000000000000;;		// the scheduler simply schedules this carp onto that node, assuming that it fits resource
0000000000000000000000000000000000000000;;		// requirements.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NodeName string
0000000000000000000000000000000000000000;;		// Specifies the hostname of the Carp.
0000000000000000000000000000000000000000;;		// If not specified, the carp's hostname will be set to a system-defined value.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Hostname string
0000000000000000000000000000000000000000;;		// If specified, the fully qualified Carp hostname will be "<hostname>.<subdomain>.<carp namespace>.svc.<cluster domain>".
0000000000000000000000000000000000000000;;		// If not specified, the carp will not have a domainname at all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Subdomain string
0000000000000000000000000000000000000000;;		// If specified, the carp will be dispatched by specified scheduler.
0000000000000000000000000000000000000000;;		// If not specified, the carp will be dispatched by default scheduler.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		SchedulerName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpList is a list of Carps.
0000000000000000000000000000000000000000;;	type CarpList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Items []Carp
0000000000000000000000000000000000000000;;	}
