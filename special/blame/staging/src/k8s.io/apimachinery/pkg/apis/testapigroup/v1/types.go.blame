0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
080f4e2b08b44ae35eb18c0e03a721bdf44dd8c9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		ConditionStatus   string
0000000000000000000000000000000000000000;;		CarpConditionType string
0000000000000000000000000000000000000000;;		CarpPhase         string
0000000000000000000000000000000000000000;;		RestartPolicy     string
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Carp is a collection of containers, used as either input (create, update) or as output (list, get).
0000000000000000000000000000000000000000;;	type Carp struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Specification of the desired behavior of the carp.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Spec CarpSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Most recently observed status of the carp.
0000000000000000000000000000000000000000;;		// This data may not be up to date.
0000000000000000000000000000000000000000;;		// Populated by the system.
0000000000000000000000000000000000000000;;		// Read-only.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Status CarpStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpStatus represents information about the status of a carp. Status may trail the actual
0000000000000000000000000000000000000000;;	// state of a system.
0000000000000000000000000000000000000000;;	type CarpStatus struct {
0000000000000000000000000000000000000000;;		// Current condition of the carp.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carp-states#carp-phase
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Phase CarpPhase `json:"phase,omitempty" protobuf:"bytes,1,opt,name=phase,casttype=CarpPhase"`
0000000000000000000000000000000000000000;;		// Current service state of carp.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carp-states#carp-conditions
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Conditions []CarpCondition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,2,rep,name=conditions"`
0000000000000000000000000000000000000000;;		// A human readable message indicating details about why the carp is in this condition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,3,opt,name=message"`
0000000000000000000000000000000000000000;;		// A brief CamelCase message indicating details about why the carp is in this state.
0000000000000000000000000000000000000000;;		// e.g. 'OutOfDisk'
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,4,opt,name=reason"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IP address of the host to which the carp is assigned. Empty if not yet scheduled.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HostIP string `json:"hostIP,omitempty" protobuf:"bytes,5,opt,name=hostIP"`
0000000000000000000000000000000000000000;;		// IP address allocated to the carp. Routable at least within the cluster.
0000000000000000000000000000000000000000;;		// Empty if not yet allocated.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CarpIP string `json:"carpIP,omitempty" protobuf:"bytes,6,opt,name=carpIP"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RFC 3339 date and time at which the object was acknowledged by the Kubelet.
0000000000000000000000000000000000000000;;		// This is before the Kubelet pulled the container image(s) for the carp.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		StartTime *metav1.Time `json:"startTime,omitempty" protobuf:"bytes,7,opt,name=startTime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CarpCondition struct {
0000000000000000000000000000000000000000;;		// Type is the type of the condition.
0000000000000000000000000000000000000000;;		// Currently only Ready.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carp-states#carp-conditions
0000000000000000000000000000000000000000;;		Type CarpConditionType `json:"type" protobuf:"bytes,1,opt,name=type,casttype=CarpConditionType"`
0000000000000000000000000000000000000000;;		// Status is the status of the condition.
0000000000000000000000000000000000000000;;		// Can be True, False, Unknown.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carp-states#carp-conditions
0000000000000000000000000000000000000000;;		Status ConditionStatus `json:"status" protobuf:"bytes,2,opt,name=status,casttype=ConditionStatus"`
0000000000000000000000000000000000000000;;		// Last time we probed the condition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastProbeTime metav1.Time `json:"lastProbeTime,omitempty" protobuf:"bytes,3,opt,name=lastProbeTime"`
0000000000000000000000000000000000000000;;		// Last time the condition transitioned from one status to another.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty" protobuf:"bytes,4,opt,name=lastTransitionTime"`
0000000000000000000000000000000000000000;;		// Unique, one-word, CamelCase reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,5,opt,name=reason"`
0000000000000000000000000000000000000000;;		// Human-readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,6,opt,name=message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpSpec is a description of a carp
0000000000000000000000000000000000000000;;	type CarpSpec struct {
0000000000000000000000000000000000000000;;		// Restart policy for all containers within the carp.
0000000000000000000000000000000000000000;;		// One of Always, OnFailure, Never.
0000000000000000000000000000000000000000;;		// Default to Always.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carp-states#restartpolicy
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		RestartPolicy RestartPolicy `json:"restartPolicy,omitempty" protobuf:"bytes,3,opt,name=restartPolicy,casttype=RestartPolicy"`
0000000000000000000000000000000000000000;;		// Optional duration in seconds the carp needs to terminate gracefully. May be decreased in delete request.
0000000000000000000000000000000000000000;;		// Value must be non-negative integer. The value zero indicates delete immediately.
0000000000000000000000000000000000000000;;		// If this value is nil, the default grace period will be used instead.
0000000000000000000000000000000000000000;;		// The grace period is the duration in seconds after the processes running in the carp are sent
0000000000000000000000000000000000000000;;		// a termination signal and the time when the processes are forcibly halted with a kill signal.
0000000000000000000000000000000000000000;;		// Set this value longer than the expected cleanup time for your process.
0000000000000000000000000000000000000000;;		// Defaults to 30 seconds.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty" protobuf:"varint,4,opt,name=terminationGracePeriodSeconds"`
0000000000000000000000000000000000000000;;		// Optional duration in seconds the carp may be active on the node relative to
0000000000000000000000000000000000000000;;		// StartTime before the system will actively try to mark it failed and kill associated containers.
0000000000000000000000000000000000000000;;		// Value must be a positive integer.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ActiveDeadlineSeconds *int64 `json:"activeDeadlineSeconds,omitempty" protobuf:"varint,5,opt,name=activeDeadlineSeconds"`
0000000000000000000000000000000000000000;;		// NodeSelector is a selector which must be true for the carp to fit on a node.
0000000000000000000000000000000000000000;;		// Selector which must match a node's labels for the carp to be scheduled on that node.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/node-selection/README
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NodeSelector map[string]string `json:"nodeSelector,omitempty" protobuf:"bytes,7,rep,name=nodeSelector"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceAccountName is the name of the ServiceAccount to use to run this carp.
0000000000000000000000000000000000000000;;		// More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ServiceAccountName string `json:"serviceAccountName,omitempty" protobuf:"bytes,8,opt,name=serviceAccountName"`
0000000000000000000000000000000000000000;;		// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
0000000000000000000000000000000000000000;;		// Deprecated: Use serviceAccountName instead.
0000000000000000000000000000000000000000;;		// +k8s:conversion-gen=false
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		DeprecatedServiceAccount string `json:"serviceAccount,omitempty" protobuf:"bytes,9,opt,name=serviceAccount"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodeName is a request to schedule this carp onto a specific node. If it is non-empty,
0000000000000000000000000000000000000000;;		// the scheduler simply schedules this carp onto that node, assuming that it fits resource
0000000000000000000000000000000000000000;;		// requirements.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		NodeName string `json:"nodeName,omitempty" protobuf:"bytes,10,opt,name=nodeName"`
0000000000000000000000000000000000000000;;		// Host networking requested for this carp. Use the host's network namespace.
0000000000000000000000000000000000000000;;		// If this option is set, the ports that will be used must be specified.
0000000000000000000000000000000000000000;;		// Default to false.
0000000000000000000000000000000000000000;;		// +k8s:conversion-gen=false
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HostNetwork bool `json:"hostNetwork,omitempty" protobuf:"varint,11,opt,name=hostNetwork"`
0000000000000000000000000000000000000000;;		// Use the host's pid namespace.
0000000000000000000000000000000000000000;;		// Optional: Default to false.
0000000000000000000000000000000000000000;;		// +k8s:conversion-gen=false
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HostPID bool `json:"hostPID,omitempty" protobuf:"varint,12,opt,name=hostPID"`
0000000000000000000000000000000000000000;;		// Use the host's ipc namespace.
0000000000000000000000000000000000000000;;		// Optional: Default to false.
0000000000000000000000000000000000000000;;		// +k8s:conversion-gen=false
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		HostIPC bool `json:"hostIPC,omitempty" protobuf:"varint,13,opt,name=hostIPC"`
0000000000000000000000000000000000000000;;		// Specifies the hostname of the Carp
0000000000000000000000000000000000000000;;		// If not specified, the carp's hostname will be set to a system-defined value.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Hostname string `json:"hostname,omitempty" protobuf:"bytes,16,opt,name=hostname"`
0000000000000000000000000000000000000000;;		// If specified, the fully qualified Carp hostname will be "<hostname>.<subdomain>.<carp namespace>.svc.<cluster domain>".
0000000000000000000000000000000000000000;;		// If not specified, the carp will not have a domainname at all.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Subdomain string `json:"subdomain,omitempty" protobuf:"bytes,17,opt,name=subdomain"`
0000000000000000000000000000000000000000;;		// If specified, the carp will be dispatched by specified scheduler.
0000000000000000000000000000000000000000;;		// If not specified, the carp will be dispatched by default scheduler.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		SchedulerName string `json:"schedulername,omitempty" protobuf:"bytes,19,opt,name=schedulername"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CarpList is a list of Carps.
0000000000000000000000000000000000000000;;	type CarpList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of carps.
0000000000000000000000000000000000000000;;		// More info: http://kubernetes.io/docs/user-guide/carps
0000000000000000000000000000000000000000;;		Items []Carp `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
