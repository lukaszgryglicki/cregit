0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ugorji/go/codec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerbsUgorjiMarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  APIResource
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{APIResource{}, `{"name":"","singularName":"","namespaced":false,"kind":"","verbs":null}`},
0000000000000000000000000000000000000000;;			{APIResource{Verbs: Verbs([]string{})}, `{"name":"","singularName":"","namespaced":false,"kind":"","verbs":[]}`},
0000000000000000000000000000000000000000;;			{APIResource{Verbs: Verbs([]string{"delete"})}, `{"name":"","singularName":"","namespaced":false,"kind":"","verbs":["delete"]}`},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&c.input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to marshal input: '%v': %v", i, c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to marshal input: '%v': expected '%v', got '%v'", i, c.input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerbsUgorjiUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result APIResource
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{`{}`, APIResource{}},
0000000000000000000000000000000000000000;;			{`{"verbs":null}`, APIResource{}},
0000000000000000000000000000000000000000;;			{`{"verbs":[]}`, APIResource{Verbs: Verbs([]string{})}},
0000000000000000000000000000000000000000;;			{`{"verbs":["delete"]}`, APIResource{Verbs: Verbs([]string{"delete"})}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			var result APIResource
0000000000000000000000000000000000000000;;			if err := codec.NewDecoderBytes([]byte(c.input), new(codec.JsonHandle)).Decode(&result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to unmarshal input '%v': %v", i, c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(result, c.result) {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to unmarshal input '%v': expected %+v, got %+v", i, c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestUgorjiMarshalJSONWithOmit tests that we don't have regressions regarding nil and empty slices with "omit"
0000000000000000000000000000000000000000;;	func TestUgorjiMarshalJSONWithOmit(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  LabelSelector
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{LabelSelector{}, `{}`},
0000000000000000000000000000000000000000;;			{LabelSelector{MatchExpressions: []LabelSelectorRequirement{}}, `{}`},
0000000000000000000000000000000000000000;;			{LabelSelector{MatchExpressions: []LabelSelectorRequirement{{}}}, `{"matchExpressions":[{"key":"","operator":""}]}`},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&c.input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to marshal input: '%v': %v", i, c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to marshal input: '%v': expected '%v', got '%v'", i, c.input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerbsUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result APIResource
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{`{}`, APIResource{}},
0000000000000000000000000000000000000000;;			{`{"verbs":null}`, APIResource{}},
0000000000000000000000000000000000000000;;			{`{"verbs":[]}`, APIResource{Verbs: Verbs([]string{})}},
0000000000000000000000000000000000000000;;			{`{"verbs":["delete"]}`, APIResource{Verbs: Verbs([]string{"delete"})}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, c := range cases {
0000000000000000000000000000000000000000;;			var result APIResource
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to unmarshal input '%v': %v", i, c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(result, c.result) {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Failed to unmarshal input '%v': expected %+v, got %+v", i, c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVerbsProto(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []APIResource{
0000000000000000000000000000000000000000;;			{},
0000000000000000000000000000000000000000;;			{Verbs: Verbs([]string{})},
0000000000000000000000000000000000000000;;			{Verbs: Verbs([]string{"delete"})},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, input := range cases {
0000000000000000000000000000000000000000;;			data, err := input.Marshal()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to marshal input: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resource := APIResource{}
0000000000000000000000000000000000000000;;			if err := resource.Unmarshal(data); err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Failed to unmarshal output: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(input, resource) {
0000000000000000000000000000000000000000;;				t.Errorf("Marshal->Unmarshal is not idempotent: '%v' vs '%v'", input, resource)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
