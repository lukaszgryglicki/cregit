0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
647b003e077d7a44b43c1bde41b4bea0651e23cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCloneSelectorAndAddLabel(t *testing.T) {
0000000000000000000000000000000000000000;;		labels := map[string]string{
0000000000000000000000000000000000000000;;			"foo1": "bar1",
0000000000000000000000000000000000000000;;			"foo2": "bar2",
0000000000000000000000000000000000000000;;			"foo3": "bar3",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			labels     map[string]string
0000000000000000000000000000000000000000;;			labelKey   string
0000000000000000000000000000000000000000;;			labelValue string
0000000000000000000000000000000000000000;;			want       map[string]string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: labels,
0000000000000000000000000000000000000000;;				want:   labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels:     labels,
0000000000000000000000000000000000000000;;				labelKey:   "foo4",
0000000000000000000000000000000000000000;;				labelValue: "89",
0000000000000000000000000000000000000000;;				want: map[string]string{
0000000000000000000000000000000000000000;;					"foo1": "bar1",
0000000000000000000000000000000000000000;;					"foo2": "bar2",
0000000000000000000000000000000000000000;;					"foo3": "bar3",
0000000000000000000000000000000000000000;;					"foo4": "89",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels:     nil,
0000000000000000000000000000000000000000;;				labelKey:   "foo4",
0000000000000000000000000000000000000000;;				labelValue: "12",
0000000000000000000000000000000000000000;;				want: map[string]string{
0000000000000000000000000000000000000000;;					"foo4": "12",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			ls_in := LabelSelector{MatchLabels: tc.labels}
0000000000000000000000000000000000000000;;			ls_out := LabelSelector{MatchLabels: tc.want}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got := CloneSelectorAndAddLabel(&ls_in, tc.labelKey, tc.labelValue)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, &ls_out) {
0000000000000000000000000000000000000000;;				t.Errorf("got %v, want %v", got, tc.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddLabelToSelector(t *testing.T) {
0000000000000000000000000000000000000000;;		labels := map[string]string{
0000000000000000000000000000000000000000;;			"foo1": "bar1",
0000000000000000000000000000000000000000;;			"foo2": "bar2",
0000000000000000000000000000000000000000;;			"foo3": "bar3",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			labels     map[string]string
0000000000000000000000000000000000000000;;			labelKey   string
0000000000000000000000000000000000000000;;			labelValue string
0000000000000000000000000000000000000000;;			want       map[string]string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels: labels,
0000000000000000000000000000000000000000;;				want:   labels,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels:     labels,
0000000000000000000000000000000000000000;;				labelKey:   "foo4",
0000000000000000000000000000000000000000;;				labelValue: "89",
0000000000000000000000000000000000000000;;				want: map[string]string{
0000000000000000000000000000000000000000;;					"foo1": "bar1",
0000000000000000000000000000000000000000;;					"foo2": "bar2",
0000000000000000000000000000000000000000;;					"foo3": "bar3",
0000000000000000000000000000000000000000;;					"foo4": "89",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				labels:     nil,
0000000000000000000000000000000000000000;;				labelKey:   "foo4",
0000000000000000000000000000000000000000;;				labelValue: "12",
0000000000000000000000000000000000000000;;				want: map[string]string{
0000000000000000000000000000000000000000;;					"foo4": "12",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range cases {
0000000000000000000000000000000000000000;;			ls_in := LabelSelector{MatchLabels: tc.labels}
0000000000000000000000000000000000000000;;			ls_out := LabelSelector{MatchLabels: tc.want}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got := AddLabelToSelector(&ls_in, tc.labelKey, tc.labelValue)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, &ls_out) {
0000000000000000000000000000000000000000;;				t.Errorf("got %v, want %v", got, tc.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
