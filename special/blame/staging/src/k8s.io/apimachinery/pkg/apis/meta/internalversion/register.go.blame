0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
647b003e077d7a44b43c1bde41b4bea0651e23cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupName is the group name for this API.
0000000000000000000000000000000000000000;;	const GroupName = "meta.k8s.io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scheme is the registry for any type that adheres to the meta API spec.
0000000000000000000000000000000000000000;;	var scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copier exposes copying on this scheme.
0000000000000000000000000000000000000000;;	var Copier runtime.ObjectCopier = scheme
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Codecs provides access to encoding and decoding for the scheme.
0000000000000000000000000000000000000000;;	var Codecs = serializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeGroupVersion is group version used to register these objects
0000000000000000000000000000000000000000;;	var SchemeGroupVersion = schema.GroupVersion{Group: GroupName, Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParameterCodec handles versioning of objects that are converted to query parameters.
0000000000000000000000000000000000000000;;	var ParameterCodec = runtime.NewParameterCodec(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Kind takes an unqualified kind and returns a Group qualified GroupKind
0000000000000000000000000000000000000000;;	func Kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return SchemeGroupVersion.WithKind(kind).GroupKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// addToGroupVersion registers common meta types into schemas.
0000000000000000000000000000000000000000;;	func addToGroupVersion(scheme *runtime.Scheme, groupVersion schema.GroupVersion) error {
0000000000000000000000000000000000000000;;		if err := scheme.AddIgnoredConversionType(&metav1.TypeMeta{}, &metav1.TypeMeta{}); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			metav1.Convert_string_To_labels_Selector,
0000000000000000000000000000000000000000;;			metav1.Convert_labels_Selector_To_string,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			metav1.Convert_string_To_fields_Selector,
0000000000000000000000000000000000000000;;			metav1.Convert_fields_Selector_To_string,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_map_to_v1_LabelSelector,
0000000000000000000000000000000000000000;;			Convert_v1_LabelSelector_to_map,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_internalversion_ListOptions_To_v1_ListOptions,
0000000000000000000000000000000000000000;;			Convert_v1_ListOptions_To_internalversion_ListOptions,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// ListOptions is the only options struct which needs conversion (it exposes labels and fields
0000000000000000000000000000000000000000;;		// as selectors for convenience). The other types have only a single representation today.
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&ListOptions{},
0000000000000000000000000000000000000000;;			&metav1.GetOptions{},
0000000000000000000000000000000000000000;;			&metav1.ExportOptions{},
0000000000000000000000000000000000000000;;			&metav1.DeleteOptions{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&metav1alpha1.Table{},
0000000000000000000000000000000000000000;;			&metav1alpha1.TableOptions{},
0000000000000000000000000000000000000000;;			&metav1alpha1.PartialObjectMetadata{},
0000000000000000000000000000000000000000;;			&metav1alpha1.PartialObjectMetadataList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(metav1alpha1.SchemeGroupVersion,
0000000000000000000000000000000000000000;;			&metav1alpha1.Table{},
0000000000000000000000000000000000000000;;			&metav1alpha1.TableOptions{},
0000000000000000000000000000000000000000;;			&metav1alpha1.PartialObjectMetadata{},
0000000000000000000000000000000000000000;;			&metav1alpha1.PartialObjectMetadataList{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		// Allow delete options to be decoded across all version in this scheme (we may want to be more clever than this)
0000000000000000000000000000000000000000;;		scheme.AddUnversionedTypes(SchemeGroupVersion, &metav1.DeleteOptions{})
0000000000000000000000000000000000000000;;		metav1.AddToGroupVersion(scheme, metav1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unlike other API groups, meta internal knows about all meta external versions, but keeps
0000000000000000000000000000000000000000;;	// the logic for conversion private.
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		if err := addToGroupVersion(scheme, SchemeGroupVersion); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
