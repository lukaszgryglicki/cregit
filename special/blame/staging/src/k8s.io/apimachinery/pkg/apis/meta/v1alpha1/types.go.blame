0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
a83e52a4771d6dceb68ba7362e30bf5d8eca2c07;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// package v1alpha1 is alpha objects from meta that will be introduced.
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Table does not generate to protobuf because of the interface{} - fix protobuf
0000000000000000000000000000000000000000;;	//   generation to support a meta type that can accept any valid JSON.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Table is a tabular representation of a set of API resources. The server transforms the
0000000000000000000000000000000000000000;;	// object into a set of preferred columns for quickly reviewing the objects.
0000000000000000000000000000000000000000;;	// +protobuf=false
0000000000000000000000000000000000000000;;	type Table struct {
0000000000000000000000000000000000000000;;		v1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		v1.ListMeta `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// columnDefinitions describes each column in the returned items array. The number of cells per row
0000000000000000000000000000000000000000;;		// will always match the number of column definitions.
0000000000000000000000000000000000000000;;		ColumnDefinitions []TableColumnDefinition `json:"columnDefinitions"`
0000000000000000000000000000000000000000;;		// rows is the list of items in the table.
0000000000000000000000000000000000000000;;		Rows []TableRow `json:"rows"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TableColumnDefinition contains information about a column returned in the Table.
0000000000000000000000000000000000000000;;	// +protobuf=false
0000000000000000000000000000000000000000;;	type TableColumnDefinition struct {
0000000000000000000000000000000000000000;;		// name is a human readable name for the column.
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// type is an OpenAPI type definition for this column.
0000000000000000000000000000000000000000;;		// See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.
0000000000000000000000000000000000000000;;		Type string `json:"type"`
0000000000000000000000000000000000000000;;		// format is an optional OpenAPI type definition for this column. The 'name' format is applied
0000000000000000000000000000000000000000;;		// to the primary identifier column to assist in clients identifying column is the resource name.
0000000000000000000000000000000000000000;;		// See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.
0000000000000000000000000000000000000000;;		Format string `json:"format"`
0000000000000000000000000000000000000000;;		// description is a human readable description of this column.
0000000000000000000000000000000000000000;;		Description string `json:"description"`
0000000000000000000000000000000000000000;;		// priority is an integer defining the relative importance of this column compared to others. Lower
0000000000000000000000000000000000000000;;		// numbers are considered higher priority. Columns that may be omitted in limited space scenarios
0000000000000000000000000000000000000000;;		// should be given a higher priority.
0000000000000000000000000000000000000000;;		Priority int32 `json:"priority"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TableRow is an individual row in a table.
0000000000000000000000000000000000000000;;	// +protobuf=false
0000000000000000000000000000000000000000;;	type TableRow struct {
0000000000000000000000000000000000000000;;		// cells will be as wide as headers and may contain strings, numbers, booleans, simple maps, or lists, or
0000000000000000000000000000000000000000;;		// null. See the type field of the column definition for a more detailed description.
0000000000000000000000000000000000000000;;		Cells []interface{} `json:"cells"`
0000000000000000000000000000000000000000;;		// conditions describe additional status of a row that are relevant for a human user.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Conditions []TableRowCondition `json:"conditions,omitempty"`
0000000000000000000000000000000000000000;;		// This field contains the requested additional information about each object based on the includeObject
0000000000000000000000000000000000000000;;		// policy when requesting the Table. If "None", this field is empty, if "Object" this will be the
0000000000000000000000000000000000000000;;		// default serialization of the object for the current API version, and if "Metadata" (the default) will
0000000000000000000000000000000000000000;;		// contain the object metadata. Check the returned kind and apiVersion of the object before parsing.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Object runtime.RawExtension `json:"object,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TableRowCondition allows a row to be marked with additional information.
0000000000000000000000000000000000000000;;	// +protobuf=false
0000000000000000000000000000000000000000;;	type TableRowCondition struct {
0000000000000000000000000000000000000000;;		// Type of row condition.
0000000000000000000000000000000000000000;;		Type RowConditionType `json:"type"`
0000000000000000000000000000000000000000;;		// Status of the condition, one of True, False, Unknown.
0000000000000000000000000000000000000000;;		Status ConditionStatus `json:"status"`
0000000000000000000000000000000000000000;;		// (brief) machine readable reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty"`
0000000000000000000000000000000000000000;;		// Human readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RowConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid conditions of a row. This list is not exhaustive and new conditions may be
0000000000000000000000000000000000000000;;	// inculded by other resources.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// RowCompleted means the underlying resource has reached completion and may be given less
0000000000000000000000000000000000000000;;		// visual priority than other resources.
0000000000000000000000000000000000000000;;		RowCompleted RowConditionType = "Completed"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConditionStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid condition statuses. "ConditionTrue" means a resource is in the condition.
0000000000000000000000000000000000000000;;	// "ConditionFalse" means a resource is not in the condition. "ConditionUnknown" means kubernetes
0000000000000000000000000000000000000000;;	// can't decide if a resource is in the condition or not. In the future, we could add other
0000000000000000000000000000000000000000;;	// intermediate conditions, e.g. ConditionDegraded.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ConditionTrue    ConditionStatus = "True"
0000000000000000000000000000000000000000;;		ConditionFalse   ConditionStatus = "False"
0000000000000000000000000000000000000000;;		ConditionUnknown ConditionStatus = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IncludeObjectPolicy controls which portion of the object is returned with a Table.
0000000000000000000000000000000000000000;;	type IncludeObjectPolicy string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// IncludeNone returns no object.
0000000000000000000000000000000000000000;;		IncludeNone IncludeObjectPolicy = "None"
0000000000000000000000000000000000000000;;		// IncludeMetadata serializes the object containing only its metadata field.
0000000000000000000000000000000000000000;;		IncludeMetadata IncludeObjectPolicy = "Metadata"
0000000000000000000000000000000000000000;;		// IncludeObject contains the full object.
0000000000000000000000000000000000000000;;		IncludeObject IncludeObjectPolicy = "Object"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TableOptions are used when a Table is requested by the caller.
0000000000000000000000000000000000000000;;	type TableOptions struct {
0000000000000000000000000000000000000000;;		v1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// includeObject decides whether to include each object along with its columnar information.
0000000000000000000000000000000000000000;;		// Specifying "None" will return no object, specifying "Object" will return the full object contents, and
0000000000000000000000000000000000000000;;		// specifying "Metadata" (the default) will return the object's metadata in the PartialObjectMetadata kind
0000000000000000000000000000000000000000;;		// in version v1alpha1 of the meta.k8s.io API group.
0000000000000000000000000000000000000000;;		IncludeObject IncludeObjectPolicy `json:"includeObject,omitempty" protobuf:"bytes,1,opt,name=includeObject,casttype=IncludeObjectPolicy"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PartialObjectMetadata is a generic representation of any object with ObjectMeta. It allows clients
0000000000000000000000000000000000000000;;	// to get access to a particular ObjectMeta schema without knowing the details of the version.
0000000000000000000000000000000000000000;;	type PartialObjectMetadata struct {
0000000000000000000000000000000000000000;;		v1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		// Standard object's metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		v1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PartialObjectMetadataList contains a list of objects containing only their metadata
0000000000000000000000000000000000000000;;	type PartialObjectMetadataList struct {
0000000000000000000000000000000000000000;;		v1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// items contains each of the included items.
0000000000000000000000000000000000000000;;		Items []*PartialObjectMetadata `json:"items" protobuf:"bytes,1,rep,name=items"`
0000000000000000000000000000000000000000;;	}
