0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
647b003e077d7a44b43c1bde41b4bea0651e23cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package internalversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestListOptions(t *testing.T) {
0000000000000000000000000000000000000000;;		// verify round trip conversion
0000000000000000000000000000000000000000;;		ten := int64(10)
0000000000000000000000000000000000000000;;		in := &metav1.ListOptions{
0000000000000000000000000000000000000000;;			LabelSelector:   "a=1",
0000000000000000000000000000000000000000;;			FieldSelector:   "b=1",
0000000000000000000000000000000000000000;;			ResourceVersion: "10",
0000000000000000000000000000000000000000;;			TimeoutSeconds:  &ten,
0000000000000000000000000000000000000000;;			Watch:           true,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out := &ListOptions{}
0000000000000000000000000000000000000000;;		if err := scheme.Convert(in, out, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual := &metav1.ListOptions{}
0000000000000000000000000000000000000000;;		if err := scheme.Convert(out, actual, nil); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(in, actual) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected: %s", diff.ObjectReflectDiff(in, actual))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify failing conversion
0000000000000000000000000000000000000000;;		for i, failingObject := range []*metav1.ListOptions{
0000000000000000000000000000000000000000;;			{LabelSelector: "a!!!"},
0000000000000000000000000000000000000000;;			{FieldSelector: "a!!!"},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			out = &ListOptions{}
0000000000000000000000000000000000000000;;			if err := scheme.Convert(failingObject, out, nil); err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected conversion: %#v", i, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// verify kind registration
0000000000000000000000000000000000000000;;		if gvk, unversioned, err := scheme.ObjectKind(in); err != nil || unversioned || gvk != metav1.SchemeGroupVersion.WithKind("ListOptions") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected: %v %v %v", gvk, unversioned, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if gvk, unversioned, err := scheme.ObjectKind(out); err != nil || unversioned || gvk != SchemeGroupVersion.WithKind("ListOptions") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected: %v %v %v", gvk, unversioned, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual = &metav1.ListOptions{}
0000000000000000000000000000000000000000;;		if err := ParameterCodec.DecodeParameters(url.Values{"watch": []string{"1"}}, metav1.SchemeGroupVersion, actual); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !actual.Watch {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected watch decode: %#v", actual)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// check ParameterCodec
0000000000000000000000000000000000000000;;		query, err := ParameterCodec.EncodeParameters(in, metav1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actual = &metav1.ListOptions{}
0000000000000000000000000000000000000000;;		if err := ParameterCodec.DecodeParameters(query, metav1.SchemeGroupVersion, actual); err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(in, actual) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected: %s", diff.ObjectReflectDiff(in, actual))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
