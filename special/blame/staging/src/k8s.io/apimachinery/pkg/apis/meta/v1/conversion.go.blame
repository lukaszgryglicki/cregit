0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
b6b9224e6bcb2d14968732e88eee75971b5253b1;pkg/api/conversion.go[pkg/api/conversion.go][staging/src/k8s.io/apimachinery/pkg/apis/meta/v1/conversion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/intstr"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AddConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			Convert_v1_TypeMeta_To_v1_TypeMeta,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_unversioned_ListMeta_To_unversioned_ListMeta,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_intstr_IntOrString_To_intstr_IntOrString,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_unversioned_Time_To_unversioned_Time,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Slice_string_To_unversioned_Time,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_resource_Quantity_To_resource_Quantity,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_string_To_labels_Selector,
0000000000000000000000000000000000000000;;			Convert_labels_Selector_To_string,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_string_To_fields_Selector,
0000000000000000000000000000000000000000;;			Convert_fields_Selector_To_string,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Pointer_bool_To_bool,
0000000000000000000000000000000000000000;;			Convert_bool_To_Pointer_bool,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Pointer_string_To_string,
0000000000000000000000000000000000000000;;			Convert_string_To_Pointer_string,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Pointer_int64_To_int,
0000000000000000000000000000000000000000;;			Convert_int_To_Pointer_int64,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Pointer_int32_To_int32,
0000000000000000000000000000000000000000;;			Convert_int32_To_Pointer_int32,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Pointer_float64_To_float64,
0000000000000000000000000000000000000000;;			Convert_float64_To_Pointer_float64,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_map_to_unversioned_LabelSelector,
0000000000000000000000000000000000000000;;			Convert_unversioned_LabelSelector_to_map,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			Convert_Slice_string_To_Slice_int32,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Pointer_float64_To_float64(in **float64, out *float64, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			*out = 0
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = float64(**in)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_float64_To_Pointer_float64(in *float64, out **float64, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		temp := float64(*in)
0000000000000000000000000000000000000000;;		*out = &temp
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Pointer_int32_To_int32(in **int32, out *int32, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			*out = 0
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = int32(**in)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_int32_To_Pointer_int32(in *int32, out **int32, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		temp := int32(*in)
0000000000000000000000000000000000000000;;		*out = &temp
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Pointer_int64_To_int(in **int64, out *int, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			*out = 0
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = int(**in)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_int_To_Pointer_int64(in *int, out **int64, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		temp := int64(*in)
0000000000000000000000000000000000000000;;		*out = &temp
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Pointer_string_To_string(in **string, out *string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			*out = ""
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = **in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_string_To_Pointer_string(in *string, out **string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in == nil {
0000000000000000000000000000000000000000;;			stringVar := ""
0000000000000000000000000000000000000000;;			*out = &stringVar
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Pointer_bool_To_bool(in **bool, out *bool, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			*out = false
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = **in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_bool_To_Pointer_bool(in *bool, out **bool, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in == nil {
0000000000000000000000000000000000000000;;			boolVar := false
0000000000000000000000000000000000000000;;			*out = &boolVar
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=drop
0000000000000000000000000000000000000000;;	func Convert_v1_TypeMeta_To_v1_TypeMeta(in, out *TypeMeta, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		// These values are explicitly not copied
0000000000000000000000000000000000000000;;		//out.APIVersion = in.APIVersion
0000000000000000000000000000000000000000;;		//out.Kind = in.Kind
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=copy-only
0000000000000000000000000000000000000000;;	func Convert_unversioned_ListMeta_To_unversioned_ListMeta(in, out *ListMeta, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		*out = *in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=copy-only
0000000000000000000000000000000000000000;;	func Convert_intstr_IntOrString_To_intstr_IntOrString(in, out *intstr.IntOrString, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		*out = *in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=copy-only
0000000000000000000000000000000000000000;;	func Convert_unversioned_Time_To_unversioned_Time(in *Time, out *Time, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		// Cannot deep copy these, because time.Time has unexported fields.
0000000000000000000000000000000000000000;;		*out = *in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convert_Slice_string_To_unversioned_Time allows converting a URL query parameter value
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_unversioned_Time(input *[]string, out *Time, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		str := ""
0000000000000000000000000000000000000000;;		if len(*input) > 0 {
0000000000000000000000000000000000000000;;			str = (*input)[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out.UnmarshalQueryParameter(str)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_string_To_labels_Selector(in *string, out *labels.Selector, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		selector, err := labels.Parse(*in)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = selector
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_string_To_fields_Selector(in *string, out *fields.Selector, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		selector, err := fields.ParseSelector(*in)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = selector
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_labels_Selector_To_string(in *labels.Selector, out *string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = (*in).String()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_fields_Selector_To_string(in *fields.Selector, out *string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if *in == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = (*in).String()
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:conversion-fn=copy-only
0000000000000000000000000000000000000000;;	func Convert_resource_Quantity_To_resource_Quantity(in *resource.Quantity, out *resource.Quantity, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		*out = *in
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_map_to_unversioned_LabelSelector(in *map[string]string, out *LabelSelector, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if in == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out = new(LabelSelector)
0000000000000000000000000000000000000000;;		for labelKey, labelValue := range *in {
0000000000000000000000000000000000000000;;			AddLabelToSelector(out, labelKey, labelValue)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_unversioned_LabelSelector_to_map(in *LabelSelector, out *map[string]string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		*out, err = LabelSelectorAsMap(in)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convert_Slice_string_To_Slice_int32 converts multiple query parameters or
0000000000000000000000000000000000000000;;	// a single query parameter with a comma delimited value to multiple int32.
0000000000000000000000000000000000000000;;	// This is used for port forwarding which needs the ports as int32.
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_Slice_int32(in *[]string, out *[]int32, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		for _, s := range *in {
0000000000000000000000000000000000000000;;			for _, v := range strings.Split(s, ",") {
0000000000000000000000000000000000000000;;				x, err := strconv.ParseUint(v, 10, 16)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return fmt.Errorf("cannot convert to []int32: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				*out = append(*out, int32(x))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
