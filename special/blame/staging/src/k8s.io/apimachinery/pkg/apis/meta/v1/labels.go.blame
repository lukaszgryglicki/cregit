0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
647b003e077d7a44b43c1bde41b4bea0651e23cd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clones the given selector and returns a new selector with the given key and value added.
0000000000000000000000000000000000000000;;	// Returns the given selector, if labelKey is empty.
0000000000000000000000000000000000000000;;	func CloneSelectorAndAddLabel(selector *LabelSelector, labelKey, labelValue string) *LabelSelector {
0000000000000000000000000000000000000000;;		if labelKey == "" {
0000000000000000000000000000000000000000;;			// Don't need to add a label.
0000000000000000000000000000000000000000;;			return selector
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Clone.
0000000000000000000000000000000000000000;;		newSelector := new(LabelSelector)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO(madhusudancs): Check if you can use deepCopy_extensions_LabelSelector here.
0000000000000000000000000000000000000000;;		newSelector.MatchLabels = make(map[string]string)
0000000000000000000000000000000000000000;;		if selector.MatchLabels != nil {
0000000000000000000000000000000000000000;;			for key, val := range selector.MatchLabels {
0000000000000000000000000000000000000000;;				newSelector.MatchLabels[key] = val
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		newSelector.MatchLabels[labelKey] = labelValue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if selector.MatchExpressions != nil {
0000000000000000000000000000000000000000;;			newMExps := make([]LabelSelectorRequirement, len(selector.MatchExpressions))
0000000000000000000000000000000000000000;;			for i, me := range selector.MatchExpressions {
0000000000000000000000000000000000000000;;				newMExps[i].Key = me.Key
0000000000000000000000000000000000000000;;				newMExps[i].Operator = me.Operator
0000000000000000000000000000000000000000;;				if me.Values != nil {
0000000000000000000000000000000000000000;;					newMExps[i].Values = make([]string, len(me.Values))
0000000000000000000000000000000000000000;;					copy(newMExps[i].Values, me.Values)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					newMExps[i].Values = nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			newSelector.MatchExpressions = newMExps
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			newSelector.MatchExpressions = nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newSelector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddLabelToSelector returns a selector with the given key and value added to the given selector's MatchLabels.
0000000000000000000000000000000000000000;;	func AddLabelToSelector(selector *LabelSelector, labelKey, labelValue string) *LabelSelector {
0000000000000000000000000000000000000000;;		if labelKey == "" {
0000000000000000000000000000000000000000;;			// Don't need to add a label.
0000000000000000000000000000000000000000;;			return selector
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if selector.MatchLabels == nil {
0000000000000000000000000000000000000000;;			selector.MatchLabels = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		selector.MatchLabels[labelKey] = labelValue
0000000000000000000000000000000000000000;;		return selector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SelectorHasLabel checks if the given selector contains the given label key in its MatchLabels
0000000000000000000000000000000000000000;;	func SelectorHasLabel(selector *LabelSelector, labelKey string) bool {
0000000000000000000000000000000000000000;;		return len(selector.MatchLabels[labelKey]) > 0
0000000000000000000000000000000000000000;;	}
