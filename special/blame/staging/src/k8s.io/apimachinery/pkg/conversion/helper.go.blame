0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package conversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnforcePtr ensures that obj is a pointer of some sort. Returns a reflect.Value
0000000000000000000000000000000000000000;;	// of the dereferenced pointer, ensuring that it is settable/addressable.
0000000000000000000000000000000000000000;;	// Returns an error if this is not possible.
0000000000000000000000000000000000000000;;	func EnforcePtr(obj interface{}) (reflect.Value, error) {
0000000000000000000000000000000000000000;;		v := reflect.ValueOf(obj)
0000000000000000000000000000000000000000;;		if v.Kind() != reflect.Ptr {
0000000000000000000000000000000000000000;;			if v.Kind() == reflect.Invalid {
0000000000000000000000000000000000000000;;				return reflect.Value{}, fmt.Errorf("expected pointer, but got invalid kind")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return reflect.Value{}, fmt.Errorf("expected pointer, but got %v type", v.Type())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.IsNil() {
0000000000000000000000000000000000000000;;			return reflect.Value{}, fmt.Errorf("expected pointer, but got nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v.Elem(), nil
0000000000000000000000000000000000000000;;	}
