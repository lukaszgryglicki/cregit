0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package queryparams
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshaler converts an object to a query parameter string representation
0000000000000000000000000000000000000000;;	type Marshaler interface {
0000000000000000000000000000000000000000;;		MarshalQueryParameter() (string, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Unmarshaler converts a string representation to an object
0000000000000000000000000000000000000000;;	type Unmarshaler interface {
0000000000000000000000000000000000000000;;		UnmarshalQueryParameter(string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonTag(field reflect.StructField) (string, bool) {
0000000000000000000000000000000000000000;;		structTag := field.Tag.Get("json")
0000000000000000000000000000000000000000;;		if len(structTag) == 0 {
0000000000000000000000000000000000000000;;			return "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parts := strings.Split(structTag, ",")
0000000000000000000000000000000000000000;;		tag := parts[0]
0000000000000000000000000000000000000000;;		if tag == "-" {
0000000000000000000000000000000000000000;;			tag = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		omitempty := false
0000000000000000000000000000000000000000;;		parts = parts[1:]
0000000000000000000000000000000000000000;;		for _, part := range parts {
0000000000000000000000000000000000000000;;			if part == "omitempty" {
0000000000000000000000000000000000000000;;				omitempty = true
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tag, omitempty
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func formatValue(value interface{}) string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v", value)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isPointerKind(kind reflect.Kind) bool {
0000000000000000000000000000000000000000;;		return kind == reflect.Ptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isStructKind(kind reflect.Kind) bool {
0000000000000000000000000000000000000000;;		return kind == reflect.Struct
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isValueKind(kind reflect.Kind) bool {
0000000000000000000000000000000000000000;;		switch kind {
0000000000000000000000000000000000000000;;		case reflect.String, reflect.Bool, reflect.Int, reflect.Int8, reflect.Int16,
0000000000000000000000000000000000000000;;			reflect.Int32, reflect.Int64, reflect.Uint, reflect.Uint8,
0000000000000000000000000000000000000000;;			reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Float32,
0000000000000000000000000000000000000000;;			reflect.Float64, reflect.Complex64, reflect.Complex128:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func zeroValue(value reflect.Value) bool {
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(reflect.Zero(value.Type()).Interface(), value.Interface())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func customMarshalValue(value reflect.Value) (reflect.Value, bool) {
0000000000000000000000000000000000000000;;		// Return unless we implement a custom query marshaler
0000000000000000000000000000000000000000;;		if !value.CanInterface() {
0000000000000000000000000000000000000000;;			return reflect.Value{}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		marshaler, ok := value.Interface().(Marshaler)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return reflect.Value{}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Don't invoke functions on nil pointers
0000000000000000000000000000000000000000;;		// If the type implements MarshalQueryParameter, AND the tag is not omitempty, AND the value is a nil pointer, "" seems like a reasonable response
0000000000000000000000000000000000000000;;		if isPointerKind(value.Kind()) && zeroValue(value) {
0000000000000000000000000000000000000000;;			return reflect.ValueOf(""), true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the custom marshalled value
0000000000000000000000000000000000000000;;		v, err := marshaler.MarshalQueryParameter()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return reflect.Value{}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return reflect.ValueOf(v), true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addParam(values url.Values, tag string, omitempty bool, value reflect.Value) {
0000000000000000000000000000000000000000;;		if omitempty && zeroValue(value) {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		val := ""
0000000000000000000000000000000000000000;;		iValue := fmt.Sprintf("%v", value.Interface())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if iValue != "<nil>" {
0000000000000000000000000000000000000000;;			val = iValue
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		values.Add(tag, val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addListOfParams(values url.Values, tag string, omitempty bool, list reflect.Value) {
0000000000000000000000000000000000000000;;		for i := 0; i < list.Len(); i++ {
0000000000000000000000000000000000000000;;			addParam(values, tag, omitempty, list.Index(i))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Convert takes an object and converts it to a url.Values object using JSON tags as
0000000000000000000000000000000000000000;;	// parameter names. Only top-level simple values, arrays, and slices are serialized.
0000000000000000000000000000000000000000;;	// Embedded structs, maps, etc. will not be serialized.
0000000000000000000000000000000000000000;;	func Convert(obj interface{}) (url.Values, error) {
0000000000000000000000000000000000000000;;		result := url.Values{}
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return result, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var sv reflect.Value
0000000000000000000000000000000000000000;;		switch reflect.TypeOf(obj).Kind() {
0000000000000000000000000000000000000000;;		case reflect.Ptr, reflect.Interface:
0000000000000000000000000000000000000000;;			sv = reflect.ValueOf(obj).Elem()
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("expecting a pointer or interface")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		st := sv.Type()
0000000000000000000000000000000000000000;;		if !isStructKind(st.Kind()) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("expecting a pointer to a struct")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check all object fields
0000000000000000000000000000000000000000;;		convertStruct(result, st, sv)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return result, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertStruct(result url.Values, st reflect.Type, sv reflect.Value) {
0000000000000000000000000000000000000000;;		for i := 0; i < st.NumField(); i++ {
0000000000000000000000000000000000000000;;			field := sv.Field(i)
0000000000000000000000000000000000000000;;			tag, omitempty := jsonTag(st.Field(i))
0000000000000000000000000000000000000000;;			if len(tag) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ft := field.Type()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			kind := ft.Kind()
0000000000000000000000000000000000000000;;			if isPointerKind(kind) {
0000000000000000000000000000000000000000;;				ft = ft.Elem()
0000000000000000000000000000000000000000;;				kind = ft.Kind()
0000000000000000000000000000000000000000;;				if !field.IsNil() {
0000000000000000000000000000000000000000;;					field = reflect.Indirect(field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case isValueKind(kind):
0000000000000000000000000000000000000000;;				addParam(result, tag, omitempty, field)
0000000000000000000000000000000000000000;;			case kind == reflect.Array || kind == reflect.Slice:
0000000000000000000000000000000000000000;;				if isValueKind(ft.Elem().Kind()) {
0000000000000000000000000000000000000000;;					addListOfParams(result, tag, omitempty, field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case isStructKind(kind) && !(zeroValue(field) && omitempty):
0000000000000000000000000000000000000000;;				if marshalValue, ok := customMarshalValue(field); ok {
0000000000000000000000000000000000000000;;					addParam(result, tag, omitempty, marshalValue)
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					convertStruct(result, ft, field)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
