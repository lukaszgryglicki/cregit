0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package conversion
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/google/gofuzz"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopy(t *testing.T) {
0000000000000000000000000000000000000000;;		semantic := EqualitiesOrDie()
0000000000000000000000000000000000000000;;		f := fuzz.New().NilChance(.5).NumElements(0, 100)
0000000000000000000000000000000000000000;;		table := []interface{}{
0000000000000000000000000000000000000000;;			map[string]string{},
0000000000000000000000000000000000000000;;			int(5),
0000000000000000000000000000000000000000;;			"hello world",
0000000000000000000000000000000000000000;;			struct {
0000000000000000000000000000000000000000;;				A, B, C struct {
0000000000000000000000000000000000000000;;					D map[string]int
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				X []int
0000000000000000000000000000000000000000;;				Y []byte
0000000000000000000000000000000000000000;;			}{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, obj := range table {
0000000000000000000000000000000000000000;;			obj2, err := NewCloner().DeepCopy(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Error: couldn't copy %#v", obj)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := obj, obj2; !semantic.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v\ngot %#v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			obj3 := reflect.New(reflect.TypeOf(obj)).Interface()
0000000000000000000000000000000000000000;;			f.Fuzz(obj3)
0000000000000000000000000000000000000000;;			obj4, err := NewCloner().DeepCopy(obj3)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Error: couldn't copy %#v", obj)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := obj3, obj4; !semantic.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %#v\ngot %#v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			f.Fuzz(obj3)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyOrDie(t *testing.T, in interface{}) interface{} {
0000000000000000000000000000000000000000;;		out, err := NewCloner().DeepCopy(in)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("DeepCopy failed: %#q: %v", in, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopySliceSeparate(t *testing.T) {
0000000000000000000000000000000000000000;;		x := []int{5}
0000000000000000000000000000000000000000;;		y := copyOrDie(t, x).([]int)
0000000000000000000000000000000000000000;;		x[0] = 3
0000000000000000000000000000000000000000;;		if y[0] == 3 {
0000000000000000000000000000000000000000;;			t.Errorf("deep copy wasn't deep: %#q %#q", x, y)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopyArraySeparate(t *testing.T) {
0000000000000000000000000000000000000000;;		x := [1]int{5}
0000000000000000000000000000000000000000;;		y := copyOrDie(t, x).([1]int)
0000000000000000000000000000000000000000;;		x[0] = 3
0000000000000000000000000000000000000000;;		if y[0] == 3 {
0000000000000000000000000000000000000000;;			t.Errorf("deep copy wasn't deep: %#q %#q", x, y)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopyMapSeparate(t *testing.T) {
0000000000000000000000000000000000000000;;		x := map[string]int{"foo": 5}
0000000000000000000000000000000000000000;;		y := copyOrDie(t, x).(map[string]int)
0000000000000000000000000000000000000000;;		x["foo"] = 3
0000000000000000000000000000000000000000;;		if y["foo"] == 3 {
0000000000000000000000000000000000000000;;			t.Errorf("deep copy wasn't deep: %#q %#q", x, y)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopyPointerSeparate(t *testing.T) {
0000000000000000000000000000000000000000;;		z := 5
0000000000000000000000000000000000000000;;		x := &z
0000000000000000000000000000000000000000;;		y := copyOrDie(t, x).(*int)
0000000000000000000000000000000000000000;;		*x = 3
0000000000000000000000000000000000000000;;		if *y == 3 {
0000000000000000000000000000000000000000;;			t.Errorf("deep copy wasn't deep: %#q %#q", x, y)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeepCopyStruct(t *testing.T) {
0000000000000000000000000000000000000000;;		type Foo struct {
0000000000000000000000000000000000000000;;			A int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type Bar struct {
0000000000000000000000000000000000000000;;			Foo
0000000000000000000000000000000000000000;;			F *Foo
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		a := &Bar{Foo{1}, &Foo{2}}
0000000000000000000000000000000000000000;;		b := copyOrDie(t, a).(*Bar)
0000000000000000000000000000000000000000;;		a.A = 3
0000000000000000000000000000000000000000;;		a.F.A = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b.A != 1 || b.F.A != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("deep copy wasn't deep: %#v, %#v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var result interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkDeepCopy(b *testing.B) {
0000000000000000000000000000000000000000;;		table := []interface{}{
0000000000000000000000000000000000000000;;			map[string]string{},
0000000000000000000000000000000000000000;;			int(5),
0000000000000000000000000000000000000000;;			"hello world",
0000000000000000000000000000000000000000;;			struct {
0000000000000000000000000000000000000000;;				A, B, C struct {
0000000000000000000000000000000000000000;;					D map[string]int
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				X []int
0000000000000000000000000000000000000000;;				Y []byte
0000000000000000000000000000000000000000;;			}{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		f := fuzz.New().RandSource(rand.NewSource(1)).NilChance(.5).NumElements(0, 100)
0000000000000000000000000000000000000000;;		for i := range table {
0000000000000000000000000000000000000000;;			out := table[i]
0000000000000000000000000000000000000000;;			obj := reflect.New(reflect.TypeOf(out)).Interface()
0000000000000000000000000000000000000000;;			f.Fuzz(obj)
0000000000000000000000000000000000000000;;			table[i] = obj
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b.ResetTimer()
0000000000000000000000000000000000000000;;		var r interface{}
0000000000000000000000000000000000000000;;		for i := 0; i < b.N; i++ {
0000000000000000000000000000000000000000;;			for j := range table {
0000000000000000000000000000000000000000;;				r, _ = NewCloner().DeepCopy(table[j])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		result = r
0000000000000000000000000000000000000000;;	}
