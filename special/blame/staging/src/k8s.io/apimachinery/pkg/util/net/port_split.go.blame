0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package net
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var validSchemes = sets.NewString("http", "https", "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SplitSchemeNamePort takes a string of the following forms:
0000000000000000000000000000000000000000;;	//  * "<name>",                 returns "",        "<name>","",      true
0000000000000000000000000000000000000000;;	//  * "<name>:<port>",          returns "",        "<name>","<port>",true
0000000000000000000000000000000000000000;;	//  * "<scheme>:<name>:<port>", returns "<scheme>","<name>","<port>",true
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Name must be non-empty or valid will be returned false.
0000000000000000000000000000000000000000;;	// Scheme must be "http" or "https" if specified
0000000000000000000000000000000000000000;;	// Port is returned as a string, and it is not required to be numeric (could be
0000000000000000000000000000000000000000;;	// used for a named port, for example).
0000000000000000000000000000000000000000;;	func SplitSchemeNamePort(id string) (scheme, name, port string, valid bool) {
0000000000000000000000000000000000000000;;		parts := strings.Split(id, ":")
0000000000000000000000000000000000000000;;		switch len(parts) {
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			name = parts[0]
0000000000000000000000000000000000000000;;		case 2:
0000000000000000000000000000000000000000;;			name = parts[0]
0000000000000000000000000000000000000000;;			port = parts[1]
0000000000000000000000000000000000000000;;		case 3:
0000000000000000000000000000000000000000;;			scheme = parts[0]
0000000000000000000000000000000000000000;;			name = parts[1]
0000000000000000000000000000000000000000;;			port = parts[2]
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return "", "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(name) > 0 && validSchemes.Has(scheme) {
0000000000000000000000000000000000000000;;			return scheme, name, port, true
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return "", "", "", false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JoinSchemeNamePort returns a string that specifies the scheme, name, and port:
0000000000000000000000000000000000000000;;	//  * "<name>"
0000000000000000000000000000000000000000;;	//  * "<name>:<port>"
0000000000000000000000000000000000000000;;	//  * "<scheme>:<name>:<port>"
0000000000000000000000000000000000000000;;	// None of the parameters may contain a ':' character
0000000000000000000000000000000000000000;;	// Name is required
0000000000000000000000000000000000000000;;	// Scheme must be "", "http", or "https"
0000000000000000000000000000000000000000;;	func JoinSchemeNamePort(scheme, name, port string) string {
0000000000000000000000000000000000000000;;		if len(scheme) > 0 {
0000000000000000000000000000000000000000;;			// Must include three segments to specify scheme
0000000000000000000000000000000000000000;;			return scheme + ":" + name + ":" + port
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(port) > 0 {
0000000000000000000000000000000000000000;;			// Must include two segments to specify port
0000000000000000000000000000000000000000;;			return name + ":" + port
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Return name alone
0000000000000000000000000000000000000000;;		return name
0000000000000000000000000000000000000000;;	}
