0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
04a8564febca9ad8ecd0d1827f8724644b8528ad;pkg/util/proxy/transport_test.go[pkg/util/proxy/transport_test.go][staging/src/k8s.io/apimachinery/pkg/util/proxy/transport_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseURLOrDie(inURL string) *url.URL {
0000000000000000000000000000000000000000;;		parsed, err := url.Parse(inURL)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return parsed
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestProxyTransport(t *testing.T) {
0000000000000000000000000000000000000000;;		testTransport := &Transport{
0000000000000000000000000000000000000000;;			Scheme:      "http",
0000000000000000000000000000000000000000;;			Host:        "foo.com",
0000000000000000000000000000000000000000;;			PathPrepend: "/proxy/node/node1:10250",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testTransport2 := &Transport{
0000000000000000000000000000000000000000;;			Scheme:      "https",
0000000000000000000000000000000000000000;;			Host:        "foo.com",
0000000000000000000000000000000000000000;;			PathPrepend: "/proxy/node/node1:8080",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emptyHostTransport := &Transport{
0000000000000000000000000000000000000000;;			Scheme:      "https",
0000000000000000000000000000000000000000;;			PathPrepend: "/proxy/node/node1:10250",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emptySchemeTransport := &Transport{
0000000000000000000000000000000000000000;;			Host:        "foo.com",
0000000000000000000000000000000000000000;;			PathPrepend: "/proxy/node/node1:10250",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		type Item struct {
0000000000000000000000000000000000000000;;			input        string
0000000000000000000000000000000000000000;;			sourceURL    string
0000000000000000000000000000000000000000;;			transport    *Transport
0000000000000000000000000000000000000000;;			output       string
0000000000000000000000000000000000000000;;			contentType  string
0000000000000000000000000000000000000000;;			forwardedURI string
0000000000000000000000000000000000000000;;			redirect     string
0000000000000000000000000000000000000000;;			redirectWant string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := map[string]Item{
0000000000000000000000000000000000000000;;			"normal": {
0000000000000000000000000000000000000000;;				input:        `<pre><a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"full document": {
0000000000000000000000000000000000000000;;				input:        `<html><header></header><body><pre><a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a></pre></body></html>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<html><header></header><body><pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log">google.log</a></pre></body></html>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"trailing slash": {
0000000000000000000000000000000000000000;;				input:        `<pre><a href="kubelet.log">kubelet.log</a><a href="/google.log/">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log/">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"content-type charset": {
0000000000000000000000000000000000000000;;				input:        `<pre><a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html; charset=utf-8",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"content-type passthrough": {
0000000000000000000000000000000000000000;;				input:        `<pre><a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/plain",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"subdir": {
0000000000000000000000000000000000000000;;				input:        `<a href="kubelet.log">kubelet.log</a><a href="/google.log">google.log</a>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/whatever/apt/somelog.log",
0000000000000000000000000000000000000000;;				transport:    testTransport2,
0000000000000000000000000000000000000000;;				output:       `<a href="kubelet.log">kubelet.log</a><a href="https://foo.com/proxy/node/node1:8080/google.log">google.log</a>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:8080/whatever/apt/somelog.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"image": {
0000000000000000000000000000000000000000;;				input:        `<pre><img src="kubernetes.jpg"/><img src="/kubernetes_abs.jpg"/></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><img src="kubernetes.jpg"/><img src="http://foo.com/proxy/node/node1:10250/kubernetes_abs.jpg"/></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"abs": {
0000000000000000000000000000000000000000;;				input:        `<script src="http://google.com/kubernetes.js"/>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/any/path/",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<script src="http://google.com/kubernetes.js"/>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/any/path/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"abs but same host": {
0000000000000000000000000000000000000000;;				input:        `<script src="http://mynode.com/kubernetes.js"/>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/any/path/",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<script src="http://foo.com/proxy/node/node1:10250/kubernetes.js"/>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/any/path/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"redirect rel": {
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/redirect",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				redirect:     "/redirected/target/",
0000000000000000000000000000000000000000;;				redirectWant: "http://foo.com/proxy/node/node1:10250/redirected/target/",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/redirect",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"redirect abs same host": {
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/redirect",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				redirect:     "http://mynode.com/redirected/target/",
0000000000000000000000000000000000000000;;				redirectWant: "http://foo.com/proxy/node/node1:10250/redirected/target/",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/redirect",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"redirect abs other host": {
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/redirect",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				redirect:     "http://example.com/redirected/target/",
0000000000000000000000000000000000000000;;				redirectWant: "http://example.com/redirected/target/",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/redirect",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"source contains the redirect already": {
0000000000000000000000000000000000000000;;				input:        `<pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				sourceURL:    "http://foo.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    testTransport,
0000000000000000000000000000000000000000;;				output:       `<pre><a href="kubelet.log">kubelet.log</a><a href="http://foo.com/proxy/node/node1:10250/google.log">google.log</a></pre>`,
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no host": {
0000000000000000000000000000000000000000;;				input:        "<html></html>",
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    emptyHostTransport,
0000000000000000000000000000000000000000;;				output:       "<html></html>",
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no scheme": {
0000000000000000000000000000000000000000;;				input:        "<html></html>",
0000000000000000000000000000000000000000;;				sourceURL:    "http://mynode.com/logs/log.log",
0000000000000000000000000000000000000000;;				transport:    emptySchemeTransport,
0000000000000000000000000000000000000000;;				output:       "<html></html>",
0000000000000000000000000000000000000000;;				contentType:  "text/html",
0000000000000000000000000000000000000000;;				forwardedURI: "/proxy/node/node1:10250/logs/log.log",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testItem := func(name string, item *Item) {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				// Check request headers.
0000000000000000000000000000000000000000;;				if got, want := r.Header.Get("X-Forwarded-Uri"), item.forwardedURI; got != want {
0000000000000000000000000000000000000000;;					t.Errorf("%v: X-Forwarded-Uri = %q, want %q", name, got, want)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(item.transport.Host) == 0 {
0000000000000000000000000000000000000000;;					_, present := r.Header["X-Forwarded-Host"]
0000000000000000000000000000000000000000;;					if present {
0000000000000000000000000000000000000000;;						t.Errorf("%v: X-Forwarded-Host header should not be present", name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if got, want := r.Header.Get("X-Forwarded-Host"), item.transport.Host; got != want {
0000000000000000000000000000000000000000;;						t.Errorf("%v: X-Forwarded-Host = %q, want %q", name, got, want)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if len(item.transport.Scheme) == 0 {
0000000000000000000000000000000000000000;;					_, present := r.Header["X-Forwarded-Proto"]
0000000000000000000000000000000000000000;;					if present {
0000000000000000000000000000000000000000;;						t.Errorf("%v: X-Forwarded-Proto header should not be present", name)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if got, want := r.Header.Get("X-Forwarded-Proto"), item.transport.Scheme; got != want {
0000000000000000000000000000000000000000;;						t.Errorf("%v: X-Forwarded-Proto = %q, want %q", name, got, want)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Send response.
0000000000000000000000000000000000000000;;				if item.redirect != "" {
0000000000000000000000000000000000000000;;					http.Redirect(w, r, item.redirect, http.StatusMovedPermanently)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", item.contentType)
0000000000000000000000000000000000000000;;				fmt.Fprint(w, item.input)
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Replace source URL with our test server address.
0000000000000000000000000000000000000000;;			sourceURL := parseURLOrDie(item.sourceURL)
0000000000000000000000000000000000000000;;			serverURL := parseURLOrDie(server.URL)
0000000000000000000000000000000000000000;;			item.input = strings.Replace(item.input, sourceURL.Host, serverURL.Host, -1)
0000000000000000000000000000000000000000;;			item.redirect = strings.Replace(item.redirect, sourceURL.Host, serverURL.Host, -1)
0000000000000000000000000000000000000000;;			sourceURL.Host = serverURL.Host
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", sourceURL.String(), nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resp, err := item.transport.RoundTrip(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if item.redirect != "" {
0000000000000000000000000000000000000000;;				// Check that redirect URLs get rewritten properly.
0000000000000000000000000000000000000000;;				if got, want := resp.Header.Get("Location"), item.redirectWant; got != want {
0000000000000000000000000000000000000000;;					t.Errorf("%v: Location header = %q, want %q", name, got, want)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			body, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%v: Unexpected error: %v", name, err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.output, string(body); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v: expected %v, but got %v", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, item := range table {
0000000000000000000000000000000000000000;;			testItem(name, &item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
