0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
705355e3d4bf4640b8396f98bac1640d781b14bc;pkg/util/rand/rand_test.go[pkg/util/rand/rand_test.go][staging/src/k8s.io/apimachinery/pkg/util/rand/rand_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxRangeTestCount = 500
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestString(t *testing.T) {
0000000000000000000000000000000000000000;;		valid := "0123456789abcdefghijklmnopqrstuvwxyz"
0000000000000000000000000000000000000000;;		for _, l := range []int{0, 1, 2, 10, 123} {
0000000000000000000000000000000000000000;;			s := String(l)
0000000000000000000000000000000000000000;;			if len(s) != l {
0000000000000000000000000000000000000000;;				t.Errorf("expected string of size %d, got %q", l, s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, c := range s {
0000000000000000000000000000000000000000;;				if !strings.ContainsRune(valid, c) {
0000000000000000000000000000000000000000;;					t.Errorf("expected valid charaters, got %v", c)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Confirm that panic occurs on invalid input.
0000000000000000000000000000000000000000;;	func TestRangePanic(t *testing.T) {
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := recover(); err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Panic didn't occur!")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		// Should result in an error...
0000000000000000000000000000000000000000;;		Intn(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntn(t *testing.T) {
0000000000000000000000000000000000000000;;		// 0 is invalid.
0000000000000000000000000000000000000000;;		for _, max := range []int{1, 2, 10, 123} {
0000000000000000000000000000000000000000;;			inrange := Intn(max)
0000000000000000000000000000000000000000;;			if inrange < 0 || inrange > max {
0000000000000000000000000000000000000000;;				t.Errorf("%v out of range (0,%v)", inrange, max)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPerm(t *testing.T) {
0000000000000000000000000000000000000000;;		Seed(5)
0000000000000000000000000000000000000000;;		rand.Seed(5)
0000000000000000000000000000000000000000;;		for i := 1; i < 20; i++ {
0000000000000000000000000000000000000000;;			actual := Perm(i)
0000000000000000000000000000000000000000;;			expected := rand.Perm(i)
0000000000000000000000000000000000000000;;			for j := 0; j < i; j++ {
0000000000000000000000000000000000000000;;				if actual[j] != expected[j] {
0000000000000000000000000000000000000000;;					t.Errorf("Perm call result is unexpected")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntnRange(t *testing.T) {
0000000000000000000000000000000000000000;;		// 0 is invalid.
0000000000000000000000000000000000000000;;		for min, max := range map[int]int{1: 2, 10: 123, 100: 500} {
0000000000000000000000000000000000000000;;			for i := 0; i < maxRangeTestCount; i++ {
0000000000000000000000000000000000000000;;				inrange := IntnRange(min, max)
0000000000000000000000000000000000000000;;				if inrange < min || inrange >= max {
0000000000000000000000000000000000000000;;					t.Errorf("%v out of range (%v,%v)", inrange, min, max)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInt63nRange(t *testing.T) {
0000000000000000000000000000000000000000;;		// 0 is invalid.
0000000000000000000000000000000000000000;;		for min, max := range map[int64]int64{1: 2, 10: 123, 100: 500} {
0000000000000000000000000000000000000000;;			for i := 0; i < maxRangeTestCount; i++ {
0000000000000000000000000000000000000000;;				inrange := Int63nRange(min, max)
0000000000000000000000000000000000000000;;				if inrange < min || inrange >= max {
0000000000000000000000000000000000000000;;					t.Errorf("%v out of range (%v,%v)", inrange, min, max)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
