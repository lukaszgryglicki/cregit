0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7c46d6bc91cb50f1fdd21c23d36f48f70c322338;pkg/util/strategicpatch/patch_test.go[pkg/util/strategicpatch/patch_test.go][staging/src/k8s.io/apimachinery/pkg/util/strategicpatch/patch_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package strategicpatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/mergepatch"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SortMergeListTestCases struct {
0000000000000000000000000000000000000000;;		TestCases []SortMergeListTestCase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SortMergeListTestCase struct {
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		Original    map[string]interface{}
0000000000000000000000000000000000000000;;		Sorted      map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StrategicMergePatchTestCases struct {
0000000000000000000000000000000000000000;;		TestCases []StrategicMergePatchTestCase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StrategicMergePatchTestCase struct {
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		StrategicMergePatchTestCaseData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StrategicMergePatchRawTestCase struct {
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		StrategicMergePatchRawTestCaseData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StrategicMergePatchTestCaseData struct {
0000000000000000000000000000000000000000;;		// Original is the original object (last-applied config in annotation)
0000000000000000000000000000000000000000;;		Original map[string]interface{}
0000000000000000000000000000000000000000;;		// Modified is the modified object (new config we want)
0000000000000000000000000000000000000000;;		Modified map[string]interface{}
0000000000000000000000000000000000000000;;		// Current is the current object (live config in the server)
0000000000000000000000000000000000000000;;		Current map[string]interface{}
0000000000000000000000000000000000000000;;		// TwoWay is the expected two-way merge patch diff between original and modified
0000000000000000000000000000000000000000;;		TwoWay map[string]interface{}
0000000000000000000000000000000000000000;;		// ThreeWay is the expected three-way merge patch
0000000000000000000000000000000000000000;;		ThreeWay map[string]interface{}
0000000000000000000000000000000000000000;;		// Result is the expected object after applying the three-way patch on current object.
0000000000000000000000000000000000000000;;		Result map[string]interface{}
0000000000000000000000000000000000000000;;		// TwoWayResult is the expected object after applying the two-way patch on current object.
0000000000000000000000000000000000000000;;		// If nil, Modified is used.
0000000000000000000000000000000000000000;;		TwoWayResult map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The meaning of each field is the same as StrategicMergePatchTestCaseData's.
0000000000000000000000000000000000000000;;	// The difference is that all the fields in StrategicMergePatchRawTestCaseData are json-encoded data.
0000000000000000000000000000000000000000;;	type StrategicMergePatchRawTestCaseData struct {
0000000000000000000000000000000000000000;;		Original      []byte
0000000000000000000000000000000000000000;;		Modified      []byte
0000000000000000000000000000000000000000;;		Current       []byte
0000000000000000000000000000000000000000;;		TwoWay        []byte
0000000000000000000000000000000000000000;;		ThreeWay      []byte
0000000000000000000000000000000000000000;;		Result        []byte
0000000000000000000000000000000000000000;;		TwoWayResult  []byte
0000000000000000000000000000000000000000;;		ExpectedError string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MergeItem struct {
0000000000000000000000000000000000000000;;		Name                  string
0000000000000000000000000000000000000000;;		Value                 string
0000000000000000000000000000000000000000;;		Other                 string
0000000000000000000000000000000000000000;;		MergingList           []MergeItem `patchStrategy:"merge" patchMergeKey:"name"`
0000000000000000000000000000000000000000;;		NonMergingList        []MergeItem
0000000000000000000000000000000000000000;;		MergingIntList        []int `patchStrategy:"merge"`
0000000000000000000000000000000000000000;;		NonMergingIntList     []int
0000000000000000000000000000000000000000;;		MergeItemPtr          *MergeItem `patchStrategy:"merge" patchMergeKey:"name"`
0000000000000000000000000000000000000000;;		SimpleMap             map[string]string
0000000000000000000000000000000000000000;;		ReplacingItem         runtime.RawExtension `patchStrategy:"replace"`
0000000000000000000000000000000000000000;;		RetainKeysMap         RetainKeysMergeItem  `patchStrategy:"retainKeys"`
0000000000000000000000000000000000000000;;		RetainKeysMergingList []MergeItem          `patchStrategy:"merge,retainKeys" patchMergeKey:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetainKeysMergeItem struct {
0000000000000000000000000000000000000000;;		Name           string
0000000000000000000000000000000000000000;;		Value          string
0000000000000000000000000000000000000000;;		Other          string
0000000000000000000000000000000000000000;;		SimpleMap      map[string]string
0000000000000000000000000000000000000000;;		MergingIntList []int       `patchStrategy:"merge"`
0000000000000000000000000000000000000000;;		MergingList    []MergeItem `patchStrategy:"merge" patchMergeKey:"name"`
0000000000000000000000000000000000000000;;		NonMergingList []MergeItem
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var mergeItem MergeItem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are test cases for SortMergeList, used to assert that it (recursively)
0000000000000000000000000000000000000000;;	// sorts both merging and non merging lists correctly.
0000000000000000000000000000000000000000;;	var sortMergeListTestCaseData = []byte(`
0000000000000000000000000000000000000000;;	testCases:
0000000000000000000000000000000000000000;;	  - description: sort one list of maps
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	  - description: sort lists of maps but not nested lists of maps
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          nonMergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          nonMergingList:
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          nonMergingList:
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          nonMergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	  - description: sort lists of maps and nested lists of maps
0000000000000000000000000000000000000000;;	    fieldTypes:
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	  - description: merging list should NOT sort when nested in non merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      nonMergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      nonMergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	            - name: 3
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingList:
0000000000000000000000000000000000000000;;	            - name: 2
0000000000000000000000000000000000000000;;	            - name: 1
0000000000000000000000000000000000000000;;	  - description: sort very nested list of maps
0000000000000000000000000000000000000000;;	    fieldTypes:
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - mergingList:
0000000000000000000000000000000000000000;;	            - mergingList:
0000000000000000000000000000000000000000;;	                - name: 2
0000000000000000000000000000000000000000;;	                - name: 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - mergingList:
0000000000000000000000000000000000000000;;	            - mergingList:
0000000000000000000000000000000000000000;;	                - name: 1
0000000000000000000000000000000000000000;;	                - name: 2
0000000000000000000000000000000000000000;;	  - description: sort nested lists of ints
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 3
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	            - 3
0000000000000000000000000000000000000000;;	  - description: sort nested pointers of ints
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergeItemPtr:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 3
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergeItemPtr:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          mergingIntList:
0000000000000000000000000000000000000000;;	            - 1
0000000000000000000000000000000000000000;;	            - 2
0000000000000000000000000000000000000000;;	            - 3
0000000000000000000000000000000000000000;;	  - description: sort merging list by pointer
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergeItemPtr:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    sorted:
0000000000000000000000000000000000000000;;	      mergeItemPtr:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSortMergeLists(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := SortMergeListTestCases{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(sortMergeListTestCaseData, &tc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("can't unmarshal test cases: %s\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range tc.TestCases {
0000000000000000000000000000000000000000;;			got := sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Original), c.Description)
0000000000000000000000000000000000000000;;			expected := testObjectToJSONOrFail(t, c.Sorted)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, expected) {
0000000000000000000000000000000000000000;;				t.Errorf("error in test case: %s\ncannot sort object:\n%s\nexpected:\n%s\ngot:\n%s\n",
0000000000000000000000000000000000000000;;					c.Description, mergepatch.ToYAMLOrError(c.Original), mergepatch.ToYAMLOrError(c.Sorted), jsonToYAMLOrError(got))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are test cases for StrategicMergePatch that cannot be generated using
0000000000000000000000000000000000000000;;	// CreateTwoWayMergePatch because it may be one of the following cases:
0000000000000000000000000000000000000000;;	// - not use the replace directive.
0000000000000000000000000000000000000000;;	// - generate duplicate integers for a merging list patch.
0000000000000000000000000000000000000000;;	// - generate empty merging lists.
0000000000000000000000000000000000000000;;	// - use patch format from an old client.
0000000000000000000000000000000000000000;;	var customStrategicMergePatchTestCaseData = []byte(`
0000000000000000000000000000000000000000;;	testCases:
0000000000000000000000000000000000000000;;	  - description: unique scalars when merging lists
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	  - description: delete map from nested map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        $patch: delete
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        {}
0000000000000000000000000000000000000000;;	  - description: delete all items from merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - $patch: replace
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: merge empty merging lists
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: delete all keys from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      $patch: replace
0000000000000000000000000000000000000000;;	    modified: {}
0000000000000000000000000000000000000000;;	  - description: add key and delete all keys from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	      $patch: replace
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: delete all duplicate entries in a merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	  - description: retainKeys map can add a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        value: bar
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: bar
0000000000000000000000000000000000000000;;	  - description: retainKeys map can change a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        value: b
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: b
0000000000000000000000000000000000000000;;	  - description: retainKeys map can delete a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        value: null
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	  - description: retainKeys map merge an empty map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMap: {}
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	  - description: retainKeys list can add a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	  - description: retainKeys list can change a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: b
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: b
0000000000000000000000000000000000000000;;	  - description: retainKeys list can delete a field when no retainKeys directive present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	        value: null
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      retainKeysMergingList:
0000000000000000000000000000000000000000;;	      - name: bar
0000000000000000000000000000000000000000;;	      - name: foo
0000000000000000000000000000000000000000;;	  - description: preserve the order from the patch in a merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: b
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	          value: c
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          other: x
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	          value: c
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: b
0000000000000000000000000000000000000000;;	          other: x
0000000000000000000000000000000000000000;;	  - description: preserve the order from the patch in a merging list 2
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: b
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	          value: c
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          value: b
0000000000000000000000000000000000000000;;	        - name: 3
0000000000000000000000000000000000000000;;	          value: c
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          value: a
0000000000000000000000000000000000000000;;	  - description: preserve the order from the patch in a merging int list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	  - description: preserve the order from the patch in a merging int list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var customStrategicMergePatchRawTestCases = []StrategicMergePatchRawTestCase{
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "$setElementOrder contains item that is not present in the list to be merged",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "$setElementOrder contains item that is not present in the int list to be merged",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "should check if order in $setElementOrder and patch list match",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ExpectedError: "doesn't match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "$setElementOrder contains item that is not present in the int list to be merged",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ExpectedError: "doesn't match",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCustomStrategicMergePatch(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := StrategicMergePatchTestCases{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(customStrategicMergePatchTestCaseData, &tc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("can't unmarshal test cases: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range tc.TestCases {
0000000000000000000000000000000000000000;;			original, expectedTwoWayPatch, _, expectedResult := twoWayTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;			testPatchApplication(t, original, expectedTwoWayPatch, expectedResult, c.Description, "")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range customStrategicMergePatchRawTestCases {
0000000000000000000000000000000000000000;;			original, expectedTwoWayPatch, _, expectedResult := twoWayRawTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;			testPatchApplication(t, original, expectedTwoWayPatch, expectedResult, c.Description, c.ExpectedError)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are test cases for StrategicMergePatch, to assert that applying  a patch
0000000000000000000000000000000000000000;;	// yields the correct outcome. They are also test cases for CreateTwoWayMergePatch
0000000000000000000000000000000000000000;;	// and CreateThreeWayMergePatch, to assert that they both generate the correct patch
0000000000000000000000000000000000000000;;	// for the given set of input documents.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	var createStrategicMergePatchTestCaseData = []byte(`
0000000000000000000000000000000000000000;;	testCases:
0000000000000000000000000000000000000000;;	  - description: nil original
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: nil patch
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      {}
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      {}
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	  - description: add field to map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field to map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete field from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete field from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: delete field from nested map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	  - description: delete field from nested map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: a
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	  - description: delete all fields from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    modified: {}
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: delete all fields from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    modified: {}
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete all fields from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete all fields from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: b
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: replace list of scalars
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	  - description: replace list of scalars with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 4
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      nonMergingIntList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	  - description: delete all maps from merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: delete all maps from merging list with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          other: a
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          other: b
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: delete all maps from empty merging list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      mergingList:
0000000000000000000000000000000000000000;;	        - name: 1
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	        - name: 2
0000000000000000000000000000000000000000;;	          $patch: delete
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: merge empty merging lists
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      {}
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      {}
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      mergingList: []
0000000000000000000000000000000000000000;;	  - description: defined null values should propagate overwrite current fields (with conflict)
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 2
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: null
0000000000000000000000000000000000000000;;	    twoWayResult:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: null
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	  - description: defined null values should propagate removing original fields
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: original-name
0000000000000000000000000000000000000000;;	      value: original-value
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: original-name
0000000000000000000000000000000000000000;;	      value: original-value
0000000000000000000000000000000000000000;;	      other: current-other
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: modified-name
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      name: modified-name
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    twoWayResult:
0000000000000000000000000000000000000000;;	      name: modified-name
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: modified-name
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: modified-name
0000000000000000000000000000000000000000;;	      other: current-other
0000000000000000000000000000000000000000;;	  - description: nil patch with retainKeys map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    twoWay: {}
0000000000000000000000000000000000000000;;	    threeWay: {}
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	  - description: retainKeys map with no change should not be present
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: c
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	    twoWay:
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      value: b
0000000000000000000000000000000000000000;;	      other: c
0000000000000000000000000000000000000000;;	      retainKeysMap:
0000000000000000000000000000000000000000;;	        name: foo
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var strategicMergePatchRawTestCases = []StrategicMergePatchRawTestCase{
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete items in lists of scalars",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete all duplicate items in lists of scalars",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add and delete items in lists of scalars",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "merge lists of maps",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "merge lists of maps with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add duplicate field to map in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`{}`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add an item that already exists in current object in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	    other: x
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`{}`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	    other: x
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add duplicate field to map in merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace map field value in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace map field value in merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete map from merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete map from merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete missing map from merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete missing map from merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add map and delete map from merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    other: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    other: c
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add map and delete map from merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    other: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    other: c
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete field from map in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete field from map in merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: a
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete missing field from map in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete missing field from map in merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    value: null
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace non merging list nested in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace non merging list nested in merging list with value conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: c
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace non merging list nested in merging list with value conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: c
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace non merging list nested in merging list with deletion conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    nonMergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list nested in merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list nested in merging list with value conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	        other: c
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: b
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	        other: c
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list nested in merging list with deletion conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list nested in merging list with deletion conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergingList:
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: d
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add map to merging list by pointer",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add map to merging list by pointer with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list by pointer",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: b
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: b
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add field to map in merging list by pointer with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: a
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: b
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - $setElementOrder/mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	    name: 1
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergeItemPtr:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	    mergeItemPtr:
0000000000000000000000000000000000000000;;	      - name: 1
0000000000000000000000000000000000000000;;	        value: 1
0000000000000000000000000000000000000000;;	      - name: 2
0000000000000000000000000000000000000000;;	        value: 2
0000000000000000000000000000000000000000;;	        other: b
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "merge lists of scalars",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add duplicate field to map in merging int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`{}`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		// test case for setElementOrder
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add an item in a list of primitives and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete an item in a list of primitives and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add an item in a list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add multiple items in a list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete an item in a list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "change an item in a list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: x
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: x
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add and delete an item in a list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	    other: b
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a list with server-only items",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a list with server-only items 2",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a list with server-only items 3",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 7
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	  - name: 8
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	    value: 2
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	    other: a
0000000000000000000000000000000000000000;;	  - name: 7
0000000000000000000000000000000000000000;;	  - name: 9
0000000000000000000000000000000000000000;;	  - name: 8
0000000000000000000000000000000000000000;;	  - name: 4
0000000000000000000000000000000000000000;;	    value: 4
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	    value: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add an item in a int list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add multiple items in a int list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "delete an item in a int list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "add and delete an item in a int list and preserve order",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	$deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a int list with server-only items",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a int list with server-only items 2",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "set elements order in a int list with server-only items 3",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 7
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	  - 8
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 7
0000000000000000000000000000000000000000;;	  - 9
0000000000000000000000000000000000000000;;	  - 8
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			// This test case is used just to demonstrate the behavior when dealing with a list with duplicate
0000000000000000000000000000000000000000;;			Description: "behavior of set element order for a merging list with duplicate",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup1
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup2
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup1
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup2
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup1
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWayResult: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup1
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup2
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingList:
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup1
0000000000000000000000000000000000000000;;	- name: 2
0000000000000000000000000000000000000000;;	  value: dup2
0000000000000000000000000000000000000000;;	- name: 1
0000000000000000000000000000000000000000;;	- name: 4
0000000000000000000000000000000000000000;;	- name: 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			// This test case is used just to demonstrate the behavior when dealing with a list with duplicate
0000000000000000000000000000000000000000;;			Description: "behavior of set element order for a merging int list with duplicate",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWayResult: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	mergingIntList:
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 2
0000000000000000000000000000000000000000;;	- 1
0000000000000000000000000000000000000000;;	- 4
0000000000000000000000000000000000000000;;	- 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map should clear defaulted field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`{}`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  value: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - other
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map should clear defaulted field with conflict (discriminated union)",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`{}`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: type1
0000000000000000000000000000000000000000;;	  value: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: type2
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: type2
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - other
0000000000000000000000000000000000000000;;	  name: type2
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: type2
0000000000000000000000000000000000000000;;	  other: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds a field and clear a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes a field and clears a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map clears a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  other: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`{}`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map nested map with no change",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds a field in a nested map",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes a field in a nested map",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key2: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key2: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map changes a field in a nested map",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: a
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: x
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: x
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map changes a field in a nested map with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: old
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: new
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: modified
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - simpleMap
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  simpleMap:
0000000000000000000000000000000000000000;;	    key1: modified
0000000000000000000000000000000000000000;;	    key2: b
0000000000000000000000000000000000000000;;	    key3: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map replaces non-merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map nested non-merging list with no change",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map nested non-merging list with no change with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - nonMergingList
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes nested non-merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map delete nested non-merging list with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  nonMergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  nonMergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map nested merging int list with no change",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 2
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds an item in nested merging int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 2
0000000000000000000000000000000000000000;;	    - 4
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 2
0000000000000000000000000000000000000000;;	    - 4
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes an item in nested merging int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds an item and deletes an item in nested merging int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 5
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 5
0000000000000000000000000000000000000000;;	  $deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 3
0000000000000000000000000000000000000000;;	    - 5
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingIntList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 5
0000000000000000000000000000000000000000;;	  $deleteFromPrimitiveList/mergingIntList:
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingIntList:
0000000000000000000000000000000000000000;;	    - 1
0000000000000000000000000000000000000000;;	    - 3
0000000000000000000000000000000000000000;;	    - 5
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	  - 5
0000000000000000000000000000000000000000;;	  - 4
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes nested merging int list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingIntList:
0000000000000000000000000000000000000000;;	  - 1
0000000000000000000000000000000000000000;;	  - 2
0000000000000000000000000000000000000000;;	  - 3
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  mergingIntList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map nested merging list with no change",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	    - name: b
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map adds an item in nested merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	    - name: b
0000000000000000000000000000000000000000;;	    - name: c
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	    - name: b
0000000000000000000000000000000000000000;;	    - name: c
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: c
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map changes an item in nested merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: foo
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	    - name: b
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	    - name: b
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    value: bar
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes nested merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	  mergingList: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: bar
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys map deletes an item in nested merging list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  $retainKeys:
0000000000000000000000000000000000000000;;	    - mergingList
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  $setElementOrder/mergingList:
0000000000000000000000000000000000000000;;	    - name: a
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: b
0000000000000000000000000000000000000000;;	    $patch: delete
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMap:
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  mergingList:
0000000000000000000000000000000000000000;;	  - name: a
0000000000000000000000000000000000000000;;	  - name: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps clears a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`{}`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps clears a field with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: old
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: modified
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps changes a field and clear a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: old
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: old
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps changes a field and clear a field with conflict",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: old
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: modified
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: new
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps adds a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps adds a field and clear a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	    - value
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps deletes a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "retainKeys list of maps deletes a field and clear a field",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	  value: a
0000000000000000000000000000000000000000;;	  other: x
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/retainKeysMergingList:
0000000000000000000000000000000000000000;;	  - name: bar
0000000000000000000000000000000000000000;;	  - name: foo
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- $retainKeys:
0000000000000000000000000000000000000000;;	    - name
0000000000000000000000000000000000000000;;	  name: foo
0000000000000000000000000000000000000000;;	  value: null
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	retainKeysMergingList:
0000000000000000000000000000000000000000;;	- name: bar
0000000000000000000000000000000000000000;;	- name: foo
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStrategicMergePatch(t *testing.T) {
0000000000000000000000000000000000000000;;		testStrategicMergePatchWithCustomArguments(t, "bad original",
0000000000000000000000000000000000000000;;			"<THIS IS NOT JSON>", "{}", mergeItem, mergepatch.ErrBadJSONDoc)
0000000000000000000000000000000000000000;;		testStrategicMergePatchWithCustomArguments(t, "bad patch",
0000000000000000000000000000000000000000;;			"{}", "<THIS IS NOT JSON>", mergeItem, mergepatch.ErrBadJSONDoc)
0000000000000000000000000000000000000000;;		testStrategicMergePatchWithCustomArguments(t, "bad struct",
0000000000000000000000000000000000000000;;			"{}", "{}", []byte("<THIS IS NOT A STRUCT>"), mergepatch.ErrBadArgKind(struct{}{}, []byte{}))
0000000000000000000000000000000000000000;;		testStrategicMergePatchWithCustomArguments(t, "nil struct",
0000000000000000000000000000000000000000;;			"{}", "{}", nil, mergepatch.ErrBadArgKind(struct{}{}, nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tc := StrategicMergePatchTestCases{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(createStrategicMergePatchTestCaseData, &tc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("can't unmarshal test cases: %s\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range tc.TestCases {
0000000000000000000000000000000000000000;;			testTwoWayPatch(t, c)
0000000000000000000000000000000000000000;;			testThreeWayPatch(t, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range strategicMergePatchRawTestCases {
0000000000000000000000000000000000000000;;			testTwoWayPatchForRawTestCase(t, c)
0000000000000000000000000000000000000000;;			testThreeWayPatchForRawTestCase(t, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testStrategicMergePatchWithCustomArguments(t *testing.T, description, original, patch string, dataStruct interface{}, err error) {
0000000000000000000000000000000000000000;;		_, err2 := StrategicMergePatch([]byte(original), []byte(patch), dataStruct)
0000000000000000000000000000000000000000;;		if err2 != err {
0000000000000000000000000000000000000000;;			if err2 == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error: %s\ndid not occur in test case: %s", err, description)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err == nil || err2.Error() != err.Error() {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %s\noccurred in test case: %s", err2, description)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testTwoWayPatch(t *testing.T, c StrategicMergePatchTestCase) {
0000000000000000000000000000000000000000;;		original, expectedPatch, modified, expectedResult := twoWayTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualPatch, err := CreateTwoWayMergePatch(original, modified, mergeItem)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\ncannot create two way patch: %s:\n%s\n",
0000000000000000000000000000000000000000;;				err, c.Description, original, mergepatch.ToYAMLOrError(c.StrategicMergePatchTestCaseData))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testPatchCreation(t, expectedPatch, actualPatch, c.Description)
0000000000000000000000000000000000000000;;		testPatchApplication(t, original, actualPatch, expectedResult, c.Description, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testTwoWayPatchForRawTestCase(t *testing.T, c StrategicMergePatchRawTestCase) {
0000000000000000000000000000000000000000;;		original, expectedPatch, modified, expectedResult := twoWayRawTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualPatch, err := CreateTwoWayMergePatch(original, modified, mergeItem)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\ncannot create two way patch:\noriginal:%s\ntwoWay:%s\nmodified:%s\ncurrent:%s\nthreeWay:%s\nresult:%s\n",
0000000000000000000000000000000000000000;;				err, c.Description, c.Original, c.TwoWay, c.Modified, c.Current, c.ThreeWay, c.Result)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testPatchCreation(t, expectedPatch, actualPatch, c.Description)
0000000000000000000000000000000000000000;;		testPatchApplication(t, original, actualPatch, expectedResult, c.Description, c.ExpectedError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func twoWayTestCaseToJSONOrFail(t *testing.T, c StrategicMergePatchTestCase) ([]byte, []byte, []byte, []byte) {
0000000000000000000000000000000000000000;;		expectedResult := c.TwoWayResult
0000000000000000000000000000000000000000;;		if expectedResult == nil {
0000000000000000000000000000000000000000;;			expectedResult = c.Modified
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Original), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.TwoWay), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Modified), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, expectedResult), c.Description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func twoWayRawTestCaseToJSONOrFail(t *testing.T, c StrategicMergePatchRawTestCase) ([]byte, []byte, []byte, []byte) {
0000000000000000000000000000000000000000;;		expectedResult := c.TwoWayResult
0000000000000000000000000000000000000000;;		if expectedResult == nil {
0000000000000000000000000000000000000000;;			expectedResult = c.Modified
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return yamlToJSONOrError(t, c.Original),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.TwoWay),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.Modified),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, expectedResult)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testThreeWayPatch(t *testing.T, c StrategicMergePatchTestCase) {
0000000000000000000000000000000000000000;;		original, modified, current, expected, result := threeWayTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;		actual, err := CreateThreeWayMergePatch(original, modified, current, mergeItem, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !mergepatch.IsConflict(err) {
0000000000000000000000000000000000000000;;				t.Errorf("error: %s\nin test case: %s\ncannot create three way patch:\n%s\n",
0000000000000000000000000000000000000000;;					err, c.Description, mergepatch.ToYAMLOrError(c.StrategicMergePatchTestCaseData))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !strings.Contains(c.Description, "conflict") {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected conflict: %s\nin test case: %s\ncannot create three way patch:\n%s\n",
0000000000000000000000000000000000000000;;					err, c.Description, mergepatch.ToYAMLOrError(c.StrategicMergePatchTestCaseData))
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(c.Result) > 0 {
0000000000000000000000000000000000000000;;				actual, err := CreateThreeWayMergePatch(original, modified, current, mergeItem, true)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("error: %s\nin test case: %s\ncannot force three way patch application:\n%s\n",
0000000000000000000000000000000000000000;;						err, c.Description, mergepatch.ToYAMLOrError(c.StrategicMergePatchTestCaseData))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testPatchCreation(t, expected, actual, c.Description)
0000000000000000000000000000000000000000;;				testPatchApplication(t, current, actual, result, c.Description, "")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if strings.Contains(c.Description, "conflict") || len(c.Result) < 1 {
0000000000000000000000000000000000000000;;			t.Errorf("error in test case: %s\nexpected conflict did not occur:\n%s\n",
0000000000000000000000000000000000000000;;				c.Description, mergepatch.ToYAMLOrError(c.StrategicMergePatchTestCaseData))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testPatchCreation(t, expected, actual, c.Description)
0000000000000000000000000000000000000000;;		testPatchApplication(t, current, actual, result, c.Description, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testThreeWayPatchForRawTestCase(t *testing.T, c StrategicMergePatchRawTestCase) {
0000000000000000000000000000000000000000;;		original, modified, current, expected, result := threeWayRawTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;		actual, err := CreateThreeWayMergePatch(original, modified, current, mergeItem, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			if !mergepatch.IsConflict(err) {
0000000000000000000000000000000000000000;;				t.Errorf("error: %s\nin test case: %s\ncannot create three way patch:\noriginal:%s\ntwoWay:%s\nmodified:%s\ncurrent:%s\nthreeWay:%s\nresult:%s\n",
0000000000000000000000000000000000000000;;					err, c.Description, c.Original, c.TwoWay, c.Modified, c.Current, c.ThreeWay, c.Result)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !strings.Contains(c.Description, "conflict") {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected conflict: %s\nin test case: %s\ncannot create three way patch:\noriginal:%s\ntwoWay:%s\nmodified:%s\ncurrent:%s\nthreeWay:%s\nresult:%s\n",
0000000000000000000000000000000000000000;;					err, c.Description, c.Original, c.TwoWay, c.Modified, c.Current, c.ThreeWay, c.Result)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(c.Result) > 0 {
0000000000000000000000000000000000000000;;				actual, err := CreateThreeWayMergePatch(original, modified, current, mergeItem, true)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("error: %s\nin test case: %s\ncannot force three way patch application:\noriginal:%s\ntwoWay:%s\nmodified:%s\ncurrent:%s\nthreeWay:%s\nresult:%s\n",
0000000000000000000000000000000000000000;;						err, c.Description, c.Original, c.TwoWay, c.Modified, c.Current, c.ThreeWay, c.Result)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				testPatchCreation(t, expected, actual, c.Description)
0000000000000000000000000000000000000000;;				testPatchApplication(t, current, actual, result, c.Description, c.ExpectedError)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if strings.Contains(c.Description, "conflict") || len(c.Result) < 1 {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\nexpected conflict did not occur:\noriginal:%s\ntwoWay:%s\nmodified:%s\ncurrent:%s\nthreeWay:%s\nresult:%s\n",
0000000000000000000000000000000000000000;;				err, c.Description, c.Original, c.TwoWay, c.Modified, c.Current, c.ThreeWay, c.Result)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testPatchCreation(t, expected, actual, c.Description)
0000000000000000000000000000000000000000;;		testPatchApplication(t, current, actual, result, c.Description, c.ExpectedError)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func threeWayTestCaseToJSONOrFail(t *testing.T, c StrategicMergePatchTestCase) ([]byte, []byte, []byte, []byte, []byte) {
0000000000000000000000000000000000000000;;		return sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Original), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Modified), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Current), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.ThreeWay), c.Description),
0000000000000000000000000000000000000000;;			sortJsonOrFail(t, testObjectToJSONOrFail(t, c.Result), c.Description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func threeWayRawTestCaseToJSONOrFail(t *testing.T, c StrategicMergePatchRawTestCase) ([]byte, []byte, []byte, []byte, []byte) {
0000000000000000000000000000000000000000;;		return yamlToJSONOrError(t, c.Original),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.Modified),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.Current),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.ThreeWay),
0000000000000000000000000000000000000000;;			yamlToJSONOrError(t, c.Result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPatchCreation(t *testing.T, expected, actual []byte, description string) {
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("error in test case: %s\nexpected patch:\n%s\ngot:\n%s\n",
0000000000000000000000000000000000000000;;				description, jsonToYAMLOrError(expected), jsonToYAMLOrError(actual))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPatchApplication(t *testing.T, original, patch, expected []byte, description, expectedError string) {
0000000000000000000000000000000000000000;;		result, err := StrategicMergePatch(original, patch, mergeItem)
0000000000000000000000000000000000000000;;		if len(expectedError) != 0 {
0000000000000000000000000000000000000000;;			if err != nil && strings.Contains(err.Error(), expectedError) {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t.Errorf("expected error should contain:\n%s\nin test case: %s\nbut got:\n%s\n", expectedError, description, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\ncannot apply patch:\n%s\nto original:\n%s\n",
0000000000000000000000000000000000000000;;				err, description, jsonToYAMLOrError(patch), jsonToYAMLOrError(original))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(result, expected) {
0000000000000000000000000000000000000000;;			format := "error in test case: %s\npatch application failed:\noriginal:\n%s\npatch:\n%s\nexpected:\n%s\ngot:\n%s\n"
0000000000000000000000000000000000000000;;			t.Errorf(format, description,
0000000000000000000000000000000000000000;;				jsonToYAMLOrError(original), jsonToYAMLOrError(patch),
0000000000000000000000000000000000000000;;				jsonToYAMLOrError(expected), jsonToYAMLOrError(result))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testObjectToJSONOrFail(t *testing.T, o map[string]interface{}) []byte {
0000000000000000000000000000000000000000;;		if o == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		j, err := toJSON(o)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return j
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sortJsonOrFail(t *testing.T, j []byte, description string) []byte {
0000000000000000000000000000000000000000;;		if j == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, err := sortMergeListsByName(j, mergeItem)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\ncannot sort object:\n%s\n", err, description, j)
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonToYAMLOrError(j []byte) string {
0000000000000000000000000000000000000000;;		y, err := jsonToYAML(j)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return string(y)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toJSON(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		j, err := json.Marshal(v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("json marshal failed: %v\n%v\n", err, spew.Sdump(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return j, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonToYAML(j []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		y, err := yaml.JSONToYAML(j)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("json to yaml failed: %v\n%v\n", err, j)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return y, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yamlToJSON(y []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		j, err := yaml.YAMLToJSON(y)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("yaml to json failed: %v\n%v\n", err, y)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return j, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yamlToJSONOrError(t *testing.T, y []byte) []byte {
0000000000000000000000000000000000000000;;		j, err := yamlToJSON(y)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("%v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return j
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PrecisionItem struct {
0000000000000000000000000000000000000000;;		Name    string
0000000000000000000000000000000000000000;;		Int32   int32
0000000000000000000000000000000000000000;;		Int64   int64
0000000000000000000000000000000000000000;;		Float32 float32
0000000000000000000000000000000000000000;;		Float64 float64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var precisionItem PrecisionItem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNumberConversion(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Old            string
0000000000000000000000000000000000000000;;			New            string
0000000000000000000000000000000000000000;;			ExpectedPatch  string
0000000000000000000000000000000000000000;;			ExpectedResult string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				Old:            `{}`,
0000000000000000000000000000000000000000;;				New:            `{}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"int32 medium": {
0000000000000000000000000000000000000000;;				Old:            `{"int32":1000000}`,
0000000000000000000000000000000000000000;;				New:            `{"int32":1000000,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"int32":1000000,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"int32 max": {
0000000000000000000000000000000000000000;;				Old:            `{"int32":2147483647}`,
0000000000000000000000000000000000000000;;				New:            `{"int32":2147483647,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"int32":2147483647,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"int64 medium": {
0000000000000000000000000000000000000000;;				Old:            `{"int64":1000000}`,
0000000000000000000000000000000000000000;;				New:            `{"int64":1000000,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"int64":1000000,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"int64 max": {
0000000000000000000000000000000000000000;;				Old:            `{"int64":9223372036854775807}`,
0000000000000000000000000000000000000000;;				New:            `{"int64":9223372036854775807,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"int64":9223372036854775807,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"float32 max": {
0000000000000000000000000000000000000000;;				Old:            `{"float32":3.4028234663852886e+38}`,
0000000000000000000000000000000000000000;;				New:            `{"float32":3.4028234663852886e+38,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"float32":3.4028234663852886e+38,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"float64 max": {
0000000000000000000000000000000000000000;;				Old:            `{"float64":1.7976931348623157e+308}`,
0000000000000000000000000000000000000000;;				New:            `{"float64":1.7976931348623157e+308,"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedPatch:  `{"name":"newname"}`,
0000000000000000000000000000000000000000;;				ExpectedResult: `{"float64":1.7976931348623157e+308,"name":"newname"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			patch, err := CreateTwoWayMergePatch([]byte(tc.Old), []byte(tc.New), precisionItem)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.ExpectedPatch != string(patch) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %s, got %s", k, tc.ExpectedPatch, string(patch))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			result, err := StrategicMergePatch([]byte(tc.Old), patch, precisionItem)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.ExpectedResult != string(result) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %s, got %s", k, tc.ExpectedResult, string(result))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var replaceRawExtensionPatchTestCases = []StrategicMergePatchRawTestCase{
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace RawExtension field, rest unchanched",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Some: Generic
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	  Field: Period
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Some: Generic
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	  Field: Period
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWayResult: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			Description: "replace RawExtension field and merge list",
0000000000000000000000000000000000000000;;			StrategicMergePatchRawTestCaseData: StrategicMergePatchRawTestCaseData{
0000000000000000000000000000000000000000;;				Original: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Some: Generic
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	  Field: Period
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Current: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Some: Generic
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	  Field: Period
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Modified: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				TwoWayResult: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				ThreeWay: []byte(`
0000000000000000000000000000000000000000;;	$setElementOrder/merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;				Result: []byte(`
0000000000000000000000000000000000000000;;	name: my-object
0000000000000000000000000000000000000000;;	value: some-value
0000000000000000000000000000000000000000;;	other: current-other
0000000000000000000000000000000000000000;;	merginglist:
0000000000000000000000000000000000000000;;	  - name: 1
0000000000000000000000000000000000000000;;	  - name: 2
0000000000000000000000000000000000000000;;	  - name: 3
0000000000000000000000000000000000000000;;	replacingItem:
0000000000000000000000000000000000000000;;	  Newly: Modified
0000000000000000000000000000000000000000;;	  Yaml: Inside
0000000000000000000000000000000000000000;;	  The: RawExtension
0000000000000000000000000000000000000000;;	`),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceWithRawExtension(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, c := range replaceRawExtensionPatchTestCases {
0000000000000000000000000000000000000000;;			testTwoWayPatchForRawTestCase(t, c)
0000000000000000000000000000000000000000;;			testThreeWayPatchForRawTestCase(t, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnknownField(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Original string
0000000000000000000000000000000000000000;;			Current  string
0000000000000000000000000000000000000000;;			Modified string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ExpectedTwoWay         string
0000000000000000000000000000000000000000;;			ExpectedTwoWayErr      string
0000000000000000000000000000000000000000;;			ExpectedTwoWayResult   string
0000000000000000000000000000000000000000;;			ExpectedThreeWay       string
0000000000000000000000000000000000000000;;			ExpectedThreeWayErr    string
0000000000000000000000000000000000000000;;			ExpectedThreeWayResult string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// cases we can successfully strategically merge
0000000000000000000000000000000000000000;;			"no diff": {
0000000000000000000000000000000000000000;;				Original: `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				Current:  `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				Modified: `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ExpectedTwoWay:         `{}`,
0000000000000000000000000000000000000000;;				ExpectedTwoWayResult:   `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWay:       `{}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWayResult: `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"added only": {
0000000000000000000000000000000000000000;;				Original: `{"name":"foo"}`,
0000000000000000000000000000000000000000;;				Current:  `{"name":"foo"}`,
0000000000000000000000000000000000000000;;				Modified: `{"name":"foo","scalar":true,"complex":{"nested":true},"array":[1,2,3]}`,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ExpectedTwoWay:         `{"array":[1,2,3],"complex":{"nested":true},"scalar":true}`,
0000000000000000000000000000000000000000;;				ExpectedTwoWayResult:   `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWay:       `{"array":[1,2,3],"complex":{"nested":true},"scalar":true}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWayResult: `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"removed only": {
0000000000000000000000000000000000000000;;				Original: `{"name":"foo","scalar":true,"complex":{"nested":true}}`,
0000000000000000000000000000000000000000;;				Current:  `{"name":"foo","scalar":true,"complex":{"nested":true},"array":[1,2,3]}`,
0000000000000000000000000000000000000000;;				Modified: `{"name":"foo"}`,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ExpectedTwoWay:         `{"complex":null,"scalar":null}`,
0000000000000000000000000000000000000000;;				ExpectedTwoWayResult:   `{"name":"foo"}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWay:       `{"complex":null,"scalar":null}`,
0000000000000000000000000000000000000000;;				ExpectedThreeWayResult: `{"array":[1,2,3],"name":"foo"}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// cases we cannot successfully strategically merge (expect errors)
0000000000000000000000000000000000000000;;			"diff": {
0000000000000000000000000000000000000000;;				Original: `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				Current:  `{"array":[1,2,3],"complex":{"nested":true},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;				Modified: `{"array":[1,2,3],"complex":{"nested":false},"name":"foo","scalar":true}`,
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				ExpectedTwoWayErr:   `unable to find api field`,
0000000000000000000000000000000000000000;;				ExpectedThreeWayErr: `unable to find api field`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, k := range sets.StringKeySet(testcases).List() {
0000000000000000000000000000000000000000;;			tc := testcases[k]
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				twoWay, err := CreateTwoWayMergePatch([]byte(tc.Original), []byte(tc.Modified), &MergeItem{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					if len(tc.ExpectedTwoWayErr) == 0 {
0000000000000000000000000000000000000000;;						t.Errorf("%s: error making two-way patch: %v", k, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !strings.Contains(err.Error(), tc.ExpectedTwoWayErr) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error making two-way patch to contain '%s', got %s", k, tc.ExpectedTwoWayErr, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if string(twoWay) != tc.ExpectedTwoWay {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected two-way patch:\n\t%s\ngot\n\t%s", k, string(tc.ExpectedTwoWay), string(twoWay))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				twoWayResult, err := StrategicMergePatch([]byte(tc.Original), twoWay, MergeItem{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: error applying two-way patch: %v", k, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if string(twoWayResult) != tc.ExpectedTwoWayResult {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected two-way result:\n\t%s\ngot\n\t%s", k, string(tc.ExpectedTwoWayResult), string(twoWayResult))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				threeWay, err := CreateThreeWayMergePatch([]byte(tc.Original), []byte(tc.Modified), []byte(tc.Current), &MergeItem{}, false)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					if len(tc.ExpectedThreeWayErr) == 0 {
0000000000000000000000000000000000000000;;						t.Errorf("%s: error making three-way patch: %v", k, err)
0000000000000000000000000000000000000000;;					} else if !strings.Contains(err.Error(), tc.ExpectedThreeWayErr) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error making three-way patch to contain '%s', got %s", k, tc.ExpectedThreeWayErr, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if string(threeWay) != tc.ExpectedThreeWay {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected three-way patch:\n\t%s\ngot\n\t%s", k, string(tc.ExpectedThreeWay), string(threeWay))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				threeWayResult, err := StrategicMergePatch([]byte(tc.Current), threeWay, MergeItem{})
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: error applying three-way patch: %v", k, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				} else if string(threeWayResult) != tc.ExpectedThreeWayResult {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected three-way result:\n\t%s\ngot\n\t%s", k, string(tc.ExpectedThreeWayResult), string(threeWayResult))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
