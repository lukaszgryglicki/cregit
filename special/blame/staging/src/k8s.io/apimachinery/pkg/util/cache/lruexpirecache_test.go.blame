0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
367bf65f6d973b3b60fc9476f4a54cbbb7fb68b4;pkg/util/cache/lruexpirecache_test.go[pkg/util/cache/lruexpirecache_test.go][staging/src/k8s.io/apimachinery/pkg/util/cache/lruexpirecache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/groupcache/lru"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectEntry(t *testing.T, c *LRUExpireCache, key lru.Key, value interface{}) {
0000000000000000000000000000000000000000;;		result, ok := c.Get(key)
0000000000000000000000000000000000000000;;		if !ok || result != value {
0000000000000000000000000000000000000000;;			t.Errorf("Expected cache[%v]: %v, got %v", key, value, result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func expectNotEntry(t *testing.T, c *LRUExpireCache, key lru.Key) {
0000000000000000000000000000000000000000;;		if result, ok := c.Get(key); ok {
0000000000000000000000000000000000000000;;			t.Errorf("Expected cache[%v] to be empty, got %v", key, result)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSimpleGet(t *testing.T) {
0000000000000000000000000000000000000000;;		c := NewLRUExpireCache(10)
0000000000000000000000000000000000000000;;		c.Add("long-lived", "12345", 10*time.Hour)
0000000000000000000000000000000000000000;;		expectEntry(t, c, "long-lived", "12345")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExpiredGet(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		c := NewLRUExpireCacheWithClock(10, fakeClock)
0000000000000000000000000000000000000000;;		c.Add("short-lived", "12345", 1*time.Millisecond)
0000000000000000000000000000000000000000;;		// ensure the entry expired
0000000000000000000000000000000000000000;;		fakeClock.Step(2 * time.Millisecond)
0000000000000000000000000000000000000000;;		expectNotEntry(t, c, "short-lived")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLRUOverflow(t *testing.T) {
0000000000000000000000000000000000000000;;		c := NewLRUExpireCache(4)
0000000000000000000000000000000000000000;;		c.Add("elem1", "1", 10*time.Hour)
0000000000000000000000000000000000000000;;		c.Add("elem2", "2", 10*time.Hour)
0000000000000000000000000000000000000000;;		c.Add("elem3", "3", 10*time.Hour)
0000000000000000000000000000000000000000;;		c.Add("elem4", "4", 10*time.Hour)
0000000000000000000000000000000000000000;;		c.Add("elem5", "5", 10*time.Hour)
0000000000000000000000000000000000000000;;		expectNotEntry(t, c, "elem1")
0000000000000000000000000000000000000000;;		expectEntry(t, c, "elem2", "2")
0000000000000000000000000000000000000000;;		expectEntry(t, c, "elem3", "3")
0000000000000000000000000000000000000000;;		expectEntry(t, c, "elem4", "4")
0000000000000000000000000000000000000000;;		expectEntry(t, c, "elem5", "5")
0000000000000000000000000000000000000000;;	}
