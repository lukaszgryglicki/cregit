0000000000000000000000000000000000000000;;	// +build go1.8
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEvaluateTypes(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			In   string
0000000000000000000000000000000000000000;;			Data interface{}
0000000000000000000000000000000000000000;;			Out  string
0000000000000000000000000000000000000000;;			Err  bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Invalid syntaxes
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:  `x`,
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:  ``,
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Null
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `null`,
0000000000000000000000000000000000000000;;				Data: nil,
0000000000000000000000000000000000000000;;				Out:  `null`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Booleans
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `true`,
0000000000000000000000000000000000000000;;				Data: true,
0000000000000000000000000000000000000000;;				Out:  `true`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `false`,
0000000000000000000000000000000000000000;;				Data: false,
0000000000000000000000000000000000000000;;				Out:  `false`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Integers
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `0`,
0000000000000000000000000000000000000000;;				Data: int64(0),
0000000000000000000000000000000000000000;;				Out:  `0`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-0`,
0000000000000000000000000000000000000000;;				Data: int64(-0),
0000000000000000000000000000000000000000;;				Out:  `0`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `1`,
0000000000000000000000000000000000000000;;				Data: int64(1),
0000000000000000000000000000000000000000;;				Out:  `1`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `2147483647`,
0000000000000000000000000000000000000000;;				Data: int64(math.MaxInt32),
0000000000000000000000000000000000000000;;				Out:  `2147483647`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-2147483648`,
0000000000000000000000000000000000000000;;				Data: int64(math.MinInt32),
0000000000000000000000000000000000000000;;				Out:  `-2147483648`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `9223372036854775807`,
0000000000000000000000000000000000000000;;				Data: int64(math.MaxInt64),
0000000000000000000000000000000000000000;;				Out:  `9223372036854775807`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-9223372036854775808`,
0000000000000000000000000000000000000000;;				Data: int64(math.MinInt64),
0000000000000000000000000000000000000000;;				Out:  `-9223372036854775808`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Int overflow
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `9223372036854775808`, // MaxInt64 + 1
0000000000000000000000000000000000000000;;				Data: float64(9223372036854775808),
0000000000000000000000000000000000000000;;				Out:  `9223372036854776000`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-9223372036854775809`, // MinInt64 - 1
0000000000000000000000000000000000000000;;				Data: float64(math.MinInt64),
0000000000000000000000000000000000000000;;				Out:  `-9223372036854776000`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Floats
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `0.0`,
0000000000000000000000000000000000000000;;				Data: float64(0),
0000000000000000000000000000000000000000;;				Out:  `0`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-0.0`,
0000000000000000000000000000000000000000;;				Data: float64(-0.0),
0000000000000000000000000000000000000000;;				Out:  `-0`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `0.5`,
0000000000000000000000000000000000000000;;				Data: float64(0.5),
0000000000000000000000000000000000000000;;				Out:  `0.5`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `1e3`,
0000000000000000000000000000000000000000;;				Data: float64(1e3),
0000000000000000000000000000000000000000;;				Out:  `1000`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `1.5`,
0000000000000000000000000000000000000000;;				Data: float64(1.5),
0000000000000000000000000000000000000000;;				Out:  `1.5`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `-0.3`,
0000000000000000000000000000000000000000;;				Data: float64(-.3),
0000000000000000000000000000000000000000;;				Out:  `-0.3`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Largest representable float32
0000000000000000000000000000000000000000;;				In:   `3.40282346638528859811704183484516925440e+38`,
0000000000000000000000000000000000000000;;				Data: float64(math.MaxFloat32),
0000000000000000000000000000000000000000;;				Out:  strconv.FormatFloat(math.MaxFloat32, 'g', -1, 64),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Smallest float32 without losing precision
0000000000000000000000000000000000000000;;				In:   `1.175494351e-38`,
0000000000000000000000000000000000000000;;				Data: float64(1.175494351e-38),
0000000000000000000000000000000000000000;;				Out:  `1.175494351e-38`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// float32 closest to zero
0000000000000000000000000000000000000000;;				In:   `1.401298464324817070923729583289916131280e-45`,
0000000000000000000000000000000000000000;;				Data: float64(math.SmallestNonzeroFloat32),
0000000000000000000000000000000000000000;;				Out:  strconv.FormatFloat(math.SmallestNonzeroFloat32, 'g', -1, 64),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Largest representable float64
0000000000000000000000000000000000000000;;				In:   `1.797693134862315708145274237317043567981e+308`,
0000000000000000000000000000000000000000;;				Data: float64(math.MaxFloat64),
0000000000000000000000000000000000000000;;				Out:  strconv.FormatFloat(math.MaxFloat64, 'g', -1, 64),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// Closest to zero without losing precision
0000000000000000000000000000000000000000;;				In:   `2.2250738585072014e-308`,
0000000000000000000000000000000000000000;;				Data: float64(2.2250738585072014e-308),
0000000000000000000000000000000000000000;;				Out:  `2.2250738585072014e-308`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// float64 closest to zero
0000000000000000000000000000000000000000;;				In:   `4.940656458412465441765687928682213723651e-324`,
0000000000000000000000000000000000000000;;				Data: float64(math.SmallestNonzeroFloat64),
0000000000000000000000000000000000000000;;				Out:  strconv.FormatFloat(math.SmallestNonzeroFloat64, 'g', -1, 64),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				// math.MaxFloat64 + 2 overflow
0000000000000000000000000000000000000000;;				In:  `1.7976931348623159e+308`,
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Strings
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `""`,
0000000000000000000000000000000000000000;;				Data: string(""),
0000000000000000000000000000000000000000;;				Out:  `""`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `"0"`,
0000000000000000000000000000000000000000;;				Data: string("0"),
0000000000000000000000000000000000000000;;				Out:  `"0"`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `"A"`,
0000000000000000000000000000000000000000;;				Data: string("A"),
0000000000000000000000000000000000000000;;				Out:  `"A"`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `"Iñtërnâtiônàlizætiøn"`,
0000000000000000000000000000000000000000;;				Data: string("Iñtërnâtiônàlizætiøn"),
0000000000000000000000000000000000000000;;				Out:  `"Iñtërnâtiônàlizætiøn"`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Arrays
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `[]`,
0000000000000000000000000000000000000000;;				Data: []interface{}{},
0000000000000000000000000000000000000000;;				Out:  `[]`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In: `[` + strings.Join([]string{
0000000000000000000000000000000000000000;;					`null`,
0000000000000000000000000000000000000000;;					`true`,
0000000000000000000000000000000000000000;;					`false`,
0000000000000000000000000000000000000000;;					`0`,
0000000000000000000000000000000000000000;;					`9223372036854775807`,
0000000000000000000000000000000000000000;;					`0.0`,
0000000000000000000000000000000000000000;;					`0.5`,
0000000000000000000000000000000000000000;;					`1.0`,
0000000000000000000000000000000000000000;;					`1.797693134862315708145274237317043567981e+308`,
0000000000000000000000000000000000000000;;					`"0"`,
0000000000000000000000000000000000000000;;					`"A"`,
0000000000000000000000000000000000000000;;					`"Iñtërnâtiônàlizætiøn"`,
0000000000000000000000000000000000000000;;					`[null,true,1,1.0,1.5]`,
0000000000000000000000000000000000000000;;					`{"boolkey":true,"floatkey":1.0,"intkey":1,"nullkey":null}`,
0000000000000000000000000000000000000000;;				}, ",") + `]`,
0000000000000000000000000000000000000000;;				Data: []interface{}{
0000000000000000000000000000000000000000;;					nil,
0000000000000000000000000000000000000000;;					true,
0000000000000000000000000000000000000000;;					false,
0000000000000000000000000000000000000000;;					int64(0),
0000000000000000000000000000000000000000;;					int64(math.MaxInt64),
0000000000000000000000000000000000000000;;					float64(0.0),
0000000000000000000000000000000000000000;;					float64(0.5),
0000000000000000000000000000000000000000;;					float64(1.0),
0000000000000000000000000000000000000000;;					float64(math.MaxFloat64),
0000000000000000000000000000000000000000;;					string("0"),
0000000000000000000000000000000000000000;;					string("A"),
0000000000000000000000000000000000000000;;					string("Iñtërnâtiônàlizætiøn"),
0000000000000000000000000000000000000000;;					[]interface{}{nil, true, int64(1), float64(1.0), float64(1.5)},
0000000000000000000000000000000000000000;;					map[string]interface{}{"nullkey": nil, "boolkey": true, "intkey": int64(1), "floatkey": float64(1.0)},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Out: `[` + strings.Join([]string{
0000000000000000000000000000000000000000;;					`null`,
0000000000000000000000000000000000000000;;					`true`,
0000000000000000000000000000000000000000;;					`false`,
0000000000000000000000000000000000000000;;					`0`,
0000000000000000000000000000000000000000;;					`9223372036854775807`,
0000000000000000000000000000000000000000;;					`0`,
0000000000000000000000000000000000000000;;					`0.5`,
0000000000000000000000000000000000000000;;					`1`,
0000000000000000000000000000000000000000;;					strconv.FormatFloat(math.MaxFloat64, 'g', -1, 64),
0000000000000000000000000000000000000000;;					`"0"`,
0000000000000000000000000000000000000000;;					`"A"`,
0000000000000000000000000000000000000000;;					`"Iñtërnâtiônàlizætiøn"`,
0000000000000000000000000000000000000000;;					`[null,true,1,1,1.5]`,
0000000000000000000000000000000000000000;;					`{"boolkey":true,"floatkey":1,"intkey":1,"nullkey":null}`, // gets alphabetized by Marshal
0000000000000000000000000000000000000000;;				}, ",") + `]`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Maps
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `{}`,
0000000000000000000000000000000000000000;;				Data: map[string]interface{}{},
0000000000000000000000000000000000000000;;				Out:  `{}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				In:   `{"boolkey":true,"floatkey":1.0,"intkey":1,"nullkey":null}`,
0000000000000000000000000000000000000000;;				Data: map[string]interface{}{"nullkey": nil, "boolkey": true, "intkey": int64(1), "floatkey": float64(1.0)},
0000000000000000000000000000000000000000;;				Out:  `{"boolkey":true,"floatkey":1,"intkey":1,"nullkey":null}`, // gets alphabetized by Marshal
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			inputJSON := fmt.Sprintf(`{"data":%s}`, tc.In)
0000000000000000000000000000000000000000;;			expectedJSON := fmt.Sprintf(`{"data":%s}`, tc.Out)
0000000000000000000000000000000000000000;;			m := map[string]interface{}{}
0000000000000000000000000000000000000000;;			err := Unmarshal([]byte(inputJSON), &m)
0000000000000000000000000000000000000000;;			if tc.Err && err != nil {
0000000000000000000000000000000000000000;;				// Expected error
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: error decoding: %v", tc.In, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tc.Err {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error, got none", tc.In)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			data, ok := m["data"]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("%s: decoded object missing data key: %#v", tc.In, m)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(tc.Data, data) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n\t%#v (%v), got\n\t%#v (%v)", tc.In, tc.Data, reflect.TypeOf(tc.Data), data, reflect.TypeOf(data))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			outputJSON, err := Marshal(m)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: error encoding: %v", tc.In, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if expectedJSON != string(outputJSON) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected\n\t%s, got\n\t%s", tc.In, expectedJSON, string(outputJSON))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
