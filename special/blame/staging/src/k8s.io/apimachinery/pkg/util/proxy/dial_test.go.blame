0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
5f42ef1945ec8929997a15417da45f79b03a3083;pkg/util/proxy/dial_test.go[pkg/util/proxy/dial_test.go][staging/src/k8s.io/apimachinery/pkg/util/proxy/dial_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDialURL(t *testing.T) {
0000000000000000000000000000000000000000;;		roots := x509.NewCertPool()
0000000000000000000000000000000000000000;;		if !roots.AppendCertsFromPEM(localhostCert) {
0000000000000000000000000000000000000000;;			t.Fatal("error setting up localhostCert pool")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cert, err := tls.X509KeyPair(localhostCert, localhostKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			TLSConfig   *tls.Config
0000000000000000000000000000000000000000;;			Dial        utilnet.DialFunc
0000000000000000000000000000000000000000;;			ExpectError string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"insecure": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure, no roots": {
0000000000000000000000000000000000000000;;				TLSConfig:   &tls.Config{InsecureSkipVerify: false},
0000000000000000000000000000000000000000;;				ExpectError: "unknown authority",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with roots": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: false, RootCAs: roots},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with mismatched server": {
0000000000000000000000000000000000000000;;				TLSConfig:   &tls.Config{InsecureSkipVerify: false, RootCAs: roots, ServerName: "bogus.com"},
0000000000000000000000000000000000000000;;				ExpectError: "not bogus.com",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with matched server": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: false, RootCAs: roots, ServerName: "example.com"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"insecure, custom dial": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: true},
0000000000000000000000000000000000000000;;				Dial:      net.Dial,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure, no roots, custom dial": {
0000000000000000000000000000000000000000;;				TLSConfig:   &tls.Config{InsecureSkipVerify: false},
0000000000000000000000000000000000000000;;				Dial:        net.Dial,
0000000000000000000000000000000000000000;;				ExpectError: "unknown authority",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with roots, custom dial": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: false, RootCAs: roots},
0000000000000000000000000000000000000000;;				Dial:      net.Dial,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with mismatched server, custom dial": {
0000000000000000000000000000000000000000;;				TLSConfig:   &tls.Config{InsecureSkipVerify: false, RootCAs: roots, ServerName: "bogus.com"},
0000000000000000000000000000000000000000;;				Dial:        net.Dial,
0000000000000000000000000000000000000000;;				ExpectError: "not bogus.com",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"secure with matched server, custom dial": {
0000000000000000000000000000000000000000;;				TLSConfig: &tls.Config{InsecureSkipVerify: false, RootCAs: roots, ServerName: "example.com"},
0000000000000000000000000000000000000000;;				Dial:      net.Dial,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				ts := httptest.NewUnstartedServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {}))
0000000000000000000000000000000000000000;;				defer ts.Close()
0000000000000000000000000000000000000000;;				ts.TLS = &tls.Config{Certificates: []tls.Certificate{cert}}
0000000000000000000000000000000000000000;;				ts.StartTLS()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				tlsConfigCopy := tc.TLSConfig
0000000000000000000000000000000000000000;;				transport := &http.Transport{
0000000000000000000000000000000000000000;;					Dial:            tc.Dial,
0000000000000000000000000000000000000000;;					TLSClientConfig: tlsConfigCopy,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				extractedDial, err := utilnet.DialerFor(transport)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if fmt.Sprintf("%p", extractedDial) != fmt.Sprintf("%p", tc.Dial) {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: Unexpected dial", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				extractedTLSConfig, err := utilnet.TLSClientConfig(transport)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatal(err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if extractedTLSConfig == nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%s: Expected tlsConfig", k)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				u, _ := url.Parse(ts.URL)
0000000000000000000000000000000000000000;;				_, p, _ := net.SplitHostPort(u.Host)
0000000000000000000000000000000000000000;;				u.Host = net.JoinHostPort("127.0.0.1", p)
0000000000000000000000000000000000000000;;				conn, err := DialURL(u, transport)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Make sure dialing doesn't mutate the transport's TLSConfig
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(tc.TLSConfig, tlsConfigCopy) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: transport's copy of TLSConfig was mutated\n%#v\n\n%#v", k, tc.TLSConfig, tlsConfigCopy)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					if tc.ExpectError == "" {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected no error, got %q", k, err.Error())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !strings.Contains(err.Error(), tc.ExpectError) {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected error containing %q, got %q", k, tc.ExpectError, err.Error())
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				conn.Close()
0000000000000000000000000000000000000000;;				if tc.ExpectError != "" {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected error %q, got none", k, tc.ExpectError)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// localhostCert was generated from crypto/tls/generate_cert.go with the following command:
0000000000000000000000000000000000000000;;	//     go run generate_cert.go  --rsa-bits 512 --host 127.0.0.1,::1,example.com --ca --start-date "Jan 1 00:00:00 1970" --duration=1000000h
0000000000000000000000000000000000000000;;	var localhostCert = []byte(`-----BEGIN CERTIFICATE-----
0000000000000000000000000000000000000000;;	MIIBjzCCATmgAwIBAgIRAKpi2WmTcFrVjxrl5n5YDUEwDQYJKoZIhvcNAQELBQAw
0000000000000000000000000000000000000000;;	EjEQMA4GA1UEChMHQWNtZSBDbzAgFw03MDAxMDEwMDAwMDBaGA8yMDg0MDEyOTE2
0000000000000000000000000000000000000000;;	MDAwMFowEjEQMA4GA1UEChMHQWNtZSBDbzBcMA0GCSqGSIb3DQEBAQUAA0sAMEgC
0000000000000000000000000000000000000000;;	QQC9fEbRszP3t14Gr4oahV7zFObBI4TfA5i7YnlMXeLinb7MnvT4bkfOJzE6zktn
0000000000000000000000000000000000000000;;	59zP7UiHs3l4YOuqrjiwM413AgMBAAGjaDBmMA4GA1UdDwEB/wQEAwICpDATBgNV
0000000000000000000000000000000000000000;;	HSUEDDAKBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MC4GA1UdEQQnMCWCC2V4
0000000000000000000000000000000000000000;;	YW1wbGUuY29thwR/AAABhxAAAAAAAAAAAAAAAAAAAAABMA0GCSqGSIb3DQEBCwUA
0000000000000000000000000000000000000000;;	A0EAUsVE6KMnza/ZbodLlyeMzdo7EM/5nb5ywyOxgIOCf0OOLHsPS9ueGLQX9HEG
0000000000000000000000000000000000000000;;	//yjTXuhNcUugExIjM/AIwAZPQ==
0000000000000000000000000000000000000000;;	-----END CERTIFICATE-----`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// localhostKey is the private key for localhostCert.
0000000000000000000000000000000000000000;;	var localhostKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
0000000000000000000000000000000000000000;;	MIIBOwIBAAJBAL18RtGzM/e3XgavihqFXvMU5sEjhN8DmLtieUxd4uKdvsye9Phu
0000000000000000000000000000000000000000;;	R84nMTrOS2fn3M/tSIezeXhg66quOLAzjXcCAwEAAQJBAKcRxH9wuglYLBdI/0OT
0000000000000000000000000000000000000000;;	BLzfWPZCEw1vZmMR2FF1Fm8nkNOVDPleeVGTWoOEcYYlQbpTmkGSxJ6ya+hqRi6x
0000000000000000000000000000000000000000;;	goECIQDx3+X49fwpL6B5qpJIJMyZBSCuMhH4B7JevhGGFENi3wIhAMiNJN5Q3UkL
0000000000000000000000000000000000000000;;	IuSvv03kaPR5XVQ99/UeEetUgGvBcABpAiBJSBzVITIVCGkGc7d+RCf49KTCIklv
0000000000000000000000000000000000000000;;	bGWObufAR8Ni4QIgWpILjW8dkGg8GOUZ0zaNA6Nvt6TIv2UWGJ4v5PoV98kCIQDx
0000000000000000000000000000000000000000;;	rIiZs5QbKdycsv9gQJzwQAogC8o04X3Zz3dsoX+h4A==
0000000000000000000000000000000000000000;;	-----END RSA PRIVATE KEY-----`)
