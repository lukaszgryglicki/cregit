0000000000000000000000000000000000000000;;	// +build go1.8
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package net
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetClientIP(t *testing.T) {
0000000000000000000000000000000000000000;;		ipString := "10.0.0.1"
0000000000000000000000000000000000000000;;		ip := net.ParseIP(ipString)
0000000000000000000000000000000000000000;;		invalidIPString := "invalidIPString"
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Request    http.Request
0000000000000000000000000000000000000000;;			ExpectedIP net.IP
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Real-Ip": {ipString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedIP: ip,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Real-Ip": {invalidIPString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {ipString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedIP: ip,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {invalidIPString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {invalidIPString + "," + ipString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedIP: ip,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					// RemoteAddr is in the form host:port
0000000000000000000000000000000000000000;;					RemoteAddr: ipString + ":1234",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedIP: ip,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					RemoteAddr: invalidIPString,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Request: http.Request{
0000000000000000000000000000000000000000;;					Header: map[string][]string{
0000000000000000000000000000000000000000;;						"X-Forwarded-For": {invalidIPString},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					// RemoteAddr is in the form host:port
0000000000000000000000000000000000000000;;					RemoteAddr: ipString,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				ExpectedIP: ip,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			if a, e := GetClientIP(&test.Request), test.ExpectedIP; reflect.DeepEqual(e, a) != true {
0000000000000000000000000000000000000000;;				t.Fatalf("test case %d failed. expected: %v, actual: %v", i, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAppendForwardedForHeader(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			addr, forwarded, expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"1.2.3.4:8000", "", "1.2.3.4"},
0000000000000000000000000000000000000000;;			{"1.2.3.4:8000", "8.8.8.8", "8.8.8.8, 1.2.3.4"},
0000000000000000000000000000000000000000;;			{"1.2.3.4:8000", "8.8.8.8, 1.2.3.4", "8.8.8.8, 1.2.3.4, 1.2.3.4"},
0000000000000000000000000000000000000000;;			{"1.2.3.4:8000", "foo,bar", "foo,bar, 1.2.3.4"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			req := &http.Request{
0000000000000000000000000000000000000000;;				RemoteAddr: test.addr,
0000000000000000000000000000000000000000;;				Header:     make(http.Header),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.forwarded != "" {
0000000000000000000000000000000000000000;;				req.Header.Set("X-Forwarded-For", test.forwarded)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			AppendForwardedForHeader(req)
0000000000000000000000000000000000000000;;			actual := req.Header.Get("X-Forwarded-For")
0000000000000000000000000000000000000000;;			if actual != test.expected {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Expected %q, Got %q", i, test.expected, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestProxierWithNoProxyCIDR(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			name    string
0000000000000000000000000000000000000000;;			noProxy string
0000000000000000000000000000000000000000;;			url     string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedDelegated bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:              "no env",
0000000000000000000000000000000000000000;;				url:               "https://192.168.143.1/api",
0000000000000000000000000000000000000000;;				expectedDelegated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:              "no cidr",
0000000000000000000000000000000000000000;;				noProxy:           "192.168.63.1",
0000000000000000000000000000000000000000;;				url:               "https://192.168.143.1/api",
0000000000000000000000000000000000000000;;				expectedDelegated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:              "hostname",
0000000000000000000000000000000000000000;;				noProxy:           "192.168.63.0/24,192.168.143.0/24",
0000000000000000000000000000000000000000;;				url:               "https://my-hostname/api",
0000000000000000000000000000000000000000;;				expectedDelegated: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:              "match second cidr",
0000000000000000000000000000000000000000;;				noProxy:           "192.168.63.0/24,192.168.143.0/24",
0000000000000000000000000000000000000000;;				url:               "https://192.168.143.1/api",
0000000000000000000000000000000000000000;;				expectedDelegated: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:              "match second cidr with host:port",
0000000000000000000000000000000000000000;;				noProxy:           "192.168.63.0/24,192.168.143.0/24",
0000000000000000000000000000000000000000;;				url:               "https://192.168.143.1:8443/api",
0000000000000000000000000000000000000000;;				expectedDelegated: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range testCases {
0000000000000000000000000000000000000000;;			os.Setenv("NO_PROXY", test.noProxy)
0000000000000000000000000000000000000000;;			actualDelegated := false
0000000000000000000000000000000000000000;;			proxyFunc := NewProxierWithNoProxyCIDR(func(req *http.Request) (*url.URL, error) {
0000000000000000000000000000000000000000;;				actualDelegated = true
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", test.url, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected err: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if _, err := proxyFunc(req); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected err: %v", test.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.expectedDelegated != actualDelegated {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %v, got %v", test.name, test.expectedDelegated, actualDelegated)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeTLSClientConfigHolder struct {
0000000000000000000000000000000000000000;;		called bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeTLSClientConfigHolder) TLSClientConfig() *tls.Config {
0000000000000000000000000000000000000000;;		f.called = true
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (f *fakeTLSClientConfigHolder) RoundTrip(*http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTLSClientConfigHolder(t *testing.T) {
0000000000000000000000000000000000000000;;		rt := &fakeTLSClientConfigHolder{}
0000000000000000000000000000000000000000;;		TLSClientConfig(rt)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !rt.called {
0000000000000000000000000000000000000000;;			t.Errorf("didn't find tls config")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
