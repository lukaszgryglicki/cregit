0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5b6336de18fd06b720ebacda42f799b1aceb0ca4;pkg/util/cache_test.go[pkg/util/cache_test.go][staging/src/k8s.io/apimachinery/pkg/util/cache/cache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxTestCacheSize int = shardsCount * 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExpectEntry(t *testing.T, cache Cache, index uint64, expectedValue interface{}) bool {
0000000000000000000000000000000000000000;;		elem, found := cache.Get(index)
0000000000000000000000000000000000000000;;		if !found {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to find entry with key %d", index)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		} else if elem != expectedValue {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to find %v, got %v", expectedValue, elem)
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		cache := NewCache(maxTestCacheSize)
0000000000000000000000000000000000000000;;		cache.Add(1, "xxx")
0000000000000000000000000000000000000000;;		ExpectEntry(t, cache, 1, "xxx")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOverflow(t *testing.T) {
0000000000000000000000000000000000000000;;		cache := NewCache(maxTestCacheSize)
0000000000000000000000000000000000000000;;		for i := 0; i < maxTestCacheSize+1; i++ {
0000000000000000000000000000000000000000;;			cache.Add(uint64(i), "xxx")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		foundIndexes := make([]uint64, 0)
0000000000000000000000000000000000000000;;		for i := 0; i < maxTestCacheSize+1; i++ {
0000000000000000000000000000000000000000;;			_, found := cache.Get(uint64(i))
0000000000000000000000000000000000000000;;			if found {
0000000000000000000000000000000000000000;;				foundIndexes = append(foundIndexes, uint64(i))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(foundIndexes) != maxTestCacheSize {
0000000000000000000000000000000000000000;;			t.Errorf("Expect to find %d elements, got %d %v", maxTestCacheSize, len(foundIndexes), foundIndexes)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOverwrite(t *testing.T) {
0000000000000000000000000000000000000000;;		cache := NewCache(maxTestCacheSize)
0000000000000000000000000000000000000000;;		cache.Add(1, "xxx")
0000000000000000000000000000000000000000;;		ExpectEntry(t, cache, 1, "xxx")
0000000000000000000000000000000000000000;;		cache.Add(1, "yyy")
0000000000000000000000000000000000000000;;		ExpectEntry(t, cache, 1, "yyy")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestEvict this test will fail sporatically depending on what add()
0000000000000000000000000000000000000000;;	// selects for the randomKey to be evicted.  Ensure that randomKey
0000000000000000000000000000000000000000;;	// is never the key we most recently added.  Since the chance of failure
0000000000000000000000000000000000000000;;	// on each evict is 50%, if we do it 7 times, it should catch the problem
0000000000000000000000000000000000000000;;	// if it exists >99% of the time.
0000000000000000000000000000000000000000;;	func TestEvict(t *testing.T) {
0000000000000000000000000000000000000000;;		cache := NewCache(shardsCount)
0000000000000000000000000000000000000000;;		var found bool
0000000000000000000000000000000000000000;;		for retry := 0; retry < 7; retry++ {
0000000000000000000000000000000000000000;;			cache.Add(uint64(shardsCount), "xxx")
0000000000000000000000000000000000000000;;			found = ExpectEntry(t, cache, uint64(shardsCount), "xxx")
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cache.Add(0, "xxx")
0000000000000000000000000000000000000000;;			found = ExpectEntry(t, cache, 0, "xxx")
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
