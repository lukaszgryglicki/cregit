0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package framer implements simple frame decoding techniques for an io.ReadCloser
0000000000000000000000000000000000000000;;	package framer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type lengthDelimitedFrameWriter struct {
0000000000000000000000000000000000000000;;		w io.Writer
0000000000000000000000000000000000000000;;		h [4]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLengthDelimitedFrameWriter(w io.Writer) io.Writer {
0000000000000000000000000000000000000000;;		return &lengthDelimitedFrameWriter{w: w}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write writes a single frame to the nested writer, prepending it with the length in
0000000000000000000000000000000000000000;;	// in bytes of data (as a 4 byte, bigendian uint32).
0000000000000000000000000000000000000000;;	func (w *lengthDelimitedFrameWriter) Write(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		binary.BigEndian.PutUint32(w.h[:], uint32(len(data)))
0000000000000000000000000000000000000000;;		n, err := w.w.Write(w.h[:])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n != len(w.h) {
0000000000000000000000000000000000000000;;			return 0, io.ErrShortWrite
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return w.w.Write(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type lengthDelimitedFrameReader struct {
0000000000000000000000000000000000000000;;		r         io.ReadCloser
0000000000000000000000000000000000000000;;		remaining int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLengthDelimitedFrameReader returns an io.Reader that will decode length-prefixed
0000000000000000000000000000000000000000;;	// frames off of a stream.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The protocol is:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   stream: message ...
0000000000000000000000000000000000000000;;	//   message: prefix body
0000000000000000000000000000000000000000;;	//   prefix: 4 byte uint32 in BigEndian order, denotes length of body
0000000000000000000000000000000000000000;;	//   body: bytes (0..prefix)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the buffer passed to Read is not long enough to contain an entire frame, io.ErrShortRead
0000000000000000000000000000000000000000;;	// will be returned along with the number of bytes read.
0000000000000000000000000000000000000000;;	func NewLengthDelimitedFrameReader(r io.ReadCloser) io.ReadCloser {
0000000000000000000000000000000000000000;;		return &lengthDelimitedFrameReader{r: r}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Read attempts to read an entire frame into data. If that is not possible, io.ErrShortBuffer
0000000000000000000000000000000000000000;;	// is returned and subsequent calls will attempt to read the last frame. A frame is complete when
0000000000000000000000000000000000000000;;	// err is nil.
0000000000000000000000000000000000000000;;	func (r *lengthDelimitedFrameReader) Read(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		if r.remaining <= 0 {
0000000000000000000000000000000000000000;;			header := [4]byte{}
0000000000000000000000000000000000000000;;			n, err := io.ReadAtLeast(r.r, header[:4], 4)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n != 4 {
0000000000000000000000000000000000000000;;				return 0, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			frameLength := int(binary.BigEndian.Uint32(header[:]))
0000000000000000000000000000000000000000;;			r.remaining = frameLength
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		expect := r.remaining
0000000000000000000000000000000000000000;;		max := expect
0000000000000000000000000000000000000000;;		if max > len(data) {
0000000000000000000000000000000000000000;;			max = len(data)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err := io.ReadAtLeast(r.r, data[:max], int(max))
0000000000000000000000000000000000000000;;		r.remaining -= n
0000000000000000000000000000000000000000;;		if err == io.ErrShortBuffer || r.remaining > 0 {
0000000000000000000000000000000000000000;;			return n, io.ErrShortBuffer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return n, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n != expect {
0000000000000000000000000000000000000000;;			return n, io.ErrUnexpectedEOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return n, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *lengthDelimitedFrameReader) Close() error {
0000000000000000000000000000000000000000;;		return r.r.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type jsonFrameReader struct {
0000000000000000000000000000000000000000;;		r         io.ReadCloser
0000000000000000000000000000000000000000;;		decoder   *json.Decoder
0000000000000000000000000000000000000000;;		remaining []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewJSONFramedReader returns an io.Reader that will decode individual JSON objects off
0000000000000000000000000000000000000000;;	// of a wire.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The boundaries between each frame are valid JSON objects. A JSON parsing error will terminate
0000000000000000000000000000000000000000;;	// the read.
0000000000000000000000000000000000000000;;	func NewJSONFramedReader(r io.ReadCloser) io.ReadCloser {
0000000000000000000000000000000000000000;;		return &jsonFrameReader{
0000000000000000000000000000000000000000;;			r:       r,
0000000000000000000000000000000000000000;;			decoder: json.NewDecoder(r),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadFrame decodes the next JSON object in the stream, or returns an error. The returned
0000000000000000000000000000000000000000;;	// byte slice will be modified the next time ReadFrame is invoked and should not be altered.
0000000000000000000000000000000000000000;;	func (r *jsonFrameReader) Read(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		// Return whatever remaining data exists from an in progress frame
0000000000000000000000000000000000000000;;		if n := len(r.remaining); n > 0 {
0000000000000000000000000000000000000000;;			if n <= len(data) {
0000000000000000000000000000000000000000;;				data = append(data[0:0], r.remaining...)
0000000000000000000000000000000000000000;;				r.remaining = nil
0000000000000000000000000000000000000000;;				return n, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			n = len(data)
0000000000000000000000000000000000000000;;			data = append(data[0:0], r.remaining[:n]...)
0000000000000000000000000000000000000000;;			r.remaining = r.remaining[n:]
0000000000000000000000000000000000000000;;			return n, io.ErrShortBuffer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RawMessage#Unmarshal appends to data - we reset the slice down to 0 and will either see
0000000000000000000000000000000000000000;;		// data written to data, or be larger than data and a different array.
0000000000000000000000000000000000000000;;		n := len(data)
0000000000000000000000000000000000000000;;		m := json.RawMessage(data[:0])
0000000000000000000000000000000000000000;;		if err := r.decoder.Decode(&m); err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If capacity of data is less than length of the message, decoder will allocate a new slice
0000000000000000000000000000000000000000;;		// and set m to it, which means we need to copy the partial result back into data and preserve
0000000000000000000000000000000000000000;;		// the remaining result for subsequent reads.
0000000000000000000000000000000000000000;;		if len(m) > n {
0000000000000000000000000000000000000000;;			data = append(data[0:0], m[:n]...)
0000000000000000000000000000000000000000;;			r.remaining = m[n:]
0000000000000000000000000000000000000000;;			return n, io.ErrShortBuffer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(m), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *jsonFrameReader) Close() error {
0000000000000000000000000000000000000000;;		return r.r.Close()
0000000000000000000000000000000000000000;;	}
