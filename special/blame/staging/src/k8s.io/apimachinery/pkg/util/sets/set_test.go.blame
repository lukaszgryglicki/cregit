0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package sets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSet(t *testing.T) {
0000000000000000000000000000000000000000;;		s := String{}
0000000000000000000000000000000000000000;;		s2 := String{}
0000000000000000000000000000000000000000;;		if len(s) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=0: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Insert("a", "b")
0000000000000000000000000000000000000000;;		if len(s) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=2: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Insert("c")
0000000000000000000000000000000000000000;;		if s.Has("d") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.Has("a") {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Delete("a")
0000000000000000000000000000000000000000;;		if s.Has("a") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Insert("a")
0000000000000000000000000000000000000000;;		if s.HasAll("a", "b", "d") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.HasAll("a", "b") {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s2.Insert("a", "b", "d")
0000000000000000000000000000000000000000;;		if s.IsSuperset(s2) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s2.Delete("d")
0000000000000000000000000000000000000000;;		if !s.IsSuperset(s2) {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSetDeleteMultiples(t *testing.T) {
0000000000000000000000000000000000000000;;		s := String{}
0000000000000000000000000000000000000000;;		s.Insert("a", "b", "c")
0000000000000000000000000000000000000000;;		if len(s) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=3: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s.Delete("a", "c")
0000000000000000000000000000000000000000;;		if len(s) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=1: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Has("a") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s.Has("c") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.Has("b") {
0000000000000000000000000000000000000000;;			t.Errorf("Missing contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewStringSet(t *testing.T) {
0000000000000000000000000000000000000000;;		s := NewString("a", "b", "c")
0000000000000000000000000000000000000000;;		if len(s) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=3: %d", len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !s.Has("a") || !s.Has("b") || !s.Has("c") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSetList(t *testing.T) {
0000000000000000000000000000000000000000;;		s := NewString("z", "y", "x", "a")
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(s.List(), []string{"a", "x", "y", "z"}) {
0000000000000000000000000000000000000000;;			t.Errorf("List gave unexpected result: %#v", s.List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSetDifference(t *testing.T) {
0000000000000000000000000000000000000000;;		a := NewString("1", "2", "3")
0000000000000000000000000000000000000000;;		b := NewString("1", "2", "4", "5")
0000000000000000000000000000000000000000;;		c := a.Difference(b)
0000000000000000000000000000000000000000;;		d := b.Difference(a)
0000000000000000000000000000000000000000;;		if len(c) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=1: %d", len(c))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !c.Has("3") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", c.List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(d) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected len=2: %d", len(d))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !d.Has("4") || !d.Has("5") {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected contents: %#v", d.List())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSetHasAny(t *testing.T) {
0000000000000000000000000000000000000000;;		a := NewString("1", "2", "3")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !a.HasAny("1", "4") {
0000000000000000000000000000000000000000;;			t.Errorf("expected true, got false")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if a.HasAny("0", "4") {
0000000000000000000000000000000000000000;;			t.Errorf("expected false, got true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringSetEquals(t *testing.T) {
0000000000000000000000000000000000000000;;		// Simple case (order doesn't matter)
0000000000000000000000000000000000000000;;		a := NewString("1", "2")
0000000000000000000000000000000000000000;;		b := NewString("2", "1")
0000000000000000000000000000000000000000;;		if !a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// It is a set; duplicates are ignored
0000000000000000000000000000000000000000;;		b = NewString("2", "2", "1")
0000000000000000000000000000000000000000;;		if !a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Edge cases around empty sets / empty strings
0000000000000000000000000000000000000000;;		a = NewString()
0000000000000000000000000000000000000000;;		b = NewString()
0000000000000000000000000000000000000000;;		if !a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b = NewString("1", "2", "3")
0000000000000000000000000000000000000000;;		if a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be not-equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b = NewString("1", "2", "")
0000000000000000000000000000000000000000;;		if a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be not-equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check for equality after mutation
0000000000000000000000000000000000000000;;		a = NewString()
0000000000000000000000000000000000000000;;		a.Insert("1")
0000000000000000000000000000000000000000;;		if a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be not-equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a.Insert("2")
0000000000000000000000000000000000000000;;		if a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be not-equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a.Insert("")
0000000000000000000000000000000000000000;;		if !a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a.Delete("")
0000000000000000000000000000000000000000;;		if a.Equal(b) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected to be not-equal: %v vs %v", a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringUnion(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			s1       String
0000000000000000000000000000000000000000;;			s2       String
0000000000000000000000000000000000000000;;			expected String
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString("3", "4", "5", "6"),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4", "5", "6"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			union := test.s1.Union(test.s2)
0000000000000000000000000000000000000000;;			if union.Len() != test.expected.Len() {
0000000000000000000000000000000000000000;;				t.Errorf("Expected union.Len()=%d but got %d", test.expected.Len(), union.Len())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !union.Equal(test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected union.Equal(expected) but not true.  union:%v expected:%v", union.List(), test.expected.List())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringIntersection(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			s1       String
0000000000000000000000000000000000000000;;			s2       String
0000000000000000000000000000000000000000;;			expected String
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString("3", "4", "5", "6"),
0000000000000000000000000000000000000000;;				NewString("3", "4"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString("1", "2", "3", "4"),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;				NewString(),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			intersection := test.s1.Intersection(test.s2)
0000000000000000000000000000000000000000;;			if intersection.Len() != test.expected.Len() {
0000000000000000000000000000000000000000;;				t.Errorf("Expected intersection.Len()=%d but got %d", test.expected.Len(), intersection.Len())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !intersection.Equal(test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected intersection.Equal(expected) but not true.  intersection:%v expected:%v", intersection.List(), test.expected.List())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
