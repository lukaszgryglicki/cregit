0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package diff
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestObjectReflectDiff(t *testing.T) {
0000000000000000000000000000000000000000;;		type struct1 struct{ A []int }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			a, b interface{}
0000000000000000000000000000000000000000;;			out  string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"map": {
0000000000000000000000000000000000000000;;				a: map[string]int{},
0000000000000000000000000000000000000000;;				b: map[string]int{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"detect nil map": {
0000000000000000000000000000000000000000;;				a: map[string]int(nil),
0000000000000000000000000000000000000000;;				b: map[string]int{},
0000000000000000000000000000000000000000;;				out: `
0000000000000000000000000000000000000000;;	object:
0000000000000000000000000000000000000000;;	  a: map[string]int(nil)
0000000000000000000000000000000000000000;;	  b: map[string]int{}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"detect map changes": {
0000000000000000000000000000000000000000;;				a: map[string]int{"test": 1, "other": 2},
0000000000000000000000000000000000000000;;				b: map[string]int{"test": 2, "third": 3},
0000000000000000000000000000000000000000;;				out: `
0000000000000000000000000000000000000000;;	object[other]:
0000000000000000000000000000000000000000;;	  a: 2
0000000000000000000000000000000000000000;;	  b: <nil>
0000000000000000000000000000000000000000;;	object[test]:
0000000000000000000000000000000000000000;;	  a: 1
0000000000000000000000000000000000000000;;	  b: 2
0000000000000000000000000000000000000000;;	object[third]:
0000000000000000000000000000000000000000;;	  a: <nil>
0000000000000000000000000000000000000000;;	  b: 3`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"nil slice":   {a: struct1{A: nil}, b: struct1{A: nil}},
0000000000000000000000000000000000000000;;			"empty slice": {a: struct1{A: []int{}}, b: struct1{A: []int{}}},
0000000000000000000000000000000000000000;;			"detect slice changes 1": {a: struct1{A: []int{1}}, b: struct1{A: []int{2}}, out: `
0000000000000000000000000000000000000000;;	object.A[0]:
0000000000000000000000000000000000000000;;	  a: 1
0000000000000000000000000000000000000000;;	  b: 2`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"detect slice changes 2": {a: struct1{A: []int{}}, b: struct1{A: []int{2}}, out: `
0000000000000000000000000000000000000000;;	object.A[0]:
0000000000000000000000000000000000000000;;	  a: <nil>
0000000000000000000000000000000000000000;;	  b: 2`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"detect slice changes 3": {a: struct1{A: []int{1}}, b: struct1{A: []int{}}, out: `
0000000000000000000000000000000000000000;;	object.A[0]:
0000000000000000000000000000000000000000;;	  a: 1
0000000000000000000000000000000000000000;;	  b: <nil>`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"detect nil vs empty slices": {a: struct1{A: nil}, b: struct1{A: []int{}}, out: `
0000000000000000000000000000000000000000;;	object.A:
0000000000000000000000000000000000000000;;	  a: []int(nil)
0000000000000000000000000000000000000000;;	  b: []int{}`,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, test := range testCases {
0000000000000000000000000000000000000000;;			expect := test.out
0000000000000000000000000000000000000000;;			if len(expect) == 0 {
0000000000000000000000000000000000000000;;				expect = "<no diffs>"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if actual := ObjectReflectDiff(test.a, test.b); actual != expect {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected output: %s", name, actual)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
