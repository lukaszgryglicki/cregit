0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
351764b6cae066588e87a3efee44135d8f7e8120;pkg/util/httpstream/spdy/upgrade_test.go[pkg/util/httpstream/spdy/upgrade_test.go][staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/upgrade_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package spdy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpgradeResponse(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			connectionHeader string
0000000000000000000000000000000000000000;;			upgradeHeader    string
0000000000000000000000000000000000000000;;			shouldError      bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				connectionHeader: "",
0000000000000000000000000000000000000000;;				upgradeHeader:    "",
0000000000000000000000000000000000000000;;				shouldError:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				connectionHeader: "Upgrade",
0000000000000000000000000000000000000000;;				upgradeHeader:    "",
0000000000000000000000000000000000000000;;				shouldError:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				connectionHeader: "",
0000000000000000000000000000000000000000;;				upgradeHeader:    "SPDY/3.1",
0000000000000000000000000000000000000000;;				shouldError:      true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				connectionHeader: "Upgrade",
0000000000000000000000000000000000000000;;				upgradeHeader:    "SPDY/3.1",
0000000000000000000000000000000000000000;;				shouldError:      false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				upgrader := NewResponseUpgrader()
0000000000000000000000000000000000000000;;				conn := upgrader.UpgradeResponse(w, req, nil)
0000000000000000000000000000000000000000;;				haveErr := conn == nil
0000000000000000000000000000000000000000;;				if e, a := testCase.shouldError, haveErr; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("%d: expected shouldErr=%t, got %t", i, testCase.shouldError, haveErr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if haveErr {
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if conn == nil {
0000000000000000000000000000000000000000;;					t.Fatalf("%d: unexpected nil conn", i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				defer conn.Close()
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req, err := http.NewRequest("GET", server.URL, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: error creating request: %s", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			req.Header.Set("Connection", testCase.connectionHeader)
0000000000000000000000000000000000000000;;			req.Header.Set("Upgrade", testCase.upgradeHeader)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client := &http.Client{}
0000000000000000000000000000000000000000;;			resp, err := client.Do(req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: unexpected non-nil err from client.Do: %s", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if testCase.shouldError {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if resp.StatusCode != http.StatusSwitchingProtocols {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: expected status 101 switching protocols, got %d", i, resp.StatusCode)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
