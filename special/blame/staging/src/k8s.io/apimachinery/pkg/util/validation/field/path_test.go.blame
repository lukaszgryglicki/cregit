0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPath(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			op       func(*Path) *Path
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p },
0000000000000000000000000000000000000000;;				"root",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Child("first") },
0000000000000000000000000000000000000000;;				"root.first",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Child("second") },
0000000000000000000000000000000000000000;;				"root.first.second",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Index(0) },
0000000000000000000000000000000000000000;;				"root.first.second[0]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Child("third") },
0000000000000000000000000000000000000000;;				"root.first.second[0].third",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Index(93) },
0000000000000000000000000000000000000000;;				"root.first.second[0].third[93]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root.first.second[0].third",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root.first.second[0]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Key("key") },
0000000000000000000000000000000000000000;;				"root.first.second[0][key]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		root := NewPath("root")
0000000000000000000000000000000000000000;;		p := root
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			p = tc.op(p)
0000000000000000000000000000000000000000;;			if p.String() != tc.expected {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Expected %q, got %q", i, tc.expected, p.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if p.Root() != root {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Wrong root: %#v", i, p.Root())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPathMultiArg(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			op       func(*Path) *Path
0000000000000000000000000000000000000000;;			expected string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p },
0000000000000000000000000000000000000000;;				"root.first",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Child("second", "third") },
0000000000000000000000000000000000000000;;				"root.first.second.third",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.Index(0) },
0000000000000000000000000000000000000000;;				"root.first.second.third[0]",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root.first.second.third",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root.first.second",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root.first",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				func(p *Path) *Path { return p.parent },
0000000000000000000000000000000000000000;;				"root",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		root := NewPath("root", "first")
0000000000000000000000000000000000000000;;		p := root
0000000000000000000000000000000000000000;;		for i, tc := range testCases {
0000000000000000000000000000000000000000;;			p = tc.op(p)
0000000000000000000000000000000000000000;;			if p.String() != tc.expected {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Expected %q, got %q", i, tc.expected, p.String())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if p.Root() != root.Root() {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] Wrong root: %#v", i, p.Root())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
