0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package net
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSplitSchemeNamePort(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			in                 string
0000000000000000000000000000000000000000;;			name, port, scheme string
0000000000000000000000000000000000000000;;			valid              bool
0000000000000000000000000000000000000000;;			normalized         bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				in:         "aoeu:asdf",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				port:       "asdf",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: true,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:         "http:aoeu:asdf",
0000000000000000000000000000000000000000;;				scheme:     "http",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				port:       "asdf",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: true,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:         "https:aoeu:",
0000000000000000000000000000000000000000;;				scheme:     "https",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				port:       "",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:         "https:aoeu:asdf",
0000000000000000000000000000000000000000;;				scheme:     "https",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				port:       "asdf",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: true,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:         "aoeu:",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:         "aoeu",
0000000000000000000000000000000000000000;;				name:       "aoeu",
0000000000000000000000000000000000000000;;				valid:      true,
0000000000000000000000000000000000000000;;				normalized: true,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:    ":asdf",
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:    "aoeu:asdf:htns",
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:    "http::asdf",
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:    "http::",
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			}, {
0000000000000000000000000000000000000000;;				in:    "",
0000000000000000000000000000000000000000;;				valid: false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, item := range table {
0000000000000000000000000000000000000000;;			scheme, name, port, valid := SplitSchemeNamePort(item.in)
0000000000000000000000000000000000000000;;			if e, a := item.scheme, scheme; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.name, name; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.port, port; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item.valid, valid; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%q: Wanted %t, got %t", item.in, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Make sure valid items round trip through JoinSchemeNamePort
0000000000000000000000000000000000000000;;			if item.valid {
0000000000000000000000000000000000000000;;				out := JoinSchemeNamePort(scheme, name, port)
0000000000000000000000000000000000000000;;				if item.normalized && out != item.in {
0000000000000000000000000000000000000000;;					t.Errorf("%q: Wanted %s, got %s", item.in, item.in, out)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				scheme, name, port, valid := SplitSchemeNamePort(out)
0000000000000000000000000000000000000000;;				if e, a := item.scheme, scheme; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := item.name, name; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := item.port, port; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%q: Wanted %q, got %q", item.in, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := item.valid, valid; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%q: Wanted %t, got %t", item.in, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
