0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
6db7e1dcaf9c6b459f5329529ddad06f8d35a337;pkg/util/intstr/intstr_test.go[pkg/util/intstr/intstr_test.go][staging/src/k8s.io/apimachinery/pkg/util/intstr/intstr_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package intstr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFromInt(t *testing.T) {
0000000000000000000000000000000000000000;;		i := FromInt(93)
0000000000000000000000000000000000000000;;		if i.Type != Int || i.IntVal != 93 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected IntVal=93, got %+v", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFromString(t *testing.T) {
0000000000000000000000000000000000000000;;		i := FromString("76")
0000000000000000000000000000000000000000;;		if i.Type != String || i.StrVal != "76" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected StrVal=\"76\", got %+v", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IntOrStringHolder struct {
0000000000000000000000000000000000000000;;		IOrS IntOrString `json:"val"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntOrStringUnmarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  string
0000000000000000000000000000000000000000;;			result IntOrString
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"{\"val\": 123}", FromInt(123)},
0000000000000000000000000000000000000000;;			{"{\"val\": \"123\"}", FromString("123")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			var result IntOrStringHolder
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(c.input), &result); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': %v", c.input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if result.IOrS != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to unmarshal input '%v': expected %+v, got %+v", c.input, c.result, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntOrStringMarshalJSON(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input  IntOrString
0000000000000000000000000000000000000000;;			result string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{FromInt(123), "{\"val\":123}"},
0000000000000000000000000000000000000000;;			{FromString("123"), "{\"val\":\"123\"}"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := IntOrStringHolder{c.input}
0000000000000000000000000000000000000000;;			result, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if string(result) != c.result {
0000000000000000000000000000000000000000;;				t.Errorf("Failed to marshal input '%v': expected: %+v, got %q", input, c.result, string(result))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntOrStringMarshalJSONUnmarshalYAML(t *testing.T) {
0000000000000000000000000000000000000000;;		cases := []struct {
0000000000000000000000000000000000000000;;			input IntOrString
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{FromInt(123)},
0000000000000000000000000000000000000000;;			{FromString("123")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range cases {
0000000000000000000000000000000000000000;;			input := IntOrStringHolder{c.input}
0000000000000000000000000000000000000000;;			jsonMarshalled, err := json.Marshal(&input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("1: Failed to marshal input: '%v': %v", input, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var result IntOrStringHolder
0000000000000000000000000000000000000000;;			err = yaml.Unmarshal(jsonMarshalled, &result)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("2: Failed to unmarshal '%+v': %v", string(jsonMarshalled), err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(input, result) {
0000000000000000000000000000000000000000;;				t.Errorf("3: Failed to marshal input '%+v': got %+v", input, result)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetValueFromIntOrPercent(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			input     IntOrString
0000000000000000000000000000000000000000;;			total     int
0000000000000000000000000000000000000000;;			roundUp   bool
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;			expectVal int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromInt(123),
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				expectVal: 123,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("90%"),
0000000000000000000000000000000000000000;;				total:     100,
0000000000000000000000000000000000000000;;				roundUp:   true,
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				expectVal: 90,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("90%"),
0000000000000000000000000000000000000000;;				total:     95,
0000000000000000000000000000000000000000;;				roundUp:   true,
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				expectVal: 86,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("90%"),
0000000000000000000000000000000000000000;;				total:     95,
0000000000000000000000000000000000000000;;				roundUp:   false,
0000000000000000000000000000000000000000;;				expectErr: false,
0000000000000000000000000000000000000000;;				expectVal: 85,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("%"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("90#"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input:     FromString("#%"),
0000000000000000000000000000000000000000;;				expectErr: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("test case %d", i)
0000000000000000000000000000000000000000;;			value, err := GetValueFromIntOrPercent(&test.input, test.total, test.roundUp)
0000000000000000000000000000000000000000;;			if test.expectErr && err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("expected error, but got none")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !test.expectErr && err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if test.expectVal != value {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, but got %v", test.expectVal, value)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
