0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
351764b6cae066588e87a3efee44135d8f7e8120;pkg/util/httpstream/spdy/connection.go[pkg/util/httpstream/spdy/connection.go][staging/src/k8s.io/apimachinery/pkg/util/httpstream/spdy/connection.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package spdy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/docker/spdystream"
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/httpstream"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// connection maintains state about a spdystream.Connection and its associated
0000000000000000000000000000000000000000;;	// streams.
0000000000000000000000000000000000000000;;	type connection struct {
0000000000000000000000000000000000000000;;		conn             *spdystream.Connection
0000000000000000000000000000000000000000;;		streams          []httpstream.Stream
0000000000000000000000000000000000000000;;		streamLock       sync.Mutex
0000000000000000000000000000000000000000;;		newStreamHandler httpstream.NewStreamHandler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClientConnection creates a new SPDY client connection.
0000000000000000000000000000000000000000;;	func NewClientConnection(conn net.Conn) (httpstream.Connection, error) {
0000000000000000000000000000000000000000;;		spdyConn, err := spdystream.NewConnection(conn, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			defer conn.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newConnection(spdyConn, httpstream.NoOpNewStreamHandler), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewServerConnection creates a new SPDY server connection. newStreamHandler
0000000000000000000000000000000000000000;;	// will be invoked when the server receives a newly created stream from the
0000000000000000000000000000000000000000;;	// client.
0000000000000000000000000000000000000000;;	func NewServerConnection(conn net.Conn, newStreamHandler httpstream.NewStreamHandler) (httpstream.Connection, error) {
0000000000000000000000000000000000000000;;		spdyConn, err := spdystream.NewConnection(conn, true)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			defer conn.Close()
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return newConnection(spdyConn, newStreamHandler), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newConnection returns a new connection wrapping conn. newStreamHandler
0000000000000000000000000000000000000000;;	// will be invoked when the server receives a newly created stream from the
0000000000000000000000000000000000000000;;	// client.
0000000000000000000000000000000000000000;;	func newConnection(conn *spdystream.Connection, newStreamHandler httpstream.NewStreamHandler) httpstream.Connection {
0000000000000000000000000000000000000000;;		c := &connection{conn: conn, newStreamHandler: newStreamHandler}
0000000000000000000000000000000000000000;;		go conn.Serve(c.newSpdyStream)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// createStreamResponseTimeout indicates how long to wait for the other side to
0000000000000000000000000000000000000000;;	// acknowledge the new stream before timing out.
0000000000000000000000000000000000000000;;	const createStreamResponseTimeout = 30 * time.Second
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Close first sends a reset for all of the connection's streams, and then
0000000000000000000000000000000000000000;;	// closes the underlying spdystream.Connection.
0000000000000000000000000000000000000000;;	func (c *connection) Close() error {
0000000000000000000000000000000000000000;;		c.streamLock.Lock()
0000000000000000000000000000000000000000;;		for _, s := range c.streams {
0000000000000000000000000000000000000000;;			// calling Reset instead of Close ensures that all streams are fully torn down
0000000000000000000000000000000000000000;;			s.Reset()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.streams = make([]httpstream.Stream, 0)
0000000000000000000000000000000000000000;;		c.streamLock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// now that all streams are fully torn down, it's safe to call close on the underlying connection,
0000000000000000000000000000000000000000;;		// which should be able to terminate immediately at this point, instead of waiting for any
0000000000000000000000000000000000000000;;		// remaining graceful stream termination.
0000000000000000000000000000000000000000;;		return c.conn.Close()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateStream creates a new stream with the specified headers and registers
0000000000000000000000000000000000000000;;	// it with the connection.
0000000000000000000000000000000000000000;;	func (c *connection) CreateStream(headers http.Header) (httpstream.Stream, error) {
0000000000000000000000000000000000000000;;		stream, err := c.conn.CreateStream(headers, nil, false)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err = stream.WaitTimeout(createStreamResponseTimeout); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.registerStream(stream)
0000000000000000000000000000000000000000;;		return stream, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// registerStream adds the stream s to the connection's list of streams that
0000000000000000000000000000000000000000;;	// it owns.
0000000000000000000000000000000000000000;;	func (c *connection) registerStream(s httpstream.Stream) {
0000000000000000000000000000000000000000;;		c.streamLock.Lock()
0000000000000000000000000000000000000000;;		c.streams = append(c.streams, s)
0000000000000000000000000000000000000000;;		c.streamLock.Unlock()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloseChan returns a channel that, when closed, indicates that the underlying
0000000000000000000000000000000000000000;;	// spdystream.Connection has been closed.
0000000000000000000000000000000000000000;;	func (c *connection) CloseChan() <-chan bool {
0000000000000000000000000000000000000000;;		return c.conn.CloseChan()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newSpdyStream is the internal new stream handler used by spdystream.Connection.Serve.
0000000000000000000000000000000000000000;;	// It calls connection's newStreamHandler, giving it the opportunity to accept or reject
0000000000000000000000000000000000000000;;	// the stream. If newStreamHandler returns an error, the stream is rejected. If not, the
0000000000000000000000000000000000000000;;	// stream is accepted and registered with the connection.
0000000000000000000000000000000000000000;;	func (c *connection) newSpdyStream(stream *spdystream.Stream) {
0000000000000000000000000000000000000000;;		replySent := make(chan struct{})
0000000000000000000000000000000000000000;;		err := c.newStreamHandler(stream, replySent)
0000000000000000000000000000000000000000;;		rejectStream := (err != nil)
0000000000000000000000000000000000000000;;		if rejectStream {
0000000000000000000000000000000000000000;;			glog.Warningf("Stream rejected: %v", err)
0000000000000000000000000000000000000000;;			stream.Reset()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.registerStream(stream)
0000000000000000000000000000000000000000;;		stream.SendReply(http.Header{}, rejectStream)
0000000000000000000000000000000000000000;;		close(replySent)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIdleTimeout sets the amount of time the connection may remain idle before
0000000000000000000000000000000000000000;;	// it is automatically closed.
0000000000000000000000000000000000000000;;	func (c *connection) SetIdleTimeout(timeout time.Duration) {
0000000000000000000000000000000000000000;;		c.conn.SetIdleTimeout(timeout)
0000000000000000000000000000000000000000;;	}
