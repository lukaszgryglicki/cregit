0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestHandleCrash(t *testing.T) {
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if x := recover(); x == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected a panic to recover from")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		defer HandleCrash()
0000000000000000000000000000000000000000;;		panic("Test Panic")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCustomHandleCrash(t *testing.T) {
0000000000000000000000000000000000000000;;		old := PanicHandlers
0000000000000000000000000000000000000000;;		defer func() { PanicHandlers = old }()
0000000000000000000000000000000000000000;;		var result interface{}
0000000000000000000000000000000000000000;;		PanicHandlers = []func(interface{}){
0000000000000000000000000000000000000000;;			func(r interface{}) {
0000000000000000000000000000000000000000;;				result = r
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		func() {
0000000000000000000000000000000000000000;;			defer func() {
0000000000000000000000000000000000000000;;				if x := recover(); x == nil {
0000000000000000000000000000000000000000;;					t.Errorf("Expected a panic to recover from")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			defer HandleCrash()
0000000000000000000000000000000000000000;;			panic("test")
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		if result != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("did not receive custom handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCustomHandleError(t *testing.T) {
0000000000000000000000000000000000000000;;		old := ErrorHandlers
0000000000000000000000000000000000000000;;		defer func() { ErrorHandlers = old }()
0000000000000000000000000000000000000000;;		var result error
0000000000000000000000000000000000000000;;		ErrorHandlers = []func(error){
0000000000000000000000000000000000000000;;			func(err error) {
0000000000000000000000000000000000000000;;				result = err
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err := fmt.Errorf("test")
0000000000000000000000000000000000000000;;		HandleError(err)
0000000000000000000000000000000000000000;;		if result != err {
0000000000000000000000000000000000000000;;			t.Errorf("did not receive custom handler")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
