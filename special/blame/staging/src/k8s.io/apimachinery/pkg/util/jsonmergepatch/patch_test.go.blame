0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f3f50958583d1c16dfaefa511b8ad3c6824d9a74;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package jsonmergepatch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/davecgh/go-spew/spew"
0000000000000000000000000000000000000000;;		"github.com/evanphx/json-patch"
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilterNullTestCases struct {
0000000000000000000000000000000000000000;;		TestCases []FilterNullTestCase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FilterNullTestCase struct {
0000000000000000000000000000000000000000;;		Description         string
0000000000000000000000000000000000000000;;		OriginalObj         map[string]interface{}
0000000000000000000000000000000000000000;;		ExpectedWithNull    map[string]interface{}
0000000000000000000000000000000000000000;;		ExpectedWithoutNull map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var filterNullTestCaseData = []byte(`
0000000000000000000000000000000000000000;;	testCases:
0000000000000000000000000000000000000000;;	  - description: nil original
0000000000000000000000000000000000000000;;	    originalObj: {}
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull: {}
0000000000000000000000000000000000000000;;	  - description: simple map
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      nilKey: null
0000000000000000000000000000000000000000;;	      nonNilKey: foo
0000000000000000000000000000000000000000;;	    expectedWithNull:
0000000000000000000000000000000000000000;;	      nilKey: null
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      nonNilKey: foo
0000000000000000000000000000000000000000;;	  - description: simple map with all nil values
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      nilKey1: null
0000000000000000000000000000000000000000;;	      nilKey2: null
0000000000000000000000000000000000000000;;	    expectedWithNull:
0000000000000000000000000000000000000000;;	      nilKey1: null
0000000000000000000000000000000000000000;;	      nilKey2: null
0000000000000000000000000000000000000000;;	    expectedWithoutNull: {}
0000000000000000000000000000000000000000;;	  - description: simple map with all non-nil values
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      nonNilKey: foo
0000000000000000000000000000000000000000;;	      nonNilKey: bar
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      nonNilKey: foo
0000000000000000000000000000000000000000;;	      nonNilKey: bar
0000000000000000000000000000000000000000;;	  - description: nested map
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nilKey: null
0000000000000000000000000000000000000000;;	        nonNilKey: foo
0000000000000000000000000000000000000000;;	    expectedWithNull:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nilKey: null
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nonNilKey: foo
0000000000000000000000000000000000000000;;	  - description: nested map that all subkeys are nil
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nilKey1: null
0000000000000000000000000000000000000000;;	        nilKey2: null
0000000000000000000000000000000000000000;;	    expectedWithNull:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nilKey1: null
0000000000000000000000000000000000000000;;	        nilKey2: null
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      mapKey: {}
0000000000000000000000000000000000000000;;	  - description: nested map that all subkeys are non-nil
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nonNilKey: foo
0000000000000000000000000000000000000000;;	        nonNilKey: bar
0000000000000000000000000000000000000000;;	    expectedWithNull:
0000000000000000000000000000000000000000;;	      mapKey: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      mapKey:
0000000000000000000000000000000000000000;;	        nonNilKey: foo
0000000000000000000000000000000000000000;;	        nonNilKey: bar
0000000000000000000000000000000000000000;;	  - description: empty list
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      listKey: []
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      listKey: []
0000000000000000000000000000000000000000;;	  - description: list of primitives
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	  - description: list of maps
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - k1: v1
0000000000000000000000000000000000000000;;	      - k2: null
0000000000000000000000000000000000000000;;	      - k3: v3
0000000000000000000000000000000000000000;;	        k4: null
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - k1: v1
0000000000000000000000000000000000000000;;	      - k2: null
0000000000000000000000000000000000000000;;	      - k3: v3
0000000000000000000000000000000000000000;;	        k4: null
0000000000000000000000000000000000000000;;	  - description: list of different types
0000000000000000000000000000000000000000;;	    originalObj:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - k1: v1
0000000000000000000000000000000000000000;;	      - k2: null
0000000000000000000000000000000000000000;;	      - v3
0000000000000000000000000000000000000000;;	    expectedWithNull: {}
0000000000000000000000000000000000000000;;	    expectedWithoutNull:
0000000000000000000000000000000000000000;;	      listKey:
0000000000000000000000000000000000000000;;	      - k1: v1
0000000000000000000000000000000000000000;;	      - k2: null
0000000000000000000000000000000000000000;;	      - v3
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestKeepOrDeleteNullInObj(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := FilterNullTestCases{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(filterNullTestCaseData, &tc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("can't unmarshal test cases: %s\n", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tc.TestCases {
0000000000000000000000000000000000000000;;			resultWithNull, err := keepOrDeleteNullInObj(test.OriginalObj, true)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in test case %q when trying to keep null values: %s", test.Description, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.ExpectedWithNull, resultWithNull) {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in test case %q when trying to keep null values:\nexpected expectedWithNull:\n%+v\nbut got:\n%+v\n", test.Description, test.ExpectedWithNull, resultWithNull)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resultWithoutNull, err := keepOrDeleteNullInObj(test.OriginalObj, false)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in test case %q when trying to keep non-null values: %s", test.Description, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.ExpectedWithoutNull, resultWithoutNull) {
0000000000000000000000000000000000000000;;				t.Errorf("Failed in test case %q when trying to keep non-null values:\n expected expectedWithoutNull:\n%+v\nbut got:\n%+v\n", test.Description, test.ExpectedWithoutNull, resultWithoutNull)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JSONMergePatchTestCases struct {
0000000000000000000000000000000000000000;;		TestCases []JSONMergePatchTestCase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JSONMergePatchTestCase struct {
0000000000000000000000000000000000000000;;		Description string
0000000000000000000000000000000000000000;;		JSONMergePatchTestCaseData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type JSONMergePatchTestCaseData struct {
0000000000000000000000000000000000000000;;		// Original is the original object (last-applied config in annotation)
0000000000000000000000000000000000000000;;		Original map[string]interface{}
0000000000000000000000000000000000000000;;		// Modified is the modified object (new config we want)
0000000000000000000000000000000000000000;;		Modified map[string]interface{}
0000000000000000000000000000000000000000;;		// Current is the current object (live config in the server)
0000000000000000000000000000000000000000;;		Current map[string]interface{}
0000000000000000000000000000000000000000;;		// ThreeWay is the expected three-way merge patch
0000000000000000000000000000000000000000;;		ThreeWay map[string]interface{}
0000000000000000000000000000000000000000;;		// Result is the expected object after applying the three-way patch on current object.
0000000000000000000000000000000000000000;;		Result map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var createJSONMergePatchTestCaseData = []byte(`
0000000000000000000000000000000000000000;;	testCases:
0000000000000000000000000000000000000000;;	  - description: nil original
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: nil patch
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      {}
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	  - description: add field to map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field to map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete field from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete field from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: delete field from nested map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	  - description: delete field from nested map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: a
0000000000000000000000000000000000000000;;	        key2: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        key2: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      simpleMap:
0000000000000000000000000000000000000000;;	        key1: 1
0000000000000000000000000000000000000000;;	        other: a
0000000000000000000000000000000000000000;;	  - description: delete all fields from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified: {}
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: delete all fields from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified: {}
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: a
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete all fields from map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: add field and delete all fields from map with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      name: 1
0000000000000000000000000000000000000000;;	      value: 1
0000000000000000000000000000000000000000;;	      other: b
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      name: null
0000000000000000000000000000000000000000;;	      value: null
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      other: a
0000000000000000000000000000000000000000;;	  - description: replace list of scalars
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	  - description: replace list of scalars with conflict
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 1
0000000000000000000000000000000000000000;;	        - 4
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      intList:
0000000000000000000000000000000000000000;;	        - 2
0000000000000000000000000000000000000000;;	        - 3
0000000000000000000000000000000000000000;;	  - description: patch with different scalar type
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo: true
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo: 1
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo: true
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo: true
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from scalar to list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from list to scalar
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from scalar to map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from map to scalar
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo: 0
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from map to list
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 1
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch from list to map
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 0
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 0
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	        baz: 0
0000000000000000000000000000000000000000;;	      bar: 2
0000000000000000000000000000000000000000;;	  - description: patch with different nested types
0000000000000000000000000000000000000000;;	    original:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - a: true
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      - false
0000000000000000000000000000000000000000;;	    modified:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - false
0000000000000000000000000000000000000000;;	      - b: 1
0000000000000000000000000000000000000000;;	    current:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - a: true
0000000000000000000000000000000000000000;;	      - 2
0000000000000000000000000000000000000000;;	      - false
0000000000000000000000000000000000000000;;	      bar: 0
0000000000000000000000000000000000000000;;	    threeWay:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - false
0000000000000000000000000000000000000000;;	      - b: 1
0000000000000000000000000000000000000000;;	    result:
0000000000000000000000000000000000000000;;	      foo:
0000000000000000000000000000000000000000;;	      - 1
0000000000000000000000000000000000000000;;	      - false
0000000000000000000000000000000000000000;;	      - b: 1
0000000000000000000000000000000000000000;;	      bar: 0
0000000000000000000000000000000000000000;;	`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateThreeWayJSONMergePatch(t *testing.T) {
0000000000000000000000000000000000000000;;		tc := JSONMergePatchTestCases{}
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(createJSONMergePatchTestCaseData, &tc)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("can't unmarshal test cases: %s\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, c := range tc.TestCases {
0000000000000000000000000000000000000000;;			testThreeWayPatch(t, c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testThreeWayPatch(t *testing.T, c JSONMergePatchTestCase) {
0000000000000000000000000000000000000000;;		original, modified, current, expected, result := threeWayTestCaseToJSONOrFail(t, c)
0000000000000000000000000000000000000000;;		actual, err := CreateThreeWayJSONMergePatch(original, modified, current)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("error: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testPatchCreation(t, expected, actual, c.Description)
0000000000000000000000000000000000000000;;		testPatchApplication(t, current, actual, result, c.Description)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPatchCreation(t *testing.T, expected, actual []byte, description string) {
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(actual, expected) {
0000000000000000000000000000000000000000;;			t.Errorf("error in test case: %s\nexpected patch:\n%s\ngot:\n%s\n",
0000000000000000000000000000000000000000;;				description, jsonToYAMLOrError(expected), jsonToYAMLOrError(actual))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testPatchApplication(t *testing.T, original, patch, expected []byte, description string) {
0000000000000000000000000000000000000000;;		result, err := jsonpatch.MergePatch(original, patch)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("error: %s\nin test case: %s\ncannot apply patch:\n%s\nto original:\n%s\n",
0000000000000000000000000000000000000000;;				err, description, jsonToYAMLOrError(patch), jsonToYAMLOrError(original))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(result, expected) {
0000000000000000000000000000000000000000;;			format := "error in test case: %s\npatch application failed:\noriginal:\n%s\npatch:\n%s\nexpected:\n%s\ngot:\n%s\n"
0000000000000000000000000000000000000000;;			t.Errorf(format, description,
0000000000000000000000000000000000000000;;				jsonToYAMLOrError(original), jsonToYAMLOrError(patch),
0000000000000000000000000000000000000000;;				jsonToYAMLOrError(expected), jsonToYAMLOrError(result))
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func threeWayTestCaseToJSONOrFail(t *testing.T, c JSONMergePatchTestCase) ([]byte, []byte, []byte, []byte, []byte) {
0000000000000000000000000000000000000000;;		return testObjectToJSONOrFail(t, c.Original),
0000000000000000000000000000000000000000;;			testObjectToJSONOrFail(t, c.Modified),
0000000000000000000000000000000000000000;;			testObjectToJSONOrFail(t, c.Current),
0000000000000000000000000000000000000000;;			testObjectToJSONOrFail(t, c.ThreeWay),
0000000000000000000000000000000000000000;;			testObjectToJSONOrFail(t, c.Result)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testObjectToJSONOrFail(t *testing.T, o map[string]interface{}) []byte {
0000000000000000000000000000000000000000;;		if o == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		j, err := toJSON(o)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return j
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonToYAMLOrError(j []byte) string {
0000000000000000000000000000000000000000;;		y, err := jsonToYAML(j)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(y)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toJSON(v interface{}) ([]byte, error) {
0000000000000000000000000000000000000000;;		j, err := json.Marshal(v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("json marshal failed: %v\n%v\n", err, spew.Sdump(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return j, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func jsonToYAML(j []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		y, err := yaml.JSONToYAML(j)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("json to yaml failed: %v\n%v\n", err, j)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return y, nil
0000000000000000000000000000000000000000;;	}
