0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
d714e94e06ab1fafa67fde532355bb256b29b363;pkg/util/uuid.go[pkg/util/uuid.go][staging/src/k8s.io/apimachinery/pkg/util/uuid/uuid.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package uuid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/pborman/uuid"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var uuidLock sync.Mutex
0000000000000000000000000000000000000000;;	var lastUUID uuid.UUID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUUID() types.UID {
0000000000000000000000000000000000000000;;		uuidLock.Lock()
0000000000000000000000000000000000000000;;		defer uuidLock.Unlock()
0000000000000000000000000000000000000000;;		result := uuid.NewUUID()
0000000000000000000000000000000000000000;;		// The UUID package is naive and can generate identical UUIDs if the
0000000000000000000000000000000000000000;;		// time interval is quick enough.
0000000000000000000000000000000000000000;;		// The UUID uses 100 ns increments so it's short enough to actively
0000000000000000000000000000000000000000;;		// wait for a new value.
0000000000000000000000000000000000000000;;		for uuid.Equal(lastUUID, result) == true {
0000000000000000000000000000000000000000;;			result = uuid.NewUUID()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		lastUUID = result
0000000000000000000000000000000000000000;;		return types.UID(result.String())
0000000000000000000000000000000000000000;;	}
