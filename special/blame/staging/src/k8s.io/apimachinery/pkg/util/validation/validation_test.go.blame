0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsDNS1123Label(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"a", "ab", "abc", "a1", "a-1", "a--1--2--b",
0000000000000000000000000000000000000000;;			"0", "01", "012", "1a", "1-a", "1--a--b--2",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 63),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1123Label(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%s': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"", "A", "ABC", "aBc", "A1", "A-1", "1-A",
0000000000000000000000000000000000000000;;			"-", "a-", "-a", "1-", "-1",
0000000000000000000000000000000000000000;;			"_", "a_", "_a", "a_b", "1_", "_1", "1_2",
0000000000000000000000000000000000000000;;			".", "a.", ".a", "a.b", "1.", ".1", "1.2",
0000000000000000000000000000000000000000;;			" ", "a ", " a", "a b", "1 ", " 1", "1 2",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 64),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1123Label(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%s'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsDNS1123Subdomain(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"a", "ab", "abc", "a1", "a-1", "a--1--2--b",
0000000000000000000000000000000000000000;;			"0", "01", "012", "1a", "1-a", "1--a--b--2",
0000000000000000000000000000000000000000;;			"a.a", "ab.a", "abc.a", "a1.a", "a-1.a", "a--1--2--b.a",
0000000000000000000000000000000000000000;;			"a.1", "ab.1", "abc.1", "a1.1", "a-1.1", "a--1--2--b.1",
0000000000000000000000000000000000000000;;			"0.a", "01.a", "012.a", "1a.a", "1-a.a", "1--a--b--2",
0000000000000000000000000000000000000000;;			"0.1", "01.1", "012.1", "1a.1", "1-a.1", "1--a--b--2.1",
0000000000000000000000000000000000000000;;			"a.b.c.d.e", "aa.bb.cc.dd.ee", "1.2.3.4.5", "11.22.33.44.55",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 253),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1123Subdomain(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%s': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"", "A", "ABC", "aBc", "A1", "A-1", "1-A",
0000000000000000000000000000000000000000;;			"-", "a-", "-a", "1-", "-1",
0000000000000000000000000000000000000000;;			"_", "a_", "_a", "a_b", "1_", "_1", "1_2",
0000000000000000000000000000000000000000;;			".", "a.", ".a", "a..b", "1.", ".1", "1..2",
0000000000000000000000000000000000000000;;			" ", "a ", " a", "a b", "1 ", " 1", "1 2",
0000000000000000000000000000000000000000;;			"A.a", "aB.a", "ab.A", "A1.a", "a1.A",
0000000000000000000000000000000000000000;;			"A.1", "aB.1", "A1.1", "1A.1",
0000000000000000000000000000000000000000;;			"0.A", "01.A", "012.A", "1A.a", "1a.A",
0000000000000000000000000000000000000000;;			"A.B.C.D.E", "AA.BB.CC.DD.EE", "a.B.c.d.e", "aa.bB.cc.dd.ee",
0000000000000000000000000000000000000000;;			"a@b", "a,b", "a_b", "a;b",
0000000000000000000000000000000000000000;;			"a:b", "a%b", "a?b", "a$b",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 254),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1123Subdomain(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%s'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsDNS1035Label(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"a", "ab", "abc", "a1", "a-1", "a--1--2--b",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 63),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1035Label(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%s': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"0", "01", "012", "1a", "1-a", "1--a--b--2",
0000000000000000000000000000000000000000;;			"", "A", "ABC", "aBc", "A1", "A-1", "1-A",
0000000000000000000000000000000000000000;;			"-", "a-", "-a", "1-", "-1",
0000000000000000000000000000000000000000;;			"_", "a_", "_a", "a_b", "1_", "_1", "1_2",
0000000000000000000000000000000000000000;;			".", "a.", ".a", "a.b", "1.", ".1", "1.2",
0000000000000000000000000000000000000000;;			" ", "a ", " a", "a b", "1 ", " 1", "1 2",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 64),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsDNS1035Label(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%s'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsCIdentifier(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"a", "ab", "abc", "a1", "_a", "a_", "a_b", "a_1", "a__1__2__b", "__abc_123",
0000000000000000000000000000000000000000;;			"A", "AB", "AbC", "A1", "_A", "A_", "A_B", "A_1", "A__1__2__B", "__123_ABC",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsCIdentifier(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%s': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"", "1", "123", "1a",
0000000000000000000000000000000000000000;;			"-", "a-", "-a", "1-", "-1", "1_", "1_2",
0000000000000000000000000000000000000000;;			".", "a.", ".a", "a.b", "1.", ".1", "1.2",
0000000000000000000000000000000000000000;;			" ", "a ", " a", "a b", "1 ", " 1", "1 2",
0000000000000000000000000000000000000000;;			"#a#",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsCIdentifier(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%s'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidPortNum(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []int{1, 2, 1000, 16384, 32768, 65535}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPortNum(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for %d, got %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []int{0, -1, 65536, 100000}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPortNum(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for %d", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createGroupIDs(ids ...int64) []int64 {
0000000000000000000000000000000000000000;;		var output []int64
0000000000000000000000000000000000000000;;		for _, id := range ids {
0000000000000000000000000000000000000000;;			output = append(output, int64(id))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return output
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createUserIDs(ids ...int64) []int64 {
0000000000000000000000000000000000000000;;		var output []int64
0000000000000000000000000000000000000000;;		for _, id := range ids {
0000000000000000000000000000000000000000;;			output = append(output, int64(id))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return output
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidGroupID(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := createGroupIDs(0, 1, 1000, 65535, 2147483647)
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidGroupID(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%d': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := createGroupIDs(-1, -1003, 2147483648, 4147483647)
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidGroupID(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%d'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidUserID(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := createUserIDs(0, 1, 1000, 65535, 2147483647)
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidUserID(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%d': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := createUserIDs(-1, -1003, 2147483648, 4147483647)
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidUserID(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%d'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidPortName(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{"telnet", "re-mail-ck", "pop3", "a", "a-1", "1-a", "a-1-b-2-c", "1-a-2-b-3"}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPortName(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for %q: %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{"longerthan15characters", "", strings.Repeat("a", 16), "12345", "1-2-3-4", "-begin", "end-", "two--hyphens", "whois++"}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPortName(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for %q", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsQualifiedName(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []string{
0000000000000000000000000000000000000000;;			"simple",
0000000000000000000000000000000000000000;;			"now-with-dashes",
0000000000000000000000000000000000000000;;			"1-starts-with-num",
0000000000000000000000000000000000000000;;			"1234",
0000000000000000000000000000000000000000;;			"simple/simple",
0000000000000000000000000000000000000000;;			"now-with-dashes/simple",
0000000000000000000000000000000000000000;;			"now-with-dashes/now-with-dashes",
0000000000000000000000000000000000000000;;			"now.with.dots/simple",
0000000000000000000000000000000000000000;;			"now-with.dashes-and.dots/simple",
0000000000000000000000000000000000000000;;			"1-num.2-num/3-num",
0000000000000000000000000000000000000000;;			"1234/5678",
0000000000000000000000000000000000000000;;			"1.2.3.4/5678",
0000000000000000000000000000000000000000;;			"Uppercase_Is_OK_123",
0000000000000000000000000000000000000000;;			"example.com/Uppercase_Is_OK_123",
0000000000000000000000000000000000000000;;			"requests.storage-foo",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 63),
0000000000000000000000000000000000000000;;			strings.Repeat("a", 253) + "/" + strings.Repeat("b", 63),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range successCases {
0000000000000000000000000000000000000000;;			if errs := IsQualifiedName(successCases[i]); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: %q: expected success: %v", i, successCases[i], errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []string{
0000000000000000000000000000000000000000;;			"nospecialchars%^=@",
0000000000000000000000000000000000000000;;			"cantendwithadash-",
0000000000000000000000000000000000000000;;			"-cantstartwithadash-",
0000000000000000000000000000000000000000;;			"only/one/slash",
0000000000000000000000000000000000000000;;			"Example.com/abc",
0000000000000000000000000000000000000000;;			"example_com/abc",
0000000000000000000000000000000000000000;;			"example.com/",
0000000000000000000000000000000000000000;;			"/simple",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 64),
0000000000000000000000000000000000000000;;			strings.Repeat("a", 254) + "/abc",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range errorCases {
0000000000000000000000000000000000000000;;			if errs := IsQualifiedName(errorCases[i]); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: %q: expected failure", i, errorCases[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidLabelValue(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []string{
0000000000000000000000000000000000000000;;			"simple",
0000000000000000000000000000000000000000;;			"now-with-dashes",
0000000000000000000000000000000000000000;;			"1-starts-with-num",
0000000000000000000000000000000000000000;;			"end-with-num-1",
0000000000000000000000000000000000000000;;			"1234",                  // only num
0000000000000000000000000000000000000000;;			strings.Repeat("a", 63), // to the limit
0000000000000000000000000000000000000000;;			"", // empty value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range successCases {
0000000000000000000000000000000000000000;;			if errs := IsValidLabelValue(successCases[i]); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case %s expected success: %v", successCases[i], errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errorCases := []string{
0000000000000000000000000000000000000000;;			"nospecialchars%^=@",
0000000000000000000000000000000000000000;;			"Tama-nui-te-rā.is.Māori.sun",
0000000000000000000000000000000000000000;;			"\\backslashes\\are\\bad",
0000000000000000000000000000000000000000;;			"-starts-with-dash",
0000000000000000000000000000000000000000;;			"ends-with-dash-",
0000000000000000000000000000000000000000;;			".starts.with.dot",
0000000000000000000000000000000000000000;;			"ends.with.dot.",
0000000000000000000000000000000000000000;;			strings.Repeat("a", 64), // over the limit
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range errorCases {
0000000000000000000000000000000000000000;;			if errs := IsValidLabelValue(errorCases[i]); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d] expected failure", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidIP(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"::1",
0000000000000000000000000000000000000000;;			"2a00:79e0:2:0:f1c3:e797:93c1:df80",
0000000000000000000000000000000000000000;;			"::",
0000000000000000000000000000000000000000;;			"2001:4860:4860::8888",
0000000000000000000000000000000000000000;;			"::fff:1.1.1.1",
0000000000000000000000000000000000000000;;			"1.1.1.1",
0000000000000000000000000000000000000000;;			"1.1.1.01",
0000000000000000000000000000000000000000;;			"255.0.0.1",
0000000000000000000000000000000000000000;;			"1.0.0.0",
0000000000000000000000000000000000000000;;			"0.0.0.0",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidIP(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for %q: %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"[2001:db8:0:1]:80",
0000000000000000000000000000000000000000;;			"myhost.mydomain",
0000000000000000000000000000000000000000;;			"-1.0.0.0",
0000000000000000000000000000000000000000;;			"[2001:db8:0:1]",
0000000000000000000000000000000000000000;;			"a",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidIP(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for %q", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsHTTPHeaderName(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			// Common ones
0000000000000000000000000000000000000000;;			"Accept-Encoding", "Host", "If-Modified-Since", "X-Forwarded-For",
0000000000000000000000000000000000000000;;			// Weirdo, but still conforming names
0000000000000000000000000000000000000000;;			"a", "ab", "abc", "a1", "-a", "a-", "a-b", "a-1", "a--1--2--b", "--abc-123",
0000000000000000000000000000000000000000;;			"A", "AB", "AbC", "A1", "-A", "A-", "A-B", "A-1", "A--1--2--B", "--123-ABC",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsHTTPHeaderName(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for '%s': %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"Host:", "X-Forwarded-For:", "X-@Home",
0000000000000000000000000000000000000000;;			"", "_", "a_", "_a", "1_", "1_2", ".", "a.", ".a", "a.b", "1.", ".1", "1.2",
0000000000000000000000000000000000000000;;			" ", "a ", " a", "a b", "1 ", " 1", "1 2", "#a#", "^", ",", ";", "=", "<",
0000000000000000000000000000000000000000;;			"?", "@", "{",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsHTTPHeaderName(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for '%s'", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsValidPercent(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"0%",
0000000000000000000000000000000000000000;;			"00000%",
0000000000000000000000000000000000000000;;			"1%",
0000000000000000000000000000000000000000;;			"01%",
0000000000000000000000000000000000000000;;			"99%",
0000000000000000000000000000000000000000;;			"100%",
0000000000000000000000000000000000000000;;			"101%",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPercent(val); len(msgs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected true for %q: %v", val, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"",
0000000000000000000000000000000000000000;;			"0",
0000000000000000000000000000000000000000;;			"100",
0000000000000000000000000000000000000000;;			"0.0%",
0000000000000000000000000000000000000000;;			"99.9%",
0000000000000000000000000000000000000000;;			"hundred",
0000000000000000000000000000000000000000;;			" 1%",
0000000000000000000000000000000000000000;;			"1% ",
0000000000000000000000000000000000000000;;			"-0%",
0000000000000000000000000000000000000000;;			"-1%",
0000000000000000000000000000000000000000;;			"+1%",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if msgs := IsValidPercent(val); len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected false for %q", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsConfigMapKey(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []string{
0000000000000000000000000000000000000000;;			"a",
0000000000000000000000000000000000000000;;			"good",
0000000000000000000000000000000000000000;;			"good-good",
0000000000000000000000000000000000000000;;			"still.good",
0000000000000000000000000000000000000000;;			"this.is.also.good",
0000000000000000000000000000000000000000;;			".so.is.this",
0000000000000000000000000000000000000000;;			"THIS_IS_GOOD",
0000000000000000000000000000000000000000;;			"so_is_this_17",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range successCases {
0000000000000000000000000000000000000000;;			if errs := IsConfigMapKey(successCases[i]); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] expected success: %v", i, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		failureCases := []string{
0000000000000000000000000000000000000000;;			".",
0000000000000000000000000000000000000000;;			"..",
0000000000000000000000000000000000000000;;			"..bad",
0000000000000000000000000000000000000000;;			"b*d",
0000000000000000000000000000000000000000;;			"bad!&bad",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := range failureCases {
0000000000000000000000000000000000000000;;			if errs := IsConfigMapKey(failureCases[i]); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] expected failure", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsWildcardDNS1123Subdomain(t *testing.T) {
0000000000000000000000000000000000000000;;		goodValues := []string{
0000000000000000000000000000000000000000;;			"*.example.com",
0000000000000000000000000000000000000000;;			"*.bar.com",
0000000000000000000000000000000000000000;;			"*.foo.bar.com",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range goodValues {
0000000000000000000000000000000000000000;;			if errs := IsWildcardDNS1123Subdomain(val); len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected no errors for %q: %v", val, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValues := []string{
0000000000000000000000000000000000000000;;			"*.*.bar.com",
0000000000000000000000000000000000000000;;			"*.foo.*.com",
0000000000000000000000000000000000000000;;			"*bar.com",
0000000000000000000000000000000000000000;;			"f*.bar.com",
0000000000000000000000000000000000000000;;			"*",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, val := range badValues {
0000000000000000000000000000000000000000;;			if errs := IsWildcardDNS1123Subdomain(val); len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected errors for %q", val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
