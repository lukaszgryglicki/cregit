0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
5b6336de18fd06b720ebacda42f799b1aceb0ca4;pkg/util/cache.go[pkg/util/cache.go][staging/src/k8s.io/apimachinery/pkg/util/cache/cache.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		shardsCount int = 32
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cache []*cacheShard
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCache(maxSize int) Cache {
0000000000000000000000000000000000000000;;		if maxSize < shardsCount {
0000000000000000000000000000000000000000;;			maxSize = shardsCount
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		cache := make(Cache, shardsCount)
0000000000000000000000000000000000000000;;		for i := 0; i < shardsCount; i++ {
0000000000000000000000000000000000000000;;			cache[i] = &cacheShard{
0000000000000000000000000000000000000000;;				items:   make(map[uint64]interface{}),
0000000000000000000000000000000000000000;;				maxSize: maxSize / shardsCount,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cache
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c Cache) getShard(index uint64) *cacheShard {
0000000000000000000000000000000000000000;;		return c[index%uint64(shardsCount)]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns true if object already existed, false otherwise.
0000000000000000000000000000000000000000;;	func (c *Cache) Add(index uint64, obj interface{}) bool {
0000000000000000000000000000000000000000;;		return c.getShard(index).add(index, obj)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Cache) Get(index uint64) (obj interface{}, found bool) {
0000000000000000000000000000000000000000;;		return c.getShard(index).get(index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type cacheShard struct {
0000000000000000000000000000000000000000;;		items map[uint64]interface{}
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		maxSize int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns true if object already existed, false otherwise.
0000000000000000000000000000000000000000;;	func (s *cacheShard) add(index uint64, obj interface{}) bool {
0000000000000000000000000000000000000000;;		s.Lock()
0000000000000000000000000000000000000000;;		defer s.Unlock()
0000000000000000000000000000000000000000;;		_, isOverwrite := s.items[index]
0000000000000000000000000000000000000000;;		if !isOverwrite && len(s.items) >= s.maxSize {
0000000000000000000000000000000000000000;;			var randomKey uint64
0000000000000000000000000000000000000000;;			for randomKey = range s.items {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			delete(s.items, randomKey)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.items[index] = obj
0000000000000000000000000000000000000000;;		return isOverwrite
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *cacheShard) get(index uint64) (obj interface{}, found bool) {
0000000000000000000000000000000000000000;;		s.RLock()
0000000000000000000000000000000000000000;;		defer s.RUnlock()
0000000000000000000000000000000000000000;;		obj, found = s.items[index]
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
