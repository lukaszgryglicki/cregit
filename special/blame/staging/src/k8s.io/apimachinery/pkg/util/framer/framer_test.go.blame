0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRead(t *testing.T) {
0000000000000000000000000000000000000000;;		data := []byte{
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x04,
0000000000000000000000000000000000000000;;			0x01, 0x02, 0x03, 0x04,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x03,
0000000000000000000000000000000000000000;;			0x05, 0x06, 0x07,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x00,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x01,
0000000000000000000000000000000000000000;;			0x08,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;		r := NewLengthDelimitedFrameReader(ioutil.NopCloser(b))
0000000000000000000000000000000000000000;;		buf := make([]byte, 1)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer && n != 1 && bytes.Equal(buf, []byte{0x01}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer && n != 1 && bytes.Equal(buf, []byte{0x02}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read the remaining frame
0000000000000000000000000000000000000000;;		buf = make([]byte, 2)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 2 && bytes.Equal(buf, []byte{0x03, 0x04}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read with buffer equal to frame
0000000000000000000000000000000000000000;;		buf = make([]byte, 3)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 3 && bytes.Equal(buf, []byte{0x05, 0x06, 0x07}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read empty frame
0000000000000000000000000000000000000000;;		buf = make([]byte, 3)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 0 && bytes.Equal(buf, []byte{}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read with larger buffer than frame
0000000000000000000000000000000000000000;;		buf = make([]byte, 3)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 1 && bytes.Equal(buf, []byte{0x08}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read EOF
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.EOF && n != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d", err, n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadLarge(t *testing.T) {
0000000000000000000000000000000000000000;;		data := []byte{
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x04,
0000000000000000000000000000000000000000;;			0x01, 0x02, 0x03, 0x04,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x03,
0000000000000000000000000000000000000000;;			0x05, 0x06, 0x07,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x00,
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x01,
0000000000000000000000000000000000000000;;			0x08,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;		r := NewLengthDelimitedFrameReader(ioutil.NopCloser(b))
0000000000000000000000000000000000000000;;		buf := make([]byte, 40)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 4 && bytes.Equal(buf, []byte{0x01, 0x02, 0x03, 0x04}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 3 && bytes.Equal(buf, []byte{0x05, 0x06, 0x7}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 0 && bytes.Equal(buf, []byte{}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil && n != 1 && bytes.Equal(buf, []byte{0x08}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read EOF
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.EOF && n != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d", err, n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestReadInvalidFrame(t *testing.T) {
0000000000000000000000000000000000000000;;		data := []byte{
0000000000000000000000000000000000000000;;			0x00, 0x00, 0x00, 0x04,
0000000000000000000000000000000000000000;;			0x01, 0x02,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		b := bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;		r := NewLengthDelimitedFrameReader(ioutil.NopCloser(b))
0000000000000000000000000000000000000000;;		buf := make([]byte, 1)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer && n != 1 && bytes.Equal(buf, []byte{0x01}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read the remaining frame
0000000000000000000000000000000000000000;;		buf = make([]byte, 3)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrUnexpectedEOF && n != 1 && bytes.Equal(buf, []byte{0x02}) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %v", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// read EOF
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.EOF && n != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d", err, n)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJSONFrameReader(t *testing.T) {
0000000000000000000000000000000000000000;;		b := bytes.NewBufferString("{\"test\":true}\n1\n[\"a\"]")
0000000000000000000000000000000000000000;;		r := NewJSONFramedReader(ioutil.NopCloser(b))
0000000000000000000000000000000000000000;;		buf := make([]byte, 20)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 13 || string(buf[:n]) != `{"test":true}` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 1 || string(buf[:n]) != `1` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 5 || string(buf[:n]) != `["a"]` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.EOF || n != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestJSONFrameReaderShortBuffer(t *testing.T) {
0000000000000000000000000000000000000000;;		b := bytes.NewBufferString("{\"test\":true}\n1\n[\"a\"]")
0000000000000000000000000000000000000000;;		r := NewJSONFramedReader(ioutil.NopCloser(b))
0000000000000000000000000000000000000000;;		buf := make([]byte, 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer || n != 3 || string(buf[:n]) != `{"t` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer || n != 3 || string(buf[:n]) != `est` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer || n != 3 || string(buf[:n]) != `":t` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer || n != 3 || string(buf[:n]) != `rue` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 1 || string(buf[:n]) != `}` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 1 || string(buf[:n]) != `1` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.ErrShortBuffer || n != 3 || string(buf[:n]) != `["a` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != nil || n != 2 || string(buf[:n]) != `"]` {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); err != io.EOF || n != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected: %v %d %q", err, n, buf)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
