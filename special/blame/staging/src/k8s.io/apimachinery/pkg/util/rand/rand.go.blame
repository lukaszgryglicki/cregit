0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
705355e3d4bf4640b8396f98bac1640d781b14bc;pkg/util/rand/rand.go[pkg/util/rand/rand.go][staging/src/k8s.io/apimachinery/pkg/util/rand/rand.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package rand provides utilities related to randomization.
0000000000000000000000000000000000000000;;	package rand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var rng = struct {
0000000000000000000000000000000000000000;;		sync.Mutex
0000000000000000000000000000000000000000;;		rand *rand.Rand
0000000000000000000000000000000000000000;;	}{
0000000000000000000000000000000000000000;;		rand: rand.New(rand.NewSource(time.Now().UTC().UnixNano())),
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Intn generates an integer in range [0,max).
0000000000000000000000000000000000000000;;	// By design this should panic if input is invalid, <= 0.
0000000000000000000000000000000000000000;;	func Intn(max int) int {
0000000000000000000000000000000000000000;;		rng.Lock()
0000000000000000000000000000000000000000;;		defer rng.Unlock()
0000000000000000000000000000000000000000;;		return rng.rand.Intn(max)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntnRange generates an integer in range [min,max).
0000000000000000000000000000000000000000;;	// By design this should panic if input is invalid, <= 0.
0000000000000000000000000000000000000000;;	func IntnRange(min, max int) int {
0000000000000000000000000000000000000000;;		rng.Lock()
0000000000000000000000000000000000000000;;		defer rng.Unlock()
0000000000000000000000000000000000000000;;		return rng.rand.Intn(max-min) + min
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntnRange generates an int64 integer in range [min,max).
0000000000000000000000000000000000000000;;	// By design this should panic if input is invalid, <= 0.
0000000000000000000000000000000000000000;;	func Int63nRange(min, max int64) int64 {
0000000000000000000000000000000000000000;;		rng.Lock()
0000000000000000000000000000000000000000;;		defer rng.Unlock()
0000000000000000000000000000000000000000;;		return rng.rand.Int63n(max-min) + min
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Seed seeds the rng with the provided seed.
0000000000000000000000000000000000000000;;	func Seed(seed int64) {
0000000000000000000000000000000000000000;;		rng.Lock()
0000000000000000000000000000000000000000;;		defer rng.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		rng.rand = rand.New(rand.NewSource(seed))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Perm returns, as a slice of n ints, a pseudo-random permutation of the integers [0,n)
0000000000000000000000000000000000000000;;	// from the default Source.
0000000000000000000000000000000000000000;;	func Perm(n int) []int {
0000000000000000000000000000000000000000;;		rng.Lock()
0000000000000000000000000000000000000000;;		defer rng.Unlock()
0000000000000000000000000000000000000000;;		return rng.rand.Perm(n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We omit vowels from the set of available characters to reduce the chances
0000000000000000000000000000000000000000;;	// of "bad words" being formed.
0000000000000000000000000000000000000000;;	var alphanums = []rune("bcdfghjklmnpqrstvwxz0123456789")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String generates a random alphanumeric string, without vowels, which is n
0000000000000000000000000000000000000000;;	// characters long.  This will panic if n is less than zero.
0000000000000000000000000000000000000000;;	func String(length int) string {
0000000000000000000000000000000000000000;;		b := make([]rune, length)
0000000000000000000000000000000000000000;;		for i := range b {
0000000000000000000000000000000000000000;;			b[i] = alphanums[Intn(len(alphanums))]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
