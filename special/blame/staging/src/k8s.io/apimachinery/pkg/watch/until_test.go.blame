0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8f014148c5e34ebdc2aed5088f3fe7facf72acd9;pkg/watch/until_test.go[pkg/watch/until_test.go][staging/src/k8s.io/apimachinery/pkg/watch/until_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package watch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakePod struct {
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *fakePod) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUntil(t *testing.T) {
0000000000000000000000000000000000000000;;		fw := NewFake()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var obj *fakePod
0000000000000000000000000000000000000000;;			fw.Add(obj)
0000000000000000000000000000000000000000;;			fw.Modify(obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		conditions := []ConditionFunc{
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Modified, nil },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		timeout := time.Minute
0000000000000000000000000000000000000000;;		lastEvent, err := Until(timeout, fw, conditions...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected nil error, got %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected an event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent.Type != Modified {
0000000000000000000000000000000000000000;;			t.Fatalf("expected MODIFIED event type, got %v", lastEvent.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, isPod := lastEvent.Object.(*fakePod); !isPod {
0000000000000000000000000000000000000000;;			t.Fatalf("expected a pod event, got %#v", got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUntilMultipleConditions(t *testing.T) {
0000000000000000000000000000000000000000;;		fw := NewFake()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var obj *fakePod
0000000000000000000000000000000000000000;;			fw.Add(obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		conditions := []ConditionFunc{
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		timeout := time.Minute
0000000000000000000000000000000000000000;;		lastEvent, err := Until(timeout, fw, conditions...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected nil error, got %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected an event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent.Type != Added {
0000000000000000000000000000000000000000;;			t.Fatalf("expected MODIFIED event type, got %v", lastEvent.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, isPod := lastEvent.Object.(*fakePod); !isPod {
0000000000000000000000000000000000000000;;			t.Fatalf("expected a pod event, got %#v", got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUntilMultipleConditionsFail(t *testing.T) {
0000000000000000000000000000000000000000;;		fw := NewFake()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var obj *fakePod
0000000000000000000000000000000000000000;;			fw.Add(obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		conditions := []ConditionFunc{
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Deleted, nil },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		timeout := 10 * time.Second
0000000000000000000000000000000000000000;;		lastEvent, err := Until(timeout, fw, conditions...)
0000000000000000000000000000000000000000;;		if err != wait.ErrWaitTimeout {
0000000000000000000000000000000000000000;;			t.Fatalf("expected ErrWaitTimeout error, got %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected an event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent.Type != Added {
0000000000000000000000000000000000000000;;			t.Fatalf("expected ADDED event type, got %v", lastEvent.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, isPod := lastEvent.Object.(*fakePod); !isPod {
0000000000000000000000000000000000000000;;			t.Fatalf("expected a pod event, got %#v", got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUntilTimeout(t *testing.T) {
0000000000000000000000000000000000000000;;		fw := NewFake()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var obj *fakePod
0000000000000000000000000000000000000000;;			fw.Add(obj)
0000000000000000000000000000000000000000;;			fw.Modify(obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		conditions := []ConditionFunc{
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) {
0000000000000000000000000000000000000000;;				return event.Type == Added, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) {
0000000000000000000000000000000000000000;;				return event.Type == Modified, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		timeout := time.Duration(0)
0000000000000000000000000000000000000000;;		lastEvent, err := Until(timeout, fw, conditions...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("expected nil error, got %#v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected an event")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if lastEvent.Type != Modified {
0000000000000000000000000000000000000000;;			t.Fatalf("expected MODIFIED event type, got %v", lastEvent.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, isPod := lastEvent.Object.(*fakePod); !isPod {
0000000000000000000000000000000000000000;;			t.Fatalf("expected a pod event, got %#v", got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUntilErrorCondition(t *testing.T) {
0000000000000000000000000000000000000000;;		fw := NewFake()
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			var obj *fakePod
0000000000000000000000000000000000000000;;			fw.Add(obj)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;		expected := "something bad"
0000000000000000000000000000000000000000;;		conditions := []ConditionFunc{
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return event.Type == Added, nil },
0000000000000000000000000000000000000000;;			func(event Event) (bool, error) { return false, errors.New(expected) },
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		timeout := time.Minute
0000000000000000000000000000000000000000;;		_, err := Until(timeout, fw, conditions...)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatal("expected an error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), expected) {
0000000000000000000000000000000000000000;;			t.Fatalf("expected %q in error string, got %q", expected, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
