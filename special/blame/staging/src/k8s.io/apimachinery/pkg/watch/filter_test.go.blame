0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package watch_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		. "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFilter(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []Event{
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("foo")},
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("bar")},
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("baz")},
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("qux")},
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("zoo")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		source := NewFake()
0000000000000000000000000000000000000000;;		filtered := Filter(source, func(e Event) (Event, bool) {
0000000000000000000000000000000000000000;;			return e, e.Object.(testType)[0] != 'b'
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for _, item := range table {
0000000000000000000000000000000000000000;;				source.Action(item.Type, item.Object)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			source.Stop()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got []string
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			event, ok := <-filtered.ResultChan()
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got = append(got, string(event.Object.(testType)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := []string{"foo", "qux", "zoo"}, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("got %v, wanted %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFilterStop(t *testing.T) {
0000000000000000000000000000000000000000;;		source := NewFake()
0000000000000000000000000000000000000000;;		filtered := Filter(source, func(e Event) (Event, bool) {
0000000000000000000000000000000000000000;;			return e, e.Object.(testType)[0] != 'b'
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			source.Add(testType("foo"))
0000000000000000000000000000000000000000;;			filtered.Stop()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got []string
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			event, ok := <-filtered.ResultChan()
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got = append(got, string(event.Object.(testType)))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := []string{"foo"}, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("got %v, wanted %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
