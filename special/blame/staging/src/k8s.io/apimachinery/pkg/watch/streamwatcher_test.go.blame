0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package watch_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		. "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDecoder struct {
0000000000000000000000000000000000000000;;		items chan Event
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fakeDecoder) Decode() (action EventType, object runtime.Object, err error) {
0000000000000000000000000000000000000000;;		item, open := <-f.items
0000000000000000000000000000000000000000;;		if !open {
0000000000000000000000000000000000000000;;			return action, nil, io.EOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return item.Type, item.Object, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f fakeDecoder) Close() {
0000000000000000000000000000000000000000;;		close(f.items)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStreamWatcher(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []Event{
0000000000000000000000000000000000000000;;			{Type: Added, Object: testType("foo")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fd := fakeDecoder{make(chan Event, 5)}
0000000000000000000000000000000000000000;;		sw := NewStreamWatcher(fd)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, item := range table {
0000000000000000000000000000000000000000;;			fd.items <- item
0000000000000000000000000000000000000000;;			got, open := <-sw.ResultChan()
0000000000000000000000000000000000000000;;			if !open {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected early close")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := item, got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sw.Stop()
0000000000000000000000000000000000000000;;		_, open := <-sw.ResultChan()
0000000000000000000000000000000000000000;;		if open {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected failure to close")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
