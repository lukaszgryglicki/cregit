0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package watch_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		. "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj testType) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFake(t *testing.T) {
0000000000000000000000000000000000000000;;		f := NewFake()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			t EventType
0000000000000000000000000000000000000000;;			s testType
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Added, testType("foo")},
0000000000000000000000000000000000000000;;			{Modified, testType("qux")},
0000000000000000000000000000000000000000;;			{Modified, testType("bar")},
0000000000000000000000000000000000000000;;			{Deleted, testType("bar")},
0000000000000000000000000000000000000000;;			{Error, testType("error: blah")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Prove that f implements Interface by phrasing this as a function.
0000000000000000000000000000000000000000;;		consumer := func(w Interface) {
0000000000000000000000000000000000000000;;			for _, expect := range table {
0000000000000000000000000000000000000000;;				got, ok := <-w.ResultChan()
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Fatalf("closed early")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := expect.t, got.Type; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if a, ok := got.Object.(testType); !ok || a != expect.s {
0000000000000000000000000000000000000000;;					t.Fatalf("Expected %v, got %v", expect.s, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, stillOpen := <-w.ResultChan()
0000000000000000000000000000000000000000;;			if stillOpen {
0000000000000000000000000000000000000000;;				t.Fatal("Never stopped")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sender := func() {
0000000000000000000000000000000000000000;;			f.Add(testType("foo"))
0000000000000000000000000000000000000000;;			f.Action(Modified, testType("qux"))
0000000000000000000000000000000000000000;;			f.Modify(testType("bar"))
0000000000000000000000000000000000000000;;			f.Delete(testType("bar"))
0000000000000000000000000000000000000000;;			f.Error(testType("error: blah"))
0000000000000000000000000000000000000000;;			f.Stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go sender()
0000000000000000000000000000000000000000;;		consumer(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRaceFreeFake(t *testing.T) {
0000000000000000000000000000000000000000;;		f := NewRaceFreeFake()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			t EventType
0000000000000000000000000000000000000000;;			s testType
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Added, testType("foo")},
0000000000000000000000000000000000000000;;			{Modified, testType("qux")},
0000000000000000000000000000000000000000;;			{Modified, testType("bar")},
0000000000000000000000000000000000000000;;			{Deleted, testType("bar")},
0000000000000000000000000000000000000000;;			{Error, testType("error: blah")},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Prove that f implements Interface by phrasing this as a function.
0000000000000000000000000000000000000000;;		consumer := func(w Interface) {
0000000000000000000000000000000000000000;;			for _, expect := range table {
0000000000000000000000000000000000000000;;				got, ok := <-w.ResultChan()
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					t.Fatalf("closed early")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := expect.t, got.Type; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if a, ok := got.Object.(testType); !ok || a != expect.s {
0000000000000000000000000000000000000000;;					t.Fatalf("Expected %v, got %v", expect.s, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, stillOpen := <-w.ResultChan()
0000000000000000000000000000000000000000;;			if stillOpen {
0000000000000000000000000000000000000000;;				t.Fatal("Never stopped")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sender := func() {
0000000000000000000000000000000000000000;;			f.Add(testType("foo"))
0000000000000000000000000000000000000000;;			f.Action(Modified, testType("qux"))
0000000000000000000000000000000000000000;;			f.Modify(testType("bar"))
0000000000000000000000000000000000000000;;			f.Delete(testType("bar"))
0000000000000000000000000000000000000000;;			f.Error(testType("error: blah"))
0000000000000000000000000000000000000000;;			f.Stop()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go sender()
0000000000000000000000000000000000000000;;		consumer(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmpty(t *testing.T) {
0000000000000000000000000000000000000000;;		w := NewEmptyWatch()
0000000000000000000000000000000000000000;;		_, ok := <-w.ResultChan()
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result channel result")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.Stop()
0000000000000000000000000000000000000000;;		_, ok = <-w.ResultChan()
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected result channel result")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
