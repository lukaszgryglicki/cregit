0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
080f4e2b08b44ae35eb18c0e03a721bdf44dd8c9;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		apiserializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List holds a list of objects, which may not be known by the server.
0000000000000000000000000000000000000000;;	type List struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Items []runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestScheme() (*runtime.Scheme, apiserializer.CodecFactory) {
0000000000000000000000000000000000000000;;		internalGV := schema.GroupVersion{Group: "", Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;		externalGV := schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(internalGV,
0000000000000000000000000000000000000000;;			&testapigroup.Carp{},
0000000000000000000000000000000000000000;;			&testapigroup.CarpList{},
0000000000000000000000000000000000000000;;			&List{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		scheme.AddKnownTypes(externalGV,
0000000000000000000000000000000000000000;;			&v1.Carp{},
0000000000000000000000000000000000000000;;			&v1.CarpList{},
0000000000000000000000000000000000000000;;			&List{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		testapigroup.AddToScheme(scheme)
0000000000000000000000000000000000000000;;		v1.AddToScheme(scheme)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		codecs := apiserializer.NewCodecFactory(scheme)
0000000000000000000000000000000000000000;;		return scheme, codecs
0000000000000000000000000000000000000000;;	}
