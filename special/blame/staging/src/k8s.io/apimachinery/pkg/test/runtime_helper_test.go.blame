0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
64ede64e0e9dcdfd091032aaee08dda5c7287dd7;pkg/runtime/helper_test.go[pkg/runtime/helper_test.go][staging/src/k8s.io/apimachinery/pkg/test/runtime_helper_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecodeList(t *testing.T) {
0000000000000000000000000000000000000000;;		pl := List{
0000000000000000000000000000000000000000;;			Items: []runtime.Object{
0000000000000000000000000000000000000000;;				&testapigroup.Carp{ObjectMeta: metav1.ObjectMeta{Name: "1"}},
0000000000000000000000000000000000000000;;				&runtime.Unknown{
0000000000000000000000000000000000000000;;					TypeMeta:    runtime.TypeMeta{Kind: "Carp", APIVersion: "v1"},
0000000000000000000000000000000000000000;;					Raw:         []byte(`{"kind":"Carp","apiVersion":"` + "v1" + `","metadata":{"name":"test"}}`),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, codecs := TestScheme()
0000000000000000000000000000000000000000;;		Codec := apitesting.TestCodec(codecs, testapigroup.SchemeGroupVersion)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if errs := runtime.DecodeList(pl.Items, Codec); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod, ok := pl.Items[1].(*testapigroup.Carp); !ok || pod.Name != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("object not converted: %#v", pl.Items[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
