0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
14c7397656532d53ad01e1b30377b4af060912b8;pkg/runtime/unstructured_test.go[pkg/runtime/unstructured_test.go][staging/src/k8s.io/apimachinery/pkg/test/apis_meta_v1_unstructed_unstructure_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/testapigroup"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecodeUnstructured(t *testing.T) {
0000000000000000000000000000000000000000;;		groupVersionString := "v1"
0000000000000000000000000000000000000000;;		rawJson := fmt.Sprintf(`{"kind":"Pod","apiVersion":"%s","metadata":{"name":"test"}}`, groupVersionString)
0000000000000000000000000000000000000000;;		pl := &List{
0000000000000000000000000000000000000000;;			Items: []runtime.Object{
0000000000000000000000000000000000000000;;				&testapigroup.Carp{ObjectMeta: metav1.ObjectMeta{Name: "1"}},
0000000000000000000000000000000000000000;;				&runtime.Unknown{
0000000000000000000000000000000000000000;;					TypeMeta:    runtime.TypeMeta{Kind: "Pod", APIVersion: groupVersionString},
0000000000000000000000000000000000000000;;					Raw:         []byte(rawJson),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&runtime.Unknown{
0000000000000000000000000000000000000000;;					TypeMeta:    runtime.TypeMeta{Kind: "", APIVersion: groupVersionString},
0000000000000000000000000000000000000000;;					Raw:         []byte(rawJson),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				&unstructured.Unstructured{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"kind":       "Foo",
0000000000000000000000000000000000000000;;						"apiVersion": "Bar",
0000000000000000000000000000000000000000;;						"test":       "value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := runtime.DecodeList(pl.Items, unstructured.UnstructuredJSONScheme); len(errs) == 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod, ok := pl.Items[1].(*unstructured.Unstructured); !ok || pod.Object["kind"] != "Pod" || pod.Object["metadata"].(map[string]interface{})["name"] != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("object not converted: %#v", pl.Items[1])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if pod, ok := pl.Items[2].(*unstructured.Unstructured); !ok || pod.Object["kind"] != "Pod" || pod.Object["metadata"].(map[string]interface{})["name"] != "test" {
0000000000000000000000000000000000000000;;			t.Errorf("object not converted: %#v", pl.Items[2])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecode(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			json []byte
0000000000000000000000000000000000000000;;			want runtime.Object
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				json: []byte(`{"apiVersion": "test", "kind": "test_kind"}`),
0000000000000000000000000000000000000000;;				want: &unstructured.Unstructured{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{"apiVersion": "test", "kind": "test_kind"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				json: []byte(`{"apiVersion": "test", "kind": "test_list", "items": []}`),
0000000000000000000000000000000000000000;;				want: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{"apiVersion": "test", "kind": "test_list"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				json: []byte(`{"items": [{"metadata": {"name": "object1", "deletionGracePeriodSeconds": 10}, "apiVersion": "test", "kind": "test_kind"}, {"metadata": {"name": "object2"}, "apiVersion": "test", "kind": "test_kind"}], "apiVersion": "test", "kind": "test_list"}`),
0000000000000000000000000000000000000000;;				want: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{"apiVersion": "test", "kind": "test_list"},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"metadata":   map[string]interface{}{"name": "object1", "deletionGracePeriodSeconds": int64(10)},
0000000000000000000000000000000000000000;;								"apiVersion": "test",
0000000000000000000000000000000000000000;;								"kind":       "test_kind",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Object: map[string]interface{}{
0000000000000000000000000000000000000000;;								"metadata":   map[string]interface{}{"name": "object2"},
0000000000000000000000000000000000000000;;								"apiVersion": "test",
0000000000000000000000000000000000000000;;								"kind":       "test_kind",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			got, _, err := unstructured.UnstructuredJSONScheme.Decode(tc.json, nil, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error for %q: %v", string(tc.json), err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("Decode(%q) want: %v\ngot: %v", string(tc.json), tc.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnstructuredGetters(t *testing.T) {
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		ten := int64(10)
0000000000000000000000000000000000000000;;		unstruct := unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"kind":       "test_kind",
0000000000000000000000000000000000000000;;				"apiVersion": "test_version",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":                       "test_name",
0000000000000000000000000000000000000000;;					"namespace":                  "test_namespace",
0000000000000000000000000000000000000000;;					"generateName":               "test_generateName",
0000000000000000000000000000000000000000;;					"uid":                        "test_uid",
0000000000000000000000000000000000000000;;					"resourceVersion":            "test_resourceVersion",
0000000000000000000000000000000000000000;;					"generation":                 ten,
0000000000000000000000000000000000000000;;					"deletionGracePeriodSeconds": ten,
0000000000000000000000000000000000000000;;					"selfLink":                   "test_selfLink",
0000000000000000000000000000000000000000;;					"creationTimestamp":          "2009-11-10T23:00:00Z",
0000000000000000000000000000000000000000;;					"deletionTimestamp":          "2010-11-10T23:00:00Z",
0000000000000000000000000000000000000000;;					"labels": map[string]interface{}{
0000000000000000000000000000000000000000;;						"test_label": "test_value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"annotations": map[string]interface{}{
0000000000000000000000000000000000000000;;						"test_annotation": "test_value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"ownerReferences": []map[string]interface{}{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"kind":       "Pod",
0000000000000000000000000000000000000000;;							"name":       "poda",
0000000000000000000000000000000000000000;;							"apiVersion": "v1",
0000000000000000000000000000000000000000;;							"uid":        "1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"kind":       "Pod",
0000000000000000000000000000000000000000;;							"name":       "podb",
0000000000000000000000000000000000000000;;							"apiVersion": "v1",
0000000000000000000000000000000000000000;;							"uid":        "2",
0000000000000000000000000000000000000000;;							// though these fields are of type *bool, but when
0000000000000000000000000000000000000000;;							// decoded from JSON, they are unmarshalled as bool.
0000000000000000000000000000000000000000;;							"controller":         true,
0000000000000000000000000000000000000000;;							"blockOwnerDeletion": true,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"finalizers": []interface{}{
0000000000000000000000000000000000000000;;						"finalizer.1",
0000000000000000000000000000000000000000;;						"finalizer.2",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"clusterName": "cluster123",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetAPIVersion(), "test_version"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetAPIVersions() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetKind(), "test_kind"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetKind() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetNamespace(), "test_namespace"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetNamespace() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetName(), "test_name"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetName() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetGenerateName(), "test_generateName"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetGenerateName() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetUID(), types.UID("test_uid"); got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetUID() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetResourceVersion(), "test_resourceVersion"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetResourceVersion() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetSelfLink(), "test_selfLink"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetSelfLink() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetCreationTimestamp(), metav1.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC); !got.Equal(want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetCreationTimestamp() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetDeletionTimestamp(), metav1.Date(2010, time.November, 10, 23, 0, 0, 0, time.UTC); got == nil || !got.Equal(want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetDeletionTimestamp() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetLabels(), map[string]string{"test_label": "test_value"}; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetLabels() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetAnnotations(), map[string]string{"test_annotation": "test_value"}; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetAnnotations() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		refs := unstruct.GetOwnerReferences()
0000000000000000000000000000000000000000;;		expectedOwnerReferences := []metav1.OwnerReference{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kind:       "Pod",
0000000000000000000000000000000000000000;;				Name:       "poda",
0000000000000000000000000000000000000000;;				APIVersion: "v1",
0000000000000000000000000000000000000000;;				UID:        "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kind:               "Pod",
0000000000000000000000000000000000000000;;				Name:               "podb",
0000000000000000000000000000000000000000;;				APIVersion:         "v1",
0000000000000000000000000000000000000000;;				UID:                "2",
0000000000000000000000000000000000000000;;				Controller:         &trueVar,
0000000000000000000000000000000000000000;;				BlockOwnerDeletion: &trueVar,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := refs, expectedOwnerReferences; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetOwnerReferences()=%v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetFinalizers(), []string{"finalizer.1", "finalizer.2"}; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetFinalizers()=%v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetClusterName(), "cluster123"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetClusterName()=%v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetDeletionGracePeriodSeconds(), &ten; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetDeletionGracePeriodSeconds()=%v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetGeneration(), ten; !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;			t.Errorf("GetGeneration()=%v, want %v", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnstructuredSetters(t *testing.T) {
0000000000000000000000000000000000000000;;		unstruct := unstructured.Unstructured{}
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		ten := int64(10)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"kind":       "test_kind",
0000000000000000000000000000000000000000;;				"apiVersion": "test_version",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"name":                       "test_name",
0000000000000000000000000000000000000000;;					"namespace":                  "test_namespace",
0000000000000000000000000000000000000000;;					"generateName":               "test_generateName",
0000000000000000000000000000000000000000;;					"uid":                        "test_uid",
0000000000000000000000000000000000000000;;					"resourceVersion":            "test_resourceVersion",
0000000000000000000000000000000000000000;;					"selfLink":                   "test_selfLink",
0000000000000000000000000000000000000000;;					"creationTimestamp":          "2009-11-10T23:00:00Z",
0000000000000000000000000000000000000000;;					"deletionTimestamp":          "2010-11-10T23:00:00Z",
0000000000000000000000000000000000000000;;					"deletionGracePeriodSeconds": &ten,
0000000000000000000000000000000000000000;;					"generation":                 ten,
0000000000000000000000000000000000000000;;					"labels": map[string]interface{}{
0000000000000000000000000000000000000000;;						"test_label": "test_value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"annotations": map[string]interface{}{
0000000000000000000000000000000000000000;;						"test_annotation": "test_value",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"ownerReferences": []map[string]interface{}{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"kind":       "Pod",
0000000000000000000000000000000000000000;;							"name":       "poda",
0000000000000000000000000000000000000000;;							"apiVersion": "v1",
0000000000000000000000000000000000000000;;							"uid":        "1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							"kind":               "Pod",
0000000000000000000000000000000000000000;;							"name":               "podb",
0000000000000000000000000000000000000000;;							"apiVersion":         "v1",
0000000000000000000000000000000000000000;;							"uid":                "2",
0000000000000000000000000000000000000000;;							"controller":         true,
0000000000000000000000000000000000000000;;							"blockOwnerDeletion": true,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"finalizers": []interface{}{
0000000000000000000000000000000000000000;;						"finalizer.1",
0000000000000000000000000000000000000000;;						"finalizer.2",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"clusterName": "cluster123",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unstruct.SetAPIVersion("test_version")
0000000000000000000000000000000000000000;;		unstruct.SetKind("test_kind")
0000000000000000000000000000000000000000;;		unstruct.SetNamespace("test_namespace")
0000000000000000000000000000000000000000;;		unstruct.SetName("test_name")
0000000000000000000000000000000000000000;;		unstruct.SetGenerateName("test_generateName")
0000000000000000000000000000000000000000;;		unstruct.SetUID(types.UID("test_uid"))
0000000000000000000000000000000000000000;;		unstruct.SetResourceVersion("test_resourceVersion")
0000000000000000000000000000000000000000;;		unstruct.SetSelfLink("test_selfLink")
0000000000000000000000000000000000000000;;		unstruct.SetCreationTimestamp(metav1.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC))
0000000000000000000000000000000000000000;;		date := metav1.Date(2010, time.November, 10, 23, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;		unstruct.SetDeletionTimestamp(&date)
0000000000000000000000000000000000000000;;		unstruct.SetLabels(map[string]string{"test_label": "test_value"})
0000000000000000000000000000000000000000;;		unstruct.SetAnnotations(map[string]string{"test_annotation": "test_value"})
0000000000000000000000000000000000000000;;		newOwnerReferences := []metav1.OwnerReference{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kind:       "Pod",
0000000000000000000000000000000000000000;;				Name:       "poda",
0000000000000000000000000000000000000000;;				APIVersion: "v1",
0000000000000000000000000000000000000000;;				UID:        "1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Kind:               "Pod",
0000000000000000000000000000000000000000;;				Name:               "podb",
0000000000000000000000000000000000000000;;				APIVersion:         "v1",
0000000000000000000000000000000000000000;;				UID:                "2",
0000000000000000000000000000000000000000;;				Controller:         &trueVar,
0000000000000000000000000000000000000000;;				BlockOwnerDeletion: &trueVar,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		unstruct.SetOwnerReferences(newOwnerReferences)
0000000000000000000000000000000000000000;;		unstruct.SetFinalizers([]string{"finalizer.1", "finalizer.2"})
0000000000000000000000000000000000000000;;		unstruct.SetClusterName("cluster123")
0000000000000000000000000000000000000000;;		unstruct.SetDeletionGracePeriodSeconds(&ten)
0000000000000000000000000000000000000000;;		unstruct.SetGeneration(ten)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(unstruct, want) {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted: \n%s\n Got:\n%s", want, unstruct)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOwnerReferences(t *testing.T) {
0000000000000000000000000000000000000000;;		t.Parallel()
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		falseVar := false
0000000000000000000000000000000000000000;;		refs := []metav1.OwnerReference{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				APIVersion: "v2",
0000000000000000000000000000000000000000;;				Kind:       "K2",
0000000000000000000000000000000000000000;;				Name:       "n2",
0000000000000000000000000000000000000000;;				UID:        types.UID("abc1"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				APIVersion:         "v1",
0000000000000000000000000000000000000000;;				Kind:               "K1",
0000000000000000000000000000000000000000;;				Name:               "n1",
0000000000000000000000000000000000000000;;				UID:                types.UID("abc2"),
0000000000000000000000000000000000000000;;				Controller:         &trueVar,
0000000000000000000000000000000000000000;;				BlockOwnerDeletion: &falseVar,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				APIVersion:         "v3",
0000000000000000000000000000000000000000;;				Kind:               "K3",
0000000000000000000000000000000000000000;;				Name:               "n3",
0000000000000000000000000000000000000000;;				UID:                types.UID("abc3"),
0000000000000000000000000000000000000000;;				Controller:         &falseVar,
0000000000000000000000000000000000000000;;				BlockOwnerDeletion: &trueVar,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, ref := range refs {
0000000000000000000000000000000000000000;;			ref := ref
0000000000000000000000000000000000000000;;			t.Run(strconv.Itoa(i), func(t *testing.T) {
0000000000000000000000000000000000000000;;				t.Parallel()
0000000000000000000000000000000000000000;;				u1 := unstructured.Unstructured{
0000000000000000000000000000000000000000;;					Object: make(map[string]interface{}),
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				refsX := []metav1.OwnerReference{ref}
0000000000000000000000000000000000000000;;				u1.SetOwnerReferences(refsX)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				have := u1.GetOwnerReferences()
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(have, refsX) {
0000000000000000000000000000000000000000;;					t.Errorf("Object references are not the same: %#v != %#v", have, refsX)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnstructuredListGetters(t *testing.T) {
0000000000000000000000000000000000000000;;		unstruct := unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"kind":       "test_kind",
0000000000000000000000000000000000000000;;				"apiVersion": "test_version",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"resourceVersion": "test_resourceVersion",
0000000000000000000000000000000000000000;;					"selfLink":        "test_selfLink",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetAPIVersion(), "test_version"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetAPIVersions() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetKind(), "test_kind"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetKind() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetResourceVersion(), "test_resourceVersion"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetResourceVersion() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if got, want := unstruct.GetSelfLink(), "test_selfLink"; got != want {
0000000000000000000000000000000000000000;;			t.Errorf("GetSelfLink() = %s, want %s", got, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUnstructuredListSetters(t *testing.T) {
0000000000000000000000000000000000000000;;		unstruct := unstructured.UnstructuredList{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		want := unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"kind":       "test_kind",
0000000000000000000000000000000000000000;;				"apiVersion": "test_version",
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"resourceVersion": "test_resourceVersion",
0000000000000000000000000000000000000000;;					"selfLink":        "test_selfLink",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unstruct.SetAPIVersion("test_version")
0000000000000000000000000000000000000000;;		unstruct.SetKind("test_kind")
0000000000000000000000000000000000000000;;		unstruct.SetResourceVersion("test_resourceVersion")
0000000000000000000000000000000000000000;;		unstruct.SetSelfLink("test_selfLink")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(unstruct, want) {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted: \n%s\n Got:\n%s", unstruct, want)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecodeNumbers(t *testing.T) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start with a valid pod
0000000000000000000000000000000000000000;;		originalJSON := []byte(`{
0000000000000000000000000000000000000000;;			"kind":"Carp",
0000000000000000000000000000000000000000;;			"apiVersion":"v1",
0000000000000000000000000000000000000000;;			"metadata":{"name":"pod","namespace":"foo"},
0000000000000000000000000000000000000000;;			"spec":{
0000000000000000000000000000000000000000;;				"containers":[{"name":"container","image":"container"}],
0000000000000000000000000000000000000000;;				"activeDeadlineSeconds":1000030003
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod := &testapigroup.Carp{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, codecs := TestScheme()
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Group: "", Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := runtime.DecodeInto(codec, originalJSON, pod)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Round-trip with unstructured codec
0000000000000000000000000000000000000000;;		unstructuredObj, err := runtime.Decode(unstructured.UnstructuredJSONScheme, originalJSON)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		roundtripJSON, err := runtime.Encode(unstructured.UnstructuredJSONScheme, unstructuredObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure we serialize back out in int form
0000000000000000000000000000000000000000;;		if !strings.Contains(string(roundtripJSON), `"activeDeadlineSeconds":1000030003`) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %s, got %s", `"activeDeadlineSeconds":1000030003`, string(roundtripJSON))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Decode with structured codec again
0000000000000000000000000000000000000000;;		obj2, err := runtime.Decode(codec, roundtripJSON)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// ensure pod is still valid
0000000000000000000000000000000000000000;;		pod2, ok := obj2.(*testapigroup.Carp)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			t.Fatalf("expected an *api.Pod, got %#v", obj2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ensure round-trip preserved large integers
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(pod, pod2) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected\n\t%#v, got \n\t%#v", pod, pod2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestAccessorMethods does opaque roundtrip testing against an Unstructured
0000000000000000000000000000000000000000;;	// instance's Object methods to ensure that what is "Set" matches what you
0000000000000000000000000000000000000000;;	// subsequently "Get" without any assertions against internal state.
0000000000000000000000000000000000000000;;	func TestAccessorMethods(t *testing.T) {
0000000000000000000000000000000000000000;;		int64p := func(i int) *int64 {
0000000000000000000000000000000000000000;;			v := int64(i)
0000000000000000000000000000000000000000;;			return &v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			accessor string
0000000000000000000000000000000000000000;;			val      interface{}
0000000000000000000000000000000000000000;;			nilVal   reflect.Value
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{accessor: "Namespace", val: "foo"},
0000000000000000000000000000000000000000;;			{accessor: "Name", val: "bar"},
0000000000000000000000000000000000000000;;			{accessor: "GenerateName", val: "baz"},
0000000000000000000000000000000000000000;;			{accessor: "UID", val: types.UID("uid")},
0000000000000000000000000000000000000000;;			{accessor: "ResourceVersion", val: "1"},
0000000000000000000000000000000000000000;;			{accessor: "Generation", val: int64(5)},
0000000000000000000000000000000000000000;;			{accessor: "SelfLink", val: "/foo"},
0000000000000000000000000000000000000000;;			// TODO: Handle timestamps, which are being marshalled as UTC and
0000000000000000000000000000000000000000;;			// unmarshalled as Local.
0000000000000000000000000000000000000000;;			// https://github.com/kubernetes/kubernetes/issues/21402
0000000000000000000000000000000000000000;;			// {accessor: "CreationTimestamp", val: someTime},
0000000000000000000000000000000000000000;;			// {accessor: "DeletionTimestamp", val: someTimeP},
0000000000000000000000000000000000000000;;			{accessor: "DeletionTimestamp", nilVal: reflect.ValueOf((*metav1.Time)(nil))},
0000000000000000000000000000000000000000;;			{accessor: "DeletionGracePeriodSeconds", val: int64p(10)},
0000000000000000000000000000000000000000;;			{accessor: "DeletionGracePeriodSeconds", val: int64p(0)},
0000000000000000000000000000000000000000;;			{accessor: "DeletionGracePeriodSeconds", nilVal: reflect.ValueOf((*int64)(nil))},
0000000000000000000000000000000000000000;;			{accessor: "Labels", val: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;			{accessor: "Annotations", val: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;			{accessor: "Initializers", val: &metav1.Initializers{Pending: []metav1.Initializer{{Name: "foo"}}}},
0000000000000000000000000000000000000000;;			{accessor: "Initializers", val: &metav1.Initializers{}},
0000000000000000000000000000000000000000;;			{accessor: "Initializers", nilVal: reflect.ValueOf((*metav1.Initializers)(nil))},
0000000000000000000000000000000000000000;;			{accessor: "Finalizers", val: []string{"foo"}},
0000000000000000000000000000000000000000;;			{accessor: "OwnerReferences", val: []metav1.OwnerReference{{Name: "foo"}}},
0000000000000000000000000000000000000000;;			{accessor: "ClusterName", val: "foo"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("evaluating test %d (%s)", i, test.accessor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u := &unstructured.Unstructured{}
0000000000000000000000000000000000000000;;			setter := reflect.ValueOf(u).MethodByName("Set" + test.accessor)
0000000000000000000000000000000000000000;;			getter := reflect.ValueOf(u).MethodByName("Get" + test.accessor)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			args := []reflect.Value{}
0000000000000000000000000000000000000000;;			if test.val != nil {
0000000000000000000000000000000000000000;;				args = append(args, reflect.ValueOf(test.val))
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				args = append(args, test.nilVal)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			setter.Call(args)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ret := getter.Call([]reflect.Value{})
0000000000000000000000000000000000000000;;			actual := ret[0].Interface()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var expected interface{}
0000000000000000000000000000000000000000;;			if test.val != nil {
0000000000000000000000000000000000000000;;				expected = test.val
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				expected = test.nilVal.Interface()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if e, a := expected, actual; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Fatalf("%s: expected %v (%T), got %v (%T)", test.accessor, e, e, a, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
