0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
02458d7e94519a20b669f19441a69b48a1b79291;pkg/conversion/unversioned_test.go[pkg/conversion/unversioned_test.go][staging/src/k8s.io/apimachinery/pkg/test/runtime_unversioned_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: Ideally we should create the necessary package structure in e.g.,
0000000000000000000000000000000000000000;;		// pkg/conversion/test/... instead of importing pkg/api here.
0000000000000000000000000000000000000000;;		apitesting "k8s.io/apimachinery/pkg/api/testing"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestV1EncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		status := &metav1.Status{
0000000000000000000000000000000000000000;;			Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;			Code:    200,
0000000000000000000000000000000000000000;;			Reason:  metav1.StatusReasonUnknown,
0000000000000000000000000000000000000000;;			Message: "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, codecs := TestScheme()
0000000000000000000000000000000000000000;;		codec := apitesting.TestCodec(codecs, schema.GroupVersion{Group: "", Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		encoded, err := runtime.Encode(codec, status)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeMeta := metav1.TypeMeta{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(encoded, &typeMeta); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.Kind != "Status" {
0000000000000000000000000000000000000000;;			t.Errorf("Kind is not set to \"Status\". Got %v", string(encoded))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.APIVersion != "v1" {
0000000000000000000000000000000000000000;;			t.Errorf("APIVersion is not set to \"v1\". Got %v", string(encoded))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoded, err := runtime.Decode(codec, encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(status, decoded) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, got: %v", status, decoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestExperimentalEncodeDecodeStatus(t *testing.T) {
0000000000000000000000000000000000000000;;		status := &metav1.Status{
0000000000000000000000000000000000000000;;			Status:  metav1.StatusFailure,
0000000000000000000000000000000000000000;;			Code:    200,
0000000000000000000000000000000000000000;;			Reason:  metav1.StatusReasonUnknown,
0000000000000000000000000000000000000000;;			Message: "",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: caesarxuchao: use the testapi.Extensions.Codec() once the PR that
0000000000000000000000000000000000000000;;		// moves experimental from v1 to v1beta1 got merged.
0000000000000000000000000000000000000000;;		_, codecs := TestScheme()
0000000000000000000000000000000000000000;;		expCodec := apitesting.TestCodec(codecs, schema.GroupVersion{Group: "", Version: runtime.APIVersionInternal})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		encoded, err := runtime.Encode(expCodec, status)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		typeMeta := metav1.TypeMeta{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(encoded, &typeMeta); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.Kind != "Status" {
0000000000000000000000000000000000000000;;			t.Errorf("Kind is not set to \"Status\". Got %s", encoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if typeMeta.APIVersion != "v1" {
0000000000000000000000000000000000000000;;			t.Errorf("APIVersion is not set to \"\". Got %s", encoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		decoded, err := runtime.Decode(expCodec, encoded)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(status, decoded) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %v, got: %v", status, decoded)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
