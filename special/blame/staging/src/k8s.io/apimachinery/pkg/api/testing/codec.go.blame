0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
f94423c99f17717423ba03eca7b1884260ebdf7c;staging/src/k8s.io/apimachinery/pkg/api/testing/register.go[staging/src/k8s.io/apimachinery/pkg/api/testing/register.go][staging/src/k8s.io/apimachinery/pkg/api/testing/codec.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"mime"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		runtimeserializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/recognizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		testCodecMediaType        string
0000000000000000000000000000000000000000;;		testStorageCodecMediaType string
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestCodec returns the codec for the API version to test against, as set by the
0000000000000000000000000000000000000000;;	// KUBE_TEST_API_TYPE env var.
0000000000000000000000000000000000000000;;	func TestCodec(codecs runtimeserializer.CodecFactory, gvs ...schema.GroupVersion) runtime.Codec {
0000000000000000000000000000000000000000;;		if len(testCodecMediaType) != 0 {
0000000000000000000000000000000000000000;;			serializerInfo, ok := runtime.SerializerInfoForMediaType(codecs.SupportedMediaTypes(), testCodecMediaType)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				panic(fmt.Sprintf("no serializer for %s", testCodecMediaType))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return codecs.CodecForVersions(serializerInfo.Serializer, codecs.UniversalDeserializer(), schema.GroupVersions(gvs), nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return codecs.LegacyCodec(gvs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestStorageCodec returns the codec for the API version to test against used in storage, as set by the
0000000000000000000000000000000000000000;;	// KUBE_TEST_API_STORAGE_TYPE env var.
0000000000000000000000000000000000000000;;	func TestStorageCodec(codecs runtimeserializer.CodecFactory, gvs ...schema.GroupVersion) runtime.Codec {
0000000000000000000000000000000000000000;;		if len(testStorageCodecMediaType) != 0 {
0000000000000000000000000000000000000000;;			serializerInfo, ok := runtime.SerializerInfoForMediaType(codecs.SupportedMediaTypes(), testStorageCodecMediaType)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				panic(fmt.Sprintf("no serializer for %s", testStorageCodecMediaType))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// etcd2 only supports string data - we must wrap any result before returning
0000000000000000000000000000000000000000;;			// TODO: remove for etcd3 / make parameterizable
0000000000000000000000000000000000000000;;			serializer := serializerInfo.Serializer
0000000000000000000000000000000000000000;;			if !serializerInfo.EncodesAsText {
0000000000000000000000000000000000000000;;				serializer = runtime.NewBase64Serializer(serializer, serializer)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			decoder := recognizer.NewDecoder(serializer, codecs.UniversalDeserializer())
0000000000000000000000000000000000000000;;			return codecs.CodecForVersions(serializer, decoder, schema.GroupVersions(gvs), nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return codecs.LegacyCodec(gvs...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		if apiMediaType := os.Getenv("KUBE_TEST_API_TYPE"); len(apiMediaType) > 0 {
0000000000000000000000000000000000000000;;			testCodecMediaType, _, err = mime.ParseMediaType(apiMediaType)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if storageMediaType := os.Getenv("KUBE_TEST_API_STORAGE_TYPE"); len(storageMediaType) > 0 {
0000000000000000000000000000000000000000;;			testStorageCodecMediaType, _, err = mime.ParseMediaType(storageMediaType)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
