0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c5f9c25a8db30e943c73e90b734a5dad8868cf1e;pkg/api/validation/genericvalidation/validation_test.go[pkg/api/validation/genericvalidation/validation_test.go][staging/src/k8s.io/apimachinery/pkg/api/validation/objectmeta_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package validation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxLengthErrMsg = "must be no more than"
0000000000000000000000000000000000000000;;		namePartErrMsg  = "name part must consist of"
0000000000000000000000000000000000000000;;		nameErrMsg      = "a qualified name must consist of"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure custom name functions are allowed
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaCustomName(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateObjectMeta(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", GenerateName: "foo"},
0000000000000000000000000000000000000000;;			false,
0000000000000000000000000000000000000000;;			func(s string, prefix bool) []string {
0000000000000000000000000000000000000000;;				if s == "test" {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return []string{"name-gen"}
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			field.NewPath("field"))
0000000000000000000000000000000000000000;;		if len(errs) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(errs[0].Error(), "name-gen") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error message: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure namespace names follow dns label format
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaNamespaces(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateObjectMeta(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", Namespace: "foo.bar"},
0000000000000000000000000000000000000000;;			true,
0000000000000000000000000000000000000000;;			func(s string, prefix bool) []string {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			field.NewPath("field"))
0000000000000000000000000000000000000000;;		if len(errs) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(errs[0].Error(), `Invalid value: "foo.bar"`) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error message: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		maxLength := 63
0000000000000000000000000000000000000000;;		letters := []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
0000000000000000000000000000000000000000;;		b := make([]rune, maxLength+1)
0000000000000000000000000000000000000000;;		for i := range b {
0000000000000000000000000000000000000000;;			b[i] = letters[rand.Intn(len(letters))]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		errs = ValidateObjectMeta(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", Namespace: string(b)},
0000000000000000000000000000000000000000;;			true,
0000000000000000000000000000000000000000;;			func(s string, prefix bool) []string {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			field.NewPath("field"))
0000000000000000000000000000000000000000;;		if len(errs) != 2 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(errs[0].Error(), "Invalid value") || !strings.Contains(errs[1].Error(), "Invalid value") {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error message: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaOwnerReferences(t *testing.T) {
0000000000000000000000000000000000000000;;		trueVar := true
0000000000000000000000000000000000000000;;		falseVar := false
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			description          string
0000000000000000000000000000000000000000;;			ownerReferences      []metav1.OwnerReference
0000000000000000000000000000000000000000;;			expectError          bool
0000000000000000000000000000000000000000;;			expectedErrorMessage string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "simple success - third party extension.",
0000000000000000000000000000000000000000;;				ownerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError:          false,
0000000000000000000000000000000000000000;;				expectedErrorMessage: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "simple failures - event shouldn't be set as an owner",
0000000000000000000000000000000000000000;;				ownerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "v1",
0000000000000000000000000000000000000000;;						Kind:       "Event",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError:          true,
0000000000000000000000000000000000000000;;				expectedErrorMessage: "is disallowed from being an owner",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "simple controller ref success - one reference with Controller set",
0000000000000000000000000000000000000000;;				ownerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "1",
0000000000000000000000000000000000000000;;						Controller: &falseVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "2",
0000000000000000000000000000000000000000;;						Controller: &trueVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "3",
0000000000000000000000000000000000000000;;						Controller: &falseVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "4",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError:          false,
0000000000000000000000000000000000000000;;				expectedErrorMessage: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				description: "simple controller ref failure - two references with Controller set",
0000000000000000000000000000000000000000;;				ownerReferences: []metav1.OwnerReference{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "1",
0000000000000000000000000000000000000000;;						Controller: &falseVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "2",
0000000000000000000000000000000000000000;;						Controller: &trueVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "3",
0000000000000000000000000000000000000000;;						Controller: &trueVar,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						APIVersion: "customresourceVersion",
0000000000000000000000000000000000000000;;						Kind:       "customresourceKind",
0000000000000000000000000000000000000000;;						Name:       "name",
0000000000000000000000000000000000000000;;						UID:        "4",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectError:          true,
0000000000000000000000000000000000000000;;				expectedErrorMessage: "Only one reference can have Controller set to true",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range testCases {
0000000000000000000000000000000000000000;;			errs := ValidateObjectMeta(
0000000000000000000000000000000000000000;;				&metav1.ObjectMeta{Name: "test", Namespace: "test", OwnerReferences: tc.ownerReferences},
0000000000000000000000000000000000000000;;				true,
0000000000000000000000000000000000000000;;				func(s string, prefix bool) []string {
0000000000000000000000000000000000000000;;					return nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != 0 && !tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v in test case %v", errs, tc.description)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) == 0 && tc.expectError {
0000000000000000000000000000000000000000;;				t.Errorf("expect error in test case %v", tc.description)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(errs) != 0 && !strings.Contains(errs[0].Error(), tc.expectedErrorMessage) {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error message: %v in test case %v", errs, tc.description)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaUpdateIgnoresCreationTimestamp(t *testing.T) {
0000000000000000000000000000000000000000;;		if errs := ValidateObjectMetaUpdate(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1", CreationTimestamp: metav1.NewTime(time.Unix(10, 0))},
0000000000000000000000000000000000000000;;			field.NewPath("field"),
0000000000000000000000000000000000000000;;		); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateObjectMetaUpdate(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1", CreationTimestamp: metav1.NewTime(time.Unix(10, 0))},
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;			field.NewPath("field"),
0000000000000000000000000000000000000000;;		); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs := ValidateObjectMetaUpdate(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1", CreationTimestamp: metav1.NewTime(time.Unix(10, 0))},
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", ResourceVersion: "1", CreationTimestamp: metav1.NewTime(time.Unix(11, 0))},
0000000000000000000000000000000000000000;;			field.NewPath("field"),
0000000000000000000000000000000000000000;;		); len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateFinalizersUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Old         metav1.ObjectMeta
0000000000000000000000000000000000000000;;			New         metav1.ObjectMeta
0000000000000000000000000000000000000000;;			ExpectedErr string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"invalid adding finalizers": {
0000000000000000000000000000000000000000;;				Old:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/a"}},
0000000000000000000000000000000000000000;;				New:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/a", "y/b"}},
0000000000000000000000000000000000000000;;				ExpectedErr: "y/b",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid changing finalizers": {
0000000000000000000000000000000000000000;;				Old:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/a"}},
0000000000000000000000000000000000000000;;				New:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/b"}},
0000000000000000000000000000000000000000;;				ExpectedErr: "x/b",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid removing finalizers": {
0000000000000000000000000000000000000000;;				Old:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/a", "y/b"}},
0000000000000000000000000000000000000000;;				New:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &metav1.Time{}, Finalizers: []string{"x/a"}},
0000000000000000000000000000000000000000;;				ExpectedErr: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid adding finalizers for objects not being deleted": {
0000000000000000000000000000000000000000;;				Old:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Finalizers: []string{"x/a"}},
0000000000000000000000000000000000000000;;				New:         metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Finalizers: []string{"x/a", "y/b"}},
0000000000000000000000000000000000000000;;				ExpectedErr: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, tc := range testcases {
0000000000000000000000000000000000000000;;			errs := ValidateObjectMetaUpdate(&tc.New, &tc.Old, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				if len(tc.ExpectedErr) != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("case: %q, expected error to contain %q", name, tc.ExpectedErr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if e, a := tc.ExpectedErr, errs.ToAggregate().Error(); !strings.Contains(a, e) {
0000000000000000000000000000000000000000;;				t.Errorf("case: %q, expected error to contain %q, got error %q", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateFinalizersPreventConflictingFinalizers(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			ObjectMeta  metav1.ObjectMeta
0000000000000000000000000000000000000000;;			ExpectedErr string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"conflicting finalizers": {
0000000000000000000000000000000000000000;;				ObjectMeta:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Finalizers: []string{metav1.FinalizerOrphanDependents, metav1.FinalizerDeleteDependents}},
0000000000000000000000000000000000000000;;				ExpectedErr: "cannot be both set",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for name, tc := range testcases {
0000000000000000000000000000000000000000;;			errs := ValidateObjectMeta(&tc.ObjectMeta, false, NameIsDNSSubdomain, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				if len(tc.ExpectedErr) != 0 {
0000000000000000000000000000000000000000;;					t.Errorf("case: %q, expected error to contain %q", name, tc.ExpectedErr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if e, a := tc.ExpectedErr, errs.ToAggregate().Error(); !strings.Contains(a, e) {
0000000000000000000000000000000000000000;;				t.Errorf("case: %q, expected error to contain %q, got error %q", name, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaUpdatePreventsDeletionFieldMutation(t *testing.T) {
0000000000000000000000000000000000000000;;		now := metav1.NewTime(time.Unix(1000, 0).UTC())
0000000000000000000000000000000000000000;;		later := metav1.NewTime(time.Unix(2000, 0).UTC())
0000000000000000000000000000000000000000;;		gracePeriodShort := int64(30)
0000000000000000000000000000000000000000;;		gracePeriodLong := int64(40)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Old          metav1.ObjectMeta
0000000000000000000000000000000000000000;;			New          metav1.ObjectMeta
0000000000000000000000000000000000000000;;			ExpectedNew  metav1.ObjectMeta
0000000000000000000000000000000000000000;;			ExpectedErrs []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"valid without deletion fields": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid with deletion fields": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now, DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now, DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now, DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"invalid set deletionTimestamp": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{"field.deletionTimestamp: Invalid value: 1970-01-01 00:16:40 +0000 UTC: field is immutable; may only be changed via deletion"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid clear deletionTimestamp": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{}, // no errors, validation copies the old value
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid change deletionTimestamp": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &later},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionTimestamp: &now},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{}, // no errors, validation copies the old value
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"invalid set deletionGracePeriodSeconds": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{"field.deletionGracePeriodSeconds: Invalid value: 30: field is immutable; may only be changed via deletion"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid clear deletionGracePeriodSeconds": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1"},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{}, // no errors, validation copies the old value
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"invalid change deletionGracePeriodSeconds": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodShort},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodLong},
0000000000000000000000000000000000000000;;				ExpectedNew:  metav1.ObjectMeta{Name: "test", ResourceVersion: "1", DeletionGracePeriodSeconds: &gracePeriodLong},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{"field.deletionGracePeriodSeconds: Invalid value: 40: field is immutable; may only be changed via deletion"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			errs := ValidateObjectMetaUpdate(&tc.New, &tc.Old, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != len(tc.ExpectedErrs) {
0000000000000000000000000000000000000000;;				t.Logf("%s: Expected: %#v", k, tc.ExpectedErrs)
0000000000000000000000000000000000000000;;				t.Logf("%s: Got: %#v", k, errs)
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %d errors, got %d", k, len(tc.ExpectedErrs), len(errs))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errs {
0000000000000000000000000000000000000000;;				if errs[i].Error() != tc.ExpectedErrs[i] {
0000000000000000000000000000000000000000;;					t.Errorf("%s: error #%d: expected %q, got %q", k, i, tc.ExpectedErrs[i], errs[i].Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(tc.New, tc.ExpectedNew) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: Expected after validation:\n%#v\ngot\n%#v", k, tc.ExpectedNew, tc.New)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestObjectMetaGenerationUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Old          metav1.ObjectMeta
0000000000000000000000000000000000000000;;			New          metav1.ObjectMeta
0000000000000000000000000000000000000000;;			ExpectedErrs []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"invalid generation change - decremented": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 5},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 4},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{"field.generation: Invalid value: 4: must not be decremented"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid generation change - incremented by one": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 1},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 2},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid generation field - not updated": {
0000000000000000000000000000000000000000;;				Old:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 5},
0000000000000000000000000000000000000000;;				New:          metav1.ObjectMeta{Name: "test", ResourceVersion: "1", Generation: 5},
0000000000000000000000000000000000000000;;				ExpectedErrs: []string{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			errList := []string{}
0000000000000000000000000000000000000000;;			errs := ValidateObjectMetaUpdate(&tc.New, &tc.Old, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != len(tc.ExpectedErrs) {
0000000000000000000000000000000000000000;;				t.Logf("%s: Expected: %#v", k, tc.ExpectedErrs)
0000000000000000000000000000000000000000;;				for _, err := range errs {
0000000000000000000000000000000000000000;;					errList = append(errList, err.Error())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t.Logf("%s: Got: %#v", k, errList)
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected %d errors, got %d", k, len(tc.ExpectedErrs), len(errs))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for i := range errList {
0000000000000000000000000000000000000000;;				if errList[i] != tc.ExpectedErrs[i] {
0000000000000000000000000000000000000000;;					t.Errorf("%s: error #%d: expected %q, got %q", k, i, tc.ExpectedErrs[i], errList[i])
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ensure trailing slash is allowed in generate name
0000000000000000000000000000000000000000;;	func TestValidateObjectMetaTrimsTrailingSlash(t *testing.T) {
0000000000000000000000000000000000000000;;		errs := ValidateObjectMeta(
0000000000000000000000000000000000000000;;			&metav1.ObjectMeta{Name: "test", GenerateName: "foo-"},
0000000000000000000000000000000000000000;;			false,
0000000000000000000000000000000000000000;;			NameIsDNSSubdomain,
0000000000000000000000000000000000000000;;			field.NewPath("field"))
0000000000000000000000000000000000000000;;		if len(errs) != 0 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateAnnotations(t *testing.T) {
0000000000000000000000000000000000000000;;		successCases := []map[string]string{
0000000000000000000000000000000000000000;;			{"simple": "bar"},
0000000000000000000000000000000000000000;;			{"now-with-dashes": "bar"},
0000000000000000000000000000000000000000;;			{"1-starts-with-num": "bar"},
0000000000000000000000000000000000000000;;			{"1234": "bar"},
0000000000000000000000000000000000000000;;			{"simple/simple": "bar"},
0000000000000000000000000000000000000000;;			{"now-with-dashes/simple": "bar"},
0000000000000000000000000000000000000000;;			{"now-with-dashes/now-with-dashes": "bar"},
0000000000000000000000000000000000000000;;			{"now.with.dots/simple": "bar"},
0000000000000000000000000000000000000000;;			{"now-with.dashes-and.dots/simple": "bar"},
0000000000000000000000000000000000000000;;			{"1-num.2-num/3-num": "bar"},
0000000000000000000000000000000000000000;;			{"1234/5678": "bar"},
0000000000000000000000000000000000000000;;			{"1.2.3.4/5678": "bar"},
0000000000000000000000000000000000000000;;			{"UpperCase123": "bar"},
0000000000000000000000000000000000000000;;			{"a": strings.Repeat("b", totalAnnotationSizeLimitB-1)},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"a": strings.Repeat("b", totalAnnotationSizeLimitB/2-1),
0000000000000000000000000000000000000000;;				"c": strings.Repeat("d", totalAnnotationSizeLimitB/2-1),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range successCases {
0000000000000000000000000000000000000000;;			errs := ValidateAnnotations(successCases[i], field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d] expected success, got %#v", i, errs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		nameErrorCases := []struct {
0000000000000000000000000000000000000000;;			annotations map[string]string
0000000000000000000000000000000000000000;;			expect      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{map[string]string{"nospecialchars^=@": "bar"}, namePartErrMsg},
0000000000000000000000000000000000000000;;			{map[string]string{"cantendwithadash-": "bar"}, namePartErrMsg},
0000000000000000000000000000000000000000;;			{map[string]string{"only/one/slash": "bar"}, nameErrMsg},
0000000000000000000000000000000000000000;;			{map[string]string{strings.Repeat("a", 254): "bar"}, maxLengthErrMsg},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range nameErrorCases {
0000000000000000000000000000000000000000;;			errs := ValidateAnnotations(nameErrorCases[i].annotations, field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != 1 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d]: expected failure", i)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if !strings.Contains(errs[0].Detail, nameErrorCases[i].expect) {
0000000000000000000000000000000000000000;;					t.Errorf("case[%d]: error details do not include %q: %q", i, nameErrorCases[i].expect, errs[0].Detail)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		totalSizeErrorCases := []map[string]string{
0000000000000000000000000000000000000000;;			{"a": strings.Repeat("b", totalAnnotationSizeLimitB)},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"a": strings.Repeat("b", totalAnnotationSizeLimitB/2),
0000000000000000000000000000000000000000;;				"c": strings.Repeat("d", totalAnnotationSizeLimitB/2),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range totalSizeErrorCases {
0000000000000000000000000000000000000000;;			errs := ValidateAnnotations(totalSizeErrorCases[i], field.NewPath("field"))
0000000000000000000000000000000000000000;;			if len(errs) != 1 {
0000000000000000000000000000000000000000;;				t.Errorf("case[%d] expected failure", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
