0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package meta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		metav1alpha1 "k8s.io/apimachinery/pkg/apis/meta/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errNotList is returned when an object implements the Object style interfaces but not the List style
0000000000000000000000000000000000000000;;	// interfaces.
0000000000000000000000000000000000000000;;	var errNotList = fmt.Errorf("object does not implement the List interfaces")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListAccessor returns a List interface for the provided object or an error if the object does
0000000000000000000000000000000000000000;;	// not provide List.
0000000000000000000000000000000000000000;;	// IMPORTANT: Objects are a superset of lists, so all Objects return List metadata. Do not use this
0000000000000000000000000000000000000000;;	// check to determine whether an object *is* a List.
0000000000000000000000000000000000000000;;	// TODO: return bool instead of error
0000000000000000000000000000000000000000;;	func ListAccessor(obj interface{}) (List, error) {
0000000000000000000000000000000000000000;;		switch t := obj.(type) {
0000000000000000000000000000000000000000;;		case List:
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		case metav1.List:
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		case ListMetaAccessor:
0000000000000000000000000000000000000000;;			if m := t.GetListMeta(); m != nil {
0000000000000000000000000000000000000000;;				return m, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, errNotList
0000000000000000000000000000000000000000;;		case metav1.ListMetaAccessor:
0000000000000000000000000000000000000000;;			if m := t.GetListMeta(); m != nil {
0000000000000000000000000000000000000000;;				return m, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, errNotList
0000000000000000000000000000000000000000;;		case metav1.Object:
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		case metav1.ObjectMetaAccessor:
0000000000000000000000000000000000000000;;			if m := t.GetObjectMeta(); m != nil {
0000000000000000000000000000000000000000;;				return m, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, errNotList
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errNotList
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errNotObject is returned when an object implements the List style interfaces but not the Object style
0000000000000000000000000000000000000000;;	// interfaces.
0000000000000000000000000000000000000000;;	var errNotObject = fmt.Errorf("object does not implement the Object interfaces")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Accessor takes an arbitrary object pointer and returns meta.Interface.
0000000000000000000000000000000000000000;;	// obj must be a pointer to an API type. An error is returned if the minimum
0000000000000000000000000000000000000000;;	// required fields are missing. Fields that are not required return the default
0000000000000000000000000000000000000000;;	// value and are a no-op if set.
0000000000000000000000000000000000000000;;	// TODO: return bool instead of error
0000000000000000000000000000000000000000;;	func Accessor(obj interface{}) (metav1.Object, error) {
0000000000000000000000000000000000000000;;		switch t := obj.(type) {
0000000000000000000000000000000000000000;;		case metav1.Object:
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		case metav1.ObjectMetaAccessor:
0000000000000000000000000000000000000000;;			if m := t.GetObjectMeta(); m != nil {
0000000000000000000000000000000000000000;;				return m, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, errNotObject
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errNotObject
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsPartialObjectMetadata takes the metav1 interface and returns a partial object.
0000000000000000000000000000000000000000;;	// TODO: consider making this solely a conversion action.
0000000000000000000000000000000000000000;;	func AsPartialObjectMetadata(m metav1.Object) *metav1alpha1.PartialObjectMetadata {
0000000000000000000000000000000000000000;;		switch t := m.(type) {
0000000000000000000000000000000000000000;;		case *metav1.ObjectMeta:
0000000000000000000000000000000000000000;;			return &metav1alpha1.PartialObjectMetadata{ObjectMeta: *t}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return &metav1alpha1.PartialObjectMetadata{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name:                       m.GetName(),
0000000000000000000000000000000000000000;;					GenerateName:               m.GetGenerateName(),
0000000000000000000000000000000000000000;;					Namespace:                  m.GetNamespace(),
0000000000000000000000000000000000000000;;					SelfLink:                   m.GetSelfLink(),
0000000000000000000000000000000000000000;;					UID:                        m.GetUID(),
0000000000000000000000000000000000000000;;					ResourceVersion:            m.GetResourceVersion(),
0000000000000000000000000000000000000000;;					Generation:                 m.GetGeneration(),
0000000000000000000000000000000000000000;;					CreationTimestamp:          m.GetCreationTimestamp(),
0000000000000000000000000000000000000000;;					DeletionTimestamp:          m.GetDeletionTimestamp(),
0000000000000000000000000000000000000000;;					DeletionGracePeriodSeconds: m.GetDeletionGracePeriodSeconds(),
0000000000000000000000000000000000000000;;					Labels:          m.GetLabels(),
0000000000000000000000000000000000000000;;					Annotations:     m.GetAnnotations(),
0000000000000000000000000000000000000000;;					OwnerReferences: m.GetOwnerReferences(),
0000000000000000000000000000000000000000;;					Finalizers:      m.GetFinalizers(),
0000000000000000000000000000000000000000;;					ClusterName:     m.GetClusterName(),
0000000000000000000000000000000000000000;;					Initializers:    m.GetInitializers(),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypeAccessor returns an interface that allows retrieving and modifying the APIVersion
0000000000000000000000000000000000000000;;	// and Kind of an in-memory internal object.
0000000000000000000000000000000000000000;;	// TODO: this interface is used to test code that does not have ObjectMeta or ListMeta
0000000000000000000000000000000000000000;;	// in round tripping (objects which can use apiVersion/kind, but do not fit the Kube
0000000000000000000000000000000000000000;;	// api conventions).
0000000000000000000000000000000000000000;;	func TypeAccessor(obj interface{}) (Type, error) {
0000000000000000000000000000000000000000;;		if typed, ok := obj.(runtime.Object); ok {
0000000000000000000000000000000000000000;;			return objectAccessor{typed}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, err := conversion.EnforcePtr(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t := v.Type()
0000000000000000000000000000000000000000;;		if v.Kind() != reflect.Struct {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("expected struct, but got %v: %v (%#v)", v.Kind(), t, v.Interface())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		typeMeta := v.FieldByName("TypeMeta")
0000000000000000000000000000000000000000;;		if !typeMeta.IsValid() {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("struct %v lacks embedded TypeMeta type", t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		a := &genericAccessor{}
0000000000000000000000000000000000000000;;		if err := extractFromTypeMeta(typeMeta, a); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unable to find type fields on %#v: %v", typeMeta, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return a, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type objectAccessor struct {
0000000000000000000000000000000000000000;;		runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj objectAccessor) GetKind() string {
0000000000000000000000000000000000000000;;		return obj.GetObjectKind().GroupVersionKind().Kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj objectAccessor) SetKind(kind string) {
0000000000000000000000000000000000000000;;		gvk := obj.GetObjectKind().GroupVersionKind()
0000000000000000000000000000000000000000;;		gvk.Kind = kind
0000000000000000000000000000000000000000;;		obj.GetObjectKind().SetGroupVersionKind(gvk)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj objectAccessor) GetAPIVersion() string {
0000000000000000000000000000000000000000;;		return obj.GetObjectKind().GroupVersionKind().GroupVersion().String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj objectAccessor) SetAPIVersion(version string) {
0000000000000000000000000000000000000000;;		gvk := obj.GetObjectKind().GroupVersionKind()
0000000000000000000000000000000000000000;;		gv, err := schema.ParseGroupVersion(version)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			gv = schema.GroupVersion{Version: version}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gvk.Group, gvk.Version = gv.Group, gv.Version
0000000000000000000000000000000000000000;;		obj.GetObjectKind().SetGroupVersionKind(gvk)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAccessor returns a MetadataAccessor that can retrieve
0000000000000000000000000000000000000000;;	// or manipulate resource version on objects derived from core API
0000000000000000000000000000000000000000;;	// metadata concepts.
0000000000000000000000000000000000000000;;	func NewAccessor() MetadataAccessor {
0000000000000000000000000000000000000000;;		return resourceAccessor{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resourceAccessor implements ResourceVersioner and SelfLinker.
0000000000000000000000000000000000000000;;	type resourceAccessor struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) Kind(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		return objectAccessor{obj}.GetKind(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetKind(obj runtime.Object, kind string) error {
0000000000000000000000000000000000000000;;		objectAccessor{obj}.SetKind(kind)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) APIVersion(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		return objectAccessor{obj}.GetAPIVersion(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetAPIVersion(obj runtime.Object, version string) error {
0000000000000000000000000000000000000000;;		objectAccessor{obj}.SetAPIVersion(version)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) Namespace(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetNamespace(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetNamespace(obj runtime.Object, namespace string) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetNamespace(namespace)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) Name(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetName(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetName(obj runtime.Object, name string) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetName(name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) GenerateName(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetGenerateName(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetGenerateName(obj runtime.Object, name string) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetGenerateName(name)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) UID(obj runtime.Object) (types.UID, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetUID(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetUID(obj runtime.Object, uid types.UID) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetUID(uid)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SelfLink(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := ListAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetSelfLink(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetSelfLink(obj runtime.Object, selfLink string) error {
0000000000000000000000000000000000000000;;		accessor, err := ListAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetSelfLink(selfLink)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) Labels(obj runtime.Object) (map[string]string, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetLabels(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetLabels(obj runtime.Object, labels map[string]string) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetLabels(labels)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) Annotations(obj runtime.Object) (map[string]string, error) {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetAnnotations(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetAnnotations(obj runtime.Object, annotations map[string]string) error {
0000000000000000000000000000000000000000;;		accessor, err := Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetAnnotations(annotations)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) ResourceVersion(obj runtime.Object) (string, error) {
0000000000000000000000000000000000000000;;		accessor, err := ListAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return accessor.GetResourceVersion(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (resourceAccessor) SetResourceVersion(obj runtime.Object, version string) error {
0000000000000000000000000000000000000000;;		accessor, err := ListAccessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		accessor.SetResourceVersion(version)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// extractFromOwnerReference extracts v to o. v is the OwnerReferences field of an object.
0000000000000000000000000000000000000000;;	func extractFromOwnerReference(v reflect.Value, o *metav1.OwnerReference) error {
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "APIVersion", &o.APIVersion); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "Kind", &o.Kind); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "Name", &o.Name); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "UID", &o.UID); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var controllerPtr *bool
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "Controller", &controllerPtr); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if controllerPtr != nil {
0000000000000000000000000000000000000000;;			controller := *controllerPtr
0000000000000000000000000000000000000000;;			o.Controller = &controller
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var blockOwnerDeletionPtr *bool
0000000000000000000000000000000000000000;;		if err := runtime.Field(v, "BlockOwnerDeletion", &blockOwnerDeletionPtr); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if blockOwnerDeletionPtr != nil {
0000000000000000000000000000000000000000;;			block := *blockOwnerDeletionPtr
0000000000000000000000000000000000000000;;			o.BlockOwnerDeletion = &block
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// setOwnerReference sets v to o. v is the OwnerReferences field of an object.
0000000000000000000000000000000000000000;;	func setOwnerReference(v reflect.Value, o *metav1.OwnerReference) error {
0000000000000000000000000000000000000000;;		if err := runtime.SetField(o.APIVersion, v, "APIVersion"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.SetField(o.Kind, v, "Kind"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.SetField(o.Name, v, "Name"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.SetField(o.UID, v, "UID"); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.Controller != nil {
0000000000000000000000000000000000000000;;			controller := *(o.Controller)
0000000000000000000000000000000000000000;;			if err := runtime.SetField(&controller, v, "Controller"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if o.BlockOwnerDeletion != nil {
0000000000000000000000000000000000000000;;			block := *(o.BlockOwnerDeletion)
0000000000000000000000000000000000000000;;			if err := runtime.SetField(&block, v, "BlockOwnerDeletion"); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// genericAccessor contains pointers to strings that can modify an arbitrary
0000000000000000000000000000000000000000;;	// struct and implements the Accessor interface.
0000000000000000000000000000000000000000;;	type genericAccessor struct {
0000000000000000000000000000000000000000;;		namespace         *string
0000000000000000000000000000000000000000;;		name              *string
0000000000000000000000000000000000000000;;		generateName      *string
0000000000000000000000000000000000000000;;		uid               *types.UID
0000000000000000000000000000000000000000;;		apiVersion        *string
0000000000000000000000000000000000000000;;		kind              *string
0000000000000000000000000000000000000000;;		resourceVersion   *string
0000000000000000000000000000000000000000;;		selfLink          *string
0000000000000000000000000000000000000000;;		creationTimestamp *metav1.Time
0000000000000000000000000000000000000000;;		deletionTimestamp **metav1.Time
0000000000000000000000000000000000000000;;		labels            *map[string]string
0000000000000000000000000000000000000000;;		annotations       *map[string]string
0000000000000000000000000000000000000000;;		ownerReferences   reflect.Value
0000000000000000000000000000000000000000;;		finalizers        *[]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetNamespace() string {
0000000000000000000000000000000000000000;;		if a.namespace == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetNamespace(namespace string) {
0000000000000000000000000000000000000000;;		if a.namespace == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a.namespace = namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetName() string {
0000000000000000000000000000000000000000;;		if a.name == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetName(name string) {
0000000000000000000000000000000000000000;;		if a.name == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a.name = name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetGenerateName() string {
0000000000000000000000000000000000000000;;		if a.generateName == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.generateName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetGenerateName(generateName string) {
0000000000000000000000000000000000000000;;		if a.generateName == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a.generateName = generateName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetUID() types.UID {
0000000000000000000000000000000000000000;;		if a.uid == nil {
0000000000000000000000000000000000000000;;			return ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.uid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetUID(uid types.UID) {
0000000000000000000000000000000000000000;;		if a.uid == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a.uid = uid
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetAPIVersion() string {
0000000000000000000000000000000000000000;;		return *a.apiVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetAPIVersion(version string) {
0000000000000000000000000000000000000000;;		*a.apiVersion = version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetKind() string {
0000000000000000000000000000000000000000;;		return *a.kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetKind(kind string) {
0000000000000000000000000000000000000000;;		*a.kind = kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetResourceVersion() string {
0000000000000000000000000000000000000000;;		return *a.resourceVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetResourceVersion(version string) {
0000000000000000000000000000000000000000;;		*a.resourceVersion = version
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetSelfLink() string {
0000000000000000000000000000000000000000;;		return *a.selfLink
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetSelfLink(selfLink string) {
0000000000000000000000000000000000000000;;		*a.selfLink = selfLink
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetCreationTimestamp() metav1.Time {
0000000000000000000000000000000000000000;;		return *a.creationTimestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetCreationTimestamp(timestamp metav1.Time) {
0000000000000000000000000000000000000000;;		*a.creationTimestamp = timestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetDeletionTimestamp() *metav1.Time {
0000000000000000000000000000000000000000;;		return *a.deletionTimestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetDeletionTimestamp(timestamp *metav1.Time) {
0000000000000000000000000000000000000000;;		*a.deletionTimestamp = timestamp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetLabels() map[string]string {
0000000000000000000000000000000000000000;;		if a.labels == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.labels
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetLabels(labels map[string]string) {
0000000000000000000000000000000000000000;;		*a.labels = labels
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetAnnotations() map[string]string {
0000000000000000000000000000000000000000;;		if a.annotations == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.annotations
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetAnnotations(annotations map[string]string) {
0000000000000000000000000000000000000000;;		if a.annotations == nil {
0000000000000000000000000000000000000000;;			emptyAnnotations := make(map[string]string)
0000000000000000000000000000000000000000;;			a.annotations = &emptyAnnotations
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a.annotations = annotations
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetFinalizers() []string {
0000000000000000000000000000000000000000;;		if a.finalizers == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return *a.finalizers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetFinalizers(finalizers []string) {
0000000000000000000000000000000000000000;;		*a.finalizers = finalizers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) GetOwnerReferences() []metav1.OwnerReference {
0000000000000000000000000000000000000000;;		var ret []metav1.OwnerReference
0000000000000000000000000000000000000000;;		s := a.ownerReferences
0000000000000000000000000000000000000000;;		if s.Kind() != reflect.Ptr || s.Elem().Kind() != reflect.Slice {
0000000000000000000000000000000000000000;;			glog.Errorf("expect %v to be a pointer to slice", s)
0000000000000000000000000000000000000000;;			return ret
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s = s.Elem()
0000000000000000000000000000000000000000;;		// Set the capacity to one element greater to avoid copy if the caller later append an element.
0000000000000000000000000000000000000000;;		ret = make([]metav1.OwnerReference, s.Len(), s.Len()+1)
0000000000000000000000000000000000000000;;		for i := 0; i < s.Len(); i++ {
0000000000000000000000000000000000000000;;			if err := extractFromOwnerReference(s.Index(i), &ret[i]); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("extractFromOwnerReference failed: %v", err)
0000000000000000000000000000000000000000;;				return ret
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a genericAccessor) SetOwnerReferences(references []metav1.OwnerReference) {
0000000000000000000000000000000000000000;;		s := a.ownerReferences
0000000000000000000000000000000000000000;;		if s.Kind() != reflect.Ptr || s.Elem().Kind() != reflect.Slice {
0000000000000000000000000000000000000000;;			glog.Errorf("expect %v to be a pointer to slice", s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s = s.Elem()
0000000000000000000000000000000000000000;;		newReferences := reflect.MakeSlice(s.Type(), len(references), len(references))
0000000000000000000000000000000000000000;;		for i := 0; i < len(references); i++ {
0000000000000000000000000000000000000000;;			if err := setOwnerReference(newReferences.Index(i), &references[i]); err != nil {
0000000000000000000000000000000000000000;;				glog.Errorf("setOwnerReference failed: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Set(newReferences)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// extractFromTypeMeta extracts pointers to version and kind fields from an object
0000000000000000000000000000000000000000;;	func extractFromTypeMeta(v reflect.Value, a *genericAccessor) error {
0000000000000000000000000000000000000000;;		if err := runtime.FieldPtr(v, "APIVersion", &a.apiVersion); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := runtime.FieldPtr(v, "Kind", &a.kind); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
