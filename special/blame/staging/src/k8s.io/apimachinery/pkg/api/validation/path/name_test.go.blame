0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0024c70e189907f8dadae039ab5fb1b60c9b43aa;pkg/api/validation/name_test.go[pkg/api/validation/name_test.go][staging/src/k8s.io/apimachinery/pkg/api/validation/path/name_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatePathSegmentName(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Name        string
0000000000000000000000000000000000000000;;			Prefix      bool
0000000000000000000000000000000000000000;;			ExpectedMsg string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"empty": {
0000000000000000000000000000000000000000;;				Name:        "",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"empty,prefix": {
0000000000000000000000000000000000000000;;				Name:        "",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"valid": {
0000000000000000000000000000000000000000;;				Name:        "foo.bar.baz",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"valid,prefix": {
0000000000000000000000000000000000000000;;				Name:        "foo.bar.baz",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Make sure mixed case, non DNS subdomain characters are tolerated
0000000000000000000000000000000000000000;;			"valid complex": {
0000000000000000000000000000000000000000;;				Name:        "sha256:ABCDEF012345@ABCDEF012345",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Make sure non-ascii characters are tolerated
0000000000000000000000000000000000000000;;			"valid extended charset": {
0000000000000000000000000000000000000000;;				Name:        "Iñtërnâtiônàlizætiøn",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"dot": {
0000000000000000000000000000000000000000;;				Name:        ".",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: ".",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"dot leading": {
0000000000000000000000000000000000000000;;				Name:        ".test",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"dot,prefix": {
0000000000000000000000000000000000000000;;				Name:        ".",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"dot dot": {
0000000000000000000000000000000000000000;;				Name:        "..",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "..",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"dot dot leading": {
0000000000000000000000000000000000000000;;				Name:        "..test",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"dot dot,prefix": {
0000000000000000000000000000000000000000;;				Name:        "..",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"slash": {
0000000000000000000000000000000000000000;;				Name:        "foo/bar",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"slash,prefix": {
0000000000000000000000000000000000000000;;				Name:        "foo/bar",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "/",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"percent": {
0000000000000000000000000000000000000000;;				Name:        "foo%bar",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: "%",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"percent,prefix": {
0000000000000000000000000000000000000000;;				Name:        "foo%bar",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: "%",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			msgs := ValidatePathSegmentName(tc.Name, tc.Prefix)
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) == 0 && len(msgs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected no message, got %v", k, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) > 0 && len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error message, got none", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) > 0 && !strings.Contains(msgs[0], tc.ExpectedMsg) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected message containing %q, got %v", k, tc.ExpectedMsg, msgs[0])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateWithMultiErrors(t *testing.T) {
0000000000000000000000000000000000000000;;		testcases := map[string]struct {
0000000000000000000000000000000000000000;;			Name        string
0000000000000000000000000000000000000000;;			Prefix      bool
0000000000000000000000000000000000000000;;			ExpectedMsg []string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"slash,percent": {
0000000000000000000000000000000000000000;;				Name:        "foo//bar%",
0000000000000000000000000000000000000000;;				Prefix:      false,
0000000000000000000000000000000000000000;;				ExpectedMsg: []string{"may not contain '/'", "may not contain '%'"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"slash,percent,prefix": {
0000000000000000000000000000000000000000;;				Name:        "foo//bar%",
0000000000000000000000000000000000000000;;				Prefix:      true,
0000000000000000000000000000000000000000;;				ExpectedMsg: []string{"may not contain '/'", "may not contain '%'"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testcases {
0000000000000000000000000000000000000000;;			msgs := ValidatePathSegmentName(tc.Name, tc.Prefix)
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) == 0 && len(msgs) > 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected no message, got %v", k, msgs)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) > 0 && len(msgs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected error message, got none", k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(tc.ExpectedMsg) > 0 {
0000000000000000000000000000000000000000;;				for i := 0; i < len(tc.ExpectedMsg); i++ {
0000000000000000000000000000000000000000;;					if msgs[i] != tc.ExpectedMsg[i] {
0000000000000000000000000000000000000000;;						t.Errorf("%s: expected message containing %q, got %v", k, tc.ExpectedMsg[i], msgs[i])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
