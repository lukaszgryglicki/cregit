0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
b6f41b9b6d756eca050354b933348dec59b3bdac;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValueFuzz recursively changes all basic type values in an object. Any kind of references will not
0000000000000000000000000000000000000000;;	// be touch, i.e. the addresses of slices, maps, pointers will stay unchanged.
0000000000000000000000000000000000000000;;	func ValueFuzz(obj interface{}) {
0000000000000000000000000000000000000000;;		valueFuzz(reflect.ValueOf(obj))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func valueFuzz(obj reflect.Value) {
0000000000000000000000000000000000000000;;		switch obj.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Array:
0000000000000000000000000000000000000000;;			for i := 0; i < obj.Len(); i++ {
0000000000000000000000000000000000000000;;				valueFuzz(obj.Index(i))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Slice:
0000000000000000000000000000000000000000;;			if obj.IsNil() {
0000000000000000000000000000000000000000;;				// TODO: set non-nil value
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for i := 0; i < obj.Len(); i++ {
0000000000000000000000000000000000000000;;					valueFuzz(obj.Index(i))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Interface, reflect.Ptr:
0000000000000000000000000000000000000000;;			if obj.IsNil() {
0000000000000000000000000000000000000000;;				// TODO: set non-nil value
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				valueFuzz(obj.Elem())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Struct:
0000000000000000000000000000000000000000;;			for i, n := 0, obj.NumField(); i < n; i++ {
0000000000000000000000000000000000000000;;				valueFuzz(obj.Field(i))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Map:
0000000000000000000000000000000000000000;;			if obj.IsNil() {
0000000000000000000000000000000000000000;;				// TODO: set non-nil value
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, k := range obj.MapKeys() {
0000000000000000000000000000000000000000;;					// map values are not addressable. We need a copy.
0000000000000000000000000000000000000000;;					v := obj.MapIndex(k)
0000000000000000000000000000000000000000;;					copy := reflect.New(v.Type())
0000000000000000000000000000000000000000;;					copy.Elem().Set(v)
0000000000000000000000000000000000000000;;					valueFuzz(copy.Elem())
0000000000000000000000000000000000000000;;					obj.SetMapIndex(k, copy.Elem())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// TODO: set some new value
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case reflect.Func: // ignore, we don't have function types in our API
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			if !obj.CanSet() {
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			switch obj.Kind() {
0000000000000000000000000000000000000000;;			case reflect.String:
0000000000000000000000000000000000000000;;				obj.SetString(obj.String() + "x")
0000000000000000000000000000000000000000;;			case reflect.Bool:
0000000000000000000000000000000000000000;;				obj.SetBool(!obj.Bool())
0000000000000000000000000000000000000000;;			case reflect.Float32, reflect.Float64:
0000000000000000000000000000000000000000;;				obj.SetFloat(obj.Float()*2.0 + 1.0)
0000000000000000000000000000000000000000;;			case reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64, reflect.Int:
0000000000000000000000000000000000000000;;				obj.SetInt(obj.Int() + 1)
0000000000000000000000000000000000000000;;			case reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uint:
0000000000000000000000000000000000000000;;				obj.SetUint(obj.Uint() + 1)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
