0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
244485453ef267fb6b36d30c3515e37fc10de4e8;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		inf "gopkg.in/inf.v0"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestQuantityProtoMarshal(t *testing.T) {
0000000000000000000000000000000000000000;;		// Test when d is nil
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			quantity string
0000000000000000000000000000000000000000;;			expect   Quantity
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"0", Quantity{i: int64Amount{value: 0, scale: 0}, s: "0", Format: DecimalSI}},
0000000000000000000000000000000000000000;;			{"100m", Quantity{i: int64Amount{value: 100, scale: -3}, s: "100m", Format: DecimalSI}},
0000000000000000000000000000000000000000;;			{"50m", Quantity{i: int64Amount{value: 50, scale: -3}, s: "50m", Format: DecimalSI}},
0000000000000000000000000000000000000000;;			{"10000T", Quantity{i: int64Amount{value: 10000, scale: 12}, s: "10000T", Format: DecimalSI}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range table {
0000000000000000000000000000000000000000;;			q := MustParse(testCase.quantity)
0000000000000000000000000000000000000000;;			// Won't currently get an error as MarshalTo can't return one
0000000000000000000000000000000000000000;;			result, _ := q.Marshal()
0000000000000000000000000000000000000000;;			q.MarshalTo(result)
0000000000000000000000000000000000000000;;			if q.Cmp(testCase.expect) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %v, Actual: %v", testCase.expect, q)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test when i is {0,0}
0000000000000000000000000000000000000000;;		table2 := []struct {
0000000000000000000000000000000000000000;;			dec    *inf.Dec
0000000000000000000000000000000000000000;;			expect Quantity
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{dec(0, 0).Dec, Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(0, 0).Dec}, s: "0", Format: DecimalSI}},
0000000000000000000000000000000000000000;;			{dec(10, 0).Dec, Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(10, 0).Dec}, s: "10", Format: DecimalSI}},
0000000000000000000000000000000000000000;;			{dec(-10, 0).Dec, Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(-10, 0).Dec}, s: "-10", Format: DecimalSI}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range table2 {
0000000000000000000000000000000000000000;;			q := Quantity{d: infDecAmount{testCase.dec}, Format: DecimalSI}
0000000000000000000000000000000000000000;;			// Won't currently get an error as MarshalTo can't return one
0000000000000000000000000000000000000000;;			result, _ := q.Marshal()
0000000000000000000000000000000000000000;;			q.Unmarshal(result)
0000000000000000000000000000000000000000;;			if q.Cmp(testCase.expect) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %v, Actual: %v", testCase.expect, q)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestQuantityProtoUnmarshal(t *testing.T) {
0000000000000000000000000000000000000000;;		// Test when d is nil
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			input  Quantity
0000000000000000000000000000000000000000;;			expect string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 0, scale: 0}, s: "0", Format: DecimalSI}, "0"},
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 100, scale: -3}, s: "100m", Format: DecimalSI}, "100m"},
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 50, scale: -3}, s: "50m", Format: DecimalSI}, "50m"},
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 10000, scale: 12}, s: "10000T", Format: DecimalSI}, "10000T"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range table {
0000000000000000000000000000000000000000;;			var inputQ Quantity
0000000000000000000000000000000000000000;;			expectQ := MustParse(testCase.expect)
0000000000000000000000000000000000000000;;			inputByteArray, _ := testCase.input.Marshal()
0000000000000000000000000000000000000000;;			inputQ.Unmarshal(inputByteArray)
0000000000000000000000000000000000000000;;			if inputQ.Cmp(expectQ) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %v, Actual: %v", inputQ, expectQ)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Test when i is {0,0}
0000000000000000000000000000000000000000;;		table2 := []struct {
0000000000000000000000000000000000000000;;			input  Quantity
0000000000000000000000000000000000000000;;			expect *inf.Dec
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(0, 0).Dec}, s: "0", Format: DecimalSI}, dec(0, 0).Dec},
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(10, 0).Dec}, s: "10", Format: DecimalSI}, dec(10, 0).Dec},
0000000000000000000000000000000000000000;;			{Quantity{i: int64Amount{value: 0, scale: 0}, d: infDecAmount{dec(-10, 0).Dec}, s: "-10", Format: DecimalSI}, dec(-10, 0).Dec},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, testCase := range table2 {
0000000000000000000000000000000000000000;;			var inputQ Quantity
0000000000000000000000000000000000000000;;			expectQ := Quantity{d: infDecAmount{testCase.expect}, Format: DecimalSI}
0000000000000000000000000000000000000000;;			inputByteArray, _ := testCase.input.Marshal()
0000000000000000000000000000000000000000;;			inputQ.Unmarshal(inputByteArray)
0000000000000000000000000000000000000000;;			if inputQ.Cmp(expectQ) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected: %v, Actual: %v", inputQ, expectQ)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
