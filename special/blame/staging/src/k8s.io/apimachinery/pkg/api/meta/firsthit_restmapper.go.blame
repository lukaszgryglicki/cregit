0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package meta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FirstHitRESTMapper is a wrapper for multiple RESTMappers which returns the
0000000000000000000000000000000000000000;;	// first successful result for the singular requests
0000000000000000000000000000000000000000;;	type FirstHitRESTMapper struct {
0000000000000000000000000000000000000000;;		MultiRESTMapper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FirstHitRESTMapper) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("FirstHitRESTMapper{\n\t%v\n}", m.MultiRESTMapper)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FirstHitRESTMapper) ResourceFor(resource schema.GroupVersionResource) (schema.GroupVersionResource, error) {
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;		for _, t := range m.MultiRESTMapper {
0000000000000000000000000000000000000000;;			ret, err := t.ResourceFor(resource)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return ret, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = append(errors, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return schema.GroupVersionResource{}, collapseAggregateErrors(errors)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FirstHitRESTMapper) KindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) {
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;		for _, t := range m.MultiRESTMapper {
0000000000000000000000000000000000000000;;			ret, err := t.KindFor(resource)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return ret, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = append(errors, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return schema.GroupVersionKind{}, collapseAggregateErrors(errors)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTMapping provides the REST mapping for the resource based on the
0000000000000000000000000000000000000000;;	// kind and version. This implementation supports multiple REST schemas and
0000000000000000000000000000000000000000;;	// return the first match.
0000000000000000000000000000000000000000;;	func (m FirstHitRESTMapper) RESTMapping(gk schema.GroupKind, versions ...string) (*RESTMapping, error) {
0000000000000000000000000000000000000000;;		errors := []error{}
0000000000000000000000000000000000000000;;		for _, t := range m.MultiRESTMapper {
0000000000000000000000000000000000000000;;			ret, err := t.RESTMapping(gk, versions...)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				return ret, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errors = append(errors, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, collapseAggregateErrors(errors)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// collapseAggregateErrors returns the minimal errors.  it handles empty as nil, handles one item in a list
0000000000000000000000000000000000000000;;	// by returning the item, and collapses all NoMatchErrors to a single one (since they should all be the same)
0000000000000000000000000000000000000000;;	func collapseAggregateErrors(errors []error) error {
0000000000000000000000000000000000000000;;		if len(errors) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(errors) == 1 {
0000000000000000000000000000000000000000;;			return errors[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		allNoMatchErrors := true
0000000000000000000000000000000000000000;;		for _, err := range errors {
0000000000000000000000000000000000000000;;			allNoMatchErrors = allNoMatchErrors && IsNoMatchError(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if allNoMatchErrors {
0000000000000000000000000000000000000000;;			return errors[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return utilerrors.NewAggregate(errors)
0000000000000000000000000000000000000000;;	}
