0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package meta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AmbiguousResourceError is returned if the RESTMapper finds multiple matches for a resource
0000000000000000000000000000000000000000;;	type AmbiguousResourceError struct {
0000000000000000000000000000000000000000;;		PartialResource schema.GroupVersionResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MatchingResources []schema.GroupVersionResource
0000000000000000000000000000000000000000;;		MatchingKinds     []schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *AmbiguousResourceError) Error() string {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case len(e.MatchingKinds) > 0 && len(e.MatchingResources) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple resources %v and kinds %v", e.PartialResource, e.MatchingResources, e.MatchingKinds)
0000000000000000000000000000000000000000;;		case len(e.MatchingKinds) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple kinds %v", e.PartialResource, e.MatchingKinds)
0000000000000000000000000000000000000000;;		case len(e.MatchingResources) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple resources %v", e.PartialResource, e.MatchingResources)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v matches multiple resources or kinds", e.PartialResource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AmbiguousKindError is returned if the RESTMapper finds multiple matches for a kind
0000000000000000000000000000000000000000;;	type AmbiguousKindError struct {
0000000000000000000000000000000000000000;;		PartialKind schema.GroupVersionKind
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MatchingResources []schema.GroupVersionResource
0000000000000000000000000000000000000000;;		MatchingKinds     []schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *AmbiguousKindError) Error() string {
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case len(e.MatchingKinds) > 0 && len(e.MatchingResources) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple resources %v and kinds %v", e.PartialKind, e.MatchingResources, e.MatchingKinds)
0000000000000000000000000000000000000000;;		case len(e.MatchingKinds) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple kinds %v", e.PartialKind, e.MatchingKinds)
0000000000000000000000000000000000000000;;		case len(e.MatchingResources) > 0:
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v matches multiple resources %v", e.PartialKind, e.MatchingResources)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v matches multiple resources or kinds", e.PartialKind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsAmbiguousError(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch err.(type) {
0000000000000000000000000000000000000000;;		case *AmbiguousResourceError, *AmbiguousKindError:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoResourceMatchError is returned if the RESTMapper can't find any match for a resource
0000000000000000000000000000000000000000;;	type NoResourceMatchError struct {
0000000000000000000000000000000000000000;;		PartialResource schema.GroupVersionResource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *NoResourceMatchError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("no matches for %v", e.PartialResource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoKindMatchError is returned if the RESTMapper can't find any match for a kind
0000000000000000000000000000000000000000;;	type NoKindMatchError struct {
0000000000000000000000000000000000000000;;		PartialKind schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *NoKindMatchError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("no matches for %v", e.PartialKind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsNoMatchError(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch err.(type) {
0000000000000000000000000000000000000000;;		case *NoResourceMatchError, *NoKindMatchError:
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
