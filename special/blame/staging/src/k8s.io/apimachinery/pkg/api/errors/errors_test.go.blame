0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
cd21aada46990c01e2bf823e54b41a8fd3213620;pkg/api/errors/errors_test.go[pkg/api/errors/errors_test.go][staging/src/k8s.io/apimachinery/pkg/api/errors/errors_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package errors
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/validation/field"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func resource(resource string) schema.GroupResource {
0000000000000000000000000000000000000000;;		return schema.GroupResource{Group: "", Resource: resource}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func kind(kind string) schema.GroupKind {
0000000000000000000000000000000000000000;;		return schema.GroupKind{Group: "", Kind: kind}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestErrorNew(t *testing.T) {
0000000000000000000000000000000000000000;;		err := NewAlreadyExists(resource("tests"), "1")
0000000000000000000000000000000000000000;;		if !IsAlreadyExists(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonAlreadyExists)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsConflict(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonConflict)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf(fmt.Sprintf("expected to not be %s", metav1.StatusReasonNotFound))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsInvalid(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonInvalid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsBadRequest(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonBadRequest)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsForbidden(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonForbidden)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsServerTimeout(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonServerTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if IsMethodNotSupported(err) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to not be %s", metav1.StatusReasonMethodNotAllowed)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !IsConflict(NewConflict(resource("tests"), "2", errors.New("message"))) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be conflict")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsNotFound(NewNotFound(resource("tests"), "3")) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonNotFound)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsInvalid(NewInvalid(kind("Test"), "2", nil)) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonInvalid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsBadRequest(NewBadRequest("reason")) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonBadRequest)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsForbidden(NewForbidden(resource("tests"), "2", errors.New("reason"))) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonForbidden)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsUnauthorized(NewUnauthorized("reason")) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonUnauthorized)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsServerTimeout(NewServerTimeout(resource("tests"), "reason", 0)) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonServerTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if time, ok := SuggestsClientDelay(NewServerTimeout(resource("tests"), "doing something", 10)); time != 10 || !ok {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonServerTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if time, ok := SuggestsClientDelay(NewTimeoutError("test reason", 10)); time != 10 || !ok {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonTimeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsMethodNotSupported(NewMethodNotSupported(resource("foos"), "delete")) {
0000000000000000000000000000000000000000;;			t.Errorf("expected to be %s", metav1.StatusReasonMethodNotAllowed)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNewInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Err     *field.Error
0000000000000000000000000000000000000000;;			Details *metav1.StatusDetails
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				field.Duplicate(field.NewPath("field[0].name"), "bar"),
0000000000000000000000000000000000000000;;				&metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Kind: "Kind",
0000000000000000000000000000000000000000;;					Name: "name",
0000000000000000000000000000000000000000;;					Causes: []metav1.StatusCause{{
0000000000000000000000000000000000000000;;						Type:  metav1.CauseTypeFieldValueDuplicate,
0000000000000000000000000000000000000000;;						Field: "field[0].name",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				field.Invalid(field.NewPath("field[0].name"), "bar", "detail"),
0000000000000000000000000000000000000000;;				&metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Kind: "Kind",
0000000000000000000000000000000000000000;;					Name: "name",
0000000000000000000000000000000000000000;;					Causes: []metav1.StatusCause{{
0000000000000000000000000000000000000000;;						Type:  metav1.CauseTypeFieldValueInvalid,
0000000000000000000000000000000000000000;;						Field: "field[0].name",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				field.NotFound(field.NewPath("field[0].name"), "bar"),
0000000000000000000000000000000000000000;;				&metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Kind: "Kind",
0000000000000000000000000000000000000000;;					Name: "name",
0000000000000000000000000000000000000000;;					Causes: []metav1.StatusCause{{
0000000000000000000000000000000000000000;;						Type:  metav1.CauseTypeFieldValueNotFound,
0000000000000000000000000000000000000000;;						Field: "field[0].name",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				field.NotSupported(field.NewPath("field[0].name"), "bar", nil),
0000000000000000000000000000000000000000;;				&metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Kind: "Kind",
0000000000000000000000000000000000000000;;					Name: "name",
0000000000000000000000000000000000000000;;					Causes: []metav1.StatusCause{{
0000000000000000000000000000000000000000;;						Type:  metav1.CauseTypeFieldValueNotSupported,
0000000000000000000000000000000000000000;;						Field: "field[0].name",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				field.Required(field.NewPath("field[0].name"), ""),
0000000000000000000000000000000000000000;;				&metav1.StatusDetails{
0000000000000000000000000000000000000000;;					Kind: "Kind",
0000000000000000000000000000000000000000;;					Name: "name",
0000000000000000000000000000000000000000;;					Causes: []metav1.StatusCause{{
0000000000000000000000000000000000000000;;						Type:  metav1.CauseTypeFieldValueRequired,
0000000000000000000000000000000000000000;;						Field: "field[0].name",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			vErr, expected := testCase.Err, testCase.Details
0000000000000000000000000000000000000000;;			expected.Causes[0].Message = vErr.ErrorBody()
0000000000000000000000000000000000000000;;			err := NewInvalid(kind("Kind"), "name", field.ErrorList{vErr})
0000000000000000000000000000000000000000;;			status := err.ErrStatus
0000000000000000000000000000000000000000;;			if status.Code != 422 || status.Reason != metav1.StatusReasonInvalid {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected status: %#v", i, status)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(expected, status.Details) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected %#v, got %#v", i, expected, status.Details)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Test_reasonForError(t *testing.T) {
0000000000000000000000000000000000000000;;		if e, a := metav1.StatusReasonUnknown, reasonForError(nil); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected reason type: %#v", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestType struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TestType) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFromObject(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []struct {
0000000000000000000000000000000000000000;;			obj     runtime.Object
0000000000000000000000000000000000000000;;			message string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{&metav1.Status{Message: "foobar"}, "foobar"},
0000000000000000000000000000000000000000;;			{&TestType{}, "unexpected object: &{}"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, item := range table {
0000000000000000000000000000000000000000;;			if e, a := item.message, FromObject(item.obj).Error(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
