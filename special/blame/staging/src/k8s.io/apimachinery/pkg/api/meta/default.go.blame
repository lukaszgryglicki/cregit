0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
b345c93715bc4fd35a6b24308379509f269ae749;pkg/api/mapper.go[pkg/api/mapper.go][staging/src/k8s.io/apimachinery/pkg/api/meta/default.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package meta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDefaultRESTMapperFromScheme instantiates a DefaultRESTMapper based on types registered in the given scheme.
0000000000000000000000000000000000000000;;	func NewDefaultRESTMapperFromScheme(defaultGroupVersions []schema.GroupVersion, interfacesFunc VersionInterfacesFunc,
0000000000000000000000000000000000000000;;		importPathPrefix string, ignoredKinds, rootScoped sets.String, scheme *runtime.Scheme) *DefaultRESTMapper {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper := NewDefaultRESTMapper(defaultGroupVersions, interfacesFunc)
0000000000000000000000000000000000000000;;		// enumerate all supported versions, get the kinds, and register with the mapper how to address
0000000000000000000000000000000000000000;;		// our resources.
0000000000000000000000000000000000000000;;		for _, gv := range defaultGroupVersions {
0000000000000000000000000000000000000000;;			for kind, oType := range scheme.KnownTypes(gv) {
0000000000000000000000000000000000000000;;				gvk := gv.WithKind(kind)
0000000000000000000000000000000000000000;;				// TODO: Remove import path check.
0000000000000000000000000000000000000000;;				// We check the import path because we currently stuff both "api" and "extensions" objects
0000000000000000000000000000000000000000;;				// into the same group within Scheme since Scheme has no notion of groups yet.
0000000000000000000000000000000000000000;;				if !strings.Contains(oType.PkgPath(), importPathPrefix) || ignoredKinds.Has(kind) {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				scope := RESTScopeNamespace
0000000000000000000000000000000000000000;;				if rootScoped.Has(kind) {
0000000000000000000000000000000000000000;;					scope = RESTScopeRoot
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mapper.Add(gvk, scope)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mapper
0000000000000000000000000000000000000000;;	}
