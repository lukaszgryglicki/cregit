0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
0024c70e189907f8dadae039ab5fb1b60c9b43aa;pkg/api/validation/name.go[pkg/api/validation/name.go][staging/src/k8s.io/apimachinery/pkg/api/validation/path/name.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NameMayNotBe specifies strings that cannot be used as names specified as path segments (like the REST API or etcd store)
0000000000000000000000000000000000000000;;	var NameMayNotBe = []string{".", ".."}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NameMayNotContain specifies substrings that cannot be used in names specified as path segments (like the REST API or etcd store)
0000000000000000000000000000000000000000;;	var NameMayNotContain = []string{"/", "%"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValidPathSegmentName validates the name can be safely encoded as a path segment
0000000000000000000000000000000000000000;;	func IsValidPathSegmentName(name string) []string {
0000000000000000000000000000000000000000;;		for _, illegalName := range NameMayNotBe {
0000000000000000000000000000000000000000;;			if name == illegalName {
0000000000000000000000000000000000000000;;				return []string{fmt.Sprintf(`may not be '%s'`, illegalName)}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var errors []string
0000000000000000000000000000000000000000;;		for _, illegalContent := range NameMayNotContain {
0000000000000000000000000000000000000000;;			if strings.Contains(name, illegalContent) {
0000000000000000000000000000000000000000;;				errors = append(errors, fmt.Sprintf(`may not contain '%s'`, illegalContent))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsValidPathSegmentPrefix validates the name can be used as a prefix for a name which will be encoded as a path segment
0000000000000000000000000000000000000000;;	// It does not check for exact matches with disallowed names, since an arbitrary suffix might make the name valid
0000000000000000000000000000000000000000;;	func IsValidPathSegmentPrefix(name string) []string {
0000000000000000000000000000000000000000;;		var errors []string
0000000000000000000000000000000000000000;;		for _, illegalContent := range NameMayNotContain {
0000000000000000000000000000000000000000;;			if strings.Contains(name, illegalContent) {
0000000000000000000000000000000000000000;;				errors = append(errors, fmt.Sprintf(`may not contain '%s'`, illegalContent))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return errors
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidatePathSegmentName validates the name can be safely encoded as a path segment
0000000000000000000000000000000000000000;;	func ValidatePathSegmentName(name string, prefix bool) []string {
0000000000000000000000000000000000000000;;		if prefix {
0000000000000000000000000000000000000000;;			return IsValidPathSegmentPrefix(name)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return IsValidPathSegmentName(name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
