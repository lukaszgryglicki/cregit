0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
8379c49734496ea9a33e73d3ec9f54dd1a6cd535;pkg/apimachinery/announced/announced_test.go[pkg/apimachinery/announced/announced_test.go][staging/src/k8s.io/apimachinery/pkg/apimachinery/announced/announced_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package announced
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFactoryRegistry(t *testing.T) {
0000000000000000000000000000000000000000;;		regA := make(APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;		regB := make(APIGroupFactoryRegistry)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := regA.AnnounceGroup(&GroupMetaFactoryArgs{
0000000000000000000000000000000000000000;;			GroupName:              "foo",
0000000000000000000000000000000000000000;;			VersionPreferenceOrder: []string{"v2", "v1"},
0000000000000000000000000000000000000000;;			ImportPrefix:           "pkg/apis/foo",
0000000000000000000000000000000000000000;;			RootScopedKinds:        sets.NewString("namespaces"),
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := regA.AnnounceGroupVersion(&GroupVersionFactoryArgs{
0000000000000000000000000000000000000000;;			GroupName:   "foo",
0000000000000000000000000000000000000000;;			VersionName: "v1",
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := regA.AnnounceGroupVersion(&GroupVersionFactoryArgs{
0000000000000000000000000000000000000000;;			GroupName:   "foo",
0000000000000000000000000000000000000000;;			VersionName: "v2",
0000000000000000000000000000000000000000;;		}); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := regB.AnnouncePreconstructedFactory(NewGroupMetaFactory(
0000000000000000000000000000000000000000;;			&GroupMetaFactoryArgs{
0000000000000000000000000000000000000000;;				GroupName:              "foo",
0000000000000000000000000000000000000000;;				VersionPreferenceOrder: []string{"v2", "v1"},
0000000000000000000000000000000000000000;;				ImportPrefix:           "pkg/apis/foo",
0000000000000000000000000000000000000000;;				RootScopedKinds:        sets.NewString("namespaces"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			VersionToSchemeFunc{"v1": nil, "v2": nil},
0000000000000000000000000000000000000000;;		)); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(regA, regB) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected both ways of registering to be equivalent, but they were not.\n\n%#v\n\n%#v\n", regA, regB)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
