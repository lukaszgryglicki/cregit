0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
e3dc20715c634d0ee264047be4592cf2099eaf8f;pkg/fields/fields.go[pkg/fields/fields.go][staging/src/k8s.io/apimachinery/pkg/fields/fields.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fields
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows you to present fields independently from their storage.
0000000000000000000000000000000000000000;;	type Fields interface {
0000000000000000000000000000000000000000;;		// Has returns whether the provided field exists.
0000000000000000000000000000000000000000;;		Has(field string) (exists bool)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get returns the value for the provided field.
0000000000000000000000000000000000000000;;		Get(field string) (value string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set is a map of field:value. It implements Fields.
0000000000000000000000000000000000000000;;	type Set map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns all fields listed as a human readable string.
0000000000000000000000000000000000000000;;	// Conveniently, exactly the format that ParseSelector takes.
0000000000000000000000000000000000000000;;	func (ls Set) String() string {
0000000000000000000000000000000000000000;;		selector := make([]string, 0, len(ls))
0000000000000000000000000000000000000000;;		for key, value := range ls {
0000000000000000000000000000000000000000;;			selector = append(selector, key+"="+value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Sort for determinism.
0000000000000000000000000000000000000000;;		sort.StringSlice(selector).Sort()
0000000000000000000000000000000000000000;;		return strings.Join(selector, ",")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Has returns whether the provided field exists in the map.
0000000000000000000000000000000000000000;;	func (ls Set) Has(field string) bool {
0000000000000000000000000000000000000000;;		_, exists := ls[field]
0000000000000000000000000000000000000000;;		return exists
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns the value in the map for the provided field.
0000000000000000000000000000000000000000;;	func (ls Set) Get(field string) string {
0000000000000000000000000000000000000000;;		return ls[field]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AsSelector converts fields into a selectors.
0000000000000000000000000000000000000000;;	func (ls Set) AsSelector() Selector {
0000000000000000000000000000000000000000;;		return SelectorFromSet(ls)
0000000000000000000000000000000000000000;;	}
