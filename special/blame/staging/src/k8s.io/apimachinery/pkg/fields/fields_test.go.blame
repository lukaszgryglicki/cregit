0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
e3dc20715c634d0ee264047be4592cf2099eaf8f;pkg/fields/fields_test.go[pkg/fields/fields_test.go][staging/src/k8s.io/apimachinery/pkg/fields/fields_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fields
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func matches(t *testing.T, ls Set, want string) {
0000000000000000000000000000000000000000;;		if ls.String() != want {
0000000000000000000000000000000000000000;;			t.Errorf("Expected '%s', but got '%s'", want, ls.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSetString(t *testing.T) {
0000000000000000000000000000000000000000;;		matches(t, Set{"x": "y"}, "x=y")
0000000000000000000000000000000000000000;;		matches(t, Set{"foo": "bar"}, "foo=bar")
0000000000000000000000000000000000000000;;		matches(t, Set{"foo": "bar", "baz": "qup"}, "baz=qup,foo=bar")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFieldHas(t *testing.T) {
0000000000000000000000000000000000000000;;		fieldHasTests := []struct {
0000000000000000000000000000000000000000;;			Ls  Fields
0000000000000000000000000000000000000000;;			Key string
0000000000000000000000000000000000000000;;			Has bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{Set{"x": "y"}, "x", true},
0000000000000000000000000000000000000000;;			{Set{"x": ""}, "x", true},
0000000000000000000000000000000000000000;;			{Set{"x": "y"}, "foo", false},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, lh := range fieldHasTests {
0000000000000000000000000000000000000000;;			if has := lh.Ls.Has(lh.Key); has != lh.Has {
0000000000000000000000000000000000000000;;				t.Errorf("%#v.Has(%#v) => %v, expected %v", lh.Ls, lh.Key, has, lh.Has)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFieldGet(t *testing.T) {
0000000000000000000000000000000000000000;;		ls := Set{"x": "y"}
0000000000000000000000000000000000000000;;		if ls.Get("x") != "y" {
0000000000000000000000000000000000000000;;			t.Errorf("Set.Get is broken")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
