0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;staging/src/k8s.io/apimachinery/pkg/genericapiserver/openapi/common/common.go[staging/src/k8s.io/apimachinery/pkg/genericapiserver/openapi/common/common.go][staging/src/k8s.io/apimachinery/pkg/openapi/common.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package openapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful"
0000000000000000000000000000000000000000;;		"github.com/go-openapi/spec"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpenAPIDefinition describes single type. Normally these definitions are auto-generated using gen-openapi.
0000000000000000000000000000000000000000;;	type OpenAPIDefinition struct {
0000000000000000000000000000000000000000;;		Schema       spec.Schema
0000000000000000000000000000000000000000;;		Dependencies []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ReferenceCallback func(path string) spec.Ref
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpenAPIDefinitions is collection of all definitions.
0000000000000000000000000000000000000000;;	type GetOpenAPIDefinitions func(ReferenceCallback) map[string]OpenAPIDefinition
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OpenAPIDefinitionGetter gets openAPI definitions for a given type. If a type implements this interface,
0000000000000000000000000000000000000000;;	// the definition returned by it will be used, otherwise the auto-generated definitions will be used. See
0000000000000000000000000000000000000000;;	// GetOpenAPITypeFormat for more information about trade-offs of using this interface or GetOpenAPITypeFormat method when
0000000000000000000000000000000000000000;;	// possible.
0000000000000000000000000000000000000000;;	type OpenAPIDefinitionGetter interface {
0000000000000000000000000000000000000000;;		OpenAPIDefinition() *OpenAPIDefinition
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config is set of configuration for openAPI spec generation.
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// List of supported protocols such as https, http, etc.
0000000000000000000000000000000000000000;;		ProtocolList []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Info is general information about the API.
0000000000000000000000000000000000000000;;		Info *spec.Info
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultResponse will be used if an operation does not have any responses listed. It
0000000000000000000000000000000000000000;;		// will show up as ... "responses" : {"default" : $DefaultResponse} in the spec.
0000000000000000000000000000000000000000;;		DefaultResponse *spec.Response
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CommonResponses will be added as a response to all operation specs. This is a good place to add common
0000000000000000000000000000000000000000;;		// responses such as authorization failed.
0000000000000000000000000000000000000000;;		CommonResponses map[int]spec.Response
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of webservice's path prefixes to ignore
0000000000000000000000000000000000000000;;		IgnorePrefixes []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OpenAPIDefinitions should provide definition for all models used by routes. Failure to provide this map
0000000000000000000000000000000000000000;;		// or any of the models will result in spec generation failure.
0000000000000000000000000000000000000000;;		GetDefinitions GetOpenAPIDefinitions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetOperationIDAndTags returns operation id and tags for a restful route. It is an optional function to customize operation IDs.
0000000000000000000000000000000000000000;;		GetOperationIDAndTags func(r *restful.Route) (string, []string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetDefinitionName returns a friendly name for a definition base on the serving path. parameter `name` is the full name of the definition.
0000000000000000000000000000000000000000;;		// It is an optional function to customize model names.
0000000000000000000000000000000000000000;;		GetDefinitionName func(name string) (string, spec.Extensions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PostProcessSpec runs after the spec is ready to serve. It allows a final modification to the spec before serving.
0000000000000000000000000000000000000000;;		PostProcessSpec func(*spec.Swagger) (*spec.Swagger, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SecurityDefinitions is list of all security definitions for OpenAPI service. If this is not nil, the user of config
0000000000000000000000000000000000000000;;		// is responsible to provide DefaultSecurity and (maybe) add unauthorized response to CommonResponses.
0000000000000000000000000000000000000000;;		SecurityDefinitions *spec.SecurityDefinitions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultSecurity for all operations. This will pass as spec.SwaggerProps.Security to OpenAPI.
0000000000000000000000000000000000000000;;		// For most cases, this will be list of acceptable definitions in SecurityDefinitions.
0000000000000000000000000000000000000000;;		DefaultSecurity []map[string][]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This function is a reference for converting go (or any custom type) to a simple open API type,format pair. There are
0000000000000000000000000000000000000000;;	// two ways to customize spec for a type. If you add it here, a type will be converted to a simple type and the type
0000000000000000000000000000000000000000;;	// comment (the comment that is added before type definition) will be lost. The spec will still have the property
0000000000000000000000000000000000000000;;	// comment. The second way is to implement OpenAPIDefinitionGetter interface. That function can customize the spec (so
0000000000000000000000000000000000000000;;	// the spec does not need to be simple type,format) or can even return a simple type,format (e.g. IntOrString). For simple
0000000000000000000000000000000000000000;;	// type formats, the benefit of adding OpenAPIDefinitionGetter interface is to keep both type and property documentation.
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	// type Sample struct {
0000000000000000000000000000000000000000;;	//      ...
0000000000000000000000000000000000000000;;	//      // port of the server
0000000000000000000000000000000000000000;;	//      port IntOrString
0000000000000000000000000000000000000000;;	//      ...
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	// // IntOrString documentation...
0000000000000000000000000000000000000000;;	// type IntOrString { ... }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Adding IntOrString to this function:
0000000000000000000000000000000000000000;;	// "port" : {
0000000000000000000000000000000000000000;;	//           format:      "string",
0000000000000000000000000000000000000000;;	//           type:        "int-or-string",
0000000000000000000000000000000000000000;;	//           Description: "port of the server"
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Implement OpenAPIDefinitionGetter for IntOrString:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// "port" : {
0000000000000000000000000000000000000000;;	//           $Ref:    "#/definitions/IntOrString"
0000000000000000000000000000000000000000;;	//           Description: "port of the server"
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	// ...
0000000000000000000000000000000000000000;;	// definitions:
0000000000000000000000000000000000000000;;	// {
0000000000000000000000000000000000000000;;	//           "IntOrString": {
0000000000000000000000000000000000000000;;	//                     format:      "string",
0000000000000000000000000000000000000000;;	//                     type:        "int-or-string",
0000000000000000000000000000000000000000;;	//                     Description: "IntOrString documentation..."    // new
0000000000000000000000000000000000000000;;	//           }
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func GetOpenAPITypeFormat(typeName string) (string, string) {
0000000000000000000000000000000000000000;;		schemaTypeFormatMap := map[string][]string{
0000000000000000000000000000000000000000;;			"uint":        {"integer", "int32"},
0000000000000000000000000000000000000000;;			"uint8":       {"integer", "byte"},
0000000000000000000000000000000000000000;;			"uint16":      {"integer", "int32"},
0000000000000000000000000000000000000000;;			"uint32":      {"integer", "int64"},
0000000000000000000000000000000000000000;;			"uint64":      {"integer", "int64"},
0000000000000000000000000000000000000000;;			"int":         {"integer", "int32"},
0000000000000000000000000000000000000000;;			"int8":        {"integer", "byte"},
0000000000000000000000000000000000000000;;			"int16":       {"integer", "int32"},
0000000000000000000000000000000000000000;;			"int32":       {"integer", "int32"},
0000000000000000000000000000000000000000;;			"int64":       {"integer", "int64"},
0000000000000000000000000000000000000000;;			"byte":        {"integer", "byte"},
0000000000000000000000000000000000000000;;			"float64":     {"number", "double"},
0000000000000000000000000000000000000000;;			"float32":     {"number", "float"},
0000000000000000000000000000000000000000;;			"bool":        {"boolean", ""},
0000000000000000000000000000000000000000;;			"time.Time":   {"string", "date-time"},
0000000000000000000000000000000000000000;;			"string":      {"string", ""},
0000000000000000000000000000000000000000;;			"integer":     {"integer", ""},
0000000000000000000000000000000000000000;;			"number":      {"number", ""},
0000000000000000000000000000000000000000;;			"boolean":     {"boolean", ""},
0000000000000000000000000000000000000000;;			"[]byte":      {"string", "byte"}, // base64 encoded characters
0000000000000000000000000000000000000000;;			"interface{}": {"object", ""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mapped, ok := schemaTypeFormatMap[typeName]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return "", ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return mapped[0], mapped[1]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func EscapeJsonPointer(p string) string {
0000000000000000000000000000000000000000;;		// Escaping reference name using rfc6901
0000000000000000000000000000000000000000;;		p = strings.Replace(p, "~", "~0", -1)
0000000000000000000000000000000000000000;;		p = strings.Replace(p, "/", "~1", -1)
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
