0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package runtime includes helper functions for working with API objects
0000000000000000000000000000000000000000;;	// that follow the kubernetes API object conventions, which are:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 0. Your API objects have a common metadata struct member, TypeMeta.
0000000000000000000000000000000000000000;;	// 1. Your code refers to an internal set of API objects.
0000000000000000000000000000000000000000;;	// 2. In a separate package, you have an external set of API objects.
0000000000000000000000000000000000000000;;	// 3. The external set is considered to be versioned, and no breaking
0000000000000000000000000000000000000000;;	//    changes are ever made to it (fields may be added but not changed
0000000000000000000000000000000000000000;;	//    or removed).
0000000000000000000000000000000000000000;;	// 4. As your api evolves, you'll make an additional versioned package
0000000000000000000000000000000000000000;;	//    with every major change.
0000000000000000000000000000000000000000;;	// 5. Versioned packages have conversion functions which convert to
0000000000000000000000000000000000000000;;	//    and from the internal version.
0000000000000000000000000000000000000000;;	// 6. You'll continue to support older versions according to your
0000000000000000000000000000000000000000;;	//    deprecation policy, and you can easily provide a program/library
0000000000000000000000000000000000000000;;	//    to update old versions into new versions because of 5.
0000000000000000000000000000000000000000;;	// 7. All of your serializations and deserializations are handled in a
0000000000000000000000000000000000000000;;	//    centralized place.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Package runtime provides a conversion helper to make 5 easy, and the
0000000000000000000000000000000000000000;;	// Encode/Decode/DecodeInto trio to accomplish 7. You can also register
0000000000000000000000000000000000000000;;	// additional "codecs" which use a version of your choice. It's
0000000000000000000000000000000000000000;;	// recommended that you register your types with runtime in your
0000000000000000000000000000000000000000;;	// package's init function.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// As a bonus, a few common types useful from all api objects and versions
0000000000000000000000000000000000000000;;	// are provided in types.go.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime // import "k8s.io/apimachinery/pkg/runtime"
