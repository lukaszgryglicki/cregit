0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SchemeBuilder collects functions that add things to a scheme. It's to allow
0000000000000000000000000000000000000000;;	// code to compile without explicitly referencing generated types. You should
0000000000000000000000000000000000000000;;	// declare one in each package that will have generated deep copy or conversion
0000000000000000000000000000000000000000;;	// functions.
0000000000000000000000000000000000000000;;	type SchemeBuilder []func(*Scheme) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddToScheme applies all the stored functions to the scheme. A non-nil error
0000000000000000000000000000000000000000;;	// indicates that one function failed and the attempt was abandoned.
0000000000000000000000000000000000000000;;	func (sb *SchemeBuilder) AddToScheme(s *Scheme) error {
0000000000000000000000000000000000000000;;		for _, f := range *sb {
0000000000000000000000000000000000000000;;			if err := f(s); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register adds a scheme setup function to the list.
0000000000000000000000000000000000000000;;	func (sb *SchemeBuilder) Register(funcs ...func(*Scheme) error) {
0000000000000000000000000000000000000000;;		for _, f := range funcs {
0000000000000000000000000000000000000000;;			*sb = append(*sb, f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSchemeBuilder calls Register for you.
0000000000000000000000000000000000000000;;	func NewSchemeBuilder(funcs ...func(*Scheme) error) SchemeBuilder {
0000000000000000000000000000000000000000;;		var sb SchemeBuilder
0000000000000000000000000000000000000000;;		sb.Register(funcs...)
0000000000000000000000000000000000000000;;		return sb
0000000000000000000000000000000000000000;;	}
