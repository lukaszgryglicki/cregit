0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetaFactory is used to store and retrieve the version and kind
0000000000000000000000000000000000000000;;	// information for JSON objects in a serializer.
0000000000000000000000000000000000000000;;	type MetaFactory interface {
0000000000000000000000000000000000000000;;		// Interpret should return the version and kind of the wire-format of
0000000000000000000000000000000000000000;;		// the object.
0000000000000000000000000000000000000000;;		Interpret(data []byte) (*schema.GroupVersionKind, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultMetaFactory is a default factory for versioning objects in JSON. The object
0000000000000000000000000000000000000000;;	// in memory and in the default JSON serialization will use the "kind" and "apiVersion"
0000000000000000000000000000000000000000;;	// fields.
0000000000000000000000000000000000000000;;	var DefaultMetaFactory = SimpleMetaFactory{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleMetaFactory provides default methods for retrieving the type and version of objects
0000000000000000000000000000000000000000;;	// that are identified with an "apiVersion" and "kind" fields in their JSON
0000000000000000000000000000000000000000;;	// serialization. It may be parameterized with the names of the fields in memory, or an
0000000000000000000000000000000000000000;;	// optional list of base structs to search for those fields in memory.
0000000000000000000000000000000000000000;;	type SimpleMetaFactory struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interpret will return the APIVersion and Kind of the JSON wire-format
0000000000000000000000000000000000000000;;	// encoding of an object, or an error.
0000000000000000000000000000000000000000;;	func (SimpleMetaFactory) Interpret(data []byte) (*schema.GroupVersionKind, error) {
0000000000000000000000000000000000000000;;		findKind := struct {
0000000000000000000000000000000000000000;;			// +optional
0000000000000000000000000000000000000000;;			APIVersion string `json:"apiVersion,omitempty"`
0000000000000000000000000000000000000000;;			// +optional
0000000000000000000000000000000000000000;;			Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;		}{}
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &findKind); err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("couldn't get version/kind; json parse error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gv, err := schema.ParseGroupVersion(findKind.APIVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &schema.GroupVersionKind{Group: gv.Group, Version: gv.Version, Kind: findKind.Kind}, nil
0000000000000000000000000000000000000000;;	}
