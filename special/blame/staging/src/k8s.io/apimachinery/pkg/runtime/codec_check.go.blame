0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CheckCodec makes sure that the codec can encode objects like internalType,
0000000000000000000000000000000000000000;;	// decode all of the external types listed, and also decode them into the given
0000000000000000000000000000000000000000;;	// object. (Will modify internalObject.) (Assumes JSON serialization.)
0000000000000000000000000000000000000000;;	// TODO: verify that the correct external version is chosen on encode...
0000000000000000000000000000000000000000;;	func CheckCodec(c Codec, internalType Object, externalTypes ...schema.GroupVersionKind) error {
0000000000000000000000000000000000000000;;		if _, err := Encode(c, internalType); err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Internal type not encodable: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, et := range externalTypes {
0000000000000000000000000000000000000000;;			exBytes := []byte(fmt.Sprintf(`{"kind":"%v","apiVersion":"%v"}`, et.Kind, et.GroupVersion().String()))
0000000000000000000000000000000000000000;;			obj, err := Decode(c, exBytes)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("external type %s not interpretable: %v", et, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if reflect.TypeOf(obj) != reflect.TypeOf(internalType) {
0000000000000000000000000000000000000000;;				return fmt.Errorf("decode of external type %s produced: %#v", et, obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err = DecodeInto(c, exBytes, internalType); err != nil {
0000000000000000000000000000000000000000;;				return fmt.Errorf("external type %s not convertible to internal type: %v", et, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
