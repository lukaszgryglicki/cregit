0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type notRegisteredErr struct {
0000000000000000000000000000000000000000;;		gvk    schema.GroupVersionKind
0000000000000000000000000000000000000000;;		target GroupVersioner
0000000000000000000000000000000000000000;;		t      reflect.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotRegisteredErrForKind(gvk schema.GroupVersionKind) error {
0000000000000000000000000000000000000000;;		return &notRegisteredErr{gvk: gvk}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotRegisteredErrForType(t reflect.Type) error {
0000000000000000000000000000000000000000;;		return &notRegisteredErr{t: t}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewNotRegisteredErrForTarget(t reflect.Type, target GroupVersioner) error {
0000000000000000000000000000000000000000;;		return &notRegisteredErr{t: t, target: target}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *notRegisteredErr) Error() string {
0000000000000000000000000000000000000000;;		if k.t != nil && k.target != nil {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%v is not suitable for converting to %q", k.t, k.target)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if k.t != nil {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("no kind is registered for the type %v", k.t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(k.gvk.Kind) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("no version %q has been registered", k.gvk.GroupVersion())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if k.gvk.Version == APIVersionInternal {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("no kind %q is registered for the internal version of group %q", k.gvk.Kind, k.gvk.Group)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("no kind %q is registered for version %q", k.gvk.Kind, k.gvk.GroupVersion())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsNotRegisteredError returns true if the error indicates the provided
0000000000000000000000000000000000000000;;	// object or input data is not registered.
0000000000000000000000000000000000000000;;	func IsNotRegisteredError(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, ok := err.(*notRegisteredErr)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type missingKindErr struct {
0000000000000000000000000000000000000000;;		data string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMissingKindErr(data string) error {
0000000000000000000000000000000000000000;;		return &missingKindErr{data}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *missingKindErr) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Object 'Kind' is missing in '%s'", k.data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsMissingKind returns true if the error indicates that the provided object
0000000000000000000000000000000000000000;;	// is missing a 'Kind' field.
0000000000000000000000000000000000000000;;	func IsMissingKind(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, ok := err.(*missingKindErr)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type missingVersionErr struct {
0000000000000000000000000000000000000000;;		data string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsMissingVersion returns true if the error indicates that the provided object
0000000000000000000000000000000000000000;;	// is missing a 'Version' field.
0000000000000000000000000000000000000000;;	func NewMissingVersionErr(data string) error {
0000000000000000000000000000000000000000;;		return &missingVersionErr{data}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (k *missingVersionErr) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("Object 'apiVersion' is missing in '%s'", k.data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsMissingVersion(err error) bool {
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, ok := err.(*missingVersionErr)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
