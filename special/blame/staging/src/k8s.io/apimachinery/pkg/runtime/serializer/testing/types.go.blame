0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
0397f2d8bdd57e05d18216bbeb55b8759a6d5a3f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test a weird version/kind embedding format.
0000000000000000000000000000000000000000;;	// +k8s:deepcopy-gen=false
0000000000000000000000000000000000000000;;	type MyWeirdCustomEmbeddedVersionKindField struct {
0000000000000000000000000000000000000000;;		ID         string `json:"ID,omitempty"`
0000000000000000000000000000000000000000;;		APIVersion string `json:"myVersionKey,omitempty"`
0000000000000000000000000000000000000000;;		ObjectKind string `json:"myKindKey,omitempty"`
0000000000000000000000000000000000000000;;		Z          string `json:"Z,omitempty"`
0000000000000000000000000000000000000000;;		Y          uint64 `json:"Y,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestType1 struct {
0000000000000000000000000000000000000000;;		MyWeirdCustomEmbeddedVersionKindField `json:",inline"`
0000000000000000000000000000000000000000;;		A                                     string               `json:"A,omitempty"`
0000000000000000000000000000000000000000;;		B                                     int                  `json:"B,omitempty"`
0000000000000000000000000000000000000000;;		C                                     int8                 `json:"C,omitempty"`
0000000000000000000000000000000000000000;;		D                                     int16                `json:"D,omitempty"`
0000000000000000000000000000000000000000;;		E                                     int32                `json:"E,omitempty"`
0000000000000000000000000000000000000000;;		F                                     int64                `json:"F,omitempty"`
0000000000000000000000000000000000000000;;		G                                     uint                 `json:"G,omitempty"`
0000000000000000000000000000000000000000;;		H                                     uint8                `json:"H,omitempty"`
0000000000000000000000000000000000000000;;		I                                     uint16               `json:"I,omitempty"`
0000000000000000000000000000000000000000;;		J                                     uint32               `json:"J,omitempty"`
0000000000000000000000000000000000000000;;		K                                     uint64               `json:"K,omitempty"`
0000000000000000000000000000000000000000;;		L                                     bool                 `json:"L,omitempty"`
0000000000000000000000000000000000000000;;		M                                     map[string]int       `json:"M,omitempty"`
0000000000000000000000000000000000000000;;		N                                     map[string]TestType2 `json:"N,omitempty"`
0000000000000000000000000000000000000000;;		O                                     *TestType2           `json:"O,omitempty"`
0000000000000000000000000000000000000000;;		P                                     []TestType2          `json:"Q,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TestType2 struct {
0000000000000000000000000000000000000000;;		A string `json:"A,omitempty"`
0000000000000000000000000000000000000000;;		B int    `json:"B,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalTestType2 struct {
0000000000000000000000000000000000000000;;		A string `json:"A,omitempty"`
0000000000000000000000000000000000000000;;		B int    `json:"B,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalTestType1 struct {
0000000000000000000000000000000000000000;;		MyWeirdCustomEmbeddedVersionKindField `json:",inline"`
0000000000000000000000000000000000000000;;		A                                     string                       `json:"A,omitempty"`
0000000000000000000000000000000000000000;;		B                                     int                          `json:"B,omitempty"`
0000000000000000000000000000000000000000;;		C                                     int8                         `json:"C,omitempty"`
0000000000000000000000000000000000000000;;		D                                     int16                        `json:"D,omitempty"`
0000000000000000000000000000000000000000;;		E                                     int32                        `json:"E,omitempty"`
0000000000000000000000000000000000000000;;		F                                     int64                        `json:"F,omitempty"`
0000000000000000000000000000000000000000;;		G                                     uint                         `json:"G,omitempty"`
0000000000000000000000000000000000000000;;		H                                     uint8                        `json:"H,omitempty"`
0000000000000000000000000000000000000000;;		I                                     uint16                       `json:"I,omitempty"`
0000000000000000000000000000000000000000;;		J                                     uint32                       `json:"J,omitempty"`
0000000000000000000000000000000000000000;;		K                                     uint64                       `json:"K,omitempty"`
0000000000000000000000000000000000000000;;		L                                     bool                         `json:"L,omitempty"`
0000000000000000000000000000000000000000;;		M                                     map[string]int               `json:"M,omitempty"`
0000000000000000000000000000000000000000;;		N                                     map[string]ExternalTestType2 `json:"N,omitempty"`
0000000000000000000000000000000000000000;;		O                                     *ExternalTestType2           `json:"O,omitempty"`
0000000000000000000000000000000000000000;;		P                                     []ExternalTestType2          `json:"Q,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalInternalSame struct {
0000000000000000000000000000000000000000;;		MyWeirdCustomEmbeddedVersionKindField `json:",inline"`
0000000000000000000000000000000000000000;;		A                                     TestType2 `json:"A,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *MyWeirdCustomEmbeddedVersionKindField) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	func (obj *MyWeirdCustomEmbeddedVersionKindField) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.ObjectKind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (obj *MyWeirdCustomEmbeddedVersionKindField) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.ObjectKind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *ExternalInternalSame) GetObjectKind() schema.ObjectKind {
0000000000000000000000000000000000000000;;		return &obj.MyWeirdCustomEmbeddedVersionKindField
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TestType1) GetObjectKind() schema.ObjectKind {
0000000000000000000000000000000000000000;;		return &obj.MyWeirdCustomEmbeddedVersionKindField
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *ExternalTestType1) GetObjectKind() schema.ObjectKind {
0000000000000000000000000000000000000000;;		return &obj.MyWeirdCustomEmbeddedVersionKindField
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TestType2) GetObjectKind() schema.ObjectKind         { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	func (obj *ExternalTestType2) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
