0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package json_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/json"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testDecodable struct {
0000000000000000000000000000000000000000;;		Other string
0000000000000000000000000000000000000000;;		Value int `json:"value"`
0000000000000000000000000000000000000000;;		gvk   schema.GroupVersionKind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *testDecodable) GetObjectKind() schema.ObjectKind                { return d }
0000000000000000000000000000000000000000;;	func (d *testDecodable) SetGroupVersionKind(gvk schema.GroupVersionKind) { d.gvk = gvk }
0000000000000000000000000000000000000000;;	func (d *testDecodable) GroupVersionKind() schema.GroupVersionKind       { return d.gvk }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecode(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			creater runtime.ObjectCreater
0000000000000000000000000000000000000000;;			typer   runtime.ObjectTyper
0000000000000000000000000000000000000000;;			yaml    bool
0000000000000000000000000000000000000000;;			pretty  bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			data       []byte
0000000000000000000000000000000000000000;;			defaultGVK *schema.GroupVersionKind
0000000000000000000000000000000000000000;;			into       runtime.Object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			errFn          func(error) bool
0000000000000000000000000000000000000000;;			expectedObject runtime.Object
0000000000000000000000000000000000000000;;			expectedGVK    *schema.GroupVersionKind
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data: []byte("{}"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{},
0000000000000000000000000000000000000000;;				errFn:       func(err error) bool { return strings.Contains(err.Error(), "Object 'Kind' is missing in") },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:       []byte("{}"),
0000000000000000000000000000000000000000;;				defaultGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				creater:    &mockCreater{err: fmt.Errorf("fake error")},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				errFn:       func(err error) bool { return err.Error() == "fake error" },
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:           []byte("{}"),
0000000000000000000000000000000000000000;;				defaultGVK:     &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				creater:        &mockCreater{obj: &testDecodable{}},
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{},
0000000000000000000000000000000000000000;;				expectedGVK:    &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// version without group is not defaulted
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:           []byte(`{"apiVersion":"blah"}`),
0000000000000000000000000000000000000000;;				defaultGVK:     &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				creater:        &mockCreater{obj: &testDecodable{}},
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{},
0000000000000000000000000000000000000000;;				expectedGVK:    &schema.GroupVersionKind{Kind: "Test", Group: "", Version: "blah"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// group without version is defaulted
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:           []byte(`{"apiVersion":"other/"}`),
0000000000000000000000000000000000000000;;				defaultGVK:     &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				creater:        &mockCreater{obj: &testDecodable{}},
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{},
0000000000000000000000000000000000000000;;				expectedGVK:    &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// accept runtime.Unknown as into and bypass creator
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data: []byte(`{}`),
0000000000000000000000000000000000000000;;				into: &runtime.Unknown{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{},
0000000000000000000000000000000000000000;;				expectedObject: &runtime.Unknown{
0000000000000000000000000000000000000000;;					Raw:         []byte(`{}`),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data: []byte(`{"test":"object"}`),
0000000000000000000000000000000000000000;;				into: &runtime.Unknown{},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{},
0000000000000000000000000000000000000000;;				expectedObject: &runtime.Unknown{
0000000000000000000000000000000000000000;;					Raw:         []byte(`{"test":"object"}`),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"test":"object"}`),
0000000000000000000000000000000000000000;;				into:        &runtime.Unknown{},
0000000000000000000000000000000000000000;;				defaultGVK:  &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedObject: &runtime.Unknown{
0000000000000000000000000000000000000000;;					TypeMeta:    runtime.TypeMeta{APIVersion: "other/blah", Kind: "Test"},
0000000000000000000000000000000000000000;;					Raw:         []byte(`{"test":"object"}`),
0000000000000000000000000000000000000000;;					ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// unregistered objects can be decoded into directly
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"kind":"Test","apiVersion":"other/blah","value":1,"Other":"test"}`),
0000000000000000000000000000000000000000;;				into:        &testDecodable{},
0000000000000000000000000000000000000000;;				typer:       &mockTyper{err: runtime.NewNotRegisteredErrForKind(schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"})},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{
0000000000000000000000000000000000000000;;					Other: "test",
0000000000000000000000000000000000000000;;					Value: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// registered types get defaulted by the into object kind
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"value":1,"Other":"test"}`),
0000000000000000000000000000000000000000;;				into:        &testDecodable{},
0000000000000000000000000000000000000000;;				typer:       &mockTyper{gvk: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"}},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{
0000000000000000000000000000000000000000;;					Other: "test",
0000000000000000000000000000000000000000;;					Value: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// registered types get defaulted by the into object kind even without version, but return an error
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"value":1,"Other":"test"}`),
0000000000000000000000000000000000000000;;				into:        &testDecodable{},
0000000000000000000000000000000000000000;;				typer:       &mockTyper{gvk: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: ""}},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: ""},
0000000000000000000000000000000000000000;;				errFn:       func(err error) bool { return strings.Contains(err.Error(), "Object 'apiVersion' is missing in") },
0000000000000000000000000000000000000000;;				expectedObject: &testDecodable{
0000000000000000000000000000000000000000;;					Other: "test",
0000000000000000000000000000000000000000;;					Value: 1,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// runtime.VersionedObjects are decoded
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"value":1,"Other":"test"}`),
0000000000000000000000000000000000000000;;				into:        &runtime.VersionedObjects{Objects: []runtime.Object{}},
0000000000000000000000000000000000000000;;				creater:     &mockCreater{obj: &testDecodable{}},
0000000000000000000000000000000000000000;;				typer:       &mockTyper{gvk: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"}},
0000000000000000000000000000000000000000;;				defaultGVK:  &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedObject: &runtime.VersionedObjects{
0000000000000000000000000000000000000000;;					Objects: []runtime.Object{
0000000000000000000000000000000000000000;;						&testDecodable{
0000000000000000000000000000000000000000;;							Other: "test",
0000000000000000000000000000000000000000;;							Value: 1,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// runtime.VersionedObjects with an object are decoded into
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				data:        []byte(`{"Other":"test"}`),
0000000000000000000000000000000000000000;;				into:        &runtime.VersionedObjects{Objects: []runtime.Object{&testDecodable{Value: 2}}},
0000000000000000000000000000000000000000;;				typer:       &mockTyper{gvk: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"}},
0000000000000000000000000000000000000000;;				expectedGVK: &schema.GroupVersionKind{Kind: "Test", Group: "other", Version: "blah"},
0000000000000000000000000000000000000000;;				expectedObject: &runtime.VersionedObjects{
0000000000000000000000000000000000000000;;					Objects: []runtime.Object{
0000000000000000000000000000000000000000;;						&testDecodable{
0000000000000000000000000000000000000000;;							Other: "test",
0000000000000000000000000000000000000000;;							Value: 2,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range testCases {
0000000000000000000000000000000000000000;;			var s runtime.Serializer
0000000000000000000000000000000000000000;;			if test.yaml {
0000000000000000000000000000000000000000;;				s = json.NewYAMLSerializer(json.DefaultMetaFactory, test.creater, test.typer)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				s = json.NewSerializer(json.DefaultMetaFactory, test.creater, test.typer, test.pretty)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			obj, gvk, err := s.Decode([]byte(test.data), test.defaultGVK, test.into)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedGVK, gvk) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected GVK: %v", i, gvk)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && test.errFn != nil:
0000000000000000000000000000000000000000;;				t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil && test.errFn == nil:
0000000000000000000000000000000000000000;;				t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil:
0000000000000000000000000000000000000000;;				if !test.errFn(err) {
0000000000000000000000000000000000000000;;					t.Errorf("%d: failed: %v", i, err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if obj != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%d: should have returned nil object", i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.into != nil && test.into != obj {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected into to be returned: %v", i, obj)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(test.expectedObject, obj) {
0000000000000000000000000000000000000000;;				t.Errorf("%d: unexpected object:\n%s", i, diff.ObjectGoPrintSideBySide(test.expectedObject, obj))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockCreater struct {
0000000000000000000000000000000000000000;;		apiVersion string
0000000000000000000000000000000000000000;;		kind       string
0000000000000000000000000000000000000000;;		err        error
0000000000000000000000000000000000000000;;		obj        runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *mockCreater) New(kind schema.GroupVersionKind) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		c.apiVersion, c.kind = kind.GroupVersion().String(), kind.Kind
0000000000000000000000000000000000000000;;		return c.obj, c.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockTyper struct {
0000000000000000000000000000000000000000;;		gvk *schema.GroupVersionKind
0000000000000000000000000000000000000000;;		err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *mockTyper) ObjectKinds(obj runtime.Object) ([]schema.GroupVersionKind, bool, error) {
0000000000000000000000000000000000000000;;		if t.gvk == nil {
0000000000000000000000000000000000000000;;			return nil, false, t.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []schema.GroupVersionKind{*t.gvk}, false, t.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t *mockTyper) Recognizes(_ schema.GroupVersionKind) bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
