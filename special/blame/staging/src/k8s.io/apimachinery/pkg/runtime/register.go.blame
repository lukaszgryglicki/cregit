0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetGroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) SetGroupVersionKind(gvk schema.GroupVersionKind) {
0000000000000000000000000000000000000000;;		obj.APIVersion, obj.Kind = gvk.ToAPIVersionAndKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GroupVersionKind satisfies the ObjectKind interface for all objects that embed TypeMeta
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) GroupVersionKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return schema.FromAPIVersionAndKind(obj.APIVersion, obj.Kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (obj *TypeMeta) GetObjectKind() schema.ObjectKind { return obj }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetObjectKind implements Object for VersionedObjects, returning an empty ObjectKind
0000000000000000000000000000000000000000;;	// interface if no objects are provided, or the ObjectKind interface of the object in the
0000000000000000000000000000000000000000;;	// highest array position.
0000000000000000000000000000000000000000;;	func (obj *VersionedObjects) GetObjectKind() schema.ObjectKind {
0000000000000000000000000000000000000000;;		last := obj.Last()
0000000000000000000000000000000000000000;;		if last == nil {
0000000000000000000000000000000000000000;;			return schema.EmptyObjectKind
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return last.GetObjectKind()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// First returns the leftmost object in the VersionedObjects array, which is usually the
0000000000000000000000000000000000000000;;	// object as serialized on the wire.
0000000000000000000000000000000000000000;;	func (obj *VersionedObjects) First() Object {
0000000000000000000000000000000000000000;;		if len(obj.Objects) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.Objects[0]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Last is the rightmost object in the VersionedObjects array, which is the object after
0000000000000000000000000000000000000000;;	// all transformations have been applied. This is the same object that would be returned
0000000000000000000000000000000000000000;;	// by Decode in a normal invocation (without VersionedObjects in the into argument).
0000000000000000000000000000000000000000;;	func (obj *VersionedObjects) Last() Object {
0000000000000000000000000000000000000000;;		if len(obj.Objects) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.Objects[len(obj.Objects)-1]
0000000000000000000000000000000000000000;;	}
