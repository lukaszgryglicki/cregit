0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/json"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/recognizer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type A struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (A) GetObjectKind() schema.ObjectKind { return schema.EmptyObjectKind }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRecognizer(t *testing.T) {
0000000000000000000000000000000000000000;;		s := runtime.NewScheme()
0000000000000000000000000000000000000000;;		s.AddKnownTypes(schema.GroupVersion{Version: "v1"}, &A{})
0000000000000000000000000000000000000000;;		d := recognizer.NewDecoder(
0000000000000000000000000000000000000000;;			json.NewSerializer(json.DefaultMetaFactory, s, s, false),
0000000000000000000000000000000000000000;;			json.NewYAMLSerializer(json.DefaultMetaFactory, s, s),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		out, _, err := d.Decode([]byte(`
0000000000000000000000000000000000000000;;	kind: A
0000000000000000000000000000000000000000;;	apiVersion: v1
0000000000000000000000000000000000000000;;	`), nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("%#v", out)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, _, err = d.Decode([]byte(`
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;	  "kind":"A",
0000000000000000000000000000000000000000;;	  "apiVersion":"v1"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	`), nil, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.Logf("%#v", out)
0000000000000000000000000000000000000000;;	}
