0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProtobufMarshaller interface {
0000000000000000000000000000000000000000;;		MarshalTo(data []byte) (int, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NestedMarshalTo allows a caller to avoid extra allocations during serialization of an Unknown
0000000000000000000000000000000000000000;;	// that will contain an object that implements ProtobufMarshaller.
0000000000000000000000000000000000000000;;	func (m *Unknown) NestedMarshalTo(data []byte, b ProtobufMarshaller, size uint64) (int, error) {
0000000000000000000000000000000000000000;;		var i int
0000000000000000000000000000000000000000;;		_ = i
0000000000000000000000000000000000000000;;		var l int
0000000000000000000000000000000000000000;;		_ = l
0000000000000000000000000000000000000000;;		data[i] = 0xa
0000000000000000000000000000000000000000;;		i++
0000000000000000000000000000000000000000;;		i = encodeVarintGenerated(data, i, uint64(m.TypeMeta.Size()))
0000000000000000000000000000000000000000;;		n1, err := m.TypeMeta.MarshalTo(data[i:])
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		i += n1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if b != nil {
0000000000000000000000000000000000000000;;			data[i] = 0x12
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;			i = encodeVarintGenerated(data, i, size)
0000000000000000000000000000000000000000;;			n2, err := b.MarshalTo(data[i:])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if uint64(n2) != size {
0000000000000000000000000000000000000000;;				// programmer error: the Size() method for protobuf does not match the results of MarshalTo, which means the proto
0000000000000000000000000000000000000000;;				// struct returned would be wrong.
0000000000000000000000000000000000000000;;				return 0, fmt.Errorf("the Size() value of %T was %d, but NestedMarshalTo wrote %d bytes to data", b, size, n2)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			i += n2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data[i] = 0x1a
0000000000000000000000000000000000000000;;		i++
0000000000000000000000000000000000000000;;		i = encodeVarintGenerated(data, i, uint64(len(m.ContentEncoding)))
0000000000000000000000000000000000000000;;		i += copy(data[i:], m.ContentEncoding)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		data[i] = 0x22
0000000000000000000000000000000000000000;;		i++
0000000000000000000000000000000000000000;;		i = encodeVarintGenerated(data, i, uint64(len(m.ContentType)))
0000000000000000000000000000000000000000;;		i += copy(data[i:], m.ContentType)
0000000000000000000000000000000000000000;;		return i, nil
0000000000000000000000000000000000000000;;	}
