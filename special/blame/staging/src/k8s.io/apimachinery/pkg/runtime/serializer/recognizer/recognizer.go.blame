0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package recognizer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RecognizingDecoder interface {
0000000000000000000000000000000000000000;;		runtime.Decoder
0000000000000000000000000000000000000000;;		// RecognizesData should return true if the input provided in the provided reader
0000000000000000000000000000000000000000;;		// belongs to this decoder, or an error if the data could not be read or is ambiguous.
0000000000000000000000000000000000000000;;		// Unknown is true if the data could not be determined to match the decoder type.
0000000000000000000000000000000000000000;;		// Decoders should assume that they can read as much of peek as they need (as the caller
0000000000000000000000000000000000000000;;		// provides) and may return unknown if the data provided is not sufficient to make a
0000000000000000000000000000000000000000;;		// a determination. When peek returns EOF that may mean the end of the input or the
0000000000000000000000000000000000000000;;		// end of buffered input - recognizers should return the best guess at that time.
0000000000000000000000000000000000000000;;		RecognizesData(peek io.Reader) (ok, unknown bool, err error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDecoder creates a decoder that will attempt multiple decoders in an order defined
0000000000000000000000000000000000000000;;	// by:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1. The decoder implements RecognizingDecoder and identifies the data
0000000000000000000000000000000000000000;;	// 2. All other decoders, and any decoder that returned true for unknown.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The order passed to the constructor is preserved within those priorities.
0000000000000000000000000000000000000000;;	func NewDecoder(decoders ...runtime.Decoder) runtime.Decoder {
0000000000000000000000000000000000000000;;		return &decoder{
0000000000000000000000000000000000000000;;			decoders: decoders,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type decoder struct {
0000000000000000000000000000000000000000;;		decoders []runtime.Decoder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ RecognizingDecoder = &decoder{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *decoder) RecognizesData(peek io.Reader) (bool, bool, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			lastErr    error
0000000000000000000000000000000000000000;;			anyUnknown bool
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		data, _ := bufio.NewReaderSize(peek, 1024).Peek(1024)
0000000000000000000000000000000000000000;;		for _, r := range d.decoders {
0000000000000000000000000000000000000000;;			switch t := r.(type) {
0000000000000000000000000000000000000000;;			case RecognizingDecoder:
0000000000000000000000000000000000000000;;				ok, unknown, err := t.RecognizesData(bytes.NewBuffer(data))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					lastErr = err
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				anyUnknown = anyUnknown || unknown
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return true, false, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, anyUnknown, lastErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *decoder) Decode(data []byte, gvk *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			lastErr error
0000000000000000000000000000000000000000;;			skipped []runtime.Decoder
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// try recognizers, record any decoders we need to give a chance later
0000000000000000000000000000000000000000;;		for _, r := range d.decoders {
0000000000000000000000000000000000000000;;			switch t := r.(type) {
0000000000000000000000000000000000000000;;			case RecognizingDecoder:
0000000000000000000000000000000000000000;;				buf := bytes.NewBuffer(data)
0000000000000000000000000000000000000000;;				ok, unknown, err := t.RecognizesData(buf)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					lastErr = err
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if unknown {
0000000000000000000000000000000000000000;;					skipped = append(skipped, t)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return r.Decode(data, gvk, into)
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				skipped = append(skipped, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// try recognizers that returned unknown or didn't recognize their data
0000000000000000000000000000000000000000;;		for _, r := range skipped {
0000000000000000000000000000000000000000;;			out, actual, err := r.Decode(data, gvk, into)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				lastErr = err
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return out, actual, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lastErr == nil {
0000000000000000000000000000000000000000;;			lastErr = fmt.Errorf("no serialization format matched the provided data")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, nil, lastErr
0000000000000000000000000000000000000000;;	}
