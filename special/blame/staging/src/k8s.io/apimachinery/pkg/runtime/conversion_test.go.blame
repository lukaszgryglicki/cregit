0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		runtimetesting "k8s.io/apimachinery/pkg/runtime/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestStringMapConversion(t *testing.T) {
0000000000000000000000000000000000000000;;		internalGV := schema.GroupVersion{Group: "test.group", Version: runtime.APIVersionInternal}
0000000000000000000000000000000000000000;;		externalGV := schema.GroupVersion{Group: "test.group", Version: "external"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		scheme := runtime.NewScheme()
0000000000000000000000000000000000000000;;		scheme.Log(t)
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(internalGV.WithKind("Complex"), &runtimetesting.InternalComplex{})
0000000000000000000000000000000000000000;;		scheme.AddKnownTypeWithName(externalGV.WithKind("Complex"), &runtimetesting.ExternalComplex{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			input    map[string][]string
0000000000000000000000000000000000000000;;			errFn    func(error) bool
0000000000000000000000000000000000000000;;			expected runtime.Object
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"ignores omitempty": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"String":    {"not_used"},
0000000000000000000000000000000000000000;;					"string":    {"value"},
0000000000000000000000000000000000000000;;					"int":       {"1"},
0000000000000000000000000000000000000000;;					"Integer64": {"2"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{String: "value", Integer: 1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"returns error on bad int": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"int": {"a"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errFn:    func(err error) bool { return err != nil },
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses int64": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"Int64": {"-1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Int64: -1},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"returns error on bad int64": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"Int64": {"a"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				errFn:    func(err error) bool { return err != nil },
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses boolean true": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"bool": {"true"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Bool: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses boolean any value": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"bool": {"foo"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Bool: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses boolean false": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"bool": {"false"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Bool: false},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses boolean empty value": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"bool": {""},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Bool: true},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"parses boolean no value": {
0000000000000000000000000000000000000000;;				input: map[string][]string{
0000000000000000000000000000000000000000;;					"bool": {},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &runtimetesting.ExternalComplex{Bool: false},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for k, tc := range testCases {
0000000000000000000000000000000000000000;;			out := &runtimetesting.ExternalComplex{}
0000000000000000000000000000000000000000;;			if err := scheme.Convert(&tc.input, out, nil); (tc.errFn == nil && err != nil) || (tc.errFn != nil && !tc.errFn(err)) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(out, tc.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected output: %#v", k, out)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
