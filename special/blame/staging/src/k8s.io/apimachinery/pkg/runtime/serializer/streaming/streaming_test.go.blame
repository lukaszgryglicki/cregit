0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package streaming
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/framer"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDecoder struct {
0000000000000000000000000000000000000000;;		got []byte
0000000000000000000000000000000000000000;;		obj runtime.Object
0000000000000000000000000000000000000000;;		err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *fakeDecoder) Decode(data []byte, gvk *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) {
0000000000000000000000000000000000000000;;		d.got = data
0000000000000000000000000000000000000000;;		return d.obj, nil, d.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestEmptyDecoder(t *testing.T) {
0000000000000000000000000000000000000000;;		buf := bytes.NewBuffer([]byte{})
0000000000000000000000000000000000000000;;		d := &fakeDecoder{}
0000000000000000000000000000000000000000;;		_, _, err := NewDecoder(ioutil.NopCloser(buf), d).Decode(nil, nil)
0000000000000000000000000000000000000000;;		if err != io.EOF {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecoder(t *testing.T) {
0000000000000000000000000000000000000000;;		frames := [][]byte{
0000000000000000000000000000000000000000;;			make([]byte, 1025),
0000000000000000000000000000000000000000;;			make([]byte, 1024*5),
0000000000000000000000000000000000000000;;			make([]byte, 1024*1024*5),
0000000000000000000000000000000000000000;;			make([]byte, 1025),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pr, pw := io.Pipe()
0000000000000000000000000000000000000000;;		fw := framer.NewLengthDelimitedFrameWriter(pw)
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for i := range frames {
0000000000000000000000000000000000000000;;				fw.Write(frames[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pw.Close()
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		r := framer.NewLengthDelimitedFrameReader(pr)
0000000000000000000000000000000000000000;;		d := &fakeDecoder{}
0000000000000000000000000000000000000000;;		dec := NewDecoder(r, d)
0000000000000000000000000000000000000000;;		if _, _, err := dec.Decode(nil, nil); err != nil || !bytes.Equal(d.got, frames[0]) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected %v %v", err, len(d.got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := dec.Decode(nil, nil); err != nil || !bytes.Equal(d.got, frames[1]) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected %v %v", err, len(d.got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := dec.Decode(nil, nil); err != ErrObjectTooLarge || !bytes.Equal(d.got, frames[1]) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected %v %v", err, len(d.got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := dec.Decode(nil, nil); err != nil || !bytes.Equal(d.got, frames[3]) {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected %v %v", err, len(d.got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, _, err := dec.Decode(nil, nil); err != io.EOF {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected %v %v", err, len(d.got))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
