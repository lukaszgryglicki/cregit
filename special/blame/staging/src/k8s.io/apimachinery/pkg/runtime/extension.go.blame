0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (re *RawExtension) UnmarshalJSON(in []byte) error {
0000000000000000000000000000000000000000;;		if re == nil {
0000000000000000000000000000000000000000;;			return errors.New("runtime.RawExtension: UnmarshalJSON on nil pointer")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		re.Raw = append(re.Raw[0:0], in...)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Marshal may get called on pointers or values, so implement MarshalJSON on value.
0000000000000000000000000000000000000000;;	// http://stackoverflow.com/questions/21390979/custom-marshaljson-never-gets-called-in-go
0000000000000000000000000000000000000000;;	func (re RawExtension) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if re.Raw == nil {
0000000000000000000000000000000000000000;;			// TODO: this is to support legacy behavior of JSONPrinter and YAMLPrinter, which
0000000000000000000000000000000000000000;;			// expect to call json.Marshal on arbitrary versioned objects (even those not in
0000000000000000000000000000000000000000;;			// the scheme). pkg/kubectl/resource#AsVersionedObjects and its interaction with
0000000000000000000000000000000000000000;;			// kubectl get on objects not in the scheme needs to be updated to ensure that the
0000000000000000000000000000000000000000;;			// objects that are not part of the scheme are correctly put into the right form.
0000000000000000000000000000000000000000;;			if re.Object != nil {
0000000000000000000000000000000000000000;;				return json.Marshal(re.Object)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return []byte("null"), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: Check whether ContentType is actually JSON before returning it.
0000000000000000000000000000000000000000;;		return re.Raw, nil
0000000000000000000000000000000000000000;;	}
