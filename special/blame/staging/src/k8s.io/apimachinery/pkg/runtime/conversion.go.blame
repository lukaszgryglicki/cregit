0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
f05006577d95d7a7ecee895b6662439043a61f9d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Defines conversions between generic types and structs to map query strings
0000000000000000000000000000000000000000;;	// to struct objects.
0000000000000000000000000000000000000000;;	package runtime
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JSONKeyMapper uses the struct tags on a conversion to determine the key value for
0000000000000000000000000000000000000000;;	// the other side. Use when mapping from a map[string]* to a struct or vice versa.
0000000000000000000000000000000000000000;;	func JSONKeyMapper(key string, sourceTag, destTag reflect.StructTag) (string, string) {
0000000000000000000000000000000000000000;;		if s := destTag.Get("json"); len(s) > 0 {
0000000000000000000000000000000000000000;;			return strings.SplitN(s, ",", 2)[0], key
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s := sourceTag.Get("json"); len(s) > 0 {
0000000000000000000000000000000000000000;;			return key, strings.SplitN(s, ",", 2)[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return key, key
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultStringConversions are helpers for converting []string and string to real values.
0000000000000000000000000000000000000000;;	var DefaultStringConversions = []interface{}{
0000000000000000000000000000000000000000;;		Convert_Slice_string_To_string,
0000000000000000000000000000000000000000;;		Convert_Slice_string_To_int,
0000000000000000000000000000000000000000;;		Convert_Slice_string_To_bool,
0000000000000000000000000000000000000000;;		Convert_Slice_string_To_int64,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_string(input *[]string, out *string, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if len(*input) == 0 {
0000000000000000000000000000000000000000;;			*out = ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = (*input)[0]
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_int(input *[]string, out *int, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if len(*input) == 0 {
0000000000000000000000000000000000000000;;			*out = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str := (*input)[0]
0000000000000000000000000000000000000000;;		i, err := strconv.Atoi(str)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = i
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Conver_Slice_string_To_bool will convert a string parameter to boolean.
0000000000000000000000000000000000000000;;	// Only the absence of a value, a value of "false", or a value of "0" resolve to false.
0000000000000000000000000000000000000000;;	// Any other value (including empty string) resolves to true.
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_bool(input *[]string, out *bool, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if len(*input) == 0 {
0000000000000000000000000000000000000000;;			*out = false
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch strings.ToLower((*input)[0]) {
0000000000000000000000000000000000000000;;		case "false", "0":
0000000000000000000000000000000000000000;;			*out = false
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			*out = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Convert_Slice_string_To_int64(input *[]string, out *int64, s conversion.Scope) error {
0000000000000000000000000000000000000000;;		if len(*input) == 0 {
0000000000000000000000000000000000000000;;			*out = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		str := (*input)[0]
0000000000000000000000000000000000000000;;		i, err := strconv.ParseInt(str, 10, 64)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*out = i
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
