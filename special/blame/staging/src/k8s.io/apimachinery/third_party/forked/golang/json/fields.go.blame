0000000000000000000000000000000000000000;;	// Copyright 2013 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
7c46d6bc91cb50f1fdd21c23d36f48f70c322338;pkg/util/strategicpatch/fields.go[pkg/util/strategicpatch/fields.go][staging/src/k8s.io/apimachinery/third_party/forked/golang/json/fields.go];	
0000000000000000000000000000000000000000;;	// Package json is forked from the Go standard library to enable us to find the
0000000000000000000000000000000000000000;;	// field of a struct that a given JSON key maps to.
0000000000000000000000000000000000000000;;	package json
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		patchStrategyTagKey = "patchStrategy"
0000000000000000000000000000000000000000;;		patchMergeKeyTagKey = "patchMergeKey"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Finds the patchStrategy and patchMergeKey struct tag fields on a given
0000000000000000000000000000000000000000;;	// struct field given the struct type and the JSON name of the field.
0000000000000000000000000000000000000000;;	// It returns field type, a slice of patch strategies, merge key and error.
0000000000000000000000000000000000000000;;	// TODO: fix the returned errors to be introspectable.
0000000000000000000000000000000000000000;;	func LookupPatchMetadata(t reflect.Type, jsonField string) (
0000000000000000000000000000000000000000;;		elemType reflect.Type, patchStrategies []string, patchMergeKey string, e error) {
0000000000000000000000000000000000000000;;		if t.Kind() == reflect.Map {
0000000000000000000000000000000000000000;;			elemType = t.Elem()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.Kind() != reflect.Struct {
0000000000000000000000000000000000000000;;			e = fmt.Errorf("merging an object in json but data type is not map or struct, instead is: %s",
0000000000000000000000000000000000000000;;				t.Kind().String())
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		jf := []byte(jsonField)
0000000000000000000000000000000000000000;;		// Find the field that the JSON library would use.
0000000000000000000000000000000000000000;;		var f *field
0000000000000000000000000000000000000000;;		fields := cachedTypeFields(t)
0000000000000000000000000000000000000000;;		for i := range fields {
0000000000000000000000000000000000000000;;			ff := &fields[i]
0000000000000000000000000000000000000000;;			if bytes.Equal(ff.nameBytes, jf) {
0000000000000000000000000000000000000000;;				f = ff
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Do case-insensitive comparison.
0000000000000000000000000000000000000000;;			if f == nil && ff.equalFold(ff.nameBytes, jf) {
0000000000000000000000000000000000000000;;				f = ff
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if f != nil {
0000000000000000000000000000000000000000;;			// Find the reflect.Value of the most preferential struct field.
0000000000000000000000000000000000000000;;			tjf := t.Field(f.index[0])
0000000000000000000000000000000000000000;;			// we must navigate down all the anonymously included structs in the chain
0000000000000000000000000000000000000000;;			for i := 1; i < len(f.index); i++ {
0000000000000000000000000000000000000000;;				tjf = tjf.Type.Field(f.index[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			patchStrategy := tjf.Tag.Get(patchStrategyTagKey)
0000000000000000000000000000000000000000;;			patchMergeKey = tjf.Tag.Get(patchMergeKeyTagKey)
0000000000000000000000000000000000000000;;			patchStrategies = strings.Split(patchStrategy, ",")
0000000000000000000000000000000000000000;;			elemType = tjf.Type
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		e = fmt.Errorf("unable to find api field in struct %s for the json field %q", t.Name(), jsonField)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A field represents a single field found in a struct.
0000000000000000000000000000000000000000;;	type field struct {
0000000000000000000000000000000000000000;;		name      string
0000000000000000000000000000000000000000;;		nameBytes []byte                 // []byte(name)
0000000000000000000000000000000000000000;;		equalFold func(s, t []byte) bool // bytes.EqualFold or equivalent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tag bool
0000000000000000000000000000000000000000;;		// index is the sequence of indexes from the containing type fields to this field.
0000000000000000000000000000000000000000;;		// it is a slice because anonymous structs will need multiple navigation steps to correctly
0000000000000000000000000000000000000000;;		// resolve the proper fields
0000000000000000000000000000000000000000;;		index     []int
0000000000000000000000000000000000000000;;		typ       reflect.Type
0000000000000000000000000000000000000000;;		omitEmpty bool
0000000000000000000000000000000000000000;;		quoted    bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f field) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("{name: %s, type: %v, tag: %v, index: %v, omitEmpty: %v, quoted: %v}", f.name, f.typ, f.tag, f.index, f.omitEmpty, f.quoted)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fillField(f field) field {
0000000000000000000000000000000000000000;;		f.nameBytes = []byte(f.name)
0000000000000000000000000000000000000000;;		f.equalFold = foldFunc(f.nameBytes)
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byName sorts field by name, breaking ties with depth,
0000000000000000000000000000000000000000;;	// then breaking ties with "name came from json tag", then
0000000000000000000000000000000000000000;;	// breaking ties with index sequence.
0000000000000000000000000000000000000000;;	type byName []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Len() int { return len(x) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byName) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if x[i].name != x[j].name {
0000000000000000000000000000000000000000;;			return x[i].name < x[j].name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(x[i].index) != len(x[j].index) {
0000000000000000000000000000000000000000;;			return len(x[i].index) < len(x[j].index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if x[i].tag != x[j].tag {
0000000000000000000000000000000000000000;;			return x[i].tag
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return byIndex(x).Less(i, j)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// byIndex sorts field by index sequence.
0000000000000000000000000000000000000000;;	type byIndex []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Len() int { return len(x) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Swap(i, j int) { x[i], x[j] = x[j], x[i] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byIndex) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		for k, xik := range x[i].index {
0000000000000000000000000000000000000000;;			if k >= len(x[j].index) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if xik != x[j].index[k] {
0000000000000000000000000000000000000000;;				return xik < x[j].index[k]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(x[i].index) < len(x[j].index)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// typeFields returns a list of fields that JSON should recognize for the given type.
0000000000000000000000000000000000000000;;	// The algorithm is breadth-first search over the set of structs to include - the top struct
0000000000000000000000000000000000000000;;	// and then any reachable anonymous structs.
0000000000000000000000000000000000000000;;	func typeFields(t reflect.Type) []field {
0000000000000000000000000000000000000000;;		// Anonymous fields to explore at the current level and the next.
0000000000000000000000000000000000000000;;		current := []field{}
0000000000000000000000000000000000000000;;		next := []field{{typ: t}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Count of queued names for current level and the next.
0000000000000000000000000000000000000000;;		count := map[reflect.Type]int{}
0000000000000000000000000000000000000000;;		nextCount := map[reflect.Type]int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Types already visited at an earlier level.
0000000000000000000000000000000000000000;;		visited := map[reflect.Type]bool{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Fields found.
0000000000000000000000000000000000000000;;		var fields []field
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for len(next) > 0 {
0000000000000000000000000000000000000000;;			current, next = next, current[:0]
0000000000000000000000000000000000000000;;			count, nextCount = nextCount, map[reflect.Type]int{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, f := range current {
0000000000000000000000000000000000000000;;				if visited[f.typ] {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				visited[f.typ] = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// Scan f.typ for fields to include.
0000000000000000000000000000000000000000;;				for i := 0; i < f.typ.NumField(); i++ {
0000000000000000000000000000000000000000;;					sf := f.typ.Field(i)
0000000000000000000000000000000000000000;;					if sf.PkgPath != "" { // unexported
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					tag := sf.Tag.Get("json")
0000000000000000000000000000000000000000;;					if tag == "-" {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					name, opts := parseTag(tag)
0000000000000000000000000000000000000000;;					if !isValidTag(name) {
0000000000000000000000000000000000000000;;						name = ""
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					index := make([]int, len(f.index)+1)
0000000000000000000000000000000000000000;;					copy(index, f.index)
0000000000000000000000000000000000000000;;					index[len(f.index)] = i
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					ft := sf.Type
0000000000000000000000000000000000000000;;					if ft.Name() == "" && ft.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;						// Follow pointer.
0000000000000000000000000000000000000000;;						ft = ft.Elem()
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Record found field and index sequence.
0000000000000000000000000000000000000000;;					if name != "" || !sf.Anonymous || ft.Kind() != reflect.Struct {
0000000000000000000000000000000000000000;;						tagged := name != ""
0000000000000000000000000000000000000000;;						if name == "" {
0000000000000000000000000000000000000000;;							name = sf.Name
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						fields = append(fields, fillField(field{
0000000000000000000000000000000000000000;;							name:      name,
0000000000000000000000000000000000000000;;							tag:       tagged,
0000000000000000000000000000000000000000;;							index:     index,
0000000000000000000000000000000000000000;;							typ:       ft,
0000000000000000000000000000000000000000;;							omitEmpty: opts.Contains("omitempty"),
0000000000000000000000000000000000000000;;							quoted:    opts.Contains("string"),
0000000000000000000000000000000000000000;;						}))
0000000000000000000000000000000000000000;;						if count[f.typ] > 1 {
0000000000000000000000000000000000000000;;							// If there were multiple instances, add a second,
0000000000000000000000000000000000000000;;							// so that the annihilation code will see a duplicate.
0000000000000000000000000000000000000000;;							// It only cares about the distinction between 1 or 2,
0000000000000000000000000000000000000000;;							// so don't bother generating any more copies.
0000000000000000000000000000000000000000;;							fields = append(fields, fields[len(fields)-1])
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					// Record new anonymous struct to explore in next round.
0000000000000000000000000000000000000000;;					nextCount[ft]++
0000000000000000000000000000000000000000;;					if nextCount[ft] == 1 {
0000000000000000000000000000000000000000;;						next = append(next, fillField(field{name: ft.Name(), index: index, typ: ft}))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sort.Sort(byName(fields))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delete all fields that are hidden by the Go rules for embedded fields,
0000000000000000000000000000000000000000;;		// except that fields with JSON tags are promoted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The fields are sorted in primary order of name, secondary order
0000000000000000000000000000000000000000;;		// of field index length. Loop over names; for each name, delete
0000000000000000000000000000000000000000;;		// hidden fields by choosing the one dominant field that survives.
0000000000000000000000000000000000000000;;		out := fields[:0]
0000000000000000000000000000000000000000;;		for advance, i := 0, 0; i < len(fields); i += advance {
0000000000000000000000000000000000000000;;			// One iteration per name.
0000000000000000000000000000000000000000;;			// Find the sequence of fields with the name of this first field.
0000000000000000000000000000000000000000;;			fi := fields[i]
0000000000000000000000000000000000000000;;			name := fi.name
0000000000000000000000000000000000000000;;			for advance = 1; i+advance < len(fields); advance++ {
0000000000000000000000000000000000000000;;				fj := fields[i+advance]
0000000000000000000000000000000000000000;;				if fj.name != name {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if advance == 1 { // Only one field with this name
0000000000000000000000000000000000000000;;				out = append(out, fi)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			dominant, ok := dominantField(fields[i : i+advance])
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				out = append(out, dominant)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fields = out
0000000000000000000000000000000000000000;;		sort.Sort(byIndex(fields))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fields
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dominantField looks through the fields, all of which are known to
0000000000000000000000000000000000000000;;	// have the same name, to find the single field that dominates the
0000000000000000000000000000000000000000;;	// others using Go's embedding rules, modified by the presence of
0000000000000000000000000000000000000000;;	// JSON tags. If there are multiple top-level fields, the boolean
0000000000000000000000000000000000000000;;	// will be false: This condition is an error in Go and we skip all
0000000000000000000000000000000000000000;;	// the fields.
0000000000000000000000000000000000000000;;	func dominantField(fields []field) (field, bool) {
0000000000000000000000000000000000000000;;		// The fields are sorted in increasing index-length order. The winner
0000000000000000000000000000000000000000;;		// must therefore be one with the shortest index length. Drop all
0000000000000000000000000000000000000000;;		// longer entries, which is easy: just truncate the slice.
0000000000000000000000000000000000000000;;		length := len(fields[0].index)
0000000000000000000000000000000000000000;;		tagged := -1 // Index of first tagged field.
0000000000000000000000000000000000000000;;		for i, f := range fields {
0000000000000000000000000000000000000000;;			if len(f.index) > length {
0000000000000000000000000000000000000000;;				fields = fields[:i]
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if f.tag {
0000000000000000000000000000000000000000;;				if tagged >= 0 {
0000000000000000000000000000000000000000;;					// Multiple tagged fields at the same level: conflict.
0000000000000000000000000000000000000000;;					// Return no field.
0000000000000000000000000000000000000000;;					return field{}, false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				tagged = i
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if tagged >= 0 {
0000000000000000000000000000000000000000;;			return fields[tagged], true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// All remaining fields have the same length. If there's more than one,
0000000000000000000000000000000000000000;;		// we have a conflict (two fields named "X" at the same level) and we
0000000000000000000000000000000000000000;;		// return no field.
0000000000000000000000000000000000000000;;		if len(fields) > 1 {
0000000000000000000000000000000000000000;;			return field{}, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fields[0], true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var fieldCache struct {
0000000000000000000000000000000000000000;;		sync.RWMutex
0000000000000000000000000000000000000000;;		m map[reflect.Type][]field
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cachedTypeFields is like typeFields but uses a cache to avoid repeated work.
0000000000000000000000000000000000000000;;	func cachedTypeFields(t reflect.Type) []field {
0000000000000000000000000000000000000000;;		fieldCache.RLock()
0000000000000000000000000000000000000000;;		f := fieldCache.m[t]
0000000000000000000000000000000000000000;;		fieldCache.RUnlock()
0000000000000000000000000000000000000000;;		if f != nil {
0000000000000000000000000000000000000000;;			return f
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Compute fields without lock.
0000000000000000000000000000000000000000;;		// Might duplicate effort but won't hold other computations back.
0000000000000000000000000000000000000000;;		f = typeFields(t)
0000000000000000000000000000000000000000;;		if f == nil {
0000000000000000000000000000000000000000;;			f = []field{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fieldCache.Lock()
0000000000000000000000000000000000000000;;		if fieldCache.m == nil {
0000000000000000000000000000000000000000;;			fieldCache.m = map[reflect.Type][]field{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fieldCache.m[t] = f
0000000000000000000000000000000000000000;;		fieldCache.Unlock()
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isValidTag(s string) bool {
0000000000000000000000000000000000000000;;		if s == "" {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range s {
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c):
0000000000000000000000000000000000000000;;				// Backslash and quote chars are reserved, but
0000000000000000000000000000000000000000;;				// otherwise any punctuation chars are allowed
0000000000000000000000000000000000000000;;				// in a tag name.
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				if !unicode.IsLetter(c) && !unicode.IsDigit(c) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		caseMask     = ^byte(0x20) // Mask to ignore case in ASCII.
0000000000000000000000000000000000000000;;		kelvin       = '\u212a'
0000000000000000000000000000000000000000;;		smallLongEss = '\u017f'
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// foldFunc returns one of four different case folding equivalence
0000000000000000000000000000000000000000;;	// functions, from most general (and slow) to fastest:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 1) bytes.EqualFold, if the key s contains any non-ASCII UTF-8
0000000000000000000000000000000000000000;;	// 2) equalFoldRight, if s contains special folding ASCII ('k', 'K', 's', 'S')
0000000000000000000000000000000000000000;;	// 3) asciiEqualFold, no special, but includes non-letters (including _)
0000000000000000000000000000000000000000;;	// 4) simpleLetterEqualFold, no specials, no non-letters.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The letters S and K are special because they map to 3 runes, not just 2:
0000000000000000000000000000000000000000;;	//  * S maps to s and to U+017F 'ſ' Latin small letter long s
0000000000000000000000000000000000000000;;	//  * k maps to K and to U+212A 'K' Kelvin sign
0000000000000000000000000000000000000000;;	// See http://play.golang.org/p/tTxjOc0OGo
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The returned function is specialized for matching against s and
0000000000000000000000000000000000000000;;	// should only be given s. It's not curried for performance reasons.
0000000000000000000000000000000000000000;;	func foldFunc(s []byte) func(s, t []byte) bool {
0000000000000000000000000000000000000000;;		nonLetter := false
0000000000000000000000000000000000000000;;		special := false // special letter
0000000000000000000000000000000000000000;;		for _, b := range s {
0000000000000000000000000000000000000000;;			if b >= utf8.RuneSelf {
0000000000000000000000000000000000000000;;				return bytes.EqualFold
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			upper := b & caseMask
0000000000000000000000000000000000000000;;			if upper < 'A' || upper > 'Z' {
0000000000000000000000000000000000000000;;				nonLetter = true
0000000000000000000000000000000000000000;;			} else if upper == 'K' || upper == 'S' {
0000000000000000000000000000000000000000;;				// See above for why these letters are special.
0000000000000000000000000000000000000000;;				special = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if special {
0000000000000000000000000000000000000000;;			return equalFoldRight
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if nonLetter {
0000000000000000000000000000000000000000;;			return asciiEqualFold
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return simpleLetterEqualFold
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// equalFoldRight is a specialization of bytes.EqualFold when s is
0000000000000000000000000000000000000000;;	// known to be all ASCII (including punctuation), but contains an 's',
0000000000000000000000000000000000000000;;	// 'S', 'k', or 'K', requiring a Unicode fold on the bytes in t.
0000000000000000000000000000000000000000;;	// See comments on foldFunc.
0000000000000000000000000000000000000000;;	func equalFoldRight(s, t []byte) bool {
0000000000000000000000000000000000000000;;		for _, sb := range s {
0000000000000000000000000000000000000000;;			if len(t) == 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			tb := t[0]
0000000000000000000000000000000000000000;;			if tb < utf8.RuneSelf {
0000000000000000000000000000000000000000;;				if sb != tb {
0000000000000000000000000000000000000000;;					sbUpper := sb & caseMask
0000000000000000000000000000000000000000;;					if 'A' <= sbUpper && sbUpper <= 'Z' {
0000000000000000000000000000000000000000;;						if sbUpper != tb&caseMask {
0000000000000000000000000000000000000000;;							return false
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t = t[1:]
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// sb is ASCII and t is not. t must be either kelvin
0000000000000000000000000000000000000000;;			// sign or long s; sb must be s, S, k, or K.
0000000000000000000000000000000000000000;;			tr, size := utf8.DecodeRune(t)
0000000000000000000000000000000000000000;;			switch sb {
0000000000000000000000000000000000000000;;			case 's', 'S':
0000000000000000000000000000000000000000;;				if tr != smallLongEss {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case 'k', 'K':
0000000000000000000000000000000000000000;;				if tr != kelvin {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			t = t[size:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(t) > 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// asciiEqualFold is a specialization of bytes.EqualFold for use when
0000000000000000000000000000000000000000;;	// s is all ASCII (but may contain non-letters) and contains no
0000000000000000000000000000000000000000;;	// special-folding letters.
0000000000000000000000000000000000000000;;	// See comments on foldFunc.
0000000000000000000000000000000000000000;;	func asciiEqualFold(s, t []byte) bool {
0000000000000000000000000000000000000000;;		if len(s) != len(t) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, sb := range s {
0000000000000000000000000000000000000000;;			tb := t[i]
0000000000000000000000000000000000000000;;			if sb == tb {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ('a' <= sb && sb <= 'z') || ('A' <= sb && sb <= 'Z') {
0000000000000000000000000000000000000000;;				if sb&caseMask != tb&caseMask {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// simpleLetterEqualFold is a specialization of bytes.EqualFold for
0000000000000000000000000000000000000000;;	// use when s is all ASCII letters (no underscores, etc) and also
0000000000000000000000000000000000000000;;	// doesn't contain 'k', 'K', 's', or 'S'.
0000000000000000000000000000000000000000;;	// See comments on foldFunc.
0000000000000000000000000000000000000000;;	func simpleLetterEqualFold(s, t []byte) bool {
0000000000000000000000000000000000000000;;		if len(s) != len(t) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, b := range s {
0000000000000000000000000000000000000000;;			if b&caseMask != t[i]&caseMask {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tagOptions is the string following a comma in a struct field's "json"
0000000000000000000000000000000000000000;;	// tag, or the empty string. It does not include the leading comma.
0000000000000000000000000000000000000000;;	type tagOptions string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseTag splits a struct field's json tag into its name and
0000000000000000000000000000000000000000;;	// comma-separated options.
0000000000000000000000000000000000000000;;	func parseTag(tag string) (string, tagOptions) {
0000000000000000000000000000000000000000;;		if idx := strings.Index(tag, ","); idx != -1 {
0000000000000000000000000000000000000000;;			return tag[:idx], tagOptions(tag[idx+1:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tag, tagOptions("")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Contains reports whether a comma-separated list of options
0000000000000000000000000000000000000000;;	// contains a particular substr flag. substr must be surrounded by a
0000000000000000000000000000000000000000;;	// string boundary or commas.
0000000000000000000000000000000000000000;;	func (o tagOptions) Contains(optionName string) bool {
0000000000000000000000000000000000000000;;		if len(o) == 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := string(o)
0000000000000000000000000000000000000000;;		for s != "" {
0000000000000000000000000000000000000000;;			var next string
0000000000000000000000000000000000000000;;			i := strings.Index(s, ",")
0000000000000000000000000000000000000000;;			if i >= 0 {
0000000000000000000000000000000000000000;;				s, next = s[:i], s[i+1:]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if s == optionName {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s = next
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
