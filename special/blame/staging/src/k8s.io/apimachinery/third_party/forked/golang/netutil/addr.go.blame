0000000000000000000000000000000000000000;;	package netutil
1c6c3b1a1d8f45a1fc932ab44b3581e665d64c84;third_party/golang/netutil/addr.go[third_party/golang/netutil/addr.go][staging/src/k8s.io/apimachinery/third_party/forked/golang/netutil/addr.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FROM: http://golang.org/src/net/http/client.go
0000000000000000000000000000000000000000;;	// Given a string of the form "host", "host:port", or "[ipv6::address]:port",
0000000000000000000000000000000000000000;;	// return true if the string includes a port.
0000000000000000000000000000000000000000;;	func hasPort(s string) bool { return strings.LastIndex(s, ":") > strings.LastIndex(s, "]") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FROM: http://golang.org/src/net/http/transport.go
0000000000000000000000000000000000000000;;	var portMap = map[string]string{
0000000000000000000000000000000000000000;;		"http":  "80",
0000000000000000000000000000000000000000;;		"https": "443",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FROM: http://golang.org/src/net/http/transport.go
0000000000000000000000000000000000000000;;	// canonicalAddr returns url.Host but always with a ":port" suffix
0000000000000000000000000000000000000000;;	func CanonicalAddr(url *url.URL) string {
0000000000000000000000000000000000000000;;		addr := url.Host
0000000000000000000000000000000000000000;;		if !hasPort(addr) {
0000000000000000000000000000000000000000;;			return addr + ":" + portMap[url.Scheme]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return addr
0000000000000000000000000000000000000000;;	}
