0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
b47293502adea71c3dfae09246c1ab4507d132e0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +k8s:deepcopy-gen=package,register
0000000000000000000000000000000000000000;;	// +k8s:conversion-gen=k8s.io/kubernetes/vendor/k8s.io/kube-aggregator/pkg/apis/apiregistration
0000000000000000000000000000000000000000;;	// +k8s:openapi-gen=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package v1beta1 contains the API Registration API, which is responsible for
0000000000000000000000000000000000000000;;	// registering an API `Group`/`Version` with another kubernetes like API server.
0000000000000000000000000000000000000000;;	// The `APIService` holds information about the other API server in
0000000000000000000000000000000000000000;;	// `APIServiceSpec` type as well as general `TypeMeta` and `ObjectMeta`. The
0000000000000000000000000000000000000000;;	// `APIServiceSpec` type have the main configuration needed to do the
0000000000000000000000000000000000000000;;	// aggregation. Any request coming for specified `Group`/`Version` will be
0000000000000000000000000000000000000000;;	// directed to the service defined by `ServiceReference` (on port 443) after
0000000000000000000000000000000000000000;;	// validating the target using provided `CABundle` or skipping validation
0000000000000000000000000000000000000000;;	// if development flag `InsecureSkipTLSVerify` is set. `Priority` is controlling
0000000000000000000000000000000000000000;;	// the order of this API group in the overall discovery document.
0000000000000000000000000000000000000000;;	// The return status is a set of conditions for this aggregation. Currently
0000000000000000000000000000000000000000;;	// there is only one condition named "Available", if true, it means the
0000000000000000000000000000000000000000;;	// api/server requests will be redirected to specified API server.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// +groupName=apiregistration.k8s.io
0000000000000000000000000000000000000000;;	package v1beta1 // import "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1beta1"
