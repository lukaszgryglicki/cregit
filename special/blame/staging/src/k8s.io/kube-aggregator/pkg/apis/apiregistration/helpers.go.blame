0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a83b043e9718820d1c58ce84625288a569dff928;cmd/kubernetes-discovery/pkg/apis/apiregistration/helpers.go[cmd/kubernetes-discovery/pkg/apis/apiregistration/helpers.go][staging/src/k8s.io/kube-aggregator/pkg/apis/apiregistration/helpers.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiregistration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SortedByGroupAndVersion(servers []*APIService) [][]*APIService {
0000000000000000000000000000000000000000;;		serversByGroupPriorityMinimum := ByGroupPriorityMinimum(servers)
0000000000000000000000000000000000000000;;		sort.Sort(serversByGroupPriorityMinimum)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ret := [][]*APIService{}
0000000000000000000000000000000000000000;;		for _, curr := range serversByGroupPriorityMinimum {
0000000000000000000000000000000000000000;;			// check to see if we already have an entry for this group
0000000000000000000000000000000000000000;;			existingIndex := -1
0000000000000000000000000000000000000000;;			for j, groupInReturn := range ret {
0000000000000000000000000000000000000000;;				if groupInReturn[0].Spec.Group == curr.Spec.Group {
0000000000000000000000000000000000000000;;					existingIndex = j
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if existingIndex >= 0 {
0000000000000000000000000000000000000000;;				ret[existingIndex] = append(ret[existingIndex], curr)
0000000000000000000000000000000000000000;;				sort.Sort(ByVersionPriority(ret[existingIndex]))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			ret = append(ret, []*APIService{curr})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByGroupPriorityMinimum sorts with the highest group number first, then by name.
0000000000000000000000000000000000000000;;	// This is not a simple reverse, because we want the name sorting to be alpha, not
0000000000000000000000000000000000000000;;	// reverse alpha.
0000000000000000000000000000000000000000;;	type ByGroupPriorityMinimum []*APIService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ByGroupPriorityMinimum) Len() int      { return len(s) }
0000000000000000000000000000000000000000;;	func (s ByGroupPriorityMinimum) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	func (s ByGroupPriorityMinimum) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if s[i].Spec.GroupPriorityMinimum != s[j].Spec.GroupPriorityMinimum {
0000000000000000000000000000000000000000;;			return s[i].Spec.GroupPriorityMinimum > s[j].Spec.GroupPriorityMinimum
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s[i].Name < s[j].Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ByVersionPriority sorts with the highest version number first, then by name.
0000000000000000000000000000000000000000;;	// This is not a simple reverse, because we want the name sorting to be alpha, not
0000000000000000000000000000000000000000;;	// reverse alpha.
0000000000000000000000000000000000000000;;	type ByVersionPriority []*APIService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s ByVersionPriority) Len() int      { return len(s) }
0000000000000000000000000000000000000000;;	func (s ByVersionPriority) Swap(i, j int) { s[i], s[j] = s[j], s[i] }
0000000000000000000000000000000000000000;;	func (s ByVersionPriority) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		if s[i].Spec.VersionPriority != s[j].Spec.VersionPriority {
0000000000000000000000000000000000000000;;			return s[i].Spec.VersionPriority > s[j].Spec.VersionPriority
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s[i].Name < s[j].Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIServiceNameToGroupVersion returns the GroupVersion for a given apiServiceName.  The name
0000000000000000000000000000000000000000;;	// must be valid, but any object you get back from an informer will be valid.
0000000000000000000000000000000000000000;;	func APIServiceNameToGroupVersion(apiServiceName string) schema.GroupVersion {
0000000000000000000000000000000000000000;;		tokens := strings.SplitN(apiServiceName, ".", 2)
0000000000000000000000000000000000000000;;		return schema.GroupVersion{Group: tokens[1], Version: tokens[0]}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetAPIServiceCondition sets the status condition.  It either overwrites the existing one or
0000000000000000000000000000000000000000;;	// creates a new one
0000000000000000000000000000000000000000;;	func SetAPIServiceCondition(apiService *APIService, newCondition APIServiceCondition) {
0000000000000000000000000000000000000000;;		var existingCondition *APIServiceCondition
0000000000000000000000000000000000000000;;		for i := range apiService.Status.Conditions {
0000000000000000000000000000000000000000;;			if apiService.Status.Conditions[i].Type == newCondition.Type {
0000000000000000000000000000000000000000;;				existingCondition = &apiService.Status.Conditions[i]
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if existingCondition == nil {
0000000000000000000000000000000000000000;;			apiService.Status.Conditions = append(apiService.Status.Conditions, newCondition)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if existingCondition.Status != newCondition.Status {
0000000000000000000000000000000000000000;;			existingCondition.Status = newCondition.Status
0000000000000000000000000000000000000000;;			existingCondition.LastTransitionTime = newCondition.LastTransitionTime
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		existingCondition.Reason = newCondition.Reason
0000000000000000000000000000000000000000;;		existingCondition.Message = newCondition.Message
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsAPIServiceConditionTrue indicates if the condition is present and strictly true
0000000000000000000000000000000000000000;;	func IsAPIServiceConditionTrue(apiService *APIService, conditionType APIServiceConditionType) bool {
0000000000000000000000000000000000000000;;		for _, condition := range apiService.Status.Conditions {
0000000000000000000000000000000000000000;;			if condition.Type == conditionType && condition.Status == ConditionTrue {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
