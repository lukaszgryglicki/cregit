0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a83b043e9718820d1c58ce84625288a569dff928;cmd/kubernetes-discovery/pkg/apis/apiregistration/v1alpha1/types.go[cmd/kubernetes-discovery/pkg/apis/apiregistration/v1alpha1/types.go][staging/src/k8s.io/kube-aggregator/pkg/apis/apiregistration/v1beta1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIServiceList is a list of APIService objects.
0000000000000000000000000000000000000000;;	type APIServiceList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Items []APIService `json:"items" protobuf:"bytes,2,rep,name=items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServiceReference holds a reference to Service.legacy.k8s.io
0000000000000000000000000000000000000000;;	type ServiceReference struct {
0000000000000000000000000000000000000000;;		// Namespace is the namespace of the service
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty" protobuf:"bytes,1,opt,name=namespace"`
0000000000000000000000000000000000000000;;		// Name is the name of the service
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" protobuf:"bytes,2,opt,name=name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIServiceSpec contains information for locating and communicating with a server.
0000000000000000000000000000000000000000;;	// Only https is supported, though you are able to disable certificate verification.
0000000000000000000000000000000000000000;;	type APIServiceSpec struct {
0000000000000000000000000000000000000000;;		// Service is a reference to the service for this API server.  It must communicate
0000000000000000000000000000000000000000;;		// on port 443
0000000000000000000000000000000000000000;;		// If the Service is nil, that means the handling for the API groupversion is handled locally on this server.
0000000000000000000000000000000000000000;;		// The call will simply delegate to the normal handler chain to be fulfilled.
0000000000000000000000000000000000000000;;		Service *ServiceReference `json:"service" protobuf:"bytes,1,opt,name=service"`
0000000000000000000000000000000000000000;;		// Group is the API group name this server hosts
0000000000000000000000000000000000000000;;		Group string `json:"group,omitempty" protobuf:"bytes,2,opt,name=group"`
0000000000000000000000000000000000000000;;		// Version is the API version this server hosts.  For example, "v1"
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty" protobuf:"bytes,3,opt,name=version"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server.
0000000000000000000000000000000000000000;;		// This is strongly discouraged.  You should use the CABundle instead.
0000000000000000000000000000000000000000;;		InsecureSkipTLSVerify bool `json:"insecureSkipTLSVerify,omitempty" protobuf:"varint,4,opt,name=insecureSkipTLSVerify"`
0000000000000000000000000000000000000000;;		// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate.
0000000000000000000000000000000000000000;;		CABundle []byte `json:"caBundle" protobuf:"bytes,5,opt,name=caBundle"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones.
0000000000000000000000000000000000000000;;		// Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority.
0000000000000000000000000000000000000000;;		// The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10).
0000000000000000000000000000000000000000;;		// The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo)
0000000000000000000000000000000000000000;;		// We'd recommend something like: *.k8s.io (except extensions) at 18000 and
0000000000000000000000000000000000000000;;		// PaaSes (OpenShift, Deis) are recommended to be in the 2000s
0000000000000000000000000000000000000000;;		GroupPriorityMinimum int32 `json:"groupPriorityMinimum" protobuf:"varint,7,opt,name=groupPriorityMinimum"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero.
0000000000000000000000000000000000000000;;		// The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10).
0000000000000000000000000000000000000000;;		// The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo)
0000000000000000000000000000000000000000;;		// Since it's inside of a group, the number can be small, probably in the 10s.
0000000000000000000000000000000000000000;;		VersionPriority int32 `json:"versionPriority" protobuf:"varint,8,opt,name=versionPriority"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// leaving this here so everyone remembers why proto index 6 is skipped
0000000000000000000000000000000000000000;;		// Priority int64 `json:"priority" protobuf:"varint,6,opt,name=priority"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConditionStatus string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These are valid condition statuses. "ConditionTrue" means a resource is in the condition;
0000000000000000000000000000000000000000;;	// "ConditionFalse" means a resource is not in the condition; "ConditionUnknown" means kubernetes
0000000000000000000000000000000000000000;;	// can't decide if a resource is in the condition or not. In the future, we could add other
0000000000000000000000000000000000000000;;	// intermediate conditions, e.g. ConditionDegraded.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ConditionTrue    ConditionStatus = "True"
0000000000000000000000000000000000000000;;		ConditionFalse   ConditionStatus = "False"
0000000000000000000000000000000000000000;;		ConditionUnknown ConditionStatus = "Unknown"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIConditionConditionType is a valid value for APIServiceCondition.Type
0000000000000000000000000000000000000000;;	type APIServiceConditionType string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Available indicates that the service exists and is reachable
0000000000000000000000000000000000000000;;		Available APIServiceConditionType = "Available"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type APIServiceCondition struct {
0000000000000000000000000000000000000000;;		// Type is the type of the condition.
0000000000000000000000000000000000000000;;		Type APIServiceConditionType `json:"type" protobuf:"bytes,1,opt,name=type,casttype=APIServiceConditionType"`
0000000000000000000000000000000000000000;;		// Status is the status of the condition.
0000000000000000000000000000000000000000;;		// Can be True, False, Unknown.
0000000000000000000000000000000000000000;;		Status ConditionStatus `json:"status" protobuf:"bytes,2,opt,name=status,casttype=ConditionStatus"`
0000000000000000000000000000000000000000;;		// Last time the condition transitioned from one status to another.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty" protobuf:"bytes,3,opt,name=lastTransitionTime"`
0000000000000000000000000000000000000000;;		// Unique, one-word, CamelCase reason for the condition's last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Reason string `json:"reason,omitempty" protobuf:"bytes,4,opt,name=reason"`
0000000000000000000000000000000000000000;;		// Human-readable message indicating details about last transition.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Message string `json:"message,omitempty" protobuf:"bytes,5,opt,name=message"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIServiceStatus contains derived information about an API server
0000000000000000000000000000000000000000;;	type APIServiceStatus struct {
0000000000000000000000000000000000000000;;		// Current service state of apiService.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		// +patchMergeKey=type
0000000000000000000000000000000000000000;;		// +patchStrategy=merge
0000000000000000000000000000000000000000;;		Conditions []APIServiceCondition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// APIService represents a server for a particular GroupVersion.
0000000000000000000000000000000000000000;;	// Name must be "version.group".
0000000000000000000000000000000000000000;;	type APIService struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta   `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ObjectMeta `json:"metadata,omitempty" protobuf:"bytes,1,opt,name=metadata"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Spec contains information for locating and communicating with a server
0000000000000000000000000000000000000000;;		Spec APIServiceSpec `json:"spec,omitempty" protobuf:"bytes,2,opt,name=spec"`
0000000000000000000000000000000000000000;;		// Status contains derived information about an API server
0000000000000000000000000000000000000000;;		Status APIServiceStatus `json:"status,omitempty" protobuf:"bytes,3,opt,name=status"`
0000000000000000000000000000000000000000;;	}
