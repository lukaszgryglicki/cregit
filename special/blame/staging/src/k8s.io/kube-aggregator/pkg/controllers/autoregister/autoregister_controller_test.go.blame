0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
6cac9bddb63e610919f8023fcd779e03c94bf204;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package autoregister
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		clienttesting "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		listers "k8s.io/kube-aggregator/pkg/client/listers/apiregistration/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAutoRegisterManagedAPIService(name string) *apiregistration.APIService {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Labels: map[string]string{AutoRegisterManagedLabel: string("true")}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAutoRegisterManagedModifiedAPIService(name string) *apiregistration.APIService {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name, Labels: map[string]string{AutoRegisterManagedLabel: string("true")}},
0000000000000000000000000000000000000000;;			Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;				Group: "something",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAPIService(name string) *apiregistration.APIService {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForNothing(name string, client *fake.Clientset) error {
0000000000000000000000000000000000000000;;		if len(client.Actions()) > 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForCreate(name string, client *fake.Clientset) error {
0000000000000000000000000000000000000000;;		if len(client.Actions()) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(client.Actions()) > 1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		action := client.Actions()[0]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		createAction, ok := action.(clienttesting.CreateAction)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		apiService := createAction.GetObject().(*apiregistration.APIService)
0000000000000000000000000000000000000000;;		if apiService.Name != name || apiService.Labels[AutoRegisterManagedLabel] != "true" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("bad name or label %v", createAction)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForUpdate(name string, client *fake.Clientset) error {
0000000000000000000000000000000000000000;;		if len(client.Actions()) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(client.Actions()) > 1 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		action := client.Actions()[0]
0000000000000000000000000000000000000000;;		updateAction, ok := action.(clienttesting.UpdateAction)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		apiService := updateAction.GetObject().(*apiregistration.APIService)
0000000000000000000000000000000000000000;;		if apiService.Name != name || apiService.Labels[AutoRegisterManagedLabel] != "true" || apiService.Spec.Group != "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("bad name, label, or group %v", updateAction)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkForDelete(name string, client *fake.Clientset) error {
0000000000000000000000000000000000000000;;		if len(client.Actions()) == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, action := range client.Actions() {
0000000000000000000000000000000000000000;;			deleteAction, ok := action.(clienttesting.DeleteAction)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf("unexpected action: %v", client.Actions())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if deleteAction.GetName() != name {
0000000000000000000000000000000000000000;;				return fmt.Errorf("bad name %v", deleteAction)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSync(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name               string
0000000000000000000000000000000000000000;;			apiServiceName     string
0000000000000000000000000000000000000000;;			addAPIServices     []*apiregistration.APIService
0000000000000000000000000000000000000000;;			updateAPIServices  []*apiregistration.APIService
0000000000000000000000000000000000000000;;			addSyncAPIServices []*apiregistration.APIService
0000000000000000000000000000000000000000;;			delSyncAPIServices []string
0000000000000000000000000000000000000000;;			expectedResults    func(name string, client *fake.Clientset) error
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "adding an API service which isn't auto-managed does nothing",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{newAPIService("foo")},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{},
0000000000000000000000000000000000000000;;				expectedResults:    checkForNothing,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "adding one to auto-register should create",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{newAPIService("foo")},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{},
0000000000000000000000000000000000000000;;				expectedResults:    checkForCreate,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "duplicate AddAPIServiceToSync don't panic",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{newAutoRegisterManagedAPIService("foo")},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{newAutoRegisterManagedAPIService("foo"), newAutoRegisterManagedAPIService("foo")},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{},
0000000000000000000000000000000000000000;;				expectedResults:    checkForNothing,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "duplicate RemoveAPIServiceToSync don't panic",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{newAutoRegisterManagedAPIService("foo")},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{"foo", "foo"},
0000000000000000000000000000000000000000;;				expectedResults:    checkForDelete,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "removing auto-manged then RemoveAPIService should not touch APIService",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{newAPIService("foo")},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{"foo"},
0000000000000000000000000000000000000000;;				expectedResults:    checkForNothing,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "create managed apiservice without a matching request",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{newAPIService("foo")},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{newAutoRegisterManagedAPIService("foo")},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{},
0000000000000000000000000000000000000000;;				expectedResults:    checkForDelete,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:               "modifying it should result in stomping",
0000000000000000000000000000000000000000;;				apiServiceName:     "foo",
0000000000000000000000000000000000000000;;				addAPIServices:     []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				updateAPIServices:  []*apiregistration.APIService{newAutoRegisterManagedModifiedAPIService("foo")},
0000000000000000000000000000000000000000;;				addSyncAPIServices: []*apiregistration.APIService{newAutoRegisterManagedAPIService("foo")},
0000000000000000000000000000000000000000;;				delSyncAPIServices: []string{},
0000000000000000000000000000000000000000;;				expectedResults:    checkForUpdate,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			apiServiceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			c := autoRegisterController{
0000000000000000000000000000000000000000;;				apiServiceClient:  fakeClient.Apiregistration(),
0000000000000000000000000000000000000000;;				apiServiceLister:  listers.NewAPIServiceLister(apiServiceIndexer),
0000000000000000000000000000000000000000;;				apiServicesToSync: map[string]*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				queue:             workqueue.NewNamedRateLimitingQueue(workqueue.DefaultControllerRateLimiter(), "autoregister"),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, obj := range test.addAPIServices {
0000000000000000000000000000000000000000;;				apiServiceIndexer.Add(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, obj := range test.updateAPIServices {
0000000000000000000000000000000000000000;;				apiServiceIndexer.Update(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, obj := range test.addSyncAPIServices {
0000000000000000000000000000000000000000;;				c.AddAPIServiceToSync(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, objName := range test.delSyncAPIServices {
0000000000000000000000000000000000000000;;				c.RemoveAPIServiceToSync(objName)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			c.checkAPIService(test.apiServiceName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			//compare the expected results
0000000000000000000000000000000000000000;;			err := test.expectedResults(test.apiServiceName, fakeClient)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s %v", test.name, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
