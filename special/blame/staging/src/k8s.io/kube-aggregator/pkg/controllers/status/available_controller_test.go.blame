0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
546da0ebbeb4fa1639497213f92ce04e56c1ec92;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		v1listers "k8s.io/client-go/listers/core/v1"
0000000000000000000000000000000000000000;;		clienttesting "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/client/clientset_generated/internalclientset/fake"
0000000000000000000000000000000000000000;;		listers "k8s.io/kube-aggregator/pkg/client/listers/apiregistration/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newEndpoints(namespace, name string) *v1.Endpoints {
0000000000000000000000000000000000000000;;		return &v1.Endpoints{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: namespace, Name: name},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newEndpointsWithAddress(namespace, name string) *v1.Endpoints {
0000000000000000000000000000000000000000;;		return &v1.Endpoints{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: namespace, Name: name},
0000000000000000000000000000000000000000;;			Subsets: []v1.EndpointSubset{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Addresses: []v1.EndpointAddress{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							IP: "val",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newService(namespace, name string) *v1.Service {
0000000000000000000000000000000000000000;;		return &v1.Service{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Namespace: namespace, Name: name},
0000000000000000000000000000000000000000;;			Spec: v1.ServiceSpec{
0000000000000000000000000000000000000000;;				Type: v1.ServiceTypeClusterIP,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLocalAPIService(name string) *apiregistration.APIService {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRemoteAPIService(name string) *apiregistration.APIService {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{Name: name},
0000000000000000000000000000000000000000;;			Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;				Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;					Name:      "bar",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSync(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			apiServiceName       string
0000000000000000000000000000000000000000;;			apiServices          []*apiregistration.APIService
0000000000000000000000000000000000000000;;			services             []*v1.Service
0000000000000000000000000000000000000000;;			endpoints            []*v1.Endpoints
0000000000000000000000000000000000000000;;			expectedAvailability apiregistration.APIServiceCondition
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "local",
0000000000000000000000000000000000000000;;				apiServiceName: "local.group",
0000000000000000000000000000000000000000;;				apiServices:    []*apiregistration.APIService{newLocalAPIService("local.group")},
0000000000000000000000000000000000000000;;				expectedAvailability: apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;					Type:    apiregistration.Available,
0000000000000000000000000000000000000000;;					Status:  apiregistration.ConditionTrue,
0000000000000000000000000000000000000000;;					Reason:  "Local",
0000000000000000000000000000000000000000;;					Message: "Local APIServices are always available",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "no service",
0000000000000000000000000000000000000000;;				apiServiceName: "remote.group",
0000000000000000000000000000000000000000;;				apiServices:    []*apiregistration.APIService{newRemoteAPIService("remote.group")},
0000000000000000000000000000000000000000;;				services:       []*v1.Service{newService("foo", "not-bar")},
0000000000000000000000000000000000000000;;				expectedAvailability: apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;					Type:    apiregistration.Available,
0000000000000000000000000000000000000000;;					Status:  apiregistration.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason:  "ServiceNotFound",
0000000000000000000000000000000000000000;;					Message: `service/bar in "foo" is not present`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "no endpoints",
0000000000000000000000000000000000000000;;				apiServiceName: "remote.group",
0000000000000000000000000000000000000000;;				apiServices:    []*apiregistration.APIService{newRemoteAPIService("remote.group")},
0000000000000000000000000000000000000000;;				services:       []*v1.Service{newService("foo", "bar")},
0000000000000000000000000000000000000000;;				expectedAvailability: apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;					Type:    apiregistration.Available,
0000000000000000000000000000000000000000;;					Status:  apiregistration.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason:  "EndpointsNotFound",
0000000000000000000000000000000000000000;;					Message: `cannot find endpoints for service/bar in "foo"`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "missing endpoints",
0000000000000000000000000000000000000000;;				apiServiceName: "remote.group",
0000000000000000000000000000000000000000;;				apiServices:    []*apiregistration.APIService{newRemoteAPIService("remote.group")},
0000000000000000000000000000000000000000;;				services:       []*v1.Service{newService("foo", "bar")},
0000000000000000000000000000000000000000;;				endpoints:      []*v1.Endpoints{newEndpoints("foo", "bar")},
0000000000000000000000000000000000000000;;				expectedAvailability: apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;					Type:    apiregistration.Available,
0000000000000000000000000000000000000000;;					Status:  apiregistration.ConditionFalse,
0000000000000000000000000000000000000000;;					Reason:  "MissingEndpoints",
0000000000000000000000000000000000000000;;					Message: `endpoints for service/bar in "foo" have no addresses`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:           "remote",
0000000000000000000000000000000000000000;;				apiServiceName: "remote.group",
0000000000000000000000000000000000000000;;				apiServices:    []*apiregistration.APIService{newRemoteAPIService("remote.group")},
0000000000000000000000000000000000000000;;				services:       []*v1.Service{newService("foo", "bar")},
0000000000000000000000000000000000000000;;				endpoints:      []*v1.Endpoints{newEndpointsWithAddress("foo", "bar")},
0000000000000000000000000000000000000000;;				expectedAvailability: apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;					Type:    apiregistration.Available,
0000000000000000000000000000000000000000;;					Status:  apiregistration.ConditionTrue,
0000000000000000000000000000000000000000;;					Reason:  "Passed",
0000000000000000000000000000000000000000;;					Message: `all checks passed`,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			fakeClient := fake.NewSimpleClientset()
0000000000000000000000000000000000000000;;			apiServiceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			serviceIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			endpointsIndexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			for _, obj := range tc.apiServices {
0000000000000000000000000000000000000000;;				apiServiceIndexer.Add(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, obj := range tc.services {
0000000000000000000000000000000000000000;;				serviceIndexer.Add(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, obj := range tc.endpoints {
0000000000000000000000000000000000000000;;				endpointsIndexer.Add(obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			c := AvailableConditionController{
0000000000000000000000000000000000000000;;				apiServiceClient: fakeClient.Apiregistration(),
0000000000000000000000000000000000000000;;				apiServiceLister: listers.NewAPIServiceLister(apiServiceIndexer),
0000000000000000000000000000000000000000;;				serviceLister:    v1listers.NewServiceLister(serviceIndexer),
0000000000000000000000000000000000000000;;				endpointsLister:  v1listers.NewEndpointsLister(endpointsIndexer),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.sync(tc.apiServiceName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// ought to have one action writing status
0000000000000000000000000000000000000000;;			if e, a := 1, len(fakeClient.Actions()); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %v", tc.name, e, fakeClient.Actions())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			action, ok := fakeClient.Actions()[0].(clienttesting.UpdateAction)
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("%v got %v", tc.name, ok)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if e, a := 1, len(action.GetObject().(*apiregistration.APIService).Status.Conditions); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %v", tc.name, e, action.GetObject())
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			condition := action.GetObject().(*apiregistration.APIService).Status.Conditions[0]
0000000000000000000000000000000000000000;;			if e, a := tc.expectedAvailability.Type, condition.Type; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %#v", tc.name, e, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedAvailability.Status, condition.Status; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %#v", tc.name, e, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedAvailability.Reason, condition.Reason; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %#v", tc.name, e, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := tc.expectedAvailability.Message, condition.Message; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%v expected %v, got %#v", tc.name, e, condition)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
