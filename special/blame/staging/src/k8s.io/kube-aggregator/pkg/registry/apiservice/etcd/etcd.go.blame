0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
a95fc5c68e1689a41f98ab86d1893c0081cdb98b;cmd/kubernetes-discovery/pkg/registry/apiservice/etcd/etcd.go[cmd/kubernetes-discovery/pkg/registry/apiservice/etcd/etcd.go][staging/src/k8s.io/kube-aggregator/pkg/registry/apiservice/etcd/etcd.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package etcd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/generic"
0000000000000000000000000000000000000000;;		genericregistry "k8s.io/apiserver/pkg/registry/generic/registry"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/registry/rest"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/registry/apiservice"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rest implements a RESTStorage for API services against etcd
0000000000000000000000000000000000000000;;	type REST struct {
0000000000000000000000000000000000000000;;		*genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewREST returns a RESTStorage object that will work against API services.
0000000000000000000000000000000000000000;;	func NewREST(scheme *runtime.Scheme, optsGetter generic.RESTOptionsGetter) *REST {
0000000000000000000000000000000000000000;;		strategy := apiservice.NewStrategy(scheme)
0000000000000000000000000000000000000000;;		store := &genericregistry.Store{
0000000000000000000000000000000000000000;;			Copier:            scheme,
0000000000000000000000000000000000000000;;			NewFunc:           func() runtime.Object { return &apiregistration.APIService{} },
0000000000000000000000000000000000000000;;			NewListFunc:       func() runtime.Object { return &apiregistration.APIServiceList{} },
0000000000000000000000000000000000000000;;			PredicateFunc:     apiservice.MatchAPIService,
0000000000000000000000000000000000000000;;			QualifiedResource: apiregistration.Resource("apiservices"),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			CreateStrategy: strategy,
0000000000000000000000000000000000000000;;			UpdateStrategy: strategy,
0000000000000000000000000000000000000000;;			DeleteStrategy: strategy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		options := &generic.StoreOptions{RESTOptions: optsGetter, AttrFunc: apiservice.GetAttrs}
0000000000000000000000000000000000000000;;		if err := store.CompleteWithOptions(options); err != nil {
0000000000000000000000000000000000000000;;			panic(err) // TODO: Propagate error up
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &REST{store}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewStatusREST makes a RESTStorage for status that has more limited options.
0000000000000000000000000000000000000000;;	// It is based on the original REST so that we can share the same underlying store
0000000000000000000000000000000000000000;;	func NewStatusREST(scheme *runtime.Scheme, rest *REST) *StatusREST {
0000000000000000000000000000000000000000;;		statusStore := *rest.Store
0000000000000000000000000000000000000000;;		statusStore.CreateStrategy = nil
0000000000000000000000000000000000000000;;		statusStore.DeleteStrategy = nil
0000000000000000000000000000000000000000;;		statusStore.UpdateStrategy = apiservice.NewStatusStrategy(scheme)
0000000000000000000000000000000000000000;;		return &StatusREST{store: &statusStore}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatusREST struct {
0000000000000000000000000000000000000000;;		store *genericregistry.Store
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ = rest.Updater(&StatusREST{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *StatusREST) New() runtime.Object {
0000000000000000000000000000000000000000;;		return &apiregistration.APIService{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update alters the status subset of an object.
0000000000000000000000000000000000000000;;	func (r *StatusREST) Update(ctx genericapirequest.Context, name string, objInfo rest.UpdatedObjectInfo) (runtime.Object, bool, error) {
0000000000000000000000000000000000000000;;		return r.store.Update(ctx, name, objInfo)
0000000000000000000000000000000000000000;;	}
