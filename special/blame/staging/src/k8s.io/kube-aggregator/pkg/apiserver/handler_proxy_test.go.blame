0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
09f1f01b22f6589767420d358a8d96c52abb423b;cmd/kubernetes-discovery/pkg/apiserver/handler_proxy_test.go[cmd/kubernetes-discovery/pkg/apiserver/handler_proxy_test.go][staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/authentication/user"
0000000000000000000000000000000000000000;;		genericapirequest "k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type targetHTTPHandler struct {
0000000000000000000000000000000000000000;;		called  bool
0000000000000000000000000000000000000000;;		headers map[string][]string
0000000000000000000000000000000000000000;;		path    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *targetHTTPHandler) Reset() {
0000000000000000000000000000000000000000;;		d.path = ""
0000000000000000000000000000000000000000;;		d.called = false
0000000000000000000000000000000000000000;;		d.headers = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *targetHTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		d.path = r.URL.Path
0000000000000000000000000000000000000000;;		d.called = true
0000000000000000000000000000000000000000;;		d.headers = r.Header
0000000000000000000000000000000000000000;;		w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeRequestContextMapper struct {
0000000000000000000000000000000000000000;;		user user.Info
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeRequestContextMapper) Get(req *http.Request) (genericapirequest.Context, bool) {
0000000000000000000000000000000000000000;;		ctx := genericapirequest.NewContext()
0000000000000000000000000000000000000000;;		if m.user != nil {
0000000000000000000000000000000000000000;;			ctx = genericapirequest.WithUser(ctx, m.user)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resolver := &genericapirequest.RequestInfoFactory{
0000000000000000000000000000000000000000;;			APIPrefixes:          sets.NewString("api", "apis"),
0000000000000000000000000000000000000000;;			GrouplessAPIPrefixes: sets.NewString("api"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info, err := resolver.NewRequestInfo(req)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			ctx = genericapirequest.WithRequestInfo(ctx, info)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ctx, true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*fakeRequestContextMapper) Update(req *http.Request, context genericapirequest.Context) error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mockedRouter struct {
0000000000000000000000000000000000000000;;		destinationHost string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *mockedRouter) ResolveEndpoint(namespace, name string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		return &url.URL{
0000000000000000000000000000000000000000;;			Scheme: "https",
0000000000000000000000000000000000000000;;			Host:   r.destinationHost,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestProxyHandler(t *testing.T) {
0000000000000000000000000000000000000000;;		target := &targetHTTPHandler{}
0000000000000000000000000000000000000000;;		targetServer := httptest.NewTLSServer(target)
0000000000000000000000000000000000000000;;		defer targetServer.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tests := map[string]struct {
0000000000000000000000000000000000000000;;			user       user.Info
0000000000000000000000000000000000000000;;			path       string
0000000000000000000000000000000000000000;;			apiService *apiregistration.APIService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expectedStatusCode int
0000000000000000000000000000000000000000;;			expectedBody       string
0000000000000000000000000000000000000000;;			expectedCalled     bool
0000000000000000000000000000000000000000;;			expectedHeaders    map[string][]string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"no target": {
0000000000000000000000000000000000000000;;				expectedStatusCode: http.StatusNotFound,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"no user": {
0000000000000000000000000000000000000000;;				apiService: &apiregistration.APIService{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;					Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;						Service: &apiregistration.ServiceReference{},
0000000000000000000000000000000000000000;;						Group:   "foo",
0000000000000000000000000000000000000000;;						Version: "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatusCode: http.StatusInternalServerError,
0000000000000000000000000000000000000000;;				expectedBody:       "missing user",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"proxy with user": {
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "username",
0000000000000000000000000000000000000000;;					Groups: []string{"one", "two"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				path: "/request/path",
0000000000000000000000000000000000000000;;				apiService: &apiregistration.APIService{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;					Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;						Service:               &apiregistration.ServiceReference{},
0000000000000000000000000000000000000000;;						Group:                 "foo",
0000000000000000000000000000000000000000;;						Version:               "v1",
0000000000000000000000000000000000000000;;						InsecureSkipTLSVerify: true,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatusCode: http.StatusOK,
0000000000000000000000000000000000000000;;				expectedCalled:     true,
0000000000000000000000000000000000000000;;				expectedHeaders: map[string][]string{
0000000000000000000000000000000000000000;;					"X-Forwarded-Proto": {"https"},
0000000000000000000000000000000000000000;;					"X-Forwarded-Uri":   {"/request/path"},
0000000000000000000000000000000000000000;;					"X-Forwarded-For":   {"127.0.0.1"},
0000000000000000000000000000000000000000;;					"X-Remote-User":     {"username"},
0000000000000000000000000000000000000000;;					"User-Agent":        {"Go-http-client/1.1"},
0000000000000000000000000000000000000000;;					"Accept-Encoding":   {"gzip"},
0000000000000000000000000000000000000000;;					"X-Remote-Group":    {"one", "two"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"fail on bad serving cert": {
0000000000000000000000000000000000000000;;				user: &user.DefaultInfo{
0000000000000000000000000000000000000000;;					Name:   "username",
0000000000000000000000000000000000000000;;					Groups: []string{"one", "two"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				path: "/request/path",
0000000000000000000000000000000000000000;;				apiService: &apiregistration.APIService{
0000000000000000000000000000000000000000;;					ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;					Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;						Service: &apiregistration.ServiceReference{},
0000000000000000000000000000000000000000;;						Group:   "foo",
0000000000000000000000000000000000000000;;						Version: "v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expectedStatusCode: http.StatusServiceUnavailable,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for name, tc := range tests {
0000000000000000000000000000000000000000;;			target.Reset()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func() {
0000000000000000000000000000000000000000;;				handler := &proxyHandler{
0000000000000000000000000000000000000000;;					localDelegate:   http.NewServeMux(),
0000000000000000000000000000000000000000;;					serviceResolver: &mockedRouter{destinationHost: targetServer.Listener.Addr().String()},
0000000000000000000000000000000000000000;;					proxyTransport:  &http.Transport{},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				handler.contextMapper = &fakeRequestContextMapper{user: tc.user}
0000000000000000000000000000000000000000;;				server := httptest.NewServer(handler)
0000000000000000000000000000000000000000;;				defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if tc.apiService != nil {
0000000000000000000000000000000000000000;;					handler.updateAPIService(tc.apiService)
0000000000000000000000000000000000000000;;					curr := handler.handlingInfo.Load().(proxyHandlingInfo)
0000000000000000000000000000000000000000;;					handler.handlingInfo.Store(curr)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				resp, err := http.Get(server.URL + tc.path)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %v", name, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := tc.expectedStatusCode, resp.StatusCode; e != a {
0000000000000000000000000000000000000000;;					body, _ := httputil.DumpResponse(resp, true)
0000000000000000000000000000000000000000;;					t.Logf("%s: %v", name, string(body))
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				bytes, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("%s: %v", name, err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !strings.Contains(string(bytes), tc.expectedBody) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected %q, got %q", name, tc.expectedBody, string(bytes))
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if e, a := tc.expectedCalled, target.called; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// this varies every test
0000000000000000000000000000000000000000;;				delete(target.headers, "X-Forwarded-Host")
0000000000000000000000000000000000000000;;				if e, a := tc.expectedHeaders, target.headers; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected %v, got %v", name, e, a)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
