0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
e1055a247470107cce37d4eda6f79dd384b6521d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/util/proxy"
0000000000000000000000000000000000000000;;		listersv1 "k8s.io/client-go/listers/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A ServiceResolver knows how to get a URL given a service.
0000000000000000000000000000000000000000;;	type ServiceResolver interface {
0000000000000000000000000000000000000000;;		ResolveEndpoint(namespace, name string) (*url.URL, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEndpointServiceResolver returns a ServiceResolver that chooses one of the
0000000000000000000000000000000000000000;;	// service's endpoints.
0000000000000000000000000000000000000000;;	func NewEndpointServiceResolver(services listersv1.ServiceLister, endpoints listersv1.EndpointsLister) ServiceResolver {
0000000000000000000000000000000000000000;;		return &aggregatorEndpointRouting{
0000000000000000000000000000000000000000;;			services:  services,
0000000000000000000000000000000000000000;;			endpoints: endpoints,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type aggregatorEndpointRouting struct {
0000000000000000000000000000000000000000;;		services  listersv1.ServiceLister
0000000000000000000000000000000000000000;;		endpoints listersv1.EndpointsLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *aggregatorEndpointRouting) ResolveEndpoint(namespace, name string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		return proxy.ResolveEndpoint(r.services, r.endpoints, namespace, name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewEndpointServiceResolver returns a ServiceResolver that directly calls the
0000000000000000000000000000000000000000;;	// service's cluster IP.
0000000000000000000000000000000000000000;;	func NewClusterIPServiceResolver(services listersv1.ServiceLister) ServiceResolver {
0000000000000000000000000000000000000000;;		return &aggregatorClusterRouting{
0000000000000000000000000000000000000000;;			services: services,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type aggregatorClusterRouting struct {
0000000000000000000000000000000000000000;;		services listersv1.ServiceLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *aggregatorClusterRouting) ResolveEndpoint(namespace, name string) (*url.URL, error) {
0000000000000000000000000000000000000000;;		return proxy.ResolveCluster(r.services, namespace, name)
0000000000000000000000000000000000000000;;	}
