0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
434b5f0a908cabe13cf692cbf6af57970c14f900;cmd/kubernetes-discovery/pkg/apiserver/handler_apis_test.go[cmd/kubernetes-discovery/pkg/apiserver/handler_apis_test.go][staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_apis_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package apiserver
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/apiserver/pkg/endpoints/request"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/kube-aggregator/pkg/apis/apiregistration"
0000000000000000000000000000000000000000;;		listers "k8s.io/kube-aggregator/pkg/client/listers/apiregistration/internalversion"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIs(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			apiservices []*apiregistration.APIService
0000000000000000000000000000000000000000;;			expected    *metav1.APIGroupList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:        "empty",
0000000000000000000000000000000000000000;;				apiservices: []*apiregistration.APIService{},
0000000000000000000000000000000000000000;;				expected: &metav1.APIGroupList{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{Kind: "APIGroupList", APIVersion: "v1"},
0000000000000000000000000000000000000000;;					Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;						discoveryGroup,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "simple add",
0000000000000000000000000000000000000000;;				apiservices: []*apiregistration.APIService{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "foo",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 11,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.bar"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "bar",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 10,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &metav1.APIGroupList{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{Kind: "APIGroupList", APIVersion: "v1"},
0000000000000000000000000000000000000000;;					Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;						discoveryGroup,
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "foo",
0000000000000000000000000000000000000000;;							Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "foo/v1",
0000000000000000000000000000000000000000;;									Version:      "v1",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								GroupVersion: "foo/v1",
0000000000000000000000000000000000000000;;								Version:      "v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "bar",
0000000000000000000000000000000000000000;;							Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "bar/v1",
0000000000000000000000000000000000000000;;									Version:      "v1",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								GroupVersion: "bar/v1",
0000000000000000000000000000000000000000;;								Version:      "v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "sorting",
0000000000000000000000000000000000000000;;				apiservices: []*apiregistration.APIService{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "foo",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 20,
0000000000000000000000000000000000000000;;							VersionPriority:      10,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v2.bar"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "bar",
0000000000000000000000000000000000000000;;							Version:              "v2",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 11,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v2.foo"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "foo",
0000000000000000000000000000000000000000;;							Version:              "v2",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 1,
0000000000000000000000000000000000000000;;							VersionPriority:      15,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.bar"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "bar",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 11,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &metav1.APIGroupList{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{Kind: "APIGroupList", APIVersion: "v1"},
0000000000000000000000000000000000000000;;					Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;						discoveryGroup,
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "foo",
0000000000000000000000000000000000000000;;							Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "foo/v2",
0000000000000000000000000000000000000000;;									Version:      "v2",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "foo/v1",
0000000000000000000000000000000000000000;;									Version:      "v1",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								GroupVersion: "foo/v2",
0000000000000000000000000000000000000000;;								Version:      "v2",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name: "bar",
0000000000000000000000000000000000000000;;							Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "bar/v1",
0000000000000000000000000000000000000000;;									Version:      "v1",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									GroupVersion: "bar/v2",
0000000000000000000000000000000000000000;;									Version:      "v2",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								GroupVersion: "bar/v1",
0000000000000000000000000000000000000000;;								Version:      "v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;			indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			handler := &apisHandler{
0000000000000000000000000000000000000000;;				codecs: Codecs,
0000000000000000000000000000000000000000;;				lister: listers.NewAPIServiceLister(indexer),
0000000000000000000000000000000000000000;;				mapper: mapper,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, o := range tc.apiservices {
0000000000000000000000000000000000000000;;				indexer.Add(o)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			server := httptest.NewServer(request.WithRequestContext(handler, mapper))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := http.Get(server.URL + "/apis")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			bytes, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actual := &metav1.APIGroupList{}
0000000000000000000000000000000000000000;;			if err := runtime.DecodeInto(Codecs.UniversalDecoder(), bytes, actual); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(tc.expected, actual) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, diff.ObjectDiff(tc.expected, actual))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIGroupMissing(t *testing.T) {
0000000000000000000000000000000000000000;;		mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;		indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		handler := &apiGroupHandler{
0000000000000000000000000000000000000000;;			codecs:    Codecs,
0000000000000000000000000000000000000000;;			lister:    listers.NewAPIServiceLister(indexer),
0000000000000000000000000000000000000000;;			groupName: "groupName",
0000000000000000000000000000000000000000;;			delegate: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusForbidden)
0000000000000000000000000000000000000000;;			}),
0000000000000000000000000000000000000000;;			contextMapper: mapper,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(request.WithRequestContext(handler, mapper))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// this call should delegate
0000000000000000000000000000000000000000;;		resp, err := http.Get(server.URL + "/apis/groupName/foo")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusForbidden {
0000000000000000000000000000000000000000;;			t.Fatalf("expected %v, got %v", http.StatusForbidden, resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// groupName still has no api services for it (like it was deleted), it should delegate
0000000000000000000000000000000000000000;;		resp, err = http.Get(server.URL + "/apis/groupName/")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusForbidden {
0000000000000000000000000000000000000000;;			t.Fatalf("expected %v, got %v", http.StatusForbidden, resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// missing group should delegate still has no api services for it (like it was deleted)
0000000000000000000000000000000000000000;;		resp, err = http.Get(server.URL + "/apis/missing")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if resp.StatusCode != http.StatusForbidden {
0000000000000000000000000000000000000000;;			t.Fatalf("expected %v, got %v", http.StatusForbidden, resp.StatusCode)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAPIGroup(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			name        string
0000000000000000000000000000000000000000;;			group       string
0000000000000000000000000000000000000000;;			apiservices []*apiregistration.APIService
0000000000000000000000000000000000000000;;			expected    *metav1.APIGroup
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:  "sorting",
0000000000000000000000000000000000000000;;				group: "foo",
0000000000000000000000000000000000000000;;				apiservices: []*apiregistration.APIService{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.foo"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "foo",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 20,
0000000000000000000000000000000000000000;;							VersionPriority:      10,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v2.bar"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "bar",
0000000000000000000000000000000000000000;;							Version:              "v2",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 11,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v2.foo"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "foo",
0000000000000000000000000000000000000000;;							Version:              "v2",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 1,
0000000000000000000000000000000000000000;;							VersionPriority:      15,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "v1.bar"},
0000000000000000000000000000000000000000;;						Spec: apiregistration.APIServiceSpec{
0000000000000000000000000000000000000000;;							Service: &apiregistration.ServiceReference{
0000000000000000000000000000000000000000;;								Namespace: "ns",
0000000000000000000000000000000000000000;;								Name:      "api",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;							Group:                "bar",
0000000000000000000000000000000000000000;;							Version:              "v1",
0000000000000000000000000000000000000000;;							GroupPriorityMinimum: 11,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						Status: apiregistration.APIServiceStatus{
0000000000000000000000000000000000000000;;							Conditions: []apiregistration.APIServiceCondition{
0000000000000000000000000000000000000000;;								{Type: apiregistration.Available, Status: apiregistration.ConditionTrue},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: &metav1.APIGroup{
0000000000000000000000000000000000000000;;					TypeMeta: metav1.TypeMeta{Kind: "APIGroup", APIVersion: "v1"},
0000000000000000000000000000000000000000;;					Name:     "foo",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "foo/v2",
0000000000000000000000000000000000000000;;							Version:      "v2",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							GroupVersion: "foo/v1",
0000000000000000000000000000000000000000;;							Version:      "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						GroupVersion: "foo/v2",
0000000000000000000000000000000000000000;;						Version:      "v2",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tests {
0000000000000000000000000000000000000000;;			mapper := request.NewRequestContextMapper()
0000000000000000000000000000000000000000;;			indexer := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;			handler := &apiGroupHandler{
0000000000000000000000000000000000000000;;				codecs:        Codecs,
0000000000000000000000000000000000000000;;				lister:        listers.NewAPIServiceLister(indexer),
0000000000000000000000000000000000000000;;				groupName:     "foo",
0000000000000000000000000000000000000000;;				contextMapper: mapper,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, o := range tc.apiservices {
0000000000000000000000000000000000000000;;				indexer.Add(o)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			server := httptest.NewServer(request.WithRequestContext(handler, mapper))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			resp, err := http.Get(server.URL + "/apis/" + tc.group)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if resp.StatusCode != http.StatusOK {
0000000000000000000000000000000000000000;;				response, _ := httputil.DumpResponse(resp, true)
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, string(response))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			bytes, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			actual := &metav1.APIGroup{}
0000000000000000000000000000000000000000;;			if err := runtime.DecodeInto(Codecs.UniversalDecoder(), bytes, actual); err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !apiequality.Semantic.DeepEqual(tc.expected, actual) {
0000000000000000000000000000000000000000;;				t.Errorf("%s: %v", tc.name, diff.ObjectDiff(tc.expected, actual))
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
