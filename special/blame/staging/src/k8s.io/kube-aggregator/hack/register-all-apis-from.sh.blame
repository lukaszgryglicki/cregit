0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Copyright 2017 The Kubernetes Authors.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	# you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	# You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	#     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	# distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	# See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	# limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	set -o errexit
0000000000000000000000000000000000000000;;	set -o nounset
0000000000000000000000000000000000000000;;	set -o pipefail
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if LANG=C sed --help 2>&1 | grep -q GNU; then
0000000000000000000000000000000000000000;;	  SED="sed"
0000000000000000000000000000000000000000;;	elif which gsed &>/dev/null; then
0000000000000000000000000000000000000000;;	  SED="gsed"
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  echo "Failed to find GNU sed as sed or gsed. If you are on Mac: brew install gnu-sed." >&2
0000000000000000000000000000000000000000;;	  exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	dir=$(mktemp -d "${TMPDIR:-/tmp/}$(basename 0).XXXXXXXXXXXX")
0000000000000000000000000000000000000000;;	# Register function to be called on EXIT to remove generated binary.
0000000000000000000000000000000000000000;;	function cleanup {
0000000000000000000000000000000000000000;;	  rm -rf "${dir}"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	trap cleanup EXIT
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	scriptDir=$(dirname "${BASH_SOURCE}")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# this uses discovery from a kube-like API server to register ALL the API versions that server provides
0000000000000000000000000000000000000000;;	# first argument is reference to kube-config file that points the API server you're adding from
0000000000000000000000000000000000000000;;	# second argument is the service namespace
0000000000000000000000000000000000000000;;	# third argument is the service name
0000000000000000000000000000000000000000;;	# fourth argument is reference to kube-config file that points to the aggregator you're using
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	FROM_KUBECONFIG=${1}
0000000000000000000000000000000000000000;;	SERVICE_NAMESPACE=${2}
0000000000000000000000000000000000000000;;	SERVICE_NAME=${3}
0000000000000000000000000000000000000000;;	AGG_KUBECONFIG=${4}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	caBundle=$(base64 /var/run/kubernetes/server-ca.crt | awk 'BEGIN{ORS="";} {print}')
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# if we have a /api endpoint, then we need to register that
0000000000000000000000000000000000000000;;	if kubectl --kubeconfig=${FROM_KUBECONFIG} get --raw / | grep -q /api/v1; then
0000000000000000000000000000000000000000;;		group=""
0000000000000000000000000000000000000000;;		version="v1"
0000000000000000000000000000000000000000;;		resourceName=${version}.${group}
0000000000000000000000000000000000000000;;		resourceFileName=${dir}/${resourceName}.yaml
0000000000000000000000000000000000000000;;		cp ${scriptDir}/apiservice-template.yaml ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/RESOURCE_NAME/${resourceName}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/API_GROUP/${group}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/API_VERSION/${version}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/SERVICE_NAMESPACE/${SERVICE_NAMESPACE}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/SERVICE_NAME/${SERVICE_NAME}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/CA_BUNDLE/${caBundle}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		echo "registering ${resourceName} using ${resourceFileName}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubectl --kubeconfig=${AGG_KUBECONFIG} create -f ${resourceFileName}
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	groupVersions=( $(kubectl --kubeconfig=${FROM_KUBECONFIG} get --raw / | grep /apis/ | sed 's/",.*//' | sed 's|.*"/apis/||' | grep '/') )
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	for groupVersion in "${groupVersions[@]}"; do
0000000000000000000000000000000000000000;;		group=$(echo $groupVersion | awk -F/ '{print $1}')
0000000000000000000000000000000000000000;;		version=$(echo $groupVersion | awk -F/ '{print $2}')
0000000000000000000000000000000000000000;;		resourceName=${version}.${group}
0000000000000000000000000000000000000000;;		resourceFileName=${dir}/${resourceName}.yaml
0000000000000000000000000000000000000000;;		cp ${scriptDir}/apiservice-template.yaml ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/RESOURCE_NAME/${resourceName}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/API_GROUP/${group}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/API_VERSION/${version}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/SERVICE_NAMESPACE/${SERVICE_NAMESPACE}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/SERVICE_NAME/${SERVICE_NAME}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		${SED} -i "s/CA_BUNDLE/${caBundle}/" ${resourceFileName}
0000000000000000000000000000000000000000;;		echo "registering ${resourceName} using ${resourceFileName}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kubectl --kubeconfig=${AGG_KUBECONFIG} create -f ${resourceFileName}
0000000000000000000000000000000000000000;;	done
