0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/apis/metrics/types.go[vendor/k8s.io/metrics/pkg/apis/metrics/types.go][staging/src/k8s.io/metrics/pkg/apis/metrics/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +resourceName=nodes
0000000000000000000000000000000000000000;;	// +readonly=true
0000000000000000000000000000000000000000;;	// +nonNamespaced=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resource usage metrics of a node.
0000000000000000000000000000000000000000;;	type NodeMetrics struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The following fields define time interval from which metrics were
0000000000000000000000000000000000000000;;		// collected from the interval [Timestamp-Window, Timestamp].
0000000000000000000000000000000000000000;;		Timestamp metav1.Time
0000000000000000000000000000000000000000;;		Window    metav1.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The memory usage is the memory working set.
0000000000000000000000000000000000000000;;		Usage ResourceList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeMetricsList is a list of NodeMetrics.
0000000000000000000000000000000000000000;;	type NodeMetricsList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of node metrics.
0000000000000000000000000000000000000000;;		Items []NodeMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +genclient=true
0000000000000000000000000000000000000000;;	// +resourceName=pods
0000000000000000000000000000000000000000;;	// +readonly=true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resource usage metrics of a pod.
0000000000000000000000000000000000000000;;	type PodMetrics struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		metav1.ObjectMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The following fields define time interval from which metrics were
0000000000000000000000000000000000000000;;		// collected from the interval [Timestamp-Window, Timestamp].
0000000000000000000000000000000000000000;;		Timestamp metav1.Time
0000000000000000000000000000000000000000;;		Window    metav1.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metrics for all containers are collected within the same time window.
0000000000000000000000000000000000000000;;		Containers []ContainerMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodMetricsList is a list of PodMetrics.
0000000000000000000000000000000000000000;;	type PodMetricsList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta
0000000000000000000000000000000000000000;;		// Standard list metadata.
0000000000000000000000000000000000000000;;		// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
0000000000000000000000000000000000000000;;		metav1.ListMeta
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// List of pod metrics.
0000000000000000000000000000000000000000;;		Items []PodMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// resource usage metrics of a container.
0000000000000000000000000000000000000000;;	type ContainerMetrics struct {
0000000000000000000000000000000000000000;;		// Container name corresponding to the one from pod.spec.containers.
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		// The memory usage is the memory working set.
0000000000000000000000000000000000000000;;		Usage ResourceList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: ResourceName and ResourceList are copied from
0000000000000000000000000000000000000000;;	// k8s.io/kubernetes/pkg/api/types.go. We cannot depend on
0000000000000000000000000000000000000000;;	// k8s.io/kubernetes/pkg/api because that creates cyclic dependency between
0000000000000000000000000000000000000000;;	// k8s.io/metrics and k8s.io/kubernetes. We cannot depend on
0000000000000000000000000000000000000000;;	// k8s.io/client-go/pkg/api because the package is going to be deprecated soon.
0000000000000000000000000000000000000000;;	// There is no need to keep them exact copies. Each repo can define its own
0000000000000000000000000000000000000000;;	// internal objects.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceList is a set of (resource name, quantity) pairs.
0000000000000000000000000000000000000000;;	type ResourceList map[ResourceName]resource.Quantity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceName is the name identifying various resources in a ResourceList.
0000000000000000000000000000000000000000;;	type ResourceName string
