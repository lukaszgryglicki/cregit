0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/apis/custom_metrics/types.go[vendor/k8s.io/metrics/pkg/apis/custom_metrics/types.go][staging/src/k8s.io/metrics/pkg/apis/custom_metrics/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package custom_metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/resource"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// a list of values for a given metric for some set of objects
0000000000000000000000000000000000000000;;	type MetricValueList struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;		metav1.ListMeta `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the value of the metric across the described objects
0000000000000000000000000000000000000000;;		Items []MetricValue `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// a metric value for some object
0000000000000000000000000000000000000000;;	type MetricValue struct {
0000000000000000000000000000000000000000;;		metav1.TypeMeta `json:",inline"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// a reference to the described object
0000000000000000000000000000000000000000;;		DescribedObject ObjectReference `json:"describedObject"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the name of the metric
0000000000000000000000000000000000000000;;		MetricName string `json:"metricName"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// indicates the time at which the metrics were produced
0000000000000000000000000000000000000000;;		Timestamp metav1.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// indicates the window ([Timestamp-Window, Timestamp]) from
0000000000000000000000000000000000000000;;		// which these metrics were calculated, when returning rate
0000000000000000000000000000000000000000;;		// metrics calculated from cumulative metrics (or zero for
0000000000000000000000000000000000000000;;		// non-calculated instantaneous metrics).
0000000000000000000000000000000000000000;;		WindowSeconds *int64 `json:"window,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the value of the metric for this
0000000000000000000000000000000000000000;;		Value resource.Quantity `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// allObjects is a wildcard used to select metrics
0000000000000000000000000000000000000000;;	// for all objects matching the given label selector
0000000000000000000000000000000000000000;;	const AllObjects = "*"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NOTE: ObjectReference is copied from k8s.io/kubernetes/pkg/api/types.go. We
0000000000000000000000000000000000000000;;	// cannot depend on k8s.io/kubernetes/pkg/api because that creates cyclic
0000000000000000000000000000000000000000;;	// dependency between k8s.io/metrics and k8s.io/kubernetes. We cannot depend on
0000000000000000000000000000000000000000;;	// k8s.io/client-go/pkg/api because the package is going to be deprecated soon.
0000000000000000000000000000000000000000;;	// There is no need to keep it an exact copy. Each repo can define its own
0000000000000000000000000000000000000000;;	// internal objects.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectReference contains enough information to let you inspect or modify the referred object.
0000000000000000000000000000000000000000;;	type ObjectReference struct {
0000000000000000000000000000000000000000;;		Kind            string
0000000000000000000000000000000000000000;;		Namespace       string
0000000000000000000000000000000000000000;;		Name            string
0000000000000000000000000000000000000000;;		UID             types.UID
0000000000000000000000000000000000000000;;		APIVersion      string
0000000000000000000000000000000000000000;;		ResourceVersion string
0000000000000000000000000000000000000000;;		FieldPath       string
0000000000000000000000000000000000000000;;	}
