0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/client/clientset_generated/clientset/typed/metrics/v1alpha1/nodemetrics.go[vendor/k8s.io/metrics/pkg/client/clientset_generated/clientset/typed/metrics/v1alpha1/nodemetrics.go][staging/src/k8s.io/metrics/pkg/client/clientset_generated/clientset/typed/metrics/v1alpha1/nodemetrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		v1alpha1 "k8s.io/metrics/pkg/apis/metrics/v1alpha1"
0000000000000000000000000000000000000000;;		scheme "k8s.io/metrics/pkg/client/clientset_generated/clientset/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeMetricsesGetter has a method to return a NodeMetricsInterface.
0000000000000000000000000000000000000000;;	// A group's client should implement this interface.
0000000000000000000000000000000000000000;;	type NodeMetricsesGetter interface {
0000000000000000000000000000000000000000;;		NodeMetricses() NodeMetricsInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeMetricsInterface has methods to work with NodeMetrics resources.
0000000000000000000000000000000000000000;;	type NodeMetricsInterface interface {
0000000000000000000000000000000000000000;;		Get(name string, options v1.GetOptions) (*v1alpha1.NodeMetrics, error)
0000000000000000000000000000000000000000;;		List(opts v1.ListOptions) (*v1alpha1.NodeMetricsList, error)
0000000000000000000000000000000000000000;;		Watch(opts v1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;		NodeMetricsExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// nodeMetricses implements NodeMetricsInterface
0000000000000000000000000000000000000000;;	type nodeMetricses struct {
0000000000000000000000000000000000000000;;		client rest.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newNodeMetricses returns a NodeMetricses
0000000000000000000000000000000000000000;;	func newNodeMetricses(c *MetricsV1alpha1Client) *nodeMetricses {
0000000000000000000000000000000000000000;;		return &nodeMetricses{
0000000000000000000000000000000000000000;;			client: c.RESTClient(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get takes name of the nodeMetrics, and returns the corresponding nodeMetrics object, and an error if there is any.
0000000000000000000000000000000000000000;;	func (c *nodeMetricses) Get(name string, options v1.GetOptions) (result *v1alpha1.NodeMetrics, err error) {
0000000000000000000000000000000000000000;;		result = &v1alpha1.NodeMetrics{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Resource("nodes").
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			VersionedParams(&options, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List takes label and field selectors, and returns the list of NodeMetricses that match those selectors.
0000000000000000000000000000000000000000;;	func (c *nodeMetricses) List(opts v1.ListOptions) (result *v1alpha1.NodeMetricsList, err error) {
0000000000000000000000000000000000000000;;		result = &v1alpha1.NodeMetricsList{}
0000000000000000000000000000000000000000;;		err = c.client.Get().
0000000000000000000000000000000000000000;;			Resource("nodes").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(result)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested nodeMetricses.
0000000000000000000000000000000000000000;;	func (c *nodeMetricses) Watch(opts v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		opts.Watch = true
0000000000000000000000000000000000000000;;		return c.client.Get().
0000000000000000000000000000000000000000;;			Resource("nodes").
0000000000000000000000000000000000000000;;			VersionedParams(&opts, scheme.ParameterCodec).
0000000000000000000000000000000000000000;;			Watch()
0000000000000000000000000000000000000000;;	}
