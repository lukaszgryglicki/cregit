0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/client/custom_metrics/interfaces.go[vendor/k8s.io/metrics/pkg/client/custom_metrics/interfaces.go][staging/src/k8s.io/metrics/pkg/client/custom_metrics/interfaces.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package custom_metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/apis/custom_metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CustomMetricsClient is a client for fetching metrics
0000000000000000000000000000000000000000;;	// describing both root-scoped and namespaced resources.
0000000000000000000000000000000000000000;;	type CustomMetricsClient interface {
0000000000000000000000000000000000000000;;		RootScopedMetricsGetter
0000000000000000000000000000000000000000;;		NamespacedMetricsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RootScopedMetricsGetter provides access to an interface for fetching
0000000000000000000000000000000000000000;;	// metrics describing root-scoped objects.  Note that metrics describing
0000000000000000000000000000000000000000;;	// a namespace are simply considered a special case of root-scoped metrics.
0000000000000000000000000000000000000000;;	type RootScopedMetricsGetter interface {
0000000000000000000000000000000000000000;;		RootScopedMetrics() MetricsInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamespacedMetricsGetter provides access to an interface for fetching
0000000000000000000000000000000000000000;;	// metrics describing resources in a particular namespace.
0000000000000000000000000000000000000000;;	type NamespacedMetricsGetter interface {
0000000000000000000000000000000000000000;;		NamespacedMetrics(namespace string) MetricsInterface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricsInterface provides access to metrics describing Kubernetes objects.
0000000000000000000000000000000000000000;;	type MetricsInterface interface {
0000000000000000000000000000000000000000;;		// GetForObject fetchs the given metric describing the given object.
0000000000000000000000000000000000000000;;		GetForObject(groupKind schema.GroupKind, name string, metricName string) (*v1alpha1.MetricValue, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GetForObjects fetches the given metric describing all objects of the given
0000000000000000000000000000000000000000;;		// type matching the given label selector (or simply all objects of the given type
0000000000000000000000000000000000000000;;		// if the selector is nil).
0000000000000000000000000000000000000000;;		GetForObjects(groupKind schema.GroupKind, selector labels.Selector, metricName string) (*v1alpha1.MetricValueList, error)
0000000000000000000000000000000000000000;;	}
