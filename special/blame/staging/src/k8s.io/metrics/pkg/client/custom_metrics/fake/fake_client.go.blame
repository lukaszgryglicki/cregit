0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/client/custom_metrics/fake/fake_client.go[vendor/k8s.io/metrics/pkg/client/custom_metrics/fake/fake_client.go][staging/src/k8s.io/metrics/pkg/client/custom_metrics/fake/fake_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/apis/custom_metrics/v1alpha1"
0000000000000000000000000000000000000000;;		cmclient "k8s.io/metrics/pkg/client/custom_metrics"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetForActionImpl struct {
0000000000000000000000000000000000000000;;		testing.GetAction
0000000000000000000000000000000000000000;;		MetricName    string
0000000000000000000000000000000000000000;;		LabelSelector labels.Selector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetForAction interface {
0000000000000000000000000000000000000000;;		testing.GetAction
0000000000000000000000000000000000000000;;		GetMetricName() string
0000000000000000000000000000000000000000;;		GetLabelSelector() labels.Selector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i GetForActionImpl) GetMetricName() string {
0000000000000000000000000000000000000000;;		return i.MetricName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i GetForActionImpl) GetLabelSelector() labels.Selector {
0000000000000000000000000000000000000000;;		return i.LabelSelector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (i GetForActionImpl) GetSubresource() string {
0000000000000000000000000000000000000000;;		return i.MetricName
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGetForAction(groupKind schema.GroupKind, namespace, name string, metricName string, labelSelector labels.Selector) GetForActionImpl {
0000000000000000000000000000000000000000;;		// the version doesn't matter
0000000000000000000000000000000000000000;;		gvk := groupKind.WithVersion("")
0000000000000000000000000000000000000000;;		gvr, _ := meta.UnsafeGuessKindToResource(gvk)
0000000000000000000000000000000000000000;;		groupResourceForKind := schema.GroupResource{
0000000000000000000000000000000000000000;;			Group:    gvr.Group,
0000000000000000000000000000000000000000;;			Resource: gvr.Resource,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resource := schema.GroupResource{
0000000000000000000000000000000000000000;;			Group:    v1alpha1.SchemeGroupVersion.Group,
0000000000000000000000000000000000000000;;			Resource: groupResourceForKind.String(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return GetForActionImpl{
0000000000000000000000000000000000000000;;			GetAction:     testing.NewGetAction(resource.WithVersion(""), namespace, name),
0000000000000000000000000000000000000000;;			MetricName:    metricName,
0000000000000000000000000000000000000000;;			LabelSelector: labelSelector,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootGetForAction(groupKind schema.GroupKind, name string, metricName string, labelSelector labels.Selector) GetForActionImpl {
0000000000000000000000000000000000000000;;		// the version doesn't matter
0000000000000000000000000000000000000000;;		gvk := groupKind.WithVersion("")
0000000000000000000000000000000000000000;;		gvr, _ := meta.UnsafeGuessKindToResource(gvk)
0000000000000000000000000000000000000000;;		groupResourceForKind := schema.GroupResource{
0000000000000000000000000000000000000000;;			Group:    gvr.Group,
0000000000000000000000000000000000000000;;			Resource: gvr.Resource,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resource := schema.GroupResource{
0000000000000000000000000000000000000000;;			Group:    v1alpha1.SchemeGroupVersion.Group,
0000000000000000000000000000000000000000;;			Resource: groupResourceForKind.String(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return GetForActionImpl{
0000000000000000000000000000000000000000;;			GetAction:     testing.NewRootGetAction(resource.WithVersion(""), name),
0000000000000000000000000000000000000000;;			MetricName:    metricName,
0000000000000000000000000000000000000000;;			LabelSelector: labelSelector,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeCustomMetricsClient struct {
0000000000000000000000000000000000000000;;		testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeCustomMetricsClient) RootScopedMetrics() cmclient.MetricsInterface {
0000000000000000000000000000000000000000;;		return &fakeRootScopedMetrics{
0000000000000000000000000000000000000000;;			Fake: c,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeCustomMetricsClient) NamespacedMetrics(namespace string) cmclient.MetricsInterface {
0000000000000000000000000000000000000000;;		return &fakeNamespacedMetrics{
0000000000000000000000000000000000000000;;			Fake: c,
0000000000000000000000000000000000000000;;			ns:   namespace,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeNamespacedMetrics struct {
0000000000000000000000000000000000000000;;		Fake *FakeCustomMetricsClient
0000000000000000000000000000000000000000;;		ns   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeNamespacedMetrics) GetForObject(groupKind schema.GroupKind, name string, metricName string) (*v1alpha1.MetricValue, error) {
0000000000000000000000000000000000000000;;		obj, err := m.Fake.
0000000000000000000000000000000000000000;;			Invokes(NewGetForAction(groupKind, m.ns, name, metricName, nil), &v1alpha1.MetricValueList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objList := obj.(*v1alpha1.MetricValueList)
0000000000000000000000000000000000000000;;		if len(objList.Items) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the custom metrics API server returned %v results when we asked for exactly one", len(objList.Items))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &objList.Items[0], err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeNamespacedMetrics) GetForObjects(groupKind schema.GroupKind, selector labels.Selector, metricName string) (*v1alpha1.MetricValueList, error) {
0000000000000000000000000000000000000000;;		obj, err := m.Fake.
0000000000000000000000000000000000000000;;			Invokes(NewGetForAction(groupKind, m.ns, "*", metricName, selector), &v1alpha1.MetricValueList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.MetricValueList), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeRootScopedMetrics struct {
0000000000000000000000000000000000000000;;		Fake *FakeCustomMetricsClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeRootScopedMetrics) GetForObject(groupKind schema.GroupKind, name string, metricName string) (*v1alpha1.MetricValue, error) {
0000000000000000000000000000000000000000;;		obj, err := m.Fake.
0000000000000000000000000000000000000000;;			Invokes(NewRootGetForAction(groupKind, name, metricName, nil), &v1alpha1.MetricValueList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		objList := obj.(*v1alpha1.MetricValueList)
0000000000000000000000000000000000000000;;		if len(objList.Items) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the custom metrics API server returned %v results when we asked for exactly one", len(objList.Items))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &objList.Items[0], err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *fakeRootScopedMetrics) GetForObjects(groupKind schema.GroupKind, selector labels.Selector, metricName string) (*v1alpha1.MetricValueList, error) {
0000000000000000000000000000000000000000;;		obj, err := m.Fake.
0000000000000000000000000000000000000000;;			Invokes(NewRootGetForAction(groupKind, "*", metricName, selector), &v1alpha1.MetricValueList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.MetricValueList), err
0000000000000000000000000000000000000000;;	}
