0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d03f4944f2d726b0c6add010e4732e3d9d908158;vendor/k8s.io/metrics/pkg/client/custom_metrics/client.go[vendor/k8s.io/metrics/pkg/client/custom_metrics/client.go][staging/src/k8s.io/metrics/pkg/client/custom_metrics/client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package custom_metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;		"k8s.io/metrics/pkg/apis/custom_metrics/v1alpha1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type customMetricsClient struct {
0000000000000000000000000000000000000000;;		client rest.Interface
0000000000000000000000000000000000000000;;		mapper meta.RESTMapper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client rest.Interface) CustomMetricsClient {
0000000000000000000000000000000000000000;;		return &customMetricsClient{
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (CustomMetricsClient, error) {
0000000000000000000000000000000000000000;;		configShallowCopy := *c
0000000000000000000000000000000000000000;;		if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
0000000000000000000000000000000000000000;;			configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		configShallowCopy.APIPath = "/apis"
0000000000000000000000000000000000000000;;		if configShallowCopy.UserAgent == "" {
0000000000000000000000000000000000000000;;			configShallowCopy.UserAgent = rest.DefaultKubernetesUserAgent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		configShallowCopy.GroupVersion = &v1alpha1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		configShallowCopy.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client, err := rest.RESTClientFor(&configShallowCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return New(client), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) CustomMetricsClient {
0000000000000000000000000000000000000000;;		client, err := NewForConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForMapper constucts the client with a RESTMapper, which allows more
0000000000000000000000000000000000000000;;	// accurate translation from GroupVersionKind to GroupVersionResource.
0000000000000000000000000000000000000000;;	func NewForMapper(client rest.Interface, mapper meta.RESTMapper) CustomMetricsClient {
0000000000000000000000000000000000000000;;		return &customMetricsClient{
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;			mapper: mapper,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *customMetricsClient) RootScopedMetrics() MetricsInterface {
0000000000000000000000000000000000000000;;		return &rootScopedMetrics{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *customMetricsClient) NamespacedMetrics(namespace string) MetricsInterface {
0000000000000000000000000000000000000000;;		return &namespacedMetrics{
0000000000000000000000000000000000000000;;			client:    c,
0000000000000000000000000000000000000000;;			namespace: namespace,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *customMetricsClient) qualResourceForKind(groupKind schema.GroupKind) (string, error) {
0000000000000000000000000000000000000000;;		if c.mapper == nil {
0000000000000000000000000000000000000000;;			// the version doesn't matter
0000000000000000000000000000000000000000;;			gvk := groupKind.WithVersion("")
0000000000000000000000000000000000000000;;			gvr, _ := meta.UnsafeGuessKindToResource(gvk)
0000000000000000000000000000000000000000;;			gr := gvr.GroupResource()
0000000000000000000000000000000000000000;;			return gr.String(), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// use the mapper if it's available
0000000000000000000000000000000000000000;;		mapping, err := c.mapper.RESTMapping(groupKind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("unable to map kind %s to resource: %v", groupKind.String(), err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupResource := schema.GroupResource{
0000000000000000000000000000000000000000;;			Group:    mapping.GroupVersionKind.Group,
0000000000000000000000000000000000000000;;			Resource: mapping.Resource,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return groupResource.String(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type rootScopedMetrics struct {
0000000000000000000000000000000000000000;;		client *customMetricsClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *rootScopedMetrics) getForNamespace(namespace string, metricName string) (*v1alpha1.MetricValue, error) {
0000000000000000000000000000000000000000;;		res := &v1alpha1.MetricValueList{}
0000000000000000000000000000000000000000;;		err := m.client.client.Get().
0000000000000000000000000000000000000000;;			Resource("metrics").
0000000000000000000000000000000000000000;;			Namespace(namespace).
0000000000000000000000000000000000000000;;			Name(metricName).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(res.Items) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the custom metrics API server returned %v results when we asked for exactly one", len(res.Items))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Items[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *rootScopedMetrics) GetForObject(groupKind schema.GroupKind, name string, metricName string) (*v1alpha1.MetricValue, error) {
0000000000000000000000000000000000000000;;		// handle namespace separately
0000000000000000000000000000000000000000;;		if groupKind.Kind == "Namespace" && groupKind.Group == "" {
0000000000000000000000000000000000000000;;			return m.getForNamespace(name, metricName)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceName, err := m.client.qualResourceForKind(groupKind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := &v1alpha1.MetricValueList{}
0000000000000000000000000000000000000000;;		err = m.client.client.Get().
0000000000000000000000000000000000000000;;			Resource(resourceName).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			SubResource(metricName).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(res.Items) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the custom metrics API server returned %v results when we asked for exactly one", len(res.Items))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Items[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *rootScopedMetrics) GetForObjects(groupKind schema.GroupKind, selector labels.Selector, metricName string) (*v1alpha1.MetricValueList, error) {
0000000000000000000000000000000000000000;;		// we can't wildcard-fetch for namespaces
0000000000000000000000000000000000000000;;		if groupKind.Kind == "Namespace" && groupKind.Group == "" {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("cannot fetch metrics for multiple namespaces at once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceName, err := m.client.qualResourceForKind(groupKind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := &v1alpha1.MetricValueList{}
0000000000000000000000000000000000000000;;		err = m.client.client.Get().
0000000000000000000000000000000000000000;;			Resource(resourceName).
0000000000000000000000000000000000000000;;			Name(v1alpha1.AllObjects).
0000000000000000000000000000000000000000;;			SubResource(metricName).
0000000000000000000000000000000000000000;;			LabelsSelectorParam(selector).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type namespacedMetrics struct {
0000000000000000000000000000000000000000;;		client    *customMetricsClient
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *namespacedMetrics) GetForObject(groupKind schema.GroupKind, name string, metricName string) (*v1alpha1.MetricValue, error) {
0000000000000000000000000000000000000000;;		resourceName, err := m.client.qualResourceForKind(groupKind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := &v1alpha1.MetricValueList{}
0000000000000000000000000000000000000000;;		err = m.client.client.Get().
0000000000000000000000000000000000000000;;			Resource(resourceName).
0000000000000000000000000000000000000000;;			Namespace(m.namespace).
0000000000000000000000000000000000000000;;			Name(name).
0000000000000000000000000000000000000000;;			SubResource(metricName).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(res.Items) != 1 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("the custom metrics API server returned %v results when we asked for exactly one", len(res.Items))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Items[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *namespacedMetrics) GetForObjects(groupKind schema.GroupKind, selector labels.Selector, metricName string) (*v1alpha1.MetricValueList, error) {
0000000000000000000000000000000000000000;;		resourceName, err := m.client.qualResourceForKind(groupKind)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := &v1alpha1.MetricValueList{}
0000000000000000000000000000000000000000;;		err = m.client.client.Get().
0000000000000000000000000000000000000000;;			Resource(resourceName).
0000000000000000000000000000000000000000;;			Namespace(m.namespace).
0000000000000000000000000000000000000000;;			Name(v1alpha1.AllObjects).
0000000000000000000000000000000000000000;;			SubResource(metricName).
0000000000000000000000000000000000000000;;			LabelsSelectorParam(selector).
0000000000000000000000000000000000000000;;			Do().
0000000000000000000000000000000000000000;;			Into(res)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res, nil
0000000000000000000000000000000000000000;;	}
