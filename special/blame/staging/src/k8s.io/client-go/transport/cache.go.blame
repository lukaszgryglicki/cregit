0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/transport/cache.go[staging/src/k8s.io/client-go/1.4/transport/cache.go][staging/src/k8s.io/client-go/transport/cache.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilnet "k8s.io/apimachinery/pkg/util/net"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TlsTransportCache caches TLS http.RoundTrippers different configurations. The
0000000000000000000000000000000000000000;;	// same RoundTripper will be returned for configs with identical TLS options If
0000000000000000000000000000000000000000;;	// the config has no custom TLS options, http.DefaultTransport is returned.
0000000000000000000000000000000000000000;;	type tlsTransportCache struct {
0000000000000000000000000000000000000000;;		mu         sync.Mutex
0000000000000000000000000000000000000000;;		transports map[string]*http.Transport
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const idleConnsPerHost = 25
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tlsCache = &tlsTransportCache{transports: make(map[string]*http.Transport)}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *tlsTransportCache) get(config *Config) (http.RoundTripper, error) {
0000000000000000000000000000000000000000;;		key, err := tlsConfigKey(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ensure we only create a single transport for the given TLS options
0000000000000000000000000000000000000000;;		c.mu.Lock()
0000000000000000000000000000000000000000;;		defer c.mu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// See if we already have a custom transport for this config
0000000000000000000000000000000000000000;;		if t, ok := c.transports[key]; ok {
0000000000000000000000000000000000000000;;			return t, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get the TLS options for this client config
0000000000000000000000000000000000000000;;		tlsConfig, err := TLSConfigFor(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The options didn't require a custom TLS config
0000000000000000000000000000000000000000;;		if tlsConfig == nil {
0000000000000000000000000000000000000000;;			return http.DefaultTransport, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cache a single transport for these options
0000000000000000000000000000000000000000;;		c.transports[key] = utilnet.SetTransportDefaults(&http.Transport{
0000000000000000000000000000000000000000;;			Proxy:               http.ProxyFromEnvironment,
0000000000000000000000000000000000000000;;			TLSHandshakeTimeout: 10 * time.Second,
0000000000000000000000000000000000000000;;			TLSClientConfig:     tlsConfig,
0000000000000000000000000000000000000000;;			MaxIdleConnsPerHost: idleConnsPerHost,
0000000000000000000000000000000000000000;;			Dial: (&net.Dialer{
0000000000000000000000000000000000000000;;				Timeout:   30 * time.Second,
0000000000000000000000000000000000000000;;				KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;			}).Dial,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return c.transports[key], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// tlsConfigKey returns a unique key for tls.Config objects returned from TLSConfigFor
0000000000000000000000000000000000000000;;	func tlsConfigKey(c *Config) (string, error) {
0000000000000000000000000000000000000000;;		// Make sure ca/key/cert content is loaded
0000000000000000000000000000000000000000;;		if err := loadTLSFiles(c); err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Only include the things that actually affect the tls.Config
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v/%x/%x/%x", c.TLS.Insecure, c.TLS.CAData, c.TLS.CertData, c.TLS.KeyData), nil
0000000000000000000000000000000000000000;;	}
