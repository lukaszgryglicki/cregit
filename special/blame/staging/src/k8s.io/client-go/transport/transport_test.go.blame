0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/transport/transport_test.go[staging/src/k8s.io/client-go/1.4/transport/transport_test.go][staging/src/k8s.io/client-go/transport/transport_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		rootCACert = `-----BEGIN CERTIFICATE-----
0000000000000000000000000000000000000000;;	MIIC4DCCAcqgAwIBAgIBATALBgkqhkiG9w0BAQswIzEhMB8GA1UEAwwYMTAuMTMu
0000000000000000000000000000000000000000;;	MTI5LjEwNkAxNDIxMzU5MDU4MB4XDTE1MDExNTIxNTczN1oXDTE2MDExNTIxNTcz
0000000000000000000000000000000000000000;;	OFowIzEhMB8GA1UEAwwYMTAuMTMuMTI5LjEwNkAxNDIxMzU5MDU4MIIBIjANBgkq
0000000000000000000000000000000000000000;;	hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAunDRXGwsiYWGFDlWH6kjGun+PshDGeZX
0000000000000000000000000000000000000000;;	xtx9lUnL8pIRWH3wX6f13PO9sktaOWW0T0mlo6k2bMlSLlSZgG9H6og0W6gLS3vq
0000000000000000000000000000000000000000;;	s4VavZ6DbXIwemZG2vbRwsvR+t4G6Nbwelm6F8RFnA1Fwt428pavmNQ/wgYzo+T1
0000000000000000000000000000000000000000;;	1eS+HiN4ACnSoDSx3QRWcgBkB1g6VReofVjx63i0J+w8Q/41L9GUuLqquFxu6ZnH
0000000000000000000000000000000000000000;;	60vTB55lHgFiDLjA1FkEz2dGvGh/wtnFlRvjaPC54JH2K1mPYAUXTreoeJtLJKX0
0000000000000000000000000000000000000000;;	ycoiyB24+zGCniUmgIsmQWRPaOPircexCp1BOeze82BT1LCZNTVaxQIDAQABoyMw
0000000000000000000000000000000000000000;;	ITAOBgNVHQ8BAf8EBAMCAKQwDwYDVR0TAQH/BAUwAwEB/zALBgkqhkiG9w0BAQsD
0000000000000000000000000000000000000000;;	ggEBADMxsUuAFlsYDpF4fRCzXXwrhbtj4oQwcHpbu+rnOPHCZupiafzZpDu+rw4x
0000000000000000000000000000000000000000;;	YGPnCb594bRTQn4pAu3Ac18NbLD5pV3uioAkv8oPkgr8aUhXqiv7KdDiaWm6sbAL
0000000000000000000000000000000000000000;;	EHiXVBBAFvQws10HMqMoKtO8f1XDNAUkWduakR/U6yMgvOPwS7xl0eUTqyRB6zGb
0000000000000000000000000000000000000000;;	K55q2dejiFWaFqB/y78txzvz6UlOZKE44g2JAVoJVM6kGaxh33q8/FmrL4kuN3ut
0000000000000000000000000000000000000000;;	W+MmJCVDvd4eEqPwbp7146ZWTqpIJ8lvA6wuChtqV8lhAPka2hD/LMqY8iXNmfXD
0000000000000000000000000000000000000000;;	uml0obOEy+ON91k+SWTJ3ggmF/U=
0000000000000000000000000000000000000000;;	-----END CERTIFICATE-----`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certData = `-----BEGIN CERTIFICATE-----
0000000000000000000000000000000000000000;;	MIIC6jCCAdSgAwIBAgIBCzALBgkqhkiG9w0BAQswIzEhMB8GA1UEAwwYMTAuMTMu
0000000000000000000000000000000000000000;;	MTI5LjEwNkAxNDIxMzU5MDU4MB4XDTE1MDExNTIyMDEzMVoXDTE2MDExNTIyMDEz
0000000000000000000000000000000000000000;;	MlowGzEZMBcGA1UEAxMQb3BlbnNoaWZ0LWNsaWVudDCCASIwDQYJKoZIhvcNAQEB
0000000000000000000000000000000000000000;;	BQADggEPADCCAQoCggEBAKtdhz0+uCLXw5cSYns9rU/XifFSpb/x24WDdrm72S/v
0000000000000000000000000000000000000000;;	b9BPYsAStiP148buylr1SOuNi8sTAZmlVDDIpIVwMLff+o2rKYDicn9fjbrTxTOj
0000000000000000000000000000000000000000;;	lI4pHJBH+JU3AJ0tbajupioh70jwFS0oYpwtneg2zcnE2Z4l6mhrj2okrc5Q1/X2
0000000000000000000000000000000000000000;;	I2HChtIU4JYTisObtin10QKJX01CLfYXJLa8upWzKZ4/GOcHG+eAV3jXWoXidtjb
0000000000000000000000000000000000000000;;	1Usw70amoTZ6mIVCkiu1QwCoa8+ycojGfZhvqMsAp1536ZcCul+Na+AbCv4zKS7F
0000000000000000000000000000000000000000;;	kQQaImVrXdUiFansIoofGlw/JNuoKK6ssVpS5Ic3pgcCAwEAAaM1MDMwDgYDVR0P
0000000000000000000000000000000000000000;;	AQH/BAQDAgCgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwCwYJ
0000000000000000000000000000000000000000;;	KoZIhvcNAQELA4IBAQCKLREH7bXtXtZ+8vI6cjD7W3QikiArGqbl36bAhhWsJLp/
0000000000000000000000000000000000000000;;	p/ndKz39iFNaiZ3GlwIURWOOKx3y3GA0x9m8FR+Llthf0EQ8sUjnwaknWs0Y6DQ3
0000000000000000000000000000000000000000;;	jjPFZOpV3KPCFrdMJ3++E3MgwFC/Ih/N2ebFX9EcV9Vcc6oVWMdwT0fsrhu683rq
0000000000000000000000000000000000000000;;	6GSR/3iVX1G/pmOiuaR0fNUaCyCfYrnI4zHBDgSfnlm3vIvN2lrsR/DQBakNL8DJ
0000000000000000000000000000000000000000;;	HBgKxMGeUPoneBv+c8DMXIL0EhaFXRlBv9QW45/GiAIOuyFJ0i6hCtGZpJjq4OpQ
0000000000000000000000000000000000000000;;	BRjCI+izPzFTjsxD4aORE+WOkyWFCGPWKfNejfw0
0000000000000000000000000000000000000000;;	-----END CERTIFICATE-----`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyData = `-----BEGIN RSA PRIVATE KEY-----
0000000000000000000000000000000000000000;;	MIIEowIBAAKCAQEAq12HPT64ItfDlxJiez2tT9eJ8VKlv/HbhYN2ubvZL+9v0E9i
0000000000000000000000000000000000000000;;	wBK2I/Xjxu7KWvVI642LyxMBmaVUMMikhXAwt9/6jaspgOJyf1+NutPFM6OUjikc
0000000000000000000000000000000000000000;;	kEf4lTcAnS1tqO6mKiHvSPAVLShinC2d6DbNycTZniXqaGuPaiStzlDX9fYjYcKG
0000000000000000000000000000000000000000;;	0hTglhOKw5u2KfXRAolfTUIt9hcktry6lbMpnj8Y5wcb54BXeNdaheJ22NvVSzDv
0000000000000000000000000000000000000000;;	RqahNnqYhUKSK7VDAKhrz7JyiMZ9mG+oywCnXnfplwK6X41r4BsK/jMpLsWRBBoi
0000000000000000000000000000000000000000;;	ZWtd1SIVqewiih8aXD8k26gorqyxWlLkhzemBwIDAQABAoIBAD2XYRs3JrGHQUpU
0000000000000000000000000000000000000000;;	FkdbVKZkvrSY0vAZOqBTLuH0zUv4UATb8487anGkWBjRDLQCgxH+jucPTrztekQK
0000000000000000000000000000000000000000;;	aW94clo0S3aNtV4YhbSYIHWs1a0It0UdK6ID7CmdWkAj6s0T8W8lQT7C46mWYVLm
0000000000000000000000000000000000000000;;	5mFnCTHi6aB42jZrqmEpC7sivWwuU0xqj3Ml8kkxQCGmyc9JjmCB4OrFFC8NNt6M
0000000000000000000000000000000000000000;;	ObvQkUI6Z3nO4phTbpxkE1/9dT0MmPIF7GhHVzJMS+EyyRYUDllZ0wvVSOM3qZT0
0000000000000000000000000000000000000000;;	JMUaBerkNwm9foKJ1+dv2nMKZZbJajv7suUDCfU44mVeaEO+4kmTKSGCGjjTBGkr
0000000000000000000000000000000000000000;;	7L1ySDECgYEA5ElIMhpdBzIivCuBIH8LlUeuzd93pqssO1G2Xg0jHtfM4tz7fyeI
0000000000000000000000000000000000000000;;	cr90dc8gpli24dkSxzLeg3Tn3wIj/Bu64m2TpZPZEIlukYvgdgArmRIPQVxerYey
0000000000000000000000000000000000000000;;	OkrfTNkxU1HXsYjLCdGcGXs5lmb+K/kuTcFxaMOs7jZi7La+jEONwf8CgYEAwCs/
0000000000000000000000000000000000000000;;	rUOOA0klDsWWisbivOiNPII79c9McZCNBqncCBfMUoiGe8uWDEO4TFHN60vFuVk9
0000000000000000000000000000000000000000;;	8PkwpCfvaBUX+ajvbafIfHxsnfk1M04WLGCeqQ/ym5Q4sQoQOcC1b1y9qc/xEWfg
0000000000000000000000000000000000000000;;	nIUuia0ukYRpl7qQa3tNg+BNFyjypW8zukUAC/kCgYB1/Kojuxx5q5/oQVPrx73k
0000000000000000000000000000000000000000;;	2bevD+B3c+DYh9MJqSCNwFtUpYIWpggPxoQan4LwdsmO0PKzocb/ilyNFj4i/vII
0000000000000000000000000000000000000000;;	NToqSc/WjDFpaDIKyuu9oWfhECye45NqLWhb/6VOuu4QA/Nsj7luMhIBehnEAHW+
0000000000000000000000000000000000000000;;	GkzTKM8oD1PxpEG3nPKXYQKBgQC6AuMPRt3XBl1NkCrpSBy/uObFlFaP2Enpf39S
0000000000000000000000000000000000000000;;	3OZ0Gv0XQrnSaL1kP8TMcz68rMrGX8DaWYsgytstR4W+jyy7WvZwsUu+GjTJ5aMG
0000000000000000000000000000000000000000;;	77uEcEBpIi9CBzivfn7hPccE8ZgqPf+n4i6q66yxBJflW5xhvafJqDtW2LcPNbW/
0000000000000000000000000000000000000000;;	bvzdmQKBgExALRUXpq+5dbmkdXBHtvXdRDZ6rVmrnjy4nI5bPw+1GqQqk6uAR6B/
0000000000000000000000000000000000000000;;	F6NmLCQOO4PDG/cuatNHIr2FrwTmGdEL6ObLUGWn9Oer9gJhHVqqsY5I4sEPo4XX
0000000000000000000000000000000000000000;;	stR0Yiw0buV6DL/moUO0HIM9Bjh96HJp+LxiIS6UCdIhMPp5HoQa
0000000000000000000000000000000000000000;;	-----END RSA PRIVATE KEY-----`
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNew(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := map[string]struct {
0000000000000000000000000000000000000000;;			Config  *Config
0000000000000000000000000000000000000000;;			Err     bool
0000000000000000000000000000000000000000;;			TLS     bool
0000000000000000000000000000000000000000;;			Default bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			"default transport": {
0000000000000000000000000000000000000000;;				Default: true,
0000000000000000000000000000000000000000;;				Config:  &Config{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"ca transport": {
0000000000000000000000000000000000000000;;				TLS: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData: []byte(rootCACert),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad ca file transport": {
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAFile: "invalid file",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"ca data overriding bad ca file transport": {
0000000000000000000000000000000000000000;;				TLS: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData: []byte(rootCACert),
0000000000000000000000000000000000000000;;						CAFile: "invalid file",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"cert transport": {
0000000000000000000000000000000000000000;;				TLS: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData:   []byte(rootCACert),
0000000000000000000000000000000000000000;;						CertData: []byte(certData),
0000000000000000000000000000000000000000;;						KeyData:  []byte(keyData),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad cert data transport": {
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData:   []byte(rootCACert),
0000000000000000000000000000000000000000;;						CertData: []byte(certData),
0000000000000000000000000000000000000000;;						KeyData:  []byte("bad key data"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"bad file cert transport": {
0000000000000000000000000000000000000000;;				Err: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData:   []byte(rootCACert),
0000000000000000000000000000000000000000;;						CertData: []byte(certData),
0000000000000000000000000000000000000000;;						KeyFile:  "invalid file",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"key data overriding bad file cert transport": {
0000000000000000000000000000000000000000;;				TLS: true,
0000000000000000000000000000000000000000;;				Config: &Config{
0000000000000000000000000000000000000000;;					TLS: TLSConfig{
0000000000000000000000000000000000000000;;						CAData:   []byte(rootCACert),
0000000000000000000000000000000000000000;;						CertData: []byte(certData),
0000000000000000000000000000000000000000;;						KeyData:  []byte(keyData),
0000000000000000000000000000000000000000;;						KeyFile:  "invalid file",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, testCase := range testCases {
0000000000000000000000000000000000000000;;			transport, err := New(testCase.Config)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case testCase.Err && err == nil:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected non-error", k)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case !testCase.Err && err != nil:
0000000000000000000000000000000000000000;;				t.Errorf("%s: unexpected error: %v", k, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case testCase.Default && transport != http.DefaultTransport:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected the default transport, got %#v", k, transport)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case !testCase.Default && transport == http.DefaultTransport:
0000000000000000000000000000000000000000;;				t.Errorf("%s: expected non-default transport, got %#v", k, transport)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// We only know how to check TLSConfig on http.Transports
0000000000000000000000000000000000000000;;			if transport, ok := transport.(*http.Transport); ok {
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case testCase.TLS && transport.TLSClientConfig == nil:
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected TLSClientConfig, got %#v", k, transport)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				case !testCase.TLS && transport.TLSClientConfig != nil:
0000000000000000000000000000000000000000;;					t.Errorf("%s: expected no TLSClientConfig, got %#v", k, transport)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
