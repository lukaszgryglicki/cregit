0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/transport/cache_test.go[staging/src/k8s.io/client-go/1.4/transport/cache_test.go][staging/src/k8s.io/client-go/transport/cache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTLSConfigKey(t *testing.T) {
0000000000000000000000000000000000000000;;		// Make sure config fields that don't affect the tls config don't affect the cache key
0000000000000000000000000000000000000000;;		identicalConfigurations := map[string]*Config{
0000000000000000000000000000000000000000;;			"empty":          {},
0000000000000000000000000000000000000000;;			"basic":          {Username: "bob", Password: "password"},
0000000000000000000000000000000000000000;;			"bearer":         {BearerToken: "token"},
0000000000000000000000000000000000000000;;			"user agent":     {UserAgent: "useragent"},
0000000000000000000000000000000000000000;;			"transport":      {Transport: http.DefaultTransport},
0000000000000000000000000000000000000000;;			"wrap transport": {WrapTransport: func(http.RoundTripper) http.RoundTripper { return nil }},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for nameA, valueA := range identicalConfigurations {
0000000000000000000000000000000000000000;;			for nameB, valueB := range identicalConfigurations {
0000000000000000000000000000000000000000;;				keyA, err := tlsConfigKey(valueA)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error for %q: %v", nameA, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				keyB, err := tlsConfigKey(valueB)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error for %q: %v", nameB, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if keyA != keyB {
0000000000000000000000000000000000000000;;					t.Errorf("Expected identical cache keys for %q and %q, got:\n\t%s\n\t%s", nameA, nameB, keyA, keyB)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure config fields that affect the tls config affect the cache key
0000000000000000000000000000000000000000;;		uniqueConfigurations := map[string]*Config{
0000000000000000000000000000000000000000;;			"no tls":   {},
0000000000000000000000000000000000000000;;			"insecure": {TLS: TLSConfig{Insecure: true}},
0000000000000000000000000000000000000000;;			"cadata 1": {TLS: TLSConfig{CAData: []byte{1}}},
0000000000000000000000000000000000000000;;			"cadata 2": {TLS: TLSConfig{CAData: []byte{2}}},
0000000000000000000000000000000000000000;;			"cert 1, key 1": {
0000000000000000000000000000000000000000;;				TLS: TLSConfig{
0000000000000000000000000000000000000000;;					CertData: []byte{1},
0000000000000000000000000000000000000000;;					KeyData:  []byte{1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cert 1, key 2": {
0000000000000000000000000000000000000000;;				TLS: TLSConfig{
0000000000000000000000000000000000000000;;					CertData: []byte{1},
0000000000000000000000000000000000000000;;					KeyData:  []byte{2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cert 2, key 1": {
0000000000000000000000000000000000000000;;				TLS: TLSConfig{
0000000000000000000000000000000000000000;;					CertData: []byte{2},
0000000000000000000000000000000000000000;;					KeyData:  []byte{1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cert 2, key 2": {
0000000000000000000000000000000000000000;;				TLS: TLSConfig{
0000000000000000000000000000000000000000;;					CertData: []byte{2},
0000000000000000000000000000000000000000;;					KeyData:  []byte{2},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			"cadata 1, cert 1, key 1": {
0000000000000000000000000000000000000000;;				TLS: TLSConfig{
0000000000000000000000000000000000000000;;					CAData:   []byte{1},
0000000000000000000000000000000000000000;;					CertData: []byte{1},
0000000000000000000000000000000000000000;;					KeyData:  []byte{1},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for nameA, valueA := range uniqueConfigurations {
0000000000000000000000000000000000000000;;			for nameB, valueB := range uniqueConfigurations {
0000000000000000000000000000000000000000;;				// Don't compare to ourselves
0000000000000000000000000000000000000000;;				if nameA == nameB {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				keyA, err := tlsConfigKey(valueA)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error for %q: %v", nameA, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				keyB, err := tlsConfigKey(valueB)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error for %q: %v", nameB, err)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if keyA == keyB {
0000000000000000000000000000000000000000;;					t.Errorf("Expected unique cache keys for %q and %q, got:\n\t%s\n\t%s", nameA, nameB, keyA, keyB)
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
