0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
c0033914d21d16bfe084eb91f3fef9f5782e773f;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package spdy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/httpstream"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/httpstream/spdy"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Upgrader validates a response from the server after a SPDY upgrade.
0000000000000000000000000000000000000000;;	type Upgrader interface {
0000000000000000000000000000000000000000;;		// NewConnection validates the response and creates a new Connection.
0000000000000000000000000000000000000000;;		NewConnection(resp *http.Response) (httpstream.Connection, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoundTripperFor returns a round tripper and upgrader to use with SPDY.
0000000000000000000000000000000000000000;;	func RoundTripperFor(config *restclient.Config) (http.RoundTripper, Upgrader, error) {
0000000000000000000000000000000000000000;;		tlsConfig, err := restclient.TLSConfigFor(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		upgradeRoundTripper := spdy.NewRoundTripper(tlsConfig, true)
0000000000000000000000000000000000000000;;		wrapper, err := restclient.HTTPWrappersForConfig(config, upgradeRoundTripper)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return wrapper, upgradeRoundTripper, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dialer implements the httpstream.Dialer interface.
0000000000000000000000000000000000000000;;	type dialer struct {
0000000000000000000000000000000000000000;;		client   *http.Client
0000000000000000000000000000000000000000;;		upgrader Upgrader
0000000000000000000000000000000000000000;;		method   string
0000000000000000000000000000000000000000;;		url      *url.URL
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ httpstream.Dialer = &dialer{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewDialer will create a dialer that connects to the provided URL and upgrades the connection to SPDY.
0000000000000000000000000000000000000000;;	func NewDialer(upgrader Upgrader, client *http.Client, method string, url *url.URL) httpstream.Dialer {
0000000000000000000000000000000000000000;;		return &dialer{
0000000000000000000000000000000000000000;;			client:   client,
0000000000000000000000000000000000000000;;			upgrader: upgrader,
0000000000000000000000000000000000000000;;			method:   method,
0000000000000000000000000000000000000000;;			url:      url,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *dialer) Dial(protocols ...string) (httpstream.Connection, string, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(d.method, d.url.String(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, "", fmt.Errorf("error creating request: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Negotiate(d.upgrader, d.client, req, protocols...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Negotiate opens a connection to a remote server and attempts to negotiate
0000000000000000000000000000000000000000;;	// a SPDY connection. Upon success, it returns the connection and the protocol selected by
0000000000000000000000000000000000000000;;	// the server. The client transport must use the upgradeRoundTripper - see RoundTripperFor.
0000000000000000000000000000000000000000;;	func Negotiate(upgrader Upgrader, client *http.Client, req *http.Request, protocols ...string) (httpstream.Connection, string, error) {
0000000000000000000000000000000000000000;;		for i := range protocols {
0000000000000000000000000000000000000000;;			req.Header.Add(httpstream.HeaderProtocolVersion, protocols[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, "", fmt.Errorf("error sending request: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		conn, err := upgrader.NewConnection(resp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return conn, resp.Header.Get(httpstream.HeaderProtocolVersion), nil
0000000000000000000000000000000000000000;;	}
