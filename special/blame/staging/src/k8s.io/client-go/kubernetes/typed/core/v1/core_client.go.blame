0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/kubernetes/typed/core/v1/core_client.go[staging/src/k8s.io/client-go/1.4/kubernetes/typed/core/v1/core_client.go][staging/src/k8s.io/client-go/kubernetes/typed/core/v1/core_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CoreV1Interface interface {
0000000000000000000000000000000000000000;;		RESTClient() rest.Interface
0000000000000000000000000000000000000000;;		ComponentStatusesGetter
0000000000000000000000000000000000000000;;		ConfigMapsGetter
0000000000000000000000000000000000000000;;		EndpointsGetter
0000000000000000000000000000000000000000;;		EventsGetter
0000000000000000000000000000000000000000;;		LimitRangesGetter
0000000000000000000000000000000000000000;;		NamespacesGetter
0000000000000000000000000000000000000000;;		NodesGetter
0000000000000000000000000000000000000000;;		PersistentVolumesGetter
0000000000000000000000000000000000000000;;		PersistentVolumeClaimsGetter
0000000000000000000000000000000000000000;;		PodsGetter
0000000000000000000000000000000000000000;;		PodTemplatesGetter
0000000000000000000000000000000000000000;;		ReplicationControllersGetter
0000000000000000000000000000000000000000;;		ResourceQuotasGetter
0000000000000000000000000000000000000000;;		SecretsGetter
0000000000000000000000000000000000000000;;		ServicesGetter
0000000000000000000000000000000000000000;;		ServiceAccountsGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CoreV1Client is used to interact with features provided by the  group.
0000000000000000000000000000000000000000;;	type CoreV1Client struct {
0000000000000000000000000000000000000000;;		restClient rest.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) ComponentStatuses() ComponentStatusInterface {
0000000000000000000000000000000000000000;;		return newComponentStatuses(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) ConfigMaps(namespace string) ConfigMapInterface {
0000000000000000000000000000000000000000;;		return newConfigMaps(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Endpoints(namespace string) EndpointsInterface {
0000000000000000000000000000000000000000;;		return newEndpoints(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Events(namespace string) EventInterface {
0000000000000000000000000000000000000000;;		return newEvents(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) LimitRanges(namespace string) LimitRangeInterface {
0000000000000000000000000000000000000000;;		return newLimitRanges(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Namespaces() NamespaceInterface {
0000000000000000000000000000000000000000;;		return newNamespaces(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Nodes() NodeInterface {
0000000000000000000000000000000000000000;;		return newNodes(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) PersistentVolumes() PersistentVolumeInterface {
0000000000000000000000000000000000000000;;		return newPersistentVolumes(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) PersistentVolumeClaims(namespace string) PersistentVolumeClaimInterface {
0000000000000000000000000000000000000000;;		return newPersistentVolumeClaims(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Pods(namespace string) PodInterface {
0000000000000000000000000000000000000000;;		return newPods(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) PodTemplates(namespace string) PodTemplateInterface {
0000000000000000000000000000000000000000;;		return newPodTemplates(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) ReplicationControllers(namespace string) ReplicationControllerInterface {
0000000000000000000000000000000000000000;;		return newReplicationControllers(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) ResourceQuotas(namespace string) ResourceQuotaInterface {
0000000000000000000000000000000000000000;;		return newResourceQuotas(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Secrets(namespace string) SecretInterface {
0000000000000000000000000000000000000000;;		return newSecrets(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) Services(namespace string) ServiceInterface {
0000000000000000000000000000000000000000;;		return newServices(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) ServiceAccounts(namespace string) ServiceAccountInterface {
0000000000000000000000000000000000000000;;		return newServiceAccounts(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfig creates a new CoreV1Client for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (*CoreV1Client, error) {
0000000000000000000000000000000000000000;;		config := *c
0000000000000000000000000000000000000000;;		if err := setConfigDefaults(&config); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := rest.RESTClientFor(&config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &CoreV1Client{client}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new CoreV1Client for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) *CoreV1Client {
0000000000000000000000000000000000000000;;		client, err := NewForConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new CoreV1Client for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c rest.Interface) *CoreV1Client {
0000000000000000000000000000000000000000;;		return &CoreV1Client{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setConfigDefaults(config *rest.Config) error {
0000000000000000000000000000000000000000;;		gv := v1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		config.GroupVersion = &gv
0000000000000000000000000000000000000000;;		config.APIPath = "/api"
0000000000000000000000000000000000000000;;		config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = rest.DefaultKubernetesUserAgent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTClient returns a RESTClient that is used to communicate
0000000000000000000000000000000000000000;;	// with API server by this client implementation.
0000000000000000000000000000000000000000;;	func (c *CoreV1Client) RESTClient() rest.Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.restClient
0000000000000000000000000000000000000000;;	}
