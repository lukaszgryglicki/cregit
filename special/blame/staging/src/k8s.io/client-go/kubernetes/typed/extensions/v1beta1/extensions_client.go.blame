0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/kubernetes/typed/extensions/v1beta1/extensions_client.go[staging/src/k8s.io/client-go/1.4/kubernetes/typed/extensions/v1beta1/extensions_client.go][staging/src/k8s.io/client-go/kubernetes/typed/extensions/v1beta1/extensions_client.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		serializer "k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;		rest "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionsV1beta1Interface interface {
0000000000000000000000000000000000000000;;		RESTClient() rest.Interface
0000000000000000000000000000000000000000;;		DaemonSetsGetter
0000000000000000000000000000000000000000;;		DeploymentsGetter
0000000000000000000000000000000000000000;;		IngressesGetter
0000000000000000000000000000000000000000;;		PodSecurityPoliciesGetter
0000000000000000000000000000000000000000;;		ReplicaSetsGetter
0000000000000000000000000000000000000000;;		ScalesGetter
0000000000000000000000000000000000000000;;		ThirdPartyResourcesGetter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtensionsV1beta1Client is used to interact with features provided by the extensions group.
0000000000000000000000000000000000000000;;	type ExtensionsV1beta1Client struct {
0000000000000000000000000000000000000000;;		restClient rest.Interface
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) DaemonSets(namespace string) DaemonSetInterface {
0000000000000000000000000000000000000000;;		return newDaemonSets(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) Deployments(namespace string) DeploymentInterface {
0000000000000000000000000000000000000000;;		return newDeployments(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) Ingresses(namespace string) IngressInterface {
0000000000000000000000000000000000000000;;		return newIngresses(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) PodSecurityPolicies() PodSecurityPolicyInterface {
0000000000000000000000000000000000000000;;		return newPodSecurityPolicies(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) ReplicaSets(namespace string) ReplicaSetInterface {
0000000000000000000000000000000000000000;;		return newReplicaSets(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) Scales(namespace string) ScaleInterface {
0000000000000000000000000000000000000000;;		return newScales(c, namespace)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) ThirdPartyResources() ThirdPartyResourceInterface {
0000000000000000000000000000000000000000;;		return newThirdPartyResources(c)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfig creates a new ExtensionsV1beta1Client for the given config.
0000000000000000000000000000000000000000;;	func NewForConfig(c *rest.Config) (*ExtensionsV1beta1Client, error) {
0000000000000000000000000000000000000000;;		config := *c
0000000000000000000000000000000000000000;;		if err := setConfigDefaults(&config); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err := rest.RESTClientFor(&config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ExtensionsV1beta1Client{client}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewForConfigOrDie creates a new ExtensionsV1beta1Client for the given config and
0000000000000000000000000000000000000000;;	// panics if there is an error in the config.
0000000000000000000000000000000000000000;;	func NewForConfigOrDie(c *rest.Config) *ExtensionsV1beta1Client {
0000000000000000000000000000000000000000;;		client, err := NewForConfig(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New creates a new ExtensionsV1beta1Client for the given RESTClient.
0000000000000000000000000000000000000000;;	func New(c rest.Interface) *ExtensionsV1beta1Client {
0000000000000000000000000000000000000000;;		return &ExtensionsV1beta1Client{c}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setConfigDefaults(config *rest.Config) error {
0000000000000000000000000000000000000000;;		gv := v1beta1.SchemeGroupVersion
0000000000000000000000000000000000000000;;		config.GroupVersion = &gv
0000000000000000000000000000000000000000;;		config.APIPath = "/apis"
0000000000000000000000000000000000000000;;		config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.UserAgent == "" {
0000000000000000000000000000000000000000;;			config.UserAgent = rest.DefaultKubernetesUserAgent()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTClient returns a RESTClient that is used to communicate
0000000000000000000000000000000000000000;;	// with API server by this client implementation.
0000000000000000000000000000000000000000;;	func (c *ExtensionsV1beta1Client) RESTClient() rest.Interface {
0000000000000000000000000000000000000000;;		if c == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.restClient
0000000000000000000000000000000000000000;;	}
