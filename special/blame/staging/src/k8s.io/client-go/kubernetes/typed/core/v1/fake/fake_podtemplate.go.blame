0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/kubernetes/typed/core/v1/fake/fake_podtemplate.go[staging/src/k8s.io/client-go/1.4/kubernetes/typed/core/v1/fake/fake_podtemplate.go][staging/src/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_podtemplate.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		labels "k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		schema "k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		types "k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		testing "k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakePodTemplates implements PodTemplateInterface
0000000000000000000000000000000000000000;;	type FakePodTemplates struct {
0000000000000000000000000000000000000000;;		Fake *FakeCoreV1
0000000000000000000000000000000000000000;;		ns   string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var podtemplatesResource = schema.GroupVersionResource{Group: "", Version: "v1", Resource: "podtemplates"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var podtemplatesKind = schema.GroupVersionKind{Group: "", Version: "v1", Kind: "PodTemplate"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Create(podTemplate *v1.PodTemplate) (result *v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewCreateAction(podtemplatesResource, c.ns, podTemplate), &v1.PodTemplate{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.PodTemplate), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Update(podTemplate *v1.PodTemplate) (result *v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewUpdateAction(podtemplatesResource, c.ns, podTemplate), &v1.PodTemplate{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.PodTemplate), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Delete(name string, options *meta_v1.DeleteOptions) error {
0000000000000000000000000000000000000000;;		_, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewDeleteAction(podtemplatesResource, c.ns, name), &v1.PodTemplate{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
0000000000000000000000000000000000000000;;		action := testing.NewDeleteCollectionAction(podtemplatesResource, c.ns, listOptions)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := c.Fake.Invokes(action, &v1.PodTemplateList{})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Get(name string, options meta_v1.GetOptions) (result *v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewGetAction(podtemplatesResource, c.ns, name), &v1.PodTemplate{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.PodTemplate), err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) List(opts meta_v1.ListOptions) (result *v1.PodTemplateList, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewListAction(podtemplatesResource, podtemplatesKind, c.ns, opts), &v1.PodTemplateList{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		label, _, _ := testing.ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		if label == nil {
0000000000000000000000000000000000000000;;			label = labels.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		list := &v1.PodTemplateList{}
0000000000000000000000000000000000000000;;		for _, item := range obj.(*v1.PodTemplateList).Items {
0000000000000000000000000000000000000000;;			if label.Matches(labels.Set(item.Labels)) {
0000000000000000000000000000000000000000;;				list.Items = append(list.Items, item)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return list, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch returns a watch.Interface that watches the requested podTemplates.
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return c.Fake.
0000000000000000000000000000000000000000;;			InvokesWatch(testing.NewWatchAction(podtemplatesResource, c.ns, opts))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch applies the patch and returns the patched podTemplate.
0000000000000000000000000000000000000000;;	func (c *FakePodTemplates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PodTemplate, err error) {
0000000000000000000000000000000000000000;;		obj, err := c.Fake.
0000000000000000000000000000000000000000;;			Invokes(testing.NewPatchSubresourceAction(podtemplatesResource, c.ns, name, data, subresources...), &v1.PodTemplate{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if obj == nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1.PodTemplate), err
0000000000000000000000000000000000000000;;	}
