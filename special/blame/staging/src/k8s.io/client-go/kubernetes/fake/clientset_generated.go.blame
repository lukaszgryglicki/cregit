0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/kubernetes/fake/clientset_generated.go[staging/src/k8s.io/client-go/1.4/kubernetes/fake/clientset_generated.go][staging/src/k8s.io/client-go/kubernetes/fake/clientset_generated.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		fakediscovery "k8s.io/client-go/discovery/fake"
0000000000000000000000000000000000000000;;		kubernetes "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		admissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"
0000000000000000000000000000000000000000;;		fakeadmissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1/fake"
0000000000000000000000000000000000000000;;		appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
0000000000000000000000000000000000000000;;		fakeappsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1/fake"
0000000000000000000000000000000000000000;;		authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"
0000000000000000000000000000000000000000;;		fakeauthenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1/fake"
0000000000000000000000000000000000000000;;		authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
0000000000000000000000000000000000000000;;		fakeauthenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1/fake"
0000000000000000000000000000000000000000;;		authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"
0000000000000000000000000000000000000000;;		fakeauthorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1/fake"
0000000000000000000000000000000000000000;;		authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
0000000000000000000000000000000000000000;;		fakeauthorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1/fake"
0000000000000000000000000000000000000000;;		autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
0000000000000000000000000000000000000000;;		fakeautoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1/fake"
0000000000000000000000000000000000000000;;		autoscalingv2alpha1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2alpha1"
0000000000000000000000000000000000000000;;		fakeautoscalingv2alpha1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2alpha1/fake"
0000000000000000000000000000000000000000;;		batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"
0000000000000000000000000000000000000000;;		fakebatchv1 "k8s.io/client-go/kubernetes/typed/batch/v1/fake"
0000000000000000000000000000000000000000;;		batchv2alpha1 "k8s.io/client-go/kubernetes/typed/batch/v2alpha1"
0000000000000000000000000000000000000000;;		fakebatchv2alpha1 "k8s.io/client-go/kubernetes/typed/batch/v2alpha1/fake"
0000000000000000000000000000000000000000;;		certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"
0000000000000000000000000000000000000000;;		fakecertificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1/fake"
0000000000000000000000000000000000000000;;		corev1 "k8s.io/client-go/kubernetes/typed/core/v1"
0000000000000000000000000000000000000000;;		fakecorev1 "k8s.io/client-go/kubernetes/typed/core/v1/fake"
0000000000000000000000000000000000000000;;		extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
0000000000000000000000000000000000000000;;		fakeextensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1/fake"
0000000000000000000000000000000000000000;;		networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"
0000000000000000000000000000000000000000;;		fakenetworkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1/fake"
0000000000000000000000000000000000000000;;		policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
0000000000000000000000000000000000000000;;		fakepolicyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1/fake"
0000000000000000000000000000000000000000;;		rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
0000000000000000000000000000000000000000;;		fakerbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1/fake"
0000000000000000000000000000000000000000;;		rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
0000000000000000000000000000000000000000;;		fakerbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1/fake"
0000000000000000000000000000000000000000;;		settingsv1alpha1 "k8s.io/client-go/kubernetes/typed/settings/v1alpha1"
0000000000000000000000000000000000000000;;		fakesettingsv1alpha1 "k8s.io/client-go/kubernetes/typed/settings/v1alpha1/fake"
0000000000000000000000000000000000000000;;		storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"
0000000000000000000000000000000000000000;;		fakestoragev1 "k8s.io/client-go/kubernetes/typed/storage/v1/fake"
0000000000000000000000000000000000000000;;		storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"
0000000000000000000000000000000000000000;;		fakestoragev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1/fake"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSimpleClientset returns a clientset that will respond with the provided objects.
0000000000000000000000000000000000000000;;	// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
0000000000000000000000000000000000000000;;	// without applying any validations and/or defaults. It shouldn't be considered a replacement
0000000000000000000000000000000000000000;;	// for a real clientset and is mostly useful in simple unit tests.
0000000000000000000000000000000000000000;;	func NewSimpleClientset(objects ...runtime.Object) *Clientset {
0000000000000000000000000000000000000000;;		o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
0000000000000000000000000000000000000000;;		for _, obj := range objects {
0000000000000000000000000000000000000000;;			if err := o.Add(obj); err != nil {
0000000000000000000000000000000000000000;;				panic(err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr := testing.Fake{}
0000000000000000000000000000000000000000;;		fakePtr.AddReactor("*", "*", testing.ObjectReaction(o))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakePtr.AddWatchReactor("*", testing.DefaultWatchReactor(watch.NewFake(), nil))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Clientset{fakePtr}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Clientset implements kubernetes.Interface. Meant to be embedded into a
0000000000000000000000000000000000000000;;	// struct to get a default implementation. This makes faking out just the method
0000000000000000000000000000000000000000;;	// you want to test easier.
0000000000000000000000000000000000000000;;	type Clientset struct {
0000000000000000000000000000000000000000;;		testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Clientset) Discovery() discovery.DiscoveryInterface {
0000000000000000000000000000000000000000;;		return &fakediscovery.FakeDiscovery{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ kubernetes.Interface = &Clientset{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AdmissionregistrationV1alpha1 retrieves the AdmissionregistrationV1alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AdmissionregistrationV1alpha1() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakeadmissionregistrationv1alpha1.FakeAdmissionregistrationV1alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Admissionregistration retrieves the AdmissionregistrationV1alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Admissionregistration() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakeadmissionregistrationv1alpha1.FakeAdmissionregistrationV1alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppsV1beta1 retrieves the AppsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeappsv1beta1.FakeAppsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Apps retrieves the AppsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Apps() appsv1beta1.AppsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeappsv1beta1.FakeAppsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticationV1 retrieves the AuthenticationV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthenticationv1.FakeAuthenticationV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authentication retrieves the AuthenticationV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Authentication() authenticationv1.AuthenticationV1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthenticationv1.FakeAuthenticationV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthenticationV1beta1 retrieves the AuthenticationV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthenticationv1beta1.FakeAuthenticationV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationV1 retrieves the AuthorizationV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthorizationv1.FakeAuthorizationV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Authorization retrieves the AuthorizationV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Authorization() authorizationv1.AuthorizationV1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthorizationv1.FakeAuthorizationV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthorizationV1beta1 retrieves the AuthorizationV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeauthorizationv1beta1.FakeAuthorizationV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AutoscalingV1 retrieves the AutoscalingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		return &fakeautoscalingv1.FakeAutoscalingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Autoscaling retrieves the AutoscalingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Autoscaling() autoscalingv1.AutoscalingV1Interface {
0000000000000000000000000000000000000000;;		return &fakeautoscalingv1.FakeAutoscalingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AutoscalingV2alpha1 retrieves the AutoscalingV2alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) AutoscalingV2alpha1() autoscalingv2alpha1.AutoscalingV2alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakeautoscalingv2alpha1.FakeAutoscalingV2alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchV1 retrieves the BatchV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) BatchV1() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		return &fakebatchv1.FakeBatchV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Batch retrieves the BatchV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Batch() batchv1.BatchV1Interface {
0000000000000000000000000000000000000000;;		return &fakebatchv1.FakeBatchV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BatchV2alpha1 retrieves the BatchV2alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) BatchV2alpha1() batchv2alpha1.BatchV2alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakebatchv2alpha1.FakeBatchV2alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CertificatesV1beta1 retrieves the CertificatesV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakecertificatesv1beta1.FakeCertificatesV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Certificates retrieves the CertificatesV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Certificates() certificatesv1beta1.CertificatesV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakecertificatesv1beta1.FakeCertificatesV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CoreV1 retrieves the CoreV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) CoreV1() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		return &fakecorev1.FakeCoreV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Core retrieves the CoreV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Core() corev1.CoreV1Interface {
0000000000000000000000000000000000000000;;		return &fakecorev1.FakeCoreV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtensionsV1beta1 retrieves the ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeextensionsv1beta1.FakeExtensionsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extensions retrieves the ExtensionsV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Extensions() extensionsv1beta1.ExtensionsV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakeextensionsv1beta1.FakeExtensionsV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NetworkingV1 retrieves the NetworkingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) NetworkingV1() networkingv1.NetworkingV1Interface {
0000000000000000000000000000000000000000;;		return &fakenetworkingv1.FakeNetworkingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Networking retrieves the NetworkingV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Networking() networkingv1.NetworkingV1Interface {
0000000000000000000000000000000000000000;;		return &fakenetworkingv1.FakeNetworkingV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PolicyV1beta1 retrieves the PolicyV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakepolicyv1beta1.FakePolicyV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Policy retrieves the PolicyV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Policy() policyv1beta1.PolicyV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakepolicyv1beta1.FakePolicyV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RbacV1beta1 retrieves the RbacV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakerbacv1beta1.FakeRbacV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rbac retrieves the RbacV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Rbac() rbacv1beta1.RbacV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakerbacv1beta1.FakeRbacV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RbacV1alpha1 retrieves the RbacV1alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakerbacv1alpha1.FakeRbacV1alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SettingsV1alpha1 retrieves the SettingsV1alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) SettingsV1alpha1() settingsv1alpha1.SettingsV1alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakesettingsv1alpha1.FakeSettingsV1alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Settings retrieves the SettingsV1alpha1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Settings() settingsv1alpha1.SettingsV1alpha1Interface {
0000000000000000000000000000000000000000;;		return &fakesettingsv1alpha1.FakeSettingsV1alpha1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageV1beta1 retrieves the StorageV1beta1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
0000000000000000000000000000000000000000;;		return &fakestoragev1beta1.FakeStorageV1beta1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StorageV1 retrieves the StorageV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) StorageV1() storagev1.StorageV1Interface {
0000000000000000000000000000000000000000;;		return &fakestoragev1.FakeStorageV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Storage retrieves the StorageV1Client
0000000000000000000000000000000000000000;;	func (c *Clientset) Storage() storagev1.StorageV1Interface {
0000000000000000000000000000000000000000;;		return &fakestoragev1.FakeStorageV1{Fake: &c.Fake}
0000000000000000000000000000000000000000;;	}
