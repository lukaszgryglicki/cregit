0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/dynamic/client_test.go[staging/src/k8s.io/client-go/1.4/dynamic/client_test.go][staging/src/k8s.io/client-go/dynamic/client_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dynamic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/streaming"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		restclientwatch "k8s.io/client-go/rest/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getJSON(version, kind, name string) []byte {
0000000000000000000000000000000000000000;;		return []byte(fmt.Sprintf(`{"apiVersion": %q, "kind": %q, "metadata": {"name": %q}}`, version, kind, name))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getListJSON(version, kind string, items ...[]byte) []byte {
0000000000000000000000000000000000000000;;		json := fmt.Sprintf(`{"apiVersion": %q, "kind": %q, "items": [%s]}`,
0000000000000000000000000000000000000000;;			version, kind, bytes.Join(items, []byte(",")))
0000000000000000000000000000000000000000;;		return []byte(json)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getObject(version, kind, name string) *unstructured.Unstructured {
0000000000000000000000000000000000000000;;		return &unstructured.Unstructured{
0000000000000000000000000000000000000000;;			Object: map[string]interface{}{
0000000000000000000000000000000000000000;;				"apiVersion": version,
0000000000000000000000000000000000000000;;				"kind":       kind,
0000000000000000000000000000000000000000;;				"metadata": map[string]interface{}{
0000000000000000000000000000000000000000;;					"name": name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getClientServer(gv *schema.GroupVersion, h func(http.ResponseWriter, *http.Request)) (*Client, *httptest.Server, error) {
0000000000000000000000000000000000000000;;		srv := httptest.NewServer(http.HandlerFunc(h))
0000000000000000000000000000000000000000;;		cl, err := NewClient(&restclient.Config{
0000000000000000000000000000000000000000;;			Host:          srv.URL,
0000000000000000000000000000000000000000;;			ContentConfig: restclient.ContentConfig{GroupVersion: gv},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			srv.Close()
0000000000000000000000000000000000000000;;			return nil, nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return cl, srv, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestList(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;			resp      []byte
0000000000000000000000000000000000000000;;			want      *unstructured.UnstructuredList
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_list",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest",
0000000000000000000000000000000000000000;;				resp: getListJSON("vTest", "rTestList",
0000000000000000000000000000000000000000;;					getJSON("vTest", "rTest", "item1"),
0000000000000000000000000000000000000000;;					getJSON("vTest", "rTest", "item2")),
0000000000000000000000000000000000000000;;				want: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"apiVersion": "vTest",
0000000000000000000000000000000000000000;;						"kind":       "rTestList",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						*getObject("vTest", "rTest", "item1"),
0000000000000000000000000000000000000000;;						*getObject("vTest", "rTest", "item2"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "namespaced_list",
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest",
0000000000000000000000000000000000000000;;				resp: getListJSON("vTest", "rTestList",
0000000000000000000000000000000000000000;;					getJSON("vTest", "rTest", "item1"),
0000000000000000000000000000000000000000;;					getJSON("vTest", "rTest", "item2")),
0000000000000000000000000000000000000000;;				want: &unstructured.UnstructuredList{
0000000000000000000000000000000000000000;;					Object: map[string]interface{}{
0000000000000000000000000000000000000000;;						"apiVersion": "vTest",
0000000000000000000000000000000000000000;;						"kind":       "rTestList",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					Items: []unstructured.Unstructured{
0000000000000000000000000000000000000000;;						*getObject("vTest", "rTest", "item1"),
0000000000000000000000000000000000000000;;						*getObject("vTest", "rTest", "item2"),
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "GET" {
0000000000000000000000000000000000000000;;					t.Errorf("List(%q) got HTTP method %s. wanted GET", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("List(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				w.Write(tc.resp)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := cl.Resource(resource, tc.namespace).List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when listing %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("List(%q) want: %v\ngot: %v", tc.name, tc.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGet(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;			resp      []byte
0000000000000000000000000000000000000000;;			want      *unstructured.Unstructured
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_get",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest/normal_get",
0000000000000000000000000000000000000000;;				resp: getJSON("vTest", "rTest", "normal_get"),
0000000000000000000000000000000000000000;;				want: getObject("vTest", "rTest", "normal_get"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				name:      "namespaced_get",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest/namespaced_get",
0000000000000000000000000000000000000000;;				resp:      getJSON("vTest", "rTest", "namespaced_get"),
0000000000000000000000000000000000000000;;				want:      getObject("vTest", "rTest", "namespaced_get"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "GET" {
0000000000000000000000000000000000000000;;					t.Errorf("Get(%q) got HTTP method %s. wanted GET", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Get(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				w.Write(tc.resp)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := cl.Resource(resource, tc.namespace).Get(tc.name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when getting %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("Get(%q) want: %v\ngot: %v", tc.name, tc.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDelete(t *testing.T) {
0000000000000000000000000000000000000000;;		statusOK := &metav1.Status{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{Kind: "Status"},
0000000000000000000000000000000000000000;;			Status:   metav1.StatusSuccess,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_delete",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest/normal_delete",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				name:      "namespaced_delete",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest/namespaced_delete",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "DELETE" {
0000000000000000000000000000000000000000;;					t.Errorf("Delete(%q) got HTTP method %s. wanted DELETE", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Delete(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				unstructured.UnstructuredJSONScheme.Encode(statusOK, w)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = cl.Resource(resource, tc.namespace).Delete(tc.name, nil)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when deleting %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteCollection(t *testing.T) {
0000000000000000000000000000000000000000;;		statusOK := &metav1.Status{
0000000000000000000000000000000000000000;;			TypeMeta: metav1.TypeMeta{Kind: "Status"},
0000000000000000000000000000000000000000;;			Status:   metav1.StatusSuccess,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_delete_collection",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				name:      "namespaced_delete_collection",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "DELETE" {
0000000000000000000000000000000000000000;;					t.Errorf("DeleteCollection(%q) got HTTP method %s. wanted DELETE", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("DeleteCollection(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				unstructured.UnstructuredJSONScheme.Encode(statusOK, w)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			err = cl.Resource(resource, tc.namespace).DeleteCollection(nil, metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when deleting collection %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreate(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			obj       *unstructured.Unstructured
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_create",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest",
0000000000000000000000000000000000000000;;				obj:  getObject("vTest", "rTest", "normal_create"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "namespaced_create",
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest",
0000000000000000000000000000000000000000;;				obj:       getObject("vTest", "rTest", "namespaced_create"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "POST" {
0000000000000000000000000000000000000000;;					t.Errorf("Create(%q) got HTTP method %s. wanted POST", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Create(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				data, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Create(%q) unexpected error reading body: %v", tc.name, err)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Write(data)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := cl.Resource(resource, tc.namespace).Create(tc.obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.obj) {
0000000000000000000000000000000000000000;;				t.Errorf("Create(%q) want: %v\ngot: %v", tc.name, tc.obj, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdate(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			obj       *unstructured.Unstructured
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name: "normal_update",
0000000000000000000000000000000000000000;;				path: "/api/gtest/vtest/rtest/normal_update",
0000000000000000000000000000000000000000;;				obj:  getObject("vTest", "rTest", "normal_update"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "namespaced_update",
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest/namespaced_update",
0000000000000000000000000000000000000000;;				obj:       getObject("vTest", "rTest", "namespaced_update"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "PUT" {
0000000000000000000000000000000000000000;;					t.Errorf("Update(%q) got HTTP method %s. wanted PUT", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Update(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;				data, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Update(%q) unexpected error reading body: %v", tc.name, err)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Write(data)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := cl.Resource(resource, tc.namespace).Update(tc.obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when updating %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.obj) {
0000000000000000000000000000000000000000;;				t.Errorf("Update(%q) want: %v\ngot: %v", tc.name, tc.obj, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestWatch(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			events    []watch.Event
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;			query     string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:  "normal_watch",
0000000000000000000000000000000000000000;;				path:  "/api/gtest/vtest/rtest",
0000000000000000000000000000000000000000;;				query: "watch=true",
0000000000000000000000000000000000000000;;				events: []watch.Event{
0000000000000000000000000000000000000000;;					{Type: watch.Added, Object: getObject("vTest", "rTest", "normal_watch")},
0000000000000000000000000000000000000000;;					{Type: watch.Modified, Object: getObject("vTest", "rTest", "normal_watch")},
0000000000000000000000000000000000000000;;					{Type: watch.Deleted, Object: getObject("vTest", "rTest", "normal_watch")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "namespaced_watch",
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest",
0000000000000000000000000000000000000000;;				query:     "watch=true",
0000000000000000000000000000000000000000;;				events: []watch.Event{
0000000000000000000000000000000000000000;;					{Type: watch.Added, Object: getObject("vTest", "rTest", "namespaced_watch")},
0000000000000000000000000000000000000000;;					{Type: watch.Modified, Object: getObject("vTest", "rTest", "namespaced_watch")},
0000000000000000000000000000000000000000;;					{Type: watch.Deleted, Object: getObject("vTest", "rTest", "namespaced_watch")},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "GET" {
0000000000000000000000000000000000000000;;					t.Errorf("Watch(%q) got HTTP method %s. wanted GET", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Watch(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if r.URL.RawQuery != tc.query {
0000000000000000000000000000000000000000;;					t.Errorf("Watch(%q) got query %s. wanted %s", tc.name, r.URL.RawQuery, tc.query)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				enc := restclientwatch.NewEncoder(streaming.NewEncoder(w, dynamicCodec{}), dynamicCodec{})
0000000000000000000000000000000000000000;;				for _, e := range tc.events {
0000000000000000000000000000000000000000;;					enc.Encode(&e)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			watcher, err := cl.Resource(resource, tc.namespace).Watch(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when watching %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, want := range tc.events {
0000000000000000000000000000000000000000;;				got := <-watcher.ResultChan()
0000000000000000000000000000000000000000;;				if !reflect.DeepEqual(got, want) {
0000000000000000000000000000000000000000;;					t.Errorf("Watch(%q) want: %v\ngot: %v", tc.name, want, got)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPatch(t *testing.T) {
0000000000000000000000000000000000000000;;		tcs := []struct {
0000000000000000000000000000000000000000;;			name      string
0000000000000000000000000000000000000000;;			namespace string
0000000000000000000000000000000000000000;;			patch     []byte
0000000000000000000000000000000000000000;;			want      *unstructured.Unstructured
0000000000000000000000000000000000000000;;			path      string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:  "normal_patch",
0000000000000000000000000000000000000000;;				path:  "/api/gtest/vtest/rtest/normal_patch",
0000000000000000000000000000000000000000;;				patch: getJSON("vTest", "rTest", "normal_patch"),
0000000000000000000000000000000000000000;;				want:  getObject("vTest", "rTest", "normal_patch"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				name:      "namespaced_patch",
0000000000000000000000000000000000000000;;				namespace: "nstest",
0000000000000000000000000000000000000000;;				path:      "/api/gtest/vtest/namespaces/nstest/rtest/namespaced_patch",
0000000000000000000000000000000000000000;;				patch:     getJSON("vTest", "rTest", "namespaced_patch"),
0000000000000000000000000000000000000000;;				want:      getObject("vTest", "rTest", "namespaced_patch"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, tc := range tcs {
0000000000000000000000000000000000000000;;			gv := &schema.GroupVersion{Group: "gtest", Version: "vtest"}
0000000000000000000000000000000000000000;;			resource := &metav1.APIResource{Name: "rtest", Namespaced: len(tc.namespace) != 0}
0000000000000000000000000000000000000000;;			cl, srv, err := getClientServer(gv, func(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;				if r.Method != "PATCH" {
0000000000000000000000000000000000000000;;					t.Errorf("Patch(%q) got HTTP method %s. wanted PATCH", tc.name, r.Method)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if r.URL.Path != tc.path {
0000000000000000000000000000000000000000;;					t.Errorf("Patch(%q) got path %s. wanted %s", tc.name, r.URL.Path, tc.path)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				content := r.Header.Get("Content-Type")
0000000000000000000000000000000000000000;;				if content != string(types.StrategicMergePatchType) {
0000000000000000000000000000000000000000;;					t.Errorf("Patch(%q) got Content-Type %s. wanted %s", tc.name, content, types.StrategicMergePatchType)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				data, err := ioutil.ReadAll(r.Body)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Patch(%q) unexpected error reading body: %v", tc.name, err)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;				w.Write(data)
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when creating client: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer srv.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			got, err := cl.Resource(resource, tc.namespace).Patch(tc.name, types.StrategicMergePatchType, tc.patch)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error when patching %q: %v", tc.name, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("Patch(%q) want: %v\ngot: %v", tc.name, tc.want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestVersionedParameterEncoderWithV1Fallback(t *testing.T) {
0000000000000000000000000000000000000000;;		enc := VersionedParameterEncoderWithV1Fallback
0000000000000000000000000000000000000000;;		_, err := enc.EncodeParameters(&metav1.ListOptions{}, schema.GroupVersion{Group: "foo.bar.com", Version: "v4"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
