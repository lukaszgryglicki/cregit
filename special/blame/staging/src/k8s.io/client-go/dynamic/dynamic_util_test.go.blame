0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/dynamic/dynamic_util_test.go[staging/src/k8s.io/client-go/1.4/dynamic/dynamic_util_test.go][staging/src/k8s.io/client-go/dynamic/dynamic_util_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package dynamic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDiscoveryRESTMapper(t *testing.T) {
0000000000000000000000000000000000000000;;		resources := []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				GroupVersion: "test/beta1",
0000000000000000000000000000000000000000;;				APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:       "test_kinds",
0000000000000000000000000000000000000000;;						Namespaced: true,
0000000000000000000000000000000000000000;;						Kind:       "test_kind",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gvk := schema.GroupVersionKind{
0000000000000000000000000000000000000000;;			Group:   "test",
0000000000000000000000000000000000000000;;			Version: "beta1",
0000000000000000000000000000000000000000;;			Kind:    "test_kind",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mapper, err := NewDiscoveryRESTMapper(resources, VersionInterfaces)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error creating mapper: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, res := range []schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group:    "test",
0000000000000000000000000000000000000000;;				Version:  "beta1",
0000000000000000000000000000000000000000;;				Resource: "test_kinds",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Version:  "beta1",
0000000000000000000000000000000000000000;;				Resource: "test_kinds",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group:    "test",
0000000000000000000000000000000000000000;;				Resource: "test_kinds",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Resource: "test_kinds",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			got, err := mapper.KindFor(res)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("KindFor(%#v) unexpected error: %s", res, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if got != gvk {
0000000000000000000000000000000000000000;;				t.Errorf("KindFor(%#v) = %#v; want %#v", res, got, gvk)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
