0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/discovery/fake/discovery.go[staging/src/k8s.io/client-go/1.4/discovery/fake/discovery.go][staging/src/k8s.io/client-go/discovery/fake/discovery.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful-swagger12"
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/OpenAPIv2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		kubeversion "k8s.io/client-go/pkg/version"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeDiscovery struct {
0000000000000000000000000000000000000000;;		*testing.Fake
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		action := testing.ActionImpl{
0000000000000000000000000000000000000000;;			Verb:     "get",
0000000000000000000000000000000000000000;;			Resource: schema.GroupVersionResource{Resource: "resource"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.Invokes(action, nil)
0000000000000000000000000000000000000000;;		for _, resourceList := range c.Resources {
0000000000000000000000000000000000000000;;			if resourceList.GroupVersion == groupVersion {
0000000000000000000000000000000000000000;;				return resourceList, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("GroupVersion %q not found", groupVersion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		action := testing.ActionImpl{
0000000000000000000000000000000000000000;;			Verb:     "get",
0000000000000000000000000000000000000000;;			Resource: schema.GroupVersionResource{Resource: "resource"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.Invokes(action, nil)
0000000000000000000000000000000000000000;;		return c.Resources, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerPreferredResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerPreferredNamespacedResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerGroups() (*metav1.APIGroupList, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) ServerVersion() (*version.Info, error) {
0000000000000000000000000000000000000000;;		action := testing.ActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		action.Resource = schema.GroupVersionResource{Resource: "version"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Invokes(action, nil)
0000000000000000000000000000000000000000;;		versionInfo := kubeversion.Get()
0000000000000000000000000000000000000000;;		return &versionInfo, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) SwaggerSchema(version schema.GroupVersion) (*swagger.ApiDeclaration, error) {
0000000000000000000000000000000000000000;;		action := testing.ActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		if version == v1.SchemeGroupVersion {
0000000000000000000000000000000000000000;;			action.Resource = schema.GroupVersionResource{Resource: "/swaggerapi/api/" + version.Version}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			action.Resource = schema.GroupVersionResource{Resource: "/swaggerapi/apis/" + version.Group + "/" + version.Version}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Invokes(action, nil)
0000000000000000000000000000000000000000;;		return &swagger.ApiDeclaration{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) OpenAPISchema() (*openapi_v2.Document, error) {
0000000000000000000000000000000000000000;;		return &openapi_v2.Document{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *FakeDiscovery) RESTClient() restclient.Interface {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
