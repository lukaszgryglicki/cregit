0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
0d544a2842d63ac441f5f1c615cab92a256980ea;pkg/controller/garbagecollector/memcachediscovery/client_test.go[pkg/controller/garbagecollector/memcachediscovery/client_test.go][staging/src/k8s.io/client-go/discovery/cached/memcache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cached
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/discovery/fake"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDiscovery struct {
0000000000000000000000000000000000000000;;		*fake.FakeDiscovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lock        sync.Mutex
0000000000000000000000000000000000000000;;		groupList   *metav1.APIGroupList
0000000000000000000000000000000000000000;;		resourceMap map[string]*metav1.APIResourceList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscovery) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		c.lock.Lock()
0000000000000000000000000000000000000000;;		defer c.lock.Unlock()
0000000000000000000000000000000000000000;;		if rl, ok := c.resourceMap[groupVersion]; ok {
0000000000000000000000000000000000000000;;			return rl, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, errors.New("doesn't exist")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeDiscovery) ServerGroups() (*metav1.APIGroupList, error) {
0000000000000000000000000000000000000000;;		c.lock.Lock()
0000000000000000000000000000000000000000;;		defer c.lock.Unlock()
0000000000000000000000000000000000000000;;		if c.groupList == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("doesn't exist")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.groupList, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestClient(t *testing.T) {
0000000000000000000000000000000000000000;;		fake := &fakeDiscovery{
0000000000000000000000000000000000000000;;			groupList: &metav1.APIGroupList{
0000000000000000000000000000000000000000;;				Groups: []metav1.APIGroup{{
0000000000000000000000000000000000000000;;					Name: "astronomy",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{{
0000000000000000000000000000000000000000;;						GroupVersion: "astronomy/v8beta1",
0000000000000000000000000000000000000000;;						Version:      "v8beta1",
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			resourceMap: map[string]*metav1.APIResourceList{
0000000000000000000000000000000000000000;;				"astronomy/v8beta1": {
0000000000000000000000000000000000000000;;					GroupVersion: "astronomy/v8beta1",
0000000000000000000000000000000000000000;;					APIResources: []metav1.APIResource{{
0000000000000000000000000000000000000000;;						Name:         "dwarfplanets",
0000000000000000000000000000000000000000;;						SingularName: "dwarfplanet",
0000000000000000000000000000000000000000;;						Namespaced:   true,
0000000000000000000000000000000000000000;;						Kind:         "DwarfPlanet",
0000000000000000000000000000000000000000;;						ShortNames:   []string{"dp"},
0000000000000000000000000000000000000000;;					}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c := NewMemCacheClient(fake)
0000000000000000000000000000000000000000;;		g, err := c.ServerGroups()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected non-error.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.Fresh() {
0000000000000000000000000000000000000000;;			t.Errorf("Expected not fresh.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Invalidate()
0000000000000000000000000000000000000000;;		if !c.Fresh() {
0000000000000000000000000000000000000000;;			t.Errorf("Expected fresh.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		g, err = c.ServerGroups()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := fake.groupList, g; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r, err := c.ServerResourcesForGroupVersion("astronomy/v8beta1")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := fake.resourceMap["astronomy/v8beta1"], r; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fake.lock.Lock()
0000000000000000000000000000000000000000;;		fake.resourceMap = map[string]*metav1.APIResourceList{
0000000000000000000000000000000000000000;;			"astronomy/v8beta1": {
0000000000000000000000000000000000000000;;				GroupVersion: "astronomy/v8beta1",
0000000000000000000000000000000000000000;;				APIResources: []metav1.APIResource{{
0000000000000000000000000000000000000000;;					Name:         "stars",
0000000000000000000000000000000000000000;;					SingularName: "star",
0000000000000000000000000000000000000000;;					Namespaced:   true,
0000000000000000000000000000000000000000;;					Kind:         "Star",
0000000000000000000000000000000000000000;;					ShortNames:   []string{"s"},
0000000000000000000000000000000000000000;;				}},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fake.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		c.Invalidate()
0000000000000000000000000000000000000000;;		r, err = c.ServerResourcesForGroupVersion("astronomy/v8beta1")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := fake.resourceMap["astronomy/v8beta1"], r; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, got %#v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
