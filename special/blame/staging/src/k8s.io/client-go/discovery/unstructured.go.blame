0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
53dd2db94a5f56ebf4809d36d9d0553a7a39a4f4;staging/src/k8s.io/client-go/1.4/discovery/unstructured.go[staging/src/k8s.io/client-go/1.4/discovery/unstructured.go][staging/src/k8s.io/client-go/discovery/unstructured.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnstructuredObjectTyper provides a runtime.ObjectTyper implmentation for
0000000000000000000000000000000000000000;;	// runtime.Unstructured object based on discovery information.
0000000000000000000000000000000000000000;;	type UnstructuredObjectTyper struct {
0000000000000000000000000000000000000000;;		registered map[schema.GroupVersionKind]bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUnstructuredObjectTyper returns a runtime.ObjectTyper for
0000000000000000000000000000000000000000;;	// unstructred objects based on discovery information.
0000000000000000000000000000000000000000;;	func NewUnstructuredObjectTyper(groupResources []*APIGroupResources) *UnstructuredObjectTyper {
0000000000000000000000000000000000000000;;		dot := &UnstructuredObjectTyper{registered: make(map[schema.GroupVersionKind]bool)}
0000000000000000000000000000000000000000;;		for _, group := range groupResources {
0000000000000000000000000000000000000000;;			for _, discoveryVersion := range group.Group.Versions {
0000000000000000000000000000000000000000;;				resources, ok := group.VersionedResources[discoveryVersion.Version]
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				gv := schema.GroupVersion{Group: group.Group.Name, Version: discoveryVersion.Version}
0000000000000000000000000000000000000000;;				for _, resource := range resources {
0000000000000000000000000000000000000000;;					dot.registered[gv.WithKind(resource.Kind)] = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return dot
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectKind returns the group,version,kind of the provided object, or an error
0000000000000000000000000000000000000000;;	// if the object in not runtime.Unstructured or has no group,version,kind
0000000000000000000000000000000000000000;;	// information.
0000000000000000000000000000000000000000;;	func (d *UnstructuredObjectTyper) ObjectKind(obj runtime.Object) (schema.GroupVersionKind, error) {
0000000000000000000000000000000000000000;;		if _, ok := obj.(runtime.Unstructured); !ok {
0000000000000000000000000000000000000000;;			return schema.GroupVersionKind{}, fmt.Errorf("type %T is invalid for dynamic object typer", obj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return obj.GetObjectKind().GroupVersionKind(), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ObjectKinds returns a slice of one element with the group,version,kind of the
0000000000000000000000000000000000000000;;	// provided object, or an error if the object is not runtime.Unstructured or
0000000000000000000000000000000000000000;;	// has no group,version,kind information. unversionedType will always be false
0000000000000000000000000000000000000000;;	// because runtime.Unstructured object should always have group,version,kind
0000000000000000000000000000000000000000;;	// information set.
0000000000000000000000000000000000000000;;	func (d *UnstructuredObjectTyper) ObjectKinds(obj runtime.Object) (gvks []schema.GroupVersionKind, unversionedType bool, err error) {
0000000000000000000000000000000000000000;;		gvk, err := d.ObjectKind(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return []schema.GroupVersionKind{gvk}, false, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Recognizes returns true if the provided group,version,kind was in the
0000000000000000000000000000000000000000;;	// discovery information.
0000000000000000000000000000000000000000;;	func (d *UnstructuredObjectTyper) Recognizes(gvk schema.GroupVersionKind) bool {
0000000000000000000000000000000000000000;;		return d.registered[gvk]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsUnversioned returns false always because runtime.Unstructured objects
0000000000000000000000000000000000000000;;	// should always have group,version,kind information set. ok will be true if the
0000000000000000000000000000000000000000;;	// object's group,version,kind is api.Registry.
0000000000000000000000000000000000000000;;	func (d *UnstructuredObjectTyper) IsUnversioned(obj runtime.Object) (unversioned bool, ok bool) {
0000000000000000000000000000000000000000;;		gvk, err := d.ObjectKind(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return false, d.registered[gvk]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ runtime.ObjectTyper = &UnstructuredObjectTyper{}
