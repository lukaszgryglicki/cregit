0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/discovery/client_test.go[staging/src/k8s.io/client-go/1.4/discovery/client_test.go][staging/src/k8s.io/client-go/discovery/discovery_client_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"mime"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful-swagger12"
0000000000000000000000000000000000000000;;		"github.com/gogo/protobuf/proto"
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/OpenAPIv2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		. "k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerVersion(t *testing.T) {
0000000000000000000000000000000000000000;;		expect := version.Info{
0000000000000000000000000000000000000000;;			Major:     "foo",
0000000000000000000000000000000000000000;;			Minor:     "bar",
0000000000000000000000000000000000000000;;			GitCommit: "baz",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			output, err := json.Marshal(expect)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		got, err := client.ServerVersion()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, *got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerGroupsWithV1Server(t *testing.T) {
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			var obj interface{}
0000000000000000000000000000000000000000;;			switch req.URL.Path {
0000000000000000000000000000000000000000;;			case "/api":
0000000000000000000000000000000000000000;;				obj = &metav1.APIVersions{
0000000000000000000000000000000000000000;;					Versions: []string{
0000000000000000000000000000000000000000;;						"v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			output, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		// ServerGroups should not return an error even if server returns error at /api and /apis
0000000000000000000000000000000000000000;;		apiGroupList, err := client.ServerGroups()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		groupVersions := metav1.ExtractGroupVersions(apiGroupList)
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(groupVersions, []string{"v1"}) {
0000000000000000000000000000000000000000;;			t.Errorf("expected: %q, got: %q", []string{"v1"}, groupVersions)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerGroupsWithBrokenServer(t *testing.T) {
0000000000000000000000000000000000000000;;		for _, statusCode := range []int{http.StatusNotFound, http.StatusForbidden} {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				w.WriteHeader(statusCode)
0000000000000000000000000000000000000000;;			}))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;			client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;			// ServerGroups should not return an error even if server returns Not Found or Forbidden error at all end points
0000000000000000000000000000000000000000;;			apiGroupList, err := client.ServerGroups()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			groupVersions := metav1.ExtractGroupVersions(apiGroupList)
0000000000000000000000000000000000000000;;			if len(groupVersions) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("expected empty list, got: %q", groupVersions)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerResourcesWithV1Server(t *testing.T) {
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			var obj interface{}
0000000000000000000000000000000000000000;;			switch req.URL.Path {
0000000000000000000000000000000000000000;;			case "/api":
0000000000000000000000000000000000000000;;				obj = &metav1.APIVersions{
0000000000000000000000000000000000000000;;					Versions: []string{
0000000000000000000000000000000000000000;;						"v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			output, err := json.Marshal(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		// ServerResources should not return an error even if server returns error at /api/v1.
0000000000000000000000000000000000000000;;		serverResources, err := client.ServerResources()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		gvs := groupVersions(serverResources)
0000000000000000000000000000000000000000;;		if !sets.NewString(gvs...).Has("v1") {
0000000000000000000000000000000000000000;;			t.Errorf("missing v1 in resource list: %v", serverResources)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetServerResources(t *testing.T) {
0000000000000000000000000000000000000000;;		stable := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;				{Name: "services", Namespaced: true, Kind: "Service"},
0000000000000000000000000000000000000000;;				{Name: "namespaces", Namespaced: false, Kind: "Namespace"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		beta := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "deployments", Namespaced: true, Kind: "Deployment"},
0000000000000000000000000000000000000000;;				{Name: "ingresses", Namespaced: true, Kind: "Ingress"},
0000000000000000000000000000000000000000;;				{Name: "jobs", Namespaced: true, Kind: "Job"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			resourcesList *metav1.APIResourceList
0000000000000000000000000000000000000000;;			path          string
0000000000000000000000000000000000000000;;			request       string
0000000000000000000000000000000000000000;;			expectErr     bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resourcesList: &stable,
0000000000000000000000000000000000000000;;				path:          "/api/v1",
0000000000000000000000000000000000000000;;				request:       "v1",
0000000000000000000000000000000000000000;;				expectErr:     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resourcesList: &beta,
0000000000000000000000000000000000000000;;				path:          "/apis/extensions/v1beta1",
0000000000000000000000000000000000000000;;				request:       "extensions/v1beta1",
0000000000000000000000000000000000000000;;				expectErr:     false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resourcesList: &stable,
0000000000000000000000000000000000000000;;				path:          "/api/v1",
0000000000000000000000000000000000000000;;				request:       "foobar",
0000000000000000000000000000000000000000;;				expectErr:     true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			var list interface{}
0000000000000000000000000000000000000000;;			switch req.URL.Path {
0000000000000000000000000000000000000000;;			case "/api/v1":
0000000000000000000000000000000000000000;;				list = &stable
0000000000000000000000000000000000000000;;			case "/apis/extensions/v1beta1":
0000000000000000000000000000000000000000;;				list = &beta
0000000000000000000000000000000000000000;;			case "/api":
0000000000000000000000000000000000000000;;				list = &metav1.APIVersions{
0000000000000000000000000000000000000000;;					Versions: []string{
0000000000000000000000000000000000000000;;						"v1",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case "/apis":
0000000000000000000000000000000000000000;;				list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;					Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;								{GroupVersion: "extensions/v1beta1"},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			got, err := client.ServerResourcesForGroupVersion(test.request)
0000000000000000000000000000000000000000;;			if test.expectErr {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, test.resourcesList) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%v\ngot:\n%v\n", test.resourcesList, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		serverResources, err := client.ServerResources()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		serverGroupVersions := sets.NewString(groupVersions(serverResources)...)
0000000000000000000000000000000000000000;;		for _, api := range []string{"v1", "extensions/v1beta1"} {
0000000000000000000000000000000000000000;;			if !serverGroupVersions.Has(api) {
0000000000000000000000000000000000000000;;				t.Errorf("missing expected api %q in %v", api, serverResources)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func swaggerSchemaFakeServer() (*httptest.Server, error) {
0000000000000000000000000000000000000000;;		request := 1
0000000000000000000000000000000000000000;;		var sErr error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			var resp interface{}
0000000000000000000000000000000000000000;;			if request == 1 {
0000000000000000000000000000000000000000;;				resp = metav1.APIVersions{Versions: []string{"v1", "v2", "v3"}}
0000000000000000000000000000000000000000;;				request++
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				resp = swagger.ApiDeclaration{}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			output, err := json.Marshal(resp)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				sErr = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		return server, sErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetSwaggerSchema(t *testing.T) {
0000000000000000000000000000000000000000;;		expect := swagger.ApiDeclaration{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server, err := swaggerSchemaFakeServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		got, err := client.SwaggerSchema(v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := expect, *got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetSwaggerSchemaFail(t *testing.T) {
0000000000000000000000000000000000000000;;		expErr := "API version: api.group/v4 is not supported by the server. Use one of: [v1 v2 v3]"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		server, err := swaggerSchemaFakeServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		got, err := client.SwaggerSchema(schema.GroupVersion{Group: "api.group", Version: "v4"})
0000000000000000000000000000000000000000;;		if got != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected response: %v", got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err.Error() != expErr {
0000000000000000000000000000000000000000;;			t.Errorf("expected an error, got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var returnedOpenAPI = openapi_v2.Document{
0000000000000000000000000000000000000000;;		Definitions: &openapi_v2.Definitions{
0000000000000000000000000000000000000000;;			AdditionalProperties: []*openapi_v2.NamedSchema{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "fake.type.1",
0000000000000000000000000000000000000000;;					Value: &openapi_v2.Schema{
0000000000000000000000000000000000000000;;						Properties: &openapi_v2.Properties{
0000000000000000000000000000000000000000;;							AdditionalProperties: []*openapi_v2.NamedSchema{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "count",
0000000000000000000000000000000000000000;;									Value: &openapi_v2.Schema{
0000000000000000000000000000000000000000;;										Type: &openapi_v2.TypeItem{
0000000000000000000000000000000000000000;;											Value: []string{"integer"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					Name: "fake.type.2",
0000000000000000000000000000000000000000;;					Value: &openapi_v2.Schema{
0000000000000000000000000000000000000000;;						Properties: &openapi_v2.Properties{
0000000000000000000000000000000000000000;;							AdditionalProperties: []*openapi_v2.NamedSchema{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "count",
0000000000000000000000000000000000000000;;									Value: &openapi_v2.Schema{
0000000000000000000000000000000000000000;;										Type: &openapi_v2.TypeItem{
0000000000000000000000000000000000000000;;											Value: []string{"array"},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;										Items: &openapi_v2.ItemsItem{
0000000000000000000000000000000000000000;;											Schema: []*openapi_v2.Schema{
0000000000000000000000000000000000000000;;												{
0000000000000000000000000000000000000000;;													Type: &openapi_v2.TypeItem{
0000000000000000000000000000000000000000;;														Value: []string{"string"},
0000000000000000000000000000000000000000;;													},
0000000000000000000000000000000000000000;;												},
0000000000000000000000000000000000000000;;											},
0000000000000000000000000000000000000000;;										},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func openapiSchemaFakeServer() (*httptest.Server, error) {
0000000000000000000000000000000000000000;;		var sErr error
0000000000000000000000000000000000000000;;		server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;			if req.URL.Path != "/swagger-2.0.0.pb-v1" {
0000000000000000000000000000000000000000;;				sErr = fmt.Errorf("Unexpected url %v", req.URL)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if req.Method != "GET" {
0000000000000000000000000000000000000000;;				sErr = fmt.Errorf("Unexpected method %v", req.Method)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			mime.AddExtensionType(".pb-v1", "application/com.github.googleapis.gnostic.OpenAPIv2@68f4ded+protobuf")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			output, err := proto.Marshal(&returnedOpenAPI)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				sErr = err
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;			w.Write(output)
0000000000000000000000000000000000000000;;		}))
0000000000000000000000000000000000000000;;		return server, sErr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetOpenAPISchema(t *testing.T) {
0000000000000000000000000000000000000000;;		server, err := openapiSchemaFakeServer()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error starting fake server: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;		got, err := client.OpenAPISchema()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected error getting openapi: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := returnedOpenAPI, *got; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerPreferredResources(t *testing.T) {
0000000000000000000000000000000000000000;;		stable := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;				{Name: "services", Namespaced: true, Kind: "Service"},
0000000000000000000000000000000000000000;;				{Name: "namespaces", Namespaced: false, Kind: "Namespace"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			resourcesList []*metav1.APIResourceList
0000000000000000000000000000000000000000;;			response      func(w http.ResponseWriter, req *http.Request)
0000000000000000000000000000000000000000;;			expectErr     func(err error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resourcesList: []*metav1.APIResourceList{&stable},
0000000000000000000000000000000000000000;;				expectErr:     IsGroupDiscoveryFailedError,
0000000000000000000000000000000000000000;;				response: func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var list interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/apis/extensions/v1beta1":
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					case "/api/v1":
0000000000000000000000000000000000000000;;						list = &stable
0000000000000000000000000000000000000000;;					case "/api":
0000000000000000000000000000000000000000;;						list = &metav1.APIVersions{
0000000000000000000000000000000000000000;;							Versions: []string{
0000000000000000000000000000000000000000;;								"v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case "/apis":
0000000000000000000000000000000000000000;;						list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;							Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;										{GroupVersion: "extensions/v1beta1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;					w.Write(output)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				resourcesList: nil,
0000000000000000000000000000000000000000;;				expectErr:     IsGroupDiscoveryFailedError,
0000000000000000000000000000000000000000;;				response: func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var list interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/apis/extensions/v1beta1":
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					case "/api/v1":
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;					case "/api":
0000000000000000000000000000000000000000;;						list = &metav1.APIVersions{
0000000000000000000000000000000000000000;;							Versions: []string{
0000000000000000000000000000000000000000;;								"v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case "/apis":
0000000000000000000000000000000000000000;;						list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;							Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;										{GroupVersion: "extensions/v1beta1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;					w.Write(output)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, test := range tests {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(test.response))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;			resources, err := client.ServerPreferredResources()
0000000000000000000000000000000000000000;;			if test.expectErr != nil {
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Error("unexpected non-error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got, err := GroupVersionResources(resources)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			expected, _ := GroupVersionResources(test.resourcesList)
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, expected) {
0000000000000000000000000000000000000000;;				t.Errorf("expected:\n%v\ngot:\n%v\n", test.resourcesList, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerPreferredResourcesRetries(t *testing.T) {
0000000000000000000000000000000000000000;;		stable := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		beta := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "extensions/v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "deployments", Namespaced: true, Kind: "Deployment"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		response := func(numErrors int) http.HandlerFunc {
0000000000000000000000000000000000000000;;			var i = 0
0000000000000000000000000000000000000000;;			return func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;				var list interface{}
0000000000000000000000000000000000000000;;				switch req.URL.Path {
0000000000000000000000000000000000000000;;				case "/apis/extensions/v1beta1":
0000000000000000000000000000000000000000;;					if i < numErrors {
0000000000000000000000000000000000000000;;						i++
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					list = &beta
0000000000000000000000000000000000000000;;				case "/api/v1":
0000000000000000000000000000000000000000;;					list = &stable
0000000000000000000000000000000000000000;;				case "/api":
0000000000000000000000000000000000000000;;					list = &metav1.APIVersions{
0000000000000000000000000000000000000000;;						Versions: []string{
0000000000000000000000000000000000000000;;							"v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case "/apis":
0000000000000000000000000000000000000000;;					list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;						Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								Name: "extensions",
0000000000000000000000000000000000000000;;								Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;									{GroupVersion: "extensions/v1beta1"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;								PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;									GroupVersion: "extensions/v1beta1",
0000000000000000000000000000000000000000;;									Version:      "v1beta1",
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;				w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;				w.Write(output)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			responseErrors  int
0000000000000000000000000000000000000000;;			expectResources int
0000000000000000000000000000000000000000;;			expectedError   func(err error) bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				responseErrors:  1,
0000000000000000000000000000000000000000;;				expectResources: 2,
0000000000000000000000000000000000000000;;				expectedError: func(err error) bool {
0000000000000000000000000000000000000000;;					return err == nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				responseErrors:  2,
0000000000000000000000000000000000000000;;				expectResources: 1,
0000000000000000000000000000000000000000;;				expectedError:   IsGroupDiscoveryFailedError,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, tc := range tests {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(response(tc.responseErrors)))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;			resources, err := client.ServerPreferredResources()
0000000000000000000000000000000000000000;;			if !tc.expectedError(err) {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got, err := GroupVersionResources(resources)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(got) != tc.expectResources {
0000000000000000000000000000000000000000;;				t.Errorf("case %d: expect %d resources, got %#v", i, tc.expectResources, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestServerPreferredNamespacedResources(t *testing.T) {
0000000000000000000000000000000000000000;;		stable := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;				{Name: "services", Namespaced: true, Kind: "Service"},
0000000000000000000000000000000000000000;;				{Name: "namespaces", Namespaced: false, Kind: "Namespace"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		batchv1 := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "batch/v1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "jobs", Namespaced: true, Kind: "Job"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		batchv2alpha1 := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "batch/v2alpha1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "jobs", Namespaced: true, Kind: "Job"},
0000000000000000000000000000000000000000;;				{Name: "cronjobs", Namespaced: true, Kind: "CronJob"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		batchv3alpha1 := metav1.APIResourceList{
0000000000000000000000000000000000000000;;			GroupVersion: "batch/v3alpha1",
0000000000000000000000000000000000000000;;			APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;				{Name: "jobs", Namespaced: true, Kind: "Job"},
0000000000000000000000000000000000000000;;				{Name: "cronjobs", Namespaced: true, Kind: "CronJob"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			response func(w http.ResponseWriter, req *http.Request)
0000000000000000000000000000000000000000;;			expected map[schema.GroupVersionResource]struct{}
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				response: func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var list interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/api/v1":
0000000000000000000000000000000000000000;;						list = &stable
0000000000000000000000000000000000000000;;					case "/api":
0000000000000000000000000000000000000000;;						list = &metav1.APIVersions{
0000000000000000000000000000000000000000;;							Versions: []string{
0000000000000000000000000000000000000000;;								"v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;					w.Write(output)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: map[schema.GroupVersionResource]struct{}{
0000000000000000000000000000000000000000;;					{Group: "", Version: "v1", Resource: "pods"}:     {},
0000000000000000000000000000000000000000;;					{Group: "", Version: "v1", Resource: "services"}: {},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				response: func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var list interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/apis":
0000000000000000000000000000000000000000;;						list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;							Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "batch",
0000000000000000000000000000000000000000;;									Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v1", Version: "v1"},
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v2alpha1", Version: "v2alpha1"},
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v3alpha1", Version: "v3alpha1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									PreferredVersion: metav1.GroupVersionForDiscovery{GroupVersion: "batch/v1", Version: "v1"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case "/apis/batch/v1":
0000000000000000000000000000000000000000;;						list = &batchv1
0000000000000000000000000000000000000000;;					case "/apis/batch/v2alpha1":
0000000000000000000000000000000000000000;;						list = &batchv2alpha1
0000000000000000000000000000000000000000;;					case "/apis/batch/v3alpha1":
0000000000000000000000000000000000000000;;						list = &batchv3alpha1
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;					w.Write(output)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: map[schema.GroupVersionResource]struct{}{
0000000000000000000000000000000000000000;;					{Group: "batch", Version: "v1", Resource: "jobs"}:           {},
0000000000000000000000000000000000000000;;					{Group: "batch", Version: "v2alpha1", Resource: "cronjobs"}: {},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				response: func(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;					var list interface{}
0000000000000000000000000000000000000000;;					switch req.URL.Path {
0000000000000000000000000000000000000000;;					case "/apis":
0000000000000000000000000000000000000000;;						list = &metav1.APIGroupList{
0000000000000000000000000000000000000000;;							Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;								{
0000000000000000000000000000000000000000;;									Name: "batch",
0000000000000000000000000000000000000000;;									Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v1", Version: "v1"},
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v2alpha1", Version: "v2alpha1"},
0000000000000000000000000000000000000000;;										{GroupVersion: "batch/v3alpha1", Version: "v3alpha1"},
0000000000000000000000000000000000000000;;									},
0000000000000000000000000000000000000000;;									PreferredVersion: metav1.GroupVersionForDiscovery{GroupVersion: "batch/v2alpha", Version: "v2alpha1"},
0000000000000000000000000000000000000000;;								},
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					case "/apis/batch/v1":
0000000000000000000000000000000000000000;;						list = &batchv1
0000000000000000000000000000000000000000;;					case "/apis/batch/v2alpha1":
0000000000000000000000000000000000000000;;						list = &batchv2alpha1
0000000000000000000000000000000000000000;;					case "/apis/batch/v3alpha1":
0000000000000000000000000000000000000000;;						list = &batchv3alpha1
0000000000000000000000000000000000000000;;					default:
0000000000000000000000000000000000000000;;						t.Logf("unexpected request: %s", req.URL.Path)
0000000000000000000000000000000000000000;;						w.WriteHeader(http.StatusNotFound)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					output, err := json.Marshal(list)
0000000000000000000000000000000000000000;;					if err != nil {
0000000000000000000000000000000000000000;;						t.Errorf("unexpected encoding error: %v", err)
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					w.Header().Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;					w.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;					w.Write(output)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				expected: map[schema.GroupVersionResource]struct{}{
0000000000000000000000000000000000000000;;					{Group: "batch", Version: "v2alpha1", Resource: "jobs"}:     {},
0000000000000000000000000000000000000000;;					{Group: "batch", Version: "v2alpha1", Resource: "cronjobs"}: {},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			server := httptest.NewServer(http.HandlerFunc(test.response))
0000000000000000000000000000000000000000;;			defer server.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			client := NewDiscoveryClientForConfigOrDie(&restclient.Config{Host: server.URL})
0000000000000000000000000000000000000000;;			resources, err := client.ServerPreferredNamespacedResources()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			got, err := GroupVersionResources(resources)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] unexpected error: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, test.expected) {
0000000000000000000000000000000000000000;;				t.Errorf("[%d] expected:\n%v\ngot:\n%v\n", i, test.expected, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			server.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func groupVersions(resources []*metav1.APIResourceList) []string {
0000000000000000000000000000000000000000;;		result := []string{}
0000000000000000000000000000000000000000;;		for _, resourceList := range resources {
0000000000000000000000000000000000000000;;			result = append(result, resourceList.GroupVersion)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
