0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/discovery/restmapper_test.go[staging/src/k8s.io/client-go/1.4/discovery/restmapper_test.go][staging/src/k8s.io/client-go/discovery/restmapper_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package discovery_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/version"
0000000000000000000000000000000000000000;;		. "k8s.io/client-go/discovery"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/rest/fake"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/emicklei/go-restful-swagger12"
0000000000000000000000000000000000000000;;		"github.com/googleapis/gnostic/OpenAPIv2"
0000000000000000000000000000000000000000;;		"github.com/stretchr/testify/assert"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRESTMapper(t *testing.T) {
0000000000000000000000000000000000000000;;		resources := []*APIGroupResources{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Name: "extensions",
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1beta"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1beta"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1beta": {
0000000000000000000000000000000000000000;;						{Name: "jobs", Namespaced: true, Kind: "Job"},
0000000000000000000000000000000000000000;;						{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Group: metav1.APIGroup{
0000000000000000000000000000000000000000;;					Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;						{Version: "v1"},
0000000000000000000000000000000000000000;;						{Version: "v2"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					PreferredVersion: metav1.GroupVersionForDiscovery{Version: "v1"},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				VersionedResources: map[string][]metav1.APIResource{
0000000000000000000000000000000000000000;;					"v1": {
0000000000000000000000000000000000000000;;						{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					"v2": {
0000000000000000000000000000000000000000;;						{Name: "pods", Namespaced: true, Kind: "Pod"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		restMapper := NewRESTMapper(resources, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		kindTCs := []struct {
0000000000000000000000000000000000000000;;			input schema.GroupVersionResource
0000000000000000000000000000000000000000;;			want  schema.GroupVersionKind
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionKind{
0000000000000000000000000000000000000000;;					Version: "v1",
0000000000000000000000000000000000000000;;					Kind:    "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v1",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionKind{
0000000000000000000000000000000000000000;;					Version: "v1",
0000000000000000000000000000000000000000;;					Kind:    "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v2",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionKind{
0000000000000000000000000000000000000000;;					Version: "v2",
0000000000000000000000000000000000000000;;					Kind:    "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionKind{
0000000000000000000000000000000000000000;;					Version: "v1",
0000000000000000000000000000000000000000;;					Kind:    "Pod",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "jobs",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionKind{
0000000000000000000000000000000000000000;;					Group:   "extensions",
0000000000000000000000000000000000000000;;					Version: "v1beta",
0000000000000000000000000000000000000000;;					Kind:    "Job",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range kindTCs {
0000000000000000000000000000000000000000;;			got, err := restMapper.KindFor(tc.input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("KindFor(%#v) unexpected error: %v", tc.input, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("KindFor(%#v) = %#v, want %#v", tc.input, got, tc.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resourceTCs := []struct {
0000000000000000000000000000000000000000;;			input schema.GroupVersionResource
0000000000000000000000000000000000000000;;			want  schema.GroupVersionResource
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v1",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v1",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v1",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v2",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v2",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Version:  "v1",
0000000000000000000000000000000000000000;;					Resource: "pods",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Resource: "jobs",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				want: schema.GroupVersionResource{
0000000000000000000000000000000000000000;;					Group:    "extensions",
0000000000000000000000000000000000000000;;					Version:  "v1beta",
0000000000000000000000000000000000000000;;					Resource: "jobs",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range resourceTCs {
0000000000000000000000000000000000000000;;			got, err := restMapper.ResourceFor(tc.input)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("ResourceFor(%#v) unexpected error: %v", tc.input, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(got, tc.want) {
0000000000000000000000000000000000000000;;				t.Errorf("ResourceFor(%#v) = %#v, want %#v", tc.input, got, tc.want)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeferredDiscoveryRESTMapper_CacheMiss(t *testing.T) {
0000000000000000000000000000000000000000;;		assert := assert.New(t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc := fakeCachedDiscoveryInterface{fresh: false}
0000000000000000000000000000000000000000;;		m := NewDeferredDiscoveryRESTMapper(&cdc, nil)
0000000000000000000000000000000000000000;;		assert.False(cdc.fresh, "should NOT be fresh after instantiation")
0000000000000000000000000000000000000000;;		assert.Zero(cdc.invalidateCalls, "should not have called Invalidate()")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gvk, err := m.KindFor(schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			Group:    "a",
0000000000000000000000000000000000000000;;			Version:  "v1",
0000000000000000000000000000000000000000;;			Resource: "foo",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		assert.True(cdc.fresh, "should be fresh after a cache-miss")
0000000000000000000000000000000000000000;;		assert.Equal(cdc.invalidateCalls, 1, "should have called Invalidate() once")
0000000000000000000000000000000000000000;;		assert.Equal(gvk.Kind, "Foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gvk, err = m.KindFor(schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			Group:    "a",
0000000000000000000000000000000000000000;;			Version:  "v1",
0000000000000000000000000000000000000000;;			Resource: "foo",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.NoError(err)
0000000000000000000000000000000000000000;;		assert.Equal(cdc.invalidateCalls, 1, "should NOT have called Invalidate() again")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gvk, err = m.KindFor(schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			Group:    "a",
0000000000000000000000000000000000000000;;			Version:  "v1",
0000000000000000000000000000000000000000;;			Resource: "bar",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.Error(err)
0000000000000000000000000000000000000000;;		assert.Equal(cdc.invalidateCalls, 1, "should NOT have called Invalidate() again after another cache-miss, but with fresh==true")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		cdc.fresh = false
0000000000000000000000000000000000000000;;		gvk, err = m.KindFor(schema.GroupVersionResource{
0000000000000000000000000000000000000000;;			Group:    "a",
0000000000000000000000000000000000000000;;			Version:  "v1",
0000000000000000000000000000000000000000;;			Resource: "bar",
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		assert.Error(err)
0000000000000000000000000000000000000000;;		assert.Equal(cdc.invalidateCalls, 2, "should HAVE called Invalidate() again after another cache-miss, but with fresh==false")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeCachedDiscoveryInterface struct {
0000000000000000000000000000000000000000;;		invalidateCalls int
0000000000000000000000000000000000000000;;		fresh           bool
0000000000000000000000000000000000000000;;		enabledA        bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ CachedDiscoveryInterface = &fakeCachedDiscoveryInterface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) Fresh() bool {
0000000000000000000000000000000000000000;;		return c.fresh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) Invalidate() {
0000000000000000000000000000000000000000;;		c.invalidateCalls = c.invalidateCalls + 1
0000000000000000000000000000000000000000;;		c.fresh = true
0000000000000000000000000000000000000000;;		c.enabledA = true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) RESTClient() restclient.Interface {
0000000000000000000000000000000000000000;;		return &fake.RESTClient{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerGroups() (*metav1.APIGroupList, error) {
0000000000000000000000000000000000000000;;		if c.enabledA {
0000000000000000000000000000000000000000;;			return &metav1.APIGroupList{
0000000000000000000000000000000000000000;;				Groups: []metav1.APIGroup{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name: "a",
0000000000000000000000000000000000000000;;						Versions: []metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;							{
0000000000000000000000000000000000000000;;								GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;								Version:      "v1",
0000000000000000000000000000000000000000;;							},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;						PreferredVersion: metav1.GroupVersionForDiscovery{
0000000000000000000000000000000000000000;;							GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;							Version:      "v1",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &metav1.APIGroupList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		if c.enabledA && groupVersion == "a/v1" {
0000000000000000000000000000000000000000;;			return &metav1.APIResourceList{
0000000000000000000000000000000000000000;;				GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;				APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						Name:       "foo",
0000000000000000000000000000000000000000;;						Kind:       "Foo",
0000000000000000000000000000000000000000;;						Namespaced: false,
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, errors.NewNotFound(schema.GroupResource{}, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		if c.enabledA {
0000000000000000000000000000000000000000;;			av1, _ := c.ServerResourcesForGroupVersion("a/v1")
0000000000000000000000000000000000000000;;			return []*metav1.APIResourceList{av1}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []*metav1.APIResourceList{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerPreferredResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		if c.enabledA {
0000000000000000000000000000000000000000;;			return []*metav1.APIResourceList{
0000000000000000000000000000000000000000;;				{
0000000000000000000000000000000000000000;;					GroupVersion: "a/v1",
0000000000000000000000000000000000000000;;					APIResources: []metav1.APIResource{
0000000000000000000000000000000000000000;;						{
0000000000000000000000000000000000000000;;							Name:  "foo",
0000000000000000000000000000000000000000;;							Kind:  "Foo",
0000000000000000000000000000000000000000;;							Verbs: []string{},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerPreferredNamespacedResources() ([]*metav1.APIResourceList, error) {
0000000000000000000000000000000000000000;;		return nil, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) ServerVersion() (*version.Info, error) {
0000000000000000000000000000000000000000;;		return &version.Info{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) SwaggerSchema(version schema.GroupVersion) (*swagger.ApiDeclaration, error) {
0000000000000000000000000000000000000000;;		return &swagger.ApiDeclaration{}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeCachedDiscoveryInterface) OpenAPISchema() (*openapi_v2.Document, error) {
0000000000000000000000000000000000000000;;		return &openapi_v2.Document{}, nil
0000000000000000000000000000000000000000;;	}
