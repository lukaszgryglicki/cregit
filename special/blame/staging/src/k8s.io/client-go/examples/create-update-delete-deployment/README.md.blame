0000000000000000000000000000000000000000;;	# Create, Update & Delete Deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This example program demonstrates the fundamental operations for managing on
0000000000000000000000000000000000000000;;	[Deployment][1] resources, such as `Create`, `List`, `Update` and `Delete`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can adopt the source code from this example to write programs that manage
0000000000000000000000000000000000000000;;	other types of resources through the Kubernetes API.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Running this example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Make sure you have a Kubernetes cluster and `kubectl` is configured:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    kubectl get nodes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Compile this example on your workstation:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	cd create-update-delete-deployment
0000000000000000000000000000000000000000;;	go build -o ./app
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Now, run this application on your workstation with your local kubeconfig file:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	./app -kubeconfig=$HOME/.kube/config
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Running this command will execute the following operations on your cluster:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. **Create Deployment:** This will create a 2 replica Deployment. Verify with
0000000000000000000000000000000000000000;;	   `kubectl get pods`.
0000000000000000000000000000000000000000;;	2. **Update Deployment:** This will update the Deployment resource created in
0000000000000000000000000000000000000000;;	   previous step to set the replica count to 1 and add annotations. You are
0000000000000000000000000000000000000000;;	   encouraged to inspect the retry loop that handles conflicts. Verify the new
0000000000000000000000000000000000000000;;	   replica count and `foo=bar` annotation with `kubectl describe deployment
0000000000000000000000000000000000000000;;	   demo`.
0000000000000000000000000000000000000000;;	3. **List Deployments:** This will retrieve Deployments in the `default`
0000000000000000000000000000000000000000;;	   namespace and print their names and replica counts.
0000000000000000000000000000000000000000;;	4. **Delete Deployment:** This will delete the Deployment object and its
0000000000000000000000000000000000000000;;	   dependent ReplicaSet resource. Verify with `kubectl get deployments`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Each step is separated by an interactive prompt. You must hit the
0000000000000000000000000000000000000000;;	<kbd>Return</kbd> key to proceeed to the next step. You can use these prompts as
0000000000000000000000000000000000000000;;	a break to take time to  run `kubectl` and inspect the result of the operations
0000000000000000000000000000000000000000;;	executed.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You should see an output like the following:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Creating deployment...
0000000000000000000000000000000000000000;;	Created deployment "demo-deployment".
0000000000000000000000000000000000000000;;	-> Press Return key to continue.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Updating deployment...
0000000000000000000000000000000000000000;;	Updated deployment...
0000000000000000000000000000000000000000;;	-> Press Return key to continue.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Listing deployments in namespace "default":
0000000000000000000000000000000000000000;;	 * demo-deployment (1 replicas)
0000000000000000000000000000000000000000;;	-> Press Return key to continue.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Deleting deployment...
0000000000000000000000000000000000000000;;	Deleted deployment.
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Cleanup
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Successfully running this program will clean the created artifacts. If you
0000000000000000000000000000000000000000;;	terminate the program without completing, you can clean up the created
0000000000000000000000000000000000000000;;	deployment with:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    kubectl delete deploy demo-deployment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Troubleshooting
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you are getting the following error, make sure Kubernetes version of your
0000000000000000000000000000000000000000;;	cluster is v1.6 or above in `kubectl version`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    panic: the server could not find the requested resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[1]: https://kubernetes.io/docs/user-guide/deployments/
