0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
370c8a012d3af175112c0699f18125b97ddeda6d;staging/src/k8s.io/client-go/examples/out-of-cluster/main.go[staging/src/k8s.io/client-go/examples/out-of-cluster/main.go][staging/src/k8s.io/client-go/examples/out-of-cluster-client-configuration/main.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Note: the example only works with the code within the same release/branch.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd"
0000000000000000000000000000000000000000;;		// Uncomment the following line to load the gcp plugin (only required to authenticate against GKE clusters).
0000000000000000000000000000000000000000;;		// _ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		var kubeconfig *string
0000000000000000000000000000000000000000;;		if home := homeDir(); home != "" {
0000000000000000000000000000000000000000;;			kubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			kubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// use the current context in kubeconfig
0000000000000000000000000000000000000000;;		config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// create the clientset
0000000000000000000000000000000000000000;;		clientset, err := kubernetes.NewForConfig(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			pods, err := clientset.CoreV1().Pods("").List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Examples for error handling:
0000000000000000000000000000000000000000;;			// - Use helper functions like e.g. errors.IsNotFound()
0000000000000000000000000000000000000000;;			// - And/or cast to StatusError and use its properties like e.g. ErrStatus.Message
0000000000000000000000000000000000000000;;			_, err = clientset.CoreV1().Pods("default").Get("example-xxxxx", metav1.GetOptions{})
0000000000000000000000000000000000000000;;			if errors.IsNotFound(err) {
0000000000000000000000000000000000000000;;				fmt.Printf("Pod not found\n")
0000000000000000000000000000000000000000;;			} else if statusError, isStatus := err.(*errors.StatusError); isStatus {
0000000000000000000000000000000000000000;;				fmt.Printf("Error getting pod %v\n", statusError.ErrStatus.Message)
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				panic(err.Error())
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				fmt.Printf("Found pod\n")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			time.Sleep(10 * time.Second)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func homeDir() string {
0000000000000000000000000000000000000000;;		if h := os.Getenv("HOME"); h != "" {
0000000000000000000000000000000000000000;;			return h
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return os.Getenv("USERPROFILE") // windows
0000000000000000000000000000000000000000;;	}
