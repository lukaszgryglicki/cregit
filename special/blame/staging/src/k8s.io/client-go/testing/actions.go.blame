0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/testing/actions.go[staging/src/k8s.io/client-go/1.4/testing/actions.go][staging/src/k8s.io/client-go/testing/actions.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootGetAction(resource schema.GroupVersionResource, name string) GetActionImpl {
0000000000000000000000000000000000000000;;		action := GetActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewGetAction(resource schema.GroupVersionResource, namespace, name string) GetActionImpl {
0000000000000000000000000000000000000000;;		action := GetActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootListAction(resource schema.GroupVersionResource, kind schema.GroupVersionKind, opts interface{}) ListActionImpl {
0000000000000000000000000000000000000000;;		action := ListActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "list"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Kind = kind
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, _ := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.ListRestrictions = ListRestrictions{labelSelector, fieldSelector}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewListAction(resource schema.GroupVersionResource, kind schema.GroupVersionKind, namespace string, opts interface{}) ListActionImpl {
0000000000000000000000000000000000000000;;		action := ListActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "list"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Kind = kind
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, _ := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.ListRestrictions = ListRestrictions{labelSelector, fieldSelector}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootCreateAction(resource schema.GroupVersionResource, object runtime.Object) CreateActionImpl {
0000000000000000000000000000000000000000;;		action := CreateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "create"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCreateAction(resource schema.GroupVersionResource, namespace string, object runtime.Object) CreateActionImpl {
0000000000000000000000000000000000000000;;		action := CreateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "create"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootUpdateAction(resource schema.GroupVersionResource, object runtime.Object) UpdateActionImpl {
0000000000000000000000000000000000000000;;		action := UpdateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "update"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUpdateAction(resource schema.GroupVersionResource, namespace string, object runtime.Object) UpdateActionImpl {
0000000000000000000000000000000000000000;;		action := UpdateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "update"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootPatchAction(resource schema.GroupVersionResource, name string, patch []byte) PatchActionImpl {
0000000000000000000000000000000000000000;;		action := PatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "patch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;		action.Patch = patch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPatchAction(resource schema.GroupVersionResource, namespace string, name string, patch []byte) PatchActionImpl {
0000000000000000000000000000000000000000;;		action := PatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "patch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;		action.Patch = patch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootPatchSubresourceAction(resource schema.GroupVersionResource, name string, patch []byte, subresources ...string) PatchActionImpl {
0000000000000000000000000000000000000000;;		action := PatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "patch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Subresource = path.Join(subresources...)
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;		action.Patch = patch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewPatchSubresourceAction(resource schema.GroupVersionResource, namespace, name string, patch []byte, subresources ...string) PatchActionImpl {
0000000000000000000000000000000000000000;;		action := PatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "patch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Subresource = path.Join(subresources...)
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;		action.Patch = patch
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootUpdateSubresourceAction(resource schema.GroupVersionResource, subresource string, object runtime.Object) UpdateActionImpl {
0000000000000000000000000000000000000000;;		action := UpdateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "update"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Subresource = subresource
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func NewUpdateSubresourceAction(resource schema.GroupVersionResource, subresource string, namespace string, object runtime.Object) UpdateActionImpl {
0000000000000000000000000000000000000000;;		action := UpdateActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "update"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Subresource = subresource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Object = object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootDeleteAction(resource schema.GroupVersionResource, name string) DeleteActionImpl {
0000000000000000000000000000000000000000;;		action := DeleteActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "delete"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDeleteAction(resource schema.GroupVersionResource, namespace, name string) DeleteActionImpl {
0000000000000000000000000000000000000000;;		action := DeleteActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "delete"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootDeleteCollectionAction(resource schema.GroupVersionResource, opts interface{}) DeleteCollectionActionImpl {
0000000000000000000000000000000000000000;;		action := DeleteCollectionActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "delete-collection"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, _ := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.ListRestrictions = ListRestrictions{labelSelector, fieldSelector}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDeleteCollectionAction(resource schema.GroupVersionResource, namespace string, opts interface{}) DeleteCollectionActionImpl {
0000000000000000000000000000000000000000;;		action := DeleteCollectionActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "delete-collection"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, _ := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.ListRestrictions = ListRestrictions{labelSelector, fieldSelector}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewRootWatchAction(resource schema.GroupVersionResource, opts interface{}) WatchActionImpl {
0000000000000000000000000000000000000000;;		action := WatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "watch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, resourceVersion := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.WatchRestrictions = WatchRestrictions{labelSelector, fieldSelector, resourceVersion}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExtractFromListOptions(opts interface{}) (labelSelector labels.Selector, fieldSelector fields.Selector, resourceVersion string) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		switch t := opts.(type) {
0000000000000000000000000000000000000000;;		case metav1.ListOptions:
0000000000000000000000000000000000000000;;			labelSelector, err = labels.Parse(t.LabelSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("invalid selector %q: %v", t.LabelSelector, err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fieldSelector, err = fields.ParseSelector(t.FieldSelector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				panic(fmt.Errorf("invalid selector %q: %v", t.FieldSelector, err))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resourceVersion = t.ResourceVersion
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic(fmt.Errorf("expect a ListOptions %T", opts))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if labelSelector == nil {
0000000000000000000000000000000000000000;;			labelSelector = labels.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fieldSelector == nil {
0000000000000000000000000000000000000000;;			fieldSelector = fields.Everything()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return labelSelector, fieldSelector, resourceVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewWatchAction(resource schema.GroupVersionResource, namespace string, opts interface{}) WatchActionImpl {
0000000000000000000000000000000000000000;;		action := WatchActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "watch"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		labelSelector, fieldSelector, resourceVersion := ExtractFromListOptions(opts)
0000000000000000000000000000000000000000;;		action.WatchRestrictions = WatchRestrictions{labelSelector, fieldSelector, resourceVersion}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProxyGetAction(resource schema.GroupVersionResource, namespace, scheme, name, port, path string, params map[string]string) ProxyGetActionImpl {
0000000000000000000000000000000000000000;;		action := ProxyGetActionImpl{}
0000000000000000000000000000000000000000;;		action.Verb = "get"
0000000000000000000000000000000000000000;;		action.Resource = resource
0000000000000000000000000000000000000000;;		action.Namespace = namespace
0000000000000000000000000000000000000000;;		action.Scheme = scheme
0000000000000000000000000000000000000000;;		action.Name = name
0000000000000000000000000000000000000000;;		action.Port = port
0000000000000000000000000000000000000000;;		action.Path = path
0000000000000000000000000000000000000000;;		action.Params = params
0000000000000000000000000000000000000000;;		return action
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListRestrictions struct {
0000000000000000000000000000000000000000;;		Labels labels.Selector
0000000000000000000000000000000000000000;;		Fields fields.Selector
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	type WatchRestrictions struct {
0000000000000000000000000000000000000000;;		Labels          labels.Selector
0000000000000000000000000000000000000000;;		Fields          fields.Selector
0000000000000000000000000000000000000000;;		ResourceVersion string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Action interface {
0000000000000000000000000000000000000000;;		GetNamespace() string
0000000000000000000000000000000000000000;;		GetVerb() string
0000000000000000000000000000000000000000;;		GetResource() schema.GroupVersionResource
0000000000000000000000000000000000000000;;		GetSubresource() string
0000000000000000000000000000000000000000;;		Matches(verb, resource string) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetValue() interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetListRestrictions() ListRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetObject() runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetObject() runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WatchAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetWatchRestrictions() WatchRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProxyGetAction interface {
0000000000000000000000000000000000000000;;		Action
0000000000000000000000000000000000000000;;		GetScheme() string
0000000000000000000000000000000000000000;;		GetName() string
0000000000000000000000000000000000000000;;		GetPort() string
0000000000000000000000000000000000000000;;		GetPath() string
0000000000000000000000000000000000000000;;		GetParams() map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActionImpl struct {
0000000000000000000000000000000000000000;;		Namespace   string
0000000000000000000000000000000000000000;;		Verb        string
0000000000000000000000000000000000000000;;		Resource    schema.GroupVersionResource
0000000000000000000000000000000000000000;;		Subresource string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ActionImpl) GetNamespace() string {
0000000000000000000000000000000000000000;;		return a.Namespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a ActionImpl) GetVerb() string {
0000000000000000000000000000000000000000;;		return a.Verb
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a ActionImpl) GetResource() schema.GroupVersionResource {
0000000000000000000000000000000000000000;;		return a.Resource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a ActionImpl) GetSubresource() string {
0000000000000000000000000000000000000000;;		return a.Subresource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (a ActionImpl) Matches(verb, resource string) bool {
0000000000000000000000000000000000000000;;		return strings.ToLower(verb) == strings.ToLower(a.Verb) &&
0000000000000000000000000000000000000000;;			strings.ToLower(resource) == strings.ToLower(a.Resource.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Value interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a GenericActionImpl) GetValue() interface{} {
0000000000000000000000000000000000000000;;		return a.Value
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a GetActionImpl) GetName() string {
0000000000000000000000000000000000000000;;		return a.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Kind             schema.GroupVersionKind
0000000000000000000000000000000000000000;;		ListRestrictions ListRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ListActionImpl) GetKind() schema.GroupVersionKind {
0000000000000000000000000000000000000000;;		return a.Kind
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ListActionImpl) GetListRestrictions() ListRestrictions {
0000000000000000000000000000000000000000;;		return a.ListRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CreateActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Object runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a CreateActionImpl) GetObject() runtime.Object {
0000000000000000000000000000000000000000;;		return a.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UpdateActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Object runtime.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a UpdateActionImpl) GetObject() runtime.Object {
0000000000000000000000000000000000000000;;		return a.Object
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PatchActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Name  string
0000000000000000000000000000000000000000;;		Patch []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a PatchActionImpl) GetName() string {
0000000000000000000000000000000000000000;;		return a.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a PatchActionImpl) GetPatch() []byte {
0000000000000000000000000000000000000000;;		return a.Patch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a DeleteActionImpl) GetName() string {
0000000000000000000000000000000000000000;;		return a.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DeleteCollectionActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		ListRestrictions ListRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a DeleteCollectionActionImpl) GetListRestrictions() ListRestrictions {
0000000000000000000000000000000000000000;;		return a.ListRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WatchActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		WatchRestrictions WatchRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a WatchActionImpl) GetWatchRestrictions() WatchRestrictions {
0000000000000000000000000000000000000000;;		return a.WatchRestrictions
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProxyGetActionImpl struct {
0000000000000000000000000000000000000000;;		ActionImpl
0000000000000000000000000000000000000000;;		Scheme string
0000000000000000000000000000000000000000;;		Name   string
0000000000000000000000000000000000000000;;		Port   string
0000000000000000000000000000000000000000;;		Path   string
0000000000000000000000000000000000000000;;		Params map[string]string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ProxyGetActionImpl) GetScheme() string {
0000000000000000000000000000000000000000;;		return a.Scheme
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ProxyGetActionImpl) GetName() string {
0000000000000000000000000000000000000000;;		return a.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ProxyGetActionImpl) GetPort() string {
0000000000000000000000000000000000000000;;		return a.Port
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ProxyGetActionImpl) GetPath() string {
0000000000000000000000000000000000000000;;		return a.Path
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ProxyGetActionImpl) GetParams() map[string]string {
0000000000000000000000000000000000000000;;		return a.Params
0000000000000000000000000000000000000000;;	}
