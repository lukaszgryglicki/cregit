0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/rest/url_utils_test.go[staging/src/k8s.io/client-go/1.4/rest/url_utils_test.go][staging/src/k8s.io/client-go/rest/url_utils_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidatesHostParameter(t *testing.T) {
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			Host    string
0000000000000000000000000000000000000000;;			APIPath string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			URL string
0000000000000000000000000000000000000000;;			Err bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"127.0.0.1", "", "http://127.0.0.1/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"127.0.0.1:8080", "", "http://127.0.0.1:8080/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"foo.bar.com", "", "http://foo.bar.com/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"http://host/prefix", "", "http://host/prefix/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"http://host", "", "http://host/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"http://host", "/", "http://host/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"http://host", "/other", "http://host/other/" + v1.SchemeGroupVersion.Version, false},
0000000000000000000000000000000000000000;;			{"host/server", "", "", true},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			u, versionedAPIPath, err := DefaultServerURL(testCase.Host, testCase.APIPath, v1.SchemeGroupVersion, false)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case err == nil && testCase.Err:
0000000000000000000000000000000000000000;;				t.Errorf("expected error but was nil")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil && !testCase.Err:
0000000000000000000000000000000000000000;;				t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			case err != nil:
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			u.Path = path.Join(u.Path, versionedAPIPath)
0000000000000000000000000000000000000000;;			if e, a := testCase.URL, u.String(); e != a {
0000000000000000000000000000000000000000;;				t.Errorf("%d: expected host %s, got %s", i, e, a)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
