0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/pkg/watch/versioned/encoder.go[staging/src/k8s.io/client-go/1.4/pkg/watch/versioned/encoder.go][staging/src/k8s.io/client-go/rest/watch/encoder.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package versioned
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/streaming"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encoder serializes watch.Events into io.Writer. The internal objects
0000000000000000000000000000000000000000;;	// are encoded using embedded encoder, and the outer Event is serialized
0000000000000000000000000000000000000000;;	// using encoder.
0000000000000000000000000000000000000000;;	// TODO: this type is only used by tests
0000000000000000000000000000000000000000;;	type Encoder struct {
0000000000000000000000000000000000000000;;		encoder         streaming.Encoder
0000000000000000000000000000000000000000;;		embeddedEncoder runtime.Encoder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewEncoder(encoder streaming.Encoder, embeddedEncoder runtime.Encoder) *Encoder {
0000000000000000000000000000000000000000;;		return &Encoder{
0000000000000000000000000000000000000000;;			encoder:         encoder,
0000000000000000000000000000000000000000;;			embeddedEncoder: embeddedEncoder,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encode writes an event to the writer. Returns an error
0000000000000000000000000000000000000000;;	// if the writer is closed or an object can't be encoded.
0000000000000000000000000000000000000000;;	func (e *Encoder) Encode(event *watch.Event) error {
0000000000000000000000000000000000000000;;		data, err := runtime.Encode(e.embeddedEncoder, event.Object)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// FIXME: get rid of json.RawMessage.
0000000000000000000000000000000000000000;;		return e.encoder.Encode(&metav1.WatchEvent{
0000000000000000000000000000000000000000;;			Type:   string(event.Type),
0000000000000000000000000000000000000000;;			Object: runtime.RawExtension{Raw: json.RawMessage(data)},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
