0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
111f80c5241197e7c49f2701f00cf8806ce6638d;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package versioned_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		apiequality "k8s.io/apimachinery/pkg/api/equality"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer"
0000000000000000000000000000000000000000;;		runtimejson "k8s.io/apimachinery/pkg/runtime/serializer/json"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/streaming"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;		restclientwatch "k8s.io/client-go/rest/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getDecoder mimics how k8s.io/client-go/rest.createSerializers creates a decoder
0000000000000000000000000000000000000000;;	func getDecoder() runtime.Decoder {
0000000000000000000000000000000000000000;;		jsonSerializer := runtimejson.NewSerializer(runtimejson.DefaultMetaFactory, scheme.Scheme, scheme.Scheme, false)
0000000000000000000000000000000000000000;;		directCodecFactory := serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}
0000000000000000000000000000000000000000;;		return directCodecFactory.DecoderToVersion(jsonSerializer, v1.SchemeGroupVersion)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecoder(t *testing.T) {
0000000000000000000000000000000000000000;;		table := []watch.EventType{watch.Added, watch.Deleted, watch.Modified, watch.Error}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, eventType := range table {
0000000000000000000000000000000000000000;;			out, in := io.Pipe()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			decoder := restclientwatch.NewDecoder(streaming.NewDecoder(out, getDecoder()), getDecoder())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			expect := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "foo"}}
0000000000000000000000000000000000000000;;			encoder := json.NewEncoder(in)
0000000000000000000000000000000000000000;;			go func() {
0000000000000000000000000000000000000000;;				data, err := runtime.Encode(scheme.Codecs.LegacyCodec(v1.SchemeGroupVersion), expect)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				event := metav1.WatchEvent{
0000000000000000000000000000000000000000;;					Type:   string(eventType),
0000000000000000000000000000000000000000;;					Object: runtime.RawExtension{Raw: json.RawMessage(data)},
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if err := encoder.Encode(&event); err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				in.Close()
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			done := make(chan struct{})
0000000000000000000000000000000000000000;;			go func() {
0000000000000000000000000000000000000000;;				action, got, err := decoder.Decode()
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Fatalf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := eventType, action; e != a {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := expect, got; !apiequality.Semantic.DeepDerivative(e, a) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				t.Logf("Exited read")
0000000000000000000000000000000000000000;;				close(done)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			<-done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			done = make(chan struct{})
0000000000000000000000000000000000000000;;			go func() {
0000000000000000000000000000000000000000;;				_, _, err := decoder.Decode()
0000000000000000000000000000000000000000;;				if err == nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected nil error")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				close(done)
0000000000000000000000000000000000000000;;			}()
0000000000000000000000000000000000000000;;			<-done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			decoder.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDecoder_SourceClose(t *testing.T) {
0000000000000000000000000000000000000000;;		out, in := io.Pipe()
0000000000000000000000000000000000000000;;		decoder := restclientwatch.NewDecoder(streaming.NewDecoder(out, getDecoder()), getDecoder())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		done := make(chan struct{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			_, _, err := decoder.Decode()
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected nil error")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			close(done)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		in.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case <-done:
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;			t.Error("Timeout")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
