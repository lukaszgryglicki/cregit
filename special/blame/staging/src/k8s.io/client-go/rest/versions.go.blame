0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/rest/versions.go[staging/src/k8s.io/client-go/1.4/rest/versions.go][staging/src/k8s.io/client-go/rest/versions.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		legacyAPIPath  = "/api"
0000000000000000000000000000000000000000;;		defaultAPIPath = "/apis"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: Is this obsoleted by the discovery client?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerAPIVersions returns the GroupVersions supported by the API server.
0000000000000000000000000000000000000000;;	// It creates a RESTClient based on the passed in config, but it doesn't rely
0000000000000000000000000000000000000000;;	// on the Version and Codec of the config, because it uses AbsPath and
0000000000000000000000000000000000000000;;	// takes the raw response.
0000000000000000000000000000000000000000;;	func ServerAPIVersions(c *Config) (groupVersions []string, err error) {
0000000000000000000000000000000000000000;;		transport, err := TransportFor(c)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client := http.Client{Transport: transport}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configCopy := *c
0000000000000000000000000000000000000000;;		configCopy.GroupVersion = nil
0000000000000000000000000000000000000000;;		configCopy.APIPath = ""
0000000000000000000000000000000000000000;;		baseURL, _, err := defaultServerUrlFor(&configCopy)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// Get the groupVersions exposed at /api
0000000000000000000000000000000000000000;;		originalPath := baseURL.Path
0000000000000000000000000000000000000000;;		baseURL.Path = path.Join(originalPath, legacyAPIPath)
0000000000000000000000000000000000000000;;		resp, err := client.Get(baseURL.String())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var v metav1.APIVersions
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp.Body).Decode(&v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		groupVersions = append(groupVersions, v.Versions...)
0000000000000000000000000000000000000000;;		// Get the groupVersions exposed at /apis
0000000000000000000000000000000000000000;;		baseURL.Path = path.Join(originalPath, defaultAPIPath)
0000000000000000000000000000000000000000;;		resp2, err := client.Get(baseURL.String())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var apiGroupList metav1.APIGroupList
0000000000000000000000000000000000000000;;		defer resp2.Body.Close()
0000000000000000000000000000000000000000;;		err = json.NewDecoder(resp2.Body).Decode(&apiGroupList)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, g := range apiGroupList.Groups {
0000000000000000000000000000000000000000;;			for _, gv := range g.Versions {
0000000000000000000000000000000000000000;;				groupVersions = append(groupVersions, gv.GroupVersion)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return groupVersions, nil
0000000000000000000000000000000000000000;;	}
