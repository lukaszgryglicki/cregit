0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/rest/urlbackoff.go[staging/src/k8s.io/client-go/1.4/rest/urlbackoff.go][staging/src/k8s.io/client-go/rest/urlbackoff.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set of resp. Codes that we backoff for.
0000000000000000000000000000000000000000;;	// In general these should be errors that indicate a server is overloaded.
0000000000000000000000000000000000000000;;	// These shouldn't be configured by any user, we set them based on conventions
0000000000000000000000000000000000000000;;	// described in
0000000000000000000000000000000000000000;;	var serverIsOverloadedSet = sets.NewInt(429)
0000000000000000000000000000000000000000;;	var maxResponseCode = 499
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BackoffManager interface {
0000000000000000000000000000000000000000;;		UpdateBackoff(actualUrl *url.URL, err error, responseCode int)
0000000000000000000000000000000000000000;;		CalculateBackoff(actualUrl *url.URL) time.Duration
0000000000000000000000000000000000000000;;		Sleep(d time.Duration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// URLBackoff struct implements the semantics on top of Backoff which
0000000000000000000000000000000000000000;;	// we need for URL specific exponential backoff.
0000000000000000000000000000000000000000;;	type URLBackoff struct {
0000000000000000000000000000000000000000;;		// Uses backoff as underlying implementation.
0000000000000000000000000000000000000000;;		Backoff *flowcontrol.Backoff
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NoBackoff is a stub implementation, can be used for mocking or else as a default.
0000000000000000000000000000000000000000;;	type NoBackoff struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoBackoff) UpdateBackoff(actualUrl *url.URL, err error, responseCode int) {
0000000000000000000000000000000000000000;;		// do nothing.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoBackoff) CalculateBackoff(actualUrl *url.URL) time.Duration {
0000000000000000000000000000000000000000;;		return 0 * time.Second
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *NoBackoff) Sleep(d time.Duration) {
0000000000000000000000000000000000000000;;		time.Sleep(d)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Disable makes the backoff trivial, i.e., sets it to zero.  This might be used
0000000000000000000000000000000000000000;;	// by tests which want to run 1000s of mock requests without slowing down.
0000000000000000000000000000000000000000;;	func (b *URLBackoff) Disable() {
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Disabling backoff strategy")
0000000000000000000000000000000000000000;;		b.Backoff = flowcontrol.NewBackOff(0*time.Second, 0*time.Second)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// baseUrlKey returns the key which urls will be mapped to.
0000000000000000000000000000000000000000;;	// For example, 127.0.0.1:8080/api/v2/abcde -> 127.0.0.1:8080.
0000000000000000000000000000000000000000;;	func (b *URLBackoff) baseUrlKey(rawurl *url.URL) string {
0000000000000000000000000000000000000000;;		// Simple implementation for now, just the host.
0000000000000000000000000000000000000000;;		// We may backoff specific paths (i.e. "pods") differentially
0000000000000000000000000000000000000000;;		// in the future.
0000000000000000000000000000000000000000;;		host, err := url.Parse(rawurl.String())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Error extracting url: %v", rawurl)
0000000000000000000000000000000000000000;;			panic("bad url!")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return host.Host
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateBackoff updates backoff metadata
0000000000000000000000000000000000000000;;	func (b *URLBackoff) UpdateBackoff(actualUrl *url.URL, err error, responseCode int) {
0000000000000000000000000000000000000000;;		// range for retry counts that we store is [0,13]
0000000000000000000000000000000000000000;;		if responseCode > maxResponseCode || serverIsOverloadedSet.Has(responseCode) {
0000000000000000000000000000000000000000;;			b.Backoff.Next(b.baseUrlKey(actualUrl), b.Backoff.Clock.Now())
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		} else if responseCode >= 300 || err != nil {
0000000000000000000000000000000000000000;;			glog.V(4).Infof("Client is returning errors: code %v, error %v", responseCode, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		//If we got this far, there is no backoff required for this URL anymore.
0000000000000000000000000000000000000000;;		b.Backoff.Reset(b.baseUrlKey(actualUrl))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CalculateBackoff takes a url and back's off exponentially,
0000000000000000000000000000000000000000;;	// based on its knowledge of existing failures.
0000000000000000000000000000000000000000;;	func (b *URLBackoff) CalculateBackoff(actualUrl *url.URL) time.Duration {
0000000000000000000000000000000000000000;;		return b.Backoff.Get(b.baseUrlKey(actualUrl))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *URLBackoff) Sleep(d time.Duration) {
0000000000000000000000000000000000000000;;		b.Backoff.Clock.Sleep(d)
0000000000000000000000000000000000000000;;	}
