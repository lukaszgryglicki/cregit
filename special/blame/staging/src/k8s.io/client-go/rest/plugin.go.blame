0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/rest/plugin.go[staging/src/k8s.io/client-go/1.4/rest/plugin.go][staging/src/k8s.io/client-go/rest/plugin.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthProvider interface {
0000000000000000000000000000000000000000;;		// WrapTransport allows the plugin to create a modified RoundTripper that
0000000000000000000000000000000000000000;;		// attaches authorization headers (or other info) to requests.
0000000000000000000000000000000000000000;;		WrapTransport(http.RoundTripper) http.RoundTripper
0000000000000000000000000000000000000000;;		// Login allows the plugin to initialize its configuration. It must not
0000000000000000000000000000000000000000;;		// require direct user interaction.
0000000000000000000000000000000000000000;;		Login() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Factory generates an AuthProvider plugin.
0000000000000000000000000000000000000000;;	//  clusterAddress is the address of the current cluster.
0000000000000000000000000000000000000000;;	//  config is the initial configuration for this plugin.
0000000000000000000000000000000000000000;;	//  persister allows the plugin to save updated configuration.
0000000000000000000000000000000000000000;;	type Factory func(clusterAddress string, config map[string]string, persister AuthProviderConfigPersister) (AuthProvider, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthProviderConfigPersister allows a plugin to persist configuration info
0000000000000000000000000000000000000000;;	// for just itself.
0000000000000000000000000000000000000000;;	type AuthProviderConfigPersister interface {
0000000000000000000000000000000000000000;;		Persist(map[string]string) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// All registered auth provider plugins.
0000000000000000000000000000000000000000;;	var pluginsLock sync.Mutex
0000000000000000000000000000000000000000;;	var plugins = make(map[string]Factory)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterAuthProviderPlugin(name string, plugin Factory) error {
0000000000000000000000000000000000000000;;		pluginsLock.Lock()
0000000000000000000000000000000000000000;;		defer pluginsLock.Unlock()
0000000000000000000000000000000000000000;;		if _, found := plugins[name]; found {
0000000000000000000000000000000000000000;;			return fmt.Errorf("Auth Provider Plugin %q was registered twice", name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		glog.V(4).Infof("Registered Auth Provider Plugin %q", name)
0000000000000000000000000000000000000000;;		plugins[name] = plugin
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAuthProvider(clusterAddress string, apc *clientcmdapi.AuthProviderConfig, persister AuthProviderConfigPersister) (AuthProvider, error) {
0000000000000000000000000000000000000000;;		pluginsLock.Lock()
0000000000000000000000000000000000000000;;		defer pluginsLock.Unlock()
0000000000000000000000000000000000000000;;		p, ok := plugins[apc.Name]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("No Auth Provider found for name %q", apc.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p(clusterAddress, apc.Config, persister)
0000000000000000000000000000000000000000;;	}
