0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/rest/url_utils.go[staging/src/k8s.io/client-go/1.4/rest/url_utils.go][staging/src/k8s.io/client-go/rest/url_utils.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package rest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultServerURL converts a host, host:port, or URL string to the default base server API path
0000000000000000000000000000000000000000;;	// to use with a Client at a given API version following the standard conventions for a
0000000000000000000000000000000000000000;;	// Kubernetes API.
0000000000000000000000000000000000000000;;	func DefaultServerURL(host, apiPath string, groupVersion schema.GroupVersion, defaultTLS bool) (*url.URL, string, error) {
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			return nil, "", fmt.Errorf("host must be a URL or a host:port pair")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		base := host
0000000000000000000000000000000000000000;;		hostURL, err := url.Parse(base)
0000000000000000000000000000000000000000;;		if err != nil || hostURL.Scheme == "" || hostURL.Host == "" {
0000000000000000000000000000000000000000;;			scheme := "http://"
0000000000000000000000000000000000000000;;			if defaultTLS {
0000000000000000000000000000000000000000;;				scheme = "https://"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			hostURL, err = url.Parse(scheme + base)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if hostURL.Path != "" && hostURL.Path != "/" {
0000000000000000000000000000000000000000;;				return nil, "", fmt.Errorf("host must be a URL or a host:port pair: %q", base)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// hostURL.Path is optional; a non-empty Path is treated as a prefix that is to be applied to
0000000000000000000000000000000000000000;;		// all URIs used to access the host. this is useful when there's a proxy in front of the
0000000000000000000000000000000000000000;;		// apiserver that has relocated the apiserver endpoints, forwarding all requests from, for
0000000000000000000000000000000000000000;;		// example, /a/b/c to the apiserver. in this case the Path should be /a/b/c.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// if running without a frontend proxy (that changes the location of the apiserver), then
0000000000000000000000000000000000000000;;		// hostURL.Path should be blank.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// versionedAPIPath, a path relative to baseURL.Path, points to a versioned API base
0000000000000000000000000000000000000000;;		versionedAPIPath := path.Join("/", apiPath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add the version to the end of the path
0000000000000000000000000000000000000000;;		if len(groupVersion.Group) > 0 {
0000000000000000000000000000000000000000;;			versionedAPIPath = path.Join(versionedAPIPath, groupVersion.Group, groupVersion.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			versionedAPIPath = path.Join(versionedAPIPath, groupVersion.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return hostURL, versionedAPIPath, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultServerUrlFor is shared between IsConfigTransportTLS and RESTClientFor. It
0000000000000000000000000000000000000000;;	// requires Host and Version to be set prior to being called.
0000000000000000000000000000000000000000;;	func defaultServerUrlFor(config *Config) (*url.URL, string, error) {
0000000000000000000000000000000000000000;;		// TODO: move the default to secure when the apiserver supports TLS by default
0000000000000000000000000000000000000000;;		// config.Insecure is taken to mean "I want HTTPS but don't bother checking the certs against a CA."
0000000000000000000000000000000000000000;;		hasCA := len(config.CAFile) != 0 || len(config.CAData) != 0
0000000000000000000000000000000000000000;;		hasCert := len(config.CertFile) != 0 || len(config.CertData) != 0
0000000000000000000000000000000000000000;;		defaultTLS := hasCA || hasCert || config.Insecure
0000000000000000000000000000000000000000;;		host := config.Host
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			host = "localhost"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.GroupVersion != nil {
0000000000000000000000000000000000000000;;			return DefaultServerURL(host, config.APIPath, *config.GroupVersion, defaultTLS)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return DefaultServerURL(host, config.APIPath, schema.GroupVersion{}, defaultTLS)
0000000000000000000000000000000000000000;;	}
