0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
c64579dfcb0a7da9607fc83cb5808ce2d6ab607c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is made a separate package and should only be imported by tests, because
0000000000000000000000000000000000000000;;	// it imports testapi
0000000000000000000000000000000000000000;;	package fake
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/apimachinery/registered"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/types"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/flowcontrol"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateHTTPClient(roundTripper func(*http.Request) (*http.Response, error)) *http.Client {
0000000000000000000000000000000000000000;;		return &http.Client{
0000000000000000000000000000000000000000;;			Transport: roundTripperFunc(roundTripper),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type roundTripperFunc func(*http.Request) (*http.Response, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return f(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RESTClient provides a fake RESTClient interface.
0000000000000000000000000000000000000000;;	type RESTClient struct {
0000000000000000000000000000000000000000;;		Client               *http.Client
0000000000000000000000000000000000000000;;		NegotiatedSerializer runtime.NegotiatedSerializer
0000000000000000000000000000000000000000;;		GroupName            string
0000000000000000000000000000000000000000;;		APIRegistry          *registered.APIRegistrationManager
0000000000000000000000000000000000000000;;		VersionedAPIPath     string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Req  *http.Request
0000000000000000000000000000000000000000;;		Resp *http.Response
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Get() *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request("GET")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Put() *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request("PUT")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Patch(pt types.PatchType) *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request("PATCH").SetHeader("Content-Type", string(pt))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Post() *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request("POST")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Delete() *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request("DELETE")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Verb(verb string) *restclient.Request {
0000000000000000000000000000000000000000;;		return c.request(verb)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) APIVersion() schema.GroupVersion {
0000000000000000000000000000000000000000;;		return c.APIRegistry.GroupOrDie("").GroupVersion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) GetRateLimiter() flowcontrol.RateLimiter {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) request(verb string) *restclient.Request {
0000000000000000000000000000000000000000;;		config := restclient.ContentConfig{
0000000000000000000000000000000000000000;;			ContentType: runtime.ContentTypeJSON,
0000000000000000000000000000000000000000;;			// TODO this was hardcoded before, but it doesn't look right
0000000000000000000000000000000000000000;;			GroupVersion:         &c.APIRegistry.GroupOrDie("").GroupVersion,
0000000000000000000000000000000000000000;;			NegotiatedSerializer: c.NegotiatedSerializer,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns := c.NegotiatedSerializer
0000000000000000000000000000000000000000;;		info, _ := runtime.SerializerInfoForMediaType(ns.SupportedMediaTypes(), runtime.ContentTypeJSON)
0000000000000000000000000000000000000000;;		internalVersion := schema.GroupVersion{
0000000000000000000000000000000000000000;;			Group:   c.APIRegistry.GroupOrDie(c.GroupName).GroupVersion.Group,
0000000000000000000000000000000000000000;;			Version: runtime.APIVersionInternal,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		internalVersion.Version = runtime.APIVersionInternal
0000000000000000000000000000000000000000;;		serializers := restclient.Serializers{
0000000000000000000000000000000000000000;;			// TODO this was hardcoded before, but it doesn't look right
0000000000000000000000000000000000000000;;			Encoder: ns.EncoderForVersion(info.Serializer, c.APIRegistry.GroupOrDie("").GroupVersion),
0000000000000000000000000000000000000000;;			Decoder: ns.DecoderToVersion(info.Serializer, internalVersion),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if info.StreamSerializer != nil {
0000000000000000000000000000000000000000;;			serializers.StreamingSerializer = info.StreamSerializer.Serializer
0000000000000000000000000000000000000000;;			serializers.Framer = info.StreamSerializer.Framer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return restclient.NewRequest(c, verb, &url.URL{Host: "localhost"}, c.VersionedAPIPath, config, serializers, nil, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RESTClient) Do(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if c.Err != nil {
0000000000000000000000000000000000000000;;			return nil, c.Err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c.Req = req
0000000000000000000000000000000000000000;;		if c.Client != nil {
0000000000000000000000000000000000000000;;			return c.Client.Do(req)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.Resp, nil
0000000000000000000000000000000000000000;;	}
