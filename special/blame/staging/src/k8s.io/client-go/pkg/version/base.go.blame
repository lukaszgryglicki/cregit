0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/pkg/version/base.go[staging/src/k8s.io/client-go/1.4/pkg/version/base.go][staging/src/k8s.io/client-go/pkg/version/base.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Base version information.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is the fallback data used when version information from git is not
0000000000000000000000000000000000000000;;	// provided via go ldflags. It provides an approximation of the Kubernetes
0000000000000000000000000000000000000000;;	// version for ad-hoc builds (e.g. `go build`) that cannot get the version
0000000000000000000000000000000000000000;;	// information from git.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If you are looking at these fields in the git tree, they look
0000000000000000000000000000000000000000;;	// strange. They are modified on the fly by the build process. The
0000000000000000000000000000000000000000;;	// in-tree values are dummy values used for "git archive", which also
0000000000000000000000000000000000000000;;	// works for GitHub tar downloads.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// When releasing a new Kubernetes version, this file is updated by
0000000000000000000000000000000000000000;;	// build/mark_new_version.sh to reflect the new version, and then a
0000000000000000000000000000000000000000;;	// git annotated tag (using format vX.Y where X == Major version and Y
0000000000000000000000000000000000000000;;	// == Minor version) is created to point to the commit that updates
0000000000000000000000000000000000000000;;	// pkg/version/base.go
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// TODO: Deprecate gitMajor and gitMinor, use only gitVersion
0000000000000000000000000000000000000000;;		// instead. First step in deprecation, keep the fields but make
0000000000000000000000000000000000000000;;		// them irrelevant. (Next we'll take it out, which may muck with
0000000000000000000000000000000000000000;;		// scripts consuming the kubectl version output - but most of
0000000000000000000000000000000000000000;;		// these should be looking at gitVersion already anyways.)
0000000000000000000000000000000000000000;;		gitMajor string = "" // major version, always numeric
0000000000000000000000000000000000000000;;		gitMinor string = "" // minor version, numeric possibly followed by "+"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// semantic version, derived by build scripts (see
0000000000000000000000000000000000000000;;		// https://github.com/kubernetes/kubernetes/blob/master/docs/design/versioning.md
0000000000000000000000000000000000000000;;		// for a detailed discussion of this field)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// TODO: This field is still called "gitVersion" for legacy
0000000000000000000000000000000000000000;;		// reasons. For prerelease versions, the build metadata on the
0000000000000000000000000000000000000000;;		// semantic version is a git hash, but the version itself is no
0000000000000000000000000000000000000000;;		// longer the direct output of "git describe", but a slight
0000000000000000000000000000000000000000;;		// translation to be semver compliant.
0000000000000000000000000000000000000000;;		gitVersion   string = "v0.0.0-master+$Format:%h$"
0000000000000000000000000000000000000000;;		gitCommit    string = "$Format:%H$"    // sha1 from git, output of $(git rev-parse HEAD)
0000000000000000000000000000000000000000;;		gitTreeState string = "not a git tree" // state of git tree, either "clean" or "dirty"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buildDate string = "1970-01-01T00:00:00Z" // build date in ISO8601 format, output of $(date -u +'%Y-%m-%dT%H:%M:%SZ')
0000000000000000000000000000000000000000;;	)
