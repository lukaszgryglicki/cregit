0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
351764b6cae066588e87a3efee44135d8f7e8120;pkg/client/remotecommand/remotecommand.go[pkg/client/remotecommand/remotecommand.go][staging/src/k8s.io/client-go/tools/remotecommand/remotecommand.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remotecommand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/glog"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/httpstream"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/remotecommand"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/transport"
0000000000000000000000000000000000000000;;		spdy "k8s.io/client-go/transport/spdy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamOptions holds information pertaining to the current streaming session: supported stream
0000000000000000000000000000000000000000;;	// protocols, input/output streams, if the client is requesting a TTY, and a terminal size queue to
0000000000000000000000000000000000000000;;	// support terminal resizing.
0000000000000000000000000000000000000000;;	type StreamOptions struct {
0000000000000000000000000000000000000000;;		Stdin             io.Reader
0000000000000000000000000000000000000000;;		Stdout            io.Writer
0000000000000000000000000000000000000000;;		Stderr            io.Writer
0000000000000000000000000000000000000000;;		Tty               bool
0000000000000000000000000000000000000000;;		TerminalSizeQueue TerminalSizeQueue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Executor is an interface for transporting shell-style streams.
0000000000000000000000000000000000000000;;	type Executor interface {
0000000000000000000000000000000000000000;;		// Stream initiates the transport of the standard shell streams. It will transport any
0000000000000000000000000000000000000000;;		// non-nil stream to a remote system, and return an error if a problem occurs. If tty
0000000000000000000000000000000000000000;;		// is set, the stderr stream is not used (raw TTY manages stdout and stderr over the
0000000000000000000000000000000000000000;;		// stdout stream).
0000000000000000000000000000000000000000;;		Stream(options StreamOptions) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type streamCreator interface {
0000000000000000000000000000000000000000;;		CreateStream(headers http.Header) (httpstream.Stream, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type streamProtocolHandler interface {
0000000000000000000000000000000000000000;;		stream(conn streamCreator) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// streamExecutor handles transporting standard shell streams over an httpstream connection.
0000000000000000000000000000000000000000;;	type streamExecutor struct {
0000000000000000000000000000000000000000;;		upgrader  spdy.Upgrader
0000000000000000000000000000000000000000;;		transport http.RoundTripper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		method    string
0000000000000000000000000000000000000000;;		url       *url.URL
0000000000000000000000000000000000000000;;		protocols []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSPDYExecutor connects to the provided server and upgrades the connection to
0000000000000000000000000000000000000000;;	// multiplexed bidirectional streams.
0000000000000000000000000000000000000000;;	func NewSPDYExecutor(config *restclient.Config, method string, url *url.URL) (Executor, error) {
0000000000000000000000000000000000000000;;		return NewSPDYExecutorForProtocols(
0000000000000000000000000000000000000000;;			config, method, url,
0000000000000000000000000000000000000000;;			remotecommand.StreamProtocolV4Name,
0000000000000000000000000000000000000000;;			remotecommand.StreamProtocolV3Name,
0000000000000000000000000000000000000000;;			remotecommand.StreamProtocolV2Name,
0000000000000000000000000000000000000000;;			remotecommand.StreamProtocolV1Name,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSPDYExecutorForProtocols connects to the provided server and upgrades the connection to
0000000000000000000000000000000000000000;;	// multiplexed bidirectional streams using only the provided protocols. Exposed for testing, most
0000000000000000000000000000000000000000;;	// callers should use NewSPDYExecutor.
0000000000000000000000000000000000000000;;	func NewSPDYExecutorForProtocols(config *restclient.Config, method string, url *url.URL, protocols ...string) (Executor, error) {
0000000000000000000000000000000000000000;;		wrapper, upgradeRoundTripper, err := spdy.RoundTripperFor(config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		wrapper = transport.DebugWrappers(wrapper)
0000000000000000000000000000000000000000;;		return &streamExecutor{
0000000000000000000000000000000000000000;;			upgrader:  upgradeRoundTripper,
0000000000000000000000000000000000000000;;			transport: wrapper,
0000000000000000000000000000000000000000;;			method:    method,
0000000000000000000000000000000000000000;;			url:       url,
0000000000000000000000000000000000000000;;			protocols: protocols,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Stream opens a protocol streamer to the server and streams until a client closes
0000000000000000000000000000000000000000;;	// the connection or the server disconnects.
0000000000000000000000000000000000000000;;	func (e *streamExecutor) Stream(options StreamOptions) error {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(e.method, e.url.String(), nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error creating request: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		conn, protocol, err := spdy.Negotiate(
0000000000000000000000000000000000000000;;			e.upgrader,
0000000000000000000000000000000000000000;;			&http.Client{Transport: e.transport},
0000000000000000000000000000000000000000;;			req,
0000000000000000000000000000000000000000;;			e.protocols...,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer conn.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var streamer streamProtocolHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch protocol {
0000000000000000000000000000000000000000;;		case remotecommand.StreamProtocolV4Name:
0000000000000000000000000000000000000000;;			streamer = newStreamProtocolV4(options)
0000000000000000000000000000000000000000;;		case remotecommand.StreamProtocolV3Name:
0000000000000000000000000000000000000000;;			streamer = newStreamProtocolV3(options)
0000000000000000000000000000000000000000;;		case remotecommand.StreamProtocolV2Name:
0000000000000000000000000000000000000000;;			streamer = newStreamProtocolV2(options)
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;			glog.V(4).Infof("The server did not negotiate a streaming protocol version. Falling back to %s", remotecommand.StreamProtocolV1Name)
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case remotecommand.StreamProtocolV1Name:
0000000000000000000000000000000000000000;;			streamer = newStreamProtocolV1(options)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return streamer.stream(conn)
0000000000000000000000000000000000000000;;	}
