0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
2df164f249917e4ec9430d6dca3403c363780683;pkg/client/unversioned/remotecommand/v4_test.go[pkg/client/unversioned/remotecommand/v4_test.go][staging/src/k8s.io/client-go/tools/remotecommand/v4_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package remotecommand
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestV4ErrorDecoder(t *testing.T) {
0000000000000000000000000000000000000000;;		dec := errorDecoderV4{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		type Test struct {
0000000000000000000000000000000000000000;;			message string
0000000000000000000000000000000000000000;;			err     string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, test := range []Test{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: "{}",
0000000000000000000000000000000000000000;;				err:     "error stream protocol error: unknown error",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: "{",
0000000000000000000000000000000000000000;;				err:     "error stream protocol error: unexpected end of JSON input in \"{\"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: `{"status": "Success" }`,
0000000000000000000000000000000000000000;;				err:     "",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: `{"status": "Failure", "message": "foobar" }`,
0000000000000000000000000000000000000000;;				err:     "foobar",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: `{"status": "Failure", "message": "foobar", "reason": "NonZeroExitCode", "details": {"causes": [{"reason": "foo"}] } }`,
0000000000000000000000000000000000000000;;				err:     "error stream protocol error: no ExitCode cause given",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: `{"status": "Failure", "message": "foobar", "reason": "NonZeroExitCode", "details": {"causes": [{"reason": "ExitCode"}] } }`,
0000000000000000000000000000000000000000;;				err:     "error stream protocol error: invalid exit code value \"\"",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				message: `{"status": "Failure", "message": "foobar", "reason": "NonZeroExitCode", "details": {"causes": [{"reason": "ExitCode", "message": "42"}] } }`,
0000000000000000000000000000000000000000;;				err:     "command terminated with exit code 42",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			err := dec.decode([]byte(test.message))
0000000000000000000000000000000000000000;;			want := test.err
0000000000000000000000000000000000000000;;			if want == "" {
0000000000000000000000000000000000000000;;				want = "<nil>"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if got := fmt.Sprintf("%v", err); got != want {
0000000000000000000000000000000000000000;;				t.Errorf("wrong error for message %q: want=%q, got=%q", test.message, want, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
