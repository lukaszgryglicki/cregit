0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
193808a9ac9fa76390758f68b895d8de131a7454;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package portforward
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/httpstream"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeDialer struct {
0000000000000000000000000000000000000000;;		dialed             bool
0000000000000000000000000000000000000000;;		conn               httpstream.Connection
0000000000000000000000000000000000000000;;		err                error
0000000000000000000000000000000000000000;;		negotiatedProtocol string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *fakeDialer) Dial(protocols ...string) (httpstream.Connection, string, error) {
0000000000000000000000000000000000000000;;		d.dialed = true
0000000000000000000000000000000000000000;;		return d.conn, d.negotiatedProtocol, d.err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestParsePortsAndNew(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			input            []string
0000000000000000000000000000000000000000;;			expected         []ForwardedPort
0000000000000000000000000000000000000000;;			expectParseError bool
0000000000000000000000000000000000000000;;			expectNewError   bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{input: []string{}, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"a"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{":a"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"-1"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"65536"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"0"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"0:0"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"a:5000"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{input: []string{"5000:a"}, expectParseError: true, expectNewError: true},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				input: []string{"5000", "5000:5000", "8888:5000", "5000:8888", ":5000", "0:5000"},
0000000000000000000000000000000000000000;;				expected: []ForwardedPort{
0000000000000000000000000000000000000000;;					{5000, 5000},
0000000000000000000000000000000000000000;;					{5000, 5000},
0000000000000000000000000000000000000000;;					{8888, 5000},
0000000000000000000000000000000000000000;;					{5000, 8888},
0000000000000000000000000000000000000000;;					{0, 5000},
0000000000000000000000000000000000000000;;					{0, 5000},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			parsed, err := parsePorts(test.input)
0000000000000000000000000000000000000000;;			haveError := err != nil
0000000000000000000000000000000000000000;;			if e, a := test.expectParseError, haveError; e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: parsePorts: error expected=%t, got %t: %s", i, e, a, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			dialer := &fakeDialer{}
0000000000000000000000000000000000000000;;			expectedStopChan := make(chan struct{})
0000000000000000000000000000000000000000;;			readyChan := make(chan struct{})
0000000000000000000000000000000000000000;;			pf, err := New(dialer, test.input, expectedStopChan, readyChan, os.Stdout, os.Stderr)
0000000000000000000000000000000000000000;;			haveError = err != nil
0000000000000000000000000000000000000000;;			if e, a := test.expectNewError, haveError; e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: New: error expected=%t, got %t: %s", i, e, a, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if test.expectParseError || test.expectNewError {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for pi, expectedPort := range test.expected {
0000000000000000000000000000000000000000;;				if e, a := expectedPort.Local, parsed[pi].Local; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("%d: local expected: %d, got: %d", i, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if e, a := expectedPort.Remote, parsed[pi].Remote; e != a {
0000000000000000000000000000000000000000;;					t.Fatalf("%d: remote expected: %d, got: %d", i, e, a)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if dialer.dialed {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: expected not dialed", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := test.expected, pf.ports; !reflect.DeepEqual(e, a) {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: ports: expected %#v, got %#v", i, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if e, a := expectedStopChan, pf.stopChan; e != a {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: stopChan: expected %#v, got %#v", i, e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if pf.Ready == nil {
0000000000000000000000000000000000000000;;				t.Fatalf("%d: Ready should be non-nil", i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GetListenerTestCase struct {
0000000000000000000000000000000000000000;;		Hostname                string
0000000000000000000000000000000000000000;;		Protocol                string
0000000000000000000000000000000000000000;;		ShouldRaiseError        bool
0000000000000000000000000000000000000000;;		ExpectedListenerAddress string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetListener(t *testing.T) {
0000000000000000000000000000000000000000;;		var pf PortForwarder
0000000000000000000000000000000000000000;;		testCases := []GetListenerTestCase{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hostname:                "localhost",
0000000000000000000000000000000000000000;;				Protocol:                "tcp4",
0000000000000000000000000000000000000000;;				ShouldRaiseError:        false,
0000000000000000000000000000000000000000;;				ExpectedListenerAddress: "127.0.0.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hostname:                "127.0.0.1",
0000000000000000000000000000000000000000;;				Protocol:                "tcp4",
0000000000000000000000000000000000000000;;				ShouldRaiseError:        false,
0000000000000000000000000000000000000000;;				ExpectedListenerAddress: "127.0.0.1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hostname:                "::1",
0000000000000000000000000000000000000000;;				Protocol:                "tcp6",
0000000000000000000000000000000000000000;;				ShouldRaiseError:        false,
0000000000000000000000000000000000000000;;				ExpectedListenerAddress: "::1",
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hostname:         "::1",
0000000000000000000000000000000000000000;;				Protocol:         "tcp4",
0000000000000000000000000000000000000000;;				ShouldRaiseError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				Hostname:         "127.0.0.1",
0000000000000000000000000000000000000000;;				Protocol:         "tcp6",
0000000000000000000000000000000000000000;;				ShouldRaiseError: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, testCase := range testCases {
0000000000000000000000000000000000000000;;			expectedListenerPort := "12345"
0000000000000000000000000000000000000000;;			listener, err := pf.getListener(testCase.Protocol, testCase.Hostname, &ForwardedPort{12345, 12345})
0000000000000000000000000000000000000000;;			if err != nil && strings.Contains(err.Error(), "cannot assign requested address") {
0000000000000000000000000000000000000000;;				t.Logf("Can't test #%d: %v", i, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			errorRaised := err != nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if testCase.ShouldRaiseError != errorRaised {
0000000000000000000000000000000000000000;;				t.Errorf("Test case #%d failed: Data %v an error has been raised(%t) where it should not (or reciprocally): %v", i, testCase, testCase.ShouldRaiseError, err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if errorRaised {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if listener == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Test case #%d did not raise an error but failed in initializing listener", i)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			host, port, _ := net.SplitHostPort(listener.Addr().String())
0000000000000000000000000000000000000000;;			t.Logf("Asked a %s forward for: %s:%v, got listener %s:%s, expected: %s", testCase.Protocol, testCase.Hostname, 12345, host, port, expectedListenerPort)
0000000000000000000000000000000000000000;;			if host != testCase.ExpectedListenerAddress {
0000000000000000000000000000000000000000;;				t.Errorf("Test case #%d failed: Listener does not listen on expected address: asked '%v' got '%v'", i, testCase.ExpectedListenerAddress, host)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if port != expectedListenerPort {
0000000000000000000000000000000000000000;;				t.Errorf("Test case #%d failed: Listener does not listen on exepected port: asked %v got %v", i, expectedListenerPort, port)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			listener.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
