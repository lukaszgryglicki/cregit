0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/helpers_test.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/helpers_test.go][staging/src/k8s.io/client-go/tools/clientcmd/api/helpers_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newMergedConfig(certFile, certContent, keyFile, keyContent, caFile, caContent string, t *testing.T) Config {
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(certFile, []byte(certContent), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(keyFile, []byte(keyContent), 0600); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(caFile, []byte(caContent), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*AuthInfo{
0000000000000000000000000000000000000000;;				"red-user":  {Token: "red-token", ClientCertificateData: []byte(certContent), ClientKeyData: []byte(keyContent)},
0000000000000000000000000000000000000000;;				"blue-user": {Token: "blue-token", ClientCertificate: certFile, ClientKey: keyFile}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*Cluster{
0000000000000000000000000000000000000000;;				"cow-cluster":     {Server: "http://cow.org:8080", CertificateAuthorityData: []byte(caContent)},
0000000000000000000000000000000000000000;;				"chicken-cluster": {Server: "http://chicken.org:8080", CertificateAuthority: caFile}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*Context{
0000000000000000000000000000000000000000;;				"federal-context": {AuthInfo: "red-user", Cluster: "cow-cluster"},
0000000000000000000000000000000000000000;;				"shaker-context":  {AuthInfo: "blue-user", Cluster: "chicken-cluster"}},
0000000000000000000000000000000000000000;;			CurrentContext: "federal-context",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMinifySuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mutatingConfig := newMergedConfig(certFile.Name(), "cert", keyFile.Name(), "key", caFile.Name(), "ca", t)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := MinifyConfig(&mutatingConfig); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Contexts) > 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected contexts: %v", mutatingConfig.Contexts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, exists := mutatingConfig.Contexts["federal-context"]; !exists {
0000000000000000000000000000000000000000;;			t.Errorf("missing context")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Clusters) > 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected clusters: %v", mutatingConfig.Clusters)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, exists := mutatingConfig.Clusters["cow-cluster"]; !exists {
0000000000000000000000000000000000000000;;			t.Errorf("missing cluster")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.AuthInfos) > 1 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected users: %v", mutatingConfig.AuthInfos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, exists := mutatingConfig.AuthInfos["red-user"]; !exists {
0000000000000000000000000000000000000000;;			t.Errorf("missing user")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMinifyMissingContext(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mutatingConfig := newMergedConfig(certFile.Name(), "cert", keyFile.Name(), "key", caFile.Name(), "ca", t)
0000000000000000000000000000000000000000;;		mutatingConfig.CurrentContext = "missing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errMsg := "cannot locate context missing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := MinifyConfig(&mutatingConfig); err == nil || err.Error() != errMsg {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", errMsg, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMinifyMissingCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mutatingConfig := newMergedConfig(certFile.Name(), "cert", keyFile.Name(), "key", caFile.Name(), "ca", t)
0000000000000000000000000000000000000000;;		delete(mutatingConfig.Clusters, mutatingConfig.Contexts[mutatingConfig.CurrentContext].Cluster)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errMsg := "cannot locate cluster cow-cluster"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := MinifyConfig(&mutatingConfig); err == nil || err.Error() != errMsg {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", errMsg, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMinifyMissingAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mutatingConfig := newMergedConfig(certFile.Name(), "cert", keyFile.Name(), "key", caFile.Name(), "ca", t)
0000000000000000000000000000000000000000;;		delete(mutatingConfig.AuthInfos, mutatingConfig.Contexts[mutatingConfig.CurrentContext].AuthInfo)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		errMsg := "cannot locate user red-user"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := MinifyConfig(&mutatingConfig); err == nil || err.Error() != errMsg {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", errMsg, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFlattenSuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certData := "cert"
0000000000000000000000000000000000000000;;		keyData := "key"
0000000000000000000000000000000000000000;;		caData := "ca"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unchangingCluster := "cow-cluster"
0000000000000000000000000000000000000000;;		unchangingAuthInfo := "red-user"
0000000000000000000000000000000000000000;;		changingCluster := "chicken-cluster"
0000000000000000000000000000000000000000;;		changingAuthInfo := "blue-user"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newMergedConfig(certFile.Name(), certData, keyFile.Name(), keyData, caFile.Name(), caData, t)
0000000000000000000000000000000000000000;;		mutatingConfig := startingConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := FlattenConfig(&mutatingConfig); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Contexts) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected contexts: %v", mutatingConfig.Contexts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.Contexts, mutatingConfig.Contexts) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.Contexts, mutatingConfig.Contexts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Clusters) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected clusters: %v", mutatingConfig.Clusters)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.Clusters[unchangingCluster], mutatingConfig.Clusters[unchangingCluster]) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.Clusters[unchangingCluster], mutatingConfig.Clusters[unchangingCluster])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Clusters[changingCluster].CertificateAuthority) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected caFile")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.Clusters[changingCluster].CertificateAuthorityData) != caData {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", caData, string(mutatingConfig.Clusters[changingCluster].CertificateAuthorityData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.AuthInfos) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected users: %v", mutatingConfig.AuthInfos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.AuthInfos[unchangingAuthInfo], mutatingConfig.AuthInfos[unchangingAuthInfo]) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.AuthInfos[unchangingAuthInfo], mutatingConfig.AuthInfos[unchangingAuthInfo])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(mutatingConfig.AuthInfos[changingAuthInfo].ClientCertificate) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected caFile")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.AuthInfos[changingAuthInfo].ClientCertificateData) != certData {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", certData, string(mutatingConfig.AuthInfos[changingAuthInfo].ClientCertificateData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(mutatingConfig.AuthInfos[changingAuthInfo].ClientKey) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected caFile")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.AuthInfos[changingAuthInfo].ClientKeyData) != keyData {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", keyData, string(mutatingConfig.AuthInfos[changingAuthInfo].ClientKeyData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_minifyAndShorten() {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certData := "cert"
0000000000000000000000000000000000000000;;		keyData := "key"
0000000000000000000000000000000000000000;;		caData := "ca"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := newMergedConfig(certFile.Name(), certData, keyFile.Name(), keyData, caFile.Name(), caData, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MinifyConfig(&config)
0000000000000000000000000000000000000000;;		ShortenConfig(&config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output, _ := yaml.Marshal(config)
0000000000000000000000000000000000000000;;		fmt.Printf("%s", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		//   cow-cluster:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     certificate-authority-data: REDACTED
0000000000000000000000000000000000000000;;		//     server: http://cow.org:8080
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		//   federal-context:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     cluster: cow-cluster
0000000000000000000000000000000000000000;;		//     user: red-user
0000000000000000000000000000000000000000;;		// current-context: federal-context
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		//   red-user:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     client-certificate-data: REDACTED
0000000000000000000000000000000000000000;;		//     client-key-data: REDACTED
0000000000000000000000000000000000000000;;		//     token: red-token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestShortenSuccess(t *testing.T) {
0000000000000000000000000000000000000000;;		certFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(certFile.Name())
0000000000000000000000000000000000000000;;		keyFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(keyFile.Name())
0000000000000000000000000000000000000000;;		caFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(caFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		certData := "cert"
0000000000000000000000000000000000000000;;		keyData := "key"
0000000000000000000000000000000000000000;;		caData := "ca"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		unchangingCluster := "chicken-cluster"
0000000000000000000000000000000000000000;;		unchangingAuthInfo := "blue-user"
0000000000000000000000000000000000000000;;		changingCluster := "cow-cluster"
0000000000000000000000000000000000000000;;		changingAuthInfo := "red-user"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		startingConfig := newMergedConfig(certFile.Name(), certData, keyFile.Name(), keyData, caFile.Name(), caData, t)
0000000000000000000000000000000000000000;;		mutatingConfig := startingConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ShortenConfig(&mutatingConfig)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Contexts) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected contexts: %v", mutatingConfig.Contexts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.Contexts, mutatingConfig.Contexts) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.Contexts, mutatingConfig.Contexts)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		redacted := string(redactedBytes)
0000000000000000000000000000000000000000;;		if len(mutatingConfig.Clusters) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected clusters: %v", mutatingConfig.Clusters)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.Clusters[unchangingCluster], mutatingConfig.Clusters[unchangingCluster]) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.Clusters[unchangingCluster], mutatingConfig.Clusters[unchangingCluster])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.Clusters[changingCluster].CertificateAuthorityData) != redacted {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", redacted, string(mutatingConfig.Clusters[changingCluster].CertificateAuthorityData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(mutatingConfig.AuthInfos) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected users: %v", mutatingConfig.AuthInfos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(startingConfig.AuthInfos[unchangingAuthInfo], mutatingConfig.AuthInfos[unchangingAuthInfo]) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", startingConfig.AuthInfos[unchangingAuthInfo], mutatingConfig.AuthInfos[unchangingAuthInfo])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.AuthInfos[changingAuthInfo].ClientCertificateData) != redacted {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", redacted, string(mutatingConfig.AuthInfos[changingAuthInfo].ClientCertificateData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if string(mutatingConfig.AuthInfos[changingAuthInfo].ClientKeyData) != redacted {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", redacted, string(mutatingConfig.AuthInfos[changingAuthInfo].ClientKeyData))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
