0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/client_config_test.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/client_config_test.go][staging/src/k8s.io/client-go/tools/clientcmd/client_config_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clientcmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/imdario/mergo"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestOldMergoLib(t *testing.T) {
0000000000000000000000000000000000000000;;		type T struct {
0000000000000000000000000000000000000000;;			X string
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dst := T{X: "one"}
0000000000000000000000000000000000000000;;		src := T{X: "two"}
0000000000000000000000000000000000000000;;		mergo.Merge(&dst, &src)
0000000000000000000000000000000000000000;;		if dst.X != "two" {
0000000000000000000000000000000000000000;;			// mergo.Merge changed in an incompatible way with
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			//   https://github.com/imdario/mergo/commit/d304790b2ed594794496464fadd89d2bb266600a
0000000000000000000000000000000000000000;;			//
0000000000000000000000000000000000000000;;			// We have to stay with the old version which still does eager
0000000000000000000000000000000000000000;;			// copying from src to dst in structs.
0000000000000000000000000000000000000000;;			t.Errorf("mergo.Merge library found with incompatible, new behavior")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createValidTestConfig() *clientcmdapi.Config {
0000000000000000000000000000000000000000;;		const (
0000000000000000000000000000000000000000;;			server = "https://anything.com:8080"
0000000000000000000000000000000000000000;;			token  = "the-token"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: server,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token: token,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.CurrentContext = "clean"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createCAValidTestConfig() *clientcmdapi.Config {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"].CertificateAuthorityData = []byte{0, 0}
0000000000000000000000000000000000000000;;		return config
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInsecureOverridesCA(t *testing.T) {
0000000000000000000000000000000000000000;;		config := createCAValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{
0000000000000000000000000000000000000000;;			ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				InsecureSkipTLSVerify: true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actualCfg, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchBoolArg(true, actualCfg.Insecure, t)
0000000000000000000000000000000000000000;;		matchStringArg("", actualCfg.TLSClientConfig.CAFile, t)
0000000000000000000000000000000000000000;;		matchByteArg(nil, actualCfg.TLSClientConfig.CAData, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMergeContext(t *testing.T) {
0000000000000000000000000000000000000000;;		const namespace = "overriden-namespace"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, overridden, err := clientBuilder.Namespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if overridden {
0000000000000000000000000000000000000000;;			t.Error("Expected namespace to not be overridden")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientBuilder = NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{
0000000000000000000000000000000000000000;;			Context: clientcmdapi.Context{
0000000000000000000000000000000000000000;;				Namespace: namespace,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		actual, overridden, err := clientBuilder.Namespace()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !overridden {
0000000000000000000000000000000000000000;;			t.Error("Expected namespace to be overridden")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(namespace, actual, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCertificateData(t *testing.T) {
0000000000000000000000000000000000000000;;		caData := []byte("ca-data")
0000000000000000000000000000000000000000;;		certData := []byte("cert-data")
0000000000000000000000000000000000000000;;		keyData := []byte("key-data")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "https://localhost:8443",
0000000000000000000000000000000000000000;;			CertificateAuthorityData: caData,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientCertificateData: certData,
0000000000000000000000000000000000000000;;			ClientKeyData:         keyData,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.CurrentContext = "clean"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure cert data gets into config (will override file paths)
0000000000000000000000000000000000000000;;		matchByteArg(caData, clientConfig.TLSClientConfig.CAData, t)
0000000000000000000000000000000000000000;;		matchByteArg(certData, clientConfig.TLSClientConfig.CertData, t)
0000000000000000000000000000000000000000;;		matchByteArg(keyData, clientConfig.TLSClientConfig.KeyData, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasicAuthData(t *testing.T) {
0000000000000000000000000000000000000000;;		username := "myuser"
0000000000000000000000000000000000000000;;		password := "mypass"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "https://localhost:8443",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Username: username,
0000000000000000000000000000000000000000;;			Password: password,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.CurrentContext = "clean"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure basic auth data gets into config
0000000000000000000000000000000000000000;;		matchStringArg(username, clientConfig.Username, t)
0000000000000000000000000000000000000000;;		matchStringArg(password, clientConfig.Password, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasicTokenFile(t *testing.T) {
0000000000000000000000000000000000000000;;		token := "exampletoken"
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "tokenfile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(f.Name(), []byte(token), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "https://localhost:8443",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			TokenFile: f.Name(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.CurrentContext = "clean"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(token, clientConfig.BearerToken, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestPrecedenceTokenFile(t *testing.T) {
0000000000000000000000000000000000000000;;		token := "exampletoken"
0000000000000000000000000000000000000000;;		f, err := ioutil.TempFile("", "tokenfile")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(f.Name(), []byte(token), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "https://localhost:8443",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expectedToken := "expected"
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token:     expectedToken,
0000000000000000000000000000000000000000;;			TokenFile: f.Name(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.CurrentContext = "clean"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(expectedToken, clientConfig.BearerToken, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateClean(t *testing.T) {
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(config.Clusters["clean"].Server, clientConfig.Host, t)
0000000000000000000000000000000000000000;;		matchStringArg("", clientConfig.APIPath, t)
0000000000000000000000000000000000000000;;		matchBoolArg(config.Clusters["clean"].InsecureSkipTLSVerify, clientConfig.Insecure, t)
0000000000000000000000000000000000000000;;		matchStringArg(config.AuthInfos["clean"].Token, clientConfig.BearerToken, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateCleanWithPrefix(t *testing.T) {
0000000000000000000000000000000000000000;;		tt := []struct {
0000000000000000000000000000000000000000;;			server string
0000000000000000000000000000000000000000;;			host   string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"https://anything.com:8080/foo/bar", "https://anything.com:8080/foo/bar"},
0000000000000000000000000000000000000000;;			{"http://anything.com:8080/foo/bar", "http://anything.com:8080/foo/bar"},
0000000000000000000000000000000000000000;;			{"http://anything.com:8080/foo/bar/", "http://anything.com:8080/foo/bar/"},
0000000000000000000000000000000000000000;;			{"http://anything.com:8080/", "http://anything.com:8080/"},
0000000000000000000000000000000000000000;;			{"http://anything.com:8080//", "http://anything.com:8080//"},
0000000000000000000000000000000000000000;;			{"anything.com:8080/foo/bar", "anything.com:8080/foo/bar"},
0000000000000000000000000000000000000000;;			{"anything.com:8080", "anything.com:8080"},
0000000000000000000000000000000000000000;;			{"anything.com", "anything.com"},
0000000000000000000000000000000000000000;;			{"anything", "anything"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tt = append(tt, struct{ server, host string }{"", "http://localhost:8080"})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tt {
0000000000000000000000000000000000000000;;			config := createValidTestConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			cleanConfig := config.Clusters["clean"]
0000000000000000000000000000000000000000;;			cleanConfig.Server = tc.server
0000000000000000000000000000000000000000;;			config.Clusters["clean"] = cleanConfig
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clientBuilder := NewNonInteractiveClientConfig(*config, "clean", &ConfigOverrides{
0000000000000000000000000000000000000000;;				ClusterDefaults: clientcmdapi.Cluster{Server: "http://localhost:8080"},
0000000000000000000000000000000000000000;;			}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			matchStringArg(tc.host, clientConfig.Host, t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateCleanDefault(t *testing.T) {
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewDefaultClientConfig(*config, &ConfigOverrides{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(config.Clusters["clean"].Server, clientConfig.Host, t)
0000000000000000000000000000000000000000;;		matchBoolArg(config.Clusters["clean"].InsecureSkipTLSVerify, clientConfig.Insecure, t)
0000000000000000000000000000000000000000;;		matchStringArg(config.AuthInfos["clean"].Token, clientConfig.BearerToken, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateCleanDefaultCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewDefaultClientConfig(*config, &ConfigOverrides{
0000000000000000000000000000000000000000;;			ClusterDefaults: clientcmdapi.Cluster{Server: "http://localhost:8080"},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientConfig, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg(config.Clusters["clean"].Server, clientConfig.Host, t)
0000000000000000000000000000000000000000;;		matchBoolArg(config.Clusters["clean"].InsecureSkipTLSVerify, clientConfig.Insecure, t)
0000000000000000000000000000000000000000;;		matchStringArg(config.AuthInfos["clean"].Token, clientConfig.BearerToken, t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateMissingContextNoDefault(t *testing.T) {
0000000000000000000000000000000000000000;;		const expectedErrorContains = "Context was not found for specified context"
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "not-present", &ConfigOverrides{}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCreateMissingContext(t *testing.T) {
0000000000000000000000000000000000000000;;		const expectedErrorContains = "context was not found for specified context: not-present"
0000000000000000000000000000000000000000;;		config := createValidTestConfig()
0000000000000000000000000000000000000000;;		clientBuilder := NewNonInteractiveClientConfig(*config, "not-present", &ConfigOverrides{
0000000000000000000000000000000000000000;;			ClusterDefaults: clientcmdapi.Cluster{Server: "http://localhost:8080"},
0000000000000000000000000000000000000000;;		}, nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := clientBuilder.ClientConfig()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error: %v", expectedErrorContains)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), expectedErrorContains) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error: %v, but got %v", expectedErrorContains, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInClusterClientConfigPrecedence(t *testing.T) {
0000000000000000000000000000000000000000;;		tt := []struct {
0000000000000000000000000000000000000000;;			overrides *ConfigOverrides
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						Server: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					AuthInfo: clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;						Token: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						CertificateAuthority: "/path/to/ca-from-overrides.crt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						Server: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AuthInfo: clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;						Token: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						Server:               "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;						CertificateAuthority: "/path/to/ca-from-overrides.crt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						CertificateAuthority: "/path/to/ca-from-overrides.crt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AuthInfo: clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;						Token: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;					ClusterInfo: clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;						Server:               "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;						CertificateAuthority: "/path/to/ca-from-overrides.crt",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					AuthInfo: clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;						Token: "https://host-from-overrides.com",
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				overrides: &ConfigOverrides{},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, tc := range tt {
0000000000000000000000000000000000000000;;			expectedServer := "https://host-from-cluster.com"
0000000000000000000000000000000000000000;;			expectedToken := "token-from-cluster"
0000000000000000000000000000000000000000;;			expectedCAFile := "/path/to/ca-from-cluster.crt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			icc := &inClusterClientConfig{
0000000000000000000000000000000000000000;;				inClusterConfigProvider: func() (*restclient.Config, error) {
0000000000000000000000000000000000000000;;					return &restclient.Config{
0000000000000000000000000000000000000000;;						Host:        expectedServer,
0000000000000000000000000000000000000000;;						BearerToken: expectedToken,
0000000000000000000000000000000000000000;;						TLSClientConfig: restclient.TLSClientConfig{
0000000000000000000000000000000000000000;;							CAFile: expectedCAFile,
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				overrides: tc.overrides,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			clientConfig, err := icc.ClientConfig()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Fatalf("Unxpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if overridenServer := tc.overrides.ClusterInfo.Server; len(overridenServer) > 0 {
0000000000000000000000000000000000000000;;				expectedServer = overridenServer
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if overridenToken := tc.overrides.AuthInfo.Token; len(overridenToken) > 0 {
0000000000000000000000000000000000000000;;				expectedToken = overridenToken
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if overridenCAFile := tc.overrides.ClusterInfo.CertificateAuthority; len(overridenCAFile) > 0 {
0000000000000000000000000000000000000000;;				expectedCAFile = overridenCAFile
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if clientConfig.Host != expectedServer {
0000000000000000000000000000000000000000;;				t.Errorf("Expected server %v, got %v", expectedServer, clientConfig.Host)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if clientConfig.BearerToken != expectedToken {
0000000000000000000000000000000000000000;;				t.Errorf("Expected token %v, got %v", expectedToken, clientConfig.BearerToken)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if clientConfig.TLSClientConfig.CAFile != expectedCAFile {
0000000000000000000000000000000000000000;;				t.Errorf("Expected Certificate Authority %v, got %v", expectedCAFile, clientConfig.TLSClientConfig.CAFile)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func matchBoolArg(expected, got bool, t *testing.T) {
0000000000000000000000000000000000000000;;		if expected != got {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func matchStringArg(expected, got string, t *testing.T) {
0000000000000000000000000000000000000000;;		if expected != got {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %q, got %q", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func matchByteArg(expected, got []byte, t *testing.T) {
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(expected, got) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNamespaceOverride(t *testing.T) {
0000000000000000000000000000000000000000;;		config := &DirectClientConfig{
0000000000000000000000000000000000000000;;			overrides: &ConfigOverrides{
0000000000000000000000000000000000000000;;				Context: clientcmdapi.Context{
0000000000000000000000000000000000000000;;					Namespace: "foo",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ns, overridden, err := config.Namespace()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !overridden {
0000000000000000000000000000000000000000;;			t.Errorf("Expected overridden = true")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		matchStringArg("foo", ns, t)
0000000000000000000000000000000000000000;;	}
