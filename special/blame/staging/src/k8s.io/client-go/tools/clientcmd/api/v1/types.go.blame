0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/v1/types.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/v1/types.go][staging/src/k8s.io/client-go/tools/clientcmd/api/v1/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Where possible, json tags match the cli argument names.
0000000000000000000000000000000000000000;;	// Top level config objects and all values required for proper functioning are not "omitempty".  Any truly optional piece of config is allowed to be omitted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Config holds the information needed to build connect to remote kubernetes clusters as a given user
0000000000000000000000000000000000000000;;	type Config struct {
0000000000000000000000000000000000000000;;		// Legacy field from pkg/api/types.go TypeMeta.
0000000000000000000000000000000000000000;;		// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;		// Legacy field from pkg/api/types.go TypeMeta.
0000000000000000000000000000000000000000;;		// TODO(jlowdermilk): remove this after eliminating downstream dependencies.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		APIVersion string `json:"apiVersion,omitempty"`
0000000000000000000000000000000000000000;;		// Preferences holds general information to be use for cli interactions
0000000000000000000000000000000000000000;;		Preferences Preferences `json:"preferences"`
0000000000000000000000000000000000000000;;		// Clusters is a map of referencable names to cluster configs
0000000000000000000000000000000000000000;;		Clusters []NamedCluster `json:"clusters"`
0000000000000000000000000000000000000000;;		// AuthInfos is a map of referencable names to user configs
0000000000000000000000000000000000000000;;		AuthInfos []NamedAuthInfo `json:"users"`
0000000000000000000000000000000000000000;;		// Contexts is a map of referencable names to context configs
0000000000000000000000000000000000000000;;		Contexts []NamedContext `json:"contexts"`
0000000000000000000000000000000000000000;;		// CurrentContext is the name of the context that you would like to use by default
0000000000000000000000000000000000000000;;		CurrentContext string `json:"current-context"`
0000000000000000000000000000000000000000;;		// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extensions []NamedExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Preferences struct {
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Colors bool `json:"colors,omitempty"`
0000000000000000000000000000000000000000;;		// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extensions []NamedExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cluster contains information about how to communicate with a kubernetes cluster
0000000000000000000000000000000000000000;;	type Cluster struct {
0000000000000000000000000000000000000000;;		// Server is the address of the kubernetes cluster (https://hostname:port).
0000000000000000000000000000000000000000;;		Server string `json:"server"`
0000000000000000000000000000000000000000;;		// InsecureSkipTLSVerify skips the validity check for the server's certificate. This will make your HTTPS connections insecure.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		InsecureSkipTLSVerify bool `json:"insecure-skip-tls-verify,omitempty"`
0000000000000000000000000000000000000000;;		// CertificateAuthority is the path to a cert file for the certificate authority.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CertificateAuthority string `json:"certificate-authority,omitempty"`
0000000000000000000000000000000000000000;;		// CertificateAuthorityData contains PEM-encoded certificate authority certificates. Overrides CertificateAuthority
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		CertificateAuthorityData []byte `json:"certificate-authority-data,omitempty"`
0000000000000000000000000000000000000000;;		// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extensions []NamedExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthInfo contains information that describes identity information.  This is use to tell the kubernetes cluster who you are.
0000000000000000000000000000000000000000;;	type AuthInfo struct {
0000000000000000000000000000000000000000;;		// ClientCertificate is the path to a client cert file for TLS.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ClientCertificate string `json:"client-certificate,omitempty"`
0000000000000000000000000000000000000000;;		// ClientCertificateData contains PEM-encoded data from a client cert file for TLS. Overrides ClientCertificate
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ClientCertificateData []byte `json:"client-certificate-data,omitempty"`
0000000000000000000000000000000000000000;;		// ClientKey is the path to a client key file for TLS.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ClientKey string `json:"client-key,omitempty"`
0000000000000000000000000000000000000000;;		// ClientKeyData contains PEM-encoded data from a client key file for TLS. Overrides ClientKey
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ClientKeyData []byte `json:"client-key-data,omitempty"`
0000000000000000000000000000000000000000;;		// Token is the bearer token for authentication to the kubernetes cluster.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty"`
0000000000000000000000000000000000000000;;		// TokenFile is a pointer to a file that contains a bearer token (as described above).  If both Token and TokenFile are present, Token takes precedence.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		TokenFile string `json:"tokenFile,omitempty"`
0000000000000000000000000000000000000000;;		// Impersonate is the username to imperonate.  The name matches the flag.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Impersonate string `json:"as,omitempty"`
0000000000000000000000000000000000000000;;		// ImpersonateGroups is the groups to imperonate.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ImpersonateGroups []string `json:"as-groups,omitempty"`
0000000000000000000000000000000000000000;;		// ImpersonateUserExtra contains additional information for impersonated user.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		ImpersonateUserExtra map[string][]string `json:"as-user-extra,omitempty"`
0000000000000000000000000000000000000000;;		// Username is the username for basic authentication to the kubernetes cluster.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Username string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;		// Password is the password for basic authentication to the kubernetes cluster.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Password string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;		// AuthProvider specifies a custom authentication plugin for the kubernetes cluster.
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		AuthProvider *AuthProviderConfig `json:"auth-provider,omitempty"`
0000000000000000000000000000000000000000;;		// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extensions []NamedExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context is a tuple of references to a cluster (how do I communicate with a kubernetes cluster), a user (how do I identify myself), and a namespace (what subset of resources do I want to work with)
0000000000000000000000000000000000000000;;	type Context struct {
0000000000000000000000000000000000000000;;		// Cluster is the name of the cluster for this context
0000000000000000000000000000000000000000;;		Cluster string `json:"cluster"`
0000000000000000000000000000000000000000;;		// AuthInfo is the name of the authInfo for this context
0000000000000000000000000000000000000000;;		AuthInfo string `json:"user"`
0000000000000000000000000000000000000000;;		// Namespace is the default namespace to use on unspecified requests
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Namespace string `json:"namespace,omitempty"`
0000000000000000000000000000000000000000;;		// Extensions holds additional information. This is useful for extenders so that reads and writes don't clobber unknown fields
0000000000000000000000000000000000000000;;		// +optional
0000000000000000000000000000000000000000;;		Extensions []NamedExtension `json:"extensions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedCluster relates nicknames to cluster information
0000000000000000000000000000000000000000;;	type NamedCluster struct {
0000000000000000000000000000000000000000;;		// Name is the nickname for this Cluster
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Cluster holds the cluster information
0000000000000000000000000000000000000000;;		Cluster Cluster `json:"cluster"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedContext relates nicknames to context information
0000000000000000000000000000000000000000;;	type NamedContext struct {
0000000000000000000000000000000000000000;;		// Name is the nickname for this Context
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Context holds the context information
0000000000000000000000000000000000000000;;		Context Context `json:"context"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedAuthInfo relates nicknames to auth information
0000000000000000000000000000000000000000;;	type NamedAuthInfo struct {
0000000000000000000000000000000000000000;;		// Name is the nickname for this AuthInfo
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// AuthInfo holds the auth information
0000000000000000000000000000000000000000;;		AuthInfo AuthInfo `json:"user"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NamedExtension relates nicknames to extension information
0000000000000000000000000000000000000000;;	type NamedExtension struct {
0000000000000000000000000000000000000000;;		// Name is the nickname for this Extension
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		// Extension holds the extension information
0000000000000000000000000000000000000000;;		Extension runtime.RawExtension `json:"extension"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuthProviderConfig holds the configuration for a specified auth provider.
0000000000000000000000000000000000000000;;	type AuthProviderConfig struct {
0000000000000000000000000000000000000000;;		Name   string            `json:"name"`
0000000000000000000000000000000000000000;;		Config map[string]string `json:"config"`
0000000000000000000000000000000000000000;;	}
