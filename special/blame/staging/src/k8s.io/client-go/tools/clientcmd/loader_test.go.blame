0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/loader_test.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/loader_test.go][staging/src/k8s.io/client-go/tools/clientcmd/loader_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clientcmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		clientcmdlatest "k8s.io/client-go/tools/clientcmd/api/latest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		testConfigAlfa = clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"red-user": {Token: "red-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"cow-cluster": {Server: "http://cow.org:8080"}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"federal-context": {AuthInfo: "red-user", Cluster: "cow-cluster", Namespace: "hammer-ns"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testConfigBravo = clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"black-user": {Token: "black-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"pig-cluster": {Server: "http://pig.org:8080"}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"queen-anne-context": {AuthInfo: "black-user", Cluster: "pig-cluster", Namespace: "saw-ns"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testConfigCharlie = clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"green-user": {Token: "green-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"horse-cluster": {Server: "http://horse.org:8080"}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"shaker-context": {AuthInfo: "green-user", Cluster: "horse-cluster", Namespace: "chisel-ns"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		testConfigDelta = clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"blue-user": {Token: "blue-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"chicken-cluster": {Server: "http://chicken.org:8080"}},
0000000000000000000000000000000000000000;;			Contexts: map[string]*clientcmdapi.Context{
0000000000000000000000000000000000000000;;				"gothic-context": {AuthInfo: "blue-user", Cluster: "chicken-cluster", Namespace: "plane-ns"}},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		testConfigConflictAlfa = clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"red-user":    {Token: "a-different-red-token"},
0000000000000000000000000000000000000000;;				"yellow-user": {Token: "yellow-token"}},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"cow-cluster":    {Server: "http://a-different-cow.org:8080", InsecureSkipTLSVerify: true},
0000000000000000000000000000000000000000;;				"donkey-cluster": {Server: "http://donkey.org:8080", InsecureSkipTLSVerify: true}},
0000000000000000000000000000000000000000;;			CurrentContext: "federal-context",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestNonExistentCommandLineFile(t *testing.T) {
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			ExplicitPath: "bogus_file",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := loadingRules.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error for missing command-line file, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), "bogus_file") {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error about 'bogus_file', got %s", err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestToleratingMissingFiles(t *testing.T) {
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			Precedence: []string{"bogus1", "bogus2", "bogus3"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := loadingRules.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestErrorReadingFile(t *testing.T) {
0000000000000000000000000000000000000000;;		commandLineFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(commandLineFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := ioutil.WriteFile(commandLineFile.Name(), []byte("bogus value"), 0644); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Error creating tempfile: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			ExplicitPath: commandLineFile.Name(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := loadingRules.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error for unloadable file, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), commandLineFile.Name()) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error about '%s', got %s", commandLineFile.Name(), err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestErrorReadingNonFile(t *testing.T) {
0000000000000000000000000000000000000000;;		tmpdir, err := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Couldn't create tmpdir")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer os.RemoveAll(tmpdir)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			ExplicitPath: tmpdir,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err = loadingRules.Load()
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error for non-file, got none")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !strings.Contains(err.Error(), tmpdir) {
0000000000000000000000000000000000000000;;			t.Fatalf("Expected error about '%s', got %s", tmpdir, err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConflictingCurrentContext(t *testing.T) {
0000000000000000000000000000000000000000;;		commandLineFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(commandLineFile.Name())
0000000000000000000000000000000000000000;;		envVarFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mockCommandLineConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "any-context-value",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		mockEnvVarConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "a-different-context",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(mockCommandLineConfig, commandLineFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(mockEnvVarConfig, envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			ExplicitPath: commandLineFile.Name(),
0000000000000000000000000000000000000000;;			Precedence:   []string{envVarFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergedConfig, err := loadingRules.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if mergedConfig.CurrentContext != mockCommandLineConfig.CurrentContext {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", mockCommandLineConfig.CurrentContext, mergedConfig.CurrentContext)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadingEmptyMaps(t *testing.T) {
0000000000000000000000000000000000000000;;		configFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(configFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mockConfig := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			CurrentContext: "any-context-value",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(mockConfig, configFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config, err := LoadFromFile(configFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config.Clusters == nil {
0000000000000000000000000000000000000000;;			t.Error("expected config.Clusters to be non-nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.AuthInfos == nil {
0000000000000000000000000000000000000000;;			t.Error("expected config.AuthInfos to be non-nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Contexts == nil {
0000000000000000000000000000000000000000;;			t.Error("expected config.Contexts to be non-nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestResolveRelativePaths(t *testing.T) {
0000000000000000000000000000000000000000;;		pathResolutionConfig1 := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"relative-user-1": {ClientCertificate: "relative/client/cert", ClientKey: "../relative/client/key"},
0000000000000000000000000000000000000000;;				"absolute-user-1": {ClientCertificate: "/absolute/client/cert", ClientKey: "/absolute/client/key"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"relative-server-1": {CertificateAuthority: "../relative/ca"},
0000000000000000000000000000000000000000;;				"absolute-server-1": {CertificateAuthority: "/absolute/ca"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pathResolutionConfig2 := clientcmdapi.Config{
0000000000000000000000000000000000000000;;			AuthInfos: map[string]*clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;				"relative-user-2": {ClientCertificate: "relative/client/cert2", ClientKey: "../relative/client/key2"},
0000000000000000000000000000000000000000;;				"absolute-user-2": {ClientCertificate: "/absolute/client/cert2", ClientKey: "/absolute/client/key2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			Clusters: map[string]*clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;				"relative-server-2": {CertificateAuthority: "../relative/ca2"},
0000000000000000000000000000000000000000;;				"absolute-server-2": {CertificateAuthority: "/absolute/ca2"},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configDir1, _ := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		defer os.RemoveAll(configDir1)
0000000000000000000000000000000000000000;;		configFile1 := path.Join(configDir1, ".kubeconfig")
0000000000000000000000000000000000000000;;		configDir1, _ = filepath.Abs(configDir1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		configDir2, _ := ioutil.TempDir("", "")
0000000000000000000000000000000000000000;;		defer os.RemoveAll(configDir2)
0000000000000000000000000000000000000000;;		configDir2, _ = ioutil.TempDir(configDir2, "")
0000000000000000000000000000000000000000;;		configFile2 := path.Join(configDir2, ".kubeconfig")
0000000000000000000000000000000000000000;;		configDir2, _ = filepath.Abs(configDir2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(pathResolutionConfig1, configFile1)
0000000000000000000000000000000000000000;;		WriteToFile(pathResolutionConfig2, configFile2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			Precedence: []string{configFile1, configFile2},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergedConfig, err := loadingRules.Load()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		foundClusterCount := 0
0000000000000000000000000000000000000000;;		for key, cluster := range mergedConfig.Clusters {
0000000000000000000000000000000000000000;;			if key == "relative-server-1" {
0000000000000000000000000000000000000000;;				foundClusterCount++
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir1, pathResolutionConfig1.Clusters["relative-server-1"].CertificateAuthority), cluster.CertificateAuthority, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "relative-server-2" {
0000000000000000000000000000000000000000;;				foundClusterCount++
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir2, pathResolutionConfig2.Clusters["relative-server-2"].CertificateAuthority), cluster.CertificateAuthority, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "absolute-server-1" {
0000000000000000000000000000000000000000;;				foundClusterCount++
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig1.Clusters["absolute-server-1"].CertificateAuthority, cluster.CertificateAuthority, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "absolute-server-2" {
0000000000000000000000000000000000000000;;				foundClusterCount++
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig2.Clusters["absolute-server-2"].CertificateAuthority, cluster.CertificateAuthority, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if foundClusterCount != 4 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 4 clusters, found %v: %v", foundClusterCount, mergedConfig.Clusters)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		foundAuthInfoCount := 0
0000000000000000000000000000000000000000;;		for key, authInfo := range mergedConfig.AuthInfos {
0000000000000000000000000000000000000000;;			if key == "relative-user-1" {
0000000000000000000000000000000000000000;;				foundAuthInfoCount++
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir1, pathResolutionConfig1.AuthInfos["relative-user-1"].ClientCertificate), authInfo.ClientCertificate, t)
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir1, pathResolutionConfig1.AuthInfos["relative-user-1"].ClientKey), authInfo.ClientKey, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "relative-user-2" {
0000000000000000000000000000000000000000;;				foundAuthInfoCount++
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir2, pathResolutionConfig2.AuthInfos["relative-user-2"].ClientCertificate), authInfo.ClientCertificate, t)
0000000000000000000000000000000000000000;;				matchStringArg(path.Join(configDir2, pathResolutionConfig2.AuthInfos["relative-user-2"].ClientKey), authInfo.ClientKey, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "absolute-user-1" {
0000000000000000000000000000000000000000;;				foundAuthInfoCount++
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig1.AuthInfos["absolute-user-1"].ClientCertificate, authInfo.ClientCertificate, t)
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig1.AuthInfos["absolute-user-1"].ClientKey, authInfo.ClientKey, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if key == "absolute-user-2" {
0000000000000000000000000000000000000000;;				foundAuthInfoCount++
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig2.AuthInfos["absolute-user-2"].ClientCertificate, authInfo.ClientCertificate, t)
0000000000000000000000000000000000000000;;				matchStringArg(pathResolutionConfig2.AuthInfos["absolute-user-2"].ClientKey, authInfo.ClientKey, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if foundAuthInfoCount != 4 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 4 users, found %v: %v", foundAuthInfoCount, mergedConfig.AuthInfos)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMigratingFile(t *testing.T) {
0000000000000000000000000000000000000000;;		sourceFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(sourceFile.Name())
0000000000000000000000000000000000000000;;		destinationFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		// delete the file so that we'll write to it
0000000000000000000000000000000000000000;;		os.Remove(destinationFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(testConfigAlfa, sourceFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			MigrationRules: map[string]string{destinationFile.Name(): sourceFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := loadingRules.Load(); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the load should have recreated this file
0000000000000000000000000000000000000000;;		defer os.Remove(destinationFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sourceContent, err := ioutil.ReadFile(sourceFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		destinationContent, err := ioutil.ReadFile(destinationFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(sourceContent, destinationContent) {
0000000000000000000000000000000000000000;;			t.Errorf("source and destination do not match")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMigratingFileLeaveExistingFileAlone(t *testing.T) {
0000000000000000000000000000000000000000;;		sourceFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(sourceFile.Name())
0000000000000000000000000000000000000000;;		destinationFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(destinationFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(testConfigAlfa, sourceFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			MigrationRules: map[string]string{destinationFile.Name(): sourceFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := loadingRules.Load(); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		destinationContent, err := ioutil.ReadFile(destinationFile.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(destinationContent) > 0 {
0000000000000000000000000000000000000000;;			t.Errorf("destination should not have been touched")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMigratingFileSourceMissingSkip(t *testing.T) {
0000000000000000000000000000000000000000;;		sourceFilename := "some-missing-file"
0000000000000000000000000000000000000000;;		destinationFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		// delete the file so that we'll write to it
0000000000000000000000000000000000000000;;		os.Remove(destinationFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			MigrationRules: map[string]string{destinationFile.Name(): sourceFilename},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := loadingRules.Load(); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := os.Stat(destinationFile.Name()); !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			t.Errorf("destination should not exist")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFileLocking(t *testing.T) {
0000000000000000000000000000000000000000;;		f, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(f.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := lockFile(f.Name())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error while locking file: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer unlockFile(f.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = lockFile(f.Name())
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			t.Error("expected error while locking file.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_noMergingOnExplicitPaths() {
0000000000000000000000000000000000000000;;		commandLineFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(commandLineFile.Name())
0000000000000000000000000000000000000000;;		envVarFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(testConfigAlfa, commandLineFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(testConfigConflictAlfa, envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			ExplicitPath: commandLineFile.Name(),
0000000000000000000000000000000000000000;;			Precedence:   []string{envVarFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergedConfig, err := loadingRules.Load()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(clientcmdlatest.Codec, mergedConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := yaml.JSONToYAML(json)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%v", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// apiVersion: v1
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://cow.org:8080
0000000000000000000000000000000000000000;;		//   name: cow-cluster
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: cow-cluster
0000000000000000000000000000000000000000;;		//     namespace: hammer-ns
0000000000000000000000000000000000000000;;		//     user: red-user
0000000000000000000000000000000000000000;;		//   name: federal-context
0000000000000000000000000000000000000000;;		// current-context: ""
0000000000000000000000000000000000000000;;		// kind: Config
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		// - name: red-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: red-token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_mergingSomeWithConflict() {
0000000000000000000000000000000000000000;;		commandLineFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(commandLineFile.Name())
0000000000000000000000000000000000000000;;		envVarFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(testConfigAlfa, commandLineFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(testConfigConflictAlfa, envVarFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			Precedence: []string{commandLineFile.Name(), envVarFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergedConfig, err := loadingRules.Load()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(clientcmdlatest.Codec, mergedConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := yaml.JSONToYAML(json)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%v", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// apiVersion: v1
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://cow.org:8080
0000000000000000000000000000000000000000;;		//   name: cow-cluster
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;		//     server: http://donkey.org:8080
0000000000000000000000000000000000000000;;		//   name: donkey-cluster
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: cow-cluster
0000000000000000000000000000000000000000;;		//     namespace: hammer-ns
0000000000000000000000000000000000000000;;		//     user: red-user
0000000000000000000000000000000000000000;;		//   name: federal-context
0000000000000000000000000000000000000000;;		// current-context: federal-context
0000000000000000000000000000000000000000;;		// kind: Config
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		// - name: red-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: red-token
0000000000000000000000000000000000000000;;		// - name: yellow-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: yellow-token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_mergingEverythingNoConflicts() {
0000000000000000000000000000000000000000;;		commandLineFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(commandLineFile.Name())
0000000000000000000000000000000000000000;;		envVarFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(envVarFile.Name())
0000000000000000000000000000000000000000;;		currentDirFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(currentDirFile.Name())
0000000000000000000000000000000000000000;;		homeDirFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(homeDirFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteToFile(testConfigAlfa, commandLineFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(testConfigBravo, envVarFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(testConfigCharlie, currentDirFile.Name())
0000000000000000000000000000000000000000;;		WriteToFile(testConfigDelta, homeDirFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		loadingRules := ClientConfigLoadingRules{
0000000000000000000000000000000000000000;;			Precedence: []string{commandLineFile.Name(), envVarFile.Name(), currentDirFile.Name(), homeDirFile.Name()},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mergedConfig, err := loadingRules.Load()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		json, err := runtime.Encode(clientcmdlatest.Codec, mergedConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		output, err := yaml.JSONToYAML(json)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%v", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// 	apiVersion: v1
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://chicken.org:8080
0000000000000000000000000000000000000000;;		//   name: chicken-cluster
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://cow.org:8080
0000000000000000000000000000000000000000;;		//   name: cow-cluster
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://horse.org:8080
0000000000000000000000000000000000000000;;		//   name: horse-cluster
0000000000000000000000000000000000000000;;		// - cluster:
0000000000000000000000000000000000000000;;		//     server: http://pig.org:8080
0000000000000000000000000000000000000000;;		//   name: pig-cluster
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: cow-cluster
0000000000000000000000000000000000000000;;		//     namespace: hammer-ns
0000000000000000000000000000000000000000;;		//     user: red-user
0000000000000000000000000000000000000000;;		//   name: federal-context
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: chicken-cluster
0000000000000000000000000000000000000000;;		//     namespace: plane-ns
0000000000000000000000000000000000000000;;		//     user: blue-user
0000000000000000000000000000000000000000;;		//   name: gothic-context
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: pig-cluster
0000000000000000000000000000000000000000;;		//     namespace: saw-ns
0000000000000000000000000000000000000000;;		//     user: black-user
0000000000000000000000000000000000000000;;		//   name: queen-anne-context
0000000000000000000000000000000000000000;;		// - context:
0000000000000000000000000000000000000000;;		//     cluster: horse-cluster
0000000000000000000000000000000000000000;;		//     namespace: chisel-ns
0000000000000000000000000000000000000000;;		//     user: green-user
0000000000000000000000000000000000000000;;		//   name: shaker-context
0000000000000000000000000000000000000000;;		// current-context: ""
0000000000000000000000000000000000000000;;		// kind: Config
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		// - name: black-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: black-token
0000000000000000000000000000000000000000;;		// - name: blue-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: blue-token
0000000000000000000000000000000000000000;;		// - name: green-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: green-token
0000000000000000000000000000000000000000;;		// - name: red-user
0000000000000000000000000000000000000000;;		//   user:
0000000000000000000000000000000000000000;;		//     token: red-token
0000000000000000000000000000000000000000;;	}
