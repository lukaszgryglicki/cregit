0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
960ba3a536a6c3ca8326e360680847c23b8db9f6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clientcmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseTimeout returns a parsed duration from a string
0000000000000000000000000000000000000000;;	// A duration string value must be a positive integer, optionally followed by a corresponding time unit (s|m|h).
0000000000000000000000000000000000000000;;	func ParseTimeout(duration string) (time.Duration, error) {
0000000000000000000000000000000000000000;;		if i, err := strconv.ParseInt(duration, 10, 64); err == nil && i >= 0 {
0000000000000000000000000000000000000000;;			return (time.Duration(i) * time.Second), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if requestTimeout, err := time.ParseDuration(duration); err == nil {
0000000000000000000000000000000000000000;;			return requestTimeout, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, fmt.Errorf("Invalid timeout value. Timeout must be a single integer in seconds, or an integer followed by a corresponding time unit (e.g. 1s | 2m | 3h)")
0000000000000000000000000000000000000000;;	}
