0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/v1/conversion.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/v1/conversion.go][staging/src/k8s.io/client-go/tools/clientcmd/api/v1/conversion.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/conversion"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func addConversionFuncs(scheme *runtime.Scheme) error {
0000000000000000000000000000000000000000;;		return scheme.AddConversionFuncs(
0000000000000000000000000000000000000000;;			func(in *Cluster, out *api.Cluster, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *api.Cluster, out *Cluster, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *Preferences, out *api.Preferences, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *api.Preferences, out *Preferences, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *AuthInfo, out *api.AuthInfo, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *api.AuthInfo, out *AuthInfo, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *Context, out *api.Context, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *api.Context, out *Context, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				return s.DefaultConvert(in, out, conversion.IgnoreMissingFields)
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			func(in *Config, out *api.Config, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				out.CurrentContext = in.CurrentContext
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Preferences, &out.Preferences, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				out.Clusters = make(map[string]*api.Cluster)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Clusters, &out.Clusters, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.AuthInfos = make(map[string]*api.AuthInfo)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.AuthInfos, &out.AuthInfos, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.Contexts = make(map[string]*api.Context)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Contexts, &out.Contexts, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.Extensions = make(map[string]runtime.Object)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Extensions, &out.Extensions, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *api.Config, out *Config, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				out.CurrentContext = in.CurrentContext
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Preferences, &out.Preferences, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				out.Clusters = make([]NamedCluster, 0, 0)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Clusters, &out.Clusters, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.AuthInfos = make([]NamedAuthInfo, 0, 0)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.AuthInfos, &out.AuthInfos, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.Contexts = make([]NamedContext, 0, 0)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Contexts, &out.Contexts, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				out.Extensions = make([]NamedExtension, 0, 0)
0000000000000000000000000000000000000000;;				if err := s.Convert(&in.Extensions, &out.Extensions, 0); err != nil {
0000000000000000000000000000000000000000;;					return err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *[]NamedCluster, out *map[string]*api.Cluster, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				for _, curr := range *in {
0000000000000000000000000000000000000000;;					newCluster := api.NewCluster()
0000000000000000000000000000000000000000;;					if err := s.Convert(&curr.Cluster, newCluster, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					(*out)[curr.Name] = newCluster
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *map[string]*api.Cluster, out *[]NamedCluster, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				allKeys := make([]string, 0, len(*in))
0000000000000000000000000000000000000000;;				for key := range *in {
0000000000000000000000000000000000000000;;					allKeys = append(allKeys, key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Strings(allKeys)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, key := range allKeys {
0000000000000000000000000000000000000000;;					newCluster := (*in)[key]
0000000000000000000000000000000000000000;;					oldCluster := &Cluster{}
0000000000000000000000000000000000000000;;					if err := s.Convert(newCluster, oldCluster, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					namedCluster := NamedCluster{key, *oldCluster}
0000000000000000000000000000000000000000;;					*out = append(*out, namedCluster)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *[]NamedAuthInfo, out *map[string]*api.AuthInfo, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				for _, curr := range *in {
0000000000000000000000000000000000000000;;					newAuthInfo := api.NewAuthInfo()
0000000000000000000000000000000000000000;;					if err := s.Convert(&curr.AuthInfo, newAuthInfo, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					(*out)[curr.Name] = newAuthInfo
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *map[string]*api.AuthInfo, out *[]NamedAuthInfo, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				allKeys := make([]string, 0, len(*in))
0000000000000000000000000000000000000000;;				for key := range *in {
0000000000000000000000000000000000000000;;					allKeys = append(allKeys, key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Strings(allKeys)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, key := range allKeys {
0000000000000000000000000000000000000000;;					newAuthInfo := (*in)[key]
0000000000000000000000000000000000000000;;					oldAuthInfo := &AuthInfo{}
0000000000000000000000000000000000000000;;					if err := s.Convert(newAuthInfo, oldAuthInfo, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					namedAuthInfo := NamedAuthInfo{key, *oldAuthInfo}
0000000000000000000000000000000000000000;;					*out = append(*out, namedAuthInfo)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *[]NamedContext, out *map[string]*api.Context, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				for _, curr := range *in {
0000000000000000000000000000000000000000;;					newContext := api.NewContext()
0000000000000000000000000000000000000000;;					if err := s.Convert(&curr.Context, newContext, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					(*out)[curr.Name] = newContext
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *map[string]*api.Context, out *[]NamedContext, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				allKeys := make([]string, 0, len(*in))
0000000000000000000000000000000000000000;;				for key := range *in {
0000000000000000000000000000000000000000;;					allKeys = append(allKeys, key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Strings(allKeys)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, key := range allKeys {
0000000000000000000000000000000000000000;;					newContext := (*in)[key]
0000000000000000000000000000000000000000;;					oldContext := &Context{}
0000000000000000000000000000000000000000;;					if err := s.Convert(newContext, oldContext, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					namedContext := NamedContext{key, *oldContext}
0000000000000000000000000000000000000000;;					*out = append(*out, namedContext)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *[]NamedExtension, out *map[string]runtime.Object, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				for _, curr := range *in {
0000000000000000000000000000000000000000;;					var newExtension runtime.Object
0000000000000000000000000000000000000000;;					if err := s.Convert(&curr.Extension, &newExtension, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					(*out)[curr.Name] = newExtension
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			func(in *map[string]runtime.Object, out *[]NamedExtension, s conversion.Scope) error {
0000000000000000000000000000000000000000;;				allKeys := make([]string, 0, len(*in))
0000000000000000000000000000000000000000;;				for key := range *in {
0000000000000000000000000000000000000000;;					allKeys = append(allKeys, key)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				sort.Strings(allKeys)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				for _, key := range allKeys {
0000000000000000000000000000000000000000;;					newExtension := (*in)[key]
0000000000000000000000000000000000000000;;					oldExtension := &runtime.RawExtension{}
0000000000000000000000000000000000000000;;					if err := s.Convert(newExtension, oldExtension, 0); err != nil {
0000000000000000000000000000000000000000;;						return err
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					namedExtension := NamedExtension{key, *oldExtension}
0000000000000000000000000000000000000000;;					*out = append(*out, namedExtension)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
