0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/validation_test.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/validation_test.go][staging/src/k8s.io/client-go/tools/clientcmd/validation_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package clientcmd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		utilerrors "k8s.io/apimachinery/pkg/util/errors"
0000000000000000000000000000000000000000;;		clientcmdapi "k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestConfirmUsableBadInfoButOkConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["missing ca"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server:               "anything",
0000000000000000000000000000000000000000;;			CertificateAuthority: "missing",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["error"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Username: "anything",
0000000000000000000000000000000000000000;;			Token:    "here",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["dirty"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "missing ca",
0000000000000000000000000000000000000000;;			AuthInfo: "error",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "anything",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token: "here",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["clean"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "clean",
0000000000000000000000000000000000000000;;			AuthInfo: "clean",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		badValidation := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"unable to read certificate-authority"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		okTest := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		okTest.testConfirmUsable("clean", t)
0000000000000000000000000000000000000000;;		badValidation.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestConfirmUsableBadInfoConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["missing ca"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server:               "anything",
0000000000000000000000000000000000000000;;			CertificateAuthority: "missing",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.AuthInfos["error"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Username: "anything",
0000000000000000000000000000000000000000;;			Token:    "here",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Contexts["first"] = &clientcmdapi.Context{
0000000000000000000000000000000000000000;;			Cluster:  "missing ca",
0000000000000000000000000000000000000000;;			AuthInfo: "error",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"unable to read certificate-authority"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testConfirmUsable("first", t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestConfirmUsableEmptyConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"invalid configuration: no configuration has been provided"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testConfirmUsable("", t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestConfirmUsableMissingConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"invalid configuration: no configuration has been provided"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testConfirmUsable("not-here", t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateEmptyConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"invalid configuration: no configuration has been provided"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateMissingCurrentContextConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.CurrentContext = "anything"
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"context was not found for specified "},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestIsContextNotFound(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.CurrentContext = "anything"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := Validate(*config)
0000000000000000000000000000000000000000;;		if !IsContextNotFound(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected context not found, but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsConfigurationInvalid(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected configuration invalid, but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsEmptyConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := Validate(*config)
0000000000000000000000000000000000000000;;		if !IsEmptyConfig(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected context not found, but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsConfigurationInvalid(err) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected configuration invalid, but got %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIsConfigurationInvalid(t *testing.T) {
0000000000000000000000000000000000000000;;		if newErrConfigurationInvalid([]error{}) != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newErrConfigurationInvalid([]error{ErrNoContext}) == ErrNoContext {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if newErrConfigurationInvalid([]error{ErrNoContext, ErrNoContext}) == nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !IsConfigurationInvalid(newErrConfigurationInvalid([]error{ErrNoContext, ErrNoContext})) {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateMissingReferencesConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.CurrentContext = "anything"
0000000000000000000000000000000000000000;;		config.Contexts["anything"] = &clientcmdapi.Context{Cluster: "missing", AuthInfo: "missing"}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"user \"missing\" was not found for context \"anything\"", "cluster \"missing\" was not found for context \"anything\""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testContext("anything", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateEmptyContext(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.CurrentContext = "anything"
0000000000000000000000000000000000000000;;		config.Contexts["anything"] = &clientcmdapi.Context{}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"user was not specified for context \"anything\"", "cluster was not specified for context \"anything\""},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testContext("anything", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEmptyClusterInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["empty"] = clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"cluster has no server defined"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testCluster("empty", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateClusterInfoErrEmptyCluster(t *testing.T) {
0000000000000000000000000000000000000000;;		cluster := clientcmdapi.NewCluster()
0000000000000000000000000000000000000000;;		errs := validateClusterInfo("", *cluster)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(errs) != 1 {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected errors: %v", errs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if errs[0] != ErrEmptyCluster {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", errs[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateMissingCAFileClusterInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["missing ca"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server:               "anything",
0000000000000000000000000000000000000000;;			CertificateAuthority: "missing",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"unable to read certificate-authority"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testCluster("missing ca", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCleanClusterInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server: "anything",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testCluster("clean", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCleanWithCAClusterInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		tempFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(tempFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.Clusters["clean"] = &clientcmdapi.Cluster{
0000000000000000000000000000000000000000;;			Server:               "anything",
0000000000000000000000000000000000000000;;			CertificateAuthority: tempFile.Name(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testCluster("clean", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateEmptyAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["error"] = &clientcmdapi.AuthInfo{}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("error", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCertFilesNotFoundAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["error"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientCertificate: "missing",
0000000000000000000000000000000000000000;;			ClientKey:         "missing",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"unable to read client-cert", "unable to read client-key"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("error", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCertDataOverridesFiles(t *testing.T) {
0000000000000000000000000000000000000000;;		tempFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(tempFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientCertificate:     tempFile.Name(),
0000000000000000000000000000000000000000;;			ClientCertificateData: []byte("certdata"),
0000000000000000000000000000000000000000;;			ClientKey:             tempFile.Name(),
0000000000000000000000000000000000000000;;			ClientKeyData:         []byte("keydata"),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"client-cert-data and client-cert are both specified", "client-key-data and client-key are both specified"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("clean", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCleanCertFilesAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		tempFile, _ := ioutil.TempFile("", "")
0000000000000000000000000000000000000000;;		defer os.Remove(tempFile.Name())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			ClientCertificate: tempFile.Name(),
0000000000000000000000000000000000000000;;			ClientKey:         tempFile.Name(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("clean", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func TestValidateCleanTokenAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["clean"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token: "any-value",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("clean", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestValidateMultipleMethodsAuthInfo(t *testing.T) {
0000000000000000000000000000000000000000;;		config := clientcmdapi.NewConfig()
0000000000000000000000000000000000000000;;		config.AuthInfos["error"] = &clientcmdapi.AuthInfo{
0000000000000000000000000000000000000000;;			Token:    "token",
0000000000000000000000000000000000000000;;			Username: "username",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		test := configValidationTest{
0000000000000000000000000000000000000000;;			config:                 config,
0000000000000000000000000000000000000000;;			expectedErrorSubstring: []string{"more than one authentication method", "token", "basicAuth"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		test.testAuthInfo("error", t)
0000000000000000000000000000000000000000;;		test.testConfig(t)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type configValidationTest struct {
0000000000000000000000000000000000000000;;		config                 *clientcmdapi.Config
0000000000000000000000000000000000000000;;		expectedErrorSubstring []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c configValidationTest) testContext(contextName string, t *testing.T) {
0000000000000000000000000000000000000000;;		errs := validateContext(contextName, *c.config.Contexts[contextName], *c.config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.expectedErrorSubstring) != 0 {
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error containing: %v", c.expectedErrorSubstring)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, curr := range c.expectedErrorSubstring {
0000000000000000000000000000000000000000;;				if len(errs) != 0 && !strings.Contains(utilerrors.NewAggregate(errs).Error(), curr) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected error containing: %v, but got %v", c.expectedErrorSubstring, utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (c configValidationTest) testConfirmUsable(contextName string, t *testing.T) {
0000000000000000000000000000000000000000;;		err := ConfirmUsable(*c.config, contextName)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.expectedErrorSubstring) != 0 {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error containing: %v", c.expectedErrorSubstring)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, curr := range c.expectedErrorSubstring {
0000000000000000000000000000000000000000;;					if err != nil && !strings.Contains(err.Error(), curr) {
0000000000000000000000000000000000000000;;						t.Errorf("Expected error containing: %v, but got %v", c.expectedErrorSubstring, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (c configValidationTest) testConfig(t *testing.T) {
0000000000000000000000000000000000000000;;		err := Validate(*c.config)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.expectedErrorSubstring) != 0 {
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error containing: %v", c.expectedErrorSubstring)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				for _, curr := range c.expectedErrorSubstring {
0000000000000000000000000000000000000000;;					if err != nil && !strings.Contains(err.Error(), curr) {
0000000000000000000000000000000000000000;;						t.Errorf("Expected error containing: %v, but got %v", c.expectedErrorSubstring, err)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !IsConfigurationInvalid(err) {
0000000000000000000000000000000000000000;;					t.Errorf("all errors should be configuration invalid: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (c configValidationTest) testCluster(clusterName string, t *testing.T) {
0000000000000000000000000000000000000000;;		errs := validateClusterInfo(clusterName, *c.config.Clusters[clusterName])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.expectedErrorSubstring) != 0 {
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error containing: %v", c.expectedErrorSubstring)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, curr := range c.expectedErrorSubstring {
0000000000000000000000000000000000000000;;				if len(errs) != 0 && !strings.Contains(utilerrors.NewAggregate(errs).Error(), curr) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected error containing: %v, but got %v", c.expectedErrorSubstring, utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c configValidationTest) testAuthInfo(authInfoName string, t *testing.T) {
0000000000000000000000000000000000000000;;		errs := validateAuthInfo(authInfoName, *c.config.AuthInfos[authInfoName])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(c.expectedErrorSubstring) != 0 {
0000000000000000000000000000000000000000;;			if len(errs) == 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Expected error containing: %v", c.expectedErrorSubstring)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, curr := range c.expectedErrorSubstring {
0000000000000000000000000000000000000000;;				if len(errs) != 0 && !strings.Contains(utilerrors.NewAggregate(errs).Error(), curr) {
0000000000000000000000000000000000000000;;					t.Errorf("Expected error containing: %v, but got %v", c.expectedErrorSubstring, utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(errs) != 0 {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", utilerrors.NewAggregate(errs))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
