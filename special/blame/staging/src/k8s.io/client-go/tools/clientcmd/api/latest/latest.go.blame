0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/latest/latest.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/latest/latest.go][staging/src/k8s.io/client-go/tools/clientcmd/api/latest/latest.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package latest
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/schema"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/json"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime/serializer/versioning"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd/api"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/clientcmd/api/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Version is the string that represents the current external default version.
0000000000000000000000000000000000000000;;	const Version = "v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ExternalVersion = schema.GroupVersion{Group: "", Version: "v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OldestVersion is the string that represents the oldest server version supported,
0000000000000000000000000000000000000000;;	// for client code that wants to hardcode the lowest common denominator.
0000000000000000000000000000000000000000;;	const OldestVersion = "v1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Versions is the list of versions that are recognized in code. The order provided
0000000000000000000000000000000000000000;;	// may be assumed to be least feature rich to most feature rich, and clients may
0000000000000000000000000000000000000000;;	// choose to prefer the latter items in the list over the former items when presented
0000000000000000000000000000000000000000;;	// with a set of versions to choose.
0000000000000000000000000000000000000000;;	var Versions = []string{"v1"}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		Codec  runtime.Codec
0000000000000000000000000000000000000000;;		Scheme *runtime.Scheme
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		Scheme = runtime.NewScheme()
0000000000000000000000000000000000000000;;		if err := api.AddToScheme(Scheme); err != nil {
0000000000000000000000000000000000000000;;			// Programmer error, detect immediately
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := v1.AddToScheme(Scheme); err != nil {
0000000000000000000000000000000000000000;;			// Programmer error, detect immediately
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		yamlSerializer := json.NewYAMLSerializer(json.DefaultMetaFactory, Scheme, Scheme)
0000000000000000000000000000000000000000;;		Codec = versioning.NewDefaultingCodecForScheme(
0000000000000000000000000000000000000000;;			Scheme,
0000000000000000000000000000000000000000;;			yamlSerializer,
0000000000000000000000000000000000000000;;			yamlSerializer,
0000000000000000000000000000000000000000;;			schema.GroupVersion{Version: Version},
0000000000000000000000000000000000000000;;			runtime.InternalGroupVersioner,
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	}
