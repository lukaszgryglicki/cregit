0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/types_test.go[staging/src/k8s.io/client-go/1.4/tools/clientcmd/api/types_test.go][staging/src/k8s.io/client-go/tools/clientcmd/api/types_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package api
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_emptyConfig() {
0000000000000000000000000000000000000000;;		defaultConfig := NewConfig()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output, err := yaml.Marshal(defaultConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%v", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// clusters: {}
0000000000000000000000000000000000000000;;		// contexts: {}
0000000000000000000000000000000000000000;;		// current-context: ""
0000000000000000000000000000000000000000;;		// preferences: {}
0000000000000000000000000000000000000000;;		// users: {}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Example_ofOptionsConfig() {
0000000000000000000000000000000000000000;;		defaultConfig := NewConfig()
0000000000000000000000000000000000000000;;		defaultConfig.Preferences.Colors = true
0000000000000000000000000000000000000000;;		defaultConfig.Clusters["alfa"] = &Cluster{
0000000000000000000000000000000000000000;;			Server:                "https://alfa.org:8080",
0000000000000000000000000000000000000000;;			InsecureSkipTLSVerify: true,
0000000000000000000000000000000000000000;;			CertificateAuthority:  "path/to/my/cert-ca-filename",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.Clusters["bravo"] = &Cluster{
0000000000000000000000000000000000000000;;			Server:                "https://bravo.org:8080",
0000000000000000000000000000000000000000;;			InsecureSkipTLSVerify: false,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.AuthInfos["white-mage-via-cert"] = &AuthInfo{
0000000000000000000000000000000000000000;;			ClientCertificate: "path/to/my/client-cert-filename",
0000000000000000000000000000000000000000;;			ClientKey:         "path/to/my/client-key-filename",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.AuthInfos["red-mage-via-token"] = &AuthInfo{
0000000000000000000000000000000000000000;;			Token: "my-secret-token",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.AuthInfos["black-mage-via-auth-provider"] = &AuthInfo{
0000000000000000000000000000000000000000;;			AuthProvider: &AuthProviderConfig{
0000000000000000000000000000000000000000;;				Name: "gcp",
0000000000000000000000000000000000000000;;				Config: map[string]string{
0000000000000000000000000000000000000000;;					"foo":   "bar",
0000000000000000000000000000000000000000;;					"token": "s3cr3t-t0k3n",
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.Contexts["bravo-as-black-mage"] = &Context{
0000000000000000000000000000000000000000;;			Cluster:   "bravo",
0000000000000000000000000000000000000000;;			AuthInfo:  "black-mage-via-auth-provider",
0000000000000000000000000000000000000000;;			Namespace: "yankee",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.Contexts["alfa-as-black-mage"] = &Context{
0000000000000000000000000000000000000000;;			Cluster:   "alfa",
0000000000000000000000000000000000000000;;			AuthInfo:  "black-mage-via-auth-provider",
0000000000000000000000000000000000000000;;			Namespace: "zulu",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.Contexts["alfa-as-white-mage"] = &Context{
0000000000000000000000000000000000000000;;			Cluster:  "alfa",
0000000000000000000000000000000000000000;;			AuthInfo: "white-mage-via-cert",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defaultConfig.CurrentContext = "alfa-as-white-mage"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		output, err := yaml.Marshal(defaultConfig)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%v", string(output))
0000000000000000000000000000000000000000;;		// Output:
0000000000000000000000000000000000000000;;		// clusters:
0000000000000000000000000000000000000000;;		//   alfa:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     certificate-authority: path/to/my/cert-ca-filename
0000000000000000000000000000000000000000;;		//     insecure-skip-tls-verify: true
0000000000000000000000000000000000000000;;		//     server: https://alfa.org:8080
0000000000000000000000000000000000000000;;		//   bravo:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     server: https://bravo.org:8080
0000000000000000000000000000000000000000;;		// contexts:
0000000000000000000000000000000000000000;;		//   alfa-as-black-mage:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     cluster: alfa
0000000000000000000000000000000000000000;;		//     namespace: zulu
0000000000000000000000000000000000000000;;		//     user: black-mage-via-auth-provider
0000000000000000000000000000000000000000;;		//   alfa-as-white-mage:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     cluster: alfa
0000000000000000000000000000000000000000;;		//     user: white-mage-via-cert
0000000000000000000000000000000000000000;;		//   bravo-as-black-mage:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     cluster: bravo
0000000000000000000000000000000000000000;;		//     namespace: yankee
0000000000000000000000000000000000000000;;		//     user: black-mage-via-auth-provider
0000000000000000000000000000000000000000;;		// current-context: alfa-as-white-mage
0000000000000000000000000000000000000000;;		// preferences:
0000000000000000000000000000000000000000;;		//   colors: true
0000000000000000000000000000000000000000;;		// users:
0000000000000000000000000000000000000000;;		//   black-mage-via-auth-provider:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     auth-provider:
0000000000000000000000000000000000000000;;		//       config:
0000000000000000000000000000000000000000;;		//         foo: bar
0000000000000000000000000000000000000000;;		//         token: s3cr3t-t0k3n
0000000000000000000000000000000000000000;;		//       name: gcp
0000000000000000000000000000000000000000;;		//   red-mage-via-token:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     token: my-secret-token
0000000000000000000000000000000000000000;;		//   white-mage-via-cert:
0000000000000000000000000000000000000000;;		//     LocationOfOrigin: ""
0000000000000000000000000000000000000000;;		//     client-certificate: path/to/my/client-cert-filename
0000000000000000000000000000000000000000;;		//     client-key: path/to/my/client-key-filename
0000000000000000000000000000000000000000;;	}
