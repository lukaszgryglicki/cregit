0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/index_test.go[staging/src/k8s.io/client-go/1.4/tools/cache/index_test.go][staging/src/k8s.io/client-go/tools/cache/index_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testIndexFunc(obj interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		pod := obj.(*v1.Pod)
0000000000000000000000000000000000000000;;		return []string{pod.Labels["foo"]}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestGetIndexFuncValues(t *testing.T) {
0000000000000000000000000000000000000000;;		index := NewIndexer(MetaNamespaceKeyFunc, Indexers{"testmodes": testIndexFunc})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod1 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "one", Labels: map[string]string{"foo": "bar"}}}
0000000000000000000000000000000000000000;;		pod2 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "two", Labels: map[string]string{"foo": "bar"}}}
0000000000000000000000000000000000000000;;		pod3 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "tre", Labels: map[string]string{"foo": "biz"}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		index.Add(pod1)
0000000000000000000000000000000000000000;;		index.Add(pod2)
0000000000000000000000000000000000000000;;		index.Add(pod3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keys := index.ListIndexFuncValues("testmodes")
0000000000000000000000000000000000000000;;		if len(keys) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 keys but got %v", len(keys))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, key := range keys {
0000000000000000000000000000000000000000;;			if key != "bar" && key != "biz" {
0000000000000000000000000000000000000000;;				t.Errorf("Expected only 'bar' or 'biz' but got %s", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testUsersIndexFunc(obj interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		pod := obj.(*v1.Pod)
0000000000000000000000000000000000000000;;		usersString := pod.Annotations["users"]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.Split(usersString, ","), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMultiIndexKeys(t *testing.T) {
0000000000000000000000000000000000000000;;		index := NewIndexer(MetaNamespaceKeyFunc, Indexers{"byUser": testUsersIndexFunc})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pod1 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "one", Annotations: map[string]string{"users": "ernie,bert"}}}
0000000000000000000000000000000000000000;;		pod2 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "two", Annotations: map[string]string{"users": "bert,oscar"}}}
0000000000000000000000000000000000000000;;		pod3 := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: "tre", Annotations: map[string]string{"users": "ernie,elmo"}}}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		index.Add(pod1)
0000000000000000000000000000000000000000;;		index.Add(pod2)
0000000000000000000000000000000000000000;;		index.Add(pod3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		erniePods, err := index.ByIndex("byUser", "ernie")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(erniePods) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 pods but got %v", len(erniePods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bertPods, err := index.ByIndex("byUser", "bert")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(bertPods) != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 pods but got %v", len(bertPods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		oscarPods, err := index.ByIndex("byUser", "oscar")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(oscarPods) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 pods but got %v", len(erniePods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ernieAndBertKeys, err := index.Index("byUser", pod1)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(ernieAndBertKeys) != 3 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 3 pods but got %v", len(ernieAndBertKeys))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		index.Delete(pod3)
0000000000000000000000000000000000000000;;		erniePods, err = index.ByIndex("byUser", "ernie")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(erniePods) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 pods but got %v", len(erniePods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		elmoPods, err := index.ByIndex("byUser", "elmo")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(elmoPods) != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 0 pods but got %v", len(elmoPods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		obj, err := scheme.Scheme.DeepCopy(pod2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		copyOfPod2 := obj.(*v1.Pod)
0000000000000000000000000000000000000000;;		copyOfPod2.Annotations["users"] = "oscar"
0000000000000000000000000000000000000000;;		index.Update(copyOfPod2)
0000000000000000000000000000000000000000;;		bertPods, err = index.ByIndex("byUser", "bert")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(bertPods) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 pods but got %v", len(bertPods))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
