0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/store_test.go[staging/src/k8s.io/client-go/1.4/tools/cache/store_test.go][staging/src/k8s.io/client-go/tools/cache/store_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test public interface
0000000000000000000000000000000000000000;;	func doTestStore(t *testing.T, store Store) {
0000000000000000000000000000000000000000;;		mkObj := func(id string, val string) testStoreObject {
0000000000000000000000000000000000000000;;			return testStoreObject{id: id, val: val}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		store.Add(mkObj("foo", "bar"))
0000000000000000000000000000000000000000;;		if item, ok, _ := store.Get(mkObj("foo", "")); !ok {
0000000000000000000000000000000000000000;;			t.Errorf("didn't find inserted item")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if e, a := "bar", item.(testStoreObject).val; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		store.Update(mkObj("foo", "baz"))
0000000000000000000000000000000000000000;;		if item, ok, _ := store.Get(mkObj("foo", "")); !ok {
0000000000000000000000000000000000000000;;			t.Errorf("didn't find inserted item")
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if e, a := "baz", item.(testStoreObject).val; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		store.Delete(mkObj("foo", ""))
0000000000000000000000000000000000000000;;		if _, ok, _ := store.Get(mkObj("foo", "")); ok {
0000000000000000000000000000000000000000;;			t.Errorf("found deleted item??")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test List.
0000000000000000000000000000000000000000;;		store.Add(mkObj("a", "b"))
0000000000000000000000000000000000000000;;		store.Add(mkObj("c", "d"))
0000000000000000000000000000000000000000;;		store.Add(mkObj("e", "e"))
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			found := sets.String{}
0000000000000000000000000000000000000000;;			for _, item := range store.List() {
0000000000000000000000000000000000000000;;				found.Insert(item.(testStoreObject).val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !found.HasAll("b", "d", "e") {
0000000000000000000000000000000000000000;;				t.Errorf("missing items, found: %v", found)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(found) != 3 {
0000000000000000000000000000000000000000;;				t.Errorf("extra items")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Replace.
0000000000000000000000000000000000000000;;		store.Replace([]interface{}{
0000000000000000000000000000000000000000;;			mkObj("foo", "foo"),
0000000000000000000000000000000000000000;;			mkObj("bar", "bar"),
0000000000000000000000000000000000000000;;		}, "0")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			found := sets.String{}
0000000000000000000000000000000000000000;;			for _, item := range store.List() {
0000000000000000000000000000000000000000;;				found.Insert(item.(testStoreObject).val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !found.HasAll("foo", "bar") {
0000000000000000000000000000000000000000;;				t.Errorf("missing items")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(found) != 2 {
0000000000000000000000000000000000000000;;				t.Errorf("extra items")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Test public interface
0000000000000000000000000000000000000000;;	func doTestIndex(t *testing.T, indexer Indexer) {
0000000000000000000000000000000000000000;;		mkObj := func(id string, val string) testStoreObject {
0000000000000000000000000000000000000000;;			return testStoreObject{id: id, val: val}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Test Index
0000000000000000000000000000000000000000;;		expected := map[string]sets.String{}
0000000000000000000000000000000000000000;;		expected["b"] = sets.NewString("a", "c")
0000000000000000000000000000000000000000;;		expected["f"] = sets.NewString("e")
0000000000000000000000000000000000000000;;		expected["h"] = sets.NewString("g")
0000000000000000000000000000000000000000;;		indexer.Add(mkObj("a", "b"))
0000000000000000000000000000000000000000;;		indexer.Add(mkObj("c", "b"))
0000000000000000000000000000000000000000;;		indexer.Add(mkObj("e", "f"))
0000000000000000000000000000000000000000;;		indexer.Add(mkObj("g", "h"))
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			for k, v := range expected {
0000000000000000000000000000000000000000;;				found := sets.String{}
0000000000000000000000000000000000000000;;				indexResults, err := indexer.Index("by_val", mkObj("", k))
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for _, item := range indexResults {
0000000000000000000000000000000000000000;;					found.Insert(item.(testStoreObject).id)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				items := v.List()
0000000000000000000000000000000000000000;;				if !found.HasAll(items...) {
0000000000000000000000000000000000000000;;					t.Errorf("missing items, index %s, expected %v but found %v", k, items, found.List())
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testStoreKeyFunc(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;		return obj.(testStoreObject).id, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testStoreIndexFunc(obj interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		return []string{obj.(testStoreObject).val}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testStoreIndexers() Indexers {
0000000000000000000000000000000000000000;;		indexers := Indexers{}
0000000000000000000000000000000000000000;;		indexers["by_val"] = testStoreIndexFunc
0000000000000000000000000000000000000000;;		return indexers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testStoreObject struct {
0000000000000000000000000000000000000000;;		id  string
0000000000000000000000000000000000000000;;		val string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCache(t *testing.T) {
0000000000000000000000000000000000000000;;		doTestStore(t, NewStore(testStoreKeyFunc))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFIFOCache(t *testing.T) {
0000000000000000000000000000000000000000;;		doTestStore(t, NewFIFO(testStoreKeyFunc))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUndeltaStore(t *testing.T) {
0000000000000000000000000000000000000000;;		nop := func([]interface{}) {}
0000000000000000000000000000000000000000;;		doTestStore(t, NewUndeltaStore(nop, testStoreKeyFunc))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIndex(t *testing.T) {
0000000000000000000000000000000000000000;;		doTestIndex(t, NewIndexer(testStoreKeyFunc, testStoreIndexers()))
0000000000000000000000000000000000000000;;	}
