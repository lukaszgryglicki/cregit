0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c64579dfcb0a7da9607fc83cb5808ce2d6ab607c;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/diff"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/kubernetes/scheme"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var mutationDetectionEnabled = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		mutationDetectionEnabled, _ = strconv.ParseBool(os.Getenv("KUBE_CACHE_MUTATION_DETECTOR"))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CacheMutationDetector interface {
0000000000000000000000000000000000000000;;		AddObject(obj interface{})
0000000000000000000000000000000000000000;;		Run(stopCh <-chan struct{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCacheMutationDetector(name string) CacheMutationDetector {
0000000000000000000000000000000000000000;;		if !mutationDetectionEnabled {
0000000000000000000000000000000000000000;;			return dummyMutationDetector{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &defaultCacheMutationDetector{name: name, period: 1 * time.Second}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type dummyMutationDetector struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (dummyMutationDetector) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (dummyMutationDetector) AddObject(obj interface{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// defaultCacheMutationDetector gives a way to detect if a cached object has been mutated
0000000000000000000000000000000000000000;;	// It has a list of cached objects and their copies.  I haven't thought of a way
0000000000000000000000000000000000000000;;	// to see WHO is mutating it, just that it's getting mutated.
0000000000000000000000000000000000000000;;	type defaultCacheMutationDetector struct {
0000000000000000000000000000000000000000;;		name   string
0000000000000000000000000000000000000000;;		period time.Duration
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		lock       sync.Mutex
0000000000000000000000000000000000000000;;		cachedObjs []cacheObj
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// failureFunc is injectable for unit testing.  If you don't have it, the process will panic.
0000000000000000000000000000000000000000;;		// This panic is intentional, since turning on this detection indicates you want a strong
0000000000000000000000000000000000000000;;		// failure signal.  This failure is effectively a p0 bug and you can't trust process results
0000000000000000000000000000000000000000;;		// after a mutation anyway.
0000000000000000000000000000000000000000;;		failureFunc func(message string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cacheObj holds the actual object and a copy
0000000000000000000000000000000000000000;;	type cacheObj struct {
0000000000000000000000000000000000000000;;		cached interface{}
0000000000000000000000000000000000000000;;		copied interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *defaultCacheMutationDetector) Run(stopCh <-chan struct{}) {
0000000000000000000000000000000000000000;;		// we DON'T want protection from panics.  If we're running this code, we want to die
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			for {
0000000000000000000000000000000000000000;;				d.CompareObjects()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				select {
0000000000000000000000000000000000000000;;				case <-stopCh:
0000000000000000000000000000000000000000;;					return
0000000000000000000000000000000000000000;;				case <-time.After(d.period):
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddObject makes a deep copy of the object for later comparison.  It only works on runtime.Object
0000000000000000000000000000000000000000;;	// but that covers the vast majority of our cached objects
0000000000000000000000000000000000000000;;	func (d *defaultCacheMutationDetector) AddObject(obj interface{}) {
0000000000000000000000000000000000000000;;		if _, ok := obj.(DeletedFinalStateUnknown); ok {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, ok := obj.(runtime.Object); !ok {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		copiedObj, err := scheme.Scheme.Copy(obj.(runtime.Object))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.lock.Lock()
0000000000000000000000000000000000000000;;		defer d.lock.Unlock()
0000000000000000000000000000000000000000;;		d.cachedObjs = append(d.cachedObjs, cacheObj{cached: obj, copied: copiedObj})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *defaultCacheMutationDetector) CompareObjects() {
0000000000000000000000000000000000000000;;		d.lock.Lock()
0000000000000000000000000000000000000000;;		defer d.lock.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		altered := false
0000000000000000000000000000000000000000;;		for i, obj := range d.cachedObjs {
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(obj.cached, obj.copied) {
0000000000000000000000000000000000000000;;				fmt.Printf("CACHE %s[%d] ALTERED!\n%v\n", d.name, i, diff.ObjectDiff(obj.cached, obj.copied))
0000000000000000000000000000000000000000;;				altered = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if altered {
0000000000000000000000000000000000000000;;			msg := fmt.Sprintf("cache %s modified", d.name)
0000000000000000000000000000000000000000;;			if d.failureFunc != nil {
0000000000000000000000000000000000000000;;				d.failureFunc(msg)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			panic(msg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
