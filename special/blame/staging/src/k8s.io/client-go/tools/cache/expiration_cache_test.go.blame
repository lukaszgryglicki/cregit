0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/expiration_cache_test.go[staging/src/k8s.io/client-go/1.4/tools/cache/expiration_cache_test.go][staging/src/k8s.io/client-go/tools/cache/expiration_cache_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTTLExpirationBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		testObj := testStoreObject{id: "foo", val: "bar"}
0000000000000000000000000000000000000000;;		deleteChan := make(chan string, 1)
0000000000000000000000000000000000000000;;		ttlStore := NewFakeExpirationStore(
0000000000000000000000000000000000000000;;			testStoreKeyFunc, deleteChan,
0000000000000000000000000000000000000000;;			&FakeExpirationPolicy{
0000000000000000000000000000000000000000;;				NeverExpire: sets.NewString(),
0000000000000000000000000000000000000000;;				RetrieveKeyFunc: func(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;					return obj.(*timestampedEntry).obj.(testStoreObject).id, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			clock.RealClock{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		err := ttlStore.Add(testObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to add obj %#v", testObj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, exists, err := ttlStore.Get(testObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to get from store, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if exists || item != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected item %#v", item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		key, _ := testStoreKeyFunc(testObj)
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case delKey := <-deleteChan:
0000000000000000000000000000000000000000;;			if delKey != key {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected delete for key %s", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected timeout waiting on delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		close(deleteChan)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReAddExpiredItem(t *testing.T) {
0000000000000000000000000000000000000000;;		deleteChan := make(chan string, 1)
0000000000000000000000000000000000000000;;		exp := &FakeExpirationPolicy{
0000000000000000000000000000000000000000;;			NeverExpire: sets.NewString(),
0000000000000000000000000000000000000000;;			RetrieveKeyFunc: func(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;				return obj.(*timestampedEntry).obj.(testStoreObject).id, nil
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ttlStore := NewFakeExpirationStore(
0000000000000000000000000000000000000000;;			testStoreKeyFunc, deleteChan, exp, clock.RealClock{})
0000000000000000000000000000000000000000;;		testKey := "foo"
0000000000000000000000000000000000000000;;		testObj := testStoreObject{id: testKey, val: "bar"}
0000000000000000000000000000000000000000;;		err := ttlStore.Add(testObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Unable to add obj %#v", testObj)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// This get will expire the item.
0000000000000000000000000000000000000000;;		item, exists, err := ttlStore.Get(testObj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to get from store, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if exists || item != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected item %#v", item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key, _ := testStoreKeyFunc(testObj)
0000000000000000000000000000000000000000;;		differentValue := "different_bar"
0000000000000000000000000000000000000000;;		err = ttlStore.Add(
0000000000000000000000000000000000000000;;			testStoreObject{id: testKey, val: differentValue})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to add second value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case delKey := <-deleteChan:
0000000000000000000000000000000000000000;;			if delKey != key {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected delete for key %s", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected timeout waiting on delete")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		exp.NeverExpire = sets.NewString(testKey)
0000000000000000000000000000000000000000;;		item, exists, err = ttlStore.GetByKey(testKey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Failed to get from store, %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists || item == nil || item.(testStoreObject).val != differentValue {
0000000000000000000000000000000000000000;;			t.Errorf("Got unexpected item %#v", item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		close(deleteChan)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTTLList(t *testing.T) {
0000000000000000000000000000000000000000;;		testObjs := []testStoreObject{
0000000000000000000000000000000000000000;;			{id: "foo", val: "bar"},
0000000000000000000000000000000000000000;;			{id: "foo1", val: "bar1"},
0000000000000000000000000000000000000000;;			{id: "foo2", val: "bar2"},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expireKeys := sets.NewString(testObjs[0].id, testObjs[2].id)
0000000000000000000000000000000000000000;;		deleteChan := make(chan string, len(testObjs))
0000000000000000000000000000000000000000;;		defer close(deleteChan)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ttlStore := NewFakeExpirationStore(
0000000000000000000000000000000000000000;;			testStoreKeyFunc, deleteChan,
0000000000000000000000000000000000000000;;			&FakeExpirationPolicy{
0000000000000000000000000000000000000000;;				NeverExpire: sets.NewString(testObjs[1].id),
0000000000000000000000000000000000000000;;				RetrieveKeyFunc: func(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;					return obj.(*timestampedEntry).obj.(testStoreObject).id, nil
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			clock.RealClock{},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;		for _, obj := range testObjs {
0000000000000000000000000000000000000000;;			err := ttlStore.Add(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unable to add obj %#v", obj)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		listObjs := ttlStore.List()
0000000000000000000000000000000000000000;;		if len(listObjs) != 1 || !reflect.DeepEqual(listObjs[0], testObjs[1]) {
0000000000000000000000000000000000000000;;			t.Errorf("List returned unexpected results %#v", listObjs)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Make sure all our deletes come through in an acceptable rate (1/100ms)
0000000000000000000000000000000000000000;;		for expireKeys.Len() != 0 {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case delKey := <-deleteChan:
0000000000000000000000000000000000000000;;				if !expireKeys.Has(delKey) {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected delete for key %s", delKey)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				expireKeys.Delete(delKey)
0000000000000000000000000000000000000000;;			case <-time.After(wait.ForeverTestTimeout):
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected timeout waiting on delete")
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestTTLPolicy(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeTime := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
0000000000000000000000000000000000000000;;		ttl := 30 * time.Second
0000000000000000000000000000000000000000;;		exactlyOnTTL := fakeTime.Add(-ttl)
0000000000000000000000000000000000000000;;		expiredTime := fakeTime.Add(-(ttl + 1))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		policy := TTLPolicy{ttl, clock.NewFakeClock(fakeTime)}
0000000000000000000000000000000000000000;;		fakeTimestampedEntry := &timestampedEntry{obj: struct{}{}, timestamp: exactlyOnTTL}
0000000000000000000000000000000000000000;;		if policy.IsExpired(fakeTimestampedEntry) {
0000000000000000000000000000000000000000;;			t.Errorf("TTL cache should not expire entries exactly on ttl")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeTimestampedEntry.timestamp = fakeTime
0000000000000000000000000000000000000000;;		if policy.IsExpired(fakeTimestampedEntry) {
0000000000000000000000000000000000000000;;			t.Errorf("TTL Cache should not expire entries before ttl")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fakeTimestampedEntry.timestamp = expiredTime
0000000000000000000000000000000000000000;;		if !policy.IsExpired(fakeTimestampedEntry) {
0000000000000000000000000000000000000000;;			t.Errorf("TTL Cache should expire entries older than ttl")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, ttl = range []time.Duration{0, -1} {
0000000000000000000000000000000000000000;;			policy.Ttl = ttl
0000000000000000000000000000000000000000;;			if policy.IsExpired(fakeTimestampedEntry) {
0000000000000000000000000000000000000000;;				t.Errorf("TTL policy should only expire entries when initialized with a ttl > 0")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
