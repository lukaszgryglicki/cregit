0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/index.go[staging/src/k8s.io/client-go/1.4/tools/cache/index.go][staging/src/k8s.io/client-go/tools/cache/index.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Indexer is a storage interface that lets you list objects using multiple indexing functions
0000000000000000000000000000000000000000;;	type Indexer interface {
0000000000000000000000000000000000000000;;		Store
0000000000000000000000000000000000000000;;		// Retrieve list of objects that match on the named indexing function
0000000000000000000000000000000000000000;;		Index(indexName string, obj interface{}) ([]interface{}, error)
0000000000000000000000000000000000000000;;		// IndexKeys returns the set of keys that match on the named indexing function.
0000000000000000000000000000000000000000;;		IndexKeys(indexName, indexKey string) ([]string, error)
0000000000000000000000000000000000000000;;		// ListIndexFuncValues returns the list of generated values of an Index func
0000000000000000000000000000000000000000;;		ListIndexFuncValues(indexName string) []string
0000000000000000000000000000000000000000;;		// ByIndex lists object that match on the named indexing function with the exact key
0000000000000000000000000000000000000000;;		ByIndex(indexName, indexKey string) ([]interface{}, error)
0000000000000000000000000000000000000000;;		// GetIndexer return the indexers
0000000000000000000000000000000000000000;;		GetIndexers() Indexers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AddIndexers adds more indexers to this store.  If you call this after you already have data
0000000000000000000000000000000000000000;;		// in the store, the results are undefined.
0000000000000000000000000000000000000000;;		AddIndexers(newIndexers Indexers) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IndexFunc knows how to provide an indexed value for an object.
0000000000000000000000000000000000000000;;	type IndexFunc func(obj interface{}) ([]string, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IndexFuncToKeyFuncAdapter adapts an indexFunc to a keyFunc.  This is only useful if your index function returns
0000000000000000000000000000000000000000;;	// unique values for every object.  This is conversion can create errors when more than one key is found.  You
0000000000000000000000000000000000000000;;	// should prefer to make proper key and index functions.
0000000000000000000000000000000000000000;;	func IndexFuncToKeyFuncAdapter(indexFunc IndexFunc) KeyFunc {
0000000000000000000000000000000000000000;;		return func(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;			indexKeys, err := indexFunc(obj)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return "", err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(indexKeys) > 1 {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("too many keys: %v", indexKeys)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(indexKeys) == 0 {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("unexpected empty indexKeys")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return indexKeys[0], nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		NamespaceIndex string = "namespace"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetaNamespaceIndexFunc is a default index function that indexes based on an object's namespace
0000000000000000000000000000000000000000;;	func MetaNamespaceIndexFunc(obj interface{}) ([]string, error) {
0000000000000000000000000000000000000000;;		meta, err := meta.Accessor(obj)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []string{""}, fmt.Errorf("object has no meta: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return []string{meta.GetNamespace()}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Index maps the indexed value to a set of keys in the store that match on that value
0000000000000000000000000000000000000000;;	type Index map[string]sets.String
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Indexers maps a name to a IndexFunc
0000000000000000000000000000000000000000;;	type Indexers map[string]IndexFunc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Indices maps a name to an Index
0000000000000000000000000000000000000000;;	type Indices map[string]Index
