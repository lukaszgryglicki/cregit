0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/listwatch.go[staging/src/k8s.io/client-go/1.4/tools/cache/listwatch.go][staging/src/k8s.io/client-go/tools/cache/listwatch.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/meta"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/fields"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		restclient "k8s.io/client-go/rest"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListerWatcher is any object that knows how to perform an initial list and start a watch on a resource.
0000000000000000000000000000000000000000;;	type ListerWatcher interface {
0000000000000000000000000000000000000000;;		// List should return a list type object; the Items field will be extracted, and the
0000000000000000000000000000000000000000;;		// ResourceVersion field will be used to start the watch in the right place.
0000000000000000000000000000000000000000;;		List(options metav1.ListOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;		// Watch should begin a watch at the specified version.
0000000000000000000000000000000000000000;;		Watch(options metav1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListFunc knows how to list resources
0000000000000000000000000000000000000000;;	type ListFunc func(options metav1.ListOptions) (runtime.Object, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WatchFunc knows how to watch resources
0000000000000000000000000000000000000000;;	type WatchFunc func(options metav1.ListOptions) (watch.Interface, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListWatch knows how to list and watch a set of apiserver resources.  It satisfies the ListerWatcher interface.
0000000000000000000000000000000000000000;;	// It is a convenience function for users of NewReflector, etc.
0000000000000000000000000000000000000000;;	// ListFunc and WatchFunc must not be nil
0000000000000000000000000000000000000000;;	type ListWatch struct {
0000000000000000000000000000000000000000;;		ListFunc  ListFunc
0000000000000000000000000000000000000000;;		WatchFunc WatchFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Getter interface knows how to access Get method from RESTClient.
0000000000000000000000000000000000000000;;	type Getter interface {
0000000000000000000000000000000000000000;;		Get() *restclient.Request
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewListWatchFromClient creates a new ListWatch from the specified client, resource, namespace and field selector.
0000000000000000000000000000000000000000;;	func NewListWatchFromClient(c Getter, resource string, namespace string, fieldSelector fields.Selector) *ListWatch {
0000000000000000000000000000000000000000;;		listFunc := func(options metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;			return c.Get().
0000000000000000000000000000000000000000;;				Namespace(namespace).
0000000000000000000000000000000000000000;;				Resource(resource).
0000000000000000000000000000000000000000;;				VersionedParams(&options, metav1.ParameterCodec).
0000000000000000000000000000000000000000;;				FieldsSelectorParam(fieldSelector).
0000000000000000000000000000000000000000;;				Do().
0000000000000000000000000000000000000000;;				Get()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		watchFunc := func(options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;			options.Watch = true
0000000000000000000000000000000000000000;;			return c.Get().
0000000000000000000000000000000000000000;;				Namespace(namespace).
0000000000000000000000000000000000000000;;				Resource(resource).
0000000000000000000000000000000000000000;;				VersionedParams(&options, metav1.ParameterCodec).
0000000000000000000000000000000000000000;;				FieldsSelectorParam(fieldSelector).
0000000000000000000000000000000000000000;;				Watch()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &ListWatch{ListFunc: listFunc, WatchFunc: watchFunc}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func timeoutFromListOptions(options metav1.ListOptions) time.Duration {
0000000000000000000000000000000000000000;;		if options.TimeoutSeconds != nil {
0000000000000000000000000000000000000000;;			return time.Duration(*options.TimeoutSeconds) * time.Second
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List a set of apiserver resources
0000000000000000000000000000000000000000;;	func (lw *ListWatch) List(options metav1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;		return lw.ListFunc(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watch a set of apiserver resources
0000000000000000000000000000000000000000;;	func (lw *ListWatch) Watch(options metav1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;		return lw.WatchFunc(options)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: check for watch expired error and retry watch from latest point?  Same issue exists for Until.
0000000000000000000000000000000000000000;;	func ListWatchUntil(timeout time.Duration, lw ListerWatcher, conditions ...watch.ConditionFunc) (*watch.Event, error) {
0000000000000000000000000000000000000000;;		if len(conditions) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, err := lw.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		initialItems, err := meta.ExtractList(list)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// use the initial items as simulated "adds"
0000000000000000000000000000000000000000;;		var lastEvent *watch.Event
0000000000000000000000000000000000000000;;		currIndex := 0
0000000000000000000000000000000000000000;;		passedConditions := 0
0000000000000000000000000000000000000000;;		for _, condition := range conditions {
0000000000000000000000000000000000000000;;			// check the next condition against the previous event and short circuit waiting for the next watch
0000000000000000000000000000000000000000;;			if lastEvent != nil {
0000000000000000000000000000000000000000;;				done, err := condition(*lastEvent)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return lastEvent, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if done {
0000000000000000000000000000000000000000;;					passedConditions = passedConditions + 1
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConditionSucceeded:
0000000000000000000000000000000000000000;;			for currIndex < len(initialItems) {
0000000000000000000000000000000000000000;;				lastEvent = &watch.Event{Type: watch.Added, Object: initialItems[currIndex]}
0000000000000000000000000000000000000000;;				currIndex++
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				done, err := condition(*lastEvent)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return lastEvent, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if done {
0000000000000000000000000000000000000000;;					passedConditions = passedConditions + 1
0000000000000000000000000000000000000000;;					break ConditionSucceeded
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if passedConditions == len(conditions) {
0000000000000000000000000000000000000000;;			return lastEvent, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		remainingConditions := conditions[passedConditions:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metaObj, err := meta.ListAccessor(list)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currResourceVersion := metaObj.GetResourceVersion()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		watchInterface, err := lw.Watch(metav1.ListOptions{ResourceVersion: currResourceVersion})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return watch.Until(timeout, watchInterface, remainingConditions...)
0000000000000000000000000000000000000000;;	}
