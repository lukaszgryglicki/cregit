0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/expiration_cache_fakes.go[staging/src/k8s.io/client-go/1.4/tools/cache/expiration_cache_fakes.go][staging/src/k8s.io/client-go/tools/cache/expiration_cache_fakes.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeThreadSafeMap struct {
0000000000000000000000000000000000000000;;		ThreadSafeStore
0000000000000000000000000000000000000000;;		deletedKeys chan<- string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *fakeThreadSafeMap) Delete(key string) {
0000000000000000000000000000000000000000;;		if c.deletedKeys != nil {
0000000000000000000000000000000000000000;;			c.ThreadSafeStore.Delete(key)
0000000000000000000000000000000000000000;;			c.deletedKeys <- key
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FakeExpirationPolicy struct {
0000000000000000000000000000000000000000;;		NeverExpire     sets.String
0000000000000000000000000000000000000000;;		RetrieveKeyFunc KeyFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *FakeExpirationPolicy) IsExpired(obj *timestampedEntry) bool {
0000000000000000000000000000000000000000;;		key, _ := p.RetrieveKeyFunc(obj)
0000000000000000000000000000000000000000;;		return !p.NeverExpire.Has(key)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFakeExpirationStore(keyFunc KeyFunc, deletedKeys chan<- string, expirationPolicy ExpirationPolicy, cacheClock clock.Clock) Store {
0000000000000000000000000000000000000000;;		cacheStorage := NewThreadSafeStore(Indexers{}, Indices{})
0000000000000000000000000000000000000000;;		return &ExpirationCache{
0000000000000000000000000000000000000000;;			cacheStorage:     &fakeThreadSafeMap{cacheStorage, deletedKeys},
0000000000000000000000000000000000000000;;			keyFunc:          keyFunc,
0000000000000000000000000000000000000000;;			clock:            cacheClock,
0000000000000000000000000000000000000000;;			expirationPolicy: expirationPolicy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
