0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/cache/undelta_store_test.go[staging/src/k8s.io/client-go/1.4/tools/cache/undelta_store_test.go][staging/src/k8s.io/client-go/tools/cache/undelta_store_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cache
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// store_test.go checks that UndeltaStore conforms to the Store interface
0000000000000000000000000000000000000000;;	// behavior.  This test just tests that it calls the push func in addition.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type testUndeltaObject struct {
0000000000000000000000000000000000000000;;		name string
0000000000000000000000000000000000000000;;		val  interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testUndeltaKeyFunc(obj interface{}) (string, error) {
0000000000000000000000000000000000000000;;		return obj.(testUndeltaObject).name, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		o1 interface{}   = t{1}
0000000000000000000000000000000000000000;;		o2 interface{}   = t{2}
0000000000000000000000000000000000000000;;		l1 []interface{} = []interface{}{t{1}}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestUpdateCallsPush(t *testing.T) {
0000000000000000000000000000000000000000;;		mkObj := func(name string, val interface{}) testUndeltaObject {
0000000000000000000000000000000000000000;;			return testUndeltaObject{name: name, val: val}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got []interface{}
0000000000000000000000000000000000000000;;		var callcount int = 0
0000000000000000000000000000000000000000;;		push := func(m []interface{}) {
0000000000000000000000000000000000000000;;			callcount++
0000000000000000000000000000000000000000;;			got = m
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := NewUndeltaStore(push, testUndeltaKeyFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u.Add(mkObj("a", 2))
0000000000000000000000000000000000000000;;		u.Update(mkObj("a", 1))
0000000000000000000000000000000000000000;;		if callcount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 calls, got %d", callcount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l := []interface{}{mkObj("a", 1)}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(l, got) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, Got %#v", l, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeleteCallsPush(t *testing.T) {
0000000000000000000000000000000000000000;;		mkObj := func(name string, val interface{}) testUndeltaObject {
0000000000000000000000000000000000000000;;			return testUndeltaObject{name: name, val: val}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got []interface{}
0000000000000000000000000000000000000000;;		var callcount int = 0
0000000000000000000000000000000000000000;;		push := func(m []interface{}) {
0000000000000000000000000000000000000000;;			callcount++
0000000000000000000000000000000000000000;;			got = m
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := NewUndeltaStore(push, testUndeltaKeyFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u.Add(mkObj("a", 2))
0000000000000000000000000000000000000000;;		u.Delete(mkObj("a", ""))
0000000000000000000000000000000000000000;;		if callcount != 2 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 2 calls, got %d", callcount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := []interface{}{}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(expected, got) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, Got %#v", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReadsDoNotCallPush(t *testing.T) {
0000000000000000000000000000000000000000;;		push := func(m []interface{}) {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected call to push!")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := NewUndeltaStore(push, testUndeltaKeyFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// These should not call push.
0000000000000000000000000000000000000000;;		_ = u.List()
0000000000000000000000000000000000000000;;		_, _, _ = u.Get(testUndeltaObject{"a", ""})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReplaceCallsPush(t *testing.T) {
0000000000000000000000000000000000000000;;		mkObj := func(name string, val interface{}) testUndeltaObject {
0000000000000000000000000000000000000000;;			return testUndeltaObject{name: name, val: val}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var got []interface{}
0000000000000000000000000000000000000000;;		var callcount int = 0
0000000000000000000000000000000000000000;;		push := func(m []interface{}) {
0000000000000000000000000000000000000000;;			callcount++
0000000000000000000000000000000000000000;;			got = m
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u := NewUndeltaStore(push, testUndeltaKeyFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		m := []interface{}{mkObj("a", 1)}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		u.Replace(m, "0")
0000000000000000000000000000000000000000;;		if callcount != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected 1 calls, got %d", callcount)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		expected := []interface{}{mkObj("a", 1)}
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(expected, got) {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %#v, Got %#v", expected, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
