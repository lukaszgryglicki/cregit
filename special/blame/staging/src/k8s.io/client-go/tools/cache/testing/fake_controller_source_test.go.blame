0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
56aa78cadcbf7dfd7120e260481bc357739a5448;staging/src/k8s.io/client-go/1.5/tools/cache/testing/fake_controller_source_test.go[staging/src/k8s.io/client-go/1.5/tools/cache/testing/fake_controller_source_test.go][staging/src/k8s.io/client-go/tools/cache/testing/fake_controller_source_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package framework
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ensure the watch delivers the requested and only the requested items.
0000000000000000000000000000000000000000;;	func consume(t *testing.T, w watch.Interface, rvs []string, done *sync.WaitGroup) {
0000000000000000000000000000000000000000;;		defer done.Done()
0000000000000000000000000000000000000000;;		for _, rv := range rvs {
0000000000000000000000000000000000000000;;			got, ok := <-w.ResultChan()
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				t.Errorf("%#v: unexpected channel close, wanted %v", rvs, rv)
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			gotRV := got.Object.(*v1.Pod).ObjectMeta.ResourceVersion
0000000000000000000000000000000000000000;;			if e, a := rv, gotRV; e != a {
0000000000000000000000000000000000000000;;				t.Errorf("wanted %v, got %v", e, a)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				t.Logf("Got %v as expected", gotRV)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// We should not get anything else.
0000000000000000000000000000000000000000;;		got, open := <-w.ResultChan()
0000000000000000000000000000000000000000;;		if open {
0000000000000000000000000000000000000000;;			t.Errorf("%#v: unwanted object %#v", rvs, got)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRCNumber(t *testing.T) {
0000000000000000000000000000000000000000;;		pod := func(name string) *v1.Pod {
0000000000000000000000000000000000000000;;			return &v1.Pod{
0000000000000000000000000000000000000000;;				ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Name: name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		wg := &sync.WaitGroup{}
0000000000000000000000000000000000000000;;		wg.Add(3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		source := NewFakeControllerSource()
0000000000000000000000000000000000000000;;		source.Add(pod("foo"))
0000000000000000000000000000000000000000;;		source.Modify(pod("foo"))
0000000000000000000000000000000000000000;;		source.Modify(pod("foo"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w, err := source.Watch(metav1.ListOptions{ResourceVersion: "1"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go consume(t, w, []string{"2", "3"}, wg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, err := source.List(metav1.ListOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := "3", list.(*v1.List).ResourceVersion; e != a {
0000000000000000000000000000000000000000;;			t.Errorf("wanted %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w2, err := source.Watch(metav1.ListOptions{ResourceVersion: "2"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go consume(t, w2, []string{"3"}, wg)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w3, err := source.Watch(metav1.ListOptions{ResourceVersion: "3"})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		go consume(t, w3, []string{}, wg)
0000000000000000000000000000000000000000;;		source.Shutdown()
0000000000000000000000000000000000000000;;		wg.Wait()
0000000000000000000000000000000000000000;;	}
