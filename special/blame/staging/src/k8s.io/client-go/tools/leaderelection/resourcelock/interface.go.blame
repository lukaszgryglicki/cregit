0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f70c757b3b7241f153bc4456f7234940e8489e03;pkg/client/leaderelection/resourcelock/interface.go[pkg/client/leaderelection/resourcelock/interface.go][staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/interface.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resourcelock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		cs "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/record"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LeaderElectionRecordAnnotationKey = "control-plane.alpha.kubernetes.io/leader"
0000000000000000000000000000000000000000;;		EndpointsResourceLock             = "endpoints"
0000000000000000000000000000000000000000;;		ConfigMapsResourceLock            = "configmaps"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LeaderElectionRecord is the record that is stored in the leader election annotation.
0000000000000000000000000000000000000000;;	// This information should be used for observational purposes only and could be replaced
0000000000000000000000000000000000000000;;	// with a random string (e.g. UUID) with only slight modification of this code.
0000000000000000000000000000000000000000;;	// TODO(mikedanese): this should potentially be versioned
0000000000000000000000000000000000000000;;	type LeaderElectionRecord struct {
0000000000000000000000000000000000000000;;		HolderIdentity       string      `json:"holderIdentity"`
0000000000000000000000000000000000000000;;		LeaseDurationSeconds int         `json:"leaseDurationSeconds"`
0000000000000000000000000000000000000000;;		AcquireTime          metav1.Time `json:"acquireTime"`
0000000000000000000000000000000000000000;;		RenewTime            metav1.Time `json:"renewTime"`
0000000000000000000000000000000000000000;;		LeaderTransitions    int         `json:"leaderTransitions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceLockConfig common data that exists across different
0000000000000000000000000000000000000000;;	// resource locks
0000000000000000000000000000000000000000;;	type ResourceLockConfig struct {
0000000000000000000000000000000000000000;;		Identity      string
0000000000000000000000000000000000000000;;		EventRecorder record.EventRecorder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface offers a common interface for locking on arbitrary
0000000000000000000000000000000000000000;;	// resources used in leader election.  The Interface is used
0000000000000000000000000000000000000000;;	// to hide the details on specific implementations in order to allow
0000000000000000000000000000000000000000;;	// them to change over time.  This interface is strictly for use
0000000000000000000000000000000000000000;;	// by the leaderelection code.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		// Get returns the LeaderElectionRecord
0000000000000000000000000000000000000000;;		Get() (*LeaderElectionRecord, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Create attempts to create a LeaderElectionRecord
0000000000000000000000000000000000000000;;		Create(ler LeaderElectionRecord) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update will update and existing LeaderElectionRecord
0000000000000000000000000000000000000000;;		Update(ler LeaderElectionRecord) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RecordEvent is used to record events
0000000000000000000000000000000000000000;;		RecordEvent(string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Identity will return the locks Identity
0000000000000000000000000000000000000000;;		Identity() string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Describe is used to convert details on current resource lock
0000000000000000000000000000000000000000;;		// into a string
0000000000000000000000000000000000000000;;		Describe() string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Manufacture will create a lock of a given type according to the input parameters
0000000000000000000000000000000000000000;;	func New(lockType string, ns string, name string, client *cs.Clientset, rlc ResourceLockConfig) (Interface, error) {
0000000000000000000000000000000000000000;;		switch lockType {
0000000000000000000000000000000000000000;;		case EndpointsResourceLock:
0000000000000000000000000000000000000000;;			return &EndpointsLock{
0000000000000000000000000000000000000000;;				EndpointsMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace: ns,
0000000000000000000000000000000000000000;;					Name:      name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Client:     client,
0000000000000000000000000000000000000000;;				LockConfig: rlc,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		case ConfigMapsResourceLock:
0000000000000000000000000000000000000000;;			return &ConfigMapLock{
0000000000000000000000000000000000000000;;				ConfigMapMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;					Namespace: ns,
0000000000000000000000000000000000000000;;					Name:      name,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				Client:     client,
0000000000000000000000000000000000000000;;				LockConfig: rlc,
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("Invalid lock-type %s", lockType)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
