0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
f70c757b3b7241f153bc4456f7234940e8489e03;pkg/client/leaderelection/resourcelock/endpointslock.go[pkg/client/leaderelection/resourcelock/endpointslock.go][staging/src/k8s.io/client-go/tools/leaderelection/resourcelock/endpointslock.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package resourcelock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		corev1client "k8s.io/client-go/kubernetes/typed/core/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EndpointsLock struct {
0000000000000000000000000000000000000000;;		// EndpointsMeta should contain a Name and a Namespace of an
0000000000000000000000000000000000000000;;		// Endpoints object that the LeaderElector will attempt to lead.
0000000000000000000000000000000000000000;;		EndpointsMeta metav1.ObjectMeta
0000000000000000000000000000000000000000;;		Client        corev1client.EndpointsGetter
0000000000000000000000000000000000000000;;		LockConfig    ResourceLockConfig
0000000000000000000000000000000000000000;;		e             *v1.Endpoints
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns the election record from a Endpoints Annotation
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) Get() (*LeaderElectionRecord, error) {
0000000000000000000000000000000000000000;;		var record LeaderElectionRecord
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		el.e, err = el.Client.Endpoints(el.EndpointsMeta.Namespace).Get(el.EndpointsMeta.Name, metav1.GetOptions{})
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if el.e.Annotations == nil {
0000000000000000000000000000000000000000;;			el.e.Annotations = make(map[string]string)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if recordBytes, found := el.e.Annotations[LeaderElectionRecordAnnotationKey]; found {
0000000000000000000000000000000000000000;;			if err := json.Unmarshal([]byte(recordBytes), &record); err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &record, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create attempts to create a LeaderElectionRecord annotation
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) Create(ler LeaderElectionRecord) error {
0000000000000000000000000000000000000000;;		recordBytes, err := json.Marshal(ler)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		el.e, err = el.Client.Endpoints(el.EndpointsMeta.Namespace).Create(&v1.Endpoints{
0000000000000000000000000000000000000000;;			ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;				Name:      el.EndpointsMeta.Name,
0000000000000000000000000000000000000000;;				Namespace: el.EndpointsMeta.Namespace,
0000000000000000000000000000000000000000;;				Annotations: map[string]string{
0000000000000000000000000000000000000000;;					LeaderElectionRecordAnnotationKey: string(recordBytes),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update will update and existing annotation on a given resource.
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) Update(ler LeaderElectionRecord) error {
0000000000000000000000000000000000000000;;		if el.e == nil {
0000000000000000000000000000000000000000;;			return errors.New("endpoint not initialized, call get or create first")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		recordBytes, err := json.Marshal(ler)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		el.e.Annotations[LeaderElectionRecordAnnotationKey] = string(recordBytes)
0000000000000000000000000000000000000000;;		el.e, err = el.Client.Endpoints(el.EndpointsMeta.Namespace).Update(el.e)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RecordEvent in leader election while adding meta-data
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) RecordEvent(s string) {
0000000000000000000000000000000000000000;;		events := fmt.Sprintf("%v %v", el.LockConfig.Identity, s)
0000000000000000000000000000000000000000;;		el.LockConfig.EventRecorder.Eventf(&v1.Endpoints{ObjectMeta: el.e.ObjectMeta}, v1.EventTypeNormal, "LeaderElection", events)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Describe is used to convert details on current resource lock
0000000000000000000000000000000000000000;;	// into a string
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) Describe() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%v/%v", el.EndpointsMeta.Namespace, el.EndpointsMeta.Name)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// returns the Identity of the lock
0000000000000000000000000000000000000000;;	func (el *EndpointsLock) Identity() string {
0000000000000000000000000000000000000000;;		return el.LockConfig.Identity
0000000000000000000000000000000000000000;;	}
