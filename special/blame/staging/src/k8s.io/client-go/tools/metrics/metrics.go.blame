0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/metrics/metrics.go[staging/src/k8s.io/client-go/1.4/tools/metrics/metrics.go][staging/src/k8s.io/client-go/tools/metrics/metrics.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package metrics provides abstractions for registering which metrics
0000000000000000000000000000000000000000;;	// to record.
0000000000000000000000000000000000000000;;	package metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var registerMetrics sync.Once
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LatencyMetric observes client latency partitioned by verb and url.
0000000000000000000000000000000000000000;;	type LatencyMetric interface {
0000000000000000000000000000000000000000;;		Observe(verb string, u url.URL, latency time.Duration)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResultMetric counts response codes partitioned by method and host.
0000000000000000000000000000000000000000;;	type ResultMetric interface {
0000000000000000000000000000000000000000;;		Increment(code string, method string, host string)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// RequestLatency is the latency metric that rest clients will update.
0000000000000000000000000000000000000000;;		RequestLatency LatencyMetric = noopLatency{}
0000000000000000000000000000000000000000;;		// RequestResult is the result metric that rest clients will update.
0000000000000000000000000000000000000000;;		RequestResult ResultMetric = noopResult{}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register registers metrics for the rest client to use. This can
0000000000000000000000000000000000000000;;	// only be called once.
0000000000000000000000000000000000000000;;	func Register(lm LatencyMetric, rm ResultMetric) {
0000000000000000000000000000000000000000;;		registerMetrics.Do(func() {
0000000000000000000000000000000000000000;;			RequestLatency = lm
0000000000000000000000000000000000000000;;			RequestResult = rm
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type noopLatency struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (noopLatency) Observe(string, url.URL, time.Duration) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type noopResult struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (noopResult) Increment(string, string, string) {}
