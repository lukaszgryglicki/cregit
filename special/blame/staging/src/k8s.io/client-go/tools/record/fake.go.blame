0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/record/fake.go[staging/src/k8s.io/client-go/1.4/tools/record/fake.go][staging/src/k8s.io/client-go/tools/record/fake.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package record
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FakeRecorder is used as a fake during tests. It is thread safe. It is usable
0000000000000000000000000000000000000000;;	// when created manually and not by NewFakeRecorder, however all events may be
0000000000000000000000000000000000000000;;	// thrown away in this case.
0000000000000000000000000000000000000000;;	type FakeRecorder struct {
0000000000000000000000000000000000000000;;		Events chan string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRecorder) Event(object runtime.Object, eventtype, reason, message string) {
0000000000000000000000000000000000000000;;		if f.Events != nil {
0000000000000000000000000000000000000000;;			f.Events <- fmt.Sprintf("%s %s %s", eventtype, reason, message)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRecorder) Eventf(object runtime.Object, eventtype, reason, messageFmt string, args ...interface{}) {
0000000000000000000000000000000000000000;;		if f.Events != nil {
0000000000000000000000000000000000000000;;			f.Events <- fmt.Sprintf(eventtype+" "+reason+" "+messageFmt, args...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *FakeRecorder) PastEventf(object runtime.Object, timestamp metav1.Time, eventtype, reason, messageFmt string, args ...interface{}) {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFakeRecorder creates new fake event recorder with event channel with
0000000000000000000000000000000000000000;;	// buffer of given size.
0000000000000000000000000000000000000000;;	func NewFakeRecorder(bufferSize int) *FakeRecorder {
0000000000000000000000000000000000000000;;		return &FakeRecorder{
0000000000000000000000000000000000000000;;			Events: make(chan string, bufferSize),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
