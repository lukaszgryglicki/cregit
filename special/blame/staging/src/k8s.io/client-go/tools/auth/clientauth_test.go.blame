0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
7ae9f03395c6627a081201b94a92727a999ac034;staging/src/k8s.io/client-go/1.4/tools/auth/clientauth_test.go[staging/src/k8s.io/client-go/1.4/tools/auth/clientauth_test.go][staging/src/k8s.io/client-go/tools/auth/clientauth_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package auth_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		clientauth "k8s.io/client-go/tools/auth"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLoadFromFile(t *testing.T) {
0000000000000000000000000000000000000000;;		loadAuthInfoTests := []struct {
0000000000000000000000000000000000000000;;			authData  string
0000000000000000000000000000000000000000;;			authInfo  *clientauth.Info
0000000000000000000000000000000000000000;;			expectErr bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				`{"user": "user", "password": "pass"}`,
0000000000000000000000000000000000000000;;				&clientauth.Info{User: "user", Password: "pass"},
0000000000000000000000000000000000000000;;				false,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				"", nil, true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, loadAuthInfoTest := range loadAuthInfoTests {
0000000000000000000000000000000000000000;;			tt := loadAuthInfoTest
0000000000000000000000000000000000000000;;			aifile, err := ioutil.TempFile("", "testAuthInfo")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if tt.authData != "missing" {
0000000000000000000000000000000000000000;;				defer os.Remove(aifile.Name())
0000000000000000000000000000000000000000;;				defer aifile.Close()
0000000000000000000000000000000000000000;;				_, err = aifile.WriteString(tt.authData)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					t.Errorf("Unexpected error: %v", err)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				aifile.Close()
0000000000000000000000000000000000000000;;				os.Remove(aifile.Name())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			authInfo, err := clientauth.LoadFromFile(aifile.Name())
0000000000000000000000000000000000000000;;			gotErr := err != nil
0000000000000000000000000000000000000000;;			if gotErr != tt.expectErr {
0000000000000000000000000000000000000000;;				t.Errorf("expected errorness: %v, actual errorness: %v", tt.expectErr, gotErr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !reflect.DeepEqual(authInfo, tt.authInfo) {
0000000000000000000000000000000000000000;;				t.Errorf("Expected %v, got %v", tt.authInfo, authInfo)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
