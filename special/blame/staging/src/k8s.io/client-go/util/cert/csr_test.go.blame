0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c79965919edd06606db30ef66c7104098fe5e687;pkg/util/certificates/csr_test.go[pkg/util/certificates/csr_test.go][staging/src/k8s.io/client-go/util/cert/csr_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package cert
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"crypto/x509/pkix"
0000000000000000000000000000000000000000;;		"encoding/pem"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMakeCSR(t *testing.T) {
0000000000000000000000000000000000000000;;		keyFile := "testdata/dontUseThisKey.pem"
0000000000000000000000000000000000000000;;		subject := &pkix.Name{
0000000000000000000000000000000000000000;;			CommonName: "kube-worker",
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dnsSANs := []string{"localhost"}
0000000000000000000000000000000000000000;;		ipSANs := []net.IP{net.ParseIP("127.0.0.1")}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		keyData, err := ioutil.ReadFile(keyFile)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		key, err := ParsePrivateKeyPEM(keyData)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csrPEM, err := MakeCSR(key, subject, dnsSANs, ipSANs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Error(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csrBlock, rest := pem.Decode(csrPEM)
0000000000000000000000000000000000000000;;		if csrBlock == nil {
0000000000000000000000000000000000000000;;			t.Error("Unable to decode MakeCSR result.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(rest) != 0 {
0000000000000000000000000000000000000000;;			t.Error("Found more than one PEM encoded block in the result.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if csrBlock.Type != CertificateRequestBlockType {
0000000000000000000000000000000000000000;;			t.Errorf("Found block type %q, wanted 'CERTIFICATE REQUEST'", csrBlock.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		csr, err := x509.ParseCertificateRequest(csrBlock.Bytes)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("Found %v parsing MakeCSR result as a CertificateRequest.", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if csr.Subject.CommonName != subject.CommonName {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted %v, got %v", subject, csr.Subject)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(csr.DNSNames) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted 1 DNS name in the result, got %d", len(csr.DNSNames))
0000000000000000000000000000000000000000;;		} else if csr.DNSNames[0] != dnsSANs[0] {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted %v, got %v", dnsSANs[0], csr.DNSNames[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(csr.IPAddresses) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted 1 IP address in the result, got %d", len(csr.IPAddresses))
0000000000000000000000000000000000000000;;		} else if csr.IPAddresses[0].String() != ipSANs[0].String() {
0000000000000000000000000000000000000000;;			t.Errorf("Wanted %v, got %v", ipSANs[0], csr.IPAddresses[0])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
