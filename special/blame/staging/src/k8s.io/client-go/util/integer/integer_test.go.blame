0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
47136f3945aff958c99509decdab350d4be7b2c7;staging/src/k8s.io/client-go/pkg/util/integer/integer_test.go[staging/src/k8s.io/client-go/pkg/util/integer/integer_test.go][staging/src/k8s.io/client-go/util/integer/integer_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package integer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntMax(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int
0000000000000000000000000000000000000000;;			expectedMax int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{-1, 0},
0000000000000000000000000000000000000000;;				expectedMax: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{-1, -2},
0000000000000000000000000000000000000000;;				expectedMax: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{0, 1},
0000000000000000000000000000000000000000;;				expectedMax: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{1, 2},
0000000000000000000000000000000000000000;;				expectedMax: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if max := IntMax(test.nums[0], test.nums[1]); max != test.expectedMax {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMax, max)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestIntMin(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int
0000000000000000000000000000000000000000;;			expectedMin int
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{-1, 0},
0000000000000000000000000000000000000000;;				expectedMin: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{-1, -2},
0000000000000000000000000000000000000000;;				expectedMin: -2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{0, 1},
0000000000000000000000000000000000000000;;				expectedMin: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int{1, 2},
0000000000000000000000000000000000000000;;				expectedMin: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if min := IntMin(test.nums[0], test.nums[1]); min != test.expectedMin {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMin, min)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInt32Max(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int32
0000000000000000000000000000000000000000;;			expectedMax int32
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{-1, 0},
0000000000000000000000000000000000000000;;				expectedMax: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{-1, -2},
0000000000000000000000000000000000000000;;				expectedMax: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{0, 1},
0000000000000000000000000000000000000000;;				expectedMax: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{1, 2},
0000000000000000000000000000000000000000;;				expectedMax: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if max := Int32Max(test.nums[0], test.nums[1]); max != test.expectedMax {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMax, max)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInt32Min(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int32
0000000000000000000000000000000000000000;;			expectedMin int32
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{-1, 0},
0000000000000000000000000000000000000000;;				expectedMin: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{-1, -2},
0000000000000000000000000000000000000000;;				expectedMin: -2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{0, 1},
0000000000000000000000000000000000000000;;				expectedMin: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int32{1, 2},
0000000000000000000000000000000000000000;;				expectedMin: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if min := Int32Min(test.nums[0], test.nums[1]); min != test.expectedMin {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMin, min)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInt64Max(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int64
0000000000000000000000000000000000000000;;			expectedMax int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{-1, 0},
0000000000000000000000000000000000000000;;				expectedMax: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{-1, -2},
0000000000000000000000000000000000000000;;				expectedMax: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{0, 1},
0000000000000000000000000000000000000000;;				expectedMax: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{1, 2},
0000000000000000000000000000000000000000;;				expectedMax: 2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if max := Int64Max(test.nums[0], test.nums[1]); max != test.expectedMax {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMax, max)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestInt64Min(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			nums        []int64
0000000000000000000000000000000000000000;;			expectedMin int64
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{-1, 0},
0000000000000000000000000000000000000000;;				expectedMin: -1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{-1, -2},
0000000000000000000000000000000000000000;;				expectedMin: -2,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{0, 1},
0000000000000000000000000000000000000000;;				expectedMin: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				nums:        []int64{1, 2},
0000000000000000000000000000000000000000;;				expectedMin: 1,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if min := Int64Min(test.nums[0], test.nums[1]); min != test.expectedMin {
0000000000000000000000000000000000000000;;				t.Errorf("expected %v,  got %v", test.expectedMin, min)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRoundToInt32(t *testing.T) {
0000000000000000000000000000000000000000;;		tests := []struct {
0000000000000000000000000000000000000000;;			num float64
0000000000000000000000000000000000000000;;			exp int32
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: 5.5,
0000000000000000000000000000000000000000;;				exp: 6,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: -3.7,
0000000000000000000000000000000000000000;;				exp: -4,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: 3.49,
0000000000000000000000000000000000000000;;				exp: 3,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: -7.9,
0000000000000000000000000000000000000000;;				exp: -8,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: -4.499999,
0000000000000000000000000000000000000000;;				exp: -4,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				num: 0,
0000000000000000000000000000000000000000;;				exp: 0,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i, test := range tests {
0000000000000000000000000000000000000000;;			t.Logf("executing scenario %d", i)
0000000000000000000000000000000000000000;;			if got := RoundToInt32(test.num); got != test.exp {
0000000000000000000000000000000000000000;;				t.Errorf("expected %d, got %d", test.exp, got)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
