0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
efcbbfed5b9a93ddcca8e032136d2be168910e77;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package exec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExitError is an interface that presents an API similar to os.ProcessState, which is
0000000000000000000000000000000000000000;;	// what ExitError from os/exec is.  This is designed to make testing a bit easier and
0000000000000000000000000000000000000000;;	// probably loses some of the cross-platform properties of the underlying library.
0000000000000000000000000000000000000000;;	type ExitError interface {
0000000000000000000000000000000000000000;;		String() string
0000000000000000000000000000000000000000;;		Error() string
0000000000000000000000000000000000000000;;		Exited() bool
0000000000000000000000000000000000000000;;		ExitStatus() int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CodeExitError is an implementation of ExitError consisting of an error object
0000000000000000000000000000000000000000;;	// and an exit code (the upper bits of os.exec.ExitStatus).
0000000000000000000000000000000000000000;;	type CodeExitError struct {
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;		Code int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ ExitError = CodeExitError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e CodeExitError) Error() string {
0000000000000000000000000000000000000000;;		return e.Err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e CodeExitError) String() string {
0000000000000000000000000000000000000000;;		return e.Err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e CodeExitError) Exited() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e CodeExitError) ExitStatus() int {
0000000000000000000000000000000000000000;;		return e.Code
0000000000000000000000000000000000000000;;	}
