0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
cd5090637fce317d1051648b14ee156a4e9de873;staging/src/k8s.io/client-go/pkg/util/workqueue/queue_test.go[staging/src/k8s.io/client-go/pkg/util/workqueue/queue_test.go][staging/src/k8s.io/client-go/util/workqueue/queue_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package workqueue_test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/client-go/util/workqueue"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestBasic(t *testing.T) {
0000000000000000000000000000000000000000;;		// If something is seriously wrong this test will never complete.
0000000000000000000000000000000000000000;;		q := workqueue.New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start producers
0000000000000000000000000000000000000000;;		const producers = 50
0000000000000000000000000000000000000000;;		producerWG := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		producerWG.Add(producers)
0000000000000000000000000000000000000000;;		for i := 0; i < producers; i++ {
0000000000000000000000000000000000000000;;			go func(i int) {
0000000000000000000000000000000000000000;;				defer producerWG.Done()
0000000000000000000000000000000000000000;;				for j := 0; j < 50; j++ {
0000000000000000000000000000000000000000;;					q.Add(i)
0000000000000000000000000000000000000000;;					time.Sleep(time.Millisecond)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}(i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start consumers
0000000000000000000000000000000000000000;;		const consumers = 10
0000000000000000000000000000000000000000;;		consumerWG := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		consumerWG.Add(consumers)
0000000000000000000000000000000000000000;;		for i := 0; i < consumers; i++ {
0000000000000000000000000000000000000000;;			go func(i int) {
0000000000000000000000000000000000000000;;				defer consumerWG.Done()
0000000000000000000000000000000000000000;;				for {
0000000000000000000000000000000000000000;;					item, quit := q.Get()
0000000000000000000000000000000000000000;;					if item == "added after shutdown!" {
0000000000000000000000000000000000000000;;						t.Errorf("Got an item added after shutdown.")
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if quit {
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					t.Logf("Worker %v: begin processing %v", i, item)
0000000000000000000000000000000000000000;;					time.Sleep(3 * time.Millisecond)
0000000000000000000000000000000000000000;;					t.Logf("Worker %v: done processing %v", i, item)
0000000000000000000000000000000000000000;;					q.Done(item)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}(i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		producerWG.Wait()
0000000000000000000000000000000000000000;;		q.ShutDown()
0000000000000000000000000000000000000000;;		q.Add("added after shutdown!")
0000000000000000000000000000000000000000;;		consumerWG.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddWhileProcessing(t *testing.T) {
0000000000000000000000000000000000000000;;		q := workqueue.New()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start producers
0000000000000000000000000000000000000000;;		const producers = 50
0000000000000000000000000000000000000000;;		producerWG := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		producerWG.Add(producers)
0000000000000000000000000000000000000000;;		for i := 0; i < producers; i++ {
0000000000000000000000000000000000000000;;			go func(i int) {
0000000000000000000000000000000000000000;;				defer producerWG.Done()
0000000000000000000000000000000000000000;;				q.Add(i)
0000000000000000000000000000000000000000;;			}(i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start consumers
0000000000000000000000000000000000000000;;		const consumers = 10
0000000000000000000000000000000000000000;;		consumerWG := sync.WaitGroup{}
0000000000000000000000000000000000000000;;		consumerWG.Add(consumers)
0000000000000000000000000000000000000000;;		for i := 0; i < consumers; i++ {
0000000000000000000000000000000000000000;;			go func(i int) {
0000000000000000000000000000000000000000;;				defer consumerWG.Done()
0000000000000000000000000000000000000000;;				// Every worker will re-add every item up to two times.
0000000000000000000000000000000000000000;;				// This tests the dirty-while-processing case.
0000000000000000000000000000000000000000;;				counters := map[interface{}]int{}
0000000000000000000000000000000000000000;;				for {
0000000000000000000000000000000000000000;;					item, quit := q.Get()
0000000000000000000000000000000000000000;;					if quit {
0000000000000000000000000000000000000000;;						return
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					counters[item]++
0000000000000000000000000000000000000000;;					if counters[item] < 2 {
0000000000000000000000000000000000000000;;						q.Add(item)
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					q.Done(item)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}(i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		producerWG.Wait()
0000000000000000000000000000000000000000;;		q.ShutDown()
0000000000000000000000000000000000000000;;		consumerWG.Wait()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestLen(t *testing.T) {
0000000000000000000000000000000000000000;;		q := workqueue.New()
0000000000000000000000000000000000000000;;		q.Add("foo")
0000000000000000000000000000000000000000;;		if e, a := 1, q.Len(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		q.Add("bar")
0000000000000000000000000000000000000000;;		if e, a := 2, q.Len(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		q.Add("foo") // should not increase the queue length.
0000000000000000000000000000000000000000;;		if e, a := 2, q.Len(); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestReinsert(t *testing.T) {
0000000000000000000000000000000000000000;;		q := workqueue.New()
0000000000000000000000000000000000000000;;		q.Add("foo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start processing
0000000000000000000000000000000000000000;;		i, _ := q.Get()
0000000000000000000000000000000000000000;;		if i != "foo" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", "foo", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add it back while processing
0000000000000000000000000000000000000000;;		q.Add(i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Finish it up
0000000000000000000000000000000000000000;;		q.Done(i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// It should be back on the queue
0000000000000000000000000000000000000000;;		i, _ = q.Get()
0000000000000000000000000000000000000000;;		if i != "foo" {
0000000000000000000000000000000000000000;;			t.Errorf("Expected %v, got %v", "foo", i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Finish that one up
0000000000000000000000000000000000000000;;		q.Done(i)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if a := q.Len(); a != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("Expected queue to be empty. Has %v items", a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
