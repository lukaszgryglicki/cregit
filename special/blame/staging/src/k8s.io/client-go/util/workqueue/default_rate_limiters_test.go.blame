0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
10b3103818e7b548da55dfd39e7c754cc250626d;pkg/util/workqueue/default_rate_limiters_test.go[pkg/util/workqueue/default_rate_limiters_test.go][staging/src/k8s.io/client-go/util/workqueue/default_rate_limiters_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package workqueue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestItemExponentialFailureRateLimiter(t *testing.T) {
0000000000000000000000000000000000000000;;		limiter := NewItemExponentialFailureRateLimiter(1*time.Millisecond, 1*time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 4*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 8*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 16*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2, limiter.NumRequeues("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		limiter.Forget("one")
0000000000000000000000000000000000000000;;		if e, a := 0, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestItemExponentialFailureRateLimiterOverFlow(t *testing.T) {
0000000000000000000000000000000000000000;;		limiter := NewItemExponentialFailureRateLimiter(1*time.Millisecond, 1000*time.Second)
0000000000000000000000000000000000000000;;		for i := 0; i < 5; i++ {
0000000000000000000000000000000000000000;;			limiter.When("one")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 32*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 1000; i++ {
0000000000000000000000000000000000000000;;			limiter.When("overflow1")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 1000*time.Second, limiter.When("overflow1"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		limiter = NewItemExponentialFailureRateLimiter(1*time.Minute, 1000*time.Hour)
0000000000000000000000000000000000000000;;		for i := 0; i < 2; i++ {
0000000000000000000000000000000000000000;;			limiter.When("two")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 4*time.Minute, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 1000; i++ {
0000000000000000000000000000000000000000;;			limiter.When("overflow2")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 1000*time.Hour, limiter.When("overflow2"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestItemFastSlowRateLimiter(t *testing.T) {
0000000000000000000000000000000000000000;;		limiter := NewItemFastSlowRateLimiter(5*time.Millisecond, 10*time.Second, 3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 10*time.Second, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 10*time.Second, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2, limiter.NumRequeues("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		limiter.Forget("one")
0000000000000000000000000000000000000000;;		if e, a := 0, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestMaxOfRateLimiter(t *testing.T) {
0000000000000000000000000000000000000000;;		limiter := NewMaxOfRateLimiter(
0000000000000000000000000000000000000000;;			NewItemFastSlowRateLimiter(5*time.Millisecond, 3*time.Second, 3),
0000000000000000000000000000000000000000;;			NewItemExponentialFailureRateLimiter(1*time.Millisecond, 1*time.Second),
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 3*time.Second, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 3*time.Second, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2, limiter.NumRequeues("two"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		limiter.Forget("one")
0000000000000000000000000000000000000000;;		if e, a := 0, limiter.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 5*time.Millisecond, limiter.When("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
