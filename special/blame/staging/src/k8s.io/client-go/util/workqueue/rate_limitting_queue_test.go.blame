0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
10b3103818e7b548da55dfd39e7c754cc250626d;pkg/util/workqueue/rate_limitting_queue_test.go[pkg/util/workqueue/rate_limitting_queue_test.go][staging/src/k8s.io/client-go/util/workqueue/rate_limitting_queue_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package workqueue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestRateLimitingQueue(t *testing.T) {
0000000000000000000000000000000000000000;;		limiter := NewItemExponentialFailureRateLimiter(1*time.Millisecond, 1*time.Second)
0000000000000000000000000000000000000000;;		queue := NewRateLimitingQueue(limiter).(*rateLimitingType)
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		delayingQueue := &delayingType{
0000000000000000000000000000000000000000;;			Interface:       New(),
0000000000000000000000000000000000000000;;			clock:           fakeClock,
0000000000000000000000000000000000000000;;			heartbeat:       fakeClock.Tick(maxWait),
0000000000000000000000000000000000000000;;			stopCh:          make(chan struct{}),
0000000000000000000000000000000000000000;;			waitingForAddCh: make(chan *waitFor, 1000),
0000000000000000000000000000000000000000;;			metrics:         newRetryMetrics(""),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		queue.DelayingInterface = delayingQueue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		queue.AddRateLimited("one")
0000000000000000000000000000000000000000;;		waitEntry := <-delayingQueue.waitingForAddCh
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, waitEntry.readyAt.Sub(fakeClock.Now()); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		queue.AddRateLimited("one")
0000000000000000000000000000000000000000;;		waitEntry = <-delayingQueue.waitingForAddCh
0000000000000000000000000000000000000000;;		if e, a := 2*time.Millisecond, waitEntry.readyAt.Sub(fakeClock.Now()); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if e, a := 2, queue.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		queue.AddRateLimited("two")
0000000000000000000000000000000000000000;;		waitEntry = <-delayingQueue.waitingForAddCh
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, waitEntry.readyAt.Sub(fakeClock.Now()); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		queue.AddRateLimited("two")
0000000000000000000000000000000000000000;;		waitEntry = <-delayingQueue.waitingForAddCh
0000000000000000000000000000000000000000;;		if e, a := 2*time.Millisecond, waitEntry.readyAt.Sub(fakeClock.Now()); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		queue.Forget("one")
0000000000000000000000000000000000000000;;		if e, a := 0, queue.NumRequeues("one"); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		queue.AddRateLimited("one")
0000000000000000000000000000000000000000;;		waitEntry = <-delayingQueue.waitingForAddCh
0000000000000000000000000000000000000000;;		if e, a := 1*time.Millisecond, waitEntry.readyAt.Sub(fakeClock.Now()); e != a {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", e, a)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
