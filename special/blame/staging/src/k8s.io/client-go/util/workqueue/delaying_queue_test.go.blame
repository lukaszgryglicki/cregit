0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
c7d4feeb4183c2c7eb0931bc1f999eea00cc2f0f;pkg/util/workqueue/delaying_queue_test.go[pkg/util/workqueue/delaying_queue_test.go][staging/src/k8s.io/client-go/util/workqueue/delaying_queue_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package workqueue
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/clock"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/wait"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestSimpleQueue(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		q := newDelayingQueue(fakeClock, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		first := "foo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q.AddAfter(first, 50*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(60 * time.Millisecond)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("should have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ := q.Get()
0000000000000000000000000000000000000000;;		q.Done(item)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// step past the next heartbeat
0000000000000000000000000000000000000000;;		fakeClock.Step(10 * time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := wait.Poll(1*time.Millisecond, 30*time.Millisecond, func() (done bool, err error) {
0000000000000000000000000000000000000000;;			if q.Len() > 0 {
0000000000000000000000000000000000000000;;				return false, fmt.Errorf("added to queue")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		if err != wait.ErrWaitTimeout {
0000000000000000000000000000000000000000;;			t.Errorf("expected timeout, got: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDeduping(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		q := newDelayingQueue(fakeClock, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		first := "foo"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q.AddAfter(first, 50*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		q.AddAfter(first, 70*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// step past the first block, we should receive now
0000000000000000000000000000000000000000;;		fakeClock.Step(60 * time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("should have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ := q.Get()
0000000000000000000000000000000000000000;;		q.Done(item)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// step past the second add
0000000000000000000000000000000000000000;;		fakeClock.Step(20 * time.Millisecond)
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// test again, but this time the earlier should override
0000000000000000000000000000000000000000;;		q.AddAfter(first, 50*time.Millisecond)
0000000000000000000000000000000000000000;;		q.AddAfter(first, 30*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(40 * time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("should have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ = q.Get()
0000000000000000000000000000000000000000;;		q.Done(item)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// step past the second add
0000000000000000000000000000000000000000;;		fakeClock.Step(20 * time.Millisecond)
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestAddTwoFireEarly(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		q := newDelayingQueue(fakeClock, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		first := "foo"
0000000000000000000000000000000000000000;;		second := "bar"
0000000000000000000000000000000000000000;;		third := "baz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q.AddAfter(first, 1*time.Second)
0000000000000000000000000000000000000000;;		q.AddAfter(second, 50*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(60 * time.Millisecond)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ := q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(item, second) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", second, item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q.AddAfter(third, 2*time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(1 * time.Second)
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ = q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(item, first) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", first, item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(2 * time.Second)
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 1); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		item, _ = q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(item, third) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", third, item)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestCopyShifting(t *testing.T) {
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		q := newDelayingQueue(fakeClock, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		first := "foo"
0000000000000000000000000000000000000000;;		second := "bar"
0000000000000000000000000000000000000000;;		third := "baz"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		q.AddAfter(first, 1*time.Second)
0000000000000000000000000000000000000000;;		q.AddAfter(second, 500*time.Millisecond)
0000000000000000000000000000000000000000;;		q.AddAfter(third, 250*time.Millisecond)
0000000000000000000000000000000000000000;;		if err := waitForWaitingQueueToFill(q); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if q.Len() != 0 {
0000000000000000000000000000000000000000;;			t.Errorf("should not have added")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock.Step(2 * time.Second)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := waitForAdded(q, 3); err != nil {
0000000000000000000000000000000000000000;;			t.Fatalf("unexpected err: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualFirst, _ := q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(actualFirst, third) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", third, actualFirst)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualSecond, _ := q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(actualSecond, second) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", second, actualSecond)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		actualThird, _ := q.Get()
0000000000000000000000000000000000000000;;		if !reflect.DeepEqual(actualThird, first) {
0000000000000000000000000000000000000000;;			t.Errorf("expected %v, got %v", first, actualThird)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func BenchmarkDelayingQueue_AddAfter(b *testing.B) {
0000000000000000000000000000000000000000;;		r := rand.New(rand.NewSource(time.Now().Unix()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fakeClock := clock.NewFakeClock(time.Now())
0000000000000000000000000000000000000000;;		q := newDelayingQueue(fakeClock, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Add items
0000000000000000000000000000000000000000;;		for n := 0; n < b.N; n++ {
0000000000000000000000000000000000000000;;			data := fmt.Sprintf("%d", n)
0000000000000000000000000000000000000000;;			q.AddAfter(data, time.Duration(r.Int63n(int64(10*time.Minute))))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Exercise item removal as well
0000000000000000000000000000000000000000;;		fakeClock.Step(11 * time.Minute)
0000000000000000000000000000000000000000;;		for n := 0; n < b.N; n++ {
0000000000000000000000000000000000000000;;			_, _ = q.Get()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func waitForAdded(q DelayingInterface, depth int) error {
0000000000000000000000000000000000000000;;		return wait.Poll(1*time.Millisecond, 10*time.Second, func() (done bool, err error) {
0000000000000000000000000000000000000000;;			if q.Len() == depth {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func waitForWaitingQueueToFill(q DelayingInterface) error {
0000000000000000000000000000000000000000;;		return wait.Poll(1*time.Millisecond, 10*time.Second, func() (done bool, err error) {
0000000000000000000000000000000000000000;;			if len(q.(*delayingType).waitingForAddCh) == 0 {
0000000000000000000000000000000000000000;;				return true, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
