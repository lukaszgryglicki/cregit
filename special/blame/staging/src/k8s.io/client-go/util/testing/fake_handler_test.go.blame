0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2014 The Kubernetes Authors.
fb58952734d0f95a7ba81136b3f7c936cef27d68;pkg/util/fake_handler_test.go[pkg/util/fake_handler_test.go][staging/src/k8s.io/client-go/util/testing/fake_handler_test.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package testing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httptest"
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerPath(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;		body := "somebody"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, server.URL+path, bytes.NewBufferString(body))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ValidateRequest(t, path, method, &body)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerPathNoBody(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, server.URL+path, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ValidateRequest(t, path, method, nil)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type fakeError struct {
0000000000000000000000000000000000000000;;		errors []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeError) Errorf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		f.errors = append(f.errors, format)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *fakeError) Logf(format string, args ...interface{}) {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerWrongPath(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;		fakeT := fakeError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, server.URL+"/foo/baz", nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ValidateRequest(&fakeT, path, method, nil)
0000000000000000000000000000000000000000;;		if len(fakeT.errors) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error set: %#v", fakeT.errors)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerWrongMethod(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;		fakeT := fakeError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("PUT", server.URL+path, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ValidateRequest(&fakeT, path, method, nil)
0000000000000000000000000000000000000000;;		if len(fakeT.errors) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error set: %#v", fakeT.errors)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerWrongBody(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;		body := "somebody"
0000000000000000000000000000000000000000;;		fakeT := fakeError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, server.URL+path, bytes.NewBufferString(body))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		otherbody := "otherbody"
0000000000000000000000000000000000000000;;		handler.ValidateRequest(&fakeT, path, method, &otherbody)
0000000000000000000000000000000000000000;;		if len(fakeT.errors) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error set: %#v", fakeT.errors)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestFakeHandlerNilBody(t *testing.T) {
0000000000000000000000000000000000000000;;		handler := FakeHandler{StatusCode: http.StatusOK}
0000000000000000000000000000000000000000;;		server := httptest.NewServer(&handler)
0000000000000000000000000000000000000000;;		defer server.Close()
0000000000000000000000000000000000000000;;		method := "GET"
0000000000000000000000000000000000000000;;		path := "/foo/bar"
0000000000000000000000000000000000000000;;		body := "somebody"
0000000000000000000000000000000000000000;;		fakeT := fakeError{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req, err := http.NewRequest(method, server.URL+path, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		client := http.Client{}
0000000000000000000000000000000000000000;;		_, err = client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			t.Errorf("unexpected error: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		handler.ValidateRequest(&fakeT, path, method, &body)
0000000000000000000000000000000000000000;;		if len(fakeT.errors) != 1 {
0000000000000000000000000000000000000000;;			t.Errorf("Unexpected error set: %#v", fakeT.errors)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
