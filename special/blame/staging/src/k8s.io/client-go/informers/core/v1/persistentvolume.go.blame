0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d9bf4d765bd356628f368ffd31c06dcf35531a4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by informer-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		core_v1 "k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		runtime "k8s.io/apimachinery/pkg/runtime"
0000000000000000000000000000000000000000;;		watch "k8s.io/apimachinery/pkg/watch"
0000000000000000000000000000000000000000;;		internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
0000000000000000000000000000000000000000;;		kubernetes "k8s.io/client-go/kubernetes"
0000000000000000000000000000000000000000;;		v1 "k8s.io/client-go/listers/core/v1"
0000000000000000000000000000000000000000;;		cache "k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;		time "time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PersistentVolumeInformer provides access to a shared informer and lister for
0000000000000000000000000000000000000000;;	// PersistentVolumes.
0000000000000000000000000000000000000000;;	type PersistentVolumeInformer interface {
0000000000000000000000000000000000000000;;		Informer() cache.SharedIndexInformer
0000000000000000000000000000000000000000;;		Lister() v1.PersistentVolumeLister
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type persistentVolumeInformer struct {
0000000000000000000000000000000000000000;;		factory internalinterfaces.SharedInformerFactory
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPersistentVolumeInformer(client kubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		sharedIndexInformer := cache.NewSharedIndexInformer(
0000000000000000000000000000000000000000;;			&cache.ListWatch{
0000000000000000000000000000000000000000;;				ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
0000000000000000000000000000000000000000;;					return client.CoreV1().PersistentVolumes().List(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
0000000000000000000000000000000000000000;;					return client.CoreV1().PersistentVolumes().Watch(options)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			&core_v1.PersistentVolume{},
0000000000000000000000000000000000000000;;			resyncPeriod,
0000000000000000000000000000000000000000;;			cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc},
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sharedIndexInformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *persistentVolumeInformer) Informer() cache.SharedIndexInformer {
0000000000000000000000000000000000000000;;		return f.factory.InformerFor(&core_v1.PersistentVolume{}, newPersistentVolumeInformer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *persistentVolumeInformer) Lister() v1.PersistentVolumeLister {
0000000000000000000000000000000000000000;;		return v1.NewPersistentVolumeLister(f.Informer().GetIndexer())
0000000000000000000000000000000000000000;;	}
