0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d9bf4d765bd356628f368ffd31c06dcf35531a4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		apps "k8s.io/api/apps/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// StatefulSetLister.
0000000000000000000000000000000000000000;;	type StatefulSetListerExpansion interface {
0000000000000000000000000000000000000000;;		GetPodStatefulSets(pod *v1.Pod) ([]*apps.StatefulSet, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StatefulSetNamespaceListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// StatefulSetNamespaceLister.
0000000000000000000000000000000000000000;;	type StatefulSetNamespaceListerExpansion interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodStatefulSets returns a list of StatefulSets that potentially match a pod.
0000000000000000000000000000000000000000;;	// Only the one specified in the Pod's ControllerRef will actually manage it.
0000000000000000000000000000000000000000;;	// Returns an error only if no matching StatefulSets are found.
0000000000000000000000000000000000000000;;	func (s *statefulSetLister) GetPodStatefulSets(pod *v1.Pod) ([]*apps.StatefulSet, error) {
0000000000000000000000000000000000000000;;		var selector labels.Selector
0000000000000000000000000000000000000000;;		var ps *apps.StatefulSet
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(pod.Labels) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no StatefulSets found for pod %v because it has no labels", pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		list, err := s.StatefulSets(pod.Namespace).List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var psList []*apps.StatefulSet
0000000000000000000000000000000000000000;;		for i := range list {
0000000000000000000000000000000000000000;;			ps = list[i]
0000000000000000000000000000000000000000;;			if ps.Namespace != pod.Namespace {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			selector, err = metav1.LabelSelectorAsSelector(ps.Spec.Selector)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("invalid selector: %v", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// If a StatefulSet with a nil or empty selector creeps in, it should match nothing, not everything.
0000000000000000000000000000000000000000;;			if selector.Empty() || !selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			psList = append(psList, ps)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(psList) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("could not find StatefulSet for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return psList, nil
0000000000000000000000000000000000000000;;	}
