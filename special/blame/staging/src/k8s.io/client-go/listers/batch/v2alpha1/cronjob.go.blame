0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d9bf4d765bd356628f368ffd31c06dcf35531a4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v2alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v2alpha1 "k8s.io/api/batch/v2alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobLister helps list CronJobs.
0000000000000000000000000000000000000000;;	type CronJobLister interface {
0000000000000000000000000000000000000000;;		// List lists all CronJobs in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v2alpha1.CronJob, err error)
0000000000000000000000000000000000000000;;		// CronJobs returns an object that can list and get CronJobs.
0000000000000000000000000000000000000000;;		CronJobs(namespace string) CronJobNamespaceLister
0000000000000000000000000000000000000000;;		CronJobListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cronJobLister implements the CronJobLister interface.
0000000000000000000000000000000000000000;;	type cronJobLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewCronJobLister returns a new CronJobLister.
0000000000000000000000000000000000000000;;	func NewCronJobLister(indexer cache.Indexer) CronJobLister {
0000000000000000000000000000000000000000;;		return &cronJobLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all CronJobs in the indexer.
0000000000000000000000000000000000000000;;	func (s *cronJobLister) List(selector labels.Selector) (ret []*v2alpha1.CronJob, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v2alpha1.CronJob))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobs returns an object that can list and get CronJobs.
0000000000000000000000000000000000000000;;	func (s *cronJobLister) CronJobs(namespace string) CronJobNamespaceLister {
0000000000000000000000000000000000000000;;		return cronJobNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CronJobNamespaceLister helps list and get CronJobs.
0000000000000000000000000000000000000000;;	type CronJobNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all CronJobs in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v2alpha1.CronJob, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the CronJob from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v2alpha1.CronJob, error)
0000000000000000000000000000000000000000;;		CronJobNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cronJobNamespaceLister implements the CronJobNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type cronJobNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all CronJobs in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s cronJobNamespaceLister) List(selector labels.Selector) (ret []*v2alpha1.CronJob, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v2alpha1.CronJob))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the CronJob from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s cronJobNamespaceLister) Get(name string) (*v2alpha1.CronJob, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v2alpha1.Resource("cronjob"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v2alpha1.CronJob), nil
0000000000000000000000000000000000000000;;	}
