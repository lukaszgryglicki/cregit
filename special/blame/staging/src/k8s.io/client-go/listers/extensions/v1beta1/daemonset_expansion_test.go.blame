0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
651bb2d5f5d293dd93e8a268587726b2b80411d6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"testing"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		extensions "k8s.io/api/extensions/v1beta1"
0000000000000000000000000000000000000000;;		metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/util/sets"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TestDaemonSetLister(t *testing.T) {
0000000000000000000000000000000000000000;;		store := cache.NewIndexer(cache.MetaNamespaceKeyFunc, cache.Indexers{"namespace": cache.MetaNamespaceIndexFunc})
0000000000000000000000000000000000000000;;		lister := NewDaemonSetLister(store)
0000000000000000000000000000000000000000;;		testCases := []struct {
0000000000000000000000000000000000000000;;			inDSs             []*extensions.DaemonSet
0000000000000000000000000000000000000000;;			list              func() ([]*extensions.DaemonSet, error)
0000000000000000000000000000000000000000;;			outDaemonSetNames sets.String
0000000000000000000000000000000000000000;;			expectErr         bool
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			// Basic listing
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				inDSs: []*extensions.DaemonSet{
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{Name: "basic"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				list: func() ([]*extensions.DaemonSet, error) {
0000000000000000000000000000000000000000;;					return lister.List(labels.Everything())
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				outDaemonSetNames: sets.NewString("basic"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Listing multiple daemon sets
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				inDSs: []*extensions.DaemonSet{
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{Name: "basic"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{Name: "complex"}},
0000000000000000000000000000000000000000;;					{ObjectMeta: metav1.ObjectMeta{Name: "complex2"}},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				list: func() ([]*extensions.DaemonSet, error) {
0000000000000000000000000000000000000000;;					return lister.List(labels.Everything())
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				outDaemonSetNames: sets.NewString("basic", "complex", "complex2"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// No pod labels
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				inDSs: []*extensions.DaemonSet{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "basic", Namespace: "ns"},
0000000000000000000000000000000000000000;;						Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;							Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "baz"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				list: func() ([]*extensions.DaemonSet, error) {
0000000000000000000000000000000000000000;;					pod := &v1.Pod{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "pod1", Namespace: "ns"},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return lister.GetPodDaemonSets(pod)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				outDaemonSetNames: sets.NewString(),
0000000000000000000000000000000000000000;;				expectErr:         true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// No DS selectors
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				inDSs: []*extensions.DaemonSet{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "basic", Namespace: "ns"},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				list: func() ([]*extensions.DaemonSet, error) {
0000000000000000000000000000000000000000;;					pod := &v1.Pod{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name:      "pod1",
0000000000000000000000000000000000000000;;							Namespace: "ns",
0000000000000000000000000000000000000000;;							Labels:    map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return lister.GetPodDaemonSets(pod)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				outDaemonSetNames: sets.NewString(),
0000000000000000000000000000000000000000;;				expectErr:         true,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;			// Matching labels to selectors and namespace
0000000000000000000000000000000000000000;;			{
0000000000000000000000000000000000000000;;				inDSs: []*extensions.DaemonSet{
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "foo"},
0000000000000000000000000000000000000000;;						Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;							Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;					{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{Name: "bar", Namespace: "ns"},
0000000000000000000000000000000000000000;;						Spec: extensions.DaemonSetSpec{
0000000000000000000000000000000000000000;;							Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"foo": "bar"}},
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				list: func() ([]*extensions.DaemonSet, error) {
0000000000000000000000000000000000000000;;					pod := &v1.Pod{
0000000000000000000000000000000000000000;;						ObjectMeta: metav1.ObjectMeta{
0000000000000000000000000000000000000000;;							Name:      "pod1",
0000000000000000000000000000000000000000;;							Labels:    map[string]string{"foo": "bar"},
0000000000000000000000000000000000000000;;							Namespace: "ns",
0000000000000000000000000000000000000000;;						},
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					return lister.GetPodDaemonSets(pod)
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;				outDaemonSetNames: sets.NewString("bar"),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range testCases {
0000000000000000000000000000000000000000;;			for _, r := range c.inDSs {
0000000000000000000000000000000000000000;;				store.Add(r)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			daemonSets, err := c.list()
0000000000000000000000000000000000000000;;			if err != nil && c.expectErr {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else if c.expectErr {
0000000000000000000000000000000000000000;;				t.Error("Expected error, got none")
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else if err != nil {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected error %#v", err)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			daemonSetNames := make([]string, len(daemonSets))
0000000000000000000000000000000000000000;;			for ix := range daemonSets {
0000000000000000000000000000000000000000;;				daemonSetNames[ix] = daemonSets[ix].Name
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !c.outDaemonSetNames.HasAll(daemonSetNames...) || len(daemonSetNames) != len(c.outDaemonSetNames) {
0000000000000000000000000000000000000000;;				t.Errorf("Unexpected got controllers %+v expected %+v", daemonSetNames, c.outDaemonSetNames)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
