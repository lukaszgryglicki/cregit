0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d9bf4d765bd356628f368ffd31c06dcf35531a4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicationControllerListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// ReplicationControllerLister.
0000000000000000000000000000000000000000;;	type ReplicationControllerListerExpansion interface {
0000000000000000000000000000000000000000;;		GetPodControllers(pod *v1.Pod) ([]*v1.ReplicationController, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReplicationControllerNamespaceListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// ReplicationControllerNamespaceLister.
0000000000000000000000000000000000000000;;	type ReplicationControllerNamespaceListerExpansion interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPodControllers returns a list of ReplicationControllers that potentially match a pod.
0000000000000000000000000000000000000000;;	// Only the one specified in the Pod's ControllerRef will actually manage it.
0000000000000000000000000000000000000000;;	// Returns an error only if no matching ReplicationControllers are found.
0000000000000000000000000000000000000000;;	func (s *replicationControllerLister) GetPodControllers(pod *v1.Pod) ([]*v1.ReplicationController, error) {
0000000000000000000000000000000000000000;;		if len(pod.Labels) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("no controllers found for pod %v because it has no labels", pod.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		items, err := s.ReplicationControllers(pod.Namespace).List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var controllers []*v1.ReplicationController
0000000000000000000000000000000000000000;;		for i := range items {
0000000000000000000000000000000000000000;;			rc := items[i]
0000000000000000000000000000000000000000;;			selector := labels.Set(rc.Spec.Selector).AsSelectorPreValidated()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// If an rc with a nil or empty selector creeps in, it should match nothing, not everything.
0000000000000000000000000000000000000000;;			if selector.Empty() || !selector.Matches(labels.Set(pod.Labels)) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			controllers = append(controllers, rc)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(controllers) == 0 {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("could not find controller for pod %s in namespace %s with labels: %v", pod.Name, pod.Namespace, pod.Labels)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return controllers, nil
0000000000000000000000000000000000000000;;	}
