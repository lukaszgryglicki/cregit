0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
d9bf4d765bd356628f368ffd31c06dcf35531a4a;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/api/core/v1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeConditionPredicate is a function that indicates whether the given node's conditions meet
0000000000000000000000000000000000000000;;	// some set of criteria defined by the function.
0000000000000000000000000000000000000000;;	type NodeConditionPredicate func(node *v1.Node) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeListerExpansion allows custom methods to be added to
0000000000000000000000000000000000000000;;	// NodeLister.
0000000000000000000000000000000000000000;;	type NodeListerExpansion interface {
0000000000000000000000000000000000000000;;		ListWithPredicate(predicate NodeConditionPredicate) ([]*v1.Node, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *nodeLister) ListWithPredicate(predicate NodeConditionPredicate) ([]*v1.Node, error) {
0000000000000000000000000000000000000000;;		nodes, err := l.List(labels.Everything())
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var filtered []*v1.Node
0000000000000000000000000000000000000000;;		for i := range nodes {
0000000000000000000000000000000000000000;;			if predicate(nodes[i]) {
0000000000000000000000000000000000000000;;				filtered = append(filtered, nodes[i])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return filtered, nil
0000000000000000000000000000000000000000;;	}
