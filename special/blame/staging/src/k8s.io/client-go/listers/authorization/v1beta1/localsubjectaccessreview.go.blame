0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
651bb2d5f5d293dd93e8a268587726b2b80411d6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1beta1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1beta1 "k8s.io/api/authorization/v1beta1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalSubjectAccessReviewLister helps list LocalSubjectAccessReviews.
0000000000000000000000000000000000000000;;	type LocalSubjectAccessReviewLister interface {
0000000000000000000000000000000000000000;;		// List lists all LocalSubjectAccessReviews in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.LocalSubjectAccessReview, err error)
0000000000000000000000000000000000000000;;		// LocalSubjectAccessReviews returns an object that can list and get LocalSubjectAccessReviews.
0000000000000000000000000000000000000000;;		LocalSubjectAccessReviews(namespace string) LocalSubjectAccessReviewNamespaceLister
0000000000000000000000000000000000000000;;		LocalSubjectAccessReviewListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// localSubjectAccessReviewLister implements the LocalSubjectAccessReviewLister interface.
0000000000000000000000000000000000000000;;	type localSubjectAccessReviewLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLocalSubjectAccessReviewLister returns a new LocalSubjectAccessReviewLister.
0000000000000000000000000000000000000000;;	func NewLocalSubjectAccessReviewLister(indexer cache.Indexer) LocalSubjectAccessReviewLister {
0000000000000000000000000000000000000000;;		return &localSubjectAccessReviewLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all LocalSubjectAccessReviews in the indexer.
0000000000000000000000000000000000000000;;	func (s *localSubjectAccessReviewLister) List(selector labels.Selector) (ret []*v1beta1.LocalSubjectAccessReview, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.LocalSubjectAccessReview))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalSubjectAccessReviews returns an object that can list and get LocalSubjectAccessReviews.
0000000000000000000000000000000000000000;;	func (s *localSubjectAccessReviewLister) LocalSubjectAccessReviews(namespace string) LocalSubjectAccessReviewNamespaceLister {
0000000000000000000000000000000000000000;;		return localSubjectAccessReviewNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LocalSubjectAccessReviewNamespaceLister helps list and get LocalSubjectAccessReviews.
0000000000000000000000000000000000000000;;	type LocalSubjectAccessReviewNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all LocalSubjectAccessReviews in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1beta1.LocalSubjectAccessReview, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the LocalSubjectAccessReview from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v1beta1.LocalSubjectAccessReview, error)
0000000000000000000000000000000000000000;;		LocalSubjectAccessReviewNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// localSubjectAccessReviewNamespaceLister implements the LocalSubjectAccessReviewNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type localSubjectAccessReviewNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all LocalSubjectAccessReviews in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s localSubjectAccessReviewNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.LocalSubjectAccessReview, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1beta1.LocalSubjectAccessReview))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the LocalSubjectAccessReview from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s localSubjectAccessReviewNamespaceLister) Get(name string) (*v1beta1.LocalSubjectAccessReview, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v1beta1.Resource("localsubjectaccessreview"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1beta1.LocalSubjectAccessReview), nil
0000000000000000000000000000000000000000;;	}
