0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2017 The Kubernetes Authors.
ee6fba511702c345e4e224c2ba4eb2395d19e7f0;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This file was automatically generated by lister-gen
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package v1alpha1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		v1alpha1 "k8s.io/api/settings/v1alpha1"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/api/errors"
0000000000000000000000000000000000000000;;		"k8s.io/apimachinery/pkg/labels"
0000000000000000000000000000000000000000;;		"k8s.io/client-go/tools/cache"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPresetLister helps list PodPresets.
0000000000000000000000000000000000000000;;	type PodPresetLister interface {
0000000000000000000000000000000000000000;;		// List lists all PodPresets in the indexer.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1alpha1.PodPreset, err error)
0000000000000000000000000000000000000000;;		// PodPresets returns an object that can list and get PodPresets.
0000000000000000000000000000000000000000;;		PodPresets(namespace string) PodPresetNamespaceLister
0000000000000000000000000000000000000000;;		PodPresetListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podPresetLister implements the PodPresetLister interface.
0000000000000000000000000000000000000000;;	type podPresetLister struct {
0000000000000000000000000000000000000000;;		indexer cache.Indexer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPodPresetLister returns a new PodPresetLister.
0000000000000000000000000000000000000000;;	func NewPodPresetLister(indexer cache.Indexer) PodPresetLister {
0000000000000000000000000000000000000000;;		return &podPresetLister{indexer: indexer}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all PodPresets in the indexer.
0000000000000000000000000000000000000000;;	func (s *podPresetLister) List(selector labels.Selector) (ret []*v1alpha1.PodPreset, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1alpha1.PodPreset))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPresets returns an object that can list and get PodPresets.
0000000000000000000000000000000000000000;;	func (s *podPresetLister) PodPresets(namespace string) PodPresetNamespaceLister {
0000000000000000000000000000000000000000;;		return podPresetNamespaceLister{indexer: s.indexer, namespace: namespace}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PodPresetNamespaceLister helps list and get PodPresets.
0000000000000000000000000000000000000000;;	type PodPresetNamespaceLister interface {
0000000000000000000000000000000000000000;;		// List lists all PodPresets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;		List(selector labels.Selector) (ret []*v1alpha1.PodPreset, err error)
0000000000000000000000000000000000000000;;		// Get retrieves the PodPreset from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;		Get(name string) (*v1alpha1.PodPreset, error)
0000000000000000000000000000000000000000;;		PodPresetNamespaceListerExpansion
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// podPresetNamespaceLister implements the PodPresetNamespaceLister
0000000000000000000000000000000000000000;;	// interface.
0000000000000000000000000000000000000000;;	type podPresetNamespaceLister struct {
0000000000000000000000000000000000000000;;		indexer   cache.Indexer
0000000000000000000000000000000000000000;;		namespace string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List lists all PodPresets in the indexer for a given namespace.
0000000000000000000000000000000000000000;;	func (s podPresetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodPreset, err error) {
0000000000000000000000000000000000000000;;		err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
0000000000000000000000000000000000000000;;			ret = append(ret, m.(*v1alpha1.PodPreset))
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return ret, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get retrieves the PodPreset from the indexer for a given namespace and name.
0000000000000000000000000000000000000000;;	func (s podPresetNamespaceLister) Get(name string) (*v1alpha1.PodPreset, error) {
0000000000000000000000000000000000000000;;		obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !exists {
0000000000000000000000000000000000000000;;			return nil, errors.NewNotFound(v1alpha1.Resource("podpreset"), name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return obj.(*v1alpha1.PodPreset), nil
0000000000000000000000000000000000000000;;	}
