0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2016 The Kubernetes Authors.
9afcceceec30ce3fcf49272665c97f0a0b80cbba;staging/src/k8s.io/client-go/godeps-json-updater.go[staging/src/k8s.io/client-go/godeps-json-updater.go][staging/godeps-json-updater.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		flag "github.com/spf13/pflag"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		godepsFile         = flag.String("godeps-file", "", "absolute path to Godeps.json")
0000000000000000000000000000000000000000;;		overrideImportPath = flag.String("override-import-path", "", "import path to be written into the Godeps.json, e.g., k8s.io/client-go")
0000000000000000000000000000000000000000;;		ignoredPrefixes    = flag.StringSlice("ignored-prefixes", []string{"k8s.io/"}, "any godep entry prefixed with the ignored-prefix will be deleted from Godeps.json")
0000000000000000000000000000000000000000;;		rewrittenPrefixes  = flag.StringSlice("rewritten-prefixes", []string{}, fmt.Sprintf("any godep entry prefixed with the rewritten-prefix will be filled will dummy rev %q; overridden by ignored-prefixes", dummyRev))
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const dummyRev = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dependency struct {
0000000000000000000000000000000000000000;;		ImportPath string
0000000000000000000000000000000000000000;;		Rev        string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Godeps struct {
0000000000000000000000000000000000000000;;		ImportPath   string
0000000000000000000000000000000000000000;;		GoVersion    string
0000000000000000000000000000000000000000;;		GodepVersion string
0000000000000000000000000000000000000000;;		Packages     []string `json:",omitempty"` // Arguments to save, if any.
0000000000000000000000000000000000000000;;		Deps         []Dependency
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// rewrites the Godeps.ImportPath, removes the Deps whose ImportPath contains "k8s.io/kubernetes" or "k8s.io/apimachinery".
0000000000000000000000000000000000000000;;	// entries for k8s.io/apimahinery will be written by the publishing robot before publishing to the repository.
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;		var g Godeps
0000000000000000000000000000000000000000;;		if len(*godepsFile) == 0 {
0000000000000000000000000000000000000000;;			log.Fatalf("absolute path to Godeps.json is required")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f, err := os.OpenFile(*godepsFile, os.O_RDWR, 0666)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("cannot open file %q: %v", *godepsFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer f.Close()
0000000000000000000000000000000000000000;;		err = json.NewDecoder(f).Decode(&g)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("Unable to parse %q: %v", *godepsFile, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(*overrideImportPath) != 0 {
0000000000000000000000000000000000000000;;			g.ImportPath = *overrideImportPath
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// removes the Deps whose ImportPath contains "k8s.io/kubernetes"
0000000000000000000000000000000000000000;;		i := 0
0000000000000000000000000000000000000000;;		for _, dep := range g.Deps {
0000000000000000000000000000000000000000;;			ignored := false
0000000000000000000000000000000000000000;;			for _, ignoredPrefix := range *ignoredPrefixes {
0000000000000000000000000000000000000000;;				if strings.HasPrefix(dep.ImportPath, ignoredPrefix) {
0000000000000000000000000000000000000000;;					ignored = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ignored {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			rewritten := false
0000000000000000000000000000000000000000;;			for _, rewrittenPrefix := range *rewrittenPrefixes {
0000000000000000000000000000000000000000;;				if strings.HasPrefix(dep.ImportPath, rewrittenPrefix) {
0000000000000000000000000000000000000000;;					rewritten = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if rewritten {
0000000000000000000000000000000000000000;;				dep.Rev = dummyRev
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			g.Deps[i] = dep
0000000000000000000000000000000000000000;;			i++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		g.Deps = g.Deps[:i]
0000000000000000000000000000000000000000;;		b, err := json.MarshalIndent(g, "", "\t")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err := f.WriteAt(append(b, '\n'), 0)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := f.Truncate(int64(n)); err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
