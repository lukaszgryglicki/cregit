53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Code generated by protoc-gen-go.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// source: google/protobuf/timestamp.proto
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// DO NOT EDIT!
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	package google_protobuf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import proto "github.com/golang/protobuf/proto"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import fmt "fmt"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import math "math"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Reference imports to suppress errors if they are not otherwise used.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = proto.Marshal
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = fmt.Errorf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = math.Inf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// A Timestamp represents a point in time independent of any time zone
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// or calendar, represented as seconds and fractions of seconds at
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// nanosecond resolution in UTC Epoch time. It is encoded using the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Proleptic Gregorian Calendar which extends the Gregorian calendar
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// backwards to year one. It is encoded assuming all minutes are 60
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// seconds long, i.e. leap seconds are "smeared" so that no leap second
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// table is needed for interpretation. Range is from
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// By restricting to that range, we ensure that we can convert to
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// and from  RFC 3339 date strings.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Example 1: Compute Timestamp from POSIX `time()`.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     Timestamp timestamp;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_seconds(time(NULL));
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_nanos(0);
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Example 2: Compute Timestamp from POSIX `gettimeofday()`.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     struct timeval tv;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     gettimeofday(&tv, NULL);
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     Timestamp timestamp;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_seconds(tv.tv_sec);
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_nanos(tv.tv_usec * 1000);
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     FILETIME ft;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     GetSystemTimeAsFileTime(&ft);
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     Timestamp timestamp;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     long millis = System.currentTimeMillis();
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//         .setNanos((int) ((millis % 1000) * 1000000)).build();
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Example 5: Compute Timestamp from current time in Python.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     now = time.time()
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     seconds = int(now)
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     nanos = int((now - seconds) * 10**9)
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     timestamp = Timestamp(seconds=seconds, nanos=nanos)
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	type Timestamp struct {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// Represents seconds of UTC time since Unix epoch
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// 9999-12-31T23:59:59Z inclusive.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// Non-negative fractions of a second at nanosecond resolution. Negative
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// second values with fractions must still have non-negative nanos values
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// that count forward in time. Must be from 0 to 999,999,999
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// inclusive.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (m *Timestamp) Reset()                    { *m = Timestamp{} }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (*Timestamp) ProtoMessage()               {}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (*Timestamp) XXX_WellKnownType() string   { return "Timestamp" }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func init() {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		proto.RegisterType((*Timestamp)(nil), "google.protobuf.Timestamp")
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func init() { proto.RegisterFile("google/protobuf/timestamp.proto", fileDescriptor7) }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var fileDescriptor7 = []byte{
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// 165 bytes of a gzipped FileDescriptorProto
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x40, 0x71, 0xd6, 0x20, 0x08, 0xc7, 0x29, 0x84, 0x4b, 0x38, 0x39,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x3f, 0x57, 0x0f, 0xcd, 0x4c, 0x27, 0x3e, 0xb8, 0x89, 0x01, 0x20, 0xa1, 0x00, 0xc6, 0x05, 0x8c,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x8c, 0x3f, 0x18, 0x19, 0x17, 0x31, 0x31, 0xbb, 0x07, 0x38, 0xad, 0x62, 0x92, 0x73, 0x87, 0xa8,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x0f, 0x80, 0xaa, 0xd7, 0x0b, 0x4f, 0xcd, 0xc9, 0xf1, 0xce, 0xcb, 0x2f, 0xcf, 0x0b, 0xa9, 0x2c,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x48, 0x2d, 0x4e, 0x62, 0x03, 0x1b, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x10, 0x2f, 0xb9,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x47, 0xcd, 0x00, 0x00, 0x00,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
