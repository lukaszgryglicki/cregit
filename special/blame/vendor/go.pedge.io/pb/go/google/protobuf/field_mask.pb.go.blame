53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Code generated by protoc-gen-go.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// source: google/protobuf/field_mask.proto
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// DO NOT EDIT!
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	package google_protobuf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import proto "github.com/golang/protobuf/proto"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import fmt "fmt"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	import math "math"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Reference imports to suppress errors if they are not otherwise used.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = proto.Marshal
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = fmt.Errorf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var _ = math.Inf
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// `FieldMask` represents a set of symbolic field paths, for example:
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     paths: "f.a"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     paths: "f.b.d"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Here `f` represents a field in some root message, `a` and `b`
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// fields in the message found in `f`, and `d` a field found in the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// message in `f.b`.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Field masks are used to specify a subset of fields that should be
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// returned by a get operation or modified by an update operation.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Field masks also have a custom JSON encoding (see below).
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// # Field Masks in Projections
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// When used in the context of a projection, a response message or
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// sub-message is filtered by the API to only contain those fields as
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// specified in the mask. For example, if the mask in the previous
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// example is applied to a response message as follows:
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     f {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       a : 22
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       b {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//         d : 1
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//         x : 2
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       y : 13
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     z: 8
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// The result will not contain specific values for fields x,y and z
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// (their value will be set to the default, and omitted in proto text
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// output):
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     f {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       a : 22
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       b {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//         d : 1
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// A repeated field is not allowed except at the last position of a
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// field mask.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// If a FieldMask object is not present in a get operation, the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// operation applies to all fields (as if a FieldMask of all fields
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// had been specified).
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Note that a field mask does not necessarily applies to the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// top-level response message. In case of a REST get operation, the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// field mask applies directly to the response, but in case of a REST
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// list operation, the mask instead applies to each individual message
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// in the returned resource list. In case of a REST custom method,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// other definitions may be used. Where the mask applies will be
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// clearly documented together with its declaration in the API.  In
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// any case, the effect on the returned resource/resources is required
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// behavior for APIs.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// # Field Masks in Update Operations
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// A field mask in update operations specifies which fields of the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// targeted resource are going to be updated. The API is required
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// to only change the values of the fields as specified in the mask
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// and leave the others untouched. If a resource is passed in to
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// describe the updated values, the API ignores the values of all
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// fields not covered by the mask.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// In order to reset a field's value to the default, the field must
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// be in the mask and set to the default value in the provided resource.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Hence, in order to reset all fields of a resource, provide a default
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// instance of the resource and set all fields in the mask, or do
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// not provide a mask as described below.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// If a field mask is not present on update, the operation applies to
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// all fields (as if a field mask of all fields has been specified).
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// Note that in the presence of schema evolution, this may mean that
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// fields the client does not know and has therefore not filled into
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// the request will be reset to their default. If this is unwanted
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// behavior, a specific service may require a client to always specify
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// a field mask, producing an error if not.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// As with get operations, the location of the resource which
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// describes the updated values in the request message depends on the
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// operation kind. In any case, the effect of the field mask is
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// required to be honored by the API.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// ## Considerations for HTTP REST
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// The HTTP kind of an update operation which uses a field mask must
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// be set to PATCH instead of PUT in order to satisfy HTTP semantics
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// (PUT must only be used for full updates).
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// # JSON Encoding of Field Masks
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// In JSON, a field mask is encoded as a single string where paths are
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// separated by a comma. Fields name in each path are converted
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// to/from lower-camel naming conventions.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// As an example, consider the following message declarations:
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     message Profile {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       User user = 1;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       Photo photo = 2;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     message User {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       string display_name = 1;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       string address = 2;
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// In proto a field mask for `Profile` may look as such:
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     mask {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       paths: "user.display_name"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       paths: "photo"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	// In JSON, the same mask is represented as below:
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//       mask: "user.displayName,photo"
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//     }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	//
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	type FieldMask struct {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// The set of field mask paths.
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		Paths []string `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (m *FieldMask) Reset()                    { *m = FieldMask{} }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (m *FieldMask) String() string            { return proto.CompactTextString(m) }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (*FieldMask) ProtoMessage()               {}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func (*FieldMask) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func init() {
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		proto.RegisterType((*FieldMask)(nil), "google.protobuf.FieldMask")
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	func init() { proto.RegisterFile("google/protobuf/field_mask.proto", fileDescriptor4) }
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	var fileDescriptor4 = []byte{
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		// 147 bytes of a gzipped FileDescriptorProto
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcf, 0xcf, 0x4f,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0xcb, 0x4c, 0xcd,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x49, 0x89, 0xcf, 0x4d, 0x2c, 0xce, 0xd6, 0x03, 0x8b, 0x09, 0xf1, 0x43, 0x54, 0xe8, 0xc1, 0x54,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x28, 0x29, 0x72, 0x71, 0xba, 0x81, 0x14, 0xf9, 0x02, 0xd5, 0x08, 0x89, 0x70, 0xb1, 0x16, 0x24,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x96, 0x64, 0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x41, 0x38, 0x4e, 0x81, 0x5c, 0xc2,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0xc9, 0xf9, 0xb9, 0x7a, 0x68, 0x3a, 0x9d, 0xf8, 0xe0, 0xfa, 0x02, 0x40, 0x42, 0x01, 0x8c, 0x0b,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x18, 0x19, 0x17, 0x31, 0x31, 0xbb, 0x07, 0x38, 0xad, 0x62, 0x92, 0x73, 0x87, 0x28, 0x0e, 0x80,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x2a, 0xd6, 0x0b, 0x4f, 0xcd, 0xc9, 0xf1, 0xce, 0xcb, 0x2f, 0xcf, 0x0b, 0xa9, 0x2c, 0x48, 0x2d,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x4e, 0x62, 0x03, 0x9b, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x21, 0xb1, 0xe8, 0x01, 0xb1,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;		0x00, 0x00, 0x00,
53795d8dd25f2c7edfe0581e1b07058df18938f5;;	}
