0000000000000000000000000000000000000000;;	// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT
372f1bceb3e2da05404dc30071e64aebe6b55b42;;	
0000000000000000000000000000000000000000;;	package windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ unsafe.Pointer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		modadvapi32 = NewLazySystemDLL("advapi32.dll")
0000000000000000000000000000000000000000;;		modkernel32 = NewLazySystemDLL("kernel32.dll")
0000000000000000000000000000000000000000;;		modshell32  = NewLazySystemDLL("shell32.dll")
0000000000000000000000000000000000000000;;		modmswsock  = NewLazySystemDLL("mswsock.dll")
0000000000000000000000000000000000000000;;		modcrypt32  = NewLazySystemDLL("crypt32.dll")
0000000000000000000000000000000000000000;;		modws2_32   = NewLazySystemDLL("ws2_32.dll")
0000000000000000000000000000000000000000;;		moddnsapi   = NewLazySystemDLL("dnsapi.dll")
0000000000000000000000000000000000000000;;		modiphlpapi = NewLazySystemDLL("iphlpapi.dll")
0000000000000000000000000000000000000000;;		modsecur32  = NewLazySystemDLL("secur32.dll")
0000000000000000000000000000000000000000;;		modnetapi32 = NewLazySystemDLL("netapi32.dll")
0000000000000000000000000000000000000000;;		moduserenv  = NewLazySystemDLL("userenv.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procRegisterEventSourceW               = modadvapi32.NewProc("RegisterEventSourceW")
0000000000000000000000000000000000000000;;		procDeregisterEventSource              = modadvapi32.NewProc("DeregisterEventSource")
0000000000000000000000000000000000000000;;		procReportEventW                       = modadvapi32.NewProc("ReportEventW")
0000000000000000000000000000000000000000;;		procOpenSCManagerW                     = modadvapi32.NewProc("OpenSCManagerW")
0000000000000000000000000000000000000000;;		procCloseServiceHandle                 = modadvapi32.NewProc("CloseServiceHandle")
0000000000000000000000000000000000000000;;		procCreateServiceW                     = modadvapi32.NewProc("CreateServiceW")
0000000000000000000000000000000000000000;;		procOpenServiceW                       = modadvapi32.NewProc("OpenServiceW")
0000000000000000000000000000000000000000;;		procDeleteService                      = modadvapi32.NewProc("DeleteService")
0000000000000000000000000000000000000000;;		procStartServiceW                      = modadvapi32.NewProc("StartServiceW")
0000000000000000000000000000000000000000;;		procQueryServiceStatus                 = modadvapi32.NewProc("QueryServiceStatus")
0000000000000000000000000000000000000000;;		procControlService                     = modadvapi32.NewProc("ControlService")
0000000000000000000000000000000000000000;;		procStartServiceCtrlDispatcherW        = modadvapi32.NewProc("StartServiceCtrlDispatcherW")
0000000000000000000000000000000000000000;;		procSetServiceStatus                   = modadvapi32.NewProc("SetServiceStatus")
0000000000000000000000000000000000000000;;		procChangeServiceConfigW               = modadvapi32.NewProc("ChangeServiceConfigW")
0000000000000000000000000000000000000000;;		procQueryServiceConfigW                = modadvapi32.NewProc("QueryServiceConfigW")
0000000000000000000000000000000000000000;;		procChangeServiceConfig2W              = modadvapi32.NewProc("ChangeServiceConfig2W")
0000000000000000000000000000000000000000;;		procQueryServiceConfig2W               = modadvapi32.NewProc("QueryServiceConfig2W")
0000000000000000000000000000000000000000;;		procGetLastError                       = modkernel32.NewProc("GetLastError")
0000000000000000000000000000000000000000;;		procLoadLibraryW                       = modkernel32.NewProc("LoadLibraryW")
0000000000000000000000000000000000000000;;		procLoadLibraryExW                     = modkernel32.NewProc("LoadLibraryExW")
0000000000000000000000000000000000000000;;		procFreeLibrary                        = modkernel32.NewProc("FreeLibrary")
0000000000000000000000000000000000000000;;		procGetProcAddress                     = modkernel32.NewProc("GetProcAddress")
0000000000000000000000000000000000000000;;		procGetVersion                         = modkernel32.NewProc("GetVersion")
0000000000000000000000000000000000000000;;		procFormatMessageW                     = modkernel32.NewProc("FormatMessageW")
0000000000000000000000000000000000000000;;		procExitProcess                        = modkernel32.NewProc("ExitProcess")
0000000000000000000000000000000000000000;;		procCreateFileW                        = modkernel32.NewProc("CreateFileW")
0000000000000000000000000000000000000000;;		procReadFile                           = modkernel32.NewProc("ReadFile")
0000000000000000000000000000000000000000;;		procWriteFile                          = modkernel32.NewProc("WriteFile")
0000000000000000000000000000000000000000;;		procSetFilePointer                     = modkernel32.NewProc("SetFilePointer")
0000000000000000000000000000000000000000;;		procCloseHandle                        = modkernel32.NewProc("CloseHandle")
0000000000000000000000000000000000000000;;		procGetStdHandle                       = modkernel32.NewProc("GetStdHandle")
0000000000000000000000000000000000000000;;		procFindFirstFileW                     = modkernel32.NewProc("FindFirstFileW")
0000000000000000000000000000000000000000;;		procFindNextFileW                      = modkernel32.NewProc("FindNextFileW")
0000000000000000000000000000000000000000;;		procFindClose                          = modkernel32.NewProc("FindClose")
0000000000000000000000000000000000000000;;		procGetFileInformationByHandle         = modkernel32.NewProc("GetFileInformationByHandle")
0000000000000000000000000000000000000000;;		procGetCurrentDirectoryW               = modkernel32.NewProc("GetCurrentDirectoryW")
0000000000000000000000000000000000000000;;		procSetCurrentDirectoryW               = modkernel32.NewProc("SetCurrentDirectoryW")
0000000000000000000000000000000000000000;;		procCreateDirectoryW                   = modkernel32.NewProc("CreateDirectoryW")
0000000000000000000000000000000000000000;;		procRemoveDirectoryW                   = modkernel32.NewProc("RemoveDirectoryW")
0000000000000000000000000000000000000000;;		procDeleteFileW                        = modkernel32.NewProc("DeleteFileW")
0000000000000000000000000000000000000000;;		procMoveFileW                          = modkernel32.NewProc("MoveFileW")
0000000000000000000000000000000000000000;;		procMoveFileExW                        = modkernel32.NewProc("MoveFileExW")
0000000000000000000000000000000000000000;;		procGetComputerNameW                   = modkernel32.NewProc("GetComputerNameW")
0000000000000000000000000000000000000000;;		procGetComputerNameExW                 = modkernel32.NewProc("GetComputerNameExW")
0000000000000000000000000000000000000000;;		procSetEndOfFile                       = modkernel32.NewProc("SetEndOfFile")
0000000000000000000000000000000000000000;;		procGetSystemTimeAsFileTime            = modkernel32.NewProc("GetSystemTimeAsFileTime")
0000000000000000000000000000000000000000;;		procGetTimeZoneInformation             = modkernel32.NewProc("GetTimeZoneInformation")
0000000000000000000000000000000000000000;;		procCreateIoCompletionPort             = modkernel32.NewProc("CreateIoCompletionPort")
0000000000000000000000000000000000000000;;		procGetQueuedCompletionStatus          = modkernel32.NewProc("GetQueuedCompletionStatus")
0000000000000000000000000000000000000000;;		procPostQueuedCompletionStatus         = modkernel32.NewProc("PostQueuedCompletionStatus")
0000000000000000000000000000000000000000;;		procCancelIo                           = modkernel32.NewProc("CancelIo")
0000000000000000000000000000000000000000;;		procCancelIoEx                         = modkernel32.NewProc("CancelIoEx")
0000000000000000000000000000000000000000;;		procCreateProcessW                     = modkernel32.NewProc("CreateProcessW")
0000000000000000000000000000000000000000;;		procOpenProcess                        = modkernel32.NewProc("OpenProcess")
0000000000000000000000000000000000000000;;		procTerminateProcess                   = modkernel32.NewProc("TerminateProcess")
0000000000000000000000000000000000000000;;		procGetExitCodeProcess                 = modkernel32.NewProc("GetExitCodeProcess")
0000000000000000000000000000000000000000;;		procGetStartupInfoW                    = modkernel32.NewProc("GetStartupInfoW")
0000000000000000000000000000000000000000;;		procGetCurrentProcess                  = modkernel32.NewProc("GetCurrentProcess")
0000000000000000000000000000000000000000;;		procGetProcessTimes                    = modkernel32.NewProc("GetProcessTimes")
0000000000000000000000000000000000000000;;		procDuplicateHandle                    = modkernel32.NewProc("DuplicateHandle")
0000000000000000000000000000000000000000;;		procWaitForSingleObject                = modkernel32.NewProc("WaitForSingleObject")
0000000000000000000000000000000000000000;;		procGetTempPathW                       = modkernel32.NewProc("GetTempPathW")
0000000000000000000000000000000000000000;;		procCreatePipe                         = modkernel32.NewProc("CreatePipe")
0000000000000000000000000000000000000000;;		procGetFileType                        = modkernel32.NewProc("GetFileType")
0000000000000000000000000000000000000000;;		procCryptAcquireContextW               = modadvapi32.NewProc("CryptAcquireContextW")
0000000000000000000000000000000000000000;;		procCryptReleaseContext                = modadvapi32.NewProc("CryptReleaseContext")
0000000000000000000000000000000000000000;;		procCryptGenRandom                     = modadvapi32.NewProc("CryptGenRandom")
0000000000000000000000000000000000000000;;		procGetEnvironmentStringsW             = modkernel32.NewProc("GetEnvironmentStringsW")
0000000000000000000000000000000000000000;;		procFreeEnvironmentStringsW            = modkernel32.NewProc("FreeEnvironmentStringsW")
0000000000000000000000000000000000000000;;		procGetEnvironmentVariableW            = modkernel32.NewProc("GetEnvironmentVariableW")
0000000000000000000000000000000000000000;;		procSetEnvironmentVariableW            = modkernel32.NewProc("SetEnvironmentVariableW")
0000000000000000000000000000000000000000;;		procSetFileTime                        = modkernel32.NewProc("SetFileTime")
0000000000000000000000000000000000000000;;		procGetFileAttributesW                 = modkernel32.NewProc("GetFileAttributesW")
0000000000000000000000000000000000000000;;		procSetFileAttributesW                 = modkernel32.NewProc("SetFileAttributesW")
0000000000000000000000000000000000000000;;		procGetFileAttributesExW               = modkernel32.NewProc("GetFileAttributesExW")
0000000000000000000000000000000000000000;;		procGetCommandLineW                    = modkernel32.NewProc("GetCommandLineW")
0000000000000000000000000000000000000000;;		procCommandLineToArgvW                 = modshell32.NewProc("CommandLineToArgvW")
0000000000000000000000000000000000000000;;		procLocalFree                          = modkernel32.NewProc("LocalFree")
0000000000000000000000000000000000000000;;		procSetHandleInformation               = modkernel32.NewProc("SetHandleInformation")
0000000000000000000000000000000000000000;;		procFlushFileBuffers                   = modkernel32.NewProc("FlushFileBuffers")
0000000000000000000000000000000000000000;;		procGetFullPathNameW                   = modkernel32.NewProc("GetFullPathNameW")
0000000000000000000000000000000000000000;;		procGetLongPathNameW                   = modkernel32.NewProc("GetLongPathNameW")
0000000000000000000000000000000000000000;;		procGetShortPathNameW                  = modkernel32.NewProc("GetShortPathNameW")
0000000000000000000000000000000000000000;;		procCreateFileMappingW                 = modkernel32.NewProc("CreateFileMappingW")
0000000000000000000000000000000000000000;;		procMapViewOfFile                      = modkernel32.NewProc("MapViewOfFile")
0000000000000000000000000000000000000000;;		procUnmapViewOfFile                    = modkernel32.NewProc("UnmapViewOfFile")
0000000000000000000000000000000000000000;;		procFlushViewOfFile                    = modkernel32.NewProc("FlushViewOfFile")
0000000000000000000000000000000000000000;;		procVirtualLock                        = modkernel32.NewProc("VirtualLock")
0000000000000000000000000000000000000000;;		procVirtualUnlock                      = modkernel32.NewProc("VirtualUnlock")
0000000000000000000000000000000000000000;;		procTransmitFile                       = modmswsock.NewProc("TransmitFile")
0000000000000000000000000000000000000000;;		procReadDirectoryChangesW              = modkernel32.NewProc("ReadDirectoryChangesW")
0000000000000000000000000000000000000000;;		procCertOpenSystemStoreW               = modcrypt32.NewProc("CertOpenSystemStoreW")
0000000000000000000000000000000000000000;;		procCertOpenStore                      = modcrypt32.NewProc("CertOpenStore")
0000000000000000000000000000000000000000;;		procCertEnumCertificatesInStore        = modcrypt32.NewProc("CertEnumCertificatesInStore")
0000000000000000000000000000000000000000;;		procCertAddCertificateContextToStore   = modcrypt32.NewProc("CertAddCertificateContextToStore")
0000000000000000000000000000000000000000;;		procCertCloseStore                     = modcrypt32.NewProc("CertCloseStore")
0000000000000000000000000000000000000000;;		procCertGetCertificateChain            = modcrypt32.NewProc("CertGetCertificateChain")
0000000000000000000000000000000000000000;;		procCertFreeCertificateChain           = modcrypt32.NewProc("CertFreeCertificateChain")
0000000000000000000000000000000000000000;;		procCertCreateCertificateContext       = modcrypt32.NewProc("CertCreateCertificateContext")
0000000000000000000000000000000000000000;;		procCertFreeCertificateContext         = modcrypt32.NewProc("CertFreeCertificateContext")
0000000000000000000000000000000000000000;;		procCertVerifyCertificateChainPolicy   = modcrypt32.NewProc("CertVerifyCertificateChainPolicy")
0000000000000000000000000000000000000000;;		procRegOpenKeyExW                      = modadvapi32.NewProc("RegOpenKeyExW")
0000000000000000000000000000000000000000;;		procRegCloseKey                        = modadvapi32.NewProc("RegCloseKey")
0000000000000000000000000000000000000000;;		procRegQueryInfoKeyW                   = modadvapi32.NewProc("RegQueryInfoKeyW")
0000000000000000000000000000000000000000;;		procRegEnumKeyExW                      = modadvapi32.NewProc("RegEnumKeyExW")
0000000000000000000000000000000000000000;;		procRegQueryValueExW                   = modadvapi32.NewProc("RegQueryValueExW")
0000000000000000000000000000000000000000;;		procGetCurrentProcessId                = modkernel32.NewProc("GetCurrentProcessId")
0000000000000000000000000000000000000000;;		procGetConsoleMode                     = modkernel32.NewProc("GetConsoleMode")
0000000000000000000000000000000000000000;;		procWriteConsoleW                      = modkernel32.NewProc("WriteConsoleW")
0000000000000000000000000000000000000000;;		procReadConsoleW                       = modkernel32.NewProc("ReadConsoleW")
0000000000000000000000000000000000000000;;		procCreateToolhelp32Snapshot           = modkernel32.NewProc("CreateToolhelp32Snapshot")
0000000000000000000000000000000000000000;;		procProcess32FirstW                    = modkernel32.NewProc("Process32FirstW")
0000000000000000000000000000000000000000;;		procProcess32NextW                     = modkernel32.NewProc("Process32NextW")
0000000000000000000000000000000000000000;;		procDeviceIoControl                    = modkernel32.NewProc("DeviceIoControl")
0000000000000000000000000000000000000000;;		procCreateSymbolicLinkW                = modkernel32.NewProc("CreateSymbolicLinkW")
0000000000000000000000000000000000000000;;		procCreateHardLinkW                    = modkernel32.NewProc("CreateHardLinkW")
0000000000000000000000000000000000000000;;		procGetCurrentThreadId                 = modkernel32.NewProc("GetCurrentThreadId")
0000000000000000000000000000000000000000;;		procCreateEventW                       = modkernel32.NewProc("CreateEventW")
0000000000000000000000000000000000000000;;		procSetEvent                           = modkernel32.NewProc("SetEvent")
0000000000000000000000000000000000000000;;		procWSAStartup                         = modws2_32.NewProc("WSAStartup")
0000000000000000000000000000000000000000;;		procWSACleanup                         = modws2_32.NewProc("WSACleanup")
0000000000000000000000000000000000000000;;		procWSAIoctl                           = modws2_32.NewProc("WSAIoctl")
0000000000000000000000000000000000000000;;		procsocket                             = modws2_32.NewProc("socket")
0000000000000000000000000000000000000000;;		procsetsockopt                         = modws2_32.NewProc("setsockopt")
0000000000000000000000000000000000000000;;		procgetsockopt                         = modws2_32.NewProc("getsockopt")
0000000000000000000000000000000000000000;;		procbind                               = modws2_32.NewProc("bind")
0000000000000000000000000000000000000000;;		procconnect                            = modws2_32.NewProc("connect")
0000000000000000000000000000000000000000;;		procgetsockname                        = modws2_32.NewProc("getsockname")
0000000000000000000000000000000000000000;;		procgetpeername                        = modws2_32.NewProc("getpeername")
0000000000000000000000000000000000000000;;		proclisten                             = modws2_32.NewProc("listen")
0000000000000000000000000000000000000000;;		procshutdown                           = modws2_32.NewProc("shutdown")
0000000000000000000000000000000000000000;;		procclosesocket                        = modws2_32.NewProc("closesocket")
0000000000000000000000000000000000000000;;		procAcceptEx                           = modmswsock.NewProc("AcceptEx")
0000000000000000000000000000000000000000;;		procGetAcceptExSockaddrs               = modmswsock.NewProc("GetAcceptExSockaddrs")
0000000000000000000000000000000000000000;;		procWSARecv                            = modws2_32.NewProc("WSARecv")
0000000000000000000000000000000000000000;;		procWSASend                            = modws2_32.NewProc("WSASend")
0000000000000000000000000000000000000000;;		procWSARecvFrom                        = modws2_32.NewProc("WSARecvFrom")
0000000000000000000000000000000000000000;;		procWSASendTo                          = modws2_32.NewProc("WSASendTo")
0000000000000000000000000000000000000000;;		procgethostbyname                      = modws2_32.NewProc("gethostbyname")
0000000000000000000000000000000000000000;;		procgetservbyname                      = modws2_32.NewProc("getservbyname")
0000000000000000000000000000000000000000;;		procntohs                              = modws2_32.NewProc("ntohs")
0000000000000000000000000000000000000000;;		procgetprotobyname                     = modws2_32.NewProc("getprotobyname")
0000000000000000000000000000000000000000;;		procDnsQuery_W                         = moddnsapi.NewProc("DnsQuery_W")
0000000000000000000000000000000000000000;;		procDnsRecordListFree                  = moddnsapi.NewProc("DnsRecordListFree")
0000000000000000000000000000000000000000;;		procDnsNameCompare_W                   = moddnsapi.NewProc("DnsNameCompare_W")
0000000000000000000000000000000000000000;;		procGetAddrInfoW                       = modws2_32.NewProc("GetAddrInfoW")
0000000000000000000000000000000000000000;;		procFreeAddrInfoW                      = modws2_32.NewProc("FreeAddrInfoW")
0000000000000000000000000000000000000000;;		procGetIfEntry                         = modiphlpapi.NewProc("GetIfEntry")
0000000000000000000000000000000000000000;;		procGetAdaptersInfo                    = modiphlpapi.NewProc("GetAdaptersInfo")
0000000000000000000000000000000000000000;;		procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes")
0000000000000000000000000000000000000000;;		procWSAEnumProtocolsW                  = modws2_32.NewProc("WSAEnumProtocolsW")
0000000000000000000000000000000000000000;;		procGetAdaptersAddresses               = modiphlpapi.NewProc("GetAdaptersAddresses")
0000000000000000000000000000000000000000;;		procGetACP                             = modkernel32.NewProc("GetACP")
0000000000000000000000000000000000000000;;		procMultiByteToWideChar                = modkernel32.NewProc("MultiByteToWideChar")
0000000000000000000000000000000000000000;;		procTranslateNameW                     = modsecur32.NewProc("TranslateNameW")
0000000000000000000000000000000000000000;;		procGetUserNameExW                     = modsecur32.NewProc("GetUserNameExW")
0000000000000000000000000000000000000000;;		procNetUserGetInfo                     = modnetapi32.NewProc("NetUserGetInfo")
0000000000000000000000000000000000000000;;		procNetGetJoinInformation              = modnetapi32.NewProc("NetGetJoinInformation")
0000000000000000000000000000000000000000;;		procNetApiBufferFree                   = modnetapi32.NewProc("NetApiBufferFree")
0000000000000000000000000000000000000000;;		procLookupAccountSidW                  = modadvapi32.NewProc("LookupAccountSidW")
0000000000000000000000000000000000000000;;		procLookupAccountNameW                 = modadvapi32.NewProc("LookupAccountNameW")
0000000000000000000000000000000000000000;;		procConvertSidToStringSidW             = modadvapi32.NewProc("ConvertSidToStringSidW")
0000000000000000000000000000000000000000;;		procConvertStringSidToSidW             = modadvapi32.NewProc("ConvertStringSidToSidW")
0000000000000000000000000000000000000000;;		procGetLengthSid                       = modadvapi32.NewProc("GetLengthSid")
0000000000000000000000000000000000000000;;		procCopySid                            = modadvapi32.NewProc("CopySid")
0000000000000000000000000000000000000000;;		procAllocateAndInitializeSid           = modadvapi32.NewProc("AllocateAndInitializeSid")
0000000000000000000000000000000000000000;;		procFreeSid                            = modadvapi32.NewProc("FreeSid")
0000000000000000000000000000000000000000;;		procEqualSid                           = modadvapi32.NewProc("EqualSid")
0000000000000000000000000000000000000000;;		procOpenProcessToken                   = modadvapi32.NewProc("OpenProcessToken")
0000000000000000000000000000000000000000;;		procGetTokenInformation                = modadvapi32.NewProc("GetTokenInformation")
0000000000000000000000000000000000000000;;		procGetUserProfileDirectoryW           = moduserenv.NewProc("GetUserProfileDirectoryW")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegisterEventSource(uncServerName *uint16, sourceName *uint16) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procRegisterEventSourceW.Addr(), 2, uintptr(unsafe.Pointer(uncServerName)), uintptr(unsafe.Pointer(sourceName)), 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeregisterEventSource(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procDeregisterEventSource.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReportEvent(log Handle, etype uint16, category uint16, eventId uint32, usrSId uintptr, numStrings uint16, dataSize uint32, strings **uint16, rawData *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procReportEventW.Addr(), 9, uintptr(log), uintptr(etype), uintptr(category), uintptr(eventId), uintptr(usrSId), uintptr(numStrings), uintptr(dataSize), uintptr(unsafe.Pointer(strings)), uintptr(unsafe.Pointer(rawData)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpenSCManager(machineName *uint16, databaseName *uint16, access uint32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procOpenSCManagerW.Addr(), 3, uintptr(unsafe.Pointer(machineName)), uintptr(unsafe.Pointer(databaseName)), uintptr(access))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CloseServiceHandle(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCloseServiceHandle.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateService(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall15(procCreateServiceW.Addr(), 13, uintptr(mgr), uintptr(unsafe.Pointer(serviceName)), uintptr(unsafe.Pointer(displayName)), uintptr(access), uintptr(srvType), uintptr(startType), uintptr(errCtl), uintptr(unsafe.Pointer(pathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpenService(mgr Handle, serviceName *uint16, access uint32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procOpenServiceW.Addr(), 3, uintptr(mgr), uintptr(unsafe.Pointer(serviceName)), uintptr(access))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeleteService(service Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procDeleteService.Addr(), 1, uintptr(service), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func StartService(service Handle, numArgs uint32, argVectors **uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procStartServiceW.Addr(), 3, uintptr(service), uintptr(numArgs), uintptr(unsafe.Pointer(argVectors)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func QueryServiceStatus(service Handle, status *SERVICE_STATUS) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procQueryServiceStatus.Addr(), 2, uintptr(service), uintptr(unsafe.Pointer(status)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ControlService(service Handle, control uint32, status *SERVICE_STATUS) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procControlService.Addr(), 3, uintptr(service), uintptr(control), uintptr(unsafe.Pointer(status)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func StartServiceCtrlDispatcher(serviceTable *SERVICE_TABLE_ENTRY) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procStartServiceCtrlDispatcherW.Addr(), 1, uintptr(unsafe.Pointer(serviceTable)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetServiceStatus(service Handle, serviceStatus *SERVICE_STATUS) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetServiceStatus.Addr(), 2, uintptr(service), uintptr(unsafe.Pointer(serviceStatus)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall12(procChangeServiceConfigW.Addr(), 11, uintptr(service), uintptr(serviceType), uintptr(startType), uintptr(errorControl), uintptr(unsafe.Pointer(binaryPathName)), uintptr(unsafe.Pointer(loadOrderGroup)), uintptr(unsafe.Pointer(tagId)), uintptr(unsafe.Pointer(dependencies)), uintptr(unsafe.Pointer(serviceStartName)), uintptr(unsafe.Pointer(password)), uintptr(unsafe.Pointer(displayName)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func QueryServiceConfig(service Handle, serviceConfig *QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procQueryServiceConfigW.Addr(), 4, uintptr(service), uintptr(unsafe.Pointer(serviceConfig)), uintptr(bufSize), uintptr(unsafe.Pointer(bytesNeeded)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ChangeServiceConfig2(service Handle, infoLevel uint32, info *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procChangeServiceConfig2W.Addr(), 3, uintptr(service), uintptr(infoLevel), uintptr(unsafe.Pointer(info)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func QueryServiceConfig2(service Handle, infoLevel uint32, buff *byte, buffSize uint32, bytesNeeded *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procQueryServiceConfig2W.Addr(), 5, uintptr(service), uintptr(infoLevel), uintptr(unsafe.Pointer(buff)), uintptr(buffSize), uintptr(unsafe.Pointer(bytesNeeded)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetLastError() (lasterr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetLastError.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			lasterr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LoadLibrary(libname string) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(libname)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _LoadLibrary(_p0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _LoadLibrary(libname *uint16) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procLoadLibraryW.Addr(), 1, uintptr(unsafe.Pointer(libname)), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LoadLibraryEx(libname string, zero Handle, flags uintptr) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(libname)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _LoadLibraryEx(_p0, zero, flags)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _LoadLibraryEx(libname *uint16, zero Handle, flags uintptr) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procLoadLibraryExW.Addr(), 3, uintptr(unsafe.Pointer(libname)), uintptr(zero), uintptr(flags))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FreeLibrary(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFreeLibrary.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetProcAddress(module Handle, procname string) (proc uintptr, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = syscall.BytePtrFromString(procname)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _GetProcAddress(module, _p0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _GetProcAddress(module Handle, procname *byte) (proc uintptr, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetProcAddress.Addr(), 2, uintptr(module), uintptr(unsafe.Pointer(procname)), 0)
0000000000000000000000000000000000000000;;		proc = uintptr(r0)
0000000000000000000000000000000000000000;;		if proc == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetVersion() (ver uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetVersion.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		ver = uint32(r0)
0000000000000000000000000000000000000000;;		if ver == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FormatMessage(flags uint32, msgsrc uintptr, msgid uint32, langid uint32, buf []uint16, args *byte) (n uint32, err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall9(procFormatMessageW.Addr(), 7, uintptr(flags), uintptr(msgsrc), uintptr(msgid), uintptr(langid), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(args)), 0, 0)
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExitProcess(exitcode uint32) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procExitProcess.Addr(), 1, uintptr(exitcode), 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateFile(name *uint16, access uint32, mode uint32, sa *SecurityAttributes, createmode uint32, attrs uint32, templatefile int32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall9(procCreateFileW.Addr(), 7, uintptr(unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReadFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procReadFile.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(done)), uintptr(unsafe.Pointer(overlapped)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WriteFile(handle Handle, buf []byte, done *uint32, overlapped *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procWriteFile.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(done)), uintptr(unsafe.Pointer(overlapped)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFilePointer(handle Handle, lowoffset int32, highoffsetptr *int32, whence uint32) (newlowoffset uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procSetFilePointer.Addr(), 4, uintptr(handle), uintptr(lowoffset), uintptr(unsafe.Pointer(highoffsetptr)), uintptr(whence), 0, 0)
0000000000000000000000000000000000000000;;		newlowoffset = uint32(r0)
0000000000000000000000000000000000000000;;		if newlowoffset == 0xffffffff {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CloseHandle(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCloseHandle.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetStdHandle(stdhandle int) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetStdHandle.Addr(), 1, uintptr(stdhandle), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findFirstFile1(name *uint16, data *win32finddata1) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procFindFirstFileW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(data)), 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func findNextFile1(handle Handle, data *win32finddata1) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFindNextFileW.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(data)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FindClose(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFindClose.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFileInformationByHandle(handle Handle, data *ByHandleFileInformation) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetFileInformationByHandle.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(data)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCurrentDirectory(buflen uint32, buf *uint16) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetCurrentDirectoryW.Addr(), 2, uintptr(buflen), uintptr(unsafe.Pointer(buf)), 0)
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetCurrentDirectory(path *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetCurrentDirectoryW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateDirectory(path *uint16, sa *SecurityAttributes) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCreateDirectoryW.Addr(), 2, uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(sa)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RemoveDirectory(path *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procRemoveDirectoryW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeleteFile(path *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procDeleteFileW.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MoveFile(from *uint16, to *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procMoveFileW.Addr(), 2, uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(to)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MoveFileEx(from *uint16, to *uint16, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procMoveFileExW.Addr(), 3, uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(to)), uintptr(flags))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetComputerName(buf *uint16, n *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetComputerNameW.Addr(), 2, uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetComputerNameEx(nametype uint32, buf *uint16, n *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetComputerNameExW.Addr(), 3, uintptr(nametype), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(n)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetEndOfFile(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetEndOfFile.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetSystemTimeAsFileTime(time *Filetime) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procGetSystemTimeAsFileTime.Addr(), 1, uintptr(unsafe.Pointer(time)), 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetTimeZoneInformation(tzi *Timezoneinformation) (rc uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetTimeZoneInformation.Addr(), 1, uintptr(unsafe.Pointer(tzi)), 0, 0)
0000000000000000000000000000000000000000;;		rc = uint32(r0)
0000000000000000000000000000000000000000;;		if rc == 0xffffffff {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateIoCompletionPort(filehandle Handle, cphandle Handle, key uint32, threadcnt uint32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procCreateIoCompletionPort.Addr(), 4, uintptr(filehandle), uintptr(cphandle), uintptr(key), uintptr(threadcnt), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetQueuedCompletionStatus(cphandle Handle, qty *uint32, key *uint32, overlapped **Overlapped, timeout uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetQueuedCompletionStatus.Addr(), 5, uintptr(cphandle), uintptr(unsafe.Pointer(qty)), uintptr(unsafe.Pointer(key)), uintptr(unsafe.Pointer(overlapped)), uintptr(timeout), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func PostQueuedCompletionStatus(cphandle Handle, qty uint32, key uint32, overlapped *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procPostQueuedCompletionStatus.Addr(), 4, uintptr(cphandle), uintptr(qty), uintptr(key), uintptr(unsafe.Pointer(overlapped)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CancelIo(s Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCancelIo.Addr(), 1, uintptr(s), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CancelIoEx(s Handle, o *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCancelIoEx.Addr(), 2, uintptr(s), uintptr(unsafe.Pointer(o)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateProcess(appName *uint16, commandLine *uint16, procSecurity *SecurityAttributes, threadSecurity *SecurityAttributes, inheritHandles bool, creationFlags uint32, env *uint16, currentDir *uint16, startupInfo *StartupInfo, outProcInfo *ProcessInformation) (err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if inheritHandles {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall12(procCreateProcessW.Addr(), 10, uintptr(unsafe.Pointer(appName)), uintptr(unsafe.Pointer(commandLine)), uintptr(unsafe.Pointer(procSecurity)), uintptr(unsafe.Pointer(threadSecurity)), uintptr(_p0), uintptr(creationFlags), uintptr(unsafe.Pointer(env)), uintptr(unsafe.Pointer(currentDir)), uintptr(unsafe.Pointer(startupInfo)), uintptr(unsafe.Pointer(outProcInfo)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpenProcess(da uint32, inheritHandle bool, pid uint32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if inheritHandle {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procOpenProcess.Addr(), 3, uintptr(da), uintptr(_p0), uintptr(pid))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TerminateProcess(handle Handle, exitcode uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procTerminateProcess.Addr(), 2, uintptr(handle), uintptr(exitcode), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetExitCodeProcess(handle Handle, exitcode *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetExitCodeProcess.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(exitcode)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetStartupInfo(startupInfo *StartupInfo) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetStartupInfoW.Addr(), 1, uintptr(unsafe.Pointer(startupInfo)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCurrentProcess() (pseudoHandle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetCurrentProcess.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pseudoHandle = Handle(r0)
0000000000000000000000000000000000000000;;		if pseudoHandle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetProcessTimes(handle Handle, creationTime *Filetime, exitTime *Filetime, kernelTime *Filetime, userTime *Filetime) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetProcessTimes.Addr(), 5, uintptr(handle), uintptr(unsafe.Pointer(creationTime)), uintptr(unsafe.Pointer(exitTime)), uintptr(unsafe.Pointer(kernelTime)), uintptr(unsafe.Pointer(userTime)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DuplicateHandle(hSourceProcessHandle Handle, hSourceHandle Handle, hTargetProcessHandle Handle, lpTargetHandle *Handle, dwDesiredAccess uint32, bInheritHandle bool, dwOptions uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if bInheritHandle {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procDuplicateHandle.Addr(), 7, uintptr(hSourceProcessHandle), uintptr(hSourceHandle), uintptr(hTargetProcessHandle), uintptr(unsafe.Pointer(lpTargetHandle)), uintptr(dwDesiredAccess), uintptr(_p0), uintptr(dwOptions), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WaitForSingleObject(handle Handle, waitMilliseconds uint32) (event uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procWaitForSingleObject.Addr(), 2, uintptr(handle), uintptr(waitMilliseconds), 0)
0000000000000000000000000000000000000000;;		event = uint32(r0)
0000000000000000000000000000000000000000;;		if event == 0xffffffff {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetTempPath(buflen uint32, buf *uint16) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetTempPathW.Addr(), 2, uintptr(buflen), uintptr(unsafe.Pointer(buf)), 0)
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreatePipe(readhandle *Handle, writehandle *Handle, sa *SecurityAttributes, size uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procCreatePipe.Addr(), 4, uintptr(unsafe.Pointer(readhandle)), uintptr(unsafe.Pointer(writehandle)), uintptr(unsafe.Pointer(sa)), uintptr(size), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFileType(filehandle Handle) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetFileType.Addr(), 1, uintptr(filehandle), 0, 0)
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CryptAcquireContext(provhandle *Handle, container *uint16, provider *uint16, provtype uint32, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procCryptAcquireContextW.Addr(), 5, uintptr(unsafe.Pointer(provhandle)), uintptr(unsafe.Pointer(container)), uintptr(unsafe.Pointer(provider)), uintptr(provtype), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CryptReleaseContext(provhandle Handle, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCryptReleaseContext.Addr(), 2, uintptr(provhandle), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CryptGenRandom(provhandle Handle, buflen uint32, buf *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCryptGenRandom.Addr(), 3, uintptr(provhandle), uintptr(buflen), uintptr(unsafe.Pointer(buf)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetEnvironmentStrings() (envs *uint16, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetEnvironmentStringsW.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		envs = (*uint16)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if envs == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FreeEnvironmentStrings(envs *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFreeEnvironmentStringsW.Addr(), 1, uintptr(unsafe.Pointer(envs)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetEnvironmentVariable(name *uint16, buffer *uint16, size uint32) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetEnvironmentVariableW.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(buffer)), uintptr(size))
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetEnvironmentVariable(name *uint16, value *uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetEnvironmentVariableW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(value)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFileTime(handle Handle, ctime *Filetime, atime *Filetime, wtime *Filetime) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procSetFileTime.Addr(), 4, uintptr(handle), uintptr(unsafe.Pointer(ctime)), uintptr(unsafe.Pointer(atime)), uintptr(unsafe.Pointer(wtime)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFileAttributes(name *uint16) (attrs uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetFileAttributesW.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)
0000000000000000000000000000000000000000;;		attrs = uint32(r0)
0000000000000000000000000000000000000000;;		if attrs == INVALID_FILE_ATTRIBUTES {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFileAttributes(name *uint16, attrs uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetFileAttributesW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(attrs), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFileAttributesEx(name *uint16, level uint32, info *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetFileAttributesExW.Addr(), 3, uintptr(unsafe.Pointer(name)), uintptr(level), uintptr(unsafe.Pointer(info)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCommandLine() (cmd *uint16) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetCommandLineW.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		cmd = (*uint16)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CommandLineToArgv(cmd *uint16, argc *int32) (argv *[8192]*[8192]uint16, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procCommandLineToArgvW.Addr(), 2, uintptr(unsafe.Pointer(cmd)), uintptr(unsafe.Pointer(argc)), 0)
0000000000000000000000000000000000000000;;		argv = (*[8192]*[8192]uint16)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if argv == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LocalFree(hmem Handle) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procLocalFree.Addr(), 1, uintptr(hmem), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle != 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetHandleInformation(handle Handle, mask uint32, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetHandleInformation.Addr(), 3, uintptr(handle), uintptr(mask), uintptr(flags))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FlushFileBuffers(handle Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFlushFileBuffers.Addr(), 1, uintptr(handle), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetFullPathName(path *uint16, buflen uint32, buf *uint16, fname **uint16) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procGetFullPathNameW.Addr(), 4, uintptr(unsafe.Pointer(path)), uintptr(buflen), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(fname)), 0, 0)
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetLongPathName(path *uint16, buf *uint16, buflen uint32) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetLongPathNameW.Addr(), 3, uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(buf)), uintptr(buflen))
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetShortPathName(longpath *uint16, shortpath *uint16, buflen uint32) (n uint32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procGetShortPathNameW.Addr(), 3, uintptr(unsafe.Pointer(longpath)), uintptr(unsafe.Pointer(shortpath)), uintptr(buflen))
0000000000000000000000000000000000000000;;		n = uint32(r0)
0000000000000000000000000000000000000000;;		if n == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateFileMapping(fhandle Handle, sa *SecurityAttributes, prot uint32, maxSizeHigh uint32, maxSizeLow uint32, name *uint16) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procCreateFileMappingW.Addr(), 6, uintptr(fhandle), uintptr(unsafe.Pointer(sa)), uintptr(prot), uintptr(maxSizeHigh), uintptr(maxSizeLow), uintptr(unsafe.Pointer(name)))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MapViewOfFile(handle Handle, access uint32, offsetHigh uint32, offsetLow uint32, length uintptr) (addr uintptr, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procMapViewOfFile.Addr(), 5, uintptr(handle), uintptr(access), uintptr(offsetHigh), uintptr(offsetLow), uintptr(length), 0)
0000000000000000000000000000000000000000;;		addr = uintptr(r0)
0000000000000000000000000000000000000000;;		if addr == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func UnmapViewOfFile(addr uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procUnmapViewOfFile.Addr(), 1, uintptr(addr), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FlushViewOfFile(addr uintptr, length uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFlushViewOfFile.Addr(), 2, uintptr(addr), uintptr(length), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func VirtualLock(addr uintptr, length uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procVirtualLock.Addr(), 2, uintptr(addr), uintptr(length), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func VirtualUnlock(addr uintptr, length uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procVirtualUnlock.Addr(), 2, uintptr(addr), uintptr(length), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TransmitFile(s Handle, handle Handle, bytesToWrite uint32, bytsPerSend uint32, overlapped *Overlapped, transmitFileBuf *TransmitFileBuffers, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procTransmitFile.Addr(), 7, uintptr(s), uintptr(handle), uintptr(bytesToWrite), uintptr(bytsPerSend), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(transmitFileBuf)), uintptr(flags), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReadDirectoryChanges(handle Handle, buf *byte, buflen uint32, watchSubTree bool, mask uint32, retlen *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if watchSubTree {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procReadDirectoryChangesW.Addr(), 8, uintptr(handle), uintptr(unsafe.Pointer(buf)), uintptr(buflen), uintptr(_p0), uintptr(mask), uintptr(unsafe.Pointer(retlen)), uintptr(unsafe.Pointer(overlapped)), uintptr(completionRoutine), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertOpenSystemStore(hprov Handle, name *uint16) (store Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procCertOpenSystemStoreW.Addr(), 2, uintptr(hprov), uintptr(unsafe.Pointer(name)), 0)
0000000000000000000000000000000000000000;;		store = Handle(r0)
0000000000000000000000000000000000000000;;		if store == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertOpenStore(storeProvider uintptr, msgAndCertEncodingType uint32, cryptProv uintptr, flags uint32, para uintptr) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procCertOpenStore.Addr(), 5, uintptr(storeProvider), uintptr(msgAndCertEncodingType), uintptr(cryptProv), uintptr(flags), uintptr(para), 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertEnumCertificatesInStore(store Handle, prevContext *CertContext) (context *CertContext, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procCertEnumCertificatesInStore.Addr(), 2, uintptr(store), uintptr(unsafe.Pointer(prevContext)), 0)
0000000000000000000000000000000000000000;;		context = (*CertContext)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if context == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertAddCertificateContextToStore(store Handle, certContext *CertContext, addDisposition uint32, storeContext **CertContext) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procCertAddCertificateContextToStore.Addr(), 4, uintptr(store), uintptr(unsafe.Pointer(certContext)), uintptr(addDisposition), uintptr(unsafe.Pointer(storeContext)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertCloseStore(store Handle, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCertCloseStore.Addr(), 2, uintptr(store), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertGetCertificateChain(engine Handle, leaf *CertContext, time *Filetime, additionalStore Handle, para *CertChainPara, flags uint32, reserved uintptr, chainCtx **CertChainContext) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procCertGetCertificateChain.Addr(), 8, uintptr(engine), uintptr(unsafe.Pointer(leaf)), uintptr(unsafe.Pointer(time)), uintptr(additionalStore), uintptr(unsafe.Pointer(para)), uintptr(flags), uintptr(reserved), uintptr(unsafe.Pointer(chainCtx)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertFreeCertificateChain(ctx *CertChainContext) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procCertFreeCertificateChain.Addr(), 1, uintptr(unsafe.Pointer(ctx)), 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertCreateCertificateContext(certEncodingType uint32, certEncoded *byte, encodedLen uint32) (context *CertContext, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procCertCreateCertificateContext.Addr(), 3, uintptr(certEncodingType), uintptr(unsafe.Pointer(certEncoded)), uintptr(encodedLen))
0000000000000000000000000000000000000000;;		context = (*CertContext)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if context == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertFreeCertificateContext(ctx *CertContext) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCertFreeCertificateContext.Addr(), 1, uintptr(unsafe.Pointer(ctx)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CertVerifyCertificateChainPolicy(policyOID uintptr, chain *CertChainContext, para *CertChainPolicyPara, status *CertChainPolicyStatus) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procCertVerifyCertificateChainPolicy.Addr(), 4, uintptr(policyOID), uintptr(unsafe.Pointer(chain)), uintptr(unsafe.Pointer(para)), uintptr(unsafe.Pointer(status)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegOpenKeyEx(key Handle, subkey *uint16, options uint32, desiredAccess uint32, result *Handle) (regerrno error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procRegOpenKeyExW.Addr(), 5, uintptr(key), uintptr(unsafe.Pointer(subkey)), uintptr(options), uintptr(desiredAccess), uintptr(unsafe.Pointer(result)), 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			regerrno = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegCloseKey(key Handle) (regerrno error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procRegCloseKey.Addr(), 1, uintptr(key), 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			regerrno = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegQueryInfoKey(key Handle, class *uint16, classLen *uint32, reserved *uint32, subkeysLen *uint32, maxSubkeyLen *uint32, maxClassLen *uint32, valuesLen *uint32, maxValueNameLen *uint32, maxValueLen *uint32, saLen *uint32, lastWriteTime *Filetime) (regerrno error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall12(procRegQueryInfoKeyW.Addr(), 12, uintptr(key), uintptr(unsafe.Pointer(class)), uintptr(unsafe.Pointer(classLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(subkeysLen)), uintptr(unsafe.Pointer(maxSubkeyLen)), uintptr(unsafe.Pointer(maxClassLen)), uintptr(unsafe.Pointer(valuesLen)), uintptr(unsafe.Pointer(maxValueNameLen)), uintptr(unsafe.Pointer(maxValueLen)), uintptr(unsafe.Pointer(saLen)), uintptr(unsafe.Pointer(lastWriteTime)))
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			regerrno = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegEnumKeyEx(key Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, class *uint16, classLen *uint32, lastWriteTime *Filetime) (regerrno error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall9(procRegEnumKeyExW.Addr(), 8, uintptr(key), uintptr(index), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(nameLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(class)), uintptr(unsafe.Pointer(classLen)), uintptr(unsafe.Pointer(lastWriteTime)), 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			regerrno = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RegQueryValueEx(key Handle, name *uint16, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32) (regerrno error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procRegQueryValueExW.Addr(), 6, uintptr(key), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(valtype)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(buflen)))
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			regerrno = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getCurrentProcessId() (pid uint32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetCurrentProcessId.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pid = uint32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetConsoleMode(console Handle, mode *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(console), uintptr(unsafe.Pointer(mode)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WriteConsole(console Handle, buf *uint16, towrite uint32, written *uint32, reserved *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procWriteConsoleW.Addr(), 5, uintptr(console), uintptr(unsafe.Pointer(buf)), uintptr(towrite), uintptr(unsafe.Pointer(written)), uintptr(unsafe.Pointer(reserved)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ReadConsole(console Handle, buf *uint16, toread uint32, read *uint32, inputControl *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procReadConsoleW.Addr(), 5, uintptr(console), uintptr(unsafe.Pointer(buf)), uintptr(toread), uintptr(unsafe.Pointer(read)), uintptr(unsafe.Pointer(inputControl)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateToolhelp32Snapshot(flags uint32, processId uint32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procCreateToolhelp32Snapshot.Addr(), 2, uintptr(flags), uintptr(processId), 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Process32First(snapshot Handle, procEntry *ProcessEntry32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procProcess32FirstW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(procEntry)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Process32Next(snapshot Handle, procEntry *ProcessEntry32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procProcess32NextW.Addr(), 2, uintptr(snapshot), uintptr(unsafe.Pointer(procEntry)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DeviceIoControl(handle Handle, ioControlCode uint32, inBuffer *byte, inBufferSize uint32, outBuffer *byte, outBufferSize uint32, bytesReturned *uint32, overlapped *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procDeviceIoControl.Addr(), 8, uintptr(handle), uintptr(ioControlCode), uintptr(unsafe.Pointer(inBuffer)), uintptr(inBufferSize), uintptr(unsafe.Pointer(outBuffer)), uintptr(outBufferSize), uintptr(unsafe.Pointer(bytesReturned)), uintptr(unsafe.Pointer(overlapped)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateSymbolicLink(symlinkfilename *uint16, targetfilename *uint16, flags uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCreateSymbolicLinkW.Addr(), 3, uintptr(unsafe.Pointer(symlinkfilename)), uintptr(unsafe.Pointer(targetfilename)), uintptr(flags))
0000000000000000000000000000000000000000;;		if r1&0xff == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateHardLink(filename *uint16, existingfilename *uint16, reserved uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCreateHardLinkW.Addr(), 3, uintptr(unsafe.Pointer(filename)), uintptr(unsafe.Pointer(existingfilename)), uintptr(reserved))
0000000000000000000000000000000000000000;;		if r1&0xff == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetCurrentThreadId() (id uint32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetCurrentThreadId.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		id = uint32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CreateEvent(eventAttrs *syscall.SecurityAttributes, manualReset uint32, initialState uint32, name *uint16) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procCreateEventW.Addr(), 4, uintptr(unsafe.Pointer(eventAttrs)), uintptr(manualReset), uintptr(initialState), uintptr(unsafe.Pointer(name)), 0, 0)
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetEvent(event Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetEvent.Addr(), 1, uintptr(event), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSAStartup(verreq uint32, data *WSAData) (sockerr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procWSAStartup.Addr(), 2, uintptr(verreq), uintptr(unsafe.Pointer(data)), 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			sockerr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSACleanup() (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procWSACleanup.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSAIoctl(s Handle, iocc uint32, inbuf *byte, cbif uint32, outbuf *byte, cbob uint32, cbbr *uint32, overlapped *Overlapped, completionRoutine uintptr) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procWSAIoctl.Addr(), 9, uintptr(s), uintptr(iocc), uintptr(unsafe.Pointer(inbuf)), uintptr(cbif), uintptr(unsafe.Pointer(outbuf)), uintptr(cbob), uintptr(unsafe.Pointer(cbbr)), uintptr(unsafe.Pointer(overlapped)), uintptr(completionRoutine))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func socket(af int32, typ int32, protocol int32) (handle Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procsocket.Addr(), 3, uintptr(af), uintptr(typ), uintptr(protocol))
0000000000000000000000000000000000000000;;		handle = Handle(r0)
0000000000000000000000000000000000000000;;		if handle == InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setsockopt(s Handle, level int32, optname int32, optval *byte, optlen int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procsetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(unsafe.Pointer(optval)), uintptr(optlen), 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getsockopt(s Handle, level int32, optname int32, optval *byte, optlen *int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procgetsockopt.Addr(), 5, uintptr(s), uintptr(level), uintptr(optname), uintptr(unsafe.Pointer(optval)), uintptr(unsafe.Pointer(optlen)), 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func bind(s Handle, name unsafe.Pointer, namelen int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procbind.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func connect(s Handle, name unsafe.Pointer, namelen int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procconnect.Addr(), 3, uintptr(s), uintptr(name), uintptr(namelen))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getsockname(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procgetsockname.Addr(), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getpeername(s Handle, rsa *RawSockaddrAny, addrlen *int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procgetpeername.Addr(), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func listen(s Handle, backlog int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(proclisten.Addr(), 2, uintptr(s), uintptr(backlog), 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func shutdown(s Handle, how int32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procshutdown.Addr(), 2, uintptr(s), uintptr(how), 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Closesocket(s Handle) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procclosesocket.Addr(), 1, uintptr(s), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AcceptEx(ls Handle, as Handle, buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, recvd *uint32, overlapped *Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procAcceptEx.Addr(), 8, uintptr(ls), uintptr(as), uintptr(unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(overlapped)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAcceptExSockaddrs(buf *byte, rxdatalen uint32, laddrlen uint32, raddrlen uint32, lrsa **RawSockaddrAny, lrsalen *int32, rrsa **RawSockaddrAny, rrsalen *int32) {
0000000000000000000000000000000000000000;;		syscall.Syscall9(procGetAcceptExSockaddrs.Addr(), 8, uintptr(unsafe.Pointer(buf)), uintptr(rxdatalen), uintptr(laddrlen), uintptr(raddrlen), uintptr(unsafe.Pointer(lrsa)), uintptr(unsafe.Pointer(lrsalen)), uintptr(unsafe.Pointer(rrsa)), uintptr(unsafe.Pointer(rrsalen)), 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSARecv(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, overlapped *Overlapped, croutine *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procWSARecv.Addr(), 7, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSASend(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, overlapped *Overlapped, croutine *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procWSASend.Addr(), 7, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(sent)), uintptr(flags), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSARecvFrom(s Handle, bufs *WSABuf, bufcnt uint32, recvd *uint32, flags *uint32, from *RawSockaddrAny, fromlen *int32, overlapped *Overlapped, croutine *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procWSARecvFrom.Addr(), 9, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(recvd)), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSASendTo(s Handle, bufs *WSABuf, bufcnt uint32, sent *uint32, flags uint32, to *RawSockaddrAny, tolen int32, overlapped *Overlapped, croutine *byte) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procWSASendTo.Addr(), 9, uintptr(s), uintptr(unsafe.Pointer(bufs)), uintptr(bufcnt), uintptr(unsafe.Pointer(sent)), uintptr(flags), uintptr(unsafe.Pointer(to)), uintptr(tolen), uintptr(unsafe.Pointer(overlapped)), uintptr(unsafe.Pointer(croutine)))
0000000000000000000000000000000000000000;;		if r1 == socket_error {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetHostByName(name string) (h *Hostent, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = syscall.BytePtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _GetHostByName(_p0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _GetHostByName(name *byte) (h *Hostent, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procgethostbyname.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)
0000000000000000000000000000000000000000;;		h = (*Hostent)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if h == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetServByName(name string, proto string) (s *Servent, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = syscall.BytePtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		_p1, err = syscall.BytePtrFromString(proto)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _GetServByName(_p0, _p1)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _GetServByName(name *byte, proto *byte) (s *Servent, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procgetservbyname.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(proto)), 0)
0000000000000000000000000000000000000000;;		s = (*Servent)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if s == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Ntohs(netshort uint16) (u uint16) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procntohs.Addr(), 1, uintptr(netshort), 0, 0)
0000000000000000000000000000000000000000;;		u = uint16(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetProtoByName(name string) (p *Protoent, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = syscall.BytePtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _GetProtoByName(_p0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _GetProtoByName(name *byte) (p *Protoent, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procgetprotobyname.Addr(), 1, uintptr(unsafe.Pointer(name)), 0, 0)
0000000000000000000000000000000000000000;;		p = (*Protoent)(unsafe.Pointer(r0))
0000000000000000000000000000000000000000;;		if p == nil {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DnsQuery(name string, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte) (status error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, status = syscall.UTF16PtrFromString(name)
0000000000000000000000000000000000000000;;		if status != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _DnsQuery(_p0, qtype, options, extra, qrs, pr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _DnsQuery(name *uint16, qtype uint16, options uint32, extra *byte, qrs **DNSRecord, pr *byte) (status error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procDnsQuery_W.Addr(), 6, uintptr(unsafe.Pointer(name)), uintptr(qtype), uintptr(options), uintptr(unsafe.Pointer(extra)), uintptr(unsafe.Pointer(qrs)), uintptr(unsafe.Pointer(pr)))
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			status = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DnsRecordListFree(rl *DNSRecord, freetype uint32) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procDnsRecordListFree.Addr(), 2, uintptr(unsafe.Pointer(rl)), uintptr(freetype), 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func DnsNameCompare(name1 *uint16, name2 *uint16) (same bool) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procDnsNameCompare_W.Addr(), 2, uintptr(unsafe.Pointer(name1)), uintptr(unsafe.Pointer(name2)), 0)
0000000000000000000000000000000000000000;;		same = r0 != 0
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAddrInfoW(nodename *uint16, servicename *uint16, hints *AddrinfoW, result **AddrinfoW) (sockerr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procGetAddrInfoW.Addr(), 4, uintptr(unsafe.Pointer(nodename)), uintptr(unsafe.Pointer(servicename)), uintptr(unsafe.Pointer(hints)), uintptr(unsafe.Pointer(result)), 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			sockerr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FreeAddrInfoW(addrinfo *AddrinfoW) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procFreeAddrInfoW.Addr(), 1, uintptr(unsafe.Pointer(addrinfo)), 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetIfEntry(pIfRow *MibIfRow) (errcode error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetIfEntry.Addr(), 1, uintptr(unsafe.Pointer(pIfRow)), 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			errcode = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAdaptersInfo(ai *IpAdapterInfo, ol *uint32) (errcode error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetAdaptersInfo.Addr(), 2, uintptr(unsafe.Pointer(ai)), uintptr(unsafe.Pointer(ol)), 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			errcode = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetFileCompletionNotificationModes(handle Handle, flags uint8) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetFileCompletionNotificationModes.Addr(), 2, uintptr(handle), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WSAEnumProtocols(protocols *int32, protocolBuffer *WSAProtocolInfo, bufferLength *uint32) (n int32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall(procWSAEnumProtocolsW.Addr(), 3, uintptr(unsafe.Pointer(protocols)), uintptr(unsafe.Pointer(protocolBuffer)), uintptr(unsafe.Pointer(bufferLength)))
0000000000000000000000000000000000000000;;		n = int32(r0)
0000000000000000000000000000000000000000;;		if n == -1 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetAdaptersAddresses(family uint32, flags uint32, reserved uintptr, adapterAddresses *IpAdapterAddresses, sizePointer *uint32) (errcode error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procGetAdaptersAddresses.Addr(), 5, uintptr(family), uintptr(flags), uintptr(reserved), uintptr(unsafe.Pointer(adapterAddresses)), uintptr(unsafe.Pointer(sizePointer)), 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			errcode = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetACP() (acp uint32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetACP.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		acp = uint32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func MultiByteToWideChar(codePage uint32, dwFlags uint32, str *byte, nstr int32, wchar *uint16, nwchar int32) (nwrite int32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procMultiByteToWideChar.Addr(), 6, uintptr(codePage), uintptr(dwFlags), uintptr(unsafe.Pointer(str)), uintptr(nstr), uintptr(unsafe.Pointer(wchar)), uintptr(nwchar))
0000000000000000000000000000000000000000;;		nwrite = int32(r0)
0000000000000000000000000000000000000000;;		if nwrite == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TranslateName(accName *uint16, accNameFormat uint32, desiredNameFormat uint32, translatedName *uint16, nSize *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procTranslateNameW.Addr(), 5, uintptr(unsafe.Pointer(accName)), uintptr(accNameFormat), uintptr(desiredNameFormat), uintptr(unsafe.Pointer(translatedName)), uintptr(unsafe.Pointer(nSize)), 0)
0000000000000000000000000000000000000000;;		if r1&0xff == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetUserNameEx(nameFormat uint32, nameBuffre *uint16, nSize *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetUserNameExW.Addr(), 3, uintptr(nameFormat), uintptr(unsafe.Pointer(nameBuffre)), uintptr(unsafe.Pointer(nSize)))
0000000000000000000000000000000000000000;;		if r1&0xff == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NetUserGetInfo(serverName *uint16, userName *uint16, level uint32, buf **byte) (neterr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall6(procNetUserGetInfo.Addr(), 4, uintptr(unsafe.Pointer(serverName)), uintptr(unsafe.Pointer(userName)), uintptr(level), uintptr(unsafe.Pointer(buf)), 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			neterr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NetGetJoinInformation(server *uint16, name **uint16, bufType *uint32) (neterr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procNetGetJoinInformation.Addr(), 3, uintptr(unsafe.Pointer(server)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(bufType)))
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			neterr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NetApiBufferFree(buf *byte) (neterr error) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procNetApiBufferFree.Addr(), 1, uintptr(unsafe.Pointer(buf)), 0, 0)
0000000000000000000000000000000000000000;;		if r0 != 0 {
0000000000000000000000000000000000000000;;			neterr = syscall.Errno(r0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LookupAccountSid(systemName *uint16, sid *SID, name *uint16, nameLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procLookupAccountSidW.Addr(), 7, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(nameLen)), uintptr(unsafe.Pointer(refdDomainName)), uintptr(unsafe.Pointer(refdDomainNameLen)), uintptr(unsafe.Pointer(use)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func LookupAccountName(systemName *uint16, accountName *uint16, sid *SID, sidLen *uint32, refdDomainName *uint16, refdDomainNameLen *uint32, use *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procLookupAccountNameW.Addr(), 7, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(accountName)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(sidLen)), uintptr(unsafe.Pointer(refdDomainName)), uintptr(unsafe.Pointer(refdDomainNameLen)), uintptr(unsafe.Pointer(use)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConvertSidToStringSid(sid *SID, stringSid **uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procConvertSidToStringSidW.Addr(), 2, uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(stringSid)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ConvertStringSidToSid(stringSid *uint16, sid **SID) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procConvertStringSidToSidW.Addr(), 2, uintptr(unsafe.Pointer(stringSid)), uintptr(unsafe.Pointer(sid)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetLengthSid(sid *SID) (len uint32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetLengthSid.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)
0000000000000000000000000000000000000000;;		len = uint32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func CopySid(destSidLen uint32, destSid *SID, srcSid *SID) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCopySid.Addr(), 3, uintptr(destSidLen), uintptr(unsafe.Pointer(destSid)), uintptr(unsafe.Pointer(srcSid)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func AllocateAndInitializeSid(identAuth *SidIdentifierAuthority, subAuth byte, subAuth0 uint32, subAuth1 uint32, subAuth2 uint32, subAuth3 uint32, subAuth4 uint32, subAuth5 uint32, subAuth6 uint32, subAuth7 uint32, sid **SID) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall12(procAllocateAndInitializeSid.Addr(), 11, uintptr(unsafe.Pointer(identAuth)), uintptr(subAuth), uintptr(subAuth0), uintptr(subAuth1), uintptr(subAuth2), uintptr(subAuth3), uintptr(subAuth4), uintptr(subAuth5), uintptr(subAuth6), uintptr(subAuth7), uintptr(unsafe.Pointer(sid)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FreeSid(sid *SID) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procFreeSid.Addr(), 1, uintptr(unsafe.Pointer(sid)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 != 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func EqualSid(sid1 *SID, sid2 *SID) (isEqual bool) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procEqualSid.Addr(), 2, uintptr(unsafe.Pointer(sid1)), uintptr(unsafe.Pointer(sid2)), 0)
0000000000000000000000000000000000000000;;		isEqual = r0 != 0
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func OpenProcessToken(h Handle, access uint32, token *Token) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procOpenProcessToken.Addr(), 3, uintptr(h), uintptr(access), uintptr(unsafe.Pointer(token)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetTokenInformation(t Token, infoClass uint32, info *byte, infoLen uint32, returnedLen *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetTokenInformation.Addr(), 5, uintptr(t), uintptr(infoClass), uintptr(unsafe.Pointer(info)), uintptr(infoLen), uintptr(unsafe.Pointer(returnedLen)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetUserProfileDirectory(t Token, dir *uint16, dirLen *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procGetUserProfileDirectoryW.Addr(), 3, uintptr(t), uintptr(unsafe.Pointer(dir)), uintptr(unsafe.Pointer(dirLen)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = error(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
