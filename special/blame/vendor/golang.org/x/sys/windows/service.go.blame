0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
372f1bceb3e2da05404dc30071e64aebe6b55b42;;	
0000000000000000000000000000000000000000;;	// +build windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SC_MANAGER_CONNECT            = 1
0000000000000000000000000000000000000000;;		SC_MANAGER_CREATE_SERVICE     = 2
0000000000000000000000000000000000000000;;		SC_MANAGER_ENUMERATE_SERVICE  = 4
0000000000000000000000000000000000000000;;		SC_MANAGER_LOCK               = 8
0000000000000000000000000000000000000000;;		SC_MANAGER_QUERY_LOCK_STATUS  = 16
0000000000000000000000000000000000000000;;		SC_MANAGER_MODIFY_BOOT_CONFIG = 32
0000000000000000000000000000000000000000;;		SC_MANAGER_ALL_ACCESS         = 0xf003f
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	OpenSCManager(machineName *uint16, databaseName *uint16, access uint32) (handle Handle, err error) [failretval==0] = advapi32.OpenSCManagerW
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SERVICE_KERNEL_DRIVER       = 1
0000000000000000000000000000000000000000;;		SERVICE_FILE_SYSTEM_DRIVER  = 2
0000000000000000000000000000000000000000;;		SERVICE_ADAPTER             = 4
0000000000000000000000000000000000000000;;		SERVICE_RECOGNIZER_DRIVER   = 8
0000000000000000000000000000000000000000;;		SERVICE_WIN32_OWN_PROCESS   = 16
0000000000000000000000000000000000000000;;		SERVICE_WIN32_SHARE_PROCESS = 32
0000000000000000000000000000000000000000;;		SERVICE_WIN32               = SERVICE_WIN32_OWN_PROCESS | SERVICE_WIN32_SHARE_PROCESS
0000000000000000000000000000000000000000;;		SERVICE_INTERACTIVE_PROCESS = 256
0000000000000000000000000000000000000000;;		SERVICE_DRIVER              = SERVICE_KERNEL_DRIVER | SERVICE_FILE_SYSTEM_DRIVER | SERVICE_RECOGNIZER_DRIVER
0000000000000000000000000000000000000000;;		SERVICE_TYPE_ALL            = SERVICE_WIN32 | SERVICE_ADAPTER | SERVICE_DRIVER | SERVICE_INTERACTIVE_PROCESS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_BOOT_START   = 0
0000000000000000000000000000000000000000;;		SERVICE_SYSTEM_START = 1
0000000000000000000000000000000000000000;;		SERVICE_AUTO_START   = 2
0000000000000000000000000000000000000000;;		SERVICE_DEMAND_START = 3
0000000000000000000000000000000000000000;;		SERVICE_DISABLED     = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_ERROR_IGNORE   = 0
0000000000000000000000000000000000000000;;		SERVICE_ERROR_NORMAL   = 1
0000000000000000000000000000000000000000;;		SERVICE_ERROR_SEVERE   = 2
0000000000000000000000000000000000000000;;		SERVICE_ERROR_CRITICAL = 3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SC_STATUS_PROCESS_INFO = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_STOPPED          = 1
0000000000000000000000000000000000000000;;		SERVICE_START_PENDING    = 2
0000000000000000000000000000000000000000;;		SERVICE_STOP_PENDING     = 3
0000000000000000000000000000000000000000;;		SERVICE_RUNNING          = 4
0000000000000000000000000000000000000000;;		SERVICE_CONTINUE_PENDING = 5
0000000000000000000000000000000000000000;;		SERVICE_PAUSE_PENDING    = 6
0000000000000000000000000000000000000000;;		SERVICE_PAUSED           = 7
0000000000000000000000000000000000000000;;		SERVICE_NO_CHANGE        = 0xffffffff
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_STOP                  = 1
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_PAUSE_CONTINUE        = 2
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_SHUTDOWN              = 4
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_PARAMCHANGE           = 8
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_NETBINDCHANGE         = 16
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_POWEREVENT            = 64
0000000000000000000000000000000000000000;;		SERVICE_ACCEPT_SESSIONCHANGE         = 128
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_STOP                  = 1
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_PAUSE                 = 2
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_CONTINUE              = 3
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_INTERROGATE           = 4
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_SHUTDOWN              = 5
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_PARAMCHANGE           = 6
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_NETBINDADD            = 7
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_NETBINDREMOVE         = 8
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_NETBINDENABLE         = 9
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_NETBINDDISABLE        = 10
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_DEVICEEVENT           = 11
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_POWEREVENT            = 13
0000000000000000000000000000000000000000;;		SERVICE_CONTROL_SESSIONCHANGE         = 14
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_ACTIVE    = 1
0000000000000000000000000000000000000000;;		SERVICE_INACTIVE  = 2
0000000000000000000000000000000000000000;;		SERVICE_STATE_ALL = 3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SERVICE_QUERY_CONFIG           = 1
0000000000000000000000000000000000000000;;		SERVICE_CHANGE_CONFIG          = 2
0000000000000000000000000000000000000000;;		SERVICE_QUERY_STATUS           = 4
0000000000000000000000000000000000000000;;		SERVICE_ENUMERATE_DEPENDENTS   = 8
0000000000000000000000000000000000000000;;		SERVICE_START                  = 16
0000000000000000000000000000000000000000;;		SERVICE_STOP                   = 32
0000000000000000000000000000000000000000;;		SERVICE_PAUSE_CONTINUE         = 64
0000000000000000000000000000000000000000;;		SERVICE_INTERROGATE            = 128
0000000000000000000000000000000000000000;;		SERVICE_USER_DEFINED_CONTROL   = 256
0000000000000000000000000000000000000000;;		SERVICE_ALL_ACCESS             = STANDARD_RIGHTS_REQUIRED | SERVICE_QUERY_CONFIG | SERVICE_CHANGE_CONFIG | SERVICE_QUERY_STATUS | SERVICE_ENUMERATE_DEPENDENTS | SERVICE_START | SERVICE_STOP | SERVICE_PAUSE_CONTINUE | SERVICE_INTERROGATE | SERVICE_USER_DEFINED_CONTROL
0000000000000000000000000000000000000000;;		SERVICE_RUNS_IN_SYSTEM_PROCESS = 1
0000000000000000000000000000000000000000;;		SERVICE_CONFIG_DESCRIPTION     = 1
0000000000000000000000000000000000000000;;		SERVICE_CONFIG_FAILURE_ACTIONS = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NO_ERROR = 0
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SERVICE_STATUS struct {
0000000000000000000000000000000000000000;;		ServiceType             uint32
0000000000000000000000000000000000000000;;		CurrentState            uint32
0000000000000000000000000000000000000000;;		ControlsAccepted        uint32
0000000000000000000000000000000000000000;;		Win32ExitCode           uint32
0000000000000000000000000000000000000000;;		ServiceSpecificExitCode uint32
0000000000000000000000000000000000000000;;		CheckPoint              uint32
0000000000000000000000000000000000000000;;		WaitHint                uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SERVICE_TABLE_ENTRY struct {
0000000000000000000000000000000000000000;;		ServiceName *uint16
0000000000000000000000000000000000000000;;		ServiceProc uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type QUERY_SERVICE_CONFIG struct {
0000000000000000000000000000000000000000;;		ServiceType      uint32
0000000000000000000000000000000000000000;;		StartType        uint32
0000000000000000000000000000000000000000;;		ErrorControl     uint32
0000000000000000000000000000000000000000;;		BinaryPathName   *uint16
0000000000000000000000000000000000000000;;		LoadOrderGroup   *uint16
0000000000000000000000000000000000000000;;		TagId            uint32
0000000000000000000000000000000000000000;;		Dependencies     *uint16
0000000000000000000000000000000000000000;;		ServiceStartName *uint16
0000000000000000000000000000000000000000;;		DisplayName      *uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SERVICE_DESCRIPTION struct {
0000000000000000000000000000000000000000;;		Description *uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	CloseServiceHandle(handle Handle) (err error) = advapi32.CloseServiceHandle
0000000000000000000000000000000000000000;;	//sys	CreateService(mgr Handle, serviceName *uint16, displayName *uint16, access uint32, srvType uint32, startType uint32, errCtl uint32, pathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16) (handle Handle, err error) [failretval==0] = advapi32.CreateServiceW
0000000000000000000000000000000000000000;;	//sys	OpenService(mgr Handle, serviceName *uint16, access uint32) (handle Handle, err error) [failretval==0] = advapi32.OpenServiceW
0000000000000000000000000000000000000000;;	//sys	DeleteService(service Handle) (err error) = advapi32.DeleteService
0000000000000000000000000000000000000000;;	//sys	StartService(service Handle, numArgs uint32, argVectors **uint16) (err error) = advapi32.StartServiceW
0000000000000000000000000000000000000000;;	//sys	QueryServiceStatus(service Handle, status *SERVICE_STATUS) (err error) = advapi32.QueryServiceStatus
0000000000000000000000000000000000000000;;	//sys	ControlService(service Handle, control uint32, status *SERVICE_STATUS) (err error) = advapi32.ControlService
0000000000000000000000000000000000000000;;	//sys	StartServiceCtrlDispatcher(serviceTable *SERVICE_TABLE_ENTRY) (err error) = advapi32.StartServiceCtrlDispatcherW
0000000000000000000000000000000000000000;;	//sys	SetServiceStatus(service Handle, serviceStatus *SERVICE_STATUS) (err error) = advapi32.SetServiceStatus
0000000000000000000000000000000000000000;;	//sys	ChangeServiceConfig(service Handle, serviceType uint32, startType uint32, errorControl uint32, binaryPathName *uint16, loadOrderGroup *uint16, tagId *uint32, dependencies *uint16, serviceStartName *uint16, password *uint16, displayName *uint16) (err error) = advapi32.ChangeServiceConfigW
0000000000000000000000000000000000000000;;	//sys	QueryServiceConfig(service Handle, serviceConfig *QUERY_SERVICE_CONFIG, bufSize uint32, bytesNeeded *uint32) (err error) = advapi32.QueryServiceConfigW
0000000000000000000000000000000000000000;;	//sys	ChangeServiceConfig2(service Handle, infoLevel uint32, info *byte) (err error) = advapi32.ChangeServiceConfig2W
0000000000000000000000000000000000000000;;	//sys	QueryServiceConfig2(service Handle, infoLevel uint32, buff *byte, buffSize uint32, bytesNeeded *uint32) (err error) = advapi32.QueryServiceConfig2W
