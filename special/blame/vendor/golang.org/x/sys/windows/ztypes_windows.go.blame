0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
372f1bceb3e2da05404dc30071e64aebe6b55b42;;	
0000000000000000000000000000000000000000;;	package windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Windows errors.
0000000000000000000000000000000000000000;;		ERROR_FILE_NOT_FOUND         syscall.Errno = 2
0000000000000000000000000000000000000000;;		ERROR_PATH_NOT_FOUND         syscall.Errno = 3
0000000000000000000000000000000000000000;;		ERROR_ACCESS_DENIED          syscall.Errno = 5
0000000000000000000000000000000000000000;;		ERROR_NO_MORE_FILES          syscall.Errno = 18
0000000000000000000000000000000000000000;;		ERROR_HANDLE_EOF             syscall.Errno = 38
0000000000000000000000000000000000000000;;		ERROR_NETNAME_DELETED        syscall.Errno = 64
0000000000000000000000000000000000000000;;		ERROR_FILE_EXISTS            syscall.Errno = 80
0000000000000000000000000000000000000000;;		ERROR_BROKEN_PIPE            syscall.Errno = 109
0000000000000000000000000000000000000000;;		ERROR_BUFFER_OVERFLOW        syscall.Errno = 111
0000000000000000000000000000000000000000;;		ERROR_INSUFFICIENT_BUFFER    syscall.Errno = 122
0000000000000000000000000000000000000000;;		ERROR_MOD_NOT_FOUND          syscall.Errno = 126
0000000000000000000000000000000000000000;;		ERROR_PROC_NOT_FOUND         syscall.Errno = 127
0000000000000000000000000000000000000000;;		ERROR_ALREADY_EXISTS         syscall.Errno = 183
0000000000000000000000000000000000000000;;		ERROR_ENVVAR_NOT_FOUND       syscall.Errno = 203
0000000000000000000000000000000000000000;;		ERROR_MORE_DATA              syscall.Errno = 234
0000000000000000000000000000000000000000;;		ERROR_OPERATION_ABORTED      syscall.Errno = 995
0000000000000000000000000000000000000000;;		ERROR_IO_PENDING             syscall.Errno = 997
0000000000000000000000000000000000000000;;		ERROR_SERVICE_SPECIFIC_ERROR syscall.Errno = 1066
0000000000000000000000000000000000000000;;		ERROR_NOT_FOUND              syscall.Errno = 1168
0000000000000000000000000000000000000000;;		ERROR_PRIVILEGE_NOT_HELD     syscall.Errno = 1314
0000000000000000000000000000000000000000;;		WSAEACCES                    syscall.Errno = 10013
0000000000000000000000000000000000000000;;		WSAECONNRESET                syscall.Errno = 10054
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Invented values to support what package os expects.
0000000000000000000000000000000000000000;;		O_RDONLY   = 0x00000
0000000000000000000000000000000000000000;;		O_WRONLY   = 0x00001
0000000000000000000000000000000000000000;;		O_RDWR     = 0x00002
0000000000000000000000000000000000000000;;		O_CREAT    = 0x00040
0000000000000000000000000000000000000000;;		O_EXCL     = 0x00080
0000000000000000000000000000000000000000;;		O_NOCTTY   = 0x00100
0000000000000000000000000000000000000000;;		O_TRUNC    = 0x00200
0000000000000000000000000000000000000000;;		O_NONBLOCK = 0x00800
0000000000000000000000000000000000000000;;		O_APPEND   = 0x00400
0000000000000000000000000000000000000000;;		O_SYNC     = 0x01000
0000000000000000000000000000000000000000;;		O_ASYNC    = 0x02000
0000000000000000000000000000000000000000;;		O_CLOEXEC  = 0x80000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// More invented values for signals
0000000000000000000000000000000000000000;;		SIGHUP  = Signal(0x1)
0000000000000000000000000000000000000000;;		SIGINT  = Signal(0x2)
0000000000000000000000000000000000000000;;		SIGQUIT = Signal(0x3)
0000000000000000000000000000000000000000;;		SIGILL  = Signal(0x4)
0000000000000000000000000000000000000000;;		SIGTRAP = Signal(0x5)
0000000000000000000000000000000000000000;;		SIGABRT = Signal(0x6)
0000000000000000000000000000000000000000;;		SIGBUS  = Signal(0x7)
0000000000000000000000000000000000000000;;		SIGFPE  = Signal(0x8)
0000000000000000000000000000000000000000;;		SIGKILL = Signal(0x9)
0000000000000000000000000000000000000000;;		SIGSEGV = Signal(0xb)
0000000000000000000000000000000000000000;;		SIGPIPE = Signal(0xd)
0000000000000000000000000000000000000000;;		SIGALRM = Signal(0xe)
0000000000000000000000000000000000000000;;		SIGTERM = Signal(0xf)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var signals = [...]string{
0000000000000000000000000000000000000000;;		1:  "hangup",
0000000000000000000000000000000000000000;;		2:  "interrupt",
0000000000000000000000000000000000000000;;		3:  "quit",
0000000000000000000000000000000000000000;;		4:  "illegal instruction",
0000000000000000000000000000000000000000;;		5:  "trace/breakpoint trap",
0000000000000000000000000000000000000000;;		6:  "aborted",
0000000000000000000000000000000000000000;;		7:  "bus error",
0000000000000000000000000000000000000000;;		8:  "floating point exception",
0000000000000000000000000000000000000000;;		9:  "killed",
0000000000000000000000000000000000000000;;		10: "user defined signal 1",
0000000000000000000000000000000000000000;;		11: "segmentation fault",
0000000000000000000000000000000000000000;;		12: "user defined signal 2",
0000000000000000000000000000000000000000;;		13: "broken pipe",
0000000000000000000000000000000000000000;;		14: "alarm clock",
0000000000000000000000000000000000000000;;		15: "terminated",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GENERIC_READ    = 0x80000000
0000000000000000000000000000000000000000;;		GENERIC_WRITE   = 0x40000000
0000000000000000000000000000000000000000;;		GENERIC_EXECUTE = 0x20000000
0000000000000000000000000000000000000000;;		GENERIC_ALL     = 0x10000000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILE_LIST_DIRECTORY   = 0x00000001
0000000000000000000000000000000000000000;;		FILE_APPEND_DATA      = 0x00000004
0000000000000000000000000000000000000000;;		FILE_WRITE_ATTRIBUTES = 0x00000100
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILE_SHARE_READ              = 0x00000001
0000000000000000000000000000000000000000;;		FILE_SHARE_WRITE             = 0x00000002
0000000000000000000000000000000000000000;;		FILE_SHARE_DELETE            = 0x00000004
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_READONLY      = 0x00000001
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_HIDDEN        = 0x00000002
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_SYSTEM        = 0x00000004
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_DIRECTORY     = 0x00000010
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_ARCHIVE       = 0x00000020
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_NORMAL        = 0x00000080
0000000000000000000000000000000000000000;;		FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		INVALID_FILE_ATTRIBUTES = 0xffffffff
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CREATE_NEW        = 1
0000000000000000000000000000000000000000;;		CREATE_ALWAYS     = 2
0000000000000000000000000000000000000000;;		OPEN_EXISTING     = 3
0000000000000000000000000000000000000000;;		OPEN_ALWAYS       = 4
0000000000000000000000000000000000000000;;		TRUNCATE_EXISTING = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000
0000000000000000000000000000000000000000;;		FILE_FLAG_BACKUP_SEMANTICS   = 0x02000000
0000000000000000000000000000000000000000;;		FILE_FLAG_OVERLAPPED         = 0x40000000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HANDLE_FLAG_INHERIT    = 0x00000001
0000000000000000000000000000000000000000;;		STARTF_USESTDHANDLES   = 0x00000100
0000000000000000000000000000000000000000;;		STARTF_USESHOWWINDOW   = 0x00000001
0000000000000000000000000000000000000000;;		DUPLICATE_CLOSE_SOURCE = 0x00000001
0000000000000000000000000000000000000000;;		DUPLICATE_SAME_ACCESS  = 0x00000002
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		STD_INPUT_HANDLE  = -10
0000000000000000000000000000000000000000;;		STD_OUTPUT_HANDLE = -11
0000000000000000000000000000000000000000;;		STD_ERROR_HANDLE  = -12
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILE_BEGIN   = 0
0000000000000000000000000000000000000000;;		FILE_CURRENT = 1
0000000000000000000000000000000000000000;;		FILE_END     = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LANG_ENGLISH       = 0x09
0000000000000000000000000000000000000000;;		SUBLANG_ENGLISH_US = 0x01
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_ALLOCATE_BUFFER = 256
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_IGNORE_INSERTS  = 512
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_FROM_STRING     = 1024
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_FROM_HMODULE    = 2048
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_FROM_SYSTEM     = 4096
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_ARGUMENT_ARRAY  = 8192
0000000000000000000000000000000000000000;;		FORMAT_MESSAGE_MAX_WIDTH_MASK  = 255
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MAX_PATH      = 260
0000000000000000000000000000000000000000;;		MAX_LONG_PATH = 32768
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MAX_COMPUTERNAME_LENGTH = 15
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TIME_ZONE_ID_UNKNOWN  = 0
0000000000000000000000000000000000000000;;		TIME_ZONE_ID_STANDARD = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TIME_ZONE_ID_DAYLIGHT = 2
0000000000000000000000000000000000000000;;		IGNORE                = 0
0000000000000000000000000000000000000000;;		INFINITE              = 0xffffffff
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WAIT_TIMEOUT   = 258
0000000000000000000000000000000000000000;;		WAIT_ABANDONED = 0x00000080
0000000000000000000000000000000000000000;;		WAIT_OBJECT_0  = 0x00000000
0000000000000000000000000000000000000000;;		WAIT_FAILED    = 0xFFFFFFFF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CREATE_NEW_PROCESS_GROUP   = 0x00000200
0000000000000000000000000000000000000000;;		CREATE_UNICODE_ENVIRONMENT = 0x00000400
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PROCESS_TERMINATE         = 1
0000000000000000000000000000000000000000;;		PROCESS_QUERY_INFORMATION = 0x00000400
0000000000000000000000000000000000000000;;		SYNCHRONIZE               = 0x00100000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PAGE_READONLY          = 0x02
0000000000000000000000000000000000000000;;		PAGE_READWRITE         = 0x04
0000000000000000000000000000000000000000;;		PAGE_WRITECOPY         = 0x08
0000000000000000000000000000000000000000;;		PAGE_EXECUTE_READ      = 0x20
0000000000000000000000000000000000000000;;		PAGE_EXECUTE_READWRITE = 0x40
0000000000000000000000000000000000000000;;		PAGE_EXECUTE_WRITECOPY = 0x80
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FILE_MAP_COPY    = 0x01
0000000000000000000000000000000000000000;;		FILE_MAP_WRITE   = 0x02
0000000000000000000000000000000000000000;;		FILE_MAP_READ    = 0x04
0000000000000000000000000000000000000000;;		FILE_MAP_EXECUTE = 0x20
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CTRL_C_EVENT     = 0
0000000000000000000000000000000000000000;;		CTRL_BREAK_EVENT = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Windows reserves errors >= 1<<29 for application use.
0000000000000000000000000000000000000000;;		APPLICATION_ERROR = 1 << 29
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// flags for CreateToolhelp32Snapshot
0000000000000000000000000000000000000000;;		TH32CS_SNAPHEAPLIST = 0x01
0000000000000000000000000000000000000000;;		TH32CS_SNAPPROCESS  = 0x02
0000000000000000000000000000000000000000;;		TH32CS_SNAPTHREAD   = 0x04
0000000000000000000000000000000000000000;;		TH32CS_SNAPMODULE   = 0x08
0000000000000000000000000000000000000000;;		TH32CS_SNAPMODULE32 = 0x10
0000000000000000000000000000000000000000;;		TH32CS_SNAPALL      = TH32CS_SNAPHEAPLIST | TH32CS_SNAPMODULE | TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD
0000000000000000000000000000000000000000;;		TH32CS_INHERIT      = 0x80000000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// filters for ReadDirectoryChangesW
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_FILE_NAME   = 0x001
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_DIR_NAME    = 0x002
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_ATTRIBUTES  = 0x004
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_SIZE        = 0x008
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_LAST_WRITE  = 0x010
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x020
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_CREATION    = 0x040
0000000000000000000000000000000000000000;;		FILE_NOTIFY_CHANGE_SECURITY    = 0x100
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// do not reorder
0000000000000000000000000000000000000000;;		FILE_ACTION_ADDED = iota + 1
0000000000000000000000000000000000000000;;		FILE_ACTION_REMOVED
0000000000000000000000000000000000000000;;		FILE_ACTION_MODIFIED
0000000000000000000000000000000000000000;;		FILE_ACTION_RENAMED_OLD_NAME
0000000000000000000000000000000000000000;;		FILE_ACTION_RENAMED_NEW_NAME
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// wincrypt.h
0000000000000000000000000000000000000000;;		PROV_RSA_FULL                    = 1
0000000000000000000000000000000000000000;;		PROV_RSA_SIG                     = 2
0000000000000000000000000000000000000000;;		PROV_DSS                         = 3
0000000000000000000000000000000000000000;;		PROV_FORTEZZA                    = 4
0000000000000000000000000000000000000000;;		PROV_MS_EXCHANGE                 = 5
0000000000000000000000000000000000000000;;		PROV_SSL                         = 6
0000000000000000000000000000000000000000;;		PROV_RSA_SCHANNEL                = 12
0000000000000000000000000000000000000000;;		PROV_DSS_DH                      = 13
0000000000000000000000000000000000000000;;		PROV_EC_ECDSA_SIG                = 14
0000000000000000000000000000000000000000;;		PROV_EC_ECNRA_SIG                = 15
0000000000000000000000000000000000000000;;		PROV_EC_ECDSA_FULL               = 16
0000000000000000000000000000000000000000;;		PROV_EC_ECNRA_FULL               = 17
0000000000000000000000000000000000000000;;		PROV_DH_SCHANNEL                 = 18
0000000000000000000000000000000000000000;;		PROV_SPYRUS_LYNKS                = 20
0000000000000000000000000000000000000000;;		PROV_RNG                         = 21
0000000000000000000000000000000000000000;;		PROV_INTEL_SEC                   = 22
0000000000000000000000000000000000000000;;		PROV_REPLACE_OWF                 = 23
0000000000000000000000000000000000000000;;		PROV_RSA_AES                     = 24
0000000000000000000000000000000000000000;;		CRYPT_VERIFYCONTEXT              = 0xF0000000
0000000000000000000000000000000000000000;;		CRYPT_NEWKEYSET                  = 0x00000008
0000000000000000000000000000000000000000;;		CRYPT_DELETEKEYSET               = 0x00000010
0000000000000000000000000000000000000000;;		CRYPT_MACHINE_KEYSET             = 0x00000020
0000000000000000000000000000000000000000;;		CRYPT_SILENT                     = 0x00000040
0000000000000000000000000000000000000000;;		CRYPT_DEFAULT_CONTAINER_OPTIONAL = 0x00000080
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		USAGE_MATCH_TYPE_AND = 0
0000000000000000000000000000000000000000;;		USAGE_MATCH_TYPE_OR  = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		X509_ASN_ENCODING   = 0x00000001
0000000000000000000000000000000000000000;;		PKCS_7_ASN_ENCODING = 0x00010000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_STORE_PROV_MEMORY = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_STORE_ADD_ALWAYS = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 0x00000004
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_TRUST_NO_ERROR                          = 0x00000000
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_NOT_TIME_VALID                 = 0x00000001
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_REVOKED                        = 0x00000004
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_NOT_SIGNATURE_VALID            = 0x00000008
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_NOT_VALID_FOR_USAGE            = 0x00000010
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_UNTRUSTED_ROOT                 = 0x00000020
0000000000000000000000000000000000000000;;		CERT_TRUST_REVOCATION_STATUS_UNKNOWN         = 0x00000040
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_CYCLIC                         = 0x00000080
0000000000000000000000000000000000000000;;		CERT_TRUST_INVALID_EXTENSION                 = 0x00000100
0000000000000000000000000000000000000000;;		CERT_TRUST_INVALID_POLICY_CONSTRAINTS        = 0x00000200
0000000000000000000000000000000000000000;;		CERT_TRUST_INVALID_BASIC_CONSTRAINTS         = 0x00000400
0000000000000000000000000000000000000000;;		CERT_TRUST_INVALID_NAME_CONSTRAINTS          = 0x00000800
0000000000000000000000000000000000000000;;		CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 0x00001000
0000000000000000000000000000000000000000;;		CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT   = 0x00002000
0000000000000000000000000000000000000000;;		CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 0x00004000
0000000000000000000000000000000000000000;;		CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT      = 0x00008000
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_OFFLINE_REVOCATION             = 0x01000000
0000000000000000000000000000000000000000;;		CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY          = 0x02000000
0000000000000000000000000000000000000000;;		CERT_TRUST_IS_EXPLICIT_DISTRUST              = 0x04000000
0000000000000000000000000000000000000000;;		CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT    = 0x08000000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_BASE              = 1
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_AUTHENTICODE      = 2
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_AUTHENTICODE_TS   = 3
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_SSL               = 4
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_NT_AUTH           = 6
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_MICROSOFT_ROOT    = 7
0000000000000000000000000000000000000000;;		CERT_CHAIN_POLICY_EV                = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CERT_E_EXPIRED       = 0x800B0101
0000000000000000000000000000000000000000;;		CERT_E_ROLE          = 0x800B0103
0000000000000000000000000000000000000000;;		CERT_E_PURPOSE       = 0x800B0106
0000000000000000000000000000000000000000;;		CERT_E_UNTRUSTEDROOT = 0x800B0109
0000000000000000000000000000000000000000;;		CERT_E_CN_NO_MATCH   = 0x800B010F
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AUTHTYPE_CLIENT = 1
0000000000000000000000000000000000000000;;		AUTHTYPE_SERVER = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		OID_PKIX_KP_SERVER_AUTH = []byte("1.3.6.1.5.5.7.3.1\x00")
0000000000000000000000000000000000000000;;		OID_SERVER_GATED_CRYPTO = []byte("1.3.6.1.4.1.311.10.3.3\x00")
0000000000000000000000000000000000000000;;		OID_SGC_NETSCAPE        = []byte("2.16.840.1.113730.4.1\x00")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Invented values to support what package os expects.
0000000000000000000000000000000000000000;;	type Timeval struct {
0000000000000000000000000000000000000000;;		Sec  int32
0000000000000000000000000000000000000000;;		Usec int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tv *Timeval) Nanoseconds() int64 {
0000000000000000000000000000000000000000;;		return (int64(tv.Sec)*1e6 + int64(tv.Usec)) * 1e3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimeval(nsec int64) (tv Timeval) {
0000000000000000000000000000000000000000;;		tv.Sec = int32(nsec / 1e9)
0000000000000000000000000000000000000000;;		tv.Usec = int32(nsec % 1e9 / 1e3)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecurityAttributes struct {
0000000000000000000000000000000000000000;;		Length             uint32
0000000000000000000000000000000000000000;;		SecurityDescriptor uintptr
0000000000000000000000000000000000000000;;		InheritHandle      uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Overlapped struct {
0000000000000000000000000000000000000000;;		Internal     uintptr
0000000000000000000000000000000000000000;;		InternalHigh uintptr
0000000000000000000000000000000000000000;;		Offset       uint32
0000000000000000000000000000000000000000;;		OffsetHigh   uint32
0000000000000000000000000000000000000000;;		HEvent       Handle
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileNotifyInformation struct {
0000000000000000000000000000000000000000;;		NextEntryOffset uint32
0000000000000000000000000000000000000000;;		Action          uint32
0000000000000000000000000000000000000000;;		FileNameLength  uint32
0000000000000000000000000000000000000000;;		FileName        uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Filetime struct {
0000000000000000000000000000000000000000;;		LowDateTime  uint32
0000000000000000000000000000000000000000;;		HighDateTime uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Nanoseconds returns Filetime ft in nanoseconds
0000000000000000000000000000000000000000;;	// since Epoch (00:00:00 UTC, January 1, 1970).
0000000000000000000000000000000000000000;;	func (ft *Filetime) Nanoseconds() int64 {
0000000000000000000000000000000000000000;;		// 100-nanosecond intervals since January 1, 1601
0000000000000000000000000000000000000000;;		nsec := int64(ft.HighDateTime)<<32 + int64(ft.LowDateTime)
0000000000000000000000000000000000000000;;		// change starting time to the Epoch (00:00:00 UTC, January 1, 1970)
0000000000000000000000000000000000000000;;		nsec -= 116444736000000000
0000000000000000000000000000000000000000;;		// convert into nanoseconds
0000000000000000000000000000000000000000;;		nsec *= 100
0000000000000000000000000000000000000000;;		return nsec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToFiletime(nsec int64) (ft Filetime) {
0000000000000000000000000000000000000000;;		// convert into 100-nanosecond
0000000000000000000000000000000000000000;;		nsec /= 100
0000000000000000000000000000000000000000;;		// change starting time to January 1, 1601
0000000000000000000000000000000000000000;;		nsec += 116444736000000000
0000000000000000000000000000000000000000;;		// split into high / low
0000000000000000000000000000000000000000;;		ft.LowDateTime = uint32(nsec & 0xffffffff)
0000000000000000000000000000000000000000;;		ft.HighDateTime = uint32(nsec >> 32 & 0xffffffff)
0000000000000000000000000000000000000000;;		return ft
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Win32finddata struct {
0000000000000000000000000000000000000000;;		FileAttributes    uint32
0000000000000000000000000000000000000000;;		CreationTime      Filetime
0000000000000000000000000000000000000000;;		LastAccessTime    Filetime
0000000000000000000000000000000000000000;;		LastWriteTime     Filetime
0000000000000000000000000000000000000000;;		FileSizeHigh      uint32
0000000000000000000000000000000000000000;;		FileSizeLow       uint32
0000000000000000000000000000000000000000;;		Reserved0         uint32
0000000000000000000000000000000000000000;;		Reserved1         uint32
0000000000000000000000000000000000000000;;		FileName          [MAX_PATH - 1]uint16
0000000000000000000000000000000000000000;;		AlternateFileName [13]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This is the actual system call structure.
0000000000000000000000000000000000000000;;	// Win32finddata is what we committed to in Go 1.
0000000000000000000000000000000000000000;;	type win32finddata1 struct {
0000000000000000000000000000000000000000;;		FileAttributes    uint32
0000000000000000000000000000000000000000;;		CreationTime      Filetime
0000000000000000000000000000000000000000;;		LastAccessTime    Filetime
0000000000000000000000000000000000000000;;		LastWriteTime     Filetime
0000000000000000000000000000000000000000;;		FileSizeHigh      uint32
0000000000000000000000000000000000000000;;		FileSizeLow       uint32
0000000000000000000000000000000000000000;;		Reserved0         uint32
0000000000000000000000000000000000000000;;		Reserved1         uint32
0000000000000000000000000000000000000000;;		FileName          [MAX_PATH]uint16
0000000000000000000000000000000000000000;;		AlternateFileName [14]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func copyFindData(dst *Win32finddata, src *win32finddata1) {
0000000000000000000000000000000000000000;;		dst.FileAttributes = src.FileAttributes
0000000000000000000000000000000000000000;;		dst.CreationTime = src.CreationTime
0000000000000000000000000000000000000000;;		dst.LastAccessTime = src.LastAccessTime
0000000000000000000000000000000000000000;;		dst.LastWriteTime = src.LastWriteTime
0000000000000000000000000000000000000000;;		dst.FileSizeHigh = src.FileSizeHigh
0000000000000000000000000000000000000000;;		dst.FileSizeLow = src.FileSizeLow
0000000000000000000000000000000000000000;;		dst.Reserved0 = src.Reserved0
0000000000000000000000000000000000000000;;		dst.Reserved1 = src.Reserved1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The src is 1 element bigger than dst, but it must be NUL.
0000000000000000000000000000000000000000;;		copy(dst.FileName[:], src.FileName[:])
0000000000000000000000000000000000000000;;		copy(dst.AlternateFileName[:], src.AlternateFileName[:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ByHandleFileInformation struct {
0000000000000000000000000000000000000000;;		FileAttributes     uint32
0000000000000000000000000000000000000000;;		CreationTime       Filetime
0000000000000000000000000000000000000000;;		LastAccessTime     Filetime
0000000000000000000000000000000000000000;;		LastWriteTime      Filetime
0000000000000000000000000000000000000000;;		VolumeSerialNumber uint32
0000000000000000000000000000000000000000;;		FileSizeHigh       uint32
0000000000000000000000000000000000000000;;		FileSizeLow        uint32
0000000000000000000000000000000000000000;;		NumberOfLinks      uint32
0000000000000000000000000000000000000000;;		FileIndexHigh      uint32
0000000000000000000000000000000000000000;;		FileIndexLow       uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GetFileExInfoStandard = 0
0000000000000000000000000000000000000000;;		GetFileExMaxInfoLevel = 1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Win32FileAttributeData struct {
0000000000000000000000000000000000000000;;		FileAttributes uint32
0000000000000000000000000000000000000000;;		CreationTime   Filetime
0000000000000000000000000000000000000000;;		LastAccessTime Filetime
0000000000000000000000000000000000000000;;		LastWriteTime  Filetime
0000000000000000000000000000000000000000;;		FileSizeHigh   uint32
0000000000000000000000000000000000000000;;		FileSizeLow    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ShowWindow constants
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// winuser.h
0000000000000000000000000000000000000000;;		SW_HIDE            = 0
0000000000000000000000000000000000000000;;		SW_NORMAL          = 1
0000000000000000000000000000000000000000;;		SW_SHOWNORMAL      = 1
0000000000000000000000000000000000000000;;		SW_SHOWMINIMIZED   = 2
0000000000000000000000000000000000000000;;		SW_SHOWMAXIMIZED   = 3
0000000000000000000000000000000000000000;;		SW_MAXIMIZE        = 3
0000000000000000000000000000000000000000;;		SW_SHOWNOACTIVATE  = 4
0000000000000000000000000000000000000000;;		SW_SHOW            = 5
0000000000000000000000000000000000000000;;		SW_MINIMIZE        = 6
0000000000000000000000000000000000000000;;		SW_SHOWMINNOACTIVE = 7
0000000000000000000000000000000000000000;;		SW_SHOWNA          = 8
0000000000000000000000000000000000000000;;		SW_RESTORE         = 9
0000000000000000000000000000000000000000;;		SW_SHOWDEFAULT     = 10
0000000000000000000000000000000000000000;;		SW_FORCEMINIMIZE   = 11
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StartupInfo struct {
0000000000000000000000000000000000000000;;		Cb            uint32
0000000000000000000000000000000000000000;;		_             *uint16
0000000000000000000000000000000000000000;;		Desktop       *uint16
0000000000000000000000000000000000000000;;		Title         *uint16
0000000000000000000000000000000000000000;;		X             uint32
0000000000000000000000000000000000000000;;		Y             uint32
0000000000000000000000000000000000000000;;		XSize         uint32
0000000000000000000000000000000000000000;;		YSize         uint32
0000000000000000000000000000000000000000;;		XCountChars   uint32
0000000000000000000000000000000000000000;;		YCountChars   uint32
0000000000000000000000000000000000000000;;		FillAttribute uint32
0000000000000000000000000000000000000000;;		Flags         uint32
0000000000000000000000000000000000000000;;		ShowWindow    uint16
0000000000000000000000000000000000000000;;		_             uint16
0000000000000000000000000000000000000000;;		_             *byte
0000000000000000000000000000000000000000;;		StdInput      Handle
0000000000000000000000000000000000000000;;		StdOutput     Handle
0000000000000000000000000000000000000000;;		StdErr        Handle
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInformation struct {
0000000000000000000000000000000000000000;;		Process   Handle
0000000000000000000000000000000000000000;;		Thread    Handle
0000000000000000000000000000000000000000;;		ProcessId uint32
0000000000000000000000000000000000000000;;		ThreadId  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessEntry32 struct {
0000000000000000000000000000000000000000;;		Size            uint32
0000000000000000000000000000000000000000;;		Usage           uint32
0000000000000000000000000000000000000000;;		ProcessID       uint32
0000000000000000000000000000000000000000;;		DefaultHeapID   uintptr
0000000000000000000000000000000000000000;;		ModuleID        uint32
0000000000000000000000000000000000000000;;		Threads         uint32
0000000000000000000000000000000000000000;;		ParentProcessID uint32
0000000000000000000000000000000000000000;;		PriClassBase    int32
0000000000000000000000000000000000000000;;		Flags           uint32
0000000000000000000000000000000000000000;;		ExeFile         [MAX_PATH]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Systemtime struct {
0000000000000000000000000000000000000000;;		Year         uint16
0000000000000000000000000000000000000000;;		Month        uint16
0000000000000000000000000000000000000000;;		DayOfWeek    uint16
0000000000000000000000000000000000000000;;		Day          uint16
0000000000000000000000000000000000000000;;		Hour         uint16
0000000000000000000000000000000000000000;;		Minute       uint16
0000000000000000000000000000000000000000;;		Second       uint16
0000000000000000000000000000000000000000;;		Milliseconds uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timezoneinformation struct {
0000000000000000000000000000000000000000;;		Bias         int32
0000000000000000000000000000000000000000;;		StandardName [32]uint16
0000000000000000000000000000000000000000;;		StandardDate Systemtime
0000000000000000000000000000000000000000;;		StandardBias int32
0000000000000000000000000000000000000000;;		DaylightName [32]uint16
0000000000000000000000000000000000000000;;		DaylightDate Systemtime
0000000000000000000000000000000000000000;;		DaylightBias int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Socket related.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AF_UNSPEC  = 0
0000000000000000000000000000000000000000;;		AF_UNIX    = 1
0000000000000000000000000000000000000000;;		AF_INET    = 2
0000000000000000000000000000000000000000;;		AF_INET6   = 23
0000000000000000000000000000000000000000;;		AF_NETBIOS = 17
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SOCK_STREAM    = 1
0000000000000000000000000000000000000000;;		SOCK_DGRAM     = 2
0000000000000000000000000000000000000000;;		SOCK_RAW       = 3
0000000000000000000000000000000000000000;;		SOCK_SEQPACKET = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IPPROTO_IP   = 0
0000000000000000000000000000000000000000;;		IPPROTO_IPV6 = 0x29
0000000000000000000000000000000000000000;;		IPPROTO_TCP  = 6
0000000000000000000000000000000000000000;;		IPPROTO_UDP  = 17
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SOL_SOCKET                = 0xffff
0000000000000000000000000000000000000000;;		SO_REUSEADDR              = 4
0000000000000000000000000000000000000000;;		SO_KEEPALIVE              = 8
0000000000000000000000000000000000000000;;		SO_DONTROUTE              = 16
0000000000000000000000000000000000000000;;		SO_BROADCAST              = 32
0000000000000000000000000000000000000000;;		SO_LINGER                 = 128
0000000000000000000000000000000000000000;;		SO_RCVBUF                 = 0x1002
0000000000000000000000000000000000000000;;		SO_SNDBUF                 = 0x1001
0000000000000000000000000000000000000000;;		SO_UPDATE_ACCEPT_CONTEXT  = 0x700b
0000000000000000000000000000000000000000;;		SO_UPDATE_CONNECT_CONTEXT = 0x7010
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IOC_OUT                            = 0x40000000
0000000000000000000000000000000000000000;;		IOC_IN                             = 0x80000000
0000000000000000000000000000000000000000;;		IOC_VENDOR                         = 0x18000000
0000000000000000000000000000000000000000;;		IOC_INOUT                          = IOC_IN | IOC_OUT
0000000000000000000000000000000000000000;;		IOC_WS2                            = 0x08000000
0000000000000000000000000000000000000000;;		SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT | IOC_WS2 | 6
0000000000000000000000000000000000000000;;		SIO_KEEPALIVE_VALS                 = IOC_IN | IOC_VENDOR | 4
0000000000000000000000000000000000000000;;		SIO_UDP_CONNRESET                  = IOC_IN | IOC_VENDOR | 12
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// cf. http://support.microsoft.com/default.aspx?scid=kb;en-us;257460
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IP_TOS             = 0x3
0000000000000000000000000000000000000000;;		IP_TTL             = 0x4
0000000000000000000000000000000000000000;;		IP_MULTICAST_IF    = 0x9
0000000000000000000000000000000000000000;;		IP_MULTICAST_TTL   = 0xa
0000000000000000000000000000000000000000;;		IP_MULTICAST_LOOP  = 0xb
0000000000000000000000000000000000000000;;		IP_ADD_MEMBERSHIP  = 0xc
0000000000000000000000000000000000000000;;		IP_DROP_MEMBERSHIP = 0xd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IPV6_V6ONLY         = 0x1b
0000000000000000000000000000000000000000;;		IPV6_UNICAST_HOPS   = 0x4
0000000000000000000000000000000000000000;;		IPV6_MULTICAST_IF   = 0x9
0000000000000000000000000000000000000000;;		IPV6_MULTICAST_HOPS = 0xa
0000000000000000000000000000000000000000;;		IPV6_MULTICAST_LOOP = 0xb
0000000000000000000000000000000000000000;;		IPV6_JOIN_GROUP     = 0xc
0000000000000000000000000000000000000000;;		IPV6_LEAVE_GROUP    = 0xd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SOMAXCONN = 0x7fffffff
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TCP_NODELAY = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SHUT_RD   = 0
0000000000000000000000000000000000000000;;		SHUT_WR   = 1
0000000000000000000000000000000000000000;;		SHUT_RDWR = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WSADESCRIPTION_LEN = 256
0000000000000000000000000000000000000000;;		WSASYS_STATUS_LEN  = 128
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WSABuf struct {
0000000000000000000000000000000000000000;;		Len uint32
0000000000000000000000000000000000000000;;		Buf *byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Invented values to support what package os expects.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		S_IFMT   = 0x1f000
0000000000000000000000000000000000000000;;		S_IFIFO  = 0x1000
0000000000000000000000000000000000000000;;		S_IFCHR  = 0x2000
0000000000000000000000000000000000000000;;		S_IFDIR  = 0x4000
0000000000000000000000000000000000000000;;		S_IFBLK  = 0x6000
0000000000000000000000000000000000000000;;		S_IFREG  = 0x8000
0000000000000000000000000000000000000000;;		S_IFLNK  = 0xa000
0000000000000000000000000000000000000000;;		S_IFSOCK = 0xc000
0000000000000000000000000000000000000000;;		S_ISUID  = 0x800
0000000000000000000000000000000000000000;;		S_ISGID  = 0x400
0000000000000000000000000000000000000000;;		S_ISVTX  = 0x200
0000000000000000000000000000000000000000;;		S_IRUSR  = 0x100
0000000000000000000000000000000000000000;;		S_IWRITE = 0x80
0000000000000000000000000000000000000000;;		S_IWUSR  = 0x80
0000000000000000000000000000000000000000;;		S_IXUSR  = 0x40
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FILE_TYPE_CHAR    = 0x0002
0000000000000000000000000000000000000000;;		FILE_TYPE_DISK    = 0x0001
0000000000000000000000000000000000000000;;		FILE_TYPE_PIPE    = 0x0003
0000000000000000000000000000000000000000;;		FILE_TYPE_REMOTE  = 0x8000
0000000000000000000000000000000000000000;;		FILE_TYPE_UNKNOWN = 0x0000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Hostent struct {
0000000000000000000000000000000000000000;;		Name     *byte
0000000000000000000000000000000000000000;;		Aliases  **byte
0000000000000000000000000000000000000000;;		AddrType uint16
0000000000000000000000000000000000000000;;		Length   uint16
0000000000000000000000000000000000000000;;		AddrList **byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Protoent struct {
0000000000000000000000000000000000000000;;		Name    *byte
0000000000000000000000000000000000000000;;		Aliases **byte
0000000000000000000000000000000000000000;;		Proto   uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DNS_TYPE_A       = 0x0001
0000000000000000000000000000000000000000;;		DNS_TYPE_NS      = 0x0002
0000000000000000000000000000000000000000;;		DNS_TYPE_MD      = 0x0003
0000000000000000000000000000000000000000;;		DNS_TYPE_MF      = 0x0004
0000000000000000000000000000000000000000;;		DNS_TYPE_CNAME   = 0x0005
0000000000000000000000000000000000000000;;		DNS_TYPE_SOA     = 0x0006
0000000000000000000000000000000000000000;;		DNS_TYPE_MB      = 0x0007
0000000000000000000000000000000000000000;;		DNS_TYPE_MG      = 0x0008
0000000000000000000000000000000000000000;;		DNS_TYPE_MR      = 0x0009
0000000000000000000000000000000000000000;;		DNS_TYPE_NULL    = 0x000a
0000000000000000000000000000000000000000;;		DNS_TYPE_WKS     = 0x000b
0000000000000000000000000000000000000000;;		DNS_TYPE_PTR     = 0x000c
0000000000000000000000000000000000000000;;		DNS_TYPE_HINFO   = 0x000d
0000000000000000000000000000000000000000;;		DNS_TYPE_MINFO   = 0x000e
0000000000000000000000000000000000000000;;		DNS_TYPE_MX      = 0x000f
0000000000000000000000000000000000000000;;		DNS_TYPE_TEXT    = 0x0010
0000000000000000000000000000000000000000;;		DNS_TYPE_RP      = 0x0011
0000000000000000000000000000000000000000;;		DNS_TYPE_AFSDB   = 0x0012
0000000000000000000000000000000000000000;;		DNS_TYPE_X25     = 0x0013
0000000000000000000000000000000000000000;;		DNS_TYPE_ISDN    = 0x0014
0000000000000000000000000000000000000000;;		DNS_TYPE_RT      = 0x0015
0000000000000000000000000000000000000000;;		DNS_TYPE_NSAP    = 0x0016
0000000000000000000000000000000000000000;;		DNS_TYPE_NSAPPTR = 0x0017
0000000000000000000000000000000000000000;;		DNS_TYPE_SIG     = 0x0018
0000000000000000000000000000000000000000;;		DNS_TYPE_KEY     = 0x0019
0000000000000000000000000000000000000000;;		DNS_TYPE_PX      = 0x001a
0000000000000000000000000000000000000000;;		DNS_TYPE_GPOS    = 0x001b
0000000000000000000000000000000000000000;;		DNS_TYPE_AAAA    = 0x001c
0000000000000000000000000000000000000000;;		DNS_TYPE_LOC     = 0x001d
0000000000000000000000000000000000000000;;		DNS_TYPE_NXT     = 0x001e
0000000000000000000000000000000000000000;;		DNS_TYPE_EID     = 0x001f
0000000000000000000000000000000000000000;;		DNS_TYPE_NIMLOC  = 0x0020
0000000000000000000000000000000000000000;;		DNS_TYPE_SRV     = 0x0021
0000000000000000000000000000000000000000;;		DNS_TYPE_ATMA    = 0x0022
0000000000000000000000000000000000000000;;		DNS_TYPE_NAPTR   = 0x0023
0000000000000000000000000000000000000000;;		DNS_TYPE_KX      = 0x0024
0000000000000000000000000000000000000000;;		DNS_TYPE_CERT    = 0x0025
0000000000000000000000000000000000000000;;		DNS_TYPE_A6      = 0x0026
0000000000000000000000000000000000000000;;		DNS_TYPE_DNAME   = 0x0027
0000000000000000000000000000000000000000;;		DNS_TYPE_SINK    = 0x0028
0000000000000000000000000000000000000000;;		DNS_TYPE_OPT     = 0x0029
0000000000000000000000000000000000000000;;		DNS_TYPE_DS      = 0x002B
0000000000000000000000000000000000000000;;		DNS_TYPE_RRSIG   = 0x002E
0000000000000000000000000000000000000000;;		DNS_TYPE_NSEC    = 0x002F
0000000000000000000000000000000000000000;;		DNS_TYPE_DNSKEY  = 0x0030
0000000000000000000000000000000000000000;;		DNS_TYPE_DHCID   = 0x0031
0000000000000000000000000000000000000000;;		DNS_TYPE_UINFO   = 0x0064
0000000000000000000000000000000000000000;;		DNS_TYPE_UID     = 0x0065
0000000000000000000000000000000000000000;;		DNS_TYPE_GID     = 0x0066
0000000000000000000000000000000000000000;;		DNS_TYPE_UNSPEC  = 0x0067
0000000000000000000000000000000000000000;;		DNS_TYPE_ADDRS   = 0x00f8
0000000000000000000000000000000000000000;;		DNS_TYPE_TKEY    = 0x00f9
0000000000000000000000000000000000000000;;		DNS_TYPE_TSIG    = 0x00fa
0000000000000000000000000000000000000000;;		DNS_TYPE_IXFR    = 0x00fb
0000000000000000000000000000000000000000;;		DNS_TYPE_AXFR    = 0x00fc
0000000000000000000000000000000000000000;;		DNS_TYPE_MAILB   = 0x00fd
0000000000000000000000000000000000000000;;		DNS_TYPE_MAILA   = 0x00fe
0000000000000000000000000000000000000000;;		DNS_TYPE_ALL     = 0x00ff
0000000000000000000000000000000000000000;;		DNS_TYPE_ANY     = 0x00ff
0000000000000000000000000000000000000000;;		DNS_TYPE_WINS    = 0xff01
0000000000000000000000000000000000000000;;		DNS_TYPE_WINSR   = 0xff02
0000000000000000000000000000000000000000;;		DNS_TYPE_NBSTAT  = 0xff01
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DNS_INFO_NO_RECORDS = 0x251D
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// flags inside DNSRecord.Dw
0000000000000000000000000000000000000000;;		DnsSectionQuestion   = 0x0000
0000000000000000000000000000000000000000;;		DnsSectionAnswer     = 0x0001
0000000000000000000000000000000000000000;;		DnsSectionAuthority  = 0x0002
0000000000000000000000000000000000000000;;		DnsSectionAdditional = 0x0003
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DNSSRVData struct {
0000000000000000000000000000000000000000;;		Target   *uint16
0000000000000000000000000000000000000000;;		Priority uint16
0000000000000000000000000000000000000000;;		Weight   uint16
0000000000000000000000000000000000000000;;		Port     uint16
0000000000000000000000000000000000000000;;		Pad      uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DNSPTRData struct {
0000000000000000000000000000000000000000;;		Host *uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DNSMXData struct {
0000000000000000000000000000000000000000;;		NameExchange *uint16
0000000000000000000000000000000000000000;;		Preference   uint16
0000000000000000000000000000000000000000;;		Pad          uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DNSTXTData struct {
0000000000000000000000000000000000000000;;		StringCount uint16
0000000000000000000000000000000000000000;;		StringArray [1]*uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DNSRecord struct {
0000000000000000000000000000000000000000;;		Next     *DNSRecord
0000000000000000000000000000000000000000;;		Name     *uint16
0000000000000000000000000000000000000000;;		Type     uint16
0000000000000000000000000000000000000000;;		Length   uint16
0000000000000000000000000000000000000000;;		Dw       uint32
0000000000000000000000000000000000000000;;		Ttl      uint32
0000000000000000000000000000000000000000;;		Reserved uint32
0000000000000000000000000000000000000000;;		Data     [40]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TF_DISCONNECT         = 1
0000000000000000000000000000000000000000;;		TF_REUSE_SOCKET       = 2
0000000000000000000000000000000000000000;;		TF_WRITE_BEHIND       = 4
0000000000000000000000000000000000000000;;		TF_USE_DEFAULT_WORKER = 0
0000000000000000000000000000000000000000;;		TF_USE_SYSTEM_THREAD  = 16
0000000000000000000000000000000000000000;;		TF_USE_KERNEL_APC     = 32
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TransmitFileBuffers struct {
0000000000000000000000000000000000000000;;		Head       uintptr
0000000000000000000000000000000000000000;;		HeadLength uint32
0000000000000000000000000000000000000000;;		Tail       uintptr
0000000000000000000000000000000000000000;;		TailLength uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IFF_UP           = 1
0000000000000000000000000000000000000000;;		IFF_BROADCAST    = 2
0000000000000000000000000000000000000000;;		IFF_LOOPBACK     = 4
0000000000000000000000000000000000000000;;		IFF_POINTTOPOINT = 8
0000000000000000000000000000000000000000;;		IFF_MULTICAST    = 16
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const SIO_GET_INTERFACE_LIST = 0x4004747F
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(mattn): SockaddrGen is union of sockaddr/sockaddr_in/sockaddr_in6_old.
0000000000000000000000000000000000000000;;	// will be fixed to change variable type as suitable.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockaddrGen [24]byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InterfaceInfo struct {
0000000000000000000000000000000000000000;;		Flags            uint32
0000000000000000000000000000000000000000;;		Address          SockaddrGen
0000000000000000000000000000000000000000;;		BroadcastAddress SockaddrGen
0000000000000000000000000000000000000000;;		Netmask          SockaddrGen
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressString struct {
0000000000000000000000000000000000000000;;		String [16]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpMaskString IpAddressString
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddrString struct {
0000000000000000000000000000000000000000;;		Next      *IpAddrString
0000000000000000000000000000000000000000;;		IpAddress IpAddressString
0000000000000000000000000000000000000000;;		IpMask    IpMaskString
0000000000000000000000000000000000000000;;		Context   uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const MAX_ADAPTER_NAME_LENGTH = 256
0000000000000000000000000000000000000000;;	const MAX_ADAPTER_DESCRIPTION_LENGTH = 128
0000000000000000000000000000000000000000;;	const MAX_ADAPTER_ADDRESS_LENGTH = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterInfo struct {
0000000000000000000000000000000000000000;;		Next                *IpAdapterInfo
0000000000000000000000000000000000000000;;		ComboIndex          uint32
0000000000000000000000000000000000000000;;		AdapterName         [MAX_ADAPTER_NAME_LENGTH + 4]byte
0000000000000000000000000000000000000000;;		Description         [MAX_ADAPTER_DESCRIPTION_LENGTH + 4]byte
0000000000000000000000000000000000000000;;		AddressLength       uint32
0000000000000000000000000000000000000000;;		Address             [MAX_ADAPTER_ADDRESS_LENGTH]byte
0000000000000000000000000000000000000000;;		Index               uint32
0000000000000000000000000000000000000000;;		Type                uint32
0000000000000000000000000000000000000000;;		DhcpEnabled         uint32
0000000000000000000000000000000000000000;;		CurrentIpAddress    *IpAddrString
0000000000000000000000000000000000000000;;		IpAddressList       IpAddrString
0000000000000000000000000000000000000000;;		GatewayList         IpAddrString
0000000000000000000000000000000000000000;;		DhcpServer          IpAddrString
0000000000000000000000000000000000000000;;		HaveWins            bool
0000000000000000000000000000000000000000;;		PrimaryWinsServer   IpAddrString
0000000000000000000000000000000000000000;;		SecondaryWinsServer IpAddrString
0000000000000000000000000000000000000000;;		LeaseObtained       int64
0000000000000000000000000000000000000000;;		LeaseExpires        int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const MAXLEN_PHYSADDR = 8
0000000000000000000000000000000000000000;;	const MAX_INTERFACE_NAME_LEN = 256
0000000000000000000000000000000000000000;;	const MAXLEN_IFDESCR = 256
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MibIfRow struct {
0000000000000000000000000000000000000000;;		Name            [MAX_INTERFACE_NAME_LEN]uint16
0000000000000000000000000000000000000000;;		Index           uint32
0000000000000000000000000000000000000000;;		Type            uint32
0000000000000000000000000000000000000000;;		Mtu             uint32
0000000000000000000000000000000000000000;;		Speed           uint32
0000000000000000000000000000000000000000;;		PhysAddrLen     uint32
0000000000000000000000000000000000000000;;		PhysAddr        [MAXLEN_PHYSADDR]byte
0000000000000000000000000000000000000000;;		AdminStatus     uint32
0000000000000000000000000000000000000000;;		OperStatus      uint32
0000000000000000000000000000000000000000;;		LastChange      uint32
0000000000000000000000000000000000000000;;		InOctets        uint32
0000000000000000000000000000000000000000;;		InUcastPkts     uint32
0000000000000000000000000000000000000000;;		InNUcastPkts    uint32
0000000000000000000000000000000000000000;;		InDiscards      uint32
0000000000000000000000000000000000000000;;		InErrors        uint32
0000000000000000000000000000000000000000;;		InUnknownProtos uint32
0000000000000000000000000000000000000000;;		OutOctets       uint32
0000000000000000000000000000000000000000;;		OutUcastPkts    uint32
0000000000000000000000000000000000000000;;		OutNUcastPkts   uint32
0000000000000000000000000000000000000000;;		OutDiscards     uint32
0000000000000000000000000000000000000000;;		OutErrors       uint32
0000000000000000000000000000000000000000;;		OutQLen         uint32
0000000000000000000000000000000000000000;;		DescrLen        uint32
0000000000000000000000000000000000000000;;		Descr           [MAXLEN_IFDESCR]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertContext struct {
0000000000000000000000000000000000000000;;		EncodingType uint32
0000000000000000000000000000000000000000;;		EncodedCert  *byte
0000000000000000000000000000000000000000;;		Length       uint32
0000000000000000000000000000000000000000;;		CertInfo     uintptr
0000000000000000000000000000000000000000;;		Store        Handle
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertChainContext struct {
0000000000000000000000000000000000000000;;		Size                       uint32
0000000000000000000000000000000000000000;;		TrustStatus                CertTrustStatus
0000000000000000000000000000000000000000;;		ChainCount                 uint32
0000000000000000000000000000000000000000;;		Chains                     **CertSimpleChain
0000000000000000000000000000000000000000;;		LowerQualityChainCount     uint32
0000000000000000000000000000000000000000;;		LowerQualityChains         **CertChainContext
0000000000000000000000000000000000000000;;		HasRevocationFreshnessTime uint32
0000000000000000000000000000000000000000;;		RevocationFreshnessTime    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertSimpleChain struct {
0000000000000000000000000000000000000000;;		Size                       uint32
0000000000000000000000000000000000000000;;		TrustStatus                CertTrustStatus
0000000000000000000000000000000000000000;;		NumElements                uint32
0000000000000000000000000000000000000000;;		Elements                   **CertChainElement
0000000000000000000000000000000000000000;;		TrustListInfo              uintptr
0000000000000000000000000000000000000000;;		HasRevocationFreshnessTime uint32
0000000000000000000000000000000000000000;;		RevocationFreshnessTime    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertChainElement struct {
0000000000000000000000000000000000000000;;		Size              uint32
0000000000000000000000000000000000000000;;		CertContext       *CertContext
0000000000000000000000000000000000000000;;		TrustStatus       CertTrustStatus
0000000000000000000000000000000000000000;;		RevocationInfo    *CertRevocationInfo
0000000000000000000000000000000000000000;;		IssuanceUsage     *CertEnhKeyUsage
0000000000000000000000000000000000000000;;		ApplicationUsage  *CertEnhKeyUsage
0000000000000000000000000000000000000000;;		ExtendedErrorInfo *uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertRevocationInfo struct {
0000000000000000000000000000000000000000;;		Size             uint32
0000000000000000000000000000000000000000;;		RevocationResult uint32
0000000000000000000000000000000000000000;;		RevocationOid    *byte
0000000000000000000000000000000000000000;;		OidSpecificInfo  uintptr
0000000000000000000000000000000000000000;;		HasFreshnessTime uint32
0000000000000000000000000000000000000000;;		FreshnessTime    uint32
0000000000000000000000000000000000000000;;		CrlInfo          uintptr // *CertRevocationCrlInfo
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertTrustStatus struct {
0000000000000000000000000000000000000000;;		ErrorStatus uint32
0000000000000000000000000000000000000000;;		InfoStatus  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertUsageMatch struct {
0000000000000000000000000000000000000000;;		Type  uint32
0000000000000000000000000000000000000000;;		Usage CertEnhKeyUsage
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertEnhKeyUsage struct {
0000000000000000000000000000000000000000;;		Length           uint32
0000000000000000000000000000000000000000;;		UsageIdentifiers **byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertChainPara struct {
0000000000000000000000000000000000000000;;		Size                         uint32
0000000000000000000000000000000000000000;;		RequestedUsage               CertUsageMatch
0000000000000000000000000000000000000000;;		RequstedIssuancePolicy       CertUsageMatch
0000000000000000000000000000000000000000;;		URLRetrievalTimeout          uint32
0000000000000000000000000000000000000000;;		CheckRevocationFreshnessTime uint32
0000000000000000000000000000000000000000;;		RevocationFreshnessTime      uint32
0000000000000000000000000000000000000000;;		CacheResync                  *Filetime
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertChainPolicyPara struct {
0000000000000000000000000000000000000000;;		Size            uint32
0000000000000000000000000000000000000000;;		Flags           uint32
0000000000000000000000000000000000000000;;		ExtraPolicyPara uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SSLExtraCertChainPolicyPara struct {
0000000000000000000000000000000000000000;;		Size       uint32
0000000000000000000000000000000000000000;;		AuthType   uint32
0000000000000000000000000000000000000000;;		Checks     uint32
0000000000000000000000000000000000000000;;		ServerName *uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertChainPolicyStatus struct {
0000000000000000000000000000000000000000;;		Size              uint32
0000000000000000000000000000000000000000;;		Error             uint32
0000000000000000000000000000000000000000;;		ChainIndex        uint32
0000000000000000000000000000000000000000;;		ElementIndex      uint32
0000000000000000000000000000000000000000;;		ExtraPolicyStatus uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// do not reorder
0000000000000000000000000000000000000000;;		HKEY_CLASSES_ROOT = 0x80000000 + iota
0000000000000000000000000000000000000000;;		HKEY_CURRENT_USER
0000000000000000000000000000000000000000;;		HKEY_LOCAL_MACHINE
0000000000000000000000000000000000000000;;		HKEY_USERS
0000000000000000000000000000000000000000;;		HKEY_PERFORMANCE_DATA
0000000000000000000000000000000000000000;;		HKEY_CURRENT_CONFIG
0000000000000000000000000000000000000000;;		HKEY_DYN_DATA
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KEY_QUERY_VALUE        = 1
0000000000000000000000000000000000000000;;		KEY_SET_VALUE          = 2
0000000000000000000000000000000000000000;;		KEY_CREATE_SUB_KEY     = 4
0000000000000000000000000000000000000000;;		KEY_ENUMERATE_SUB_KEYS = 8
0000000000000000000000000000000000000000;;		KEY_NOTIFY             = 16
0000000000000000000000000000000000000000;;		KEY_CREATE_LINK        = 32
0000000000000000000000000000000000000000;;		KEY_WRITE              = 0x20006
0000000000000000000000000000000000000000;;		KEY_EXECUTE            = 0x20019
0000000000000000000000000000000000000000;;		KEY_READ               = 0x20019
0000000000000000000000000000000000000000;;		KEY_WOW64_64KEY        = 0x0100
0000000000000000000000000000000000000000;;		KEY_WOW64_32KEY        = 0x0200
0000000000000000000000000000000000000000;;		KEY_ALL_ACCESS         = 0xf003f
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// do not reorder
0000000000000000000000000000000000000000;;		REG_NONE = iota
0000000000000000000000000000000000000000;;		REG_SZ
0000000000000000000000000000000000000000;;		REG_EXPAND_SZ
0000000000000000000000000000000000000000;;		REG_BINARY
0000000000000000000000000000000000000000;;		REG_DWORD_LITTLE_ENDIAN
0000000000000000000000000000000000000000;;		REG_DWORD_BIG_ENDIAN
0000000000000000000000000000000000000000;;		REG_LINK
0000000000000000000000000000000000000000;;		REG_MULTI_SZ
0000000000000000000000000000000000000000;;		REG_RESOURCE_LIST
0000000000000000000000000000000000000000;;		REG_FULL_RESOURCE_DESCRIPTOR
0000000000000000000000000000000000000000;;		REG_RESOURCE_REQUIREMENTS_LIST
0000000000000000000000000000000000000000;;		REG_QWORD_LITTLE_ENDIAN
0000000000000000000000000000000000000000;;		REG_DWORD = REG_DWORD_LITTLE_ENDIAN
0000000000000000000000000000000000000000;;		REG_QWORD = REG_QWORD_LITTLE_ENDIAN
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddrinfoW struct {
0000000000000000000000000000000000000000;;		Flags     int32
0000000000000000000000000000000000000000;;		Family    int32
0000000000000000000000000000000000000000;;		Socktype  int32
0000000000000000000000000000000000000000;;		Protocol  int32
0000000000000000000000000000000000000000;;		Addrlen   uintptr
0000000000000000000000000000000000000000;;		Canonname *uint16
0000000000000000000000000000000000000000;;		Addr      uintptr
0000000000000000000000000000000000000000;;		Next      *AddrinfoW
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AI_PASSIVE     = 1
0000000000000000000000000000000000000000;;		AI_CANONNAME   = 2
0000000000000000000000000000000000000000;;		AI_NUMERICHOST = 4
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GUID struct {
0000000000000000000000000000000000000000;;		Data1 uint32
0000000000000000000000000000000000000000;;		Data2 uint16
0000000000000000000000000000000000000000;;		Data3 uint16
0000000000000000000000000000000000000000;;		Data4 [8]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var WSAID_CONNECTEX = GUID{
0000000000000000000000000000000000000000;;		0x25a207b9,
0000000000000000000000000000000000000000;;		0xddf3,
0000000000000000000000000000000000000000;;		0x4660,
0000000000000000000000000000000000000000;;		[8]byte{0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e},
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1
0000000000000000000000000000000000000000;;		FILE_SKIP_SET_EVENT_ON_HANDLE        = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		WSAPROTOCOL_LEN    = 255
0000000000000000000000000000000000000000;;		MAX_PROTOCOL_CHAIN = 7
0000000000000000000000000000000000000000;;		BASE_PROTOCOL      = 1
0000000000000000000000000000000000000000;;		LAYERED_PROTOCOL   = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		XP1_CONNECTIONLESS           = 0x00000001
0000000000000000000000000000000000000000;;		XP1_GUARANTEED_DELIVERY      = 0x00000002
0000000000000000000000000000000000000000;;		XP1_GUARANTEED_ORDER         = 0x00000004
0000000000000000000000000000000000000000;;		XP1_MESSAGE_ORIENTED         = 0x00000008
0000000000000000000000000000000000000000;;		XP1_PSEUDO_STREAM            = 0x00000010
0000000000000000000000000000000000000000;;		XP1_GRACEFUL_CLOSE           = 0x00000020
0000000000000000000000000000000000000000;;		XP1_EXPEDITED_DATA           = 0x00000040
0000000000000000000000000000000000000000;;		XP1_CONNECT_DATA             = 0x00000080
0000000000000000000000000000000000000000;;		XP1_DISCONNECT_DATA          = 0x00000100
0000000000000000000000000000000000000000;;		XP1_SUPPORT_BROADCAST        = 0x00000200
0000000000000000000000000000000000000000;;		XP1_SUPPORT_MULTIPOINT       = 0x00000400
0000000000000000000000000000000000000000;;		XP1_MULTIPOINT_CONTROL_PLANE = 0x00000800
0000000000000000000000000000000000000000;;		XP1_MULTIPOINT_DATA_PLANE    = 0x00001000
0000000000000000000000000000000000000000;;		XP1_QOS_SUPPORTED            = 0x00002000
0000000000000000000000000000000000000000;;		XP1_UNI_SEND                 = 0x00008000
0000000000000000000000000000000000000000;;		XP1_UNI_RECV                 = 0x00010000
0000000000000000000000000000000000000000;;		XP1_IFS_HANDLES              = 0x00020000
0000000000000000000000000000000000000000;;		XP1_PARTIAL_MESSAGE          = 0x00040000
0000000000000000000000000000000000000000;;		XP1_SAN_SUPPORT_SDP          = 0x00080000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PFL_MULTIPLE_PROTO_ENTRIES  = 0x00000001
0000000000000000000000000000000000000000;;		PFL_RECOMMENDED_PROTO_ENTRY = 0x00000002
0000000000000000000000000000000000000000;;		PFL_HIDDEN                  = 0x00000004
0000000000000000000000000000000000000000;;		PFL_MATCHES_PROTOCOL_ZERO   = 0x00000008
0000000000000000000000000000000000000000;;		PFL_NETWORKDIRECT_PROVIDER  = 0x00000010
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WSAProtocolInfo struct {
0000000000000000000000000000000000000000;;		ServiceFlags1     uint32
0000000000000000000000000000000000000000;;		ServiceFlags2     uint32
0000000000000000000000000000000000000000;;		ServiceFlags3     uint32
0000000000000000000000000000000000000000;;		ServiceFlags4     uint32
0000000000000000000000000000000000000000;;		ProviderFlags     uint32
0000000000000000000000000000000000000000;;		ProviderId        GUID
0000000000000000000000000000000000000000;;		CatalogEntryId    uint32
0000000000000000000000000000000000000000;;		ProtocolChain     WSAProtocolChain
0000000000000000000000000000000000000000;;		Version           int32
0000000000000000000000000000000000000000;;		AddressFamily     int32
0000000000000000000000000000000000000000;;		MaxSockAddr       int32
0000000000000000000000000000000000000000;;		MinSockAddr       int32
0000000000000000000000000000000000000000;;		SocketType        int32
0000000000000000000000000000000000000000;;		Protocol          int32
0000000000000000000000000000000000000000;;		ProtocolMaxOffset int32
0000000000000000000000000000000000000000;;		NetworkByteOrder  int32
0000000000000000000000000000000000000000;;		SecurityScheme    int32
0000000000000000000000000000000000000000;;		MessageSize       uint32
0000000000000000000000000000000000000000;;		ProviderReserved  uint32
0000000000000000000000000000000000000000;;		ProtocolName      [WSAPROTOCOL_LEN + 1]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type WSAProtocolChain struct {
0000000000000000000000000000000000000000;;		ChainLen     int32
0000000000000000000000000000000000000000;;		ChainEntries [MAX_PROTOCOL_CHAIN]uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TCPKeepalive struct {
0000000000000000000000000000000000000000;;		OnOff    uint32
0000000000000000000000000000000000000000;;		Time     uint32
0000000000000000000000000000000000000000;;		Interval uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type symbolicLinkReparseBuffer struct {
0000000000000000000000000000000000000000;;		SubstituteNameOffset uint16
0000000000000000000000000000000000000000;;		SubstituteNameLength uint16
0000000000000000000000000000000000000000;;		PrintNameOffset      uint16
0000000000000000000000000000000000000000;;		PrintNameLength      uint16
0000000000000000000000000000000000000000;;		Flags                uint32
0000000000000000000000000000000000000000;;		PathBuffer           [1]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type mountPointReparseBuffer struct {
0000000000000000000000000000000000000000;;		SubstituteNameOffset uint16
0000000000000000000000000000000000000000;;		SubstituteNameLength uint16
0000000000000000000000000000000000000000;;		PrintNameOffset      uint16
0000000000000000000000000000000000000000;;		PrintNameLength      uint16
0000000000000000000000000000000000000000;;		PathBuffer           [1]uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type reparseDataBuffer struct {
0000000000000000000000000000000000000000;;		ReparseTag        uint32
0000000000000000000000000000000000000000;;		ReparseDataLength uint16
0000000000000000000000000000000000000000;;		Reserved          uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// GenericReparseBuffer
0000000000000000000000000000000000000000;;		reparseBuffer byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FSCTL_GET_REPARSE_POINT          = 0x900A8
0000000000000000000000000000000000000000;;		MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024
0000000000000000000000000000000000000000;;		IO_REPARSE_TAG_MOUNT_POINT       = 0xA0000003
0000000000000000000000000000000000000000;;		IO_REPARSE_TAG_SYMLINK           = 0xA000000C
0000000000000000000000000000000000000000;;		SYMBOLIC_LINK_FLAG_DIRECTORY     = 0x1
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ComputerNameNetBIOS                   = 0
0000000000000000000000000000000000000000;;		ComputerNameDnsHostname               = 1
0000000000000000000000000000000000000000;;		ComputerNameDnsDomain                 = 2
0000000000000000000000000000000000000000;;		ComputerNameDnsFullyQualified         = 3
0000000000000000000000000000000000000000;;		ComputerNamePhysicalNetBIOS           = 4
0000000000000000000000000000000000000000;;		ComputerNamePhysicalDnsHostname       = 5
0000000000000000000000000000000000000000;;		ComputerNamePhysicalDnsDomain         = 6
0000000000000000000000000000000000000000;;		ComputerNamePhysicalDnsFullyQualified = 7
0000000000000000000000000000000000000000;;		ComputerNameMax                       = 8
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		MOVEFILE_REPLACE_EXISTING      = 0x1
0000000000000000000000000000000000000000;;		MOVEFILE_COPY_ALLOWED          = 0x2
0000000000000000000000000000000000000000;;		MOVEFILE_DELAY_UNTIL_REBOOT    = 0x4
0000000000000000000000000000000000000000;;		MOVEFILE_WRITE_THROUGH         = 0x8
0000000000000000000000000000000000000000;;		MOVEFILE_CREATE_HARDLINK       = 0x10
0000000000000000000000000000000000000000;;		MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const GAA_FLAG_INCLUDE_PREFIX = 0x00000010
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IF_TYPE_OTHER              = 1
0000000000000000000000000000000000000000;;		IF_TYPE_ETHERNET_CSMACD    = 6
0000000000000000000000000000000000000000;;		IF_TYPE_ISO88025_TOKENRING = 9
0000000000000000000000000000000000000000;;		IF_TYPE_PPP                = 23
0000000000000000000000000000000000000000;;		IF_TYPE_SOFTWARE_LOOPBACK  = 24
0000000000000000000000000000000000000000;;		IF_TYPE_ATM                = 37
0000000000000000000000000000000000000000;;		IF_TYPE_IEEE80211          = 71
0000000000000000000000000000000000000000;;		IF_TYPE_TUNNEL             = 131
0000000000000000000000000000000000000000;;		IF_TYPE_IEEE1394           = 144
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SocketAddress struct {
0000000000000000000000000000000000000000;;		Sockaddr       *syscall.RawSockaddrAny
0000000000000000000000000000000000000000;;		SockaddrLength int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterUnicastAddress struct {
0000000000000000000000000000000000000000;;		Length             uint32
0000000000000000000000000000000000000000;;		Flags              uint32
0000000000000000000000000000000000000000;;		Next               *IpAdapterUnicastAddress
0000000000000000000000000000000000000000;;		Address            SocketAddress
0000000000000000000000000000000000000000;;		PrefixOrigin       int32
0000000000000000000000000000000000000000;;		SuffixOrigin       int32
0000000000000000000000000000000000000000;;		DadState           int32
0000000000000000000000000000000000000000;;		ValidLifetime      uint32
0000000000000000000000000000000000000000;;		PreferredLifetime  uint32
0000000000000000000000000000000000000000;;		LeaseLifetime      uint32
0000000000000000000000000000000000000000;;		OnLinkPrefixLength uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterAnycastAddress struct {
0000000000000000000000000000000000000000;;		Length  uint32
0000000000000000000000000000000000000000;;		Flags   uint32
0000000000000000000000000000000000000000;;		Next    *IpAdapterAnycastAddress
0000000000000000000000000000000000000000;;		Address SocketAddress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterMulticastAddress struct {
0000000000000000000000000000000000000000;;		Length  uint32
0000000000000000000000000000000000000000;;		Flags   uint32
0000000000000000000000000000000000000000;;		Next    *IpAdapterMulticastAddress
0000000000000000000000000000000000000000;;		Address SocketAddress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterDnsServerAdapter struct {
0000000000000000000000000000000000000000;;		Length   uint32
0000000000000000000000000000000000000000;;		Reserved uint32
0000000000000000000000000000000000000000;;		Next     *IpAdapterDnsServerAdapter
0000000000000000000000000000000000000000;;		Address  SocketAddress
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterPrefix struct {
0000000000000000000000000000000000000000;;		Length       uint32
0000000000000000000000000000000000000000;;		Flags        uint32
0000000000000000000000000000000000000000;;		Next         *IpAdapterPrefix
0000000000000000000000000000000000000000;;		Address      SocketAddress
0000000000000000000000000000000000000000;;		PrefixLength uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAdapterAddresses struct {
0000000000000000000000000000000000000000;;		Length                uint32
0000000000000000000000000000000000000000;;		IfIndex               uint32
0000000000000000000000000000000000000000;;		Next                  *IpAdapterAddresses
0000000000000000000000000000000000000000;;		AdapterName           *byte
0000000000000000000000000000000000000000;;		FirstUnicastAddress   *IpAdapterUnicastAddress
0000000000000000000000000000000000000000;;		FirstAnycastAddress   *IpAdapterAnycastAddress
0000000000000000000000000000000000000000;;		FirstMulticastAddress *IpAdapterMulticastAddress
0000000000000000000000000000000000000000;;		FirstDnsServerAddress *IpAdapterDnsServerAdapter
0000000000000000000000000000000000000000;;		DnsSuffix             *uint16
0000000000000000000000000000000000000000;;		Description           *uint16
0000000000000000000000000000000000000000;;		FriendlyName          *uint16
0000000000000000000000000000000000000000;;		PhysicalAddress       [syscall.MAX_ADAPTER_ADDRESS_LENGTH]byte
0000000000000000000000000000000000000000;;		PhysicalAddressLength uint32
0000000000000000000000000000000000000000;;		Flags                 uint32
0000000000000000000000000000000000000000;;		Mtu                   uint32
0000000000000000000000000000000000000000;;		IfType                uint32
0000000000000000000000000000000000000000;;		OperStatus            uint32
0000000000000000000000000000000000000000;;		Ipv6IfIndex           uint32
0000000000000000000000000000000000000000;;		ZoneIndices           [16]uint32
0000000000000000000000000000000000000000;;		FirstPrefix           *IpAdapterPrefix
0000000000000000000000000000000000000000;;		/* more fields might be present here. */
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IfOperStatusUp             = 1
0000000000000000000000000000000000000000;;		IfOperStatusDown           = 2
0000000000000000000000000000000000000000;;		IfOperStatusTesting        = 3
0000000000000000000000000000000000000000;;		IfOperStatusUnknown        = 4
0000000000000000000000000000000000000000;;		IfOperStatusDormant        = 5
0000000000000000000000000000000000000000;;		IfOperStatusNotPresent     = 6
0000000000000000000000000000000000000000;;		IfOperStatusLowerLayerDown = 7
0000000000000000000000000000000000000000;;	)
