0000000000000000000000000000000000000000;;	// mksyscall_solaris.pl syscall_solaris.go syscall_solaris_amd64.go
0000000000000000000000000000000000000000;;	// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/zsyscall_solaris_amd64.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/zsyscall_solaris_amd64.go][vendor/golang.org/x/sys/unix/zsyscall_solaris_amd64.go];	
0000000000000000000000000000000000000000;;	// +build amd64,solaris
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_pipe pipe "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getsockname getsockname "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getcwd getcwd "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getgroups getgroups "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setgroups setgroups "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_wait4 wait4 "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_gethostname gethostname "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_utimes utimes "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_utimensat utimensat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fcntl fcntl "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_futimesat futimesat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_accept accept "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_recvmsg recvmsg "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_sendmsg sendmsg "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_acct acct "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_ioctl ioctl "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_access access "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_adjtime adjtime "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_chdir chdir "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_chmod chmod "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_chown chown "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_chroot chroot "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_close close "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_creat creat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_dup dup "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_dup2 dup2 "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_exit exit "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fchdir fchdir "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fchmod fchmod "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fchmodat fchmodat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fchown fchown "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fchownat fchownat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fdatasync fdatasync "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fpathconf fpathconf "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fstat fstat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getdents getdents "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getgid getgid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getpid getpid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getpgid getpgid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getpgrp getpgrp "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_geteuid geteuid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getegid getegid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getppid getppid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getpriority getpriority "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getrlimit getrlimit "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getrusage getrusage "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_gettimeofday gettimeofday "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getuid getuid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_kill kill "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_lchown lchown "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_link link "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_listen listen "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_lstat lstat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_madvise madvise "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mkdir mkdir "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mkdirat mkdirat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mkfifo mkfifo "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mkfifoat mkfifoat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mknod mknod "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mknodat mknodat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mlock mlock "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mlockall mlockall "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mprotect mprotect "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_munlock munlock "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_munlockall munlockall "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_nanosleep nanosleep "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_open open "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_openat openat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_pathconf pathconf "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_pause pause "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_pread pread "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_pwrite pwrite "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_read read "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_readlink readlink "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_rename rename "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_renameat renameat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_rmdir rmdir "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_lseek lseek "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setegid setegid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_seteuid seteuid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setgid setgid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_sethostname sethostname "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setpgid setpgid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setpriority setpriority "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setregid setregid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setreuid setreuid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setrlimit setrlimit "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setsid setsid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setuid setuid "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_shutdown shutdown "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_stat stat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_symlink symlink "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_sync sync "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_times times "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_truncate truncate "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_fsync fsync "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_ftruncate ftruncate "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_umask umask "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_uname uname "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_umount umount "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_unlink unlink "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_unlinkat unlinkat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_ustat ustat "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_utime utime "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_bind bind "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_connect connect "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_mmap mmap "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_munmap munmap "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_sendto sendto "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_socket socket "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_socketpair socketpair "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_write write "libc.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getsockopt getsockopt "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_getpeername getpeername "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_setsockopt setsockopt "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_recvfrom recvfrom "libsocket.so"
0000000000000000000000000000000000000000;;	//go:cgo_import_dynamic libc_sysconf sysconf "libc.so"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:linkname procpipe libc_pipe
0000000000000000000000000000000000000000;;	//go:linkname procgetsockname libc_getsockname
0000000000000000000000000000000000000000;;	//go:linkname procGetcwd libc_getcwd
0000000000000000000000000000000000000000;;	//go:linkname procgetgroups libc_getgroups
0000000000000000000000000000000000000000;;	//go:linkname procsetgroups libc_setgroups
0000000000000000000000000000000000000000;;	//go:linkname procwait4 libc_wait4
0000000000000000000000000000000000000000;;	//go:linkname procgethostname libc_gethostname
0000000000000000000000000000000000000000;;	//go:linkname procutimes libc_utimes
0000000000000000000000000000000000000000;;	//go:linkname procutimensat libc_utimensat
0000000000000000000000000000000000000000;;	//go:linkname procfcntl libc_fcntl
0000000000000000000000000000000000000000;;	//go:linkname procfutimesat libc_futimesat
0000000000000000000000000000000000000000;;	//go:linkname procaccept libc_accept
0000000000000000000000000000000000000000;;	//go:linkname procrecvmsg libc_recvmsg
0000000000000000000000000000000000000000;;	//go:linkname procsendmsg libc_sendmsg
0000000000000000000000000000000000000000;;	//go:linkname procacct libc_acct
0000000000000000000000000000000000000000;;	//go:linkname procioctl libc_ioctl
0000000000000000000000000000000000000000;;	//go:linkname procAccess libc_access
0000000000000000000000000000000000000000;;	//go:linkname procAdjtime libc_adjtime
0000000000000000000000000000000000000000;;	//go:linkname procChdir libc_chdir
0000000000000000000000000000000000000000;;	//go:linkname procChmod libc_chmod
0000000000000000000000000000000000000000;;	//go:linkname procChown libc_chown
0000000000000000000000000000000000000000;;	//go:linkname procChroot libc_chroot
0000000000000000000000000000000000000000;;	//go:linkname procClose libc_close
0000000000000000000000000000000000000000;;	//go:linkname procCreat libc_creat
0000000000000000000000000000000000000000;;	//go:linkname procDup libc_dup
0000000000000000000000000000000000000000;;	//go:linkname procDup2 libc_dup2
0000000000000000000000000000000000000000;;	//go:linkname procExit libc_exit
0000000000000000000000000000000000000000;;	//go:linkname procFchdir libc_fchdir
0000000000000000000000000000000000000000;;	//go:linkname procFchmod libc_fchmod
0000000000000000000000000000000000000000;;	//go:linkname procFchmodat libc_fchmodat
0000000000000000000000000000000000000000;;	//go:linkname procFchown libc_fchown
0000000000000000000000000000000000000000;;	//go:linkname procFchownat libc_fchownat
0000000000000000000000000000000000000000;;	//go:linkname procFdatasync libc_fdatasync
0000000000000000000000000000000000000000;;	//go:linkname procFpathconf libc_fpathconf
0000000000000000000000000000000000000000;;	//go:linkname procFstat libc_fstat
0000000000000000000000000000000000000000;;	//go:linkname procGetdents libc_getdents
0000000000000000000000000000000000000000;;	//go:linkname procGetgid libc_getgid
0000000000000000000000000000000000000000;;	//go:linkname procGetpid libc_getpid
0000000000000000000000000000000000000000;;	//go:linkname procGetpgid libc_getpgid
0000000000000000000000000000000000000000;;	//go:linkname procGetpgrp libc_getpgrp
0000000000000000000000000000000000000000;;	//go:linkname procGeteuid libc_geteuid
0000000000000000000000000000000000000000;;	//go:linkname procGetegid libc_getegid
0000000000000000000000000000000000000000;;	//go:linkname procGetppid libc_getppid
0000000000000000000000000000000000000000;;	//go:linkname procGetpriority libc_getpriority
0000000000000000000000000000000000000000;;	//go:linkname procGetrlimit libc_getrlimit
0000000000000000000000000000000000000000;;	//go:linkname procGetrusage libc_getrusage
0000000000000000000000000000000000000000;;	//go:linkname procGettimeofday libc_gettimeofday
0000000000000000000000000000000000000000;;	//go:linkname procGetuid libc_getuid
0000000000000000000000000000000000000000;;	//go:linkname procKill libc_kill
0000000000000000000000000000000000000000;;	//go:linkname procLchown libc_lchown
0000000000000000000000000000000000000000;;	//go:linkname procLink libc_link
0000000000000000000000000000000000000000;;	//go:linkname proclisten libc_listen
0000000000000000000000000000000000000000;;	//go:linkname procLstat libc_lstat
0000000000000000000000000000000000000000;;	//go:linkname procMadvise libc_madvise
0000000000000000000000000000000000000000;;	//go:linkname procMkdir libc_mkdir
0000000000000000000000000000000000000000;;	//go:linkname procMkdirat libc_mkdirat
0000000000000000000000000000000000000000;;	//go:linkname procMkfifo libc_mkfifo
0000000000000000000000000000000000000000;;	//go:linkname procMkfifoat libc_mkfifoat
0000000000000000000000000000000000000000;;	//go:linkname procMknod libc_mknod
0000000000000000000000000000000000000000;;	//go:linkname procMknodat libc_mknodat
0000000000000000000000000000000000000000;;	//go:linkname procMlock libc_mlock
0000000000000000000000000000000000000000;;	//go:linkname procMlockall libc_mlockall
0000000000000000000000000000000000000000;;	//go:linkname procMprotect libc_mprotect
0000000000000000000000000000000000000000;;	//go:linkname procMunlock libc_munlock
0000000000000000000000000000000000000000;;	//go:linkname procMunlockall libc_munlockall
0000000000000000000000000000000000000000;;	//go:linkname procNanosleep libc_nanosleep
0000000000000000000000000000000000000000;;	//go:linkname procOpen libc_open
0000000000000000000000000000000000000000;;	//go:linkname procOpenat libc_openat
0000000000000000000000000000000000000000;;	//go:linkname procPathconf libc_pathconf
0000000000000000000000000000000000000000;;	//go:linkname procPause libc_pause
0000000000000000000000000000000000000000;;	//go:linkname procPread libc_pread
0000000000000000000000000000000000000000;;	//go:linkname procPwrite libc_pwrite
0000000000000000000000000000000000000000;;	//go:linkname procread libc_read
0000000000000000000000000000000000000000;;	//go:linkname procReadlink libc_readlink
0000000000000000000000000000000000000000;;	//go:linkname procRename libc_rename
0000000000000000000000000000000000000000;;	//go:linkname procRenameat libc_renameat
0000000000000000000000000000000000000000;;	//go:linkname procRmdir libc_rmdir
0000000000000000000000000000000000000000;;	//go:linkname proclseek libc_lseek
0000000000000000000000000000000000000000;;	//go:linkname procSetegid libc_setegid
0000000000000000000000000000000000000000;;	//go:linkname procSeteuid libc_seteuid
0000000000000000000000000000000000000000;;	//go:linkname procSetgid libc_setgid
0000000000000000000000000000000000000000;;	//go:linkname procSethostname libc_sethostname
0000000000000000000000000000000000000000;;	//go:linkname procSetpgid libc_setpgid
0000000000000000000000000000000000000000;;	//go:linkname procSetpriority libc_setpriority
0000000000000000000000000000000000000000;;	//go:linkname procSetregid libc_setregid
0000000000000000000000000000000000000000;;	//go:linkname procSetreuid libc_setreuid
0000000000000000000000000000000000000000;;	//go:linkname procSetrlimit libc_setrlimit
0000000000000000000000000000000000000000;;	//go:linkname procSetsid libc_setsid
0000000000000000000000000000000000000000;;	//go:linkname procSetuid libc_setuid
0000000000000000000000000000000000000000;;	//go:linkname procshutdown libc_shutdown
0000000000000000000000000000000000000000;;	//go:linkname procStat libc_stat
0000000000000000000000000000000000000000;;	//go:linkname procSymlink libc_symlink
0000000000000000000000000000000000000000;;	//go:linkname procSync libc_sync
0000000000000000000000000000000000000000;;	//go:linkname procTimes libc_times
0000000000000000000000000000000000000000;;	//go:linkname procTruncate libc_truncate
0000000000000000000000000000000000000000;;	//go:linkname procFsync libc_fsync
0000000000000000000000000000000000000000;;	//go:linkname procFtruncate libc_ftruncate
0000000000000000000000000000000000000000;;	//go:linkname procUmask libc_umask
0000000000000000000000000000000000000000;;	//go:linkname procUname libc_uname
0000000000000000000000000000000000000000;;	//go:linkname procumount libc_umount
0000000000000000000000000000000000000000;;	//go:linkname procUnlink libc_unlink
0000000000000000000000000000000000000000;;	//go:linkname procUnlinkat libc_unlinkat
0000000000000000000000000000000000000000;;	//go:linkname procUstat libc_ustat
0000000000000000000000000000000000000000;;	//go:linkname procUtime libc_utime
0000000000000000000000000000000000000000;;	//go:linkname procbind libc_bind
0000000000000000000000000000000000000000;;	//go:linkname procconnect libc_connect
0000000000000000000000000000000000000000;;	//go:linkname procmmap libc_mmap
0000000000000000000000000000000000000000;;	//go:linkname procmunmap libc_munmap
0000000000000000000000000000000000000000;;	//go:linkname procsendto libc_sendto
0000000000000000000000000000000000000000;;	//go:linkname procsocket libc_socket
0000000000000000000000000000000000000000;;	//go:linkname procsocketpair libc_socketpair
0000000000000000000000000000000000000000;;	//go:linkname procwrite libc_write
0000000000000000000000000000000000000000;;	//go:linkname procgetsockopt libc_getsockopt
0000000000000000000000000000000000000000;;	//go:linkname procgetpeername libc_getpeername
0000000000000000000000000000000000000000;;	//go:linkname procsetsockopt libc_setsockopt
0000000000000000000000000000000000000000;;	//go:linkname procrecvfrom libc_recvfrom
0000000000000000000000000000000000000000;;	//go:linkname procsysconf libc_sysconf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		procpipe,
0000000000000000000000000000000000000000;;		procgetsockname,
0000000000000000000000000000000000000000;;		procGetcwd,
0000000000000000000000000000000000000000;;		procgetgroups,
0000000000000000000000000000000000000000;;		procsetgroups,
0000000000000000000000000000000000000000;;		procwait4,
0000000000000000000000000000000000000000;;		procgethostname,
0000000000000000000000000000000000000000;;		procutimes,
0000000000000000000000000000000000000000;;		procutimensat,
0000000000000000000000000000000000000000;;		procfcntl,
0000000000000000000000000000000000000000;;		procfutimesat,
0000000000000000000000000000000000000000;;		procaccept,
0000000000000000000000000000000000000000;;		procrecvmsg,
0000000000000000000000000000000000000000;;		procsendmsg,
0000000000000000000000000000000000000000;;		procacct,
0000000000000000000000000000000000000000;;		procioctl,
0000000000000000000000000000000000000000;;		procAccess,
0000000000000000000000000000000000000000;;		procAdjtime,
0000000000000000000000000000000000000000;;		procChdir,
0000000000000000000000000000000000000000;;		procChmod,
0000000000000000000000000000000000000000;;		procChown,
0000000000000000000000000000000000000000;;		procChroot,
0000000000000000000000000000000000000000;;		procClose,
0000000000000000000000000000000000000000;;		procCreat,
0000000000000000000000000000000000000000;;		procDup,
0000000000000000000000000000000000000000;;		procDup2,
0000000000000000000000000000000000000000;;		procExit,
0000000000000000000000000000000000000000;;		procFchdir,
0000000000000000000000000000000000000000;;		procFchmod,
0000000000000000000000000000000000000000;;		procFchmodat,
0000000000000000000000000000000000000000;;		procFchown,
0000000000000000000000000000000000000000;;		procFchownat,
0000000000000000000000000000000000000000;;		procFdatasync,
0000000000000000000000000000000000000000;;		procFpathconf,
0000000000000000000000000000000000000000;;		procFstat,
0000000000000000000000000000000000000000;;		procGetdents,
0000000000000000000000000000000000000000;;		procGetgid,
0000000000000000000000000000000000000000;;		procGetpid,
0000000000000000000000000000000000000000;;		procGetpgid,
0000000000000000000000000000000000000000;;		procGetpgrp,
0000000000000000000000000000000000000000;;		procGeteuid,
0000000000000000000000000000000000000000;;		procGetegid,
0000000000000000000000000000000000000000;;		procGetppid,
0000000000000000000000000000000000000000;;		procGetpriority,
0000000000000000000000000000000000000000;;		procGetrlimit,
0000000000000000000000000000000000000000;;		procGetrusage,
0000000000000000000000000000000000000000;;		procGettimeofday,
0000000000000000000000000000000000000000;;		procGetuid,
0000000000000000000000000000000000000000;;		procKill,
0000000000000000000000000000000000000000;;		procLchown,
0000000000000000000000000000000000000000;;		procLink,
0000000000000000000000000000000000000000;;		proclisten,
0000000000000000000000000000000000000000;;		procLstat,
0000000000000000000000000000000000000000;;		procMadvise,
0000000000000000000000000000000000000000;;		procMkdir,
0000000000000000000000000000000000000000;;		procMkdirat,
0000000000000000000000000000000000000000;;		procMkfifo,
0000000000000000000000000000000000000000;;		procMkfifoat,
0000000000000000000000000000000000000000;;		procMknod,
0000000000000000000000000000000000000000;;		procMknodat,
0000000000000000000000000000000000000000;;		procMlock,
0000000000000000000000000000000000000000;;		procMlockall,
0000000000000000000000000000000000000000;;		procMprotect,
0000000000000000000000000000000000000000;;		procMunlock,
0000000000000000000000000000000000000000;;		procMunlockall,
0000000000000000000000000000000000000000;;		procNanosleep,
0000000000000000000000000000000000000000;;		procOpen,
0000000000000000000000000000000000000000;;		procOpenat,
0000000000000000000000000000000000000000;;		procPathconf,
0000000000000000000000000000000000000000;;		procPause,
0000000000000000000000000000000000000000;;		procPread,
0000000000000000000000000000000000000000;;		procPwrite,
0000000000000000000000000000000000000000;;		procread,
0000000000000000000000000000000000000000;;		procReadlink,
0000000000000000000000000000000000000000;;		procRename,
0000000000000000000000000000000000000000;;		procRenameat,
0000000000000000000000000000000000000000;;		procRmdir,
0000000000000000000000000000000000000000;;		proclseek,
0000000000000000000000000000000000000000;;		procSetegid,
0000000000000000000000000000000000000000;;		procSeteuid,
0000000000000000000000000000000000000000;;		procSetgid,
0000000000000000000000000000000000000000;;		procSethostname,
0000000000000000000000000000000000000000;;		procSetpgid,
0000000000000000000000000000000000000000;;		procSetpriority,
0000000000000000000000000000000000000000;;		procSetregid,
0000000000000000000000000000000000000000;;		procSetreuid,
0000000000000000000000000000000000000000;;		procSetrlimit,
0000000000000000000000000000000000000000;;		procSetsid,
0000000000000000000000000000000000000000;;		procSetuid,
0000000000000000000000000000000000000000;;		procshutdown,
0000000000000000000000000000000000000000;;		procStat,
0000000000000000000000000000000000000000;;		procSymlink,
0000000000000000000000000000000000000000;;		procSync,
0000000000000000000000000000000000000000;;		procTimes,
0000000000000000000000000000000000000000;;		procTruncate,
0000000000000000000000000000000000000000;;		procFsync,
0000000000000000000000000000000000000000;;		procFtruncate,
0000000000000000000000000000000000000000;;		procUmask,
0000000000000000000000000000000000000000;;		procUname,
0000000000000000000000000000000000000000;;		procumount,
0000000000000000000000000000000000000000;;		procUnlink,
0000000000000000000000000000000000000000;;		procUnlinkat,
0000000000000000000000000000000000000000;;		procUstat,
0000000000000000000000000000000000000000;;		procUtime,
0000000000000000000000000000000000000000;;		procbind,
0000000000000000000000000000000000000000;;		procconnect,
0000000000000000000000000000000000000000;;		procmmap,
0000000000000000000000000000000000000000;;		procmunmap,
0000000000000000000000000000000000000000;;		procsendto,
0000000000000000000000000000000000000000;;		procsocket,
0000000000000000000000000000000000000000;;		procsocketpair,
0000000000000000000000000000000000000000;;		procwrite,
0000000000000000000000000000000000000000;;		procgetsockopt,
0000000000000000000000000000000000000000;;		procgetpeername,
0000000000000000000000000000000000000000;;		procsetsockopt,
0000000000000000000000000000000000000000;;		procrecvfrom,
0000000000000000000000000000000000000000;;		procsysconf syscallFunc
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func pipe(p *[2]_C_int) (n int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procpipe)), 1, uintptr(unsafe.Pointer(p)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procgetsockname)), 3, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getcwd(buf []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procGetcwd)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getgroups(ngid int, gid *_Gid_t) (n int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procgetgroups)), 2, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setgroups(ngid int, gid *_Gid_t) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procsetgroups)), 2, uintptr(ngid), uintptr(unsafe.Pointer(gid)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wait4(pid int32, statusp *_C_int, options int, rusage *Rusage) (wpid int32, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procwait4)), 4, uintptr(pid), uintptr(unsafe.Pointer(statusp)), uintptr(options), uintptr(unsafe.Pointer(rusage)), 0, 0)
0000000000000000000000000000000000000000;;		wpid = int32(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func gethostname(buf []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procgethostname)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func utimes(path string, times *[2]Timeval) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procutimes)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func utimensat(fd int, path string, times *[2]Timespec, flag int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procutimensat)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(times)), uintptr(flag), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fcntl(fd int, cmd int, arg int) (val int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procfcntl)), 3, uintptr(fd), uintptr(cmd), uintptr(arg), 0, 0, 0)
0000000000000000000000000000000000000000;;		val = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func futimesat(fildes int, path *byte, times *[2]Timeval) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procfutimesat)), 3, uintptr(fildes), uintptr(unsafe.Pointer(path)), uintptr(unsafe.Pointer(times)), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procaccept)), 3, uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recvmsg(s int, msg *Msghdr, flags int) (n int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procrecvmsg)), 3, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sendmsg(s int, msg *Msghdr, flags int) (n int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procsendmsg)), 3, uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags), 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func acct(path *byte) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procacct)), 1, uintptr(unsafe.Pointer(path)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ioctl(fd int, req int, arg uintptr) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procioctl)), 3, uintptr(fd), uintptr(req), uintptr(arg), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Access(path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procAccess)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Adjtime(delta *Timeval, olddelta *Timeval) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procAdjtime)), 2, uintptr(unsafe.Pointer(delta)), uintptr(unsafe.Pointer(olddelta)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Chdir(path string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procChdir)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Chmod(path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procChmod)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Chown(path string, uid int, gid int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procChown)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Chroot(path string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procChroot)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Close(fd int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procClose)), 1, uintptr(fd), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Creat(path string, mode uint32) (fd int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procCreat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Dup(fd int) (nfd int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procDup)), 1, uintptr(fd), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		nfd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Dup2(oldfd int, newfd int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procDup2)), 2, uintptr(oldfd), uintptr(newfd), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Exit(code int) {
0000000000000000000000000000000000000000;;		sysvicall6(uintptr(unsafe.Pointer(&procExit)), 1, uintptr(code), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fchdir(fd int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFchdir)), 1, uintptr(fd), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fchmod(fd int, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFchmod)), 2, uintptr(fd), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fchmodat(dirfd int, path string, mode uint32, flags int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFchmodat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(flags), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fchown(fd int, uid int, gid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFchown)), 3, uintptr(fd), uintptr(uid), uintptr(gid), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fchownat(dirfd int, path string, uid int, gid int, flags int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFchownat)), 5, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fdatasync(fd int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFdatasync)), 1, uintptr(fd), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fpathconf(fd int, name int) (val int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFpathconf)), 2, uintptr(fd), uintptr(name), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		val = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fstat(fd int, stat *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFstat)), 2, uintptr(fd), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getdents(fd int, buf []byte, basep *uintptr) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procGetdents)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getgid() (gid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := rawSysvicall6(uintptr(unsafe.Pointer(&procGetgid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		gid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpid() (pid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := rawSysvicall6(uintptr(unsafe.Pointer(&procGetpid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpgid(pid int) (pgid int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procGetpgid)), 1, uintptr(pid), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pgid = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpgrp() (pgid int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procGetpgrp)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pgid = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Geteuid() (euid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := sysvicall6(uintptr(unsafe.Pointer(&procGeteuid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		euid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getegid() (egid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := sysvicall6(uintptr(unsafe.Pointer(&procGetegid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		egid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getppid() (ppid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := sysvicall6(uintptr(unsafe.Pointer(&procGetppid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		ppid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpriority(which int, who int) (n int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procGetpriority)), 2, uintptr(which), uintptr(who), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getrlimit(which int, lim *Rlimit) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procGetrlimit)), 2, uintptr(which), uintptr(unsafe.Pointer(lim)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getrusage(who int, rusage *Rusage) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procGetrusage)), 2, uintptr(who), uintptr(unsafe.Pointer(rusage)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Gettimeofday(tv *Timeval) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procGettimeofday)), 1, uintptr(unsafe.Pointer(tv)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getuid() (uid int) {
0000000000000000000000000000000000000000;;		r0, _, _ := rawSysvicall6(uintptr(unsafe.Pointer(&procGetuid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		uid = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Kill(pid int, signum syscall.Signal) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procKill)), 2, uintptr(pid), uintptr(signum), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Lchown(path string, uid int, gid int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procLchown)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(uid), uintptr(gid), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Link(path string, link string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		_p1, err = BytePtrFromString(link)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procLink)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p1))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Listen(s int, backlog int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&proclisten)), 2, uintptr(s), uintptr(backlog), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Lstat(path string, stat *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procLstat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Madvise(b []byte, advice int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMadvise)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(advice), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mkdir(path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMkdir)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mkdirat(dirfd int, path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMkdirat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mkfifo(path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMkfifo)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mkfifoat(dirfd int, path string, mode uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMkfifoat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mknod(path string, mode uint32, dev int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMknod)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mknodat(dirfd int, path string, mode uint32, dev int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMknodat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(dev), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mlock(b []byte) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMlock)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mlockall(flags int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMlockall)), 1, uintptr(flags), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Mprotect(b []byte, prot int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMprotect)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(prot), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Munlock(b []byte) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMunlock)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Munlockall() (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procMunlockall)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Nanosleep(time *Timespec, leftover *Timespec) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procNanosleep)), 2, uintptr(unsafe.Pointer(time)), uintptr(unsafe.Pointer(leftover)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Open(path string, mode int, perm uint32) (fd int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procOpen)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(mode), uintptr(perm), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Openat(dirfd int, path string, flags int, mode uint32) (fd int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procOpenat)), 4, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), uintptr(mode), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pathconf(path string, name int) (val int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procPathconf)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(name), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		val = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pause() (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procPause)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pread(fd int, p []byte, offset int64) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procPread)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pwrite(fd int, p []byte, offset int64) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procPwrite)), 4, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func read(fd int, p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procread)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Readlink(path string, buf []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p1 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procReadlink)), 3, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(len(buf)), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Rename(from string, to string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(from)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		_p1, err = BytePtrFromString(to)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procRename)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p1))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Renameat(olddirfd int, oldpath string, newdirfd int, newpath string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(oldpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		_p1, err = BytePtrFromString(newpath)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procRenameat)), 4, uintptr(olddirfd), uintptr(unsafe.Pointer(_p0)), uintptr(newdirfd), uintptr(unsafe.Pointer(_p1)), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p1))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Rmdir(path string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procRmdir)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Seek(fd int, offset int64, whence int) (newoffset int64, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&proclseek)), 3, uintptr(fd), uintptr(offset), uintptr(whence), 0, 0, 0)
0000000000000000000000000000000000000000;;		newoffset = int64(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setegid(egid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetegid)), 1, uintptr(egid), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Seteuid(euid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSeteuid)), 1, uintptr(euid), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setgid(gid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetgid)), 1, uintptr(gid), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Sethostname(p []byte) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procSethostname)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setpgid(pid int, pgid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetpgid)), 2, uintptr(pid), uintptr(pgid), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setpriority(which int, who int, prio int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procSetpriority)), 3, uintptr(which), uintptr(who), uintptr(prio), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setregid(rgid int, egid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetregid)), 2, uintptr(rgid), uintptr(egid), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setreuid(ruid int, euid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetreuid)), 2, uintptr(ruid), uintptr(euid), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setrlimit(which int, lim *Rlimit) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetrlimit)), 2, uintptr(which), uintptr(unsafe.Pointer(lim)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setsid() (pid int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetsid)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		pid = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Setuid(uid int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procSetuid)), 1, uintptr(uid), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Shutdown(s int, how int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procshutdown)), 2, uintptr(s), uintptr(how), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Stat(path string, stat *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procStat)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(stat)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Symlink(path string, link string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *byte
0000000000000000000000000000000000000000;;		_p1, err = BytePtrFromString(link)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procSymlink)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p1))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Sync() (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procSync)), 0, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Times(tms *Tms) (ticks uintptr, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procTimes)), 1, uintptr(unsafe.Pointer(tms)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		ticks = uintptr(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Truncate(path string, length int64) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procTruncate)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(length), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fsync(fd int) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFsync)), 1, uintptr(fd), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Ftruncate(fd int, length int64) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procFtruncate)), 2, uintptr(fd), uintptr(length), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Umask(mask int) (oldmask int) {
0000000000000000000000000000000000000000;;		r0, _, _ := sysvicall6(uintptr(unsafe.Pointer(&procUmask)), 1, uintptr(mask), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		oldmask = int(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Uname(buf *Utsname) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procUname)), 1, uintptr(unsafe.Pointer(buf)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Unmount(target string, flags int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(target)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procumount)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Unlink(path string) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procUnlink)), 1, uintptr(unsafe.Pointer(_p0)), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Unlinkat(dirfd int, path string, flags int) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procUnlinkat)), 3, uintptr(dirfd), uintptr(unsafe.Pointer(_p0)), uintptr(flags), 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Ustat(dev int, ubuf *Ustat_t) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procUstat)), 2, uintptr(dev), uintptr(unsafe.Pointer(ubuf)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Utime(path string, buf *Utimbuf) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		_p0, err = BytePtrFromString(path)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procUtime)), 2, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(buf)), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(_p0))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procbind)), 3, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procconnect)), 3, uintptr(s), uintptr(addr), uintptr(addrlen), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procmmap)), 6, uintptr(addr), uintptr(length), uintptr(prot), uintptr(flag), uintptr(fd), uintptr(pos))
0000000000000000000000000000000000000000;;		ret = uintptr(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func munmap(addr uintptr, length uintptr) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procmunmap)), 2, uintptr(addr), uintptr(length), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(buf) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &buf[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procsendto)), 6, uintptr(s), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags), uintptr(to), uintptr(addrlen))
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func socket(domain int, typ int, proto int) (fd int, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procsocket)), 3, uintptr(domain), uintptr(typ), uintptr(proto), 0, 0, 0)
0000000000000000000000000000000000000000;;		fd = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func socketpair(domain int, typ int, proto int, fd *[2]int32) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procsocketpair)), 4, uintptr(domain), uintptr(typ), uintptr(proto), uintptr(unsafe.Pointer(fd)), 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func write(fd int, p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procwrite)), 3, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procgetsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen)), 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := rawSysvicall6(uintptr(unsafe.Pointer(&procgetpeername)), 3, uintptr(fd), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procsetsockopt)), 5, uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(vallen), 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &p[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procrecvfrom)), 6, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))
0000000000000000000000000000000000000000;;		n = int(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sysconf(name int) (n int64, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := sysvicall6(uintptr(unsafe.Pointer(&procsysconf)), 1, uintptr(name), 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		n = int64(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
