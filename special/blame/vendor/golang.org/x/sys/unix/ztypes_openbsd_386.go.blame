0000000000000000000000000000000000000000;;	// Created by cgo -godefs - DO NOT EDIT
0000000000000000000000000000000000000000;;	// cgo -godefs types_openbsd.go
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/ztypes_openbsd_386.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/ztypes_openbsd_386.go][vendor/golang.org/x/sys/unix/ztypes_openbsd_386.go];	
0000000000000000000000000000000000000000;;	// +build 386,openbsd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofPtr      = 0x4
0000000000000000000000000000000000000000;;		sizeofShort    = 0x2
0000000000000000000000000000000000000000;;		sizeofInt      = 0x4
0000000000000000000000000000000000000000;;		sizeofLong     = 0x4
0000000000000000000000000000000000000000;;		sizeofLongLong = 0x8
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		_C_short     int16
0000000000000000000000000000000000000000;;		_C_int       int32
0000000000000000000000000000000000000000;;		_C_long      int32
0000000000000000000000000000000000000000;;		_C_long_long int64
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timespec struct {
0000000000000000000000000000000000000000;;		Sec  int64
0000000000000000000000000000000000000000;;		Nsec int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval struct {
0000000000000000000000000000000000000000;;		Sec  int64
0000000000000000000000000000000000000000;;		Usec int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rusage struct {
0000000000000000000000000000000000000000;;		Utime    Timeval
0000000000000000000000000000000000000000;;		Stime    Timeval
0000000000000000000000000000000000000000;;		Maxrss   int32
0000000000000000000000000000000000000000;;		Ixrss    int32
0000000000000000000000000000000000000000;;		Idrss    int32
0000000000000000000000000000000000000000;;		Isrss    int32
0000000000000000000000000000000000000000;;		Minflt   int32
0000000000000000000000000000000000000000;;		Majflt   int32
0000000000000000000000000000000000000000;;		Nswap    int32
0000000000000000000000000000000000000000;;		Inblock  int32
0000000000000000000000000000000000000000;;		Oublock  int32
0000000000000000000000000000000000000000;;		Msgsnd   int32
0000000000000000000000000000000000000000;;		Msgrcv   int32
0000000000000000000000000000000000000000;;		Nsignals int32
0000000000000000000000000000000000000000;;		Nvcsw    int32
0000000000000000000000000000000000000000;;		Nivcsw   int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rlimit struct {
0000000000000000000000000000000000000000;;		Cur uint64
0000000000000000000000000000000000000000;;		Max uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Gid_t uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		S_IFMT   = 0xf000
0000000000000000000000000000000000000000;;		S_IFIFO  = 0x1000
0000000000000000000000000000000000000000;;		S_IFCHR  = 0x2000
0000000000000000000000000000000000000000;;		S_IFDIR  = 0x4000
0000000000000000000000000000000000000000;;		S_IFBLK  = 0x6000
0000000000000000000000000000000000000000;;		S_IFREG  = 0x8000
0000000000000000000000000000000000000000;;		S_IFLNK  = 0xa000
0000000000000000000000000000000000000000;;		S_IFSOCK = 0xc000
0000000000000000000000000000000000000000;;		S_ISUID  = 0x800
0000000000000000000000000000000000000000;;		S_ISGID  = 0x400
0000000000000000000000000000000000000000;;		S_ISVTX  = 0x200
0000000000000000000000000000000000000000;;		S_IRUSR  = 0x100
0000000000000000000000000000000000000000;;		S_IWUSR  = 0x80
0000000000000000000000000000000000000000;;		S_IXUSR  = 0x40
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stat_t struct {
0000000000000000000000000000000000000000;;		Mode           uint32
0000000000000000000000000000000000000000;;		Dev            int32
0000000000000000000000000000000000000000;;		Ino            uint64
0000000000000000000000000000000000000000;;		Nlink          uint32
0000000000000000000000000000000000000000;;		Uid            uint32
0000000000000000000000000000000000000000;;		Gid            uint32
0000000000000000000000000000000000000000;;		Rdev           int32
0000000000000000000000000000000000000000;;		Atim           Timespec
0000000000000000000000000000000000000000;;		Mtim           Timespec
0000000000000000000000000000000000000000;;		Ctim           Timespec
0000000000000000000000000000000000000000;;		Size           int64
0000000000000000000000000000000000000000;;		Blocks         int64
0000000000000000000000000000000000000000;;		Blksize        uint32
0000000000000000000000000000000000000000;;		Flags          uint32
0000000000000000000000000000000000000000;;		Gen            uint32
0000000000000000000000000000000000000000;;		X__st_birthtim Timespec
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Statfs_t struct {
0000000000000000000000000000000000000000;;		F_flags       uint32
0000000000000000000000000000000000000000;;		F_bsize       uint32
0000000000000000000000000000000000000000;;		F_iosize      uint32
0000000000000000000000000000000000000000;;		F_blocks      uint64
0000000000000000000000000000000000000000;;		F_bfree       uint64
0000000000000000000000000000000000000000;;		F_bavail      int64
0000000000000000000000000000000000000000;;		F_files       uint64
0000000000000000000000000000000000000000;;		F_ffree       uint64
0000000000000000000000000000000000000000;;		F_favail      int64
0000000000000000000000000000000000000000;;		F_syncwrites  uint64
0000000000000000000000000000000000000000;;		F_syncreads   uint64
0000000000000000000000000000000000000000;;		F_asyncwrites uint64
0000000000000000000000000000000000000000;;		F_asyncreads  uint64
0000000000000000000000000000000000000000;;		F_fsid        Fsid
0000000000000000000000000000000000000000;;		F_namemax     uint32
0000000000000000000000000000000000000000;;		F_owner       uint32
0000000000000000000000000000000000000000;;		F_ctime       uint64
0000000000000000000000000000000000000000;;		F_fstypename  [16]int8
0000000000000000000000000000000000000000;;		F_mntonname   [90]int8
0000000000000000000000000000000000000000;;		F_mntfromname [90]int8
0000000000000000000000000000000000000000;;		F_mntfromspec [90]int8
0000000000000000000000000000000000000000;;		Pad_cgo_0     [2]byte
0000000000000000000000000000000000000000;;		Mount_info    [160]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Flock_t struct {
0000000000000000000000000000000000000000;;		Start  int64
0000000000000000000000000000000000000000;;		Len    int64
0000000000000000000000000000000000000000;;		Pid    int32
0000000000000000000000000000000000000000;;		Type   int16
0000000000000000000000000000000000000000;;		Whence int16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dirent struct {
0000000000000000000000000000000000000000;;		Fileno       uint64
0000000000000000000000000000000000000000;;		Off          int64
0000000000000000000000000000000000000000;;		Reclen       uint16
0000000000000000000000000000000000000000;;		Type         uint8
0000000000000000000000000000000000000000;;		Namlen       uint8
0000000000000000000000000000000000000000;;		X__d_padding [4]uint8
0000000000000000000000000000000000000000;;		Name         [256]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Fsid struct {
0000000000000000000000000000000000000000;;		Val [2]int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet4 struct {
0000000000000000000000000000000000000000;;		Len    uint8
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Port   uint16
0000000000000000000000000000000000000000;;		Addr   [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Zero   [8]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet6 struct {
0000000000000000000000000000000000000000;;		Len      uint8
0000000000000000000000000000000000000000;;		Family   uint8
0000000000000000000000000000000000000000;;		Port     uint16
0000000000000000000000000000000000000000;;		Flowinfo uint32
0000000000000000000000000000000000000000;;		Addr     [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Scope_id uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrUnix struct {
0000000000000000000000000000000000000000;;		Len    uint8
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Path   [104]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrDatalink struct {
0000000000000000000000000000000000000000;;		Len    uint8
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Index  uint16
0000000000000000000000000000000000000000;;		Type   uint8
0000000000000000000000000000000000000000;;		Nlen   uint8
0000000000000000000000000000000000000000;;		Alen   uint8
0000000000000000000000000000000000000000;;		Slen   uint8
0000000000000000000000000000000000000000;;		Data   [24]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddr struct {
0000000000000000000000000000000000000000;;		Len    uint8
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Data   [14]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrAny struct {
0000000000000000000000000000000000000000;;		Addr RawSockaddr
0000000000000000000000000000000000000000;;		Pad  [92]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Socklen uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Linger struct {
0000000000000000000000000000000000000000;;		Onoff  int32
0000000000000000000000000000000000000000;;		Linger int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iovec struct {
0000000000000000000000000000000000000000;;		Base *byte
0000000000000000000000000000000000000000;;		Len  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreq struct {
0000000000000000000000000000000000000000;;		Multiaddr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Interface [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6Mreq struct {
0000000000000000000000000000000000000000;;		Multiaddr [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Interface uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Msghdr struct {
0000000000000000000000000000000000000000;;		Name       *byte
0000000000000000000000000000000000000000;;		Namelen    uint32
0000000000000000000000000000000000000000;;		Iov        *Iovec
0000000000000000000000000000000000000000;;		Iovlen     uint32
0000000000000000000000000000000000000000;;		Control    *byte
0000000000000000000000000000000000000000;;		Controllen uint32
0000000000000000000000000000000000000000;;		Flags      int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmsghdr struct {
0000000000000000000000000000000000000000;;		Len   uint32
0000000000000000000000000000000000000000;;		Level int32
0000000000000000000000000000000000000000;;		Type  int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet6Pktinfo struct {
0000000000000000000000000000000000000000;;		Addr    [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Ifindex uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6MTUInfo struct {
0000000000000000000000000000000000000000;;		Addr RawSockaddrInet6
0000000000000000000000000000000000000000;;		Mtu  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ICMPv6Filter struct {
0000000000000000000000000000000000000000;;		Filt [8]uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockaddrInet4    = 0x10
0000000000000000000000000000000000000000;;		SizeofSockaddrInet6    = 0x1c
0000000000000000000000000000000000000000;;		SizeofSockaddrAny      = 0x6c
0000000000000000000000000000000000000000;;		SizeofSockaddrUnix     = 0x6a
0000000000000000000000000000000000000000;;		SizeofSockaddrDatalink = 0x20
0000000000000000000000000000000000000000;;		SizeofLinger           = 0x8
0000000000000000000000000000000000000000;;		SizeofIPMreq           = 0x8
0000000000000000000000000000000000000000;;		SizeofIPv6Mreq         = 0x14
0000000000000000000000000000000000000000;;		SizeofMsghdr           = 0x1c
0000000000000000000000000000000000000000;;		SizeofCmsghdr          = 0xc
0000000000000000000000000000000000000000;;		SizeofInet6Pktinfo     = 0x14
0000000000000000000000000000000000000000;;		SizeofIPv6MTUInfo      = 0x20
0000000000000000000000000000000000000000;;		SizeofICMPv6Filter     = 0x20
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PTRACE_TRACEME = 0x0
0000000000000000000000000000000000000000;;		PTRACE_CONT    = 0x7
0000000000000000000000000000000000000000;;		PTRACE_KILL    = 0x8
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Kevent_t struct {
0000000000000000000000000000000000000000;;		Ident  uint32
0000000000000000000000000000000000000000;;		Filter int16
0000000000000000000000000000000000000000;;		Flags  uint16
0000000000000000000000000000000000000000;;		Fflags uint32
0000000000000000000000000000000000000000;;		Data   int64
0000000000000000000000000000000000000000;;		Udata  *byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdSet struct {
0000000000000000000000000000000000000000;;		Bits [32]uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofIfMsghdr         = 0xec
0000000000000000000000000000000000000000;;		SizeofIfData           = 0xd4
0000000000000000000000000000000000000000;;		SizeofIfaMsghdr        = 0x18
0000000000000000000000000000000000000000;;		SizeofIfAnnounceMsghdr = 0x1a
0000000000000000000000000000000000000000;;		SizeofRtMsghdr         = 0x60
0000000000000000000000000000000000000000;;		SizeofRtMetrics        = 0x38
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfMsghdr struct {
0000000000000000000000000000000000000000;;		Msglen  uint16
0000000000000000000000000000000000000000;;		Version uint8
0000000000000000000000000000000000000000;;		Type    uint8
0000000000000000000000000000000000000000;;		Hdrlen  uint16
0000000000000000000000000000000000000000;;		Index   uint16
0000000000000000000000000000000000000000;;		Tableid uint16
0000000000000000000000000000000000000000;;		Pad1    uint8
0000000000000000000000000000000000000000;;		Pad2    uint8
0000000000000000000000000000000000000000;;		Addrs   int32
0000000000000000000000000000000000000000;;		Flags   int32
0000000000000000000000000000000000000000;;		Xflags  int32
0000000000000000000000000000000000000000;;		Data    IfData
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfData struct {
0000000000000000000000000000000000000000;;		Type         uint8
0000000000000000000000000000000000000000;;		Addrlen      uint8
0000000000000000000000000000000000000000;;		Hdrlen       uint8
0000000000000000000000000000000000000000;;		Link_state   uint8
0000000000000000000000000000000000000000;;		Mtu          uint32
0000000000000000000000000000000000000000;;		Metric       uint32
0000000000000000000000000000000000000000;;		Pad          uint32
0000000000000000000000000000000000000000;;		Baudrate     uint64
0000000000000000000000000000000000000000;;		Ipackets     uint64
0000000000000000000000000000000000000000;;		Ierrors      uint64
0000000000000000000000000000000000000000;;		Opackets     uint64
0000000000000000000000000000000000000000;;		Oerrors      uint64
0000000000000000000000000000000000000000;;		Collisions   uint64
0000000000000000000000000000000000000000;;		Ibytes       uint64
0000000000000000000000000000000000000000;;		Obytes       uint64
0000000000000000000000000000000000000000;;		Imcasts      uint64
0000000000000000000000000000000000000000;;		Omcasts      uint64
0000000000000000000000000000000000000000;;		Iqdrops      uint64
0000000000000000000000000000000000000000;;		Noproto      uint64
0000000000000000000000000000000000000000;;		Capabilities uint32
0000000000000000000000000000000000000000;;		Lastchange   Timeval
0000000000000000000000000000000000000000;;		Mclpool      [7]Mclpool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfaMsghdr struct {
0000000000000000000000000000000000000000;;		Msglen  uint16
0000000000000000000000000000000000000000;;		Version uint8
0000000000000000000000000000000000000000;;		Type    uint8
0000000000000000000000000000000000000000;;		Hdrlen  uint16
0000000000000000000000000000000000000000;;		Index   uint16
0000000000000000000000000000000000000000;;		Tableid uint16
0000000000000000000000000000000000000000;;		Pad1    uint8
0000000000000000000000000000000000000000;;		Pad2    uint8
0000000000000000000000000000000000000000;;		Addrs   int32
0000000000000000000000000000000000000000;;		Flags   int32
0000000000000000000000000000000000000000;;		Metric  int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfAnnounceMsghdr struct {
0000000000000000000000000000000000000000;;		Msglen  uint16
0000000000000000000000000000000000000000;;		Version uint8
0000000000000000000000000000000000000000;;		Type    uint8
0000000000000000000000000000000000000000;;		Hdrlen  uint16
0000000000000000000000000000000000000000;;		Index   uint16
0000000000000000000000000000000000000000;;		What    uint16
0000000000000000000000000000000000000000;;		Name    [16]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMsghdr struct {
0000000000000000000000000000000000000000;;		Msglen   uint16
0000000000000000000000000000000000000000;;		Version  uint8
0000000000000000000000000000000000000000;;		Type     uint8
0000000000000000000000000000000000000000;;		Hdrlen   uint16
0000000000000000000000000000000000000000;;		Index    uint16
0000000000000000000000000000000000000000;;		Tableid  uint16
0000000000000000000000000000000000000000;;		Priority uint8
0000000000000000000000000000000000000000;;		Mpls     uint8
0000000000000000000000000000000000000000;;		Addrs    int32
0000000000000000000000000000000000000000;;		Flags    int32
0000000000000000000000000000000000000000;;		Fmask    int32
0000000000000000000000000000000000000000;;		Pid      int32
0000000000000000000000000000000000000000;;		Seq      int32
0000000000000000000000000000000000000000;;		Errno    int32
0000000000000000000000000000000000000000;;		Inits    uint32
0000000000000000000000000000000000000000;;		Rmx      RtMetrics
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMetrics struct {
0000000000000000000000000000000000000000;;		Pksent   uint64
0000000000000000000000000000000000000000;;		Expire   int64
0000000000000000000000000000000000000000;;		Locks    uint32
0000000000000000000000000000000000000000;;		Mtu      uint32
0000000000000000000000000000000000000000;;		Refcnt   uint32
0000000000000000000000000000000000000000;;		Hopcount uint32
0000000000000000000000000000000000000000;;		Recvpipe uint32
0000000000000000000000000000000000000000;;		Sendpipe uint32
0000000000000000000000000000000000000000;;		Ssthresh uint32
0000000000000000000000000000000000000000;;		Rtt      uint32
0000000000000000000000000000000000000000;;		Rttvar   uint32
0000000000000000000000000000000000000000;;		Pad      uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Mclpool struct {
0000000000000000000000000000000000000000;;		Grown int32
0000000000000000000000000000000000000000;;		Alive uint16
0000000000000000000000000000000000000000;;		Hwm   uint16
0000000000000000000000000000000000000000;;		Cwm   uint16
0000000000000000000000000000000000000000;;		Lwm   uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofBpfVersion = 0x4
0000000000000000000000000000000000000000;;		SizeofBpfStat    = 0x8
0000000000000000000000000000000000000000;;		SizeofBpfProgram = 0x8
0000000000000000000000000000000000000000;;		SizeofBpfInsn    = 0x8
0000000000000000000000000000000000000000;;		SizeofBpfHdr     = 0x14
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfVersion struct {
0000000000000000000000000000000000000000;;		Major uint16
0000000000000000000000000000000000000000;;		Minor uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfStat struct {
0000000000000000000000000000000000000000;;		Recv uint32
0000000000000000000000000000000000000000;;		Drop uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfProgram struct {
0000000000000000000000000000000000000000;;		Len   uint32
0000000000000000000000000000000000000000;;		Insns *BpfInsn
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfInsn struct {
0000000000000000000000000000000000000000;;		Code uint16
0000000000000000000000000000000000000000;;		Jt   uint8
0000000000000000000000000000000000000000;;		Jf   uint8
0000000000000000000000000000000000000000;;		K    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfHdr struct {
0000000000000000000000000000000000000000;;		Tstamp    BpfTimeval
0000000000000000000000000000000000000000;;		Caplen    uint32
0000000000000000000000000000000000000000;;		Datalen   uint32
0000000000000000000000000000000000000000;;		Hdrlen    uint16
0000000000000000000000000000000000000000;;		Pad_cgo_0 [2]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfTimeval struct {
0000000000000000000000000000000000000000;;		Sec  uint32
0000000000000000000000000000000000000000;;		Usec uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termios struct {
0000000000000000000000000000000000000000;;		Iflag  uint32
0000000000000000000000000000000000000000;;		Oflag  uint32
0000000000000000000000000000000000000000;;		Cflag  uint32
0000000000000000000000000000000000000000;;		Lflag  uint32
0000000000000000000000000000000000000000;;		Cc     [20]uint8
0000000000000000000000000000000000000000;;		Ispeed int32
0000000000000000000000000000000000000000;;		Ospeed int32
0000000000000000000000000000000000000000;;	}
