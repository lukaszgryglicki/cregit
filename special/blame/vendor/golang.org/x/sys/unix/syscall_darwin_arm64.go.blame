0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_darwin_arm64.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_darwin_arm64.go][vendor/golang.org/x/sys/unix/syscall_darwin_arm64.go];	
0000000000000000000000000000000000000000;;	// +build arm64,darwin
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpagesize() int { return 16384 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimespec(nsec int64) (ts Timespec) {
0000000000000000000000000000000000000000;;		ts.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		ts.Nsec = nsec % 1e9
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimeval(nsec int64) (tv Timeval) {
0000000000000000000000000000000000000000;;		nsec += 999 // round up to microsecond
0000000000000000000000000000000000000000;;		tv.Usec = int32(nsec % 1e9 / 1e3)
0000000000000000000000000000000000000000;;		tv.Sec = int64(nsec / 1e9)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb	gettimeofday(tp *Timeval) (sec int64, usec int32, err error)
0000000000000000000000000000000000000000;;	func Gettimeofday(tv *Timeval) (err error) {
0000000000000000000000000000000000000000;;		// The tv passed to gettimeofday must be non-nil
0000000000000000000000000000000000000000;;		// but is otherwise unused.  The answers come back
0000000000000000000000000000000000000000;;		// in the two registers.
0000000000000000000000000000000000000000;;		sec, usec, err := gettimeofday(tv)
0000000000000000000000000000000000000000;;		tv.Sec = sec
0000000000000000000000000000000000000000;;		tv.Usec = usec
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetKevent(k *Kevent_t, fd, mode, flags int) {
0000000000000000000000000000000000000000;;		k.Ident = uint64(fd)
0000000000000000000000000000000000000000;;		k.Filter = int16(mode)
0000000000000000000000000000000000000000;;		k.Flags = uint16(flags)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (iov *Iovec) SetLen(length int) {
0000000000000000000000000000000000000000;;		iov.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msghdr *Msghdr) SetControllen(length int) {
0000000000000000000000000000000000000000;;		msghdr.Controllen = uint32(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmsg *Cmsghdr) SetLen(length int) {
0000000000000000000000000000000000000000;;		cmsg.Len = uint32(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {
0000000000000000000000000000000000000000;;		var length = uint64(count)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, _, e1 := Syscall6(SYS_SENDFILE, uintptr(infd), uintptr(outfd), uintptr(*offset), uintptr(unsafe.Pointer(&length)), 0, 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		written = int(length)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = e1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Syscall9(num, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) // sic
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SYS___SYSCTL is used by syscall_bsd.go for all BSDs, but in modern versions
0000000000000000000000000000000000000000;;	// of darwin/arm64 the syscall is called sysctl instead of __sysctl.
0000000000000000000000000000000000000000;;	const SYS___SYSCTL = SYS_SYSCTL
