0000000000000000000000000000000000000000;;	// +build amd64,linux
0000000000000000000000000000000000000000;;	// Created by cgo -godefs - DO NOT EDIT
0000000000000000000000000000000000000000;;	// cgo -godefs types_linux.go
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/ztypes_linux_amd64.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/ztypes_linux_amd64.go][vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go];	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofPtr      = 0x8
0000000000000000000000000000000000000000;;		sizeofShort    = 0x2
0000000000000000000000000000000000000000;;		sizeofInt      = 0x4
0000000000000000000000000000000000000000;;		sizeofLong     = 0x8
0000000000000000000000000000000000000000;;		sizeofLongLong = 0x8
0000000000000000000000000000000000000000;;		PathMax        = 0x1000
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		_C_short     int16
0000000000000000000000000000000000000000;;		_C_int       int32
0000000000000000000000000000000000000000;;		_C_long      int64
0000000000000000000000000000000000000000;;		_C_long_long int64
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timespec struct {
0000000000000000000000000000000000000000;;		Sec  int64
0000000000000000000000000000000000000000;;		Nsec int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval struct {
0000000000000000000000000000000000000000;;		Sec  int64
0000000000000000000000000000000000000000;;		Usec int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timex struct {
0000000000000000000000000000000000000000;;		Modes     uint32
0000000000000000000000000000000000000000;;		Pad_cgo_0 [4]byte
0000000000000000000000000000000000000000;;		Offset    int64
0000000000000000000000000000000000000000;;		Freq      int64
0000000000000000000000000000000000000000;;		Maxerror  int64
0000000000000000000000000000000000000000;;		Esterror  int64
0000000000000000000000000000000000000000;;		Status    int32
0000000000000000000000000000000000000000;;		Pad_cgo_1 [4]byte
0000000000000000000000000000000000000000;;		Constant  int64
0000000000000000000000000000000000000000;;		Precision int64
0000000000000000000000000000000000000000;;		Tolerance int64
0000000000000000000000000000000000000000;;		Time      Timeval
0000000000000000000000000000000000000000;;		Tick      int64
0000000000000000000000000000000000000000;;		Ppsfreq   int64
0000000000000000000000000000000000000000;;		Jitter    int64
0000000000000000000000000000000000000000;;		Shift     int32
0000000000000000000000000000000000000000;;		Pad_cgo_2 [4]byte
0000000000000000000000000000000000000000;;		Stabil    int64
0000000000000000000000000000000000000000;;		Jitcnt    int64
0000000000000000000000000000000000000000;;		Calcnt    int64
0000000000000000000000000000000000000000;;		Errcnt    int64
0000000000000000000000000000000000000000;;		Stbcnt    int64
0000000000000000000000000000000000000000;;		Tai       int32
0000000000000000000000000000000000000000;;		Pad_cgo_3 [44]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Time_t int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tms struct {
0000000000000000000000000000000000000000;;		Utime  int64
0000000000000000000000000000000000000000;;		Stime  int64
0000000000000000000000000000000000000000;;		Cutime int64
0000000000000000000000000000000000000000;;		Cstime int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utimbuf struct {
0000000000000000000000000000000000000000;;		Actime  int64
0000000000000000000000000000000000000000;;		Modtime int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rusage struct {
0000000000000000000000000000000000000000;;		Utime    Timeval
0000000000000000000000000000000000000000;;		Stime    Timeval
0000000000000000000000000000000000000000;;		Maxrss   int64
0000000000000000000000000000000000000000;;		Ixrss    int64
0000000000000000000000000000000000000000;;		Idrss    int64
0000000000000000000000000000000000000000;;		Isrss    int64
0000000000000000000000000000000000000000;;		Minflt   int64
0000000000000000000000000000000000000000;;		Majflt   int64
0000000000000000000000000000000000000000;;		Nswap    int64
0000000000000000000000000000000000000000;;		Inblock  int64
0000000000000000000000000000000000000000;;		Oublock  int64
0000000000000000000000000000000000000000;;		Msgsnd   int64
0000000000000000000000000000000000000000;;		Msgrcv   int64
0000000000000000000000000000000000000000;;		Nsignals int64
0000000000000000000000000000000000000000;;		Nvcsw    int64
0000000000000000000000000000000000000000;;		Nivcsw   int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rlimit struct {
0000000000000000000000000000000000000000;;		Cur uint64
0000000000000000000000000000000000000000;;		Max uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Gid_t uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stat_t struct {
0000000000000000000000000000000000000000;;		Dev       uint64
0000000000000000000000000000000000000000;;		Ino       uint64
0000000000000000000000000000000000000000;;		Nlink     uint64
0000000000000000000000000000000000000000;;		Mode      uint32
0000000000000000000000000000000000000000;;		Uid       uint32
0000000000000000000000000000000000000000;;		Gid       uint32
0000000000000000000000000000000000000000;;		X__pad0   int32
0000000000000000000000000000000000000000;;		Rdev      uint64
0000000000000000000000000000000000000000;;		Size      int64
0000000000000000000000000000000000000000;;		Blksize   int64
0000000000000000000000000000000000000000;;		Blocks    int64
0000000000000000000000000000000000000000;;		Atim      Timespec
0000000000000000000000000000000000000000;;		Mtim      Timespec
0000000000000000000000000000000000000000;;		Ctim      Timespec
0000000000000000000000000000000000000000;;		X__unused [3]int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Statfs_t struct {
0000000000000000000000000000000000000000;;		Type    int64
0000000000000000000000000000000000000000;;		Bsize   int64
0000000000000000000000000000000000000000;;		Blocks  uint64
0000000000000000000000000000000000000000;;		Bfree   uint64
0000000000000000000000000000000000000000;;		Bavail  uint64
0000000000000000000000000000000000000000;;		Files   uint64
0000000000000000000000000000000000000000;;		Ffree   uint64
0000000000000000000000000000000000000000;;		Fsid    Fsid
0000000000000000000000000000000000000000;;		Namelen int64
0000000000000000000000000000000000000000;;		Frsize  int64
0000000000000000000000000000000000000000;;		Flags   int64
0000000000000000000000000000000000000000;;		Spare   [4]int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dirent struct {
0000000000000000000000000000000000000000;;		Ino       uint64
0000000000000000000000000000000000000000;;		Off       int64
0000000000000000000000000000000000000000;;		Reclen    uint16
0000000000000000000000000000000000000000;;		Type      uint8
0000000000000000000000000000000000000000;;		Name      [256]int8
0000000000000000000000000000000000000000;;		Pad_cgo_0 [5]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Fsid struct {
0000000000000000000000000000000000000000;;		X__val [2]int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Flock_t struct {
0000000000000000000000000000000000000000;;		Type      int16
0000000000000000000000000000000000000000;;		Whence    int16
0000000000000000000000000000000000000000;;		Pad_cgo_0 [4]byte
0000000000000000000000000000000000000000;;		Start     int64
0000000000000000000000000000000000000000;;		Len       int64
0000000000000000000000000000000000000000;;		Pid       int32
0000000000000000000000000000000000000000;;		Pad_cgo_1 [4]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FADV_NORMAL     = 0x0
0000000000000000000000000000000000000000;;		FADV_RANDOM     = 0x1
0000000000000000000000000000000000000000;;		FADV_SEQUENTIAL = 0x2
0000000000000000000000000000000000000000;;		FADV_WILLNEED   = 0x3
0000000000000000000000000000000000000000;;		FADV_DONTNEED   = 0x4
0000000000000000000000000000000000000000;;		FADV_NOREUSE    = 0x5
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet4 struct {
0000000000000000000000000000000000000000;;		Family uint16
0000000000000000000000000000000000000000;;		Port   uint16
0000000000000000000000000000000000000000;;		Addr   [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Zero   [8]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet6 struct {
0000000000000000000000000000000000000000;;		Family   uint16
0000000000000000000000000000000000000000;;		Port     uint16
0000000000000000000000000000000000000000;;		Flowinfo uint32
0000000000000000000000000000000000000000;;		Addr     [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Scope_id uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrUnix struct {
0000000000000000000000000000000000000000;;		Family uint16
0000000000000000000000000000000000000000;;		Path   [108]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrLinklayer struct {
0000000000000000000000000000000000000000;;		Family   uint16
0000000000000000000000000000000000000000;;		Protocol uint16
0000000000000000000000000000000000000000;;		Ifindex  int32
0000000000000000000000000000000000000000;;		Hatype   uint16
0000000000000000000000000000000000000000;;		Pkttype  uint8
0000000000000000000000000000000000000000;;		Halen    uint8
0000000000000000000000000000000000000000;;		Addr     [8]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrNetlink struct {
0000000000000000000000000000000000000000;;		Family uint16
0000000000000000000000000000000000000000;;		Pad    uint16
0000000000000000000000000000000000000000;;		Pid    uint32
0000000000000000000000000000000000000000;;		Groups uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrHCI struct {
0000000000000000000000000000000000000000;;		Family  uint16
0000000000000000000000000000000000000000;;		Dev     uint16
0000000000000000000000000000000000000000;;		Channel uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddr struct {
0000000000000000000000000000000000000000;;		Family uint16
0000000000000000000000000000000000000000;;		Data   [14]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrAny struct {
0000000000000000000000000000000000000000;;		Addr RawSockaddr
0000000000000000000000000000000000000000;;		Pad  [96]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Socklen uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Linger struct {
0000000000000000000000000000000000000000;;		Onoff  int32
0000000000000000000000000000000000000000;;		Linger int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iovec struct {
0000000000000000000000000000000000000000;;		Base *byte
0000000000000000000000000000000000000000;;		Len  uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreq struct {
0000000000000000000000000000000000000000;;		Multiaddr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Interface [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreqn struct {
0000000000000000000000000000000000000000;;		Multiaddr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Address   [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Ifindex   int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6Mreq struct {
0000000000000000000000000000000000000000;;		Multiaddr [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Interface uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Msghdr struct {
0000000000000000000000000000000000000000;;		Name       *byte
0000000000000000000000000000000000000000;;		Namelen    uint32
0000000000000000000000000000000000000000;;		Pad_cgo_0  [4]byte
0000000000000000000000000000000000000000;;		Iov        *Iovec
0000000000000000000000000000000000000000;;		Iovlen     uint64
0000000000000000000000000000000000000000;;		Control    *byte
0000000000000000000000000000000000000000;;		Controllen uint64
0000000000000000000000000000000000000000;;		Flags      int32
0000000000000000000000000000000000000000;;		Pad_cgo_1  [4]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmsghdr struct {
0000000000000000000000000000000000000000;;		Len          uint64
0000000000000000000000000000000000000000;;		Level        int32
0000000000000000000000000000000000000000;;		Type         int32
0000000000000000000000000000000000000000;;		X__cmsg_data [0]uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet4Pktinfo struct {
0000000000000000000000000000000000000000;;		Ifindex  int32
0000000000000000000000000000000000000000;;		Spec_dst [4]byte /* in_addr */
0000000000000000000000000000000000000000;;		Addr     [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet6Pktinfo struct {
0000000000000000000000000000000000000000;;		Addr    [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;		Ifindex uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6MTUInfo struct {
0000000000000000000000000000000000000000;;		Addr RawSockaddrInet6
0000000000000000000000000000000000000000;;		Mtu  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ICMPv6Filter struct {
0000000000000000000000000000000000000000;;		Data [8]uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ucred struct {
0000000000000000000000000000000000000000;;		Pid int32
0000000000000000000000000000000000000000;;		Uid uint32
0000000000000000000000000000000000000000;;		Gid uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TCPInfo struct {
0000000000000000000000000000000000000000;;		State          uint8
0000000000000000000000000000000000000000;;		Ca_state       uint8
0000000000000000000000000000000000000000;;		Retransmits    uint8
0000000000000000000000000000000000000000;;		Probes         uint8
0000000000000000000000000000000000000000;;		Backoff        uint8
0000000000000000000000000000000000000000;;		Options        uint8
0000000000000000000000000000000000000000;;		Pad_cgo_0      [2]byte
0000000000000000000000000000000000000000;;		Rto            uint32
0000000000000000000000000000000000000000;;		Ato            uint32
0000000000000000000000000000000000000000;;		Snd_mss        uint32
0000000000000000000000000000000000000000;;		Rcv_mss        uint32
0000000000000000000000000000000000000000;;		Unacked        uint32
0000000000000000000000000000000000000000;;		Sacked         uint32
0000000000000000000000000000000000000000;;		Lost           uint32
0000000000000000000000000000000000000000;;		Retrans        uint32
0000000000000000000000000000000000000000;;		Fackets        uint32
0000000000000000000000000000000000000000;;		Last_data_sent uint32
0000000000000000000000000000000000000000;;		Last_ack_sent  uint32
0000000000000000000000000000000000000000;;		Last_data_recv uint32
0000000000000000000000000000000000000000;;		Last_ack_recv  uint32
0000000000000000000000000000000000000000;;		Pmtu           uint32
0000000000000000000000000000000000000000;;		Rcv_ssthresh   uint32
0000000000000000000000000000000000000000;;		Rtt            uint32
0000000000000000000000000000000000000000;;		Rttvar         uint32
0000000000000000000000000000000000000000;;		Snd_ssthresh   uint32
0000000000000000000000000000000000000000;;		Snd_cwnd       uint32
0000000000000000000000000000000000000000;;		Advmss         uint32
0000000000000000000000000000000000000000;;		Reordering     uint32
0000000000000000000000000000000000000000;;		Rcv_rtt        uint32
0000000000000000000000000000000000000000;;		Rcv_space      uint32
0000000000000000000000000000000000000000;;		Total_retrans  uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockaddrInet4     = 0x10
0000000000000000000000000000000000000000;;		SizeofSockaddrInet6     = 0x1c
0000000000000000000000000000000000000000;;		SizeofSockaddrAny       = 0x70
0000000000000000000000000000000000000000;;		SizeofSockaddrUnix      = 0x6e
0000000000000000000000000000000000000000;;		SizeofSockaddrLinklayer = 0x14
0000000000000000000000000000000000000000;;		SizeofSockaddrNetlink   = 0xc
0000000000000000000000000000000000000000;;		SizeofSockaddrHCI       = 0x6
0000000000000000000000000000000000000000;;		SizeofLinger            = 0x8
0000000000000000000000000000000000000000;;		SizeofIPMreq            = 0x8
0000000000000000000000000000000000000000;;		SizeofIPMreqn           = 0xc
0000000000000000000000000000000000000000;;		SizeofIPv6Mreq          = 0x14
0000000000000000000000000000000000000000;;		SizeofMsghdr            = 0x38
0000000000000000000000000000000000000000;;		SizeofCmsghdr           = 0x10
0000000000000000000000000000000000000000;;		SizeofInet4Pktinfo      = 0xc
0000000000000000000000000000000000000000;;		SizeofInet6Pktinfo      = 0x14
0000000000000000000000000000000000000000;;		SizeofIPv6MTUInfo       = 0x20
0000000000000000000000000000000000000000;;		SizeofICMPv6Filter      = 0x20
0000000000000000000000000000000000000000;;		SizeofUcred             = 0xc
0000000000000000000000000000000000000000;;		SizeofTCPInfo           = 0x68
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IFA_UNSPEC          = 0x0
0000000000000000000000000000000000000000;;		IFA_ADDRESS         = 0x1
0000000000000000000000000000000000000000;;		IFA_LOCAL           = 0x2
0000000000000000000000000000000000000000;;		IFA_LABEL           = 0x3
0000000000000000000000000000000000000000;;		IFA_BROADCAST       = 0x4
0000000000000000000000000000000000000000;;		IFA_ANYCAST         = 0x5
0000000000000000000000000000000000000000;;		IFA_CACHEINFO       = 0x6
0000000000000000000000000000000000000000;;		IFA_MULTICAST       = 0x7
0000000000000000000000000000000000000000;;		IFLA_UNSPEC         = 0x0
0000000000000000000000000000000000000000;;		IFLA_ADDRESS        = 0x1
0000000000000000000000000000000000000000;;		IFLA_BROADCAST      = 0x2
0000000000000000000000000000000000000000;;		IFLA_IFNAME         = 0x3
0000000000000000000000000000000000000000;;		IFLA_MTU            = 0x4
0000000000000000000000000000000000000000;;		IFLA_LINK           = 0x5
0000000000000000000000000000000000000000;;		IFLA_QDISC          = 0x6
0000000000000000000000000000000000000000;;		IFLA_STATS          = 0x7
0000000000000000000000000000000000000000;;		IFLA_COST           = 0x8
0000000000000000000000000000000000000000;;		IFLA_PRIORITY       = 0x9
0000000000000000000000000000000000000000;;		IFLA_MASTER         = 0xa
0000000000000000000000000000000000000000;;		IFLA_WIRELESS       = 0xb
0000000000000000000000000000000000000000;;		IFLA_PROTINFO       = 0xc
0000000000000000000000000000000000000000;;		IFLA_TXQLEN         = 0xd
0000000000000000000000000000000000000000;;		IFLA_MAP            = 0xe
0000000000000000000000000000000000000000;;		IFLA_WEIGHT         = 0xf
0000000000000000000000000000000000000000;;		IFLA_OPERSTATE      = 0x10
0000000000000000000000000000000000000000;;		IFLA_LINKMODE       = 0x11
0000000000000000000000000000000000000000;;		IFLA_LINKINFO       = 0x12
0000000000000000000000000000000000000000;;		IFLA_NET_NS_PID     = 0x13
0000000000000000000000000000000000000000;;		IFLA_IFALIAS        = 0x14
0000000000000000000000000000000000000000;;		IFLA_MAX            = 0x1d
0000000000000000000000000000000000000000;;		RT_SCOPE_UNIVERSE   = 0x0
0000000000000000000000000000000000000000;;		RT_SCOPE_SITE       = 0xc8
0000000000000000000000000000000000000000;;		RT_SCOPE_LINK       = 0xfd
0000000000000000000000000000000000000000;;		RT_SCOPE_HOST       = 0xfe
0000000000000000000000000000000000000000;;		RT_SCOPE_NOWHERE    = 0xff
0000000000000000000000000000000000000000;;		RT_TABLE_UNSPEC     = 0x0
0000000000000000000000000000000000000000;;		RT_TABLE_COMPAT     = 0xfc
0000000000000000000000000000000000000000;;		RT_TABLE_DEFAULT    = 0xfd
0000000000000000000000000000000000000000;;		RT_TABLE_MAIN       = 0xfe
0000000000000000000000000000000000000000;;		RT_TABLE_LOCAL      = 0xff
0000000000000000000000000000000000000000;;		RT_TABLE_MAX        = 0xffffffff
0000000000000000000000000000000000000000;;		RTA_UNSPEC          = 0x0
0000000000000000000000000000000000000000;;		RTA_DST             = 0x1
0000000000000000000000000000000000000000;;		RTA_SRC             = 0x2
0000000000000000000000000000000000000000;;		RTA_IIF             = 0x3
0000000000000000000000000000000000000000;;		RTA_OIF             = 0x4
0000000000000000000000000000000000000000;;		RTA_GATEWAY         = 0x5
0000000000000000000000000000000000000000;;		RTA_PRIORITY        = 0x6
0000000000000000000000000000000000000000;;		RTA_PREFSRC         = 0x7
0000000000000000000000000000000000000000;;		RTA_METRICS         = 0x8
0000000000000000000000000000000000000000;;		RTA_MULTIPATH       = 0x9
0000000000000000000000000000000000000000;;		RTA_FLOW            = 0xb
0000000000000000000000000000000000000000;;		RTA_CACHEINFO       = 0xc
0000000000000000000000000000000000000000;;		RTA_TABLE           = 0xf
0000000000000000000000000000000000000000;;		RTN_UNSPEC          = 0x0
0000000000000000000000000000000000000000;;		RTN_UNICAST         = 0x1
0000000000000000000000000000000000000000;;		RTN_LOCAL           = 0x2
0000000000000000000000000000000000000000;;		RTN_BROADCAST       = 0x3
0000000000000000000000000000000000000000;;		RTN_ANYCAST         = 0x4
0000000000000000000000000000000000000000;;		RTN_MULTICAST       = 0x5
0000000000000000000000000000000000000000;;		RTN_BLACKHOLE       = 0x6
0000000000000000000000000000000000000000;;		RTN_UNREACHABLE     = 0x7
0000000000000000000000000000000000000000;;		RTN_PROHIBIT        = 0x8
0000000000000000000000000000000000000000;;		RTN_THROW           = 0x9
0000000000000000000000000000000000000000;;		RTN_NAT             = 0xa
0000000000000000000000000000000000000000;;		RTN_XRESOLVE        = 0xb
0000000000000000000000000000000000000000;;		RTNLGRP_NONE        = 0x0
0000000000000000000000000000000000000000;;		RTNLGRP_LINK        = 0x1
0000000000000000000000000000000000000000;;		RTNLGRP_NOTIFY      = 0x2
0000000000000000000000000000000000000000;;		RTNLGRP_NEIGH       = 0x3
0000000000000000000000000000000000000000;;		RTNLGRP_TC          = 0x4
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_IFADDR = 0x5
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_MROUTE = 0x6
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_ROUTE  = 0x7
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_RULE   = 0x8
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_IFADDR = 0x9
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_MROUTE = 0xa
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_ROUTE  = 0xb
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_IFINFO = 0xc
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_PREFIX = 0x12
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_RULE   = 0x13
0000000000000000000000000000000000000000;;		RTNLGRP_ND_USEROPT  = 0x14
0000000000000000000000000000000000000000;;		SizeofNlMsghdr      = 0x10
0000000000000000000000000000000000000000;;		SizeofNlMsgerr      = 0x14
0000000000000000000000000000000000000000;;		SizeofRtGenmsg      = 0x1
0000000000000000000000000000000000000000;;		SizeofNlAttr        = 0x4
0000000000000000000000000000000000000000;;		SizeofRtAttr        = 0x4
0000000000000000000000000000000000000000;;		SizeofIfInfomsg     = 0x10
0000000000000000000000000000000000000000;;		SizeofIfAddrmsg     = 0x8
0000000000000000000000000000000000000000;;		SizeofRtMsg         = 0xc
0000000000000000000000000000000000000000;;		SizeofRtNexthop     = 0x8
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlMsghdr struct {
0000000000000000000000000000000000000000;;		Len   uint32
0000000000000000000000000000000000000000;;		Type  uint16
0000000000000000000000000000000000000000;;		Flags uint16
0000000000000000000000000000000000000000;;		Seq   uint32
0000000000000000000000000000000000000000;;		Pid   uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlMsgerr struct {
0000000000000000000000000000000000000000;;		Error int32
0000000000000000000000000000000000000000;;		Msg   NlMsghdr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtGenmsg struct {
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlAttr struct {
0000000000000000000000000000000000000000;;		Len  uint16
0000000000000000000000000000000000000000;;		Type uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtAttr struct {
0000000000000000000000000000000000000000;;		Len  uint16
0000000000000000000000000000000000000000;;		Type uint16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfInfomsg struct {
0000000000000000000000000000000000000000;;		Family     uint8
0000000000000000000000000000000000000000;;		X__ifi_pad uint8
0000000000000000000000000000000000000000;;		Type       uint16
0000000000000000000000000000000000000000;;		Index      int32
0000000000000000000000000000000000000000;;		Flags      uint32
0000000000000000000000000000000000000000;;		Change     uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfAddrmsg struct {
0000000000000000000000000000000000000000;;		Family    uint8
0000000000000000000000000000000000000000;;		Prefixlen uint8
0000000000000000000000000000000000000000;;		Flags     uint8
0000000000000000000000000000000000000000;;		Scope     uint8
0000000000000000000000000000000000000000;;		Index     uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMsg struct {
0000000000000000000000000000000000000000;;		Family   uint8
0000000000000000000000000000000000000000;;		Dst_len  uint8
0000000000000000000000000000000000000000;;		Src_len  uint8
0000000000000000000000000000000000000000;;		Tos      uint8
0000000000000000000000000000000000000000;;		Table    uint8
0000000000000000000000000000000000000000;;		Protocol uint8
0000000000000000000000000000000000000000;;		Scope    uint8
0000000000000000000000000000000000000000;;		Type     uint8
0000000000000000000000000000000000000000;;		Flags    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtNexthop struct {
0000000000000000000000000000000000000000;;		Len     uint16
0000000000000000000000000000000000000000;;		Flags   uint8
0000000000000000000000000000000000000000;;		Hops    uint8
0000000000000000000000000000000000000000;;		Ifindex int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockFilter = 0x8
0000000000000000000000000000000000000000;;		SizeofSockFprog  = 0x10
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockFilter struct {
0000000000000000000000000000000000000000;;		Code uint16
0000000000000000000000000000000000000000;;		Jt   uint8
0000000000000000000000000000000000000000;;		Jf   uint8
0000000000000000000000000000000000000000;;		K    uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockFprog struct {
0000000000000000000000000000000000000000;;		Len       uint16
0000000000000000000000000000000000000000;;		Pad_cgo_0 [6]byte
0000000000000000000000000000000000000000;;		Filter    *SockFilter
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InotifyEvent struct {
0000000000000000000000000000000000000000;;		Wd     int32
0000000000000000000000000000000000000000;;		Mask   uint32
0000000000000000000000000000000000000000;;		Cookie uint32
0000000000000000000000000000000000000000;;		Len    uint32
0000000000000000000000000000000000000000;;		Name   [0]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const SizeofInotifyEvent = 0x10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PtraceRegs struct {
0000000000000000000000000000000000000000;;		R15      uint64
0000000000000000000000000000000000000000;;		R14      uint64
0000000000000000000000000000000000000000;;		R13      uint64
0000000000000000000000000000000000000000;;		R12      uint64
0000000000000000000000000000000000000000;;		Rbp      uint64
0000000000000000000000000000000000000000;;		Rbx      uint64
0000000000000000000000000000000000000000;;		R11      uint64
0000000000000000000000000000000000000000;;		R10      uint64
0000000000000000000000000000000000000000;;		R9       uint64
0000000000000000000000000000000000000000;;		R8       uint64
0000000000000000000000000000000000000000;;		Rax      uint64
0000000000000000000000000000000000000000;;		Rcx      uint64
0000000000000000000000000000000000000000;;		Rdx      uint64
0000000000000000000000000000000000000000;;		Rsi      uint64
0000000000000000000000000000000000000000;;		Rdi      uint64
0000000000000000000000000000000000000000;;		Orig_rax uint64
0000000000000000000000000000000000000000;;		Rip      uint64
0000000000000000000000000000000000000000;;		Cs       uint64
0000000000000000000000000000000000000000;;		Eflags   uint64
0000000000000000000000000000000000000000;;		Rsp      uint64
0000000000000000000000000000000000000000;;		Ss       uint64
0000000000000000000000000000000000000000;;		Fs_base  uint64
0000000000000000000000000000000000000000;;		Gs_base  uint64
0000000000000000000000000000000000000000;;		Ds       uint64
0000000000000000000000000000000000000000;;		Es       uint64
0000000000000000000000000000000000000000;;		Fs       uint64
0000000000000000000000000000000000000000;;		Gs       uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdSet struct {
0000000000000000000000000000000000000000;;		Bits [16]int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sysinfo_t struct {
0000000000000000000000000000000000000000;;		Uptime    int64
0000000000000000000000000000000000000000;;		Loads     [3]uint64
0000000000000000000000000000000000000000;;		Totalram  uint64
0000000000000000000000000000000000000000;;		Freeram   uint64
0000000000000000000000000000000000000000;;		Sharedram uint64
0000000000000000000000000000000000000000;;		Bufferram uint64
0000000000000000000000000000000000000000;;		Totalswap uint64
0000000000000000000000000000000000000000;;		Freeswap  uint64
0000000000000000000000000000000000000000;;		Procs     uint16
0000000000000000000000000000000000000000;;		Pad       uint16
0000000000000000000000000000000000000000;;		Pad_cgo_0 [4]byte
0000000000000000000000000000000000000000;;		Totalhigh uint64
0000000000000000000000000000000000000000;;		Freehigh  uint64
0000000000000000000000000000000000000000;;		Unit      uint32
0000000000000000000000000000000000000000;;		X_f       [0]int8
0000000000000000000000000000000000000000;;		Pad_cgo_1 [4]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utsname struct {
0000000000000000000000000000000000000000;;		Sysname    [65]int8
0000000000000000000000000000000000000000;;		Nodename   [65]int8
0000000000000000000000000000000000000000;;		Release    [65]int8
0000000000000000000000000000000000000000;;		Version    [65]int8
0000000000000000000000000000000000000000;;		Machine    [65]int8
0000000000000000000000000000000000000000;;		Domainname [65]int8
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ustat_t struct {
0000000000000000000000000000000000000000;;		Tfree     int32
0000000000000000000000000000000000000000;;		Pad_cgo_0 [4]byte
0000000000000000000000000000000000000000;;		Tinode    uint64
0000000000000000000000000000000000000000;;		Fname     [6]int8
0000000000000000000000000000000000000000;;		Fpack     [6]int8
0000000000000000000000000000000000000000;;		Pad_cgo_1 [4]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EpollEvent struct {
0000000000000000000000000000000000000000;;		Events uint32
0000000000000000000000000000000000000000;;		Fd     int32
0000000000000000000000000000000000000000;;		Pad    int32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AT_FDCWD            = -0x64
0000000000000000000000000000000000000000;;		AT_REMOVEDIR        = 0x200
0000000000000000000000000000000000000000;;		AT_SYMLINK_FOLLOW   = 0x400
0000000000000000000000000000000000000000;;		AT_SYMLINK_NOFOLLOW = 0x100
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PollFd struct {
0000000000000000000000000000000000000000;;		Fd      int32
0000000000000000000000000000000000000000;;		Events  int16
0000000000000000000000000000000000000000;;		Revents int16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		POLLIN    = 0x1
0000000000000000000000000000000000000000;;		POLLPRI   = 0x2
0000000000000000000000000000000000000000;;		POLLOUT   = 0x4
0000000000000000000000000000000000000000;;		POLLRDHUP = 0x2000
0000000000000000000000000000000000000000;;		POLLERR   = 0x8
0000000000000000000000000000000000000000;;		POLLHUP   = 0x10
0000000000000000000000000000000000000000;;		POLLNVAL  = 0x20
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sigset_t struct {
0000000000000000000000000000000000000000;;		X__val [16]uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termios struct {
0000000000000000000000000000000000000000;;		Iflag  uint32
0000000000000000000000000000000000000000;;		Oflag  uint32
0000000000000000000000000000000000000000;;		Cflag  uint32
0000000000000000000000000000000000000000;;		Lflag  uint32
0000000000000000000000000000000000000000;;		Line   uint8
0000000000000000000000000000000000000000;;		Cc     [19]uint8
0000000000000000000000000000000000000000;;		Ispeed uint32
0000000000000000000000000000000000000000;;		Ospeed uint32
0000000000000000000000000000000000000000;;	}
