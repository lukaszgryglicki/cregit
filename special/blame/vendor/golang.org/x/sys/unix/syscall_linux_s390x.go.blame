0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4a9e046fe7ca56be84d64b95d753319ba2c1da84;;	
0000000000000000000000000000000000000000;;	// +build s390x,linux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	Dup2(oldfd int, newfd int) (err error)
0000000000000000000000000000000000000000;;	//sys	EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	Fadvise(fd int, offset int64, length int64, advice int) (err error) = SYS_FADVISE64
0000000000000000000000000000000000000000;;	//sys	Fchown(fd int, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstat(fd int, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstatfs(fd int, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Ftruncate(fd int, length int64) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getegid() (egid int)
0000000000000000000000000000000000000000;;	//sysnb	Geteuid() (euid int)
0000000000000000000000000000000000000000;;	//sysnb	Getgid() (gid int)
0000000000000000000000000000000000000000;;	//sysnb	Getrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getuid() (uid int)
0000000000000000000000000000000000000000;;	//sysnb	InotifyInit() (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	Lchown(path string, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Lstat(path string, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Pause() (err error)
0000000000000000000000000000000000000000;;	//sys	Pread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64
0000000000000000000000000000000000000000;;	//sys	Pwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64
0000000000000000000000000000000000000000;;	//sys	Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK
0000000000000000000000000000000000000000;;	//sys	Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)
0000000000000000000000000000000000000000;;	//sys	Setfsgid(gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Setfsuid(uid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setregid(rgid int, egid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresgid(rgid int, egid int, sgid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresuid(ruid int, euid int, suid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setreuid(ruid int, euid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)
0000000000000000000000000000000000000000;;	//sys	Stat(path string, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Statfs(path string, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	SyncFileRange(fd int, off int64, n int64, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Truncate(path string, length int64) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getgroups(n int, list *_Gid_t) (nn int, err error)
0000000000000000000000000000000000000000;;	//sysnb	setgroups(n int, list *_Gid_t) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpagesize() int { return 4096 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb	Gettimeofday(tv *Timeval) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Time(t *Time_t) (tt Time_t, err error) {
0000000000000000000000000000000000000000;;		var tv Timeval
0000000000000000000000000000000000000000;;		err = Gettimeofday(&tv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t != nil {
0000000000000000000000000000000000000000;;			*t = Time_t(tv.Sec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Time_t(tv.Sec), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	Utime(path string, buf *Utimbuf) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimespec(nsec int64) (ts Timespec) {
0000000000000000000000000000000000000000;;		ts.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		ts.Nsec = nsec % 1e9
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimeval(nsec int64) (tv Timeval) {
0000000000000000000000000000000000000000;;		nsec += 999 // round up to microsecond
0000000000000000000000000000000000000000;;		tv.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		tv.Usec = nsec % 1e9 / 1e3
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb pipe2(p *[2]_C_int, flags int) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe(p []int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, 0) // pipe2 is the same as pipe when flags are set to 0.
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe2(p []int, flags int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, flags)
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Ioperm(from int, num int, on int) (err error) {
0000000000000000000000000000000000000000;;		return ENOSYS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Iopl(level int) (err error) {
0000000000000000000000000000000000000000;;		return ENOSYS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) PC() uint64 { return r.Psw.Addr }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) SetPC(pc uint64) { r.Psw.Addr = pc }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (iov *Iovec) SetLen(length int) {
0000000000000000000000000000000000000000;;		iov.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msghdr *Msghdr) SetControllen(length int) {
0000000000000000000000000000000000000000;;		msghdr.Controllen = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmsg *Cmsghdr) SetLen(length int) {
0000000000000000000000000000000000000000;;		cmsg.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Linux on s390x uses the old mmap interface, which requires arguments to be passed in a struct.
0000000000000000000000000000000000000000;;	// mmap2 also requires arguments to be passed in a struct; it is currently not exposed in <asm/unistd.h>.
0000000000000000000000000000000000000000;;	func mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error) {
0000000000000000000000000000000000000000;;		mmap_args := [6]uintptr{addr, length, uintptr(prot), uintptr(flags), uintptr(fd), uintptr(offset)}
0000000000000000000000000000000000000000;;		r0, _, e1 := Syscall(SYS_MMAP, uintptr(unsafe.Pointer(&mmap_args[0])), 0, 0)
0000000000000000000000000000000000000000;;		use(unsafe.Pointer(&mmap_args[0]))
0000000000000000000000000000000000000000;;		xaddr = uintptr(r0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = errnoErr(e1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// On s390x Linux, all the socket calls go through an extra indirection.
0000000000000000000000000000000000000000;;	// The arguments to the underlying system call (SYS_SOCKETCALL) are the
0000000000000000000000000000000000000000;;	// number below and a pointer to an array of uintptr.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// see linux/net.h
0000000000000000000000000000000000000000;;		netSocket      = 1
0000000000000000000000000000000000000000;;		netBind        = 2
0000000000000000000000000000000000000000;;		netConnect     = 3
0000000000000000000000000000000000000000;;		netListen      = 4
0000000000000000000000000000000000000000;;		netAccept      = 5
0000000000000000000000000000000000000000;;		netGetSockName = 6
0000000000000000000000000000000000000000;;		netGetPeerName = 7
0000000000000000000000000000000000000000;;		netSocketPair  = 8
0000000000000000000000000000000000000000;;		netSend        = 9
0000000000000000000000000000000000000000;;		netRecv        = 10
0000000000000000000000000000000000000000;;		netSendTo      = 11
0000000000000000000000000000000000000000;;		netRecvFrom    = 12
0000000000000000000000000000000000000000;;		netShutdown    = 13
0000000000000000000000000000000000000000;;		netSetSockOpt  = 14
0000000000000000000000000000000000000000;;		netGetSockOpt  = 15
0000000000000000000000000000000000000000;;		netSendMsg     = 16
0000000000000000000000000000000000000000;;		netRecvMsg     = 17
0000000000000000000000000000000000000000;;		netAccept4     = 18
0000000000000000000000000000000000000000;;		netRecvMMsg    = 19
0000000000000000000000000000000000000000;;		netSendMMsg    = 20
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (int, error) {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen))}
0000000000000000000000000000000000000000;;		fd, _, err := Syscall(SYS_SOCKETCALL, netAccept, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(fd), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (int, error) {
0000000000000000000000000000000000000000;;		args := [4]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen)), uintptr(flags)}
0000000000000000000000000000000000000000;;		fd, _, err := Syscall(SYS_SOCKETCALL, netAccept4, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(fd), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getsockname(s int, rsa *RawSockaddrAny, addrlen *_Socklen) error {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen))}
0000000000000000000000000000000000000000;;		_, _, err := RawSyscall(SYS_SOCKETCALL, netGetSockName, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getpeername(s int, rsa *RawSockaddrAny, addrlen *_Socklen) error {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(rsa)), uintptr(unsafe.Pointer(addrlen))}
0000000000000000000000000000000000000000;;		_, _, err := RawSyscall(SYS_SOCKETCALL, netGetPeerName, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func socketpair(domain int, typ int, flags int, fd *[2]int32) error {
0000000000000000000000000000000000000000;;		args := [4]uintptr{uintptr(domain), uintptr(typ), uintptr(flags), uintptr(unsafe.Pointer(fd))}
0000000000000000000000000000000000000000;;		_, _, err := RawSyscall(SYS_SOCKETCALL, netSocketPair, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func bind(s int, addr unsafe.Pointer, addrlen _Socklen) error {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(addr), uintptr(addrlen)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netBind, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func connect(s int, addr unsafe.Pointer, addrlen _Socklen) error {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(addr), uintptr(addrlen)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netConnect, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func socket(domain int, typ int, proto int) (int, error) {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(domain), uintptr(typ), uintptr(proto)}
0000000000000000000000000000000000000000;;		fd, _, err := RawSyscall(SYS_SOCKETCALL, netSocket, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(fd), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) error {
0000000000000000000000000000000000000000;;		args := [5]uintptr{uintptr(s), uintptr(level), uintptr(name), uintptr(val), uintptr(unsafe.Pointer(vallen))}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netGetSockOpt, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) error {
0000000000000000000000000000000000000000;;		args := [4]uintptr{uintptr(s), uintptr(level), uintptr(name), uintptr(val)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netSetSockOpt, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recvfrom(s int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (int, error) {
0000000000000000000000000000000000000000;;		var base uintptr
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			base = uintptr(unsafe.Pointer(&p[0]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		args := [6]uintptr{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen))}
0000000000000000000000000000000000000000;;		n, _, err := Syscall(SYS_SOCKETCALL, netRecvFrom, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(n), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sendto(s int, p []byte, flags int, to unsafe.Pointer, addrlen _Socklen) error {
0000000000000000000000000000000000000000;;		var base uintptr
0000000000000000000000000000000000000000;;		if len(p) > 0 {
0000000000000000000000000000000000000000;;			base = uintptr(unsafe.Pointer(&p[0]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		args := [6]uintptr{uintptr(s), base, uintptr(len(p)), uintptr(flags), uintptr(to), uintptr(addrlen)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netSendTo, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func recvmsg(s int, msg *Msghdr, flags int) (int, error) {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags)}
0000000000000000000000000000000000000000;;		n, _, err := Syscall(SYS_SOCKETCALL, netRecvMsg, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(n), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sendmsg(s int, msg *Msghdr, flags int) (int, error) {
0000000000000000000000000000000000000000;;		args := [3]uintptr{uintptr(s), uintptr(unsafe.Pointer(msg)), uintptr(flags)}
0000000000000000000000000000000000000000;;		n, _, err := Syscall(SYS_SOCKETCALL, netSendMsg, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(n), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Listen(s int, n int) error {
0000000000000000000000000000000000000000;;		args := [2]uintptr{uintptr(s), uintptr(n)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netListen, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Shutdown(s, how int) error {
0000000000000000000000000000000000000000;;		args := [2]uintptr{uintptr(s), uintptr(how)}
0000000000000000000000000000000000000000;;		_, _, err := Syscall(SYS_SOCKETCALL, netShutdown, uintptr(unsafe.Pointer(&args)), 0)
0000000000000000000000000000000000000000;;		if err != 0 {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	poll(fds *PollFd, nfds int, timeout int) (n int, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Poll(fds []PollFd, timeout int) (n int, err error) {
0000000000000000000000000000000000000000;;		if len(fds) == 0 {
0000000000000000000000000000000000000000;;			return poll(nil, 0, timeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return poll(&fds[0], len(fds), timeout)
0000000000000000000000000000000000000000;;	}
