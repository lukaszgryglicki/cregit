0000000000000000000000000000000000000000;;	// mksysnum_dragonfly.pl
0000000000000000000000000000000000000000;;	// MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go][vendor/golang.org/x/sys/unix/zsysnum_dragonfly_amd64.go];	
0000000000000000000000000000000000000000;;	// +build amd64,dragonfly
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
0000000000000000000000000000000000000000;;		SYS_EXIT          = 1   // { void exit(int rval); }
0000000000000000000000000000000000000000;;		SYS_FORK          = 2   // { int fork(void); }
0000000000000000000000000000000000000000;;		SYS_READ          = 3   // { ssize_t read(int fd, void *buf, size_t nbyte); }
0000000000000000000000000000000000000000;;		SYS_WRITE         = 4   // { ssize_t write(int fd, const void *buf, size_t nbyte); }
0000000000000000000000000000000000000000;;		SYS_OPEN          = 5   // { int open(char *path, int flags, int mode); }
0000000000000000000000000000000000000000;;		SYS_CLOSE         = 6   // { int close(int fd); }
0000000000000000000000000000000000000000;;		SYS_WAIT4         = 7   // { int wait4(int pid, int *status, int options, \
0000000000000000000000000000000000000000;;		SYS_LINK          = 9   // { int link(char *path, char *link); }
0000000000000000000000000000000000000000;;		SYS_UNLINK        = 10  // { int unlink(char *path); }
0000000000000000000000000000000000000000;;		SYS_CHDIR         = 12  // { int chdir(char *path); }
0000000000000000000000000000000000000000;;		SYS_FCHDIR        = 13  // { int fchdir(int fd); }
0000000000000000000000000000000000000000;;		SYS_MKNOD         = 14  // { int mknod(char *path, int mode, int dev); }
0000000000000000000000000000000000000000;;		SYS_CHMOD         = 15  // { int chmod(char *path, int mode); }
0000000000000000000000000000000000000000;;		SYS_CHOWN         = 16  // { int chown(char *path, int uid, int gid); }
0000000000000000000000000000000000000000;;		SYS_OBREAK        = 17  // { int obreak(char *nsize); } break obreak_args int
0000000000000000000000000000000000000000;;		SYS_GETFSSTAT     = 18  // { int getfsstat(struct statfs *buf, long bufsize, \
0000000000000000000000000000000000000000;;		SYS_GETPID        = 20  // { pid_t getpid(void); }
0000000000000000000000000000000000000000;;		SYS_MOUNT         = 21  // { int mount(char *type, char *path, int flags, \
0000000000000000000000000000000000000000;;		SYS_UNMOUNT       = 22  // { int unmount(char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_SETUID        = 23  // { int setuid(uid_t uid); }
0000000000000000000000000000000000000000;;		SYS_GETUID        = 24  // { uid_t getuid(void); }
0000000000000000000000000000000000000000;;		SYS_GETEUID       = 25  // { uid_t geteuid(void); }
0000000000000000000000000000000000000000;;		SYS_PTRACE        = 26  // { int ptrace(int req, pid_t pid, caddr_t addr, \
0000000000000000000000000000000000000000;;		SYS_RECVMSG       = 27  // { int recvmsg(int s, struct msghdr *msg, int flags); }
0000000000000000000000000000000000000000;;		SYS_SENDMSG       = 28  // { int sendmsg(int s, caddr_t msg, int flags); }
0000000000000000000000000000000000000000;;		SYS_RECVFROM      = 29  // { int recvfrom(int s, caddr_t buf, size_t len, \
0000000000000000000000000000000000000000;;		SYS_ACCEPT        = 30  // { int accept(int s, caddr_t name, int *anamelen); }
0000000000000000000000000000000000000000;;		SYS_GETPEERNAME   = 31  // { int getpeername(int fdes, caddr_t asa, int *alen); }
0000000000000000000000000000000000000000;;		SYS_GETSOCKNAME   = 32  // { int getsockname(int fdes, caddr_t asa, int *alen); }
0000000000000000000000000000000000000000;;		SYS_ACCESS        = 33  // { int access(char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_CHFLAGS       = 34  // { int chflags(char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_FCHFLAGS      = 35  // { int fchflags(int fd, int flags); }
0000000000000000000000000000000000000000;;		SYS_SYNC          = 36  // { int sync(void); }
0000000000000000000000000000000000000000;;		SYS_KILL          = 37  // { int kill(int pid, int signum); }
0000000000000000000000000000000000000000;;		SYS_GETPPID       = 39  // { pid_t getppid(void); }
0000000000000000000000000000000000000000;;		SYS_DUP           = 41  // { int dup(u_int fd); }
0000000000000000000000000000000000000000;;		SYS_PIPE          = 42  // { int pipe(void); }
0000000000000000000000000000000000000000;;		SYS_GETEGID       = 43  // { gid_t getegid(void); }
0000000000000000000000000000000000000000;;		SYS_PROFIL        = 44  // { int profil(caddr_t samples, size_t size, \
0000000000000000000000000000000000000000;;		SYS_KTRACE        = 45  // { int ktrace(const char *fname, int ops, int facs, \
0000000000000000000000000000000000000000;;		SYS_GETGID        = 47  // { gid_t getgid(void); }
0000000000000000000000000000000000000000;;		SYS_GETLOGIN      = 49  // { int getlogin(char *namebuf, u_int namelen); }
0000000000000000000000000000000000000000;;		SYS_SETLOGIN      = 50  // { int setlogin(char *namebuf); }
0000000000000000000000000000000000000000;;		SYS_ACCT          = 51  // { int acct(char *path); }
0000000000000000000000000000000000000000;;		SYS_SIGALTSTACK   = 53  // { int sigaltstack(stack_t *ss, stack_t *oss); }
0000000000000000000000000000000000000000;;		SYS_IOCTL         = 54  // { int ioctl(int fd, u_long com, caddr_t data); }
0000000000000000000000000000000000000000;;		SYS_REBOOT        = 55  // { int reboot(int opt); }
0000000000000000000000000000000000000000;;		SYS_REVOKE        = 56  // { int revoke(char *path); }
0000000000000000000000000000000000000000;;		SYS_SYMLINK       = 57  // { int symlink(char *path, char *link); }
0000000000000000000000000000000000000000;;		SYS_READLINK      = 58  // { int readlink(char *path, char *buf, int count); }
0000000000000000000000000000000000000000;;		SYS_EXECVE        = 59  // { int execve(char *fname, char **argv, char **envv); }
0000000000000000000000000000000000000000;;		SYS_UMASK         = 60  // { int umask(int newmask); } umask umask_args int
0000000000000000000000000000000000000000;;		SYS_CHROOT        = 61  // { int chroot(char *path); }
0000000000000000000000000000000000000000;;		SYS_MSYNC         = 65  // { int msync(void *addr, size_t len, int flags); }
0000000000000000000000000000000000000000;;		SYS_VFORK         = 66  // { pid_t vfork(void); }
0000000000000000000000000000000000000000;;		SYS_SBRK          = 69  // { int sbrk(int incr); }
0000000000000000000000000000000000000000;;		SYS_SSTK          = 70  // { int sstk(int incr); }
0000000000000000000000000000000000000000;;		SYS_MUNMAP        = 73  // { int munmap(void *addr, size_t len); }
0000000000000000000000000000000000000000;;		SYS_MPROTECT      = 74  // { int mprotect(void *addr, size_t len, int prot); }
0000000000000000000000000000000000000000;;		SYS_MADVISE       = 75  // { int madvise(void *addr, size_t len, int behav); }
0000000000000000000000000000000000000000;;		SYS_MINCORE       = 78  // { int mincore(const void *addr, size_t len, \
0000000000000000000000000000000000000000;;		SYS_GETGROUPS     = 79  // { int getgroups(u_int gidsetsize, gid_t *gidset); }
0000000000000000000000000000000000000000;;		SYS_SETGROUPS     = 80  // { int setgroups(u_int gidsetsize, gid_t *gidset); }
0000000000000000000000000000000000000000;;		SYS_GETPGRP       = 81  // { int getpgrp(void); }
0000000000000000000000000000000000000000;;		SYS_SETPGID       = 82  // { int setpgid(int pid, int pgid); }
0000000000000000000000000000000000000000;;		SYS_SETITIMER     = 83  // { int setitimer(u_int which, struct itimerval *itv, \
0000000000000000000000000000000000000000;;		SYS_SWAPON        = 85  // { int swapon(char *name); }
0000000000000000000000000000000000000000;;		SYS_GETITIMER     = 86  // { int getitimer(u_int which, struct itimerval *itv); }
0000000000000000000000000000000000000000;;		SYS_GETDTABLESIZE = 89  // { int getdtablesize(void); }
0000000000000000000000000000000000000000;;		SYS_DUP2          = 90  // { int dup2(u_int from, u_int to); }
0000000000000000000000000000000000000000;;		SYS_FCNTL         = 92  // { int fcntl(int fd, int cmd, long arg); }
0000000000000000000000000000000000000000;;		SYS_SELECT        = 93  // { int select(int nd, fd_set *in, fd_set *ou, \
0000000000000000000000000000000000000000;;		SYS_FSYNC         = 95  // { int fsync(int fd); }
0000000000000000000000000000000000000000;;		SYS_SETPRIORITY   = 96  // { int setpriority(int which, int who, int prio); }
0000000000000000000000000000000000000000;;		SYS_SOCKET        = 97  // { int socket(int domain, int type, int protocol); }
0000000000000000000000000000000000000000;;		SYS_CONNECT       = 98  // { int connect(int s, caddr_t name, int namelen); }
0000000000000000000000000000000000000000;;		SYS_GETPRIORITY   = 100 // { int getpriority(int which, int who); }
0000000000000000000000000000000000000000;;		SYS_BIND          = 104 // { int bind(int s, caddr_t name, int namelen); }
0000000000000000000000000000000000000000;;		SYS_SETSOCKOPT    = 105 // { int setsockopt(int s, int level, int name, \
0000000000000000000000000000000000000000;;		SYS_LISTEN        = 106 // { int listen(int s, int backlog); }
0000000000000000000000000000000000000000;;		SYS_GETTIMEOFDAY  = 116 // { int gettimeofday(struct timeval *tp, \
0000000000000000000000000000000000000000;;		SYS_GETRUSAGE     = 117 // { int getrusage(int who, struct rusage *rusage); }
0000000000000000000000000000000000000000;;		SYS_GETSOCKOPT    = 118 // { int getsockopt(int s, int level, int name, \
0000000000000000000000000000000000000000;;		SYS_READV         = 120 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }
0000000000000000000000000000000000000000;;		SYS_WRITEV        = 121 // { int writev(int fd, struct iovec *iovp, \
0000000000000000000000000000000000000000;;		SYS_SETTIMEOFDAY  = 122 // { int settimeofday(struct timeval *tv, \
0000000000000000000000000000000000000000;;		SYS_FCHOWN        = 123 // { int fchown(int fd, int uid, int gid); }
0000000000000000000000000000000000000000;;		SYS_FCHMOD        = 124 // { int fchmod(int fd, int mode); }
0000000000000000000000000000000000000000;;		SYS_SETREUID      = 126 // { int setreuid(int ruid, int euid); }
0000000000000000000000000000000000000000;;		SYS_SETREGID      = 127 // { int setregid(int rgid, int egid); }
0000000000000000000000000000000000000000;;		SYS_RENAME        = 128 // { int rename(char *from, char *to); }
0000000000000000000000000000000000000000;;		SYS_FLOCK         = 131 // { int flock(int fd, int how); }
0000000000000000000000000000000000000000;;		SYS_MKFIFO        = 132 // { int mkfifo(char *path, int mode); }
0000000000000000000000000000000000000000;;		SYS_SENDTO        = 133 // { int sendto(int s, caddr_t buf, size_t len, \
0000000000000000000000000000000000000000;;		SYS_SHUTDOWN      = 134 // { int shutdown(int s, int how); }
0000000000000000000000000000000000000000;;		SYS_SOCKETPAIR    = 135 // { int socketpair(int domain, int type, int protocol, \
0000000000000000000000000000000000000000;;		SYS_MKDIR         = 136 // { int mkdir(char *path, int mode); }
0000000000000000000000000000000000000000;;		SYS_RMDIR         = 137 // { int rmdir(char *path); }
0000000000000000000000000000000000000000;;		SYS_UTIMES        = 138 // { int utimes(char *path, struct timeval *tptr); }
0000000000000000000000000000000000000000;;		SYS_ADJTIME       = 140 // { int adjtime(struct timeval *delta, \
0000000000000000000000000000000000000000;;		SYS_SETSID        = 147 // { int setsid(void); }
0000000000000000000000000000000000000000;;		SYS_QUOTACTL      = 148 // { int quotactl(char *path, int cmd, int uid, \
0000000000000000000000000000000000000000;;		SYS_STATFS        = 157 // { int statfs(char *path, struct statfs *buf); }
0000000000000000000000000000000000000000;;		SYS_FSTATFS       = 158 // { int fstatfs(int fd, struct statfs *buf); }
0000000000000000000000000000000000000000;;		SYS_GETFH         = 161 // { int getfh(char *fname, struct fhandle *fhp); }
0000000000000000000000000000000000000000;;		SYS_GETDOMAINNAME = 162 // { int getdomainname(char *domainname, int len); }
0000000000000000000000000000000000000000;;		SYS_SETDOMAINNAME = 163 // { int setdomainname(char *domainname, int len); }
0000000000000000000000000000000000000000;;		SYS_UNAME         = 164 // { int uname(struct utsname *name); }
0000000000000000000000000000000000000000;;		SYS_SYSARCH       = 165 // { int sysarch(int op, char *parms); }
0000000000000000000000000000000000000000;;		SYS_RTPRIO        = 166 // { int rtprio(int function, pid_t pid, \
0000000000000000000000000000000000000000;;		SYS_EXTPREAD      = 173 // { ssize_t extpread(int fd, void *buf, \
0000000000000000000000000000000000000000;;		SYS_EXTPWRITE     = 174 // { ssize_t extpwrite(int fd, const void *buf, \
0000000000000000000000000000000000000000;;		SYS_NTP_ADJTIME   = 176 // { int ntp_adjtime(struct timex *tp); }
0000000000000000000000000000000000000000;;		SYS_SETGID        = 181 // { int setgid(gid_t gid); }
0000000000000000000000000000000000000000;;		SYS_SETEGID       = 182 // { int setegid(gid_t egid); }
0000000000000000000000000000000000000000;;		SYS_SETEUID       = 183 // { int seteuid(uid_t euid); }
0000000000000000000000000000000000000000;;		SYS_PATHCONF      = 191 // { int pathconf(char *path, int name); }
0000000000000000000000000000000000000000;;		SYS_FPATHCONF     = 192 // { int fpathconf(int fd, int name); }
0000000000000000000000000000000000000000;;		SYS_GETRLIMIT     = 194 // { int getrlimit(u_int which, \
0000000000000000000000000000000000000000;;		SYS_SETRLIMIT     = 195 // { int setrlimit(u_int which, \
0000000000000000000000000000000000000000;;		SYS_MMAP          = 197 // { caddr_t mmap(caddr_t addr, size_t len, int prot, \
0000000000000000000000000000000000000000;;		// SYS_NOSYS = 198;  // { int nosys(void); } __syscall __syscall_args int
0000000000000000000000000000000000000000;;		SYS_LSEEK                  = 199 // { off_t lseek(int fd, int pad, off_t offset, \
0000000000000000000000000000000000000000;;		SYS_TRUNCATE               = 200 // { int truncate(char *path, int pad, off_t length); }
0000000000000000000000000000000000000000;;		SYS_FTRUNCATE              = 201 // { int ftruncate(int fd, int pad, off_t length); }
0000000000000000000000000000000000000000;;		SYS___SYSCTL               = 202 // { int __sysctl(int *name, u_int namelen, void *old, \
0000000000000000000000000000000000000000;;		SYS_MLOCK                  = 203 // { int mlock(const void *addr, size_t len); }
0000000000000000000000000000000000000000;;		SYS_MUNLOCK                = 204 // { int munlock(const void *addr, size_t len); }
0000000000000000000000000000000000000000;;		SYS_UNDELETE               = 205 // { int undelete(char *path); }
0000000000000000000000000000000000000000;;		SYS_FUTIMES                = 206 // { int futimes(int fd, struct timeval *tptr); }
0000000000000000000000000000000000000000;;		SYS_GETPGID                = 207 // { int getpgid(pid_t pid); }
0000000000000000000000000000000000000000;;		SYS_POLL                   = 209 // { int poll(struct pollfd *fds, u_int nfds, \
0000000000000000000000000000000000000000;;		SYS___SEMCTL               = 220 // { int __semctl(int semid, int semnum, int cmd, \
0000000000000000000000000000000000000000;;		SYS_SEMGET                 = 221 // { int semget(key_t key, int nsems, int semflg); }
0000000000000000000000000000000000000000;;		SYS_SEMOP                  = 222 // { int semop(int semid, struct sembuf *sops, \
0000000000000000000000000000000000000000;;		SYS_MSGCTL                 = 224 // { int msgctl(int msqid, int cmd, \
0000000000000000000000000000000000000000;;		SYS_MSGGET                 = 225 // { int msgget(key_t key, int msgflg); }
0000000000000000000000000000000000000000;;		SYS_MSGSND                 = 226 // { int msgsnd(int msqid, void *msgp, size_t msgsz, \
0000000000000000000000000000000000000000;;		SYS_MSGRCV                 = 227 // { int msgrcv(int msqid, void *msgp, size_t msgsz, \
0000000000000000000000000000000000000000;;		SYS_SHMAT                  = 228 // { caddr_t shmat(int shmid, const void *shmaddr, \
0000000000000000000000000000000000000000;;		SYS_SHMCTL                 = 229 // { int shmctl(int shmid, int cmd, \
0000000000000000000000000000000000000000;;		SYS_SHMDT                  = 230 // { int shmdt(const void *shmaddr); }
0000000000000000000000000000000000000000;;		SYS_SHMGET                 = 231 // { int shmget(key_t key, size_t size, int shmflg); }
0000000000000000000000000000000000000000;;		SYS_CLOCK_GETTIME          = 232 // { int clock_gettime(clockid_t clock_id, \
0000000000000000000000000000000000000000;;		SYS_CLOCK_SETTIME          = 233 // { int clock_settime(clockid_t clock_id, \
0000000000000000000000000000000000000000;;		SYS_CLOCK_GETRES           = 234 // { int clock_getres(clockid_t clock_id, \
0000000000000000000000000000000000000000;;		SYS_NANOSLEEP              = 240 // { int nanosleep(const struct timespec *rqtp, \
0000000000000000000000000000000000000000;;		SYS_MINHERIT               = 250 // { int minherit(void *addr, size_t len, int inherit); }
0000000000000000000000000000000000000000;;		SYS_RFORK                  = 251 // { int rfork(int flags); }
0000000000000000000000000000000000000000;;		SYS_OPENBSD_POLL           = 252 // { int openbsd_poll(struct pollfd *fds, u_int nfds, \
0000000000000000000000000000000000000000;;		SYS_ISSETUGID              = 253 // { int issetugid(void); }
0000000000000000000000000000000000000000;;		SYS_LCHOWN                 = 254 // { int lchown(char *path, int uid, int gid); }
0000000000000000000000000000000000000000;;		SYS_LCHMOD                 = 274 // { int lchmod(char *path, mode_t mode); }
0000000000000000000000000000000000000000;;		SYS_LUTIMES                = 276 // { int lutimes(char *path, struct timeval *tptr); }
0000000000000000000000000000000000000000;;		SYS_EXTPREADV              = 289 // { ssize_t extpreadv(int fd, struct iovec *iovp, \
0000000000000000000000000000000000000000;;		SYS_EXTPWRITEV             = 290 // { ssize_t extpwritev(int fd, struct iovec *iovp,\
0000000000000000000000000000000000000000;;		SYS_FHSTATFS               = 297 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }
0000000000000000000000000000000000000000;;		SYS_FHOPEN                 = 298 // { int fhopen(const struct fhandle *u_fhp, int flags); }
0000000000000000000000000000000000000000;;		SYS_MODNEXT                = 300 // { int modnext(int modid); }
0000000000000000000000000000000000000000;;		SYS_MODSTAT                = 301 // { int modstat(int modid, struct module_stat* stat); }
0000000000000000000000000000000000000000;;		SYS_MODFNEXT               = 302 // { int modfnext(int modid); }
0000000000000000000000000000000000000000;;		SYS_MODFIND                = 303 // { int modfind(const char *name); }
0000000000000000000000000000000000000000;;		SYS_KLDLOAD                = 304 // { int kldload(const char *file); }
0000000000000000000000000000000000000000;;		SYS_KLDUNLOAD              = 305 // { int kldunload(int fileid); }
0000000000000000000000000000000000000000;;		SYS_KLDFIND                = 306 // { int kldfind(const char *file); }
0000000000000000000000000000000000000000;;		SYS_KLDNEXT                = 307 // { int kldnext(int fileid); }
0000000000000000000000000000000000000000;;		SYS_KLDSTAT                = 308 // { int kldstat(int fileid, struct kld_file_stat* stat); }
0000000000000000000000000000000000000000;;		SYS_KLDFIRSTMOD            = 309 // { int kldfirstmod(int fileid); }
0000000000000000000000000000000000000000;;		SYS_GETSID                 = 310 // { int getsid(pid_t pid); }
0000000000000000000000000000000000000000;;		SYS_SETRESUID              = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }
0000000000000000000000000000000000000000;;		SYS_SETRESGID              = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
0000000000000000000000000000000000000000;;		SYS_AIO_RETURN             = 314 // { int aio_return(struct aiocb *aiocbp); }
0000000000000000000000000000000000000000;;		SYS_AIO_SUSPEND            = 315 // { int aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }
0000000000000000000000000000000000000000;;		SYS_AIO_CANCEL             = 316 // { int aio_cancel(int fd, struct aiocb *aiocbp); }
0000000000000000000000000000000000000000;;		SYS_AIO_ERROR              = 317 // { int aio_error(struct aiocb *aiocbp); }
0000000000000000000000000000000000000000;;		SYS_AIO_READ               = 318 // { int aio_read(struct aiocb *aiocbp); }
0000000000000000000000000000000000000000;;		SYS_AIO_WRITE              = 319 // { int aio_write(struct aiocb *aiocbp); }
0000000000000000000000000000000000000000;;		SYS_LIO_LISTIO             = 320 // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }
0000000000000000000000000000000000000000;;		SYS_YIELD                  = 321 // { int yield(void); }
0000000000000000000000000000000000000000;;		SYS_MLOCKALL               = 324 // { int mlockall(int how); }
0000000000000000000000000000000000000000;;		SYS_MUNLOCKALL             = 325 // { int munlockall(void); }
0000000000000000000000000000000000000000;;		SYS___GETCWD               = 326 // { int __getcwd(u_char *buf, u_int buflen); }
0000000000000000000000000000000000000000;;		SYS_SCHED_SETPARAM         = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }
0000000000000000000000000000000000000000;;		SYS_SCHED_GETPARAM         = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }
0000000000000000000000000000000000000000;;		SYS_SCHED_SETSCHEDULER     = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }
0000000000000000000000000000000000000000;;		SYS_SCHED_GETSCHEDULER     = 330 // { int sched_getscheduler (pid_t pid); }
0000000000000000000000000000000000000000;;		SYS_SCHED_YIELD            = 331 // { int sched_yield (void); }
0000000000000000000000000000000000000000;;		SYS_SCHED_GET_PRIORITY_MAX = 332 // { int sched_get_priority_max (int policy); }
0000000000000000000000000000000000000000;;		SYS_SCHED_GET_PRIORITY_MIN = 333 // { int sched_get_priority_min (int policy); }
0000000000000000000000000000000000000000;;		SYS_SCHED_RR_GET_INTERVAL  = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }
0000000000000000000000000000000000000000;;		SYS_UTRACE                 = 335 // { int utrace(const void *addr, size_t len); }
0000000000000000000000000000000000000000;;		SYS_KLDSYM                 = 337 // { int kldsym(int fileid, int cmd, void *data); }
0000000000000000000000000000000000000000;;		SYS_JAIL                   = 338 // { int jail(struct jail *jail); }
0000000000000000000000000000000000000000;;		SYS_SIGPROCMASK            = 340 // { int sigprocmask(int how, const sigset_t *set, \
0000000000000000000000000000000000000000;;		SYS_SIGSUSPEND             = 341 // { int sigsuspend(const sigset_t *sigmask); }
0000000000000000000000000000000000000000;;		SYS_SIGACTION              = 342 // { int sigaction(int sig, const struct sigaction *act, \
0000000000000000000000000000000000000000;;		SYS_SIGPENDING             = 343 // { int sigpending(sigset_t *set); }
0000000000000000000000000000000000000000;;		SYS_SIGRETURN              = 344 // { int sigreturn(ucontext_t *sigcntxp); }
0000000000000000000000000000000000000000;;		SYS_SIGTIMEDWAIT           = 345 // { int sigtimedwait(const sigset_t *set,\
0000000000000000000000000000000000000000;;		SYS_SIGWAITINFO            = 346 // { int sigwaitinfo(const sigset_t *set,\
0000000000000000000000000000000000000000;;		SYS___ACL_GET_FILE         = 347 // { int __acl_get_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS___ACL_SET_FILE         = 348 // { int __acl_set_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS___ACL_GET_FD           = 349 // { int __acl_get_fd(int filedes, acl_type_t type, \
0000000000000000000000000000000000000000;;		SYS___ACL_SET_FD           = 350 // { int __acl_set_fd(int filedes, acl_type_t type, \
0000000000000000000000000000000000000000;;		SYS___ACL_DELETE_FILE      = 351 // { int __acl_delete_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS___ACL_DELETE_FD        = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }
0000000000000000000000000000000000000000;;		SYS___ACL_ACLCHECK_FILE    = 353 // { int __acl_aclcheck_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS___ACL_ACLCHECK_FD      = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, \
0000000000000000000000000000000000000000;;		SYS_EXTATTRCTL             = 355 // { int extattrctl(const char *path, int cmd, \
0000000000000000000000000000000000000000;;		SYS_EXTATTR_SET_FILE       = 356 // { int extattr_set_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS_EXTATTR_GET_FILE       = 357 // { int extattr_get_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS_EXTATTR_DELETE_FILE    = 358 // { int extattr_delete_file(const char *path, \
0000000000000000000000000000000000000000;;		SYS_AIO_WAITCOMPLETE       = 359 // { int aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout); }
0000000000000000000000000000000000000000;;		SYS_GETRESUID              = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
0000000000000000000000000000000000000000;;		SYS_GETRESGID              = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
0000000000000000000000000000000000000000;;		SYS_KQUEUE                 = 362 // { int kqueue(void); }
0000000000000000000000000000000000000000;;		SYS_KEVENT                 = 363 // { int kevent(int fd, \
0000000000000000000000000000000000000000;;		SYS_SCTP_PEELOFF           = 364 // { int sctp_peeloff(int sd, caddr_t name ); }
0000000000000000000000000000000000000000;;		SYS_LCHFLAGS               = 391 // { int lchflags(char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_UUIDGEN                = 392 // { int uuidgen(struct uuid *store, int count); }
0000000000000000000000000000000000000000;;		SYS_SENDFILE               = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, \
0000000000000000000000000000000000000000;;		SYS_VARSYM_SET             = 450 // { int varsym_set(int level, const char *name, const char *data); }
0000000000000000000000000000000000000000;;		SYS_VARSYM_GET             = 451 // { int varsym_get(int mask, const char *wild, char *buf, int bufsize); }
0000000000000000000000000000000000000000;;		SYS_VARSYM_LIST            = 452 // { int varsym_list(int level, char *buf, int maxsize, int *marker); }
0000000000000000000000000000000000000000;;		SYS_EXEC_SYS_REGISTER      = 465 // { int exec_sys_register(void *entry); }
0000000000000000000000000000000000000000;;		SYS_EXEC_SYS_UNREGISTER    = 466 // { int exec_sys_unregister(int id); }
0000000000000000000000000000000000000000;;		SYS_SYS_CHECKPOINT         = 467 // { int sys_checkpoint(int type, int fd, pid_t pid, int retval); }
0000000000000000000000000000000000000000;;		SYS_MOUNTCTL               = 468 // { int mountctl(const char *path, int op, int fd, const void *ctl, int ctllen, void *buf, int buflen); }
0000000000000000000000000000000000000000;;		SYS_UMTX_SLEEP             = 469 // { int umtx_sleep(volatile const int *ptr, int value, int timeout); }
0000000000000000000000000000000000000000;;		SYS_UMTX_WAKEUP            = 470 // { int umtx_wakeup(volatile const int *ptr, int count); }
0000000000000000000000000000000000000000;;		SYS_JAIL_ATTACH            = 471 // { int jail_attach(int jid); }
0000000000000000000000000000000000000000;;		SYS_SET_TLS_AREA           = 472 // { int set_tls_area(int which, struct tls_info *info, size_t infosize); }
0000000000000000000000000000000000000000;;		SYS_GET_TLS_AREA           = 473 // { int get_tls_area(int which, struct tls_info *info, size_t infosize); }
0000000000000000000000000000000000000000;;		SYS_CLOSEFROM              = 474 // { int closefrom(int fd); }
0000000000000000000000000000000000000000;;		SYS_STAT                   = 475 // { int stat(const char *path, struct stat *ub); }
0000000000000000000000000000000000000000;;		SYS_FSTAT                  = 476 // { int fstat(int fd, struct stat *sb); }
0000000000000000000000000000000000000000;;		SYS_LSTAT                  = 477 // { int lstat(const char *path, struct stat *ub); }
0000000000000000000000000000000000000000;;		SYS_FHSTAT                 = 478 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }
0000000000000000000000000000000000000000;;		SYS_GETDIRENTRIES          = 479 // { int getdirentries(int fd, char *buf, u_int count, \
0000000000000000000000000000000000000000;;		SYS_GETDENTS               = 480 // { int getdents(int fd, char *buf, size_t count); }
0000000000000000000000000000000000000000;;		SYS_USCHED_SET             = 481 // { int usched_set(pid_t pid, int cmd, void *data, \
0000000000000000000000000000000000000000;;		SYS_EXTACCEPT              = 482 // { int extaccept(int s, int flags, caddr_t name, int *anamelen); }
0000000000000000000000000000000000000000;;		SYS_EXTCONNECT             = 483 // { int extconnect(int s, int flags, caddr_t name, int namelen); }
0000000000000000000000000000000000000000;;		SYS_MCONTROL               = 485 // { int mcontrol(void *addr, size_t len, int behav, off_t value); }
0000000000000000000000000000000000000000;;		SYS_VMSPACE_CREATE         = 486 // { int vmspace_create(void *id, int type, void *data); }
0000000000000000000000000000000000000000;;		SYS_VMSPACE_DESTROY        = 487 // { int vmspace_destroy(void *id); }
0000000000000000000000000000000000000000;;		SYS_VMSPACE_CTL            = 488 // { int vmspace_ctl(void *id, int cmd, 		\
0000000000000000000000000000000000000000;;		SYS_VMSPACE_MMAP           = 489 // { int vmspace_mmap(void *id, void *addr, size_t len, \
0000000000000000000000000000000000000000;;		SYS_VMSPACE_MUNMAP         = 490 // { int vmspace_munmap(void *id, void *addr,	\
0000000000000000000000000000000000000000;;		SYS_VMSPACE_MCONTROL       = 491 // { int vmspace_mcontrol(void *id, void *addr, 	\
0000000000000000000000000000000000000000;;		SYS_VMSPACE_PREAD          = 492 // { ssize_t vmspace_pread(void *id, void *buf, \
0000000000000000000000000000000000000000;;		SYS_VMSPACE_PWRITE         = 493 // { ssize_t vmspace_pwrite(void *id, const void *buf, \
0000000000000000000000000000000000000000;;		SYS_EXTEXIT                = 494 // { void extexit(int how, int status, void *addr); }
0000000000000000000000000000000000000000;;		SYS_LWP_CREATE             = 495 // { int lwp_create(struct lwp_params *params); }
0000000000000000000000000000000000000000;;		SYS_LWP_GETTID             = 496 // { lwpid_t lwp_gettid(void); }
0000000000000000000000000000000000000000;;		SYS_LWP_KILL               = 497 // { int lwp_kill(pid_t pid, lwpid_t tid, int signum); }
0000000000000000000000000000000000000000;;		SYS_LWP_RTPRIO             = 498 // { int lwp_rtprio(int function, pid_t pid, lwpid_t tid, struct rtprio *rtp); }
0000000000000000000000000000000000000000;;		SYS_PSELECT                = 499 // { int pselect(int nd, fd_set *in, fd_set *ou, \
0000000000000000000000000000000000000000;;		SYS_STATVFS                = 500 // { int statvfs(const char *path, struct statvfs *buf); }
0000000000000000000000000000000000000000;;		SYS_FSTATVFS               = 501 // { int fstatvfs(int fd, struct statvfs *buf); }
0000000000000000000000000000000000000000;;		SYS_FHSTATVFS              = 502 // { int fhstatvfs(const struct fhandle *u_fhp, struct statvfs *buf); }
0000000000000000000000000000000000000000;;		SYS_GETVFSSTAT             = 503 // { int getvfsstat(struct statfs *buf,          \
0000000000000000000000000000000000000000;;		SYS_OPENAT                 = 504 // { int openat(int fd, char *path, int flags, int mode); }
0000000000000000000000000000000000000000;;		SYS_FSTATAT                = 505 // { int fstatat(int fd, char *path, 	\
0000000000000000000000000000000000000000;;		SYS_FCHMODAT               = 506 // { int fchmodat(int fd, char *path, int mode, \
0000000000000000000000000000000000000000;;		SYS_FCHOWNAT               = 507 // { int fchownat(int fd, char *path, int uid, int gid, \
0000000000000000000000000000000000000000;;		SYS_UNLINKAT               = 508 // { int unlinkat(int fd, char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_FACCESSAT              = 509 // { int faccessat(int fd, char *path, int amode, \
0000000000000000000000000000000000000000;;		SYS_MQ_OPEN                = 510 // { mqd_t mq_open(const char * name, int oflag, \
0000000000000000000000000000000000000000;;		SYS_MQ_CLOSE               = 511 // { int mq_close(mqd_t mqdes); }
0000000000000000000000000000000000000000;;		SYS_MQ_UNLINK              = 512 // { int mq_unlink(const char *name); }
0000000000000000000000000000000000000000;;		SYS_MQ_GETATTR             = 513 // { int mq_getattr(mqd_t mqdes, \
0000000000000000000000000000000000000000;;		SYS_MQ_SETATTR             = 514 // { int mq_setattr(mqd_t mqdes, \
0000000000000000000000000000000000000000;;		SYS_MQ_NOTIFY              = 515 // { int mq_notify(mqd_t mqdes, \
0000000000000000000000000000000000000000;;		SYS_MQ_SEND                = 516 // { int mq_send(mqd_t mqdes, const char *msg_ptr, \
0000000000000000000000000000000000000000;;		SYS_MQ_RECEIVE             = 517 // { ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, \
0000000000000000000000000000000000000000;;		SYS_MQ_TIMEDSEND           = 518 // { int mq_timedsend(mqd_t mqdes, \
0000000000000000000000000000000000000000;;		SYS_MQ_TIMEDRECEIVE        = 519 // { ssize_t mq_timedreceive(mqd_t mqdes, \
0000000000000000000000000000000000000000;;		SYS_IOPRIO_SET             = 520 // { int ioprio_set(int which, int who, int prio); }
0000000000000000000000000000000000000000;;		SYS_IOPRIO_GET             = 521 // { int ioprio_get(int which, int who); }
0000000000000000000000000000000000000000;;		SYS_CHROOT_KERNEL          = 522 // { int chroot_kernel(char *path); }
0000000000000000000000000000000000000000;;		SYS_RENAMEAT               = 523 // { int renameat(int oldfd, char *old, int newfd, \
0000000000000000000000000000000000000000;;		SYS_MKDIRAT                = 524 // { int mkdirat(int fd, char *path, mode_t mode); }
0000000000000000000000000000000000000000;;		SYS_MKFIFOAT               = 525 // { int mkfifoat(int fd, char *path, mode_t mode); }
0000000000000000000000000000000000000000;;		SYS_MKNODAT                = 526 // { int mknodat(int fd, char *path, mode_t mode, \
0000000000000000000000000000000000000000;;		SYS_READLINKAT             = 527 // { int readlinkat(int fd, char *path, char *buf, \
0000000000000000000000000000000000000000;;		SYS_SYMLINKAT              = 528 // { int symlinkat(char *path1, int fd, char *path2); }
0000000000000000000000000000000000000000;;		SYS_SWAPOFF                = 529 // { int swapoff(char *name); }
0000000000000000000000000000000000000000;;		SYS_VQUOTACTL              = 530 // { int vquotactl(const char *path, \
0000000000000000000000000000000000000000;;		SYS_LINKAT                 = 531 // { int linkat(int fd1, char *path1, int fd2, \
0000000000000000000000000000000000000000;;		SYS_EACCESS                = 532 // { int eaccess(char *path, int flags); }
0000000000000000000000000000000000000000;;		SYS_LPATHCONF              = 533 // { int lpathconf(char *path, int name); }
0000000000000000000000000000000000000000;;		SYS_VMM_GUEST_CTL          = 534 // { int vmm_guest_ctl(int op, struct vmm_guest_options *options); }
0000000000000000000000000000000000000000;;		SYS_VMM_GUEST_SYNC_ADDR    = 535 // { int vmm_guest_sync_addr(long *dstaddr, long *srcaddr); }
0000000000000000000000000000000000000000;;	)
