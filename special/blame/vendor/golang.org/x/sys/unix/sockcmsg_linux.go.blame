0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/sockcmsg_linux.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/sockcmsg_linux.go][vendor/golang.org/x/sys/unix/sockcmsg_linux.go];	
0000000000000000000000000000000000000000;;	// Socket control messages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "unsafe"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnixCredentials encodes credentials into a socket control message
0000000000000000000000000000000000000000;;	// for sending to another process. This can be used for
0000000000000000000000000000000000000000;;	// authentication.
0000000000000000000000000000000000000000;;	func UnixCredentials(ucred *Ucred) []byte {
0000000000000000000000000000000000000000;;		b := make([]byte, CmsgSpace(SizeofUcred))
0000000000000000000000000000000000000000;;		h := (*Cmsghdr)(unsafe.Pointer(&b[0]))
0000000000000000000000000000000000000000;;		h.Level = SOL_SOCKET
0000000000000000000000000000000000000000;;		h.Type = SCM_CREDENTIALS
0000000000000000000000000000000000000000;;		h.SetLen(CmsgLen(SizeofUcred))
0000000000000000000000000000000000000000;;		*((*Ucred)(cmsgData(h))) = *ucred
0000000000000000000000000000000000000000;;		return b
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseUnixCredentials decodes a socket control message that contains
0000000000000000000000000000000000000000;;	// credentials in a Ucred structure. To receive such a message, the
0000000000000000000000000000000000000000;;	// SO_PASSCRED option must be enabled on the socket.
0000000000000000000000000000000000000000;;	func ParseUnixCredentials(m *SocketControlMessage) (*Ucred, error) {
0000000000000000000000000000000000000000;;		if m.Header.Level != SOL_SOCKET {
0000000000000000000000000000000000000000;;			return nil, EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if m.Header.Type != SCM_CREDENTIALS {
0000000000000000000000000000000000000000;;			return nil, EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))
0000000000000000000000000000000000000000;;		return &ucred, nil
0000000000000000000000000000000000000000;;	}
