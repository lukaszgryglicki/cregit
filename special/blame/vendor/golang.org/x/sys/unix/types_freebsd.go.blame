0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_freebsd.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_freebsd.go][vendor/golang.org/x/sys/unix/types_freebsd.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Input to cgo -godefs.  See also mkerrors.sh and mkall.sh
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +godefs map struct_in_addr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	// +godefs map struct_in6_addr [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	#define KERNEL
0000000000000000000000000000000000000000;;	#include <dirent.h>
0000000000000000000000000000000000000000;;	#include <fcntl.h>
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <unistd.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/mount.h>
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/ptrace.h>
0000000000000000000000000000000000000000;;	#include <sys/resource.h>
0000000000000000000000000000000000000000;;	#include <sys/select.h>
0000000000000000000000000000000000000000;;	#include <sys/signal.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/stat.h>
0000000000000000000000000000000000000000;;	#include <sys/time.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/un.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_dl.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/icmp6.h>
0000000000000000000000000000000000000000;;	#include <netinet/tcp.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	enum {
0000000000000000000000000000000000000000;;		sizeofPtr = sizeof(void*),
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	union sockaddr_all {
0000000000000000000000000000000000000000;;		struct sockaddr s1;	// this one gets used for fields
0000000000000000000000000000000000000000;;		struct sockaddr_in s2;	// these pad it out
0000000000000000000000000000000000000000;;		struct sockaddr_in6 s3;
0000000000000000000000000000000000000000;;		struct sockaddr_un s4;
0000000000000000000000000000000000000000;;		struct sockaddr_dl s5;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	struct sockaddr_any {
0000000000000000000000000000000000000000;;		struct sockaddr addr;
0000000000000000000000000000000000000000;;		char pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This structure is a duplicate of stat on FreeBSD 8-STABLE.
0000000000000000000000000000000000000000;;	// See /usr/include/sys/stat.h.
0000000000000000000000000000000000000000;;	struct stat8 {
0000000000000000000000000000000000000000;;	#undef st_atimespec	st_atim
0000000000000000000000000000000000000000;;	#undef st_mtimespec	st_mtim
0000000000000000000000000000000000000000;;	#undef st_ctimespec	st_ctim
0000000000000000000000000000000000000000;;	#undef st_birthtimespec	st_birthtim
0000000000000000000000000000000000000000;;		__dev_t   st_dev;
0000000000000000000000000000000000000000;;		ino_t     st_ino;
0000000000000000000000000000000000000000;;		mode_t    st_mode;
0000000000000000000000000000000000000000;;		nlink_t   st_nlink;
0000000000000000000000000000000000000000;;		uid_t     st_uid;
0000000000000000000000000000000000000000;;		gid_t     st_gid;
0000000000000000000000000000000000000000;;		__dev_t   st_rdev;
0000000000000000000000000000000000000000;;	#if __BSD_VISIBLE
0000000000000000000000000000000000000000;;		struct  timespec st_atimespec;
0000000000000000000000000000000000000000;;		struct  timespec st_mtimespec;
0000000000000000000000000000000000000000;;		struct  timespec st_ctimespec;
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;		time_t    st_atime;
0000000000000000000000000000000000000000;;		long      __st_atimensec;
0000000000000000000000000000000000000000;;		time_t    st_mtime;
0000000000000000000000000000000000000000;;		long      __st_mtimensec;
0000000000000000000000000000000000000000;;		time_t    st_ctime;
0000000000000000000000000000000000000000;;		long      __st_ctimensec;
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;		off_t     st_size;
0000000000000000000000000000000000000000;;		blkcnt_t st_blocks;
0000000000000000000000000000000000000000;;		blksize_t st_blksize;
0000000000000000000000000000000000000000;;		fflags_t  st_flags;
0000000000000000000000000000000000000000;;		__uint32_t st_gen;
0000000000000000000000000000000000000000;;		__int32_t st_lspare;
0000000000000000000000000000000000000000;;	#if __BSD_VISIBLE
0000000000000000000000000000000000000000;;		struct timespec st_birthtimespec;
0000000000000000000000000000000000000000;;		unsigned int :(8 / 2) * (16 - (int)sizeof(struct timespec));
0000000000000000000000000000000000000000;;		unsigned int :(8 / 2) * (16 - (int)sizeof(struct timespec));
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;		time_t    st_birthtime;
0000000000000000000000000000000000000000;;		long      st_birthtimensec;
0000000000000000000000000000000000000000;;		unsigned int :(8 / 2) * (16 - (int)sizeof(struct __timespec));
0000000000000000000000000000000000000000;;		unsigned int :(8 / 2) * (16 - (int)sizeof(struct __timespec));
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This structure is a duplicate of if_data on FreeBSD 8-STABLE.
0000000000000000000000000000000000000000;;	// See /usr/include/net/if.h.
0000000000000000000000000000000000000000;;	struct if_data8 {
0000000000000000000000000000000000000000;;		u_char  ifi_type;
0000000000000000000000000000000000000000;;		u_char  ifi_physical;
0000000000000000000000000000000000000000;;		u_char  ifi_addrlen;
0000000000000000000000000000000000000000;;		u_char  ifi_hdrlen;
0000000000000000000000000000000000000000;;		u_char  ifi_link_state;
0000000000000000000000000000000000000000;;		u_char  ifi_spare_char1;
0000000000000000000000000000000000000000;;		u_char  ifi_spare_char2;
0000000000000000000000000000000000000000;;		u_char  ifi_datalen;
0000000000000000000000000000000000000000;;		u_long  ifi_mtu;
0000000000000000000000000000000000000000;;		u_long  ifi_metric;
0000000000000000000000000000000000000000;;		u_long  ifi_baudrate;
0000000000000000000000000000000000000000;;		u_long  ifi_ipackets;
0000000000000000000000000000000000000000;;		u_long  ifi_ierrors;
0000000000000000000000000000000000000000;;		u_long  ifi_opackets;
0000000000000000000000000000000000000000;;		u_long  ifi_oerrors;
0000000000000000000000000000000000000000;;		u_long  ifi_collisions;
0000000000000000000000000000000000000000;;		u_long  ifi_ibytes;
0000000000000000000000000000000000000000;;		u_long  ifi_obytes;
0000000000000000000000000000000000000000;;		u_long  ifi_imcasts;
0000000000000000000000000000000000000000;;		u_long  ifi_omcasts;
0000000000000000000000000000000000000000;;		u_long  ifi_iqdrops;
0000000000000000000000000000000000000000;;		u_long  ifi_noproto;
0000000000000000000000000000000000000000;;		u_long  ifi_hwassist;
0000000000000000000000000000000000000000;;		time_t  ifi_epoch;
0000000000000000000000000000000000000000;;		struct  timeval ifi_lastchange;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This structure is a duplicate of if_msghdr on FreeBSD 8-STABLE.
0000000000000000000000000000000000000000;;	// See /usr/include/net/if.h.
0000000000000000000000000000000000000000;;	struct if_msghdr8 {
0000000000000000000000000000000000000000;;		u_short ifm_msglen;
0000000000000000000000000000000000000000;;		u_char  ifm_version;
0000000000000000000000000000000000000000;;		u_char  ifm_type;
0000000000000000000000000000000000000000;;		int     ifm_addrs;
0000000000000000000000000000000000000000;;		int     ifm_flags;
0000000000000000000000000000000000000000;;		u_short ifm_index;
0000000000000000000000000000000000000000;;		struct  if_data8 ifm_data;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Machine characteristics; for internal use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofPtr      = C.sizeofPtr
0000000000000000000000000000000000000000;;		sizeofShort    = C.sizeof_short
0000000000000000000000000000000000000000;;		sizeofInt      = C.sizeof_int
0000000000000000000000000000000000000000;;		sizeofLong     = C.sizeof_long
0000000000000000000000000000000000000000;;		sizeofLongLong = C.sizeof_longlong
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Basic types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		_C_short     C.short
0000000000000000000000000000000000000000;;		_C_int       C.int
0000000000000000000000000000000000000000;;		_C_long      C.long
0000000000000000000000000000000000000000;;		_C_long_long C.longlong
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timespec C.struct_timespec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval C.struct_timeval
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Processes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rusage C.struct_rusage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rlimit C.struct_rlimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Gid_t C.gid_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Files
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ( // Directory mode bits
0000000000000000000000000000000000000000;;		S_IFMT   = C.S_IFMT
0000000000000000000000000000000000000000;;		S_IFIFO  = C.S_IFIFO
0000000000000000000000000000000000000000;;		S_IFCHR  = C.S_IFCHR
0000000000000000000000000000000000000000;;		S_IFDIR  = C.S_IFDIR
0000000000000000000000000000000000000000;;		S_IFBLK  = C.S_IFBLK
0000000000000000000000000000000000000000;;		S_IFREG  = C.S_IFREG
0000000000000000000000000000000000000000;;		S_IFLNK  = C.S_IFLNK
0000000000000000000000000000000000000000;;		S_IFSOCK = C.S_IFSOCK
0000000000000000000000000000000000000000;;		S_ISUID  = C.S_ISUID
0000000000000000000000000000000000000000;;		S_ISGID  = C.S_ISGID
0000000000000000000000000000000000000000;;		S_ISVTX  = C.S_ISVTX
0000000000000000000000000000000000000000;;		S_IRUSR  = C.S_IRUSR
0000000000000000000000000000000000000000;;		S_IWUSR  = C.S_IWUSR
0000000000000000000000000000000000000000;;		S_IXUSR  = C.S_IXUSR
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stat_t C.struct_stat8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Statfs_t C.struct_statfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Flock_t C.struct_flock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dirent C.struct_dirent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Fsid C.struct_fsid
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Advice to Fadvise
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FADV_NORMAL     = C.POSIX_FADV_NORMAL
0000000000000000000000000000000000000000;;		FADV_RANDOM     = C.POSIX_FADV_RANDOM
0000000000000000000000000000000000000000;;		FADV_SEQUENTIAL = C.POSIX_FADV_SEQUENTIAL
0000000000000000000000000000000000000000;;		FADV_WILLNEED   = C.POSIX_FADV_WILLNEED
0000000000000000000000000000000000000000;;		FADV_DONTNEED   = C.POSIX_FADV_DONTNEED
0000000000000000000000000000000000000000;;		FADV_NOREUSE    = C.POSIX_FADV_NOREUSE
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sockets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet4 C.struct_sockaddr_in
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet6 C.struct_sockaddr_in6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrUnix C.struct_sockaddr_un
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrDatalink C.struct_sockaddr_dl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddr C.struct_sockaddr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrAny C.struct_sockaddr_any
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Socklen C.socklen_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Linger C.struct_linger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iovec C.struct_iovec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreq C.struct_ip_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreqn C.struct_ip_mreqn
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6Mreq C.struct_ipv6_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Msghdr C.struct_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmsghdr C.struct_cmsghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet6Pktinfo C.struct_in6_pktinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6MTUInfo C.struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ICMPv6Filter C.struct_icmp6_filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockaddrInet4    = C.sizeof_struct_sockaddr_in
0000000000000000000000000000000000000000;;		SizeofSockaddrInet6    = C.sizeof_struct_sockaddr_in6
0000000000000000000000000000000000000000;;		SizeofSockaddrAny      = C.sizeof_struct_sockaddr_any
0000000000000000000000000000000000000000;;		SizeofSockaddrUnix     = C.sizeof_struct_sockaddr_un
0000000000000000000000000000000000000000;;		SizeofSockaddrDatalink = C.sizeof_struct_sockaddr_dl
0000000000000000000000000000000000000000;;		SizeofLinger           = C.sizeof_struct_linger
0000000000000000000000000000000000000000;;		SizeofIPMreq           = C.sizeof_struct_ip_mreq
0000000000000000000000000000000000000000;;		SizeofIPMreqn          = C.sizeof_struct_ip_mreqn
0000000000000000000000000000000000000000;;		SizeofIPv6Mreq         = C.sizeof_struct_ipv6_mreq
0000000000000000000000000000000000000000;;		SizeofMsghdr           = C.sizeof_struct_msghdr
0000000000000000000000000000000000000000;;		SizeofCmsghdr          = C.sizeof_struct_cmsghdr
0000000000000000000000000000000000000000;;		SizeofInet6Pktinfo     = C.sizeof_struct_in6_pktinfo
0000000000000000000000000000000000000000;;		SizeofIPv6MTUInfo      = C.sizeof_struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;		SizeofICMPv6Filter     = C.sizeof_struct_icmp6_filter
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ptrace requests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PTRACE_TRACEME = C.PT_TRACE_ME
0000000000000000000000000000000000000000;;		PTRACE_CONT    = C.PT_CONTINUE
0000000000000000000000000000000000000000;;		PTRACE_KILL    = C.PT_KILL
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Events (kqueue, kevent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Kevent_t C.struct_kevent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Select
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdSet C.fd_set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routing and interface messages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofIfMsghdr         = C.sizeof_struct_if_msghdr
0000000000000000000000000000000000000000;;		SizeofIfMsghdr         = C.sizeof_struct_if_msghdr8
0000000000000000000000000000000000000000;;		sizeofIfData           = C.sizeof_struct_if_data
0000000000000000000000000000000000000000;;		SizeofIfData           = C.sizeof_struct_if_data8
0000000000000000000000000000000000000000;;		SizeofIfaMsghdr        = C.sizeof_struct_ifa_msghdr
0000000000000000000000000000000000000000;;		SizeofIfmaMsghdr       = C.sizeof_struct_ifma_msghdr
0000000000000000000000000000000000000000;;		SizeofIfAnnounceMsghdr = C.sizeof_struct_if_announcemsghdr
0000000000000000000000000000000000000000;;		SizeofRtMsghdr         = C.sizeof_struct_rt_msghdr
0000000000000000000000000000000000000000;;		SizeofRtMetrics        = C.sizeof_struct_rt_metrics
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ifMsghdr C.struct_if_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfMsghdr C.struct_if_msghdr8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ifData C.struct_if_data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfData C.struct_if_data8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfaMsghdr C.struct_ifa_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfmaMsghdr C.struct_ifma_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfAnnounceMsghdr C.struct_if_announcemsghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMsghdr C.struct_rt_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMetrics C.struct_rt_metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Berkeley packet filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofBpfVersion    = C.sizeof_struct_bpf_version
0000000000000000000000000000000000000000;;		SizeofBpfStat       = C.sizeof_struct_bpf_stat
0000000000000000000000000000000000000000;;		SizeofBpfZbuf       = C.sizeof_struct_bpf_zbuf
0000000000000000000000000000000000000000;;		SizeofBpfProgram    = C.sizeof_struct_bpf_program
0000000000000000000000000000000000000000;;		SizeofBpfInsn       = C.sizeof_struct_bpf_insn
0000000000000000000000000000000000000000;;		SizeofBpfHdr        = C.sizeof_struct_bpf_hdr
0000000000000000000000000000000000000000;;		SizeofBpfZbufHeader = C.sizeof_struct_bpf_zbuf_header
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfVersion C.struct_bpf_version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfStat C.struct_bpf_stat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfZbuf C.struct_bpf_zbuf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfProgram C.struct_bpf_program
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfInsn C.struct_bpf_insn
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfHdr C.struct_bpf_hdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfZbufHeader C.struct_bpf_zbuf_header
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Terminal handling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termios C.struct_termios
