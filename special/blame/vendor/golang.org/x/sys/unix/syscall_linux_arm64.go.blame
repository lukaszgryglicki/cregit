0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_linux_arm64.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_linux_arm64.go][vendor/golang.org/x/sys/unix/syscall_linux_arm64.go];	
0000000000000000000000000000000000000000;;	// +build arm64,linux
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const _SYS_dup = SYS_DUP3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error) = SYS_EPOLL_PWAIT
0000000000000000000000000000000000000000;;	//sys	Fchown(fd int, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstat(fd int, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstatat(fd int, path string, stat *Stat_t, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstatfs(fd int, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Ftruncate(fd int, length int64) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getegid() (egid int)
0000000000000000000000000000000000000000;;	//sysnb	Geteuid() (euid int)
0000000000000000000000000000000000000000;;	//sysnb	Getgid() (gid int)
0000000000000000000000000000000000000000;;	//sysnb	Getrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getuid() (uid int)
0000000000000000000000000000000000000000;;	//sys	Listen(s int, n int) (err error)
0000000000000000000000000000000000000000;;	//sys	Pread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64
0000000000000000000000000000000000000000;;	//sys	Pwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64
0000000000000000000000000000000000000000;;	//sys	Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK
0000000000000000000000000000000000000000;;	//sys	Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS_PSELECT6
0000000000000000000000000000000000000000;;	//sys	sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)
0000000000000000000000000000000000000000;;	//sys	Setfsgid(gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Setfsuid(uid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setregid(rgid int, egid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresgid(rgid int, egid int, sgid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresuid(ruid int, euid int, suid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setreuid(ruid int, euid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Shutdown(fd int, how int) (err error)
0000000000000000000000000000000000000000;;	//sys	Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Stat(path string, stat *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		return Fstatat(AT_FDCWD, path, stat, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Lchown(path string, uid int, gid int) (err error) {
0000000000000000000000000000000000000000;;		return Fchownat(AT_FDCWD, path, uid, gid, AT_SYMLINK_NOFOLLOW)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Lstat(path string, stat *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		return Fstatat(AT_FDCWD, path, stat, AT_SYMLINK_NOFOLLOW)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	Statfs(path string, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	SyncFileRange(fd int, off int64, n int64, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Truncate(path string, length int64) (err error)
0000000000000000000000000000000000000000;;	//sys	accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getgroups(n int, list *_Gid_t) (nn int, err error)
0000000000000000000000000000000000000000;;	//sysnb	setgroups(n int, list *_Gid_t) (err error)
0000000000000000000000000000000000000000;;	//sys	getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)
0000000000000000000000000000000000000000;;	//sysnb	socket(domain int, typ int, proto int) (fd int, err error)
0000000000000000000000000000000000000000;;	//sysnb	socketpair(domain int, typ int, proto int, fd *[2]int32) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	recvmsg(s int, msg *Msghdr, flags int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	sendmsg(s int, msg *Msghdr, flags int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpagesize() int { return 65536 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb	Gettimeofday(tv *Timeval) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimespec(nsec int64) (ts Timespec) {
0000000000000000000000000000000000000000;;		ts.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		ts.Nsec = nsec % 1e9
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimeval(nsec int64) (tv Timeval) {
0000000000000000000000000000000000000000;;		nsec += 999 // round up to microsecond
0000000000000000000000000000000000000000;;		tv.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		tv.Usec = nsec % 1e9 / 1e3
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Time(t *Time_t) (Time_t, error) {
0000000000000000000000000000000000000000;;		var tv Timeval
0000000000000000000000000000000000000000;;		err := Gettimeofday(&tv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t != nil {
0000000000000000000000000000000000000000;;			*t = Time_t(tv.Sec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Time_t(tv.Sec), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Utime(path string, buf *Utimbuf) error {
0000000000000000000000000000000000000000;;		tv := []Timeval{
0000000000000000000000000000000000000000;;			{Sec: buf.Actime},
0000000000000000000000000000000000000000;;			{Sec: buf.Modtime},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Utimes(path, tv)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe(p []int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, 0)
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb pipe2(p *[2]_C_int, flags int) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe2(p []int, flags int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, flags)
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) PC() uint64 { return r.Pc }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) SetPC(pc uint64) { r.Pc = pc }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (iov *Iovec) SetLen(length int) {
0000000000000000000000000000000000000000;;		iov.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msghdr *Msghdr) SetControllen(length int) {
0000000000000000000000000000000000000000;;		msghdr.Controllen = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmsg *Cmsghdr) SetLen(length int) {
0000000000000000000000000000000000000000;;		cmsg.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func InotifyInit() (fd int, err error) {
0000000000000000000000000000000000000000;;		return InotifyInit1(0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Dup2(oldfd int, newfd int) (err error) {
0000000000000000000000000000000000000000;;		return Dup3(oldfd, newfd, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pause() (err error) {
0000000000000000000000000000000000000000;;		_, _, e1 := Syscall6(SYS_PPOLL, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if e1 != 0 {
0000000000000000000000000000000000000000;;			err = errnoErr(e1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(dfc): constants that should be in zsysnum_linux_arm64.go, remove
0000000000000000000000000000000000000000;;	// these when the deprecated syscalls that the syscall package relies on
0000000000000000000000000000000000000000;;	// are removed.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SYS_GETPGRP      = 1060
0000000000000000000000000000000000000000;;		SYS_UTIMES       = 1037
0000000000000000000000000000000000000000;;		SYS_FUTIMESAT    = 1066
0000000000000000000000000000000000000000;;		SYS_PAUSE        = 1061
0000000000000000000000000000000000000000;;		SYS_USTAT        = 1070
0000000000000000000000000000000000000000;;		SYS_UTIME        = 1063
0000000000000000000000000000000000000000;;		SYS_LCHOWN       = 1032
0000000000000000000000000000000000000000;;		SYS_TIME         = 1062
0000000000000000000000000000000000000000;;		SYS_EPOLL_CREATE = 1042
0000000000000000000000000000000000000000;;		SYS_EPOLL_WAIT   = 1069
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Poll(fds []PollFd, timeout int) (n int, err error) {
0000000000000000000000000000000000000000;;		var ts *Timespec
0000000000000000000000000000000000000000;;		if timeout >= 0 {
0000000000000000000000000000000000000000;;			ts = new(Timespec)
0000000000000000000000000000000000000000;;			*ts = NsecToTimespec(int64(timeout) * 1e6)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(fds) == 0 {
0000000000000000000000000000000000000000;;			return ppoll(nil, 0, ts, nil)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ppoll(&fds[0], len(fds), ts, nil)
0000000000000000000000000000000000000000;;	}
