0000000000000000000000000000000000000000;;	// +build linux darwin freebsd openbsd netbsd dragonfly
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/flock.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/flock.go][vendor/golang.org/x/sys/unix/flock.go];	
0000000000000000000000000000000000000000;;	// Copyright 2014 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +build darwin dragonfly freebsd linux netbsd openbsd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "unsafe"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fcntl64Syscall is usually SYS_FCNTL, but is overridden on 32-bit Linux
0000000000000000000000000000000000000000;;	// systems by flock_linux_32bit.go to be SYS_FCNTL64.
0000000000000000000000000000000000000000;;	var fcntl64Syscall uintptr = SYS_FCNTL
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FcntlFlock performs a fcntl syscall for the F_GETLK, F_SETLK or F_SETLKW command.
0000000000000000000000000000000000000000;;	func FcntlFlock(fd uintptr, cmd int, lk *Flock_t) error {
0000000000000000000000000000000000000000;;		_, _, errno := Syscall(fcntl64Syscall, fd, uintptr(cmd), uintptr(unsafe.Pointer(lk)))
0000000000000000000000000000000000000000;;		if errno == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return errno
0000000000000000000000000000000000000000;;	}
