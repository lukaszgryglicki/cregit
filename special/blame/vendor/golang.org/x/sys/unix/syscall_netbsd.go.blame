0000000000000000000000000000000000000000;;	// Copyright 2009,2010 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_netbsd.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/syscall_netbsd.go][vendor/golang.org/x/sys/unix/syscall_netbsd.go];	
0000000000000000000000000000000000000000;;	// NetBSD system calls.
0000000000000000000000000000000000000000;;	// This file is compiled as ordinary Go code,
0000000000000000000000000000000000000000;;	// but it is also input to mksyscall,
0000000000000000000000000000000000000000;;	// which parses the //sys lines and generates system call stubs.
0000000000000000000000000000000000000000;;	// Note that sometimes we use a lowercase //sys name and wrap
0000000000000000000000000000000000000000;;	// it in our own nicer implementation, either here or in
0000000000000000000000000000000000000000;;	// syscall_bsd.go or syscall_unix.go.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockaddrDatalink struct {
0000000000000000000000000000000000000000;;		Len    uint8
0000000000000000000000000000000000000000;;		Family uint8
0000000000000000000000000000000000000000;;		Index  uint16
0000000000000000000000000000000000000000;;		Type   uint8
0000000000000000000000000000000000000000;;		Nlen   uint8
0000000000000000000000000000000000000000;;		Alen   uint8
0000000000000000000000000000000000000000;;		Slen   uint8
0000000000000000000000000000000000000000;;		Data   [12]int8
0000000000000000000000000000000000000000;;		raw    RawSockaddrDatalink
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Syscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func sysctlNodes(mib []_C_int) (nodes []Sysctlnode, err error) {
0000000000000000000000000000000000000000;;		var olen uintptr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Get a list of all sysctl nodes below the given MIB by performing
0000000000000000000000000000000000000000;;		// a sysctl for the given MIB with CTL_QUERY appended.
0000000000000000000000000000000000000000;;		mib = append(mib, CTL_QUERY)
0000000000000000000000000000000000000000;;		qnode := Sysctlnode{Flags: SYSCTL_VERS_1}
0000000000000000000000000000000000000000;;		qp := (*byte)(unsafe.Pointer(&qnode))
0000000000000000000000000000000000000000;;		sz := unsafe.Sizeof(qnode)
0000000000000000000000000000000000000000;;		if err = sysctl(mib, nil, &olen, qp, sz); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Now that we know the size, get the actual nodes.
0000000000000000000000000000000000000000;;		nodes = make([]Sysctlnode, olen/sz)
0000000000000000000000000000000000000000;;		np := (*byte)(unsafe.Pointer(&nodes[0]))
0000000000000000000000000000000000000000;;		if err = sysctl(mib, np, &olen, qp, sz); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nodes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func nametomib(name string) (mib []_C_int, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Split name into components.
0000000000000000000000000000000000000000;;		var parts []string
0000000000000000000000000000000000000000;;		last := 0
0000000000000000000000000000000000000000;;		for i := 0; i < len(name); i++ {
0000000000000000000000000000000000000000;;			if name[i] == '.' {
0000000000000000000000000000000000000000;;				parts = append(parts, name[last:i])
0000000000000000000000000000000000000000;;				last = i + 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parts = append(parts, name[last:])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Discover the nodes and construct the MIB OID.
0000000000000000000000000000000000000000;;		for partno, part := range parts {
0000000000000000000000000000000000000000;;			nodes, err := sysctlNodes(mib)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, node := range nodes {
0000000000000000000000000000000000000000;;				n := make([]byte, 0)
0000000000000000000000000000000000000000;;				for i := range node.Name {
0000000000000000000000000000000000000000;;					if node.Name[i] != 0 {
0000000000000000000000000000000000000000;;						n = append(n, byte(node.Name[i]))
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if string(n) == part {
0000000000000000000000000000000000000000;;					mib = append(mib, _C_int(node.Num))
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(mib) != partno+1 {
0000000000000000000000000000000000000000;;				return nil, EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return mib, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseDirent parses up to max directory entries in buf,
0000000000000000000000000000000000000000;;	// appending the names to names. It returns the number
0000000000000000000000000000000000000000;;	// bytes consumed from buf, the number of entries added
0000000000000000000000000000000000000000;;	// to names, and the new names slice.
0000000000000000000000000000000000000000;;	func ParseDirent(buf []byte, max int, names []string) (consumed int, count int, newnames []string) {
0000000000000000000000000000000000000000;;		origlen := len(buf)
0000000000000000000000000000000000000000;;		for max != 0 && len(buf) > 0 {
0000000000000000000000000000000000000000;;			dirent := (*Dirent)(unsafe.Pointer(&buf[0]))
0000000000000000000000000000000000000000;;			if dirent.Reclen == 0 {
0000000000000000000000000000000000000000;;				buf = nil
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf = buf[dirent.Reclen:]
0000000000000000000000000000000000000000;;			if dirent.Fileno == 0 { // File absent in directory.
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			bytes := (*[10000]byte)(unsafe.Pointer(&dirent.Name[0]))
0000000000000000000000000000000000000000;;			var name = string(bytes[0:dirent.Namlen])
0000000000000000000000000000000000000000;;			if name == "." || name == ".." { // Useless names
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			max--
0000000000000000000000000000000000000000;;			count++
0000000000000000000000000000000000000000;;			names = append(names, name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return origlen - len(buf), count, names
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb pipe() (fd1 int, fd2 int, err error)
0000000000000000000000000000000000000000;;	func Pipe(p []int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p[0], p[1], err = pipe()
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys getdents(fd int, buf []byte) (n int, err error)
0000000000000000000000000000000000000000;;	func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {
0000000000000000000000000000000000000000;;		return getdents(fd, buf)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO
0000000000000000000000000000000000000000;;	func sendfile(outfd int, infd int, offset *int64, count int) (written int, err error) {
0000000000000000000000000000000000000000;;		return -1, ENOSYS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Exposed directly
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	//sys	Access(path string, mode uint32) (err error)
0000000000000000000000000000000000000000;;	//sys	Adjtime(delta *Timeval, olddelta *Timeval) (err error)
0000000000000000000000000000000000000000;;	//sys	Chdir(path string) (err error)
0000000000000000000000000000000000000000;;	//sys	Chflags(path string, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Chmod(path string, mode uint32) (err error)
0000000000000000000000000000000000000000;;	//sys	Chown(path string, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Chroot(path string) (err error)
0000000000000000000000000000000000000000;;	//sys	Close(fd int) (err error)
0000000000000000000000000000000000000000;;	//sys	Dup(fd int) (nfd int, err error)
0000000000000000000000000000000000000000;;	//sys	Dup2(from int, to int) (err error)
0000000000000000000000000000000000000000;;	//sys	Exit(code int)
0000000000000000000000000000000000000000;;	//sys	Fchdir(fd int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fchflags(fd int, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fchmod(fd int, mode uint32) (err error)
0000000000000000000000000000000000000000;;	//sys	Fchown(fd int, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Flock(fd int, how int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fpathconf(fd int, name int) (val int, err error)
0000000000000000000000000000000000000000;;	//sys	Fstat(fd int, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Fsync(fd int) (err error)
0000000000000000000000000000000000000000;;	//sys	Ftruncate(fd int, length int64) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getegid() (egid int)
0000000000000000000000000000000000000000;;	//sysnb	Geteuid() (uid int)
0000000000000000000000000000000000000000;;	//sysnb	Getgid() (gid int)
0000000000000000000000000000000000000000;;	//sysnb	Getpgid(pid int) (pgid int, err error)
0000000000000000000000000000000000000000;;	//sysnb	Getpgrp() (pgrp int)
0000000000000000000000000000000000000000;;	//sysnb	Getpid() (pid int)
0000000000000000000000000000000000000000;;	//sysnb	Getppid() (ppid int)
0000000000000000000000000000000000000000;;	//sys	Getpriority(which int, who int) (prio int, err error)
0000000000000000000000000000000000000000;;	//sysnb	Getrlimit(which int, lim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getrusage(who int, rusage *Rusage) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getsid(pid int) (sid int, err error)
0000000000000000000000000000000000000000;;	//sysnb	Gettimeofday(tv *Timeval) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getuid() (uid int)
0000000000000000000000000000000000000000;;	//sys	Issetugid() (tainted bool)
0000000000000000000000000000000000000000;;	//sys	Kill(pid int, signum syscall.Signal) (err error)
0000000000000000000000000000000000000000;;	//sys	Kqueue() (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	Lchown(path string, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Link(path string, link string) (err error)
0000000000000000000000000000000000000000;;	//sys	Listen(s int, backlog int) (err error)
0000000000000000000000000000000000000000;;	//sys	Lstat(path string, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Mkdir(path string, mode uint32) (err error)
0000000000000000000000000000000000000000;;	//sys	Mkfifo(path string, mode uint32) (err error)
0000000000000000000000000000000000000000;;	//sys	Mknod(path string, mode uint32, dev int) (err error)
0000000000000000000000000000000000000000;;	//sys	Mlock(b []byte) (err error)
0000000000000000000000000000000000000000;;	//sys	Mlockall(flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Mprotect(b []byte, prot int) (err error)
0000000000000000000000000000000000000000;;	//sys	Munlock(b []byte) (err error)
0000000000000000000000000000000000000000;;	//sys	Munlockall() (err error)
0000000000000000000000000000000000000000;;	//sys	Nanosleep(time *Timespec, leftover *Timespec) (err error)
0000000000000000000000000000000000000000;;	//sys	Open(path string, mode int, perm uint32) (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	Pathconf(path string, name int) (val int, err error)
0000000000000000000000000000000000000000;;	//sys	Pread(fd int, p []byte, offset int64) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	Pwrite(fd int, p []byte, offset int64) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	read(fd int, p []byte) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	Readlink(path string, buf []byte) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	Rename(from string, to string) (err error)
0000000000000000000000000000000000000000;;	//sys	Revoke(path string) (err error)
0000000000000000000000000000000000000000;;	//sys	Rmdir(path string) (err error)
0000000000000000000000000000000000000000;;	//sys	Seek(fd int, offset int64, whence int) (newoffset int64, err error) = SYS_LSEEK
0000000000000000000000000000000000000000;;	//sys	Select(n int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setegid(egid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Seteuid(euid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setgid(gid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setpgid(pid int, pgid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Setpriority(which int, who int, prio int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setregid(rgid int, egid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setreuid(ruid int, euid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setrlimit(which int, lim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setsid() (pid int, err error)
0000000000000000000000000000000000000000;;	//sysnb	Settimeofday(tp *Timeval) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setuid(uid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Stat(path string, stat *Stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Symlink(path string, link string) (err error)
0000000000000000000000000000000000000000;;	//sys	Sync() (err error)
0000000000000000000000000000000000000000;;	//sys	Truncate(path string, length int64) (err error)
0000000000000000000000000000000000000000;;	//sys	Umask(newmask int) (oldmask int)
0000000000000000000000000000000000000000;;	//sys	Unlink(path string) (err error)
0000000000000000000000000000000000000000;;	//sys	Unmount(path string, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	write(fd int, p []byte) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	mmap(addr uintptr, length uintptr, prot int, flag int, fd int, pos int64) (ret uintptr, err error)
0000000000000000000000000000000000000000;;	//sys	munmap(addr uintptr, length uintptr) (err error)
0000000000000000000000000000000000000000;;	//sys	readlen(fd int, buf *byte, nbuf int) (n int, err error) = SYS_READ
0000000000000000000000000000000000000000;;	//sys	writelen(fd int, buf *byte, nbuf int) (n int, err error) = SYS_WRITE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Unimplemented
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	// ____semctl13
0000000000000000000000000000000000000000;;	// __clone
0000000000000000000000000000000000000000;;	// __fhopen40
0000000000000000000000000000000000000000;;	// __fhstat40
0000000000000000000000000000000000000000;;	// __fhstatvfs140
0000000000000000000000000000000000000000;;	// __fstat30
0000000000000000000000000000000000000000;;	// __getcwd
0000000000000000000000000000000000000000;;	// __getfh30
0000000000000000000000000000000000000000;;	// __getlogin
0000000000000000000000000000000000000000;;	// __lstat30
0000000000000000000000000000000000000000;;	// __mount50
0000000000000000000000000000000000000000;;	// __msgctl13
0000000000000000000000000000000000000000;;	// __msync13
0000000000000000000000000000000000000000;;	// __ntp_gettime30
0000000000000000000000000000000000000000;;	// __posix_chown
0000000000000000000000000000000000000000;;	// __posix_fadvise50
0000000000000000000000000000000000000000;;	// __posix_fchown
0000000000000000000000000000000000000000;;	// __posix_lchown
0000000000000000000000000000000000000000;;	// __posix_rename
0000000000000000000000000000000000000000;;	// __setlogin
0000000000000000000000000000000000000000;;	// __shmctl13
0000000000000000000000000000000000000000;;	// __sigaction_sigtramp
0000000000000000000000000000000000000000;;	// __sigaltstack14
0000000000000000000000000000000000000000;;	// __sigpending14
0000000000000000000000000000000000000000;;	// __sigprocmask14
0000000000000000000000000000000000000000;;	// __sigsuspend14
0000000000000000000000000000000000000000;;	// __sigtimedwait
0000000000000000000000000000000000000000;;	// __stat30
0000000000000000000000000000000000000000;;	// __syscall
0000000000000000000000000000000000000000;;	// __vfork14
0000000000000000000000000000000000000000;;	// _ksem_close
0000000000000000000000000000000000000000;;	// _ksem_destroy
0000000000000000000000000000000000000000;;	// _ksem_getvalue
0000000000000000000000000000000000000000;;	// _ksem_init
0000000000000000000000000000000000000000;;	// _ksem_open
0000000000000000000000000000000000000000;;	// _ksem_post
0000000000000000000000000000000000000000;;	// _ksem_trywait
0000000000000000000000000000000000000000;;	// _ksem_unlink
0000000000000000000000000000000000000000;;	// _ksem_wait
0000000000000000000000000000000000000000;;	// _lwp_continue
0000000000000000000000000000000000000000;;	// _lwp_create
0000000000000000000000000000000000000000;;	// _lwp_ctl
0000000000000000000000000000000000000000;;	// _lwp_detach
0000000000000000000000000000000000000000;;	// _lwp_exit
0000000000000000000000000000000000000000;;	// _lwp_getname
0000000000000000000000000000000000000000;;	// _lwp_getprivate
0000000000000000000000000000000000000000;;	// _lwp_kill
0000000000000000000000000000000000000000;;	// _lwp_park
0000000000000000000000000000000000000000;;	// _lwp_self
0000000000000000000000000000000000000000;;	// _lwp_setname
0000000000000000000000000000000000000000;;	// _lwp_setprivate
0000000000000000000000000000000000000000;;	// _lwp_suspend
0000000000000000000000000000000000000000;;	// _lwp_unpark
0000000000000000000000000000000000000000;;	// _lwp_unpark_all
0000000000000000000000000000000000000000;;	// _lwp_wait
0000000000000000000000000000000000000000;;	// _lwp_wakeup
0000000000000000000000000000000000000000;;	// _pset_bind
0000000000000000000000000000000000000000;;	// _sched_getaffinity
0000000000000000000000000000000000000000;;	// _sched_getparam
0000000000000000000000000000000000000000;;	// _sched_setaffinity
0000000000000000000000000000000000000000;;	// _sched_setparam
0000000000000000000000000000000000000000;;	// acct
0000000000000000000000000000000000000000;;	// aio_cancel
0000000000000000000000000000000000000000;;	// aio_error
0000000000000000000000000000000000000000;;	// aio_fsync
0000000000000000000000000000000000000000;;	// aio_read
0000000000000000000000000000000000000000;;	// aio_return
0000000000000000000000000000000000000000;;	// aio_suspend
0000000000000000000000000000000000000000;;	// aio_write
0000000000000000000000000000000000000000;;	// break
0000000000000000000000000000000000000000;;	// clock_getres
0000000000000000000000000000000000000000;;	// clock_gettime
0000000000000000000000000000000000000000;;	// clock_settime
0000000000000000000000000000000000000000;;	// compat_09_ogetdomainname
0000000000000000000000000000000000000000;;	// compat_09_osetdomainname
0000000000000000000000000000000000000000;;	// compat_09_ouname
0000000000000000000000000000000000000000;;	// compat_10_omsgsys
0000000000000000000000000000000000000000;;	// compat_10_osemsys
0000000000000000000000000000000000000000;;	// compat_10_oshmsys
0000000000000000000000000000000000000000;;	// compat_12_fstat12
0000000000000000000000000000000000000000;;	// compat_12_getdirentries
0000000000000000000000000000000000000000;;	// compat_12_lstat12
0000000000000000000000000000000000000000;;	// compat_12_msync
0000000000000000000000000000000000000000;;	// compat_12_oreboot
0000000000000000000000000000000000000000;;	// compat_12_oswapon
0000000000000000000000000000000000000000;;	// compat_12_stat12
0000000000000000000000000000000000000000;;	// compat_13_sigaction13
0000000000000000000000000000000000000000;;	// compat_13_sigaltstack13
0000000000000000000000000000000000000000;;	// compat_13_sigpending13
0000000000000000000000000000000000000000;;	// compat_13_sigprocmask13
0000000000000000000000000000000000000000;;	// compat_13_sigreturn13
0000000000000000000000000000000000000000;;	// compat_13_sigsuspend13
0000000000000000000000000000000000000000;;	// compat_14___semctl
0000000000000000000000000000000000000000;;	// compat_14_msgctl
0000000000000000000000000000000000000000;;	// compat_14_shmctl
0000000000000000000000000000000000000000;;	// compat_16___sigaction14
0000000000000000000000000000000000000000;;	// compat_16___sigreturn14
0000000000000000000000000000000000000000;;	// compat_20_fhstatfs
0000000000000000000000000000000000000000;;	// compat_20_fstatfs
0000000000000000000000000000000000000000;;	// compat_20_getfsstat
0000000000000000000000000000000000000000;;	// compat_20_statfs
0000000000000000000000000000000000000000;;	// compat_30___fhstat30
0000000000000000000000000000000000000000;;	// compat_30___fstat13
0000000000000000000000000000000000000000;;	// compat_30___lstat13
0000000000000000000000000000000000000000;;	// compat_30___stat13
0000000000000000000000000000000000000000;;	// compat_30_fhopen
0000000000000000000000000000000000000000;;	// compat_30_fhstat
0000000000000000000000000000000000000000;;	// compat_30_fhstatvfs1
0000000000000000000000000000000000000000;;	// compat_30_getdents
0000000000000000000000000000000000000000;;	// compat_30_getfh
0000000000000000000000000000000000000000;;	// compat_30_ntp_gettime
0000000000000000000000000000000000000000;;	// compat_30_socket
0000000000000000000000000000000000000000;;	// compat_40_mount
0000000000000000000000000000000000000000;;	// compat_43_fstat43
0000000000000000000000000000000000000000;;	// compat_43_lstat43
0000000000000000000000000000000000000000;;	// compat_43_oaccept
0000000000000000000000000000000000000000;;	// compat_43_ocreat
0000000000000000000000000000000000000000;;	// compat_43_oftruncate
0000000000000000000000000000000000000000;;	// compat_43_ogetdirentries
0000000000000000000000000000000000000000;;	// compat_43_ogetdtablesize
0000000000000000000000000000000000000000;;	// compat_43_ogethostid
0000000000000000000000000000000000000000;;	// compat_43_ogethostname
0000000000000000000000000000000000000000;;	// compat_43_ogetkerninfo
0000000000000000000000000000000000000000;;	// compat_43_ogetpagesize
0000000000000000000000000000000000000000;;	// compat_43_ogetpeername
0000000000000000000000000000000000000000;;	// compat_43_ogetrlimit
0000000000000000000000000000000000000000;;	// compat_43_ogetsockname
0000000000000000000000000000000000000000;;	// compat_43_okillpg
0000000000000000000000000000000000000000;;	// compat_43_olseek
0000000000000000000000000000000000000000;;	// compat_43_ommap
0000000000000000000000000000000000000000;;	// compat_43_oquota
0000000000000000000000000000000000000000;;	// compat_43_orecv
0000000000000000000000000000000000000000;;	// compat_43_orecvfrom
0000000000000000000000000000000000000000;;	// compat_43_orecvmsg
0000000000000000000000000000000000000000;;	// compat_43_osend
0000000000000000000000000000000000000000;;	// compat_43_osendmsg
0000000000000000000000000000000000000000;;	// compat_43_osethostid
0000000000000000000000000000000000000000;;	// compat_43_osethostname
0000000000000000000000000000000000000000;;	// compat_43_osetrlimit
0000000000000000000000000000000000000000;;	// compat_43_osigblock
0000000000000000000000000000000000000000;;	// compat_43_osigsetmask
0000000000000000000000000000000000000000;;	// compat_43_osigstack
0000000000000000000000000000000000000000;;	// compat_43_osigvec
0000000000000000000000000000000000000000;;	// compat_43_otruncate
0000000000000000000000000000000000000000;;	// compat_43_owait
0000000000000000000000000000000000000000;;	// compat_43_stat43
0000000000000000000000000000000000000000;;	// execve
0000000000000000000000000000000000000000;;	// extattr_delete_fd
0000000000000000000000000000000000000000;;	// extattr_delete_file
0000000000000000000000000000000000000000;;	// extattr_delete_link
0000000000000000000000000000000000000000;;	// extattr_get_fd
0000000000000000000000000000000000000000;;	// extattr_get_file
0000000000000000000000000000000000000000;;	// extattr_get_link
0000000000000000000000000000000000000000;;	// extattr_list_fd
0000000000000000000000000000000000000000;;	// extattr_list_file
0000000000000000000000000000000000000000;;	// extattr_list_link
0000000000000000000000000000000000000000;;	// extattr_set_fd
0000000000000000000000000000000000000000;;	// extattr_set_file
0000000000000000000000000000000000000000;;	// extattr_set_link
0000000000000000000000000000000000000000;;	// extattrctl
0000000000000000000000000000000000000000;;	// fchroot
0000000000000000000000000000000000000000;;	// fdatasync
0000000000000000000000000000000000000000;;	// fgetxattr
0000000000000000000000000000000000000000;;	// fktrace
0000000000000000000000000000000000000000;;	// flistxattr
0000000000000000000000000000000000000000;;	// fork
0000000000000000000000000000000000000000;;	// fremovexattr
0000000000000000000000000000000000000000;;	// fsetxattr
0000000000000000000000000000000000000000;;	// fstatvfs1
0000000000000000000000000000000000000000;;	// fsync_range
0000000000000000000000000000000000000000;;	// getcontext
0000000000000000000000000000000000000000;;	// getitimer
0000000000000000000000000000000000000000;;	// getvfsstat
0000000000000000000000000000000000000000;;	// getxattr
0000000000000000000000000000000000000000;;	// ioctl
0000000000000000000000000000000000000000;;	// ktrace
0000000000000000000000000000000000000000;;	// lchflags
0000000000000000000000000000000000000000;;	// lchmod
0000000000000000000000000000000000000000;;	// lfs_bmapv
0000000000000000000000000000000000000000;;	// lfs_markv
0000000000000000000000000000000000000000;;	// lfs_segclean
0000000000000000000000000000000000000000;;	// lfs_segwait
0000000000000000000000000000000000000000;;	// lgetxattr
0000000000000000000000000000000000000000;;	// lio_listio
0000000000000000000000000000000000000000;;	// listxattr
0000000000000000000000000000000000000000;;	// llistxattr
0000000000000000000000000000000000000000;;	// lremovexattr
0000000000000000000000000000000000000000;;	// lseek
0000000000000000000000000000000000000000;;	// lsetxattr
0000000000000000000000000000000000000000;;	// lutimes
0000000000000000000000000000000000000000;;	// madvise
0000000000000000000000000000000000000000;;	// mincore
0000000000000000000000000000000000000000;;	// minherit
0000000000000000000000000000000000000000;;	// modctl
0000000000000000000000000000000000000000;;	// mq_close
0000000000000000000000000000000000000000;;	// mq_getattr
0000000000000000000000000000000000000000;;	// mq_notify
0000000000000000000000000000000000000000;;	// mq_open
0000000000000000000000000000000000000000;;	// mq_receive
0000000000000000000000000000000000000000;;	// mq_send
0000000000000000000000000000000000000000;;	// mq_setattr
0000000000000000000000000000000000000000;;	// mq_timedreceive
0000000000000000000000000000000000000000;;	// mq_timedsend
0000000000000000000000000000000000000000;;	// mq_unlink
0000000000000000000000000000000000000000;;	// mremap
0000000000000000000000000000000000000000;;	// msgget
0000000000000000000000000000000000000000;;	// msgrcv
0000000000000000000000000000000000000000;;	// msgsnd
0000000000000000000000000000000000000000;;	// nfssvc
0000000000000000000000000000000000000000;;	// ntp_adjtime
0000000000000000000000000000000000000000;;	// pmc_control
0000000000000000000000000000000000000000;;	// pmc_get_info
0000000000000000000000000000000000000000;;	// poll
0000000000000000000000000000000000000000;;	// pollts
0000000000000000000000000000000000000000;;	// preadv
0000000000000000000000000000000000000000;;	// profil
0000000000000000000000000000000000000000;;	// pselect
0000000000000000000000000000000000000000;;	// pset_assign
0000000000000000000000000000000000000000;;	// pset_create
0000000000000000000000000000000000000000;;	// pset_destroy
0000000000000000000000000000000000000000;;	// ptrace
0000000000000000000000000000000000000000;;	// pwritev
0000000000000000000000000000000000000000;;	// quotactl
0000000000000000000000000000000000000000;;	// rasctl
0000000000000000000000000000000000000000;;	// readv
0000000000000000000000000000000000000000;;	// reboot
0000000000000000000000000000000000000000;;	// removexattr
0000000000000000000000000000000000000000;;	// sa_enable
0000000000000000000000000000000000000000;;	// sa_preempt
0000000000000000000000000000000000000000;;	// sa_register
0000000000000000000000000000000000000000;;	// sa_setconcurrency
0000000000000000000000000000000000000000;;	// sa_stacks
0000000000000000000000000000000000000000;;	// sa_yield
0000000000000000000000000000000000000000;;	// sbrk
0000000000000000000000000000000000000000;;	// sched_yield
0000000000000000000000000000000000000000;;	// semconfig
0000000000000000000000000000000000000000;;	// semget
0000000000000000000000000000000000000000;;	// semop
0000000000000000000000000000000000000000;;	// setcontext
0000000000000000000000000000000000000000;;	// setitimer
0000000000000000000000000000000000000000;;	// setxattr
0000000000000000000000000000000000000000;;	// shmat
0000000000000000000000000000000000000000;;	// shmdt
0000000000000000000000000000000000000000;;	// shmget
0000000000000000000000000000000000000000;;	// sstk
0000000000000000000000000000000000000000;;	// statvfs1
0000000000000000000000000000000000000000;;	// swapctl
0000000000000000000000000000000000000000;;	// sysarch
0000000000000000000000000000000000000000;;	// syscall
0000000000000000000000000000000000000000;;	// timer_create
0000000000000000000000000000000000000000;;	// timer_delete
0000000000000000000000000000000000000000;;	// timer_getoverrun
0000000000000000000000000000000000000000;;	// timer_gettime
0000000000000000000000000000000000000000;;	// timer_settime
0000000000000000000000000000000000000000;;	// undelete
0000000000000000000000000000000000000000;;	// utrace
0000000000000000000000000000000000000000;;	// uuidgen
0000000000000000000000000000000000000000;;	// vadvise
0000000000000000000000000000000000000000;;	// vfork
0000000000000000000000000000000000000000;;	// writev
