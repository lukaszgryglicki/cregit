0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_solaris.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_solaris.go][vendor/golang.org/x/sys/unix/types_solaris.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Input to cgo -godefs.  See also mkerrors.sh and mkall.sh
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +godefs map struct_in_addr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	// +godefs map struct_in6_addr [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	#define KERNEL
0000000000000000000000000000000000000000;;	// These defines ensure that builds done on newer versions of Solaris are
0000000000000000000000000000000000000000;;	// backwards-compatible with older versions of Solaris and
0000000000000000000000000000000000000000;;	// OpenSolaris-based derivatives.
0000000000000000000000000000000000000000;;	#define __USE_SUNOS_SOCKETS__          // msghdr
0000000000000000000000000000000000000000;;	#define __USE_LEGACY_PROTOTYPES__      // iovec
0000000000000000000000000000000000000000;;	#include <dirent.h>
0000000000000000000000000000000000000000;;	#include <fcntl.h>
0000000000000000000000000000000000000000;;	#include <netdb.h>
0000000000000000000000000000000000000000;;	#include <limits.h>
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	#include <termio.h>
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <unistd.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/mount.h>
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/resource.h>
0000000000000000000000000000000000000000;;	#include <sys/select.h>
0000000000000000000000000000000000000000;;	#include <sys/signal.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/stat.h>
0000000000000000000000000000000000000000;;	#include <sys/time.h>
0000000000000000000000000000000000000000;;	#include <sys/times.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/utsname.h>
0000000000000000000000000000000000000000;;	#include <sys/un.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_dl.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/icmp6.h>
0000000000000000000000000000000000000000;;	#include <netinet/tcp.h>
0000000000000000000000000000000000000000;;	#include <ustat.h>
0000000000000000000000000000000000000000;;	#include <utime.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	enum {
0000000000000000000000000000000000000000;;		sizeofPtr = sizeof(void*),
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	union sockaddr_all {
0000000000000000000000000000000000000000;;		struct sockaddr s1;	// this one gets used for fields
0000000000000000000000000000000000000000;;		struct sockaddr_in s2;	// these pad it out
0000000000000000000000000000000000000000;;		struct sockaddr_in6 s3;
0000000000000000000000000000000000000000;;		struct sockaddr_un s4;
0000000000000000000000000000000000000000;;		struct sockaddr_dl s5;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	struct sockaddr_any {
0000000000000000000000000000000000000000;;		struct sockaddr addr;
0000000000000000000000000000000000000000;;		char pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Machine characteristics; for internal use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofPtr      = C.sizeofPtr
0000000000000000000000000000000000000000;;		sizeofShort    = C.sizeof_short
0000000000000000000000000000000000000000;;		sizeofInt      = C.sizeof_int
0000000000000000000000000000000000000000;;		sizeofLong     = C.sizeof_long
0000000000000000000000000000000000000000;;		sizeofLongLong = C.sizeof_longlong
0000000000000000000000000000000000000000;;		PathMax        = C.PATH_MAX
0000000000000000000000000000000000000000;;		MaxHostNameLen = C.MAXHOSTNAMELEN
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Basic types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		_C_short     C.short
0000000000000000000000000000000000000000;;		_C_int       C.int
0000000000000000000000000000000000000000;;		_C_long      C.long
0000000000000000000000000000000000000000;;		_C_long_long C.longlong
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timespec C.struct_timespec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval C.struct_timeval
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval32 C.struct_timeval32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tms C.struct_tms
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utimbuf C.struct_utimbuf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Processes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rusage C.struct_rusage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rlimit C.struct_rlimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Gid_t C.gid_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Files
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const ( // Directory mode bits
0000000000000000000000000000000000000000;;		S_IFMT   = C.S_IFMT
0000000000000000000000000000000000000000;;		S_IFIFO  = C.S_IFIFO
0000000000000000000000000000000000000000;;		S_IFCHR  = C.S_IFCHR
0000000000000000000000000000000000000000;;		S_IFDIR  = C.S_IFDIR
0000000000000000000000000000000000000000;;		S_IFBLK  = C.S_IFBLK
0000000000000000000000000000000000000000;;		S_IFREG  = C.S_IFREG
0000000000000000000000000000000000000000;;		S_IFLNK  = C.S_IFLNK
0000000000000000000000000000000000000000;;		S_IFSOCK = C.S_IFSOCK
0000000000000000000000000000000000000000;;		S_ISUID  = C.S_ISUID
0000000000000000000000000000000000000000;;		S_ISGID  = C.S_ISGID
0000000000000000000000000000000000000000;;		S_ISVTX  = C.S_ISVTX
0000000000000000000000000000000000000000;;		S_IRUSR  = C.S_IRUSR
0000000000000000000000000000000000000000;;		S_IWUSR  = C.S_IWUSR
0000000000000000000000000000000000000000;;		S_IXUSR  = C.S_IXUSR
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stat_t C.struct_stat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Flock_t C.struct_flock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dirent C.struct_dirent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sockets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet4 C.struct_sockaddr_in
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet6 C.struct_sockaddr_in6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrUnix C.struct_sockaddr_un
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrDatalink C.struct_sockaddr_dl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddr C.struct_sockaddr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrAny C.struct_sockaddr_any
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Socklen C.socklen_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Linger C.struct_linger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iovec C.struct_iovec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreq C.struct_ip_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6Mreq C.struct_ipv6_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Msghdr C.struct_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmsghdr C.struct_cmsghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet6Pktinfo C.struct_in6_pktinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6MTUInfo C.struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ICMPv6Filter C.struct_icmp6_filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockaddrInet4    = C.sizeof_struct_sockaddr_in
0000000000000000000000000000000000000000;;		SizeofSockaddrInet6    = C.sizeof_struct_sockaddr_in6
0000000000000000000000000000000000000000;;		SizeofSockaddrAny      = C.sizeof_struct_sockaddr_any
0000000000000000000000000000000000000000;;		SizeofSockaddrUnix     = C.sizeof_struct_sockaddr_un
0000000000000000000000000000000000000000;;		SizeofSockaddrDatalink = C.sizeof_struct_sockaddr_dl
0000000000000000000000000000000000000000;;		SizeofLinger           = C.sizeof_struct_linger
0000000000000000000000000000000000000000;;		SizeofIPMreq           = C.sizeof_struct_ip_mreq
0000000000000000000000000000000000000000;;		SizeofIPv6Mreq         = C.sizeof_struct_ipv6_mreq
0000000000000000000000000000000000000000;;		SizeofMsghdr           = C.sizeof_struct_msghdr
0000000000000000000000000000000000000000;;		SizeofCmsghdr          = C.sizeof_struct_cmsghdr
0000000000000000000000000000000000000000;;		SizeofInet6Pktinfo     = C.sizeof_struct_in6_pktinfo
0000000000000000000000000000000000000000;;		SizeofIPv6MTUInfo      = C.sizeof_struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;		SizeofICMPv6Filter     = C.sizeof_struct_icmp6_filter
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Select
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdSet C.fd_set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Misc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utsname C.struct_utsname
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ustat_t C.struct_ustat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AT_FDCWD            = C.AT_FDCWD
0000000000000000000000000000000000000000;;		AT_SYMLINK_NOFOLLOW = C.AT_SYMLINK_NOFOLLOW
0000000000000000000000000000000000000000;;		AT_SYMLINK_FOLLOW   = C.AT_SYMLINK_FOLLOW
0000000000000000000000000000000000000000;;		AT_REMOVEDIR        = C.AT_REMOVEDIR
0000000000000000000000000000000000000000;;		AT_EACCESS          = C.AT_EACCESS
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Routing and interface messages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofIfMsghdr  = C.sizeof_struct_if_msghdr
0000000000000000000000000000000000000000;;		SizeofIfData    = C.sizeof_struct_if_data
0000000000000000000000000000000000000000;;		SizeofIfaMsghdr = C.sizeof_struct_ifa_msghdr
0000000000000000000000000000000000000000;;		SizeofRtMsghdr  = C.sizeof_struct_rt_msghdr
0000000000000000000000000000000000000000;;		SizeofRtMetrics = C.sizeof_struct_rt_metrics
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfMsghdr C.struct_if_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfData C.struct_if_data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfaMsghdr C.struct_ifa_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMsghdr C.struct_rt_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMetrics C.struct_rt_metrics
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Berkeley packet filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofBpfVersion = C.sizeof_struct_bpf_version
0000000000000000000000000000000000000000;;		SizeofBpfStat    = C.sizeof_struct_bpf_stat
0000000000000000000000000000000000000000;;		SizeofBpfProgram = C.sizeof_struct_bpf_program
0000000000000000000000000000000000000000;;		SizeofBpfInsn    = C.sizeof_struct_bpf_insn
0000000000000000000000000000000000000000;;		SizeofBpfHdr     = C.sizeof_struct_bpf_hdr
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfVersion C.struct_bpf_version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfStat C.struct_bpf_stat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfProgram C.struct_bpf_program
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfInsn C.struct_bpf_insn
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfTimeval C.struct_bpf_timeval
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BpfHdr C.struct_bpf_hdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// sysconf information
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const _SC_PAGESIZE = C._SC_PAGESIZE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Terminal handling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termios C.struct_termios
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termio C.struct_termio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Winsize C.struct_winsize
