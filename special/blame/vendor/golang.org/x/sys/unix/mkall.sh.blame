0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	# Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	# Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	# license that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# The unix package provides access to the raw system call
0000000000000000000000000000000000000000;;	# interface of the underlying operating system.  Porting Go to
0000000000000000000000000000000000000000;;	# a new architecture/operating system combination requires
0000000000000000000000000000000000000000;;	# some manual effort, though there are tools that automate
0000000000000000000000000000000000000000;;	# much of the process.  The auto-generated files have names
0000000000000000000000000000000000000000;;	# beginning with z.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This script runs or (given -n) prints suggested commands to generate z files
0000000000000000000000000000000000000000;;	# for the current system.  Running those commands is not automatic.
0000000000000000000000000000000000000000;;	# This script is documentation more than anything else.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * asm_${GOOS}_${GOARCH}.s
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This hand-written assembly file implements system call dispatch.
0000000000000000000000000000000000000000;;	# There are three entry points:
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# 	func Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr);
0000000000000000000000000000000000000000;;	# 	func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr);
0000000000000000000000000000000000000000;;	# 	func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr);
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# The first and second are the standard ones; they differ only in
0000000000000000000000000000000000000000;;	# how many arguments can be passed to the kernel.
0000000000000000000000000000000000000000;;	# The third is for low-level use by the ForkExec wrapper;
0000000000000000000000000000000000000000;;	# unlike the first two, it does not call into the scheduler to
0000000000000000000000000000000000000000;;	# let it know that a system call is running.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * syscall_${GOOS}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This hand-written Go file implements system calls that need
0000000000000000000000000000000000000000;;	# special handling and lists "//sys" comments giving prototypes
0000000000000000000000000000000000000000;;	# for ones that can be auto-generated.  Mksyscall reads those
0000000000000000000000000000000000000000;;	# comments to generate the stubs.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * syscall_${GOOS}_${GOARCH}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Same as syscall_${GOOS}.go except that it contains code specific
0000000000000000000000000000000000000000;;	# to ${GOOS} on one particular architecture.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * types_${GOOS}.c
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This hand-written C file includes standard C headers and then
0000000000000000000000000000000000000000;;	# creates typedef or enum names beginning with a dollar sign
0000000000000000000000000000000000000000;;	# (use of $ in variable names is a gcc extension).  The hardest
0000000000000000000000000000000000000000;;	# part about preparing this file is figuring out which headers to
0000000000000000000000000000000000000000;;	# include and which symbols need to be #defined to get the
0000000000000000000000000000000000000000;;	# actual data structures that pass through to the kernel system calls.
0000000000000000000000000000000000000000;;	# Some C libraries present alternate versions for binary compatibility
0000000000000000000000000000000000000000;;	# and translate them on the way in and out of system calls, but
0000000000000000000000000000000000000000;;	# there is almost always a #define that can get the real ones.
0000000000000000000000000000000000000000;;	# See types_darwin.c and types_linux.c for examples.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * zerror_${GOOS}_${GOARCH}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# This machine-generated file defines the system's error numbers,
0000000000000000000000000000000000000000;;	# error strings, and signal numbers.  The generator is "mkerrors.sh".
0000000000000000000000000000000000000000;;	# Usually no arguments are needed, but mkerrors.sh will pass its
0000000000000000000000000000000000000000;;	# arguments on to godefs.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * zsyscall_${GOOS}_${GOARCH}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Generated by mksyscall.pl; see syscall_${GOOS}.go above.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * zsysnum_${GOOS}_${GOARCH}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Generated by mksysnum_${GOOS}.
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# * ztypes_${GOOS}_${GOARCH}.go
0000000000000000000000000000000000000000;;	#
0000000000000000000000000000000000000000;;	# Generated by godefs; see types_${GOOS}.c above.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GOOSARCH="${GOOS}_${GOARCH}"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# defaults
0000000000000000000000000000000000000000;;	mksyscall="./mksyscall.pl"
0000000000000000000000000000000000000000;;	mkerrors="./mkerrors.sh"
0000000000000000000000000000000000000000;;	zerrors="zerrors_$GOOSARCH.go"
0000000000000000000000000000000000000000;;	mksysctl=""
0000000000000000000000000000000000000000;;	zsysctl="zsysctl_$GOOSARCH.go"
0000000000000000000000000000000000000000;;	mksysnum=
0000000000000000000000000000000000000000;;	mktypes=
0000000000000000000000000000000000000000;;	run="sh"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	case "$1" in
0000000000000000000000000000000000000000;;	-syscalls)
0000000000000000000000000000000000000000;;		for i in zsyscall*go
0000000000000000000000000000000000000000;;		do
0000000000000000000000000000000000000000;;			sed 1q $i | sed 's;^// ;;' | sh > _$i && gofmt < _$i > $i
0000000000000000000000000000000000000000;;			rm _$i
0000000000000000000000000000000000000000;;		done
0000000000000000000000000000000000000000;;		exit 0
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	-n)
0000000000000000000000000000000000000000;;		run="cat"
0000000000000000000000000000000000000000;;		shift
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	case "$#" in
0000000000000000000000000000000000000000;;	0)
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	*)
0000000000000000000000000000000000000000;;		echo 'usage: mkall.sh [-n]' 1>&2
0000000000000000000000000000000000000000;;		exit 2
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GOOSARCH_in=syscall_$GOOSARCH.go
0000000000000000000000000000000000000000;;	case "$GOOSARCH" in
0000000000000000000000000000000000000000;;	_* | *_ | _)
0000000000000000000000000000000000000000;;		echo 'undefined $GOOS_$GOARCH:' "$GOOSARCH" 1>&2
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	darwin_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_darwin.pl $(xcrun --show-sdk-path --sdk macosx)/usr/include/sys/syscall.h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	darwin_amd64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_darwin.pl $(xcrun --show-sdk-path --sdk macosx)/usr/include/sys/syscall.h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	darwin_arm)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_darwin.pl /usr/include/sys/syscall.h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	darwin_arm64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_darwin.pl $(xcrun --show-sdk-path --sdk iphoneos)/usr/include/sys/syscall.h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	dragonfly_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32 -dragonfly"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master' | ./mksysnum_dragonfly.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	dragonfly_amd64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -dragonfly"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/kern/syscalls.master' | ./mksysnum_dragonfly.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	freebsd_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master' | ./mksysnum_freebsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	freebsd_amd64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master' | ./mksysnum_freebsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	freebsd_arm)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32 -arm"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master' | ./mksysnum_freebsd.pl"
0000000000000000000000000000000000000000;;		# Let the type of C char be signed for making the bare syscall
0000000000000000000000000000000000000000;;		# API consistent across over platforms.
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs -- -fsigned-char"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl /usr/include/asm/unistd_32.h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_amd64)
0000000000000000000000000000000000000000;;		unistd_h=$(ls -1 /usr/include/asm/unistd_64.h /usr/include/x86_64-linux-gnu/asm/unistd_64.h 2>/dev/null | head -1)
0000000000000000000000000000000000000000;;		if [ "$unistd_h" = "" ]; then
0000000000000000000000000000000000000000;;			echo >&2 cannot find unistd_64.h
0000000000000000000000000000000000000000;;			exit 1
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl $unistd_h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_arm)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32 -arm"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/arch/arm/include/uapi/asm/unistd.h' | ./mksysnum_linux.pl -"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_arm64)
0000000000000000000000000000000000000000;;		unistd_h=$(ls -1 /usr/include/asm/unistd.h /usr/include/asm-generic/unistd.h 2>/dev/null | head -1)
0000000000000000000000000000000000000000;;		if [ "$unistd_h" = "" ]; then
0000000000000000000000000000000000000000;;			echo >&2 cannot find unistd_64.h
0000000000000000000000000000000000000000;;			exit 1
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl $unistd_h"
0000000000000000000000000000000000000000;;		# Let the type of C char be signed for making the bare syscall
0000000000000000000000000000000000000000;;		# API consistent across over platforms.
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs -- -fsigned-char"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_ppc64)
0000000000000000000000000000000000000000;;		GOOSARCH_in=syscall_linux_ppc64x.go
0000000000000000000000000000000000000000;;		unistd_h=/usr/include/asm/unistd.h
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl $unistd_h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_ppc64le)
0000000000000000000000000000000000000000;;		GOOSARCH_in=syscall_linux_ppc64x.go
0000000000000000000000000000000000000000;;		unistd_h=/usr/include/powerpc64le-linux-gnu/asm/unistd.h
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl $unistd_h"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	linux_s390x)
0000000000000000000000000000000000000000;;		GOOSARCH_in=syscall_linux_s390x.go
0000000000000000000000000000000000000000;;		unistd_h=/usr/include/asm/unistd.h
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum="./mksysnum_linux.pl $unistd_h"
0000000000000000000000000000000000000000;;		# Let the type of C char be signed to make the bare sys
0000000000000000000000000000000000000000;;		# API more consistent between platforms.
0000000000000000000000000000000000000000;;		# This is a deliberate departure from the way the syscall
0000000000000000000000000000000000000000;;		# package generates its version of the types file.
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs -- -fsigned-char"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	netbsd_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32 -netbsd"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/sys/kern/syscalls.master' | ./mksysnum_netbsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	netbsd_amd64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -netbsd"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/sys/kern/syscalls.master' | ./mksysnum_netbsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	openbsd_386)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m32"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -l32 -openbsd"
0000000000000000000000000000000000000000;;		mksysctl="./mksysctl_openbsd.pl"
0000000000000000000000000000000000000000;;		zsysctl="zsysctl_openbsd.go"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master' | ./mksysnum_openbsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	openbsd_amd64)
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall.pl -openbsd"
0000000000000000000000000000000000000000;;		mksysctl="./mksysctl_openbsd.pl"
0000000000000000000000000000000000000000;;		zsysctl="zsysctl_openbsd.go"
0000000000000000000000000000000000000000;;		mksysnum="curl -s 'http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/kern/syscalls.master' | ./mksysnum_openbsd.pl"
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	solaris_amd64)
0000000000000000000000000000000000000000;;		mksyscall="./mksyscall_solaris.pl"
0000000000000000000000000000000000000000;;		mkerrors="$mkerrors -m64"
0000000000000000000000000000000000000000;;		mksysnum=
0000000000000000000000000000000000000000;;		mktypes="GOARCH=$GOARCH go tool cgo -godefs"
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	*)
0000000000000000000000000000000000000000;;		echo 'unrecognized $GOOS_$GOARCH: ' "$GOOSARCH" 1>&2
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;		;;
0000000000000000000000000000000000000000;;	esac
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	(
0000000000000000000000000000000000000000;;		if [ -n "$mkerrors" ]; then echo "$mkerrors |gofmt >$zerrors"; fi
0000000000000000000000000000000000000000;;		case "$GOOS" in
0000000000000000000000000000000000000000;;		*)
0000000000000000000000000000000000000000;;			syscall_goos="syscall_$GOOS.go"
0000000000000000000000000000000000000000;;			case "$GOOS" in
0000000000000000000000000000000000000000;;			darwin | dragonfly | freebsd | netbsd | openbsd)
0000000000000000000000000000000000000000;;				syscall_goos="syscall_bsd.go $syscall_goos"
0000000000000000000000000000000000000000;;				;;
0000000000000000000000000000000000000000;;			esac
0000000000000000000000000000000000000000;;			if [ -n "$mksyscall" ]; then echo "$mksyscall $syscall_goos $GOOSARCH_in |gofmt >zsyscall_$GOOSARCH.go"; fi
0000000000000000000000000000000000000000;;			;;
0000000000000000000000000000000000000000;;		esac
0000000000000000000000000000000000000000;;		if [ -n "$mksysctl" ]; then echo "$mksysctl |gofmt >$zsysctl"; fi
0000000000000000000000000000000000000000;;		if [ -n "$mksysnum" ]; then echo "$mksysnum |gofmt >zsysnum_$GOOSARCH.go"; fi
0000000000000000000000000000000000000000;;		if [ -n "$mktypes" ]; then
0000000000000000000000000000000000000000;;			echo "echo // +build $GOARCH,$GOOS > ztypes_$GOOSARCH.go";
0000000000000000000000000000000000000000;;			echo "$mktypes types_$GOOS.go | go run mkpost.go >>ztypes_$GOOSARCH.go";
0000000000000000000000000000000000000000;;		fi
0000000000000000000000000000000000000000;;	) | $run
