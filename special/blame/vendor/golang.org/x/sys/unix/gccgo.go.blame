0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors.  All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/gccgo.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/gccgo.go][vendor/golang.org/x/sys/unix/gccgo.go];	
0000000000000000000000000000000000000000;;	// +build gccgo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "syscall"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We can't use the gc-syntax .s files for gccgo.  On the plus side
0000000000000000000000000000000000000000;;	// much of the functionality can be written directly in Go.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//extern gccgoRealSyscall
0000000000000000000000000000000000000000;;	func realSyscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r, errno uintptr)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno) {
0000000000000000000000000000000000000000;;		syscall.Entersyscall()
0000000000000000000000000000000000000000;;		r, errno := realSyscall(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		syscall.Exitsyscall()
0000000000000000000000000000000000000000;;		return r, 0, syscall.Errno(errno)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno) {
0000000000000000000000000000000000000000;;		syscall.Entersyscall()
0000000000000000000000000000000000000000;;		r, errno := realSyscall(trap, a1, a2, a3, a4, a5, a6, 0, 0, 0)
0000000000000000000000000000000000000000;;		syscall.Exitsyscall()
0000000000000000000000000000000000000000;;		return r, 0, syscall.Errno(errno)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Syscall9(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2 uintptr, err syscall.Errno) {
0000000000000000000000000000000000000000;;		syscall.Entersyscall()
0000000000000000000000000000000000000000;;		r, errno := realSyscall(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9)
0000000000000000000000000000000000000000;;		syscall.Exitsyscall()
0000000000000000000000000000000000000000;;		return r, 0, syscall.Errno(errno)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err syscall.Errno) {
0000000000000000000000000000000000000000;;		r, errno := realSyscall(trap, a1, a2, a3, 0, 0, 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		return r, 0, syscall.Errno(errno)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err syscall.Errno) {
0000000000000000000000000000000000000000;;		r, errno := realSyscall(trap, a1, a2, a3, a4, a5, a6, 0, 0, 0)
0000000000000000000000000000000000000000;;		return r, 0, syscall.Errno(errno)
0000000000000000000000000000000000000000;;	}
