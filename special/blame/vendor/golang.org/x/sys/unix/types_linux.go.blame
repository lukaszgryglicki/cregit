0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
12a86164cdbf8548dc1c57ea2633daf61c4daab0;Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_linux.go[Godeps/_workspace/src/github.com/fsouza/go-dockerclient/external/golang.org/x/sys/unix/types_linux.go][vendor/golang.org/x/sys/unix/types_linux.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Input to cgo -godefs.  See also mkerrors.sh and mkall.sh
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// +godefs map struct_in_addr [4]byte /* in_addr */
0000000000000000000000000000000000000000;;	// +godefs map struct_in6_addr [16]byte /* in6_addr */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	#define _LARGEFILE_SOURCE
0000000000000000000000000000000000000000;;	#define _LARGEFILE64_SOURCE
0000000000000000000000000000000000000000;;	#define _FILE_OFFSET_BITS 64
0000000000000000000000000000000000000000;;	#define _GNU_SOURCE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#include <dirent.h>
0000000000000000000000000000000000000000;;	#include <fcntl.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/tcp.h>
0000000000000000000000000000000000000000;;	#include <netpacket/packet.h>
0000000000000000000000000000000000000000;;	#include <poll.h>
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <sys/epoll.h>
0000000000000000000000000000000000000000;;	#include <sys/inotify.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/mount.h>
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/ptrace.h>
0000000000000000000000000000000000000000;;	#include <sys/resource.h>
0000000000000000000000000000000000000000;;	#include <sys/select.h>
0000000000000000000000000000000000000000;;	#include <sys/signal.h>
0000000000000000000000000000000000000000;;	#include <sys/stat.h>
0000000000000000000000000000000000000000;;	#include <sys/statfs.h>
0000000000000000000000000000000000000000;;	#include <sys/sysinfo.h>
0000000000000000000000000000000000000000;;	#include <sys/time.h>
0000000000000000000000000000000000000000;;	#include <sys/times.h>
0000000000000000000000000000000000000000;;	#include <sys/timex.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/un.h>
0000000000000000000000000000000000000000;;	#include <sys/user.h>
0000000000000000000000000000000000000000;;	#include <sys/utsname.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <linux/filter.h>
0000000000000000000000000000000000000000;;	#include <linux/netlink.h>
0000000000000000000000000000000000000000;;	#include <linux/rtnetlink.h>
0000000000000000000000000000000000000000;;	#include <linux/icmpv6.h>
0000000000000000000000000000000000000000;;	#include <asm/termbits.h>
0000000000000000000000000000000000000000;;	#include <time.h>
0000000000000000000000000000000000000000;;	#include <unistd.h>
0000000000000000000000000000000000000000;;	#include <ustat.h>
0000000000000000000000000000000000000000;;	#include <utime.h>
0000000000000000000000000000000000000000;;	#include <bluetooth/bluetooth.h>
0000000000000000000000000000000000000000;;	#include <bluetooth/hci.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#ifdef TCSETS2
0000000000000000000000000000000000000000;;	// On systems that have "struct termios2" use this as type Termios.
0000000000000000000000000000000000000000;;	typedef struct termios2 termios_t;
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;	typedef struct termios termios_t;
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	enum {
0000000000000000000000000000000000000000;;		sizeofPtr = sizeof(void*),
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	union sockaddr_all {
0000000000000000000000000000000000000000;;		struct sockaddr s1;	// this one gets used for fields
0000000000000000000000000000000000000000;;		struct sockaddr_in s2;	// these pad it out
0000000000000000000000000000000000000000;;		struct sockaddr_in6 s3;
0000000000000000000000000000000000000000;;		struct sockaddr_un s4;
0000000000000000000000000000000000000000;;		struct sockaddr_ll s5;
0000000000000000000000000000000000000000;;		struct sockaddr_nl s6;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	struct sockaddr_any {
0000000000000000000000000000000000000000;;		struct sockaddr addr;
0000000000000000000000000000000000000000;;		char pad[sizeof(union sockaddr_all) - sizeof(struct sockaddr)];
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// copied from /usr/include/linux/un.h
0000000000000000000000000000000000000000;;	struct my_sockaddr_un {
0000000000000000000000000000000000000000;;		sa_family_t sun_family;
0000000000000000000000000000000000000000;;	#if defined(__ARM_EABI__) || defined(__powerpc64__)
0000000000000000000000000000000000000000;;		// on ARM char is by default unsigned
0000000000000000000000000000000000000000;;		signed char sun_path[108];
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;		char sun_path[108];
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#ifdef __ARM_EABI__
0000000000000000000000000000000000000000;;	typedef struct user_regs PtraceRegs;
0000000000000000000000000000000000000000;;	#elif defined(__aarch64__)
0000000000000000000000000000000000000000;;	typedef struct user_pt_regs PtraceRegs;
0000000000000000000000000000000000000000;;	#elif defined(__powerpc64__)
0000000000000000000000000000000000000000;;	typedef struct pt_regs PtraceRegs;
0000000000000000000000000000000000000000;;	#elif defined(__mips__)
0000000000000000000000000000000000000000;;	typedef struct user PtraceRegs;
0000000000000000000000000000000000000000;;	#elif defined(__s390x__)
0000000000000000000000000000000000000000;;	typedef struct _user_regs_struct PtraceRegs;
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;	typedef struct user_regs_struct PtraceRegs;
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#if defined(__s390x__)
0000000000000000000000000000000000000000;;	typedef struct _user_psw_struct ptracePsw;
0000000000000000000000000000000000000000;;	typedef struct _user_fpregs_struct ptraceFpregs;
0000000000000000000000000000000000000000;;	typedef struct _user_per_struct ptracePer;
0000000000000000000000000000000000000000;;	#else
0000000000000000000000000000000000000000;;	typedef struct {} ptracePsw;
0000000000000000000000000000000000000000;;	typedef struct {} ptraceFpregs;
0000000000000000000000000000000000000000;;	typedef struct {} ptracePer;
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The real epoll_event is a union, and godefs doesn't handle it well.
0000000000000000000000000000000000000000;;	struct my_epoll_event {
0000000000000000000000000000000000000000;;		uint32_t events;
0000000000000000000000000000000000000000;;	#if defined(__ARM_EABI__) || defined(__aarch64__)
0000000000000000000000000000000000000000;;		// padding is not specified in linux/eventpoll.h but added to conform to the
0000000000000000000000000000000000000000;;		// alignment requirements of EABI
0000000000000000000000000000000000000000;;		int32_t padFd;
0000000000000000000000000000000000000000;;	#elif defined(__powerpc64__) || defined(__s390x__)
0000000000000000000000000000000000000000;;		int32_t _padFd;
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;		int32_t fd;
0000000000000000000000000000000000000000;;		int32_t pad;
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	import "C"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Machine characteristics; for internal use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		sizeofPtr      = C.sizeofPtr
0000000000000000000000000000000000000000;;		sizeofShort    = C.sizeof_short
0000000000000000000000000000000000000000;;		sizeofInt      = C.sizeof_int
0000000000000000000000000000000000000000;;		sizeofLong     = C.sizeof_long
0000000000000000000000000000000000000000;;		sizeofLongLong = C.sizeof_longlong
0000000000000000000000000000000000000000;;		PathMax        = C.PATH_MAX
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Basic types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		_C_short     C.short
0000000000000000000000000000000000000000;;		_C_int       C.int
0000000000000000000000000000000000000000;;		_C_long      C.long
0000000000000000000000000000000000000000;;		_C_long_long C.longlong
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timespec C.struct_timespec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timeval C.struct_timeval
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Timex C.struct_timex
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Time_t C.time_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Tms C.struct_tms
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utimbuf C.struct_utimbuf
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Processes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rusage C.struct_rusage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Rlimit C.struct_rlimit
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Gid_t C.gid_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Files
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stat_t C.struct_stat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Statfs_t C.struct_statfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dirent C.struct_dirent
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Fsid C.fsid_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Flock_t C.struct_flock
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Advice to Fadvise
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		FADV_NORMAL     = C.POSIX_FADV_NORMAL
0000000000000000000000000000000000000000;;		FADV_RANDOM     = C.POSIX_FADV_RANDOM
0000000000000000000000000000000000000000;;		FADV_SEQUENTIAL = C.POSIX_FADV_SEQUENTIAL
0000000000000000000000000000000000000000;;		FADV_WILLNEED   = C.POSIX_FADV_WILLNEED
0000000000000000000000000000000000000000;;		FADV_DONTNEED   = C.POSIX_FADV_DONTNEED
0000000000000000000000000000000000000000;;		FADV_NOREUSE    = C.POSIX_FADV_NOREUSE
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sockets
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet4 C.struct_sockaddr_in
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrInet6 C.struct_sockaddr_in6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrUnix C.struct_my_sockaddr_un
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrLinklayer C.struct_sockaddr_ll
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrNetlink C.struct_sockaddr_nl
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrHCI C.struct_sockaddr_hci
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddr C.struct_sockaddr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RawSockaddrAny C.struct_sockaddr_any
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type _Socklen C.socklen_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Linger C.struct_linger
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Iovec C.struct_iovec
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreq C.struct_ip_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPMreqn C.struct_ip_mreqn
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6Mreq C.struct_ipv6_mreq
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Msghdr C.struct_msghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Cmsghdr C.struct_cmsghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet4Pktinfo C.struct_in_pktinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Inet6Pktinfo C.struct_in6_pktinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IPv6MTUInfo C.struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ICMPv6Filter C.struct_icmp6_filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ucred C.struct_ucred
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TCPInfo C.struct_tcp_info
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockaddrInet4     = C.sizeof_struct_sockaddr_in
0000000000000000000000000000000000000000;;		SizeofSockaddrInet6     = C.sizeof_struct_sockaddr_in6
0000000000000000000000000000000000000000;;		SizeofSockaddrAny       = C.sizeof_struct_sockaddr_any
0000000000000000000000000000000000000000;;		SizeofSockaddrUnix      = C.sizeof_struct_sockaddr_un
0000000000000000000000000000000000000000;;		SizeofSockaddrLinklayer = C.sizeof_struct_sockaddr_ll
0000000000000000000000000000000000000000;;		SizeofSockaddrNetlink   = C.sizeof_struct_sockaddr_nl
0000000000000000000000000000000000000000;;		SizeofSockaddrHCI       = C.sizeof_struct_sockaddr_hci
0000000000000000000000000000000000000000;;		SizeofLinger            = C.sizeof_struct_linger
0000000000000000000000000000000000000000;;		SizeofIPMreq            = C.sizeof_struct_ip_mreq
0000000000000000000000000000000000000000;;		SizeofIPMreqn           = C.sizeof_struct_ip_mreqn
0000000000000000000000000000000000000000;;		SizeofIPv6Mreq          = C.sizeof_struct_ipv6_mreq
0000000000000000000000000000000000000000;;		SizeofMsghdr            = C.sizeof_struct_msghdr
0000000000000000000000000000000000000000;;		SizeofCmsghdr           = C.sizeof_struct_cmsghdr
0000000000000000000000000000000000000000;;		SizeofInet4Pktinfo      = C.sizeof_struct_in_pktinfo
0000000000000000000000000000000000000000;;		SizeofInet6Pktinfo      = C.sizeof_struct_in6_pktinfo
0000000000000000000000000000000000000000;;		SizeofIPv6MTUInfo       = C.sizeof_struct_ip6_mtuinfo
0000000000000000000000000000000000000000;;		SizeofICMPv6Filter      = C.sizeof_struct_icmp6_filter
0000000000000000000000000000000000000000;;		SizeofUcred             = C.sizeof_struct_ucred
0000000000000000000000000000000000000000;;		SizeofTCPInfo           = C.sizeof_struct_tcp_info
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Netlink routing and interface messages
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IFA_UNSPEC          = C.IFA_UNSPEC
0000000000000000000000000000000000000000;;		IFA_ADDRESS         = C.IFA_ADDRESS
0000000000000000000000000000000000000000;;		IFA_LOCAL           = C.IFA_LOCAL
0000000000000000000000000000000000000000;;		IFA_LABEL           = C.IFA_LABEL
0000000000000000000000000000000000000000;;		IFA_BROADCAST       = C.IFA_BROADCAST
0000000000000000000000000000000000000000;;		IFA_ANYCAST         = C.IFA_ANYCAST
0000000000000000000000000000000000000000;;		IFA_CACHEINFO       = C.IFA_CACHEINFO
0000000000000000000000000000000000000000;;		IFA_MULTICAST       = C.IFA_MULTICAST
0000000000000000000000000000000000000000;;		IFLA_UNSPEC         = C.IFLA_UNSPEC
0000000000000000000000000000000000000000;;		IFLA_ADDRESS        = C.IFLA_ADDRESS
0000000000000000000000000000000000000000;;		IFLA_BROADCAST      = C.IFLA_BROADCAST
0000000000000000000000000000000000000000;;		IFLA_IFNAME         = C.IFLA_IFNAME
0000000000000000000000000000000000000000;;		IFLA_MTU            = C.IFLA_MTU
0000000000000000000000000000000000000000;;		IFLA_LINK           = C.IFLA_LINK
0000000000000000000000000000000000000000;;		IFLA_QDISC          = C.IFLA_QDISC
0000000000000000000000000000000000000000;;		IFLA_STATS          = C.IFLA_STATS
0000000000000000000000000000000000000000;;		IFLA_COST           = C.IFLA_COST
0000000000000000000000000000000000000000;;		IFLA_PRIORITY       = C.IFLA_PRIORITY
0000000000000000000000000000000000000000;;		IFLA_MASTER         = C.IFLA_MASTER
0000000000000000000000000000000000000000;;		IFLA_WIRELESS       = C.IFLA_WIRELESS
0000000000000000000000000000000000000000;;		IFLA_PROTINFO       = C.IFLA_PROTINFO
0000000000000000000000000000000000000000;;		IFLA_TXQLEN         = C.IFLA_TXQLEN
0000000000000000000000000000000000000000;;		IFLA_MAP            = C.IFLA_MAP
0000000000000000000000000000000000000000;;		IFLA_WEIGHT         = C.IFLA_WEIGHT
0000000000000000000000000000000000000000;;		IFLA_OPERSTATE      = C.IFLA_OPERSTATE
0000000000000000000000000000000000000000;;		IFLA_LINKMODE       = C.IFLA_LINKMODE
0000000000000000000000000000000000000000;;		IFLA_LINKINFO       = C.IFLA_LINKINFO
0000000000000000000000000000000000000000;;		IFLA_NET_NS_PID     = C.IFLA_NET_NS_PID
0000000000000000000000000000000000000000;;		IFLA_IFALIAS        = C.IFLA_IFALIAS
0000000000000000000000000000000000000000;;		IFLA_MAX            = C.IFLA_MAX
0000000000000000000000000000000000000000;;		RT_SCOPE_UNIVERSE   = C.RT_SCOPE_UNIVERSE
0000000000000000000000000000000000000000;;		RT_SCOPE_SITE       = C.RT_SCOPE_SITE
0000000000000000000000000000000000000000;;		RT_SCOPE_LINK       = C.RT_SCOPE_LINK
0000000000000000000000000000000000000000;;		RT_SCOPE_HOST       = C.RT_SCOPE_HOST
0000000000000000000000000000000000000000;;		RT_SCOPE_NOWHERE    = C.RT_SCOPE_NOWHERE
0000000000000000000000000000000000000000;;		RT_TABLE_UNSPEC     = C.RT_TABLE_UNSPEC
0000000000000000000000000000000000000000;;		RT_TABLE_COMPAT     = C.RT_TABLE_COMPAT
0000000000000000000000000000000000000000;;		RT_TABLE_DEFAULT    = C.RT_TABLE_DEFAULT
0000000000000000000000000000000000000000;;		RT_TABLE_MAIN       = C.RT_TABLE_MAIN
0000000000000000000000000000000000000000;;		RT_TABLE_LOCAL      = C.RT_TABLE_LOCAL
0000000000000000000000000000000000000000;;		RT_TABLE_MAX        = C.RT_TABLE_MAX
0000000000000000000000000000000000000000;;		RTA_UNSPEC          = C.RTA_UNSPEC
0000000000000000000000000000000000000000;;		RTA_DST             = C.RTA_DST
0000000000000000000000000000000000000000;;		RTA_SRC             = C.RTA_SRC
0000000000000000000000000000000000000000;;		RTA_IIF             = C.RTA_IIF
0000000000000000000000000000000000000000;;		RTA_OIF             = C.RTA_OIF
0000000000000000000000000000000000000000;;		RTA_GATEWAY         = C.RTA_GATEWAY
0000000000000000000000000000000000000000;;		RTA_PRIORITY        = C.RTA_PRIORITY
0000000000000000000000000000000000000000;;		RTA_PREFSRC         = C.RTA_PREFSRC
0000000000000000000000000000000000000000;;		RTA_METRICS         = C.RTA_METRICS
0000000000000000000000000000000000000000;;		RTA_MULTIPATH       = C.RTA_MULTIPATH
0000000000000000000000000000000000000000;;		RTA_FLOW            = C.RTA_FLOW
0000000000000000000000000000000000000000;;		RTA_CACHEINFO       = C.RTA_CACHEINFO
0000000000000000000000000000000000000000;;		RTA_TABLE           = C.RTA_TABLE
0000000000000000000000000000000000000000;;		RTN_UNSPEC          = C.RTN_UNSPEC
0000000000000000000000000000000000000000;;		RTN_UNICAST         = C.RTN_UNICAST
0000000000000000000000000000000000000000;;		RTN_LOCAL           = C.RTN_LOCAL
0000000000000000000000000000000000000000;;		RTN_BROADCAST       = C.RTN_BROADCAST
0000000000000000000000000000000000000000;;		RTN_ANYCAST         = C.RTN_ANYCAST
0000000000000000000000000000000000000000;;		RTN_MULTICAST       = C.RTN_MULTICAST
0000000000000000000000000000000000000000;;		RTN_BLACKHOLE       = C.RTN_BLACKHOLE
0000000000000000000000000000000000000000;;		RTN_UNREACHABLE     = C.RTN_UNREACHABLE
0000000000000000000000000000000000000000;;		RTN_PROHIBIT        = C.RTN_PROHIBIT
0000000000000000000000000000000000000000;;		RTN_THROW           = C.RTN_THROW
0000000000000000000000000000000000000000;;		RTN_NAT             = C.RTN_NAT
0000000000000000000000000000000000000000;;		RTN_XRESOLVE        = C.RTN_XRESOLVE
0000000000000000000000000000000000000000;;		RTNLGRP_NONE        = C.RTNLGRP_NONE
0000000000000000000000000000000000000000;;		RTNLGRP_LINK        = C.RTNLGRP_LINK
0000000000000000000000000000000000000000;;		RTNLGRP_NOTIFY      = C.RTNLGRP_NOTIFY
0000000000000000000000000000000000000000;;		RTNLGRP_NEIGH       = C.RTNLGRP_NEIGH
0000000000000000000000000000000000000000;;		RTNLGRP_TC          = C.RTNLGRP_TC
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_IFADDR = C.RTNLGRP_IPV4_IFADDR
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_MROUTE = C.RTNLGRP_IPV4_MROUTE
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_ROUTE  = C.RTNLGRP_IPV4_ROUTE
0000000000000000000000000000000000000000;;		RTNLGRP_IPV4_RULE   = C.RTNLGRP_IPV4_RULE
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_IFADDR = C.RTNLGRP_IPV6_IFADDR
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_MROUTE = C.RTNLGRP_IPV6_MROUTE
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_ROUTE  = C.RTNLGRP_IPV6_ROUTE
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_IFINFO = C.RTNLGRP_IPV6_IFINFO
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_PREFIX = C.RTNLGRP_IPV6_PREFIX
0000000000000000000000000000000000000000;;		RTNLGRP_IPV6_RULE   = C.RTNLGRP_IPV6_RULE
0000000000000000000000000000000000000000;;		RTNLGRP_ND_USEROPT  = C.RTNLGRP_ND_USEROPT
0000000000000000000000000000000000000000;;		SizeofNlMsghdr      = C.sizeof_struct_nlmsghdr
0000000000000000000000000000000000000000;;		SizeofNlMsgerr      = C.sizeof_struct_nlmsgerr
0000000000000000000000000000000000000000;;		SizeofRtGenmsg      = C.sizeof_struct_rtgenmsg
0000000000000000000000000000000000000000;;		SizeofNlAttr        = C.sizeof_struct_nlattr
0000000000000000000000000000000000000000;;		SizeofRtAttr        = C.sizeof_struct_rtattr
0000000000000000000000000000000000000000;;		SizeofIfInfomsg     = C.sizeof_struct_ifinfomsg
0000000000000000000000000000000000000000;;		SizeofIfAddrmsg     = C.sizeof_struct_ifaddrmsg
0000000000000000000000000000000000000000;;		SizeofRtMsg         = C.sizeof_struct_rtmsg
0000000000000000000000000000000000000000;;		SizeofRtNexthop     = C.sizeof_struct_rtnexthop
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlMsghdr C.struct_nlmsghdr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlMsgerr C.struct_nlmsgerr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtGenmsg C.struct_rtgenmsg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NlAttr C.struct_nlattr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtAttr C.struct_rtattr
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfInfomsg C.struct_ifinfomsg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IfAddrmsg C.struct_ifaddrmsg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtMsg C.struct_rtmsg
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RtNexthop C.struct_rtnexthop
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Linux socket filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SizeofSockFilter = C.sizeof_struct_sock_filter
0000000000000000000000000000000000000000;;		SizeofSockFprog  = C.sizeof_struct_sock_fprog
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockFilter C.struct_sock_filter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SockFprog C.struct_sock_fprog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Inotify
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InotifyEvent C.struct_inotify_event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const SizeofInotifyEvent = C.sizeof_struct_inotify_event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Ptrace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Register structures
0000000000000000000000000000000000000000;;	type PtraceRegs C.PtraceRegs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Structures contained in PtraceRegs on s390x (exported by mkpost.go)
0000000000000000000000000000000000000000;;	type ptracePsw C.ptracePsw
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ptraceFpregs C.ptraceFpregs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ptracePer C.ptracePer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Misc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdSet C.fd_set
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sysinfo_t C.struct_sysinfo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Utsname C.struct_utsname
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ustat_t C.struct_ustat
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EpollEvent C.struct_my_epoll_event
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AT_FDCWD            = C.AT_FDCWD
0000000000000000000000000000000000000000;;		AT_REMOVEDIR        = C.AT_REMOVEDIR
0000000000000000000000000000000000000000;;		AT_SYMLINK_FOLLOW   = C.AT_SYMLINK_FOLLOW
0000000000000000000000000000000000000000;;		AT_SYMLINK_NOFOLLOW = C.AT_SYMLINK_NOFOLLOW
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PollFd C.struct_pollfd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		POLLIN    = C.POLLIN
0000000000000000000000000000000000000000;;		POLLPRI   = C.POLLPRI
0000000000000000000000000000000000000000;;		POLLOUT   = C.POLLOUT
0000000000000000000000000000000000000000;;		POLLRDHUP = C.POLLRDHUP
0000000000000000000000000000000000000000;;		POLLERR   = C.POLLERR
0000000000000000000000000000000000000000;;		POLLHUP   = C.POLLHUP
0000000000000000000000000000000000000000;;		POLLNVAL  = C.POLLNVAL
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sigset_t C.sigset_t
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Terminal handling
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Termios C.termios_t
