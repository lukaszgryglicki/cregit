0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4a9e046fe7ca56be84d64b95d753319ba2c1da84;;	
0000000000000000000000000000000000000000;;	// +build linux
0000000000000000000000000000000000000000;;	// +build mips64 mips64le
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package unix
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Linux introduced getdents64 syscall for N64 ABI only in 3.10
0000000000000000000000000000000000000000;;	// (May 21 2013, rev dec33abaafc89bcbd78f85fad0513170415a26d5),
0000000000000000000000000000000000000000;;	// to support older kernels, we have to use getdents for mips64.
0000000000000000000000000000000000000000;;	// Also note that struct dirent is different for these two.
0000000000000000000000000000000000000000;;	// Lookup linux_dirent{,64} in kernel source code for details.
0000000000000000000000000000000000000000;;	const _SYS_getdents = SYS_GETDENTS
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	EpollWait(epfd int, events []EpollEvent, msec int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	Fchown(fd int, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Fstatfs(fd int, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	Ftruncate(fd int, length int64) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getegid() (egid int)
0000000000000000000000000000000000000000;;	//sysnb	Geteuid() (euid int)
0000000000000000000000000000000000000000;;	//sysnb	Getgid() (gid int)
0000000000000000000000000000000000000000;;	//sysnb	Getrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Getuid() (uid int)
0000000000000000000000000000000000000000;;	//sys	Lchown(path string, uid int, gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Listen(s int, n int) (err error)
0000000000000000000000000000000000000000;;	//sys	Pause() (err error)
0000000000000000000000000000000000000000;;	//sys	Pread(fd int, p []byte, offset int64) (n int, err error) = SYS_PREAD64
0000000000000000000000000000000000000000;;	//sys	Pwrite(fd int, p []byte, offset int64) (n int, err error) = SYS_PWRITE64
0000000000000000000000000000000000000000;;	//sys	Seek(fd int, offset int64, whence int) (off int64, err error) = SYS_LSEEK
0000000000000000000000000000000000000000;;	//sys	Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err error) = SYS_PSELECT6
0000000000000000000000000000000000000000;;	//sys	sendfile(outfd int, infd int, offset *int64, count int) (written int, err error)
0000000000000000000000000000000000000000;;	//sys	Setfsgid(gid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Setfsuid(uid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setregid(rgid int, egid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresgid(rgid int, egid int, sgid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setresuid(ruid int, euid int, suid int) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setrlimit(resource int, rlim *Rlimit) (err error)
0000000000000000000000000000000000000000;;	//sysnb	Setreuid(ruid int, euid int) (err error)
0000000000000000000000000000000000000000;;	//sys	Shutdown(fd int, how int) (err error)
0000000000000000000000000000000000000000;;	//sys	Splice(rfd int, roff *int64, wfd int, woff *int64, len int, flags int) (n int64, err error)
0000000000000000000000000000000000000000;;	//sys	Statfs(path string, buf *Statfs_t) (err error)
0000000000000000000000000000000000000000;;	//sys	SyncFileRange(fd int, off int64, n int64, flags int) (err error)
0000000000000000000000000000000000000000;;	//sys	Truncate(path string, length int64) (err error)
0000000000000000000000000000000000000000;;	//sys	accept(s int, rsa *RawSockaddrAny, addrlen *_Socklen) (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	accept4(s int, rsa *RawSockaddrAny, addrlen *_Socklen, flags int) (fd int, err error)
0000000000000000000000000000000000000000;;	//sys	bind(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	connect(s int, addr unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getgroups(n int, list *_Gid_t) (nn int, err error)
0000000000000000000000000000000000000000;;	//sysnb	setgroups(n int, list *_Gid_t) (err error)
0000000000000000000000000000000000000000;;	//sys	getsockopt(s int, level int, name int, val unsafe.Pointer, vallen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	setsockopt(s int, level int, name int, val unsafe.Pointer, vallen uintptr) (err error)
0000000000000000000000000000000000000000;;	//sysnb	socket(domain int, typ int, proto int) (fd int, err error)
0000000000000000000000000000000000000000;;	//sysnb	socketpair(domain int, typ int, proto int, fd *[2]int32) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getpeername(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sysnb	getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	sendto(s int, buf []byte, flags int, to unsafe.Pointer, addrlen _Socklen) (err error)
0000000000000000000000000000000000000000;;	//sys	recvmsg(s int, msg *Msghdr, flags int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	sendmsg(s int, msg *Msghdr, flags int) (n int, err error)
0000000000000000000000000000000000000000;;	//sys	mmap(addr uintptr, length uintptr, prot int, flags int, fd int, offset int64) (xaddr uintptr, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Getpagesize() int { return 65536 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb	Gettimeofday(tv *Timeval) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Time(t *Time_t) (tt Time_t, err error) {
0000000000000000000000000000000000000000;;		var tv Timeval
0000000000000000000000000000000000000000;;		err = Gettimeofday(&tv)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t != nil {
0000000000000000000000000000000000000000;;			*t = Time_t(tv.Sec)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Time_t(tv.Sec), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	Utime(path string, buf *Utimbuf) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func TimespecToNsec(ts Timespec) int64 { return int64(ts.Sec)*1e9 + int64(ts.Nsec) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimespec(nsec int64) (ts Timespec) {
0000000000000000000000000000000000000000;;		ts.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		ts.Nsec = nsec % 1e9
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NsecToTimeval(nsec int64) (tv Timeval) {
0000000000000000000000000000000000000000;;		nsec += 999 // round up to microsecond
0000000000000000000000000000000000000000;;		tv.Sec = nsec / 1e9
0000000000000000000000000000000000000000;;		tv.Usec = nsec % 1e9 / 1e3
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe(p []int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, 0)
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sysnb pipe2(p *[2]_C_int, flags int) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Pipe2(p []int, flags int) (err error) {
0000000000000000000000000000000000000000;;		if len(p) != 2 {
0000000000000000000000000000000000000000;;			return EINVAL
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var pp [2]_C_int
0000000000000000000000000000000000000000;;		err = pipe2(&pp, flags)
0000000000000000000000000000000000000000;;		p[0] = int(pp[0])
0000000000000000000000000000000000000000;;		p[1] = int(pp[1])
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Ioperm(from int, num int, on int) (err error) {
0000000000000000000000000000000000000000;;		return ENOSYS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Iopl(level int) (err error) {
0000000000000000000000000000000000000000;;		return ENOSYS
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type stat_t struct {
0000000000000000000000000000000000000000;;		Dev        uint32
0000000000000000000000000000000000000000;;		Pad0       [3]int32
0000000000000000000000000000000000000000;;		Ino        uint64
0000000000000000000000000000000000000000;;		Mode       uint32
0000000000000000000000000000000000000000;;		Nlink      uint32
0000000000000000000000000000000000000000;;		Uid        uint32
0000000000000000000000000000000000000000;;		Gid        uint32
0000000000000000000000000000000000000000;;		Rdev       uint32
0000000000000000000000000000000000000000;;		Pad1       [3]uint32
0000000000000000000000000000000000000000;;		Size       int64
0000000000000000000000000000000000000000;;		Atime      uint32
0000000000000000000000000000000000000000;;		Atime_nsec uint32
0000000000000000000000000000000000000000;;		Mtime      uint32
0000000000000000000000000000000000000000;;		Mtime_nsec uint32
0000000000000000000000000000000000000000;;		Ctime      uint32
0000000000000000000000000000000000000000;;		Ctime_nsec uint32
0000000000000000000000000000000000000000;;		Blksize    uint32
0000000000000000000000000000000000000000;;		Pad2       uint32
0000000000000000000000000000000000000000;;		Blocks     int64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	fstat(fd int, st *stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	lstat(path string, st *stat_t) (err error)
0000000000000000000000000000000000000000;;	//sys	stat(path string, st *stat_t) (err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Fstat(fd int, s *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		st := &stat_t{}
0000000000000000000000000000000000000000;;		err = fstat(fd, st)
0000000000000000000000000000000000000000;;		fillStat_t(s, st)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Lstat(path string, s *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		st := &stat_t{}
0000000000000000000000000000000000000000;;		err = lstat(path, st)
0000000000000000000000000000000000000000;;		fillStat_t(s, st)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Stat(path string, s *Stat_t) (err error) {
0000000000000000000000000000000000000000;;		st := &stat_t{}
0000000000000000000000000000000000000000;;		err = stat(path, st)
0000000000000000000000000000000000000000;;		fillStat_t(s, st)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func fillStat_t(s *Stat_t, st *stat_t) {
0000000000000000000000000000000000000000;;		s.Dev = st.Dev
0000000000000000000000000000000000000000;;		s.Ino = st.Ino
0000000000000000000000000000000000000000;;		s.Mode = st.Mode
0000000000000000000000000000000000000000;;		s.Nlink = st.Nlink
0000000000000000000000000000000000000000;;		s.Uid = st.Uid
0000000000000000000000000000000000000000;;		s.Gid = st.Gid
0000000000000000000000000000000000000000;;		s.Rdev = st.Rdev
0000000000000000000000000000000000000000;;		s.Size = st.Size
0000000000000000000000000000000000000000;;		s.Atim = Timespec{int64(st.Atime), int64(st.Atime_nsec)}
0000000000000000000000000000000000000000;;		s.Mtim = Timespec{int64(st.Mtime), int64(st.Mtime_nsec)}
0000000000000000000000000000000000000000;;		s.Ctim = Timespec{int64(st.Ctime), int64(st.Ctime_nsec)}
0000000000000000000000000000000000000000;;		s.Blksize = st.Blksize
0000000000000000000000000000000000000000;;		s.Blocks = st.Blocks
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) PC() uint64 { return r.Regs[64] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *PtraceRegs) SetPC(pc uint64) { r.Regs[64] = pc }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (iov *Iovec) SetLen(length int) {
0000000000000000000000000000000000000000;;		iov.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (msghdr *Msghdr) SetControllen(length int) {
0000000000000000000000000000000000000000;;		msghdr.Controllen = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (cmsg *Cmsghdr) SetLen(length int) {
0000000000000000000000000000000000000000;;		cmsg.Len = uint64(length)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys	poll(fds *PollFd, nfds int, timeout int) (n int, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Poll(fds []PollFd, timeout int) (n int, err error) {
0000000000000000000000000000000000000000;;		if len(fds) == 0 {
0000000000000000000000000000000000000000;;			return poll(nil, 0, timeout)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return poll(&fds[0], len(fds), timeout)
0000000000000000000000000000000000000000;;	}
