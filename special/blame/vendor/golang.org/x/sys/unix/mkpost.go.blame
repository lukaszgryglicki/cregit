0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4a9e046fe7ca56be84d64b95d753319ba2c1da84;;	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// mkpost processes the output of cgo -godefs to
0000000000000000000000000000000000000000;;	// modify the generated types. It is used to clean up
0000000000000000000000000000000000000000;;	// the sys API in an architecture specific manner.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// mkpost is run after cgo -godefs by mkall.sh.
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"go/format"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadAll(os.Stdin)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := string(b)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		goarch := os.Getenv("GOARCH")
0000000000000000000000000000000000000000;;		goos := os.Getenv("GOOS")
0000000000000000000000000000000000000000;;		if goarch == "s390x" && goos == "linux" {
0000000000000000000000000000000000000000;;			// Export the types of PtraceRegs fields.
0000000000000000000000000000000000000000;;			re := regexp.MustCompile("ptrace(Psw|Fpregs|Per)")
0000000000000000000000000000000000000000;;			s = re.ReplaceAllString(s, "Ptrace$1")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Replace padding fields inserted by cgo with blank identifiers.
0000000000000000000000000000000000000000;;			re = regexp.MustCompile("Pad_cgo[A-Za-z0-9_]*")
0000000000000000000000000000000000000000;;			s = re.ReplaceAllString(s, "_")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Replace other unwanted fields with blank identifiers.
0000000000000000000000000000000000000000;;			re = regexp.MustCompile("X_[A-Za-z0-9_]*")
0000000000000000000000000000000000000000;;			s = re.ReplaceAllString(s, "_")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Replace the control_regs union with a blank identifier for now.
0000000000000000000000000000000000000000;;			re = regexp.MustCompile("(Control_regs)\\s+\\[0\\]uint64")
0000000000000000000000000000000000000000;;			s = re.ReplaceAllString(s, "_ [0]uint64")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// gofmt
0000000000000000000000000000000000000000;;		b, err = format.Source([]byte(s))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Append this command to the header to show where the new file
0000000000000000000000000000000000000000;;		// came from.
0000000000000000000000000000000000000000;;		re := regexp.MustCompile("(cgo -godefs [a-zA-Z0-9_]+\\.go.*)")
0000000000000000000000000000000000000000;;		b = re.ReplaceAll(b, []byte("$1 | go run mkpost.go"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("%s", b)
0000000000000000000000000000000000000000;;	}
