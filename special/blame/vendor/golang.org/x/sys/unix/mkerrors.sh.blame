0000000000000000000000000000000000000000;;	#!/usr/bin/env bash
0000000000000000000000000000000000000000;;	# Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	# Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	# license that can be found in the LICENSE file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Generate Go code listing errors and other #defined constant
0000000000000000000000000000000000000000;;	# values (ENAMETOOLONG etc.), by asking the preprocessor
0000000000000000000000000000000000000000;;	# about the definitions.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	unset LANG
0000000000000000000000000000000000000000;;	export LC_ALL=C
0000000000000000000000000000000000000000;;	export LC_CTYPE=C
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if test -z "$GOARCH" -o -z "$GOOS"; then
0000000000000000000000000000000000000000;;		echo 1>&2 "GOARCH or GOOS not defined in environment"
0000000000000000000000000000000000000000;;		exit 1
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	CC=${CC:-cc}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	if [[ "$GOOS" -eq "solaris" ]]; then
0000000000000000000000000000000000000000;;		# Assumes GNU versions of utilities in PATH.
0000000000000000000000000000000000000000;;		export PATH=/usr/gnu/bin:$PATH
0000000000000000000000000000000000000000;;	fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	uname=$(uname)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_Darwin='
0000000000000000000000000000000000000000;;	#define _DARWIN_C_SOURCE
0000000000000000000000000000000000000000;;	#define KERNEL
0000000000000000000000000000000000000000;;	#define _DARWIN_USE_64_BIT_INODE
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/ptrace.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/sysctl.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_DragonFly='
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/sysctl.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <sys/ioctl.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <net/ip_mroute/ip_mroute.h>
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_FreeBSD='
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/sysctl.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <sys/ioctl.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip_mroute.h>
0000000000000000000000000000000000000000;;	#include <sys/extattr.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#if __FreeBSD__ >= 10
0000000000000000000000000000000000000000;;	#define IFT_CARP	0xf8	// IFT_CARP is deprecated in FreeBSD 10
0000000000000000000000000000000000000000;;	#undef SIOCAIFADDR
0000000000000000000000000000000000000000;;	#define SIOCAIFADDR	_IOW(105, 26, struct oifaliasreq)	// ifaliasreq contains if_data
0000000000000000000000000000000000000000;;	#undef SIOCSIFPHYADDR
0000000000000000000000000000000000000000;;	#define SIOCSIFPHYADDR	_IOW(105, 70, struct oifaliasreq)	// ifaliasreq contains if_data
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_Linux='
0000000000000000000000000000000000000000;;	#define _LARGEFILE_SOURCE
0000000000000000000000000000000000000000;;	#define _LARGEFILE64_SOURCE
0000000000000000000000000000000000000000;;	#ifndef __LP64__
0000000000000000000000000000000000000000;;	#define _FILE_OFFSET_BITS 64
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	#define _GNU_SOURCE
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#include <bits/sockaddr.h>
0000000000000000000000000000000000000000;;	#include <sys/epoll.h>
0000000000000000000000000000000000000000;;	#include <sys/inotify.h>
0000000000000000000000000000000000000000;;	#include <sys/ioctl.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/mount.h>
0000000000000000000000000000000000000000;;	#include <sys/prctl.h>
0000000000000000000000000000000000000000;;	#include <sys/stat.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/time.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <linux/if.h>
0000000000000000000000000000000000000000;;	#include <linux/if_arp.h>
0000000000000000000000000000000000000000;;	#include <linux/if_ether.h>
0000000000000000000000000000000000000000;;	#include <linux/if_tun.h>
0000000000000000000000000000000000000000;;	#include <linux/if_packet.h>
0000000000000000000000000000000000000000;;	#include <linux/if_addr.h>
0000000000000000000000000000000000000000;;	#include <linux/filter.h>
0000000000000000000000000000000000000000;;	#include <linux/netlink.h>
0000000000000000000000000000000000000000;;	#include <linux/reboot.h>
0000000000000000000000000000000000000000;;	#include <linux/rtnetlink.h>
0000000000000000000000000000000000000000;;	#include <linux/ptrace.h>
0000000000000000000000000000000000000000;;	#include <linux/sched.h>
0000000000000000000000000000000000000000;;	#include <linux/wait.h>
0000000000000000000000000000000000000000;;	#include <linux/icmpv6.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <asm/termbits.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#ifndef MSG_FASTOPEN
0000000000000000000000000000000000000000;;	#define MSG_FASTOPEN    0x20000000
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#ifndef PTRACE_GETREGS
0000000000000000000000000000000000000000;;	#define PTRACE_GETREGS	0xc
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#ifndef PTRACE_SETREGS
0000000000000000000000000000000000000000;;	#define PTRACE_SETREGS	0xd
0000000000000000000000000000000000000000;;	#endif
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_NetBSD='
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/sysctl.h>
0000000000000000000000000000000000000000;;	#include <sys/termios.h>
0000000000000000000000000000000000000000;;	#include <sys/ttycom.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/in_systm.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip_mroute.h>
0000000000000000000000000000000000000000;;	#include <netinet/if_ether.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Needed since <sys/param.h> refers to it...
0000000000000000000000000000000000000000;;	#define schedppq 1
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_OpenBSD='
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/param.h>
0000000000000000000000000000000000000000;;	#include <sys/event.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/sysctl.h>
0000000000000000000000000000000000000000;;	#include <sys/termios.h>
0000000000000000000000000000000000000000;;	#include <sys/ttycom.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/if_var.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/in_systm.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip_mroute.h>
0000000000000000000000000000000000000000;;	#include <netinet/if_ether.h>
0000000000000000000000000000000000000000;;	#include <net/if_bridge.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// We keep some constants not supported in OpenBSD 5.5 and beyond for
0000000000000000000000000000000000000000;;	// the promise of compatibility.
0000000000000000000000000000000000000000;;	#define EMUL_ENABLED		0x1
0000000000000000000000000000000000000000;;	#define EMUL_NATIVE		0x2
0000000000000000000000000000000000000000;;	#define IPV6_FAITH		0x1d
0000000000000000000000000000000000000000;;	#define IPV6_OPTIONS		0x1
0000000000000000000000000000000000000000;;	#define IPV6_RTHDR_STRICT	0x1
0000000000000000000000000000000000000000;;	#define IPV6_SOCKOPT_RESERVED1	0x3
0000000000000000000000000000000000000000;;	#define SIOCGIFGENERIC		0xc020693a
0000000000000000000000000000000000000000;;	#define SIOCSIFGENERIC		0x80206939
0000000000000000000000000000000000000000;;	#define WALTSIG			0x4
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes_SunOS='
0000000000000000000000000000000000000000;;	#include <limits.h>
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <sys/sockio.h>
0000000000000000000000000000000000000000;;	#include <sys/mman.h>
0000000000000000000000000000000000000000;;	#include <sys/wait.h>
0000000000000000000000000000000000000000;;	#include <sys/ioctl.h>
0000000000000000000000000000000000000000;;	#include <net/bpf.h>
0000000000000000000000000000000000000000;;	#include <net/if.h>
0000000000000000000000000000000000000000;;	#include <net/if_arp.h>
0000000000000000000000000000000000000000;;	#include <net/if_types.h>
0000000000000000000000000000000000000000;;	#include <net/route.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <termios.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip_mroute.h>
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	includes='
0000000000000000000000000000000000000000;;	#include <sys/types.h>
0000000000000000000000000000000000000000;;	#include <sys/file.h>
0000000000000000000000000000000000000000;;	#include <fcntl.h>
0000000000000000000000000000000000000000;;	#include <dirent.h>
0000000000000000000000000000000000000000;;	#include <sys/socket.h>
0000000000000000000000000000000000000000;;	#include <netinet/in.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip.h>
0000000000000000000000000000000000000000;;	#include <netinet/ip6.h>
0000000000000000000000000000000000000000;;	#include <netinet/tcp.h>
0000000000000000000000000000000000000000;;	#include <errno.h>
0000000000000000000000000000000000000000;;	#include <sys/signal.h>
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	#include <sys/resource.h>
0000000000000000000000000000000000000000;;	#include <time.h>
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	ccflags="$@"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Write go tool cgo -godefs input.
0000000000000000000000000000000000000000;;	(
0000000000000000000000000000000000000000;;		echo package unix
0000000000000000000000000000000000000000;;		echo
0000000000000000000000000000000000000000;;		echo '/*'
0000000000000000000000000000000000000000;;		indirect="includes_$(uname)"
0000000000000000000000000000000000000000;;		echo "${!indirect} $includes"
0000000000000000000000000000000000000000;;		echo '*/'
0000000000000000000000000000000000000000;;		echo 'import "C"'
0000000000000000000000000000000000000000;;		echo 'import "syscall"'
0000000000000000000000000000000000000000;;		echo
0000000000000000000000000000000000000000;;		echo 'const ('
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# The gcc command line prints all the #defines
0000000000000000000000000000000000000000;;		# it encounters while processing the input
0000000000000000000000000000000000000000;;		echo "${!indirect} $includes" | $CC -x c - -E -dM $ccflags |
0000000000000000000000000000000000000000;;		awk '
0000000000000000000000000000000000000000;;			$1 != "#define" || $2 ~ /\(/ || $3 == "" {next}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			$2 ~ /^E([ABCD]X|[BIS]P|[SD]I|S|FL)$/ {next}  # 386 registers
0000000000000000000000000000000000000000;;			$2 ~ /^(SIGEV_|SIGSTKSZ|SIGRT(MIN|MAX))/ {next}
0000000000000000000000000000000000000000;;			$2 ~ /^(SCM_SRCRT)$/ {next}
0000000000000000000000000000000000000000;;			$2 ~ /^(MAP_FAILED)$/ {next}
0000000000000000000000000000000000000000;;			$2 ~ /^ELF_.*$/ {next}# <asm/elf.h> contains ELF_ARCH, etc.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			$2 ~ /^EXTATTR_NAMESPACE_NAMES/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^EXTATTR_NAMESPACE_[A-Z]+_STRING/ {next}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			$2 !~ /^ETH_/ &&
0000000000000000000000000000000000000000;;			$2 !~ /^EPROC_/ &&
0000000000000000000000000000000000000000;;			$2 !~ /^EQUIV_/ &&
0000000000000000000000000000000000000000;;			$2 !~ /^EXPR_/ &&
0000000000000000000000000000000000000000;;			$2 ~ /^E[A-Z0-9_]+$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^B[0-9_]+$/ ||
0000000000000000000000000000000000000000;;			$2 == "BOTHER" ||
0000000000000000000000000000000000000000;;			$2 ~ /^CI?BAUD(EX)?$/ ||
0000000000000000000000000000000000000000;;			$2 == "IBSHIFT" ||
0000000000000000000000000000000000000000;;			$2 ~ /^V[A-Z0-9]+$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^CS[A-Z0-9]/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^I(SIG|CANON|CRNL|UCLC|EXTEN|MAXBEL|STRIP|UTF8)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^IGN/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^IX(ON|ANY|OFF)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^IN(LCR|PCK)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /(^FLU?SH)|(FLU?SH$)/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^C(LOCAL|READ|MSPAR|RTSCTS)$/ ||
0000000000000000000000000000000000000000;;			$2 == "BRKINT" ||
0000000000000000000000000000000000000000;;			$2 == "HUPCL" ||
0000000000000000000000000000000000000000;;			$2 == "PENDIN" ||
0000000000000000000000000000000000000000;;			$2 == "TOSTOP" ||
0000000000000000000000000000000000000000;;			$2 == "XCASE" ||
0000000000000000000000000000000000000000;;			$2 == "ALTWERASE" ||
0000000000000000000000000000000000000000;;			$2 == "NOKERNINFO" ||
0000000000000000000000000000000000000000;;			$2 ~ /^PAR/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^SIG[^_]/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^O[CNPFPL][A-Z]+[^_][A-Z]+$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^(NL|CR|TAB|BS|VT|FF)DLY$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^(NL|CR|TAB|BS|VT|FF)[0-9]$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^O?XTABS$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TC[IO](ON|OFF)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^IN_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^LOCK_(SH|EX|NB|UN)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^(AF|SOCK|SO|SOL|IPPROTO|IP|IPV6|ICMP6|TCP|EVFILT|NOTE|EV|SHUT|PROT|MAP|PACKET|MSG|SCM|MCL|DT|MADV|PR)_/ ||
0000000000000000000000000000000000000000;;			$2 == "ICMPV6_FILTER" ||
0000000000000000000000000000000000000000;;			$2 == "SOMAXCONN" ||
0000000000000000000000000000000000000000;;			$2 == "NAME_MAX" ||
0000000000000000000000000000000000000000;;			$2 == "IFNAMSIZ" ||
0000000000000000000000000000000000000000;;			$2 ~ /^CTL_(MAXNAME|NET|QUERY)$/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^SYSCTL_VERS/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^(MS|MNT)_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TUN(SET|GET|ATTACH|DETACH)/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^(O|F|FD|NAME|S|PTRACE|PT)_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^LINUX_REBOOT_CMD_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^LINUX_REBOOT_MAGIC[12]$/ ||
0000000000000000000000000000000000000000;;			$2 !~ "NLA_TYPE_MASK" &&
0000000000000000000000000000000000000000;;			$2 ~ /^(NETLINK|NLM|NLMSG|NLA|IFA|IFAN|RT|RTCF|RTN|RTPROT|RTNH|ARPHRD|ETH_P)_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^SIOC/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TIOC/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TCGET/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TCSET/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^TC(FLSH|SBRKP?|XONC)$/ ||
0000000000000000000000000000000000000000;;			$2 !~ "RTF_BITS" &&
0000000000000000000000000000000000000000;;			$2 ~ /^(IFF|IFT|NET_RT|RTM|RTF|RTV|RTA|RTAX)_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^BIOC/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^RUSAGE_(SELF|CHILDREN|THREAD)/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^RLIMIT_(AS|CORE|CPU|DATA|FSIZE|NOFILE|STACK)|RLIM_INFINITY/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^PRIO_(PROCESS|PGRP|USER)/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^CLONE_[A-Z_]+/ ||
0000000000000000000000000000000000000000;;			$2 !~ /^(BPF_TIMEVAL)$/ &&
0000000000000000000000000000000000000000;;			$2 ~ /^(BPF|DLT)_/ ||
0000000000000000000000000000000000000000;;			$2 ~ /^CLOCK_/ ||
0000000000000000000000000000000000000000;;			$2 !~ "WMESGLEN" &&
0000000000000000000000000000000000000000;;			$2 ~ /^W[A-Z0-9]+$/ {printf("\t%s = C.%s\n", $2, $2)}
0000000000000000000000000000000000000000;;			$2 ~ /^__WCOREFLAG$/ {next}
0000000000000000000000000000000000000000;;			$2 ~ /^__W[A-Z0-9]+$/ {printf("\t%s = C.%s\n", substr($2,3), $2)}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			{next}
0000000000000000000000000000000000000000;;		' | sort
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		echo ')'
0000000000000000000000000000000000000000;;	) >_const.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Pull out the error names for later.
0000000000000000000000000000000000000000;;	errors=$(
0000000000000000000000000000000000000000;;		echo '#include <errno.h>' | $CC -x c - -E -dM $ccflags |
0000000000000000000000000000000000000000;;		awk '$1=="#define" && $2 ~ /^E[A-Z0-9_]+$/ { print $2 }' |
0000000000000000000000000000000000000000;;		sort
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Pull out the signal names for later.
0000000000000000000000000000000000000000;;	signals=$(
0000000000000000000000000000000000000000;;		echo '#include <signal.h>' | $CC -x c - -E -dM $ccflags |
0000000000000000000000000000000000000000;;		awk '$1=="#define" && $2 ~ /^SIG[A-Z0-9]+$/ { print $2 }' |
0000000000000000000000000000000000000000;;		egrep -v '(SIGSTKSIZE|SIGSTKSZ|SIGRT)' |
0000000000000000000000000000000000000000;;		sort
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Again, writing regexps to a file.
0000000000000000000000000000000000000000;;	echo '#include <errno.h>' | $CC -x c - -E -dM $ccflags |
0000000000000000000000000000000000000000;;		awk '$1=="#define" && $2 ~ /^E[A-Z0-9_]+$/ { print "^\t" $2 "[ \t]*=" }' |
0000000000000000000000000000000000000000;;		sort >_error.grep
0000000000000000000000000000000000000000;;	echo '#include <signal.h>' | $CC -x c - -E -dM $ccflags |
0000000000000000000000000000000000000000;;		awk '$1=="#define" && $2 ~ /^SIG[A-Z0-9]+$/ { print "^\t" $2 "[ \t]*=" }' |
0000000000000000000000000000000000000000;;		egrep -v '(SIGSTKSIZE|SIGSTKSZ|SIGRT)' |
0000000000000000000000000000000000000000;;		sort >_signal.grep
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo '// mkerrors.sh' "$@"
0000000000000000000000000000000000000000;;	echo '// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT'
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo "// +build ${GOARCH},${GOOS}"
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	go tool cgo -godefs -- "$@" _const.go >_error.out
0000000000000000000000000000000000000000;;	cat _error.out | grep -vf _error.grep | grep -vf _signal.grep
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo '// Errors'
0000000000000000000000000000000000000000;;	echo 'const ('
0000000000000000000000000000000000000000;;	cat _error.out | grep -f _error.grep | sed 's/=\(.*\)/= syscall.Errno(\1)/'
0000000000000000000000000000000000000000;;	echo ')'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	echo
0000000000000000000000000000000000000000;;	echo '// Signals'
0000000000000000000000000000000000000000;;	echo 'const ('
0000000000000000000000000000000000000000;;	cat _error.out | grep -f _signal.grep | sed 's/=\(.*\)/= syscall.Signal(\1)/'
0000000000000000000000000000000000000000;;	echo ')'
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Run C program to print error and syscall strings.
0000000000000000000000000000000000000000;;	(
0000000000000000000000000000000000000000;;		echo -E "
0000000000000000000000000000000000000000;;	#include <stdio.h>
0000000000000000000000000000000000000000;;	#include <stdlib.h>
0000000000000000000000000000000000000000;;	#include <errno.h>
0000000000000000000000000000000000000000;;	#include <ctype.h>
0000000000000000000000000000000000000000;;	#include <string.h>
0000000000000000000000000000000000000000;;	#include <signal.h>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#define nelem(x) (sizeof(x)/sizeof((x)[0]))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	enum { A = 'A', Z = 'Z', a = 'a', z = 'z' }; // avoid need for single quotes below
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	int errors[] = {
0000000000000000000000000000000000000000;;	"
0000000000000000000000000000000000000000;;		for i in $errors
0000000000000000000000000000000000000000;;		do
0000000000000000000000000000000000000000;;			echo -E '	'$i,
0000000000000000000000000000000000000000;;		done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		echo -E "
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	int signals[] = {
0000000000000000000000000000000000000000;;	"
0000000000000000000000000000000000000000;;		for i in $signals
0000000000000000000000000000000000000000;;		do
0000000000000000000000000000000000000000;;			echo -E '	'$i,
0000000000000000000000000000000000000000;;		done
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		# Use -E because on some systems bash builtin interprets \n itself.
0000000000000000000000000000000000000000;;		echo -E '
0000000000000000000000000000000000000000;;	};
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	static int
0000000000000000000000000000000000000000;;	intcmp(const void *a, const void *b)
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		return *(int*)a - *(int*)b;
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	int
0000000000000000000000000000000000000000;;	main(void)
0000000000000000000000000000000000000000;;	{
0000000000000000000000000000000000000000;;		int i, j, e;
0000000000000000000000000000000000000000;;		char buf[1024], *p;
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		printf("\n\n// Error table\n");
0000000000000000000000000000000000000000;;		printf("var errors = [...]string {\n");
0000000000000000000000000000000000000000;;		qsort(errors, nelem(errors), sizeof errors[0], intcmp);
0000000000000000000000000000000000000000;;		for(i=0; i<nelem(errors); i++) {
0000000000000000000000000000000000000000;;			e = errors[i];
0000000000000000000000000000000000000000;;			if(i > 0 && errors[i-1] == e)
0000000000000000000000000000000000000000;;				continue;
0000000000000000000000000000000000000000;;			strcpy(buf, strerror(e));
0000000000000000000000000000000000000000;;			// lowercase first letter: Bad -> bad, but STREAM -> STREAM.
0000000000000000000000000000000000000000;;			if(A <= buf[0] && buf[0] <= Z && a <= buf[1] && buf[1] <= z)
0000000000000000000000000000000000000000;;				buf[0] += a - A;
0000000000000000000000000000000000000000;;			printf("\t%d: \"%s\",\n", e, buf);
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printf("}\n\n");
0000000000000000000000000000000000000000;;		
0000000000000000000000000000000000000000;;		printf("\n\n// Signal table\n");
0000000000000000000000000000000000000000;;		printf("var signals = [...]string {\n");
0000000000000000000000000000000000000000;;		qsort(signals, nelem(signals), sizeof signals[0], intcmp);
0000000000000000000000000000000000000000;;		for(i=0; i<nelem(signals); i++) {
0000000000000000000000000000000000000000;;			e = signals[i];
0000000000000000000000000000000000000000;;			if(i > 0 && signals[i-1] == e)
0000000000000000000000000000000000000000;;				continue;
0000000000000000000000000000000000000000;;			strcpy(buf, strsignal(e));
0000000000000000000000000000000000000000;;			// lowercase first letter: Bad -> bad, but STREAM -> STREAM.
0000000000000000000000000000000000000000;;			if(A <= buf[0] && buf[0] <= Z && a <= buf[1] && buf[1] <= z)
0000000000000000000000000000000000000000;;				buf[0] += a - A;
0000000000000000000000000000000000000000;;			// cut trailing : number.
0000000000000000000000000000000000000000;;			p = strrchr(buf, ":"[0]);
0000000000000000000000000000000000000000;;			if(p)
0000000000000000000000000000000000000000;;				*p = '\0';
0000000000000000000000000000000000000000;;			printf("\t%d: \"%s\",\n", e, buf);
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		printf("}\n\n");
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return 0;
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	'
0000000000000000000000000000000000000000;;	) >_errors.c
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	$CC $ccflags -o _errors _errors.c && $GORUN ./_errors && rm -f _errors.c _errors _const.go _error.grep _signal.grep _error.out
