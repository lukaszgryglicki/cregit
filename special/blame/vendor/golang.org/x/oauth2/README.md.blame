0000000000000000000000000000000000000000;;	# OAuth2 for Go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/golang/oauth2.svg?branch=master)](https://travis-ci.org/golang/oauth2)
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/golang.org/x/oauth2?status.svg)](https://godoc.org/golang.org/x/oauth2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	oauth2 package contains a client implementation for OAuth 2.0 spec.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	~~~~
0000000000000000000000000000000000000000;;	go get golang.org/x/oauth2
0000000000000000000000000000000000000000;;	~~~~
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See godoc for further documentation and examples.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* [godoc.org/golang.org/x/oauth2](http://godoc.org/golang.org/x/oauth2)
0000000000000000000000000000000000000000;;	* [godoc.org/golang.org/x/oauth2/google](http://godoc.org/golang.org/x/oauth2/google)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## App Engine
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In change 96e89be (March 2015) we removed the `oauth2.Context2` type in favor
0000000000000000000000000000000000000000;;	of the [`context.Context`](https://golang.org/x/net/context#Context) type from
0000000000000000000000000000000000000000;;	the `golang.org/x/net/context` package
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This means its no longer possible to use the "Classic App Engine"
0000000000000000000000000000000000000000;;	`appengine.Context` type with the `oauth2` package. (You're using
0000000000000000000000000000000000000000;;	Classic App Engine if you import the package `"appengine"`.)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To work around this, you may use the new `"google.golang.org/appengine"`
0000000000000000000000000000000000000000;;	package. This package has almost the same API as the `"appengine"` package,
0000000000000000000000000000000000000000;;	but it can be fetched with `go get` and used on "Managed VMs" and well as
0000000000000000000000000000000000000000;;	Classic App Engine.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See the [new `appengine` package's readme](https://github.com/golang/appengine#updating-a-go-app-engine-app)
0000000000000000000000000000000000000000;;	for information on updating your app.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If you don't want to update your entire app to use the new App Engine packages,
0000000000000000000000000000000000000000;;	you may use both sets of packages in parallel, using only the new packages
0000000000000000000000000000000000000000;;	with the `oauth2` package.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		import (
0000000000000000000000000000000000000000;;			"golang.org/x/net/context"
0000000000000000000000000000000000000000;;			"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;			"golang.org/x/oauth2/google"
0000000000000000000000000000000000000000;;			newappengine "google.golang.org/appengine"
0000000000000000000000000000000000000000;;			newurlfetch "google.golang.org/appengine/urlfetch"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			"appengine"
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		func handler(w http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;			var c appengine.Context = appengine.NewContext(r)
0000000000000000000000000000000000000000;;			c.Infof("Logging a message with the old package")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var ctx context.Context = newappengine.NewContext(r)
0000000000000000000000000000000000000000;;			client := &http.Client{
0000000000000000000000000000000000000000;;				Transport: &oauth2.Transport{
0000000000000000000000000000000000000000;;					Source: google.AppEngineTokenSource(ctx, "scope"),
0000000000000000000000000000000000000000;;					Base:   &newurlfetch.Transport{Context: ctx},
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			client.Get("...")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contributing
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	We appreciate your help!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To contribute, please read the contribution guidelines:
0000000000000000000000000000000000000000;;		https://golang.org/doc/contribute.html
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that the Go project does not use GitHub pull requests but
0000000000000000000000000000000000000000;;	uses Gerrit for code reviews. See the contribution guide for details.
