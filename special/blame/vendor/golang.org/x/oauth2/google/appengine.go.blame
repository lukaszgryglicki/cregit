0000000000000000000000000000000000000000;;	// Copyright 2014 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
fb07fa00004c1f8a445543653f60d38694101f82;Godeps/_workspace/src/golang.org/x/oauth2/google/appengine.go[Godeps/_workspace/src/golang.org/x/oauth2/google/appengine.go][vendor/golang.org/x/oauth2/google/appengine.go];	
0000000000000000000000000000000000000000;;	package google
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// appengineFlex is set at init time by appengineflex_hook.go. If true, we are on App Engine Flex.
0000000000000000000000000000000000000000;;	var appengineFlex bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set at init time by appengine_hook.go. If nil, we're not on App Engine.
0000000000000000000000000000000000000000;;	var appengineTokenFunc func(c context.Context, scopes ...string) (token string, expiry time.Time, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set at init time by appengine_hook.go. If nil, we're not on App Engine.
0000000000000000000000000000000000000000;;	var appengineAppIDFunc func(c context.Context) string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppEngineTokenSource returns a token source that fetches tokens
0000000000000000000000000000000000000000;;	// issued to the current App Engine application's service account.
0000000000000000000000000000000000000000;;	// If you are implementing a 3-legged OAuth 2.0 flow on App Engine
0000000000000000000000000000000000000000;;	// that involves user accounts, see oauth2.Config instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The provided context must have come from appengine.NewContext.
0000000000000000000000000000000000000000;;	func AppEngineTokenSource(ctx context.Context, scope ...string) oauth2.TokenSource {
0000000000000000000000000000000000000000;;		if appengineTokenFunc == nil {
0000000000000000000000000000000000000000;;			panic("google: AppEngineTokenSource can only be used on App Engine.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		scopes := append([]string{}, scope...)
0000000000000000000000000000000000000000;;		sort.Strings(scopes)
0000000000000000000000000000000000000000;;		return &appEngineTokenSource{
0000000000000000000000000000000000000000;;			ctx:    ctx,
0000000000000000000000000000000000000000;;			scopes: scopes,
0000000000000000000000000000000000000000;;			key:    strings.Join(scopes, " "),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// aeTokens helps the fetched tokens to be reused until their expiration.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		aeTokensMu sync.Mutex
0000000000000000000000000000000000000000;;		aeTokens   = make(map[string]*tokenLock) // key is space-separated scopes
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type tokenLock struct {
0000000000000000000000000000000000000000;;		mu sync.Mutex // guards t; held while fetching or updating t
0000000000000000000000000000000000000000;;		t  *oauth2.Token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type appEngineTokenSource struct {
0000000000000000000000000000000000000000;;		ctx    context.Context
0000000000000000000000000000000000000000;;		scopes []string
0000000000000000000000000000000000000000;;		key    string // to aeTokens map; space-separated scopes
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ts *appEngineTokenSource) Token() (*oauth2.Token, error) {
0000000000000000000000000000000000000000;;		if appengineTokenFunc == nil {
0000000000000000000000000000000000000000;;			panic("google: AppEngineTokenSource can only be used on App Engine.")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		aeTokensMu.Lock()
0000000000000000000000000000000000000000;;		tok, ok := aeTokens[ts.key]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			tok = &tokenLock{}
0000000000000000000000000000000000000000;;			aeTokens[ts.key] = tok
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		aeTokensMu.Unlock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tok.mu.Lock()
0000000000000000000000000000000000000000;;		defer tok.mu.Unlock()
0000000000000000000000000000000000000000;;		if tok.t.Valid() {
0000000000000000000000000000000000000000;;			return tok.t, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		access, exp, err := appengineTokenFunc(ts.ctx, ts.scopes...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		tok.t = &oauth2.Token{
0000000000000000000000000000000000000000;;			AccessToken: access,
0000000000000000000000000000000000000000;;			Expiry:      exp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return tok.t, nil
0000000000000000000000000000000000000000;;	}
