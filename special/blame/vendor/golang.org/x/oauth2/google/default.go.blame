0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
ebf43e4ef7c9c1b2ea6bf70710d9b269028e79a0;Godeps/_workspace/src/golang.org/x/oauth2/google/default.go[Godeps/_workspace/src/golang.org/x/oauth2/google/default.go][vendor/golang.org/x/oauth2/google/default.go];	
0000000000000000000000000000000000000000;;	package google
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"cloud.google.com/go/compute/metadata"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"golang.org/x/oauth2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultCredentials holds "Application Default Credentials".
0000000000000000000000000000000000000000;;	// For more details, see:
0000000000000000000000000000000000000000;;	// https://developers.google.com/accounts/docs/application-default-credentials
0000000000000000000000000000000000000000;;	type DefaultCredentials struct {
0000000000000000000000000000000000000000;;		ProjectID   string // may be empty
0000000000000000000000000000000000000000;;		TokenSource oauth2.TokenSource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultClient returns an HTTP Client that uses the
0000000000000000000000000000000000000000;;	// DefaultTokenSource to obtain authentication credentials.
0000000000000000000000000000000000000000;;	func DefaultClient(ctx context.Context, scope ...string) (*http.Client, error) {
0000000000000000000000000000000000000000;;		ts, err := DefaultTokenSource(ctx, scope...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return oauth2.NewClient(ctx, ts), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultTokenSource returns the token source for
0000000000000000000000000000000000000000;;	// "Application Default Credentials".
0000000000000000000000000000000000000000;;	// It is a shortcut for FindDefaultCredentials(ctx, scope).TokenSource.
0000000000000000000000000000000000000000;;	func DefaultTokenSource(ctx context.Context, scope ...string) (oauth2.TokenSource, error) {
0000000000000000000000000000000000000000;;		creds, err := FindDefaultCredentials(ctx, scope...)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return creds.TokenSource, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindDefaultCredentials searches for "Application Default Credentials".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It looks for credentials in the following places,
0000000000000000000000000000000000000000;;	// preferring the first location found:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   1. A JSON file whose path is specified by the
0000000000000000000000000000000000000000;;	//      GOOGLE_APPLICATION_CREDENTIALS environment variable.
0000000000000000000000000000000000000000;;	//   2. A JSON file in a location known to the gcloud command-line tool.
0000000000000000000000000000000000000000;;	//      On Windows, this is %APPDATA%/gcloud/application_default_credentials.json.
0000000000000000000000000000000000000000;;	//      On other systems, $HOME/.config/gcloud/application_default_credentials.json.
0000000000000000000000000000000000000000;;	//   3. On Google App Engine it uses the appengine.AccessToken function.
0000000000000000000000000000000000000000;;	//   4. On Google Compute Engine and Google App Engine Managed VMs, it fetches
0000000000000000000000000000000000000000;;	//      credentials from the metadata server.
0000000000000000000000000000000000000000;;	//      (In this final case any provided scopes are ignored.)
0000000000000000000000000000000000000000;;	func FindDefaultCredentials(ctx context.Context, scope ...string) (*DefaultCredentials, error) {
0000000000000000000000000000000000000000;;		// First, try the environment variable.
0000000000000000000000000000000000000000;;		const envVar = "GOOGLE_APPLICATION_CREDENTIALS"
0000000000000000000000000000000000000000;;		if filename := os.Getenv(envVar); filename != "" {
0000000000000000000000000000000000000000;;			creds, err := readCredentialsFile(ctx, filename, scope)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("google: error getting credentials using %v environment variable: %v", envVar, err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return creds, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Second, try a well-known file.
0000000000000000000000000000000000000000;;		filename := wellKnownFile()
0000000000000000000000000000000000000000;;		if creds, err := readCredentialsFile(ctx, filename, scope); err == nil {
0000000000000000000000000000000000000000;;			return creds, nil
0000000000000000000000000000000000000000;;		} else if !os.IsNotExist(err) {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("google: error getting credentials using well-known file (%v): %v", filename, err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Third, if we're on Google App Engine use those credentials.
0000000000000000000000000000000000000000;;		if appengineTokenFunc != nil && !appengineFlex {
0000000000000000000000000000000000000000;;			return &DefaultCredentials{
0000000000000000000000000000000000000000;;				ProjectID:   appengineAppIDFunc(ctx),
0000000000000000000000000000000000000000;;				TokenSource: AppEngineTokenSource(ctx, scope...),
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Fourth, if we're on Google Compute Engine use the metadata server.
0000000000000000000000000000000000000000;;		if metadata.OnGCE() {
0000000000000000000000000000000000000000;;			id, _ := metadata.ProjectID()
0000000000000000000000000000000000000000;;			return &DefaultCredentials{
0000000000000000000000000000000000000000;;				ProjectID:   id,
0000000000000000000000000000000000000000;;				TokenSource: ComputeTokenSource(""),
0000000000000000000000000000000000000000;;			}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// None are found; return helpful error.
0000000000000000000000000000000000000000;;		const url = "https://developers.google.com/accounts/docs/application-default-credentials"
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("google: could not find default credentials. See %v for more information.", url)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func wellKnownFile() string {
0000000000000000000000000000000000000000;;		const f = "application_default_credentials.json"
0000000000000000000000000000000000000000;;		if runtime.GOOS == "windows" {
0000000000000000000000000000000000000000;;			return filepath.Join(os.Getenv("APPDATA"), "gcloud", f)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return filepath.Join(guessUnixHomeDir(), ".config", "gcloud", f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func readCredentialsFile(ctx context.Context, filename string, scopes []string) (*DefaultCredentials, error) {
0000000000000000000000000000000000000000;;		b, err := ioutil.ReadFile(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var f credentialsFile
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(b, &f); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ts, err := f.tokenSource(ctx, append([]string(nil), scopes...))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &DefaultCredentials{
0000000000000000000000000000000000000000;;			ProjectID:   f.ProjectID,
0000000000000000000000000000000000000000;;			TokenSource: ts,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
