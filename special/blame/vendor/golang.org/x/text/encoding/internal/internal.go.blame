0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
cabf0ed26cfc9aa3cb1e604605ff2083c0b112d2;;	
0000000000000000000000000000000000000000;;	// Package internal contains code that is shared among encoding implementations.
0000000000000000000000000000000000000000;;	package internal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/text/encoding"
0000000000000000000000000000000000000000;;		"golang.org/x/text/encoding/internal/identifier"
0000000000000000000000000000000000000000;;		"golang.org/x/text/transform"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encoding is an implementation of the Encoding interface that adds the String
0000000000000000000000000000000000000000;;	// and ID methods to an existing encoding.
0000000000000000000000000000000000000000;;	type Encoding struct {
0000000000000000000000000000000000000000;;		encoding.Encoding
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		MIB  identifier.MIB
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// _ verifies that Encoding implements identifier.Interface.
0000000000000000000000000000000000000000;;	var _ identifier.Interface = (*Encoding)(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Encoding) String() string {
0000000000000000000000000000000000000000;;		return e.Name
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Encoding) ID() (mib identifier.MIB, other string) {
0000000000000000000000000000000000000000;;		return e.MIB, ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SimpleEncoding is an Encoding that combines two Transformers.
0000000000000000000000000000000000000000;;	type SimpleEncoding struct {
0000000000000000000000000000000000000000;;		Decoder transform.Transformer
0000000000000000000000000000000000000000;;		Encoder transform.Transformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *SimpleEncoding) NewDecoder() *encoding.Decoder {
0000000000000000000000000000000000000000;;		return &encoding.Decoder{Transformer: e.Decoder}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *SimpleEncoding) NewEncoder() *encoding.Encoder {
0000000000000000000000000000000000000000;;		return &encoding.Encoder{Transformer: e.Encoder}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FuncEncoding is an Encoding that combines two functions returning a new
0000000000000000000000000000000000000000;;	// Transformer.
0000000000000000000000000000000000000000;;	type FuncEncoding struct {
0000000000000000000000000000000000000000;;		Decoder func() transform.Transformer
0000000000000000000000000000000000000000;;		Encoder func() transform.Transformer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e FuncEncoding) NewDecoder() *encoding.Decoder {
0000000000000000000000000000000000000000;;		return &encoding.Decoder{Transformer: e.Decoder()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e FuncEncoding) NewEncoder() *encoding.Encoder {
0000000000000000000000000000000000000000;;		return &encoding.Encoder{Transformer: e.Encoder()}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A RepertoireError indicates a rune is not in the repertoire of a destination
0000000000000000000000000000000000000000;;	// encoding. It is associated with an encoding-specific suggested replacement
0000000000000000000000000000000000000000;;	// byte.
0000000000000000000000000000000000000000;;	type RepertoireError byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error implements the error interrface.
0000000000000000000000000000000000000000;;	func (r RepertoireError) Error() string {
0000000000000000000000000000000000000000;;		return "encoding: rune not supported by encoding."
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Replacement returns the replacement string associated with this error.
0000000000000000000000000000000000000000;;	func (r RepertoireError) Replacement() byte { return byte(r) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ErrASCIIReplacement = RepertoireError(encoding.ASCIISub)
