0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
cabf0ed26cfc9aa3cb1e604605ff2083c0b112d2;;	
0000000000000000000000000000000000000000;;	//go:generate go run gen.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package identifier defines the contract between implementations of Encoding
0000000000000000000000000000000000000000;;	// and Index by defining identifiers that uniquely identify standardized coded
0000000000000000000000000000000000000000;;	// character sets (CCS) and character encoding schemes (CES), which we will
0000000000000000000000000000000000000000;;	// together refer to as encodings, for which Encoding implementations provide
0000000000000000000000000000000000000000;;	// converters to and from UTF-8. This package is typically only of concern to
0000000000000000000000000000000000000000;;	// implementers of Indexes and Encodings.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// One part of the identifier is the MIB code, which is defined by IANA and
0000000000000000000000000000000000000000;;	// uniquely identifies a CCS or CES. Each code is associated with data that
0000000000000000000000000000000000000000;;	// references authorities, official documentation as well as aliases and MIME
0000000000000000000000000000000000000000;;	// names.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Not all CESs are covered by the IANA registry. The "other" string that is
0000000000000000000000000000000000000000;;	// returned by ID can be used to identify other character sets or versions of
0000000000000000000000000000000000000000;;	// existing ones.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It is recommended that each package that provides a set of Encodings provide
0000000000000000000000000000000000000000;;	// the All and Common variables to reference all supported encodings and
0000000000000000000000000000000000000000;;	// commonly used subset. This allows Index implementations to include all
0000000000000000000000000000000000000000;;	// available encodings without explicitly referencing or knowing about them.
0000000000000000000000000000000000000000;;	package identifier
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Note: this package is internal, but could be made public if there is a need
0000000000000000000000000000000000000000;;	// for writing third-party Indexes and Encodings.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// References:
0000000000000000000000000000000000000000;;	// - http://source.icu-project.org/repos/icu/icu/trunk/source/data/mappings/convrtrs.txt
0000000000000000000000000000000000000000;;	// - http://www.iana.org/assignments/character-sets/character-sets.xhtml
0000000000000000000000000000000000000000;;	// - http://www.iana.org/assignments/ianacharset-mib/ianacharset-mib
0000000000000000000000000000000000000000;;	// - http://www.ietf.org/rfc/rfc2978.txt
0000000000000000000000000000000000000000;;	// - http://www.unicode.org/reports/tr22/
0000000000000000000000000000000000000000;;	// - http://www.w3.org/TR/encoding/
0000000000000000000000000000000000000000;;	// - http://www.w3.org/TR/encoding/indexes/encodings.json
0000000000000000000000000000000000000000;;	// - https://encoding.spec.whatwg.org/
0000000000000000000000000000000000000000;;	// - https://tools.ietf.org/html/rfc6657#section-5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Interface can be implemented by Encodings to define the CCS or CES for which
0000000000000000000000000000000000000000;;	// it implements conversions.
0000000000000000000000000000000000000000;;	type Interface interface {
0000000000000000000000000000000000000000;;		// ID returns an encoding identifier. Exactly one of the mib and other
0000000000000000000000000000000000000000;;		// values should be non-zero.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In the usual case it is only necessary to indicate the MIB code. The
0000000000000000000000000000000000000000;;		// other string can be used to specify encodings for which there is no MIB,
0000000000000000000000000000000000000000;;		// such as "x-mac-dingbat".
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The other string may only contain the characters a-z, A-Z, 0-9, - and _.
0000000000000000000000000000000000000000;;		ID() (mib MIB, other string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NOTE: the restrictions on the encoding are to allow extending the syntax
0000000000000000000000000000000000000000;;		// with additional information such as versions, vendors and other variants.
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A MIB identifies an encoding. It is derived from the IANA MIB codes and adds
0000000000000000000000000000000000000000;;	// some identifiers for some encodings that are not covered by the IANA
0000000000000000000000000000000000000000;;	// standard.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See http://www.iana.org/assignments/ianacharset-mib.
0000000000000000000000000000000000000000;;	type MIB uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These additional MIB types are not defined in IANA. They are added because
0000000000000000000000000000000000000000;;	// they are common and defined within the text repo.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Unofficial marks the start of encodings not registered by IANA.
0000000000000000000000000000000000000000;;		Unofficial MIB = 10000 + iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Replacement is the WhatWG replacement encoding.
0000000000000000000000000000000000000000;;		Replacement
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// XUserDefined is the code for x-user-defined.
0000000000000000000000000000000000000000;;		XUserDefined
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MacintoshCyrillic is the code for x-mac-cyrillic.
0000000000000000000000000000000000000000;;		MacintoshCyrillic
0000000000000000000000000000000000000000;;	)
