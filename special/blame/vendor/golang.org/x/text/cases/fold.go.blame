0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package cases
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "golang.org/x/text/transform"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type caseFolder struct{ transform.NopResetter }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// caseFolder implements the Transformer interface for doing case folding.
0000000000000000000000000000000000000000;;	func (t *caseFolder) Transform(dst, src []byte, atEOF bool) (nDst, nSrc int, err error) {
0000000000000000000000000000000000000000;;		c := context{dst: dst, src: src, atEOF: atEOF}
0000000000000000000000000000000000000000;;		for c.next() {
0000000000000000000000000000000000000000;;			foldFull(&c)
0000000000000000000000000000000000000000;;			c.checkpoint()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.ret()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeFold(o options) transform.Transformer {
0000000000000000000000000000000000000000;;		// TODO: Special case folding, through option Language, Special/Turkic, or
0000000000000000000000000000000000000000;;		// both.
0000000000000000000000000000000000000000;;		// TODO: Implement Compact options.
0000000000000000000000000000000000000000;;		return &caseFolder{}
0000000000000000000000000000000000000000;;	}
