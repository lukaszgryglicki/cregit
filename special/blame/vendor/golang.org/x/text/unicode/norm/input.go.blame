0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package norm
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "unicode/utf8"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type input struct {
0000000000000000000000000000000000000000;;		str   string
0000000000000000000000000000000000000000;;		bytes []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func inputBytes(str []byte) input {
0000000000000000000000000000000000000000;;		return input{bytes: str}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func inputString(str string) input {
0000000000000000000000000000000000000000;;		return input{str: str}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) setBytes(str []byte) {
0000000000000000000000000000000000000000;;		in.str = ""
0000000000000000000000000000000000000000;;		in.bytes = str
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) setString(str string) {
0000000000000000000000000000000000000000;;		in.str = str
0000000000000000000000000000000000000000;;		in.bytes = nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) _byte(p int) byte {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			return in.str[p]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return in.bytes[p]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) skipASCII(p, max int) int {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			for ; p < max && in.str[p] < utf8.RuneSelf; p++ {
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for ; p < max && in.bytes[p] < utf8.RuneSelf; p++ {
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) skipContinuationBytes(p int) int {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			for ; p < len(in.str) && !utf8.RuneStart(in.str[p]); p++ {
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			for ; p < len(in.bytes) && !utf8.RuneStart(in.bytes[p]); p++ {
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) appendSlice(buf []byte, b, e int) []byte {
0000000000000000000000000000000000000000;;		if in.bytes != nil {
0000000000000000000000000000000000000000;;			return append(buf, in.bytes[b:e]...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := b; i < e; i++ {
0000000000000000000000000000000000000000;;			buf = append(buf, in.str[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) copySlice(buf []byte, b, e int) int {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			return copy(buf, in.str[b:e])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return copy(buf, in.bytes[b:e])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) charinfoNFC(p int) (uint16, int) {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			return nfcData.lookupString(in.str[p:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nfcData.lookup(in.bytes[p:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) charinfoNFKC(p int) (uint16, int) {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			return nfkcData.lookupString(in.str[p:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nfkcData.lookup(in.bytes[p:])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (in *input) hangul(p int) (r rune) {
0000000000000000000000000000000000000000;;		if in.bytes == nil {
0000000000000000000000000000000000000000;;			if !isHangulString(in.str[p:]) {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r, _ = utf8.DecodeRuneInString(in.str[p:])
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !isHangul(in.bytes[p:]) {
0000000000000000000000000000000000000000;;				return 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			r, _ = utf8.DecodeRune(in.bytes[p:])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
