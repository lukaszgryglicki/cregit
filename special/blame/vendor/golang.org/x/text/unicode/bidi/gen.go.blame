0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/text/internal/gen"
0000000000000000000000000000000000000000;;		"golang.org/x/text/internal/triegen"
0000000000000000000000000000000000000000;;		"golang.org/x/text/internal/ucd"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var outputFile = flag.String("out", "tables.go", "output file")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		gen.Init()
0000000000000000000000000000000000000000;;		gen.Repackage("gen_trieval.go", "trieval.go", "bidi")
0000000000000000000000000000000000000000;;		gen.Repackage("gen_ranges.go", "ranges_test.go", "bidi")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		genTables()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// bidiClass names and codes taken from class "bc" in
0000000000000000000000000000000000000000;;	// http://www.unicode.org/Public/8.0.0/ucd/PropertyValueAliases.txt
0000000000000000000000000000000000000000;;	var bidiClass = map[string]Class{
0000000000000000000000000000000000000000;;		"AL":  AL,  // ArabicLetter
0000000000000000000000000000000000000000;;		"AN":  AN,  // ArabicNumber
0000000000000000000000000000000000000000;;		"B":   B,   // ParagraphSeparator
0000000000000000000000000000000000000000;;		"BN":  BN,  // BoundaryNeutral
0000000000000000000000000000000000000000;;		"CS":  CS,  // CommonSeparator
0000000000000000000000000000000000000000;;		"EN":  EN,  // EuropeanNumber
0000000000000000000000000000000000000000;;		"ES":  ES,  // EuropeanSeparator
0000000000000000000000000000000000000000;;		"ET":  ET,  // EuropeanTerminator
0000000000000000000000000000000000000000;;		"L":   L,   // LeftToRight
0000000000000000000000000000000000000000;;		"NSM": NSM, // NonspacingMark
0000000000000000000000000000000000000000;;		"ON":  ON,  // OtherNeutral
0000000000000000000000000000000000000000;;		"R":   R,   // RightToLeft
0000000000000000000000000000000000000000;;		"S":   S,   // SegmentSeparator
0000000000000000000000000000000000000000;;		"WS":  WS,  // WhiteSpace
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"FSI": Control,
0000000000000000000000000000000000000000;;		"PDF": Control,
0000000000000000000000000000000000000000;;		"PDI": Control,
0000000000000000000000000000000000000000;;		"LRE": Control,
0000000000000000000000000000000000000000;;		"LRI": Control,
0000000000000000000000000000000000000000;;		"LRO": Control,
0000000000000000000000000000000000000000;;		"RLE": Control,
0000000000000000000000000000000000000000;;		"RLI": Control,
0000000000000000000000000000000000000000;;		"RLO": Control,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func genTables() {
0000000000000000000000000000000000000000;;		if numClass > 0x0F {
0000000000000000000000000000000000000000;;			log.Fatalf("Too many Class constants (%#x > 0x0F).", numClass)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w := gen.NewCodeWriter()
0000000000000000000000000000000000000000;;		defer w.WriteGoFile(*outputFile, "bidi")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		gen.WriteUnicodeVersion(w)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		t := triegen.NewTrie("bidi")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Build data about bracket mapping. These bits need to be or-ed with
0000000000000000000000000000000000000000;;		// any other bits.
0000000000000000000000000000000000000000;;		orMask := map[rune]uint64{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		xorMap := map[rune]int{}
0000000000000000000000000000000000000000;;		xorMasks := []rune{0} // First value is no-op.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ucd.Parse(gen.OpenUCDFile("BidiBrackets.txt"), func(p *ucd.Parser) {
0000000000000000000000000000000000000000;;			r1 := p.Rune(0)
0000000000000000000000000000000000000000;;			r2 := p.Rune(1)
0000000000000000000000000000000000000000;;			xor := r1 ^ r2
0000000000000000000000000000000000000000;;			if _, ok := xorMap[xor]; !ok {
0000000000000000000000000000000000000000;;				xorMap[xor] = len(xorMasks)
0000000000000000000000000000000000000000;;				xorMasks = append(xorMasks, xor)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			entry := uint64(xorMap[xor]) << xorMaskShift
0000000000000000000000000000000000000000;;			switch p.String(2) {
0000000000000000000000000000000000000000;;			case "o":
0000000000000000000000000000000000000000;;				entry |= openMask
0000000000000000000000000000000000000000;;			case "c", "n":
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				log.Fatalf("Unknown bracket class %q.", p.String(2))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			orMask[r1] = entry
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		w.WriteComment(`
0000000000000000000000000000000000000000;;		xorMasks contains masks to be xor-ed with brackets to get the reverse
0000000000000000000000000000000000000000;;		version.`)
0000000000000000000000000000000000000000;;		w.WriteVar("xorMasks", xorMasks)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		done := map[rune]bool{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		insert := func(r rune, c Class) {
0000000000000000000000000000000000000000;;			if !done[r] {
0000000000000000000000000000000000000000;;				t.Insert(r, orMask[r]|uint64(c))
0000000000000000000000000000000000000000;;				done[r] = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Insert the derived BiDi properties.
0000000000000000000000000000000000000000;;		ucd.Parse(gen.OpenUCDFile("extracted/DerivedBidiClass.txt"), func(p *ucd.Parser) {
0000000000000000000000000000000000000000;;			r := p.Rune(0)
0000000000000000000000000000000000000000;;			class, ok := bidiClass[p.String(1)]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				log.Fatalf("%U: Unknown BiDi class %q", r, p.String(1))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			insert(r, class)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		visitDefaults(insert)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TODO: use sparse blocks. This would reduce table size considerably
0000000000000000000000000000000000000000;;		// from the looks of it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sz, err := t.Gen(w)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatal(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		w.Size += sz
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// dummy values to make methods in gen_common compile. The real versions
0000000000000000000000000000000000000000;;	// will be generated by this file to tables.go.
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		xorMasks []rune
0000000000000000000000000000000000000000;;	)
