0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/text/internal/gen"
0000000000000000000000000000000000000000;;		"golang.org/x/text/internal/ucd"
0000000000000000000000000000000000000000;;		"golang.org/x/text/unicode/rangetable"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// These tables are hand-extracted from:
0000000000000000000000000000000000000000;;	// http://www.unicode.org/Public/8.0.0/ucd/extracted/DerivedBidiClass.txt
0000000000000000000000000000000000000000;;	func visitDefaults(fn func(r rune, c Class)) {
0000000000000000000000000000000000000000;;		// first write default values for ranges listed above.
0000000000000000000000000000000000000000;;		visitRunes(fn, AL, []rune{
0000000000000000000000000000000000000000;;			0x0600, 0x07BF, // Arabic
0000000000000000000000000000000000000000;;			0x08A0, 0x08FF, // Arabic Extended-A
0000000000000000000000000000000000000000;;			0xFB50, 0xFDCF, // Arabic Presentation Forms
0000000000000000000000000000000000000000;;			0xFDF0, 0xFDFF,
0000000000000000000000000000000000000000;;			0xFE70, 0xFEFF,
0000000000000000000000000000000000000000;;			0x0001EE00, 0x0001EEFF, // Arabic Mathematical Alpha Symbols
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		visitRunes(fn, R, []rune{
0000000000000000000000000000000000000000;;			0x0590, 0x05FF, // Hebrew
0000000000000000000000000000000000000000;;			0x07C0, 0x089F, // Nko et al.
0000000000000000000000000000000000000000;;			0xFB1D, 0xFB4F,
0000000000000000000000000000000000000000;;			0x00010800, 0x00010FFF, // Cypriot Syllabary et. al.
0000000000000000000000000000000000000000;;			0x0001E800, 0x0001EDFF,
0000000000000000000000000000000000000000;;			0x0001EF00, 0x0001EFFF,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		visitRunes(fn, ET, []rune{ // European Terminator
0000000000000000000000000000000000000000;;			0x20A0, 0x20Cf, // Currency symbols
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		rangetable.Visit(unicode.Noncharacter_Code_Point, func(r rune) {
0000000000000000000000000000000000000000;;			fn(r, BN) // Boundary Neutral
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		ucd.Parse(gen.OpenUCDFile("DerivedCoreProperties.txt"), func(p *ucd.Parser) {
0000000000000000000000000000000000000000;;			if p.String(1) == "Default_Ignorable_Code_Point" {
0000000000000000000000000000000000000000;;				fn(p.Rune(0), BN) // Boundary Neutral
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func visitRunes(fn func(r rune, c Class), c Class, runes []rune) {
0000000000000000000000000000000000000000;;		for i := 0; i < len(runes); i += 2 {
0000000000000000000000000000000000000000;;			lo, hi := runes[i], runes[i+1]
0000000000000000000000000000000000000000;;			for j := lo; j <= hi; j++ {
0000000000000000000000000000000000000000;;				fn(j, c)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
