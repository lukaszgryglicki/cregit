0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	//go:generate go run gen.go gen_trieval.go gen_ranges.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package bidi contains functionality for bidirectional text support.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See http://www.unicode.org/reports/tr9.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// NOTE: UNDER CONSTRUCTION. This API may change in backwards incompatible ways
0000000000000000000000000000000000000000;;	// and without notice.
0000000000000000000000000000000000000000;;	package bidi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO:
0000000000000000000000000000000000000000;;	// The following functionality would not be hard to implement, but hinges on
0000000000000000000000000000000000000000;;	// the definition of a Segmenter interface. For now this is up to the user.
0000000000000000000000000000000000000000;;	// - Iterate over paragraphs
0000000000000000000000000000000000000000;;	// - Segmenter to iterate over runs directly from a given text.
0000000000000000000000000000000000000000;;	// Also:
0000000000000000000000000000000000000000;;	// - Transformer for reordering?
0000000000000000000000000000000000000000;;	// - Transformer (validator, really) for Bidi Rule.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This API tries to avoid dealing with embedding levels for now. Under the hood
0000000000000000000000000000000000000000;;	// these will be computed, but the question is to which extent the user should
0000000000000000000000000000000000000000;;	// know they exist. We should at some point allow the user to specify an
0000000000000000000000000000000000000000;;	// embedding hierarchy, though.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Direction indicates the overall flow of text.
0000000000000000000000000000000000000000;;	type Direction int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// LeftToRight indicates the text contains no right-to-left characters and
0000000000000000000000000000000000000000;;		// that either there are some left-to-right characters or the option
0000000000000000000000000000000000000000;;		// DefaultDirection(LeftToRight) was passed.
0000000000000000000000000000000000000000;;		LeftToRight Direction = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RightToLeft indicates the text contains no left-to-right characters and
0000000000000000000000000000000000000000;;		// that either there are some right-to-left characters or the option
0000000000000000000000000000000000000000;;		// DefaultDirection(RightToLeft) was passed.
0000000000000000000000000000000000000000;;		RightToLeft
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mixed indicates text contains both left-to-right and right-to-left
0000000000000000000000000000000000000000;;		// characters.
0000000000000000000000000000000000000000;;		Mixed
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Neutral means that text contains no left-to-right and right-to-left
0000000000000000000000000000000000000000;;		// characters and that no default direction has been set.
0000000000000000000000000000000000000000;;		Neutral
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type options struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An Option is an option for Bidi processing.
0000000000000000000000000000000000000000;;	type Option func(*options)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ICU allows the user to define embedding levels. This may be used, for example,
0000000000000000000000000000000000000000;;	// to use hierarchical structure of markup languages to define embeddings.
0000000000000000000000000000000000000000;;	// The following option may be a way to expose this functionality in this API.
0000000000000000000000000000000000000000;;	// // LevelFunc sets a function that associates nesting levels with the given text.
0000000000000000000000000000000000000000;;	// // The levels function will be called with monotonically increasing values for p.
0000000000000000000000000000000000000000;;	// func LevelFunc(levels func(p int) int) Option {
0000000000000000000000000000000000000000;;	// 	panic("unimplemented")
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultDirection sets the default direction for a Paragraph. The direction is
0000000000000000000000000000000000000000;;	// overridden if the text contains directional characters.
0000000000000000000000000000000000000000;;	func DefaultDirection(d Direction) Option {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Paragraph holds a single Paragraph for Bidi processing.
0000000000000000000000000000000000000000;;	type Paragraph struct {
0000000000000000000000000000000000000000;;		// buffers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetBytes configures p for the given paragraph text. It replaces text
0000000000000000000000000000000000000000;;	// previously set by SetBytes or SetString. If b contains a paragraph separator
0000000000000000000000000000000000000000;;	// it will only process the first paragraph and report the number of bytes
0000000000000000000000000000000000000000;;	// consumed from b including this separator. Error may be non-nil if options are
0000000000000000000000000000000000000000;;	// given.
0000000000000000000000000000000000000000;;	func (p *Paragraph) SetBytes(b []byte, opts ...Option) (n int, err error) {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetString configures p for the given paragraph text. It replaces text
0000000000000000000000000000000000000000;;	// previously set by SetBytes or SetString. If b contains a paragraph separator
0000000000000000000000000000000000000000;;	// it will only process the first paragraph and report the number of bytes
0000000000000000000000000000000000000000;;	// consumed from b including this separator. Error may be non-nil if options are
0000000000000000000000000000000000000000;;	// given.
0000000000000000000000000000000000000000;;	func (p *Paragraph) SetString(s string, opts ...Option) (n int, err error) {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsLeftToRight reports whether the principle direction of rendering for this
0000000000000000000000000000000000000000;;	// paragraphs is left-to-right. If this returns false, the principle direction
0000000000000000000000000000000000000000;;	// of rendering is right-to-left.
0000000000000000000000000000000000000000;;	func (p *Paragraph) IsLeftToRight() bool {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Direction returns the direction of the text of this paragraph.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The direction may be LeftToRight, RightToLeft, Mixed, or Neutral.
0000000000000000000000000000000000000000;;	func (p *Paragraph) Direction() Direction {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunAt reports the Run at the given position of the input text.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This method can be used for computing line breaks on paragraphs.
0000000000000000000000000000000000000000;;	func (p *Paragraph) RunAt(pos int) Run {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Order computes the visual ordering of all the runs in a Paragraph.
0000000000000000000000000000000000000000;;	func (p *Paragraph) Order() (Ordering, error) {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Line computes the visual ordering of runs for a single line starting and
0000000000000000000000000000000000000000;;	// ending at the given positions in the original text.
0000000000000000000000000000000000000000;;	func (p *Paragraph) Line(start, end int) (Ordering, error) {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An Ordering holds the computed visual order of runs of a Paragraph. Calling
0000000000000000000000000000000000000000;;	// SetBytes or SetString on the originating Paragraph invalidates an Ordering.
0000000000000000000000000000000000000000;;	// The methods of an Ordering should only be called by one goroutine at a time.
0000000000000000000000000000000000000000;;	type Ordering struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Direction reports the directionality of the runs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The direction may be LeftToRight, RightToLeft, Mixed, or Neutral.
0000000000000000000000000000000000000000;;	func (o *Ordering) Direction() Direction {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NumRuns returns the number of runs.
0000000000000000000000000000000000000000;;	func (o *Ordering) NumRuns() int {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run returns the ith run within the ordering.
0000000000000000000000000000000000000000;;	func (o *Ordering) Run(i int) Run {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: perhaps with options.
0000000000000000000000000000000000000000;;	// // Reorder creates a reader that reads the runes in visual order per character.
0000000000000000000000000000000000000000;;	// // Modifiers remain after the runes they modify.
0000000000000000000000000000000000000000;;	// func (l *Runs) Reorder() io.Reader {
0000000000000000000000000000000000000000;;	// 	panic("unimplemented")
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Run is a continuous sequence of characters of a single direction.
0000000000000000000000000000000000000000;;	type Run struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String returns the text of the run in its original order.
0000000000000000000000000000000000000000;;	func (r *Run) String() string {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bytes returns the text of the run in its original order.
0000000000000000000000000000000000000000;;	func (r *Run) Bytes() []byte {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO: methods for
0000000000000000000000000000000000000000;;	// - Display order
0000000000000000000000000000000000000000;;	// - headers and footers
0000000000000000000000000000000000000000;;	// - bracket replacement.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Direction reports the direction of the run.
0000000000000000000000000000000000000000;;	func (r *Run) Direction() Direction {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Position of the Run within the text passed to SetBytes or SetString of the
0000000000000000000000000000000000000000;;	// originating Paragraph value.
0000000000000000000000000000000000000000;;	func (r *Run) Pos() (start, end int) {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AppendReverse reverses the order of characters of in, appends them to out,
0000000000000000000000000000000000000000;;	// and returns the result. Modifiers will still follow the runes they modify.
0000000000000000000000000000000000000000;;	// Brackets are replaced with their counterparts.
0000000000000000000000000000000000000000;;	func AppendReverse(out, in []byte) []byte {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReverseString reverses the order of characters in s and returns a new string.
0000000000000000000000000000000000000000;;	// Modifiers will still follow the runes they modify. Brackets are replaced with
0000000000000000000000000000000000000000;;	// their counterparts.
0000000000000000000000000000000000000000;;	func ReverseString(s string) string {
0000000000000000000000000000000000000000;;		panic("unimplemented")
0000000000000000000000000000000000000000;;	}
