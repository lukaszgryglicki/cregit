0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	package precis
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/text/cases"
0000000000000000000000000000000000000000;;		"golang.org/x/text/runes"
0000000000000000000000000000000000000000;;		"golang.org/x/text/transform"
0000000000000000000000000000000000000000;;		"golang.org/x/text/unicode/norm"
0000000000000000000000000000000000000000;;		"golang.org/x/text/width"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An Option is used to define the behavior and rules of a Profile.
0000000000000000000000000000000000000000;;	type Option func(*options)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type options struct {
0000000000000000000000000000000000000000;;		// Preparation options
0000000000000000000000000000000000000000;;		foldWidth bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Enforcement options
0000000000000000000000000000000000000000;;		cases         transform.Transformer
0000000000000000000000000000000000000000;;		disallow      runes.Set
0000000000000000000000000000000000000000;;		norm          norm.Form
0000000000000000000000000000000000000000;;		additional    []func() transform.Transformer
0000000000000000000000000000000000000000;;		width         *width.Transformer
0000000000000000000000000000000000000000;;		disallowEmpty bool
0000000000000000000000000000000000000000;;		bidiRule      bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Comparison options
0000000000000000000000000000000000000000;;		ignorecase bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getOpts(o ...Option) (res options) {
0000000000000000000000000000000000000000;;		for _, f := range o {
0000000000000000000000000000000000000000;;			f(&res)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// The IgnoreCase option causes the profile to perform a case insensitive
0000000000000000000000000000000000000000;;		// comparison during the PRECIS comparison step.
0000000000000000000000000000000000000000;;		IgnoreCase Option = ignoreCase
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The FoldWidth option causes the profile to map non-canonical wide and
0000000000000000000000000000000000000000;;		// narrow variants to their decomposition mapping. This is useful for
0000000000000000000000000000000000000000;;		// profiles that are based on the identifier class which would otherwise
0000000000000000000000000000000000000000;;		// disallow such characters.
0000000000000000000000000000000000000000;;		FoldWidth Option = foldWidth
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The DisallowEmpty option causes the enforcement step to return an error if
0000000000000000000000000000000000000000;;		// the resulting string would be empty.
0000000000000000000000000000000000000000;;		DisallowEmpty Option = disallowEmpty
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The BidiRule option causes the Bidi Rule defined in RFC 5893 to be
0000000000000000000000000000000000000000;;		// applied.
0000000000000000000000000000000000000000;;		BidiRule Option = bidiRule
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ignoreCase = func(o *options) {
0000000000000000000000000000000000000000;;			o.ignorecase = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		foldWidth = func(o *options) {
0000000000000000000000000000000000000000;;			o.foldWidth = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		disallowEmpty = func(o *options) {
0000000000000000000000000000000000000000;;			o.disallowEmpty = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		bidiRule = func(o *options) {
0000000000000000000000000000000000000000;;			o.bidiRule = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The AdditionalMapping option defines the additional mapping rule for the
0000000000000000000000000000000000000000;;	// Profile by applying Transformer's in sequence.
0000000000000000000000000000000000000000;;	func AdditionalMapping(t ...func() transform.Transformer) Option {
0000000000000000000000000000000000000000;;		return func(o *options) {
0000000000000000000000000000000000000000;;			o.additional = t
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The Norm option defines a Profile's normalization rule. Defaults to NFC.
0000000000000000000000000000000000000000;;	func Norm(f norm.Form) Option {
0000000000000000000000000000000000000000;;		return func(o *options) {
0000000000000000000000000000000000000000;;			o.norm = f
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The FoldCase option defines a Profile's case mapping rule. Options can be
0000000000000000000000000000000000000000;;	// provided to determine the type of case folding used.
0000000000000000000000000000000000000000;;	func FoldCase(opts ...cases.Option) Option {
0000000000000000000000000000000000000000;;		return func(o *options) {
0000000000000000000000000000000000000000;;			o.cases = cases.Fold(opts...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The Disallow option further restricts a Profile's allowed characters beyond
0000000000000000000000000000000000000000;;	// what is disallowed by the underlying string class.
0000000000000000000000000000000000000000;;	func Disallow(set runes.Set) Option {
0000000000000000000000000000000000000000;;		return func(o *options) {
0000000000000000000000000000000000000000;;			o.disallow = set
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
