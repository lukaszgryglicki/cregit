0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// entry is the entry of a trie table
0000000000000000000000000000000000000000;;	// 7..6   property (unassigned, disallowed, maybe, valid)
0000000000000000000000000000000000000000;;	// 5..0   category
0000000000000000000000000000000000000000;;	type entry uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		propShift = 6
0000000000000000000000000000000000000000;;		propMask  = 0xc0
0000000000000000000000000000000000000000;;		catMask   = 0x3f
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e entry) property() property { return property(e & propMask) }
0000000000000000000000000000000000000000;;	func (e entry) category() category { return category(e & catMask) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type property uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The order of these constants matter. A Profile may consider runes to be
0000000000000000000000000000000000000000;;	// allowed either from pValid or idDisOrFreePVal.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		unassigned property = iota << propShift
0000000000000000000000000000000000000000;;		disallowed
0000000000000000000000000000000000000000;;		idDisOrFreePVal // disallowed for Identifier, pValid for FreeForm
0000000000000000000000000000000000000000;;		pValid
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// compute permutations of all properties and specialCategories.
0000000000000000000000000000000000000000;;	type category uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		other category = iota
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Special rune types
0000000000000000000000000000000000000000;;		joiningL
0000000000000000000000000000000000000000;;		joiningD
0000000000000000000000000000000000000000;;		joiningT
0000000000000000000000000000000000000000;;		joiningR
0000000000000000000000000000000000000000;;		viramaModifier
0000000000000000000000000000000000000000;;		viramaJoinT // Virama + JoiningT
0000000000000000000000000000000000000000;;		latinSmallL // U+006c
0000000000000000000000000000000000000000;;		greek
0000000000000000000000000000000000000000;;		greekJoinT // Greek + JoiningT
0000000000000000000000000000000000000000;;		hebrew
0000000000000000000000000000000000000000;;		hebrewJoinT // Hebrew + JoiningT
0000000000000000000000000000000000000000;;		japanese    // hirigana, katakana, han
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Special rune types associated with contextual rules defined in
0000000000000000000000000000000000000000;;		// https://tools.ietf.org/html/rfc5892#appendix-A.
0000000000000000000000000000000000000000;;		// ContextO
0000000000000000000000000000000000000000;;		zeroWidthNonJoiner // rule 1
0000000000000000000000000000000000000000;;		zeroWidthJoiner    // rule 2
0000000000000000000000000000000000000000;;		// ContextJ
0000000000000000000000000000000000000000;;		middleDot                // rule 3
0000000000000000000000000000000000000000;;		greekLowerNumeralSign    // rule 4
0000000000000000000000000000000000000000;;		hebrewPreceding          // rule 5 and 6
0000000000000000000000000000000000000000;;		katakanaMiddleDot        // rule 7
0000000000000000000000000000000000000000;;		arabicIndicDigit         // rule 8
0000000000000000000000000000000000000000;;		extendedArabicIndicDigit // rule 9
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		numCategories
0000000000000000000000000000000000000000;;	)
