0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
c2bfd044362efe23765620d054edcdab7497bde5;third_party/src/code.google.com/p/go.net/html/atom/gen.go[third_party/src/code.google.com/p/go.net/html/atom/gen.go][vendor/golang.org/x/net/html/atom/gen.go];	
0000000000000000000000000000000000000000;;	// +build ignore
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This program generates table.go and table_test.go.
0000000000000000000000000000000000000000;;	// Invoke as
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	go run gen.go |gofmt >table.go
0000000000000000000000000000000000000000;;	//	go run gen.go -test |gofmt >table_test.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"flag"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"math/rand"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// identifier converts s to a Go exported identifier.
0000000000000000000000000000000000000000;;	// It converts "div" to "Div" and "accept-charset" to "AcceptCharset".
0000000000000000000000000000000000000000;;	func identifier(s string) string {
0000000000000000000000000000000000000000;;		b := make([]byte, 0, len(s))
0000000000000000000000000000000000000000;;		cap := true
0000000000000000000000000000000000000000;;		for _, c := range s {
0000000000000000000000000000000000000000;;			if c == '-' {
0000000000000000000000000000000000000000;;				cap = true
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if cap && 'a' <= c && c <= 'z' {
0000000000000000000000000000000000000000;;				c -= 'a' - 'A'
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			cap = false
0000000000000000000000000000000000000000;;			b = append(b, byte(c))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(b)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var test = flag.Bool("test", false, "generate table_test.go")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		flag.Parse()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var all []string
0000000000000000000000000000000000000000;;		all = append(all, elements...)
0000000000000000000000000000000000000000;;		all = append(all, attributes...)
0000000000000000000000000000000000000000;;		all = append(all, eventHandlers...)
0000000000000000000000000000000000000000;;		all = append(all, extra...)
0000000000000000000000000000000000000000;;		sort.Strings(all)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if *test {
0000000000000000000000000000000000000000;;			fmt.Printf("// generated by go run gen.go -test; DO NOT EDIT\n\n")
0000000000000000000000000000000000000000;;			fmt.Printf("package atom\n\n")
0000000000000000000000000000000000000000;;			fmt.Printf("var testAtomList = []string{\n")
0000000000000000000000000000000000000000;;			for _, s := range all {
0000000000000000000000000000000000000000;;				fmt.Printf("\t%q,\n", s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("}\n")
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// uniq - lists have dups
0000000000000000000000000000000000000000;;		// compute max len too
0000000000000000000000000000000000000000;;		maxLen := 0
0000000000000000000000000000000000000000;;		w := 0
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			if w == 0 || all[w-1] != s {
0000000000000000000000000000000000000000;;				if maxLen < len(s) {
0000000000000000000000000000000000000000;;					maxLen = len(s)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				all[w] = s
0000000000000000000000000000000000000000;;				w++
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		all = all[:w]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Find hash that minimizes table size.
0000000000000000000000000000000000000000;;		var best *table
0000000000000000000000000000000000000000;;		for i := 0; i < 1000000; i++ {
0000000000000000000000000000000000000000;;			if best != nil && 1<<(best.k-1) < len(all) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			h := rand.Uint32()
0000000000000000000000000000000000000000;;			for k := uint(0); k <= 16; k++ {
0000000000000000000000000000000000000000;;				if best != nil && k >= best.k {
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				var t table
0000000000000000000000000000000000000000;;				if t.init(h, k, all) {
0000000000000000000000000000000000000000;;					best = &t
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if best == nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(os.Stderr, "failed to construct string table\n")
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Lay out strings, using overlaps when possible.
0000000000000000000000000000000000000000;;		layout := append([]string{}, all...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Remove strings that are substrings of other strings
0000000000000000000000000000000000000000;;		for changed := true; changed; {
0000000000000000000000000000000000000000;;			changed = false
0000000000000000000000000000000000000000;;			for i, s := range layout {
0000000000000000000000000000000000000000;;				if s == "" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for j, t := range layout {
0000000000000000000000000000000000000000;;					if i != j && t != "" && strings.Contains(s, t) {
0000000000000000000000000000000000000000;;						changed = true
0000000000000000000000000000000000000000;;						layout[j] = ""
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Join strings where one suffix matches another prefix.
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			// Find best i, j, k such that layout[i][len-k:] == layout[j][:k],
0000000000000000000000000000000000000000;;			// maximizing overlap length k.
0000000000000000000000000000000000000000;;			besti := -1
0000000000000000000000000000000000000000;;			bestj := -1
0000000000000000000000000000000000000000;;			bestk := 0
0000000000000000000000000000000000000000;;			for i, s := range layout {
0000000000000000000000000000000000000000;;				if s == "" {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for j, t := range layout {
0000000000000000000000000000000000000000;;					if i == j {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for k := bestk + 1; k <= len(s) && k <= len(t); k++ {
0000000000000000000000000000000000000000;;						if s[len(s)-k:] == t[:k] {
0000000000000000000000000000000000000000;;							besti = i
0000000000000000000000000000000000000000;;							bestj = j
0000000000000000000000000000000000000000;;							bestk = k
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if bestk > 0 {
0000000000000000000000000000000000000000;;				layout[besti] += layout[bestj][bestk:]
0000000000000000000000000000000000000000;;				layout[bestj] = ""
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		text := strings.Join(layout, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		atom := map[string]uint32{}
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			off := strings.Index(text, s)
0000000000000000000000000000000000000000;;			if off < 0 {
0000000000000000000000000000000000000000;;				panic("lost string " + s)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			atom[s] = uint32(off<<8 | len(s))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Generate the Go code.
0000000000000000000000000000000000000000;;		fmt.Printf("// generated by go run gen.go; DO NOT EDIT\n\n")
0000000000000000000000000000000000000000;;		fmt.Printf("package atom\n\nconst (\n")
0000000000000000000000000000000000000000;;		for _, s := range all {
0000000000000000000000000000000000000000;;			fmt.Printf("\t%s Atom = %#x\n", identifier(s), atom[s])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf(")\n\n")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("const hash0 = %#x\n\n", best.h0)
0000000000000000000000000000000000000000;;		fmt.Printf("const maxAtomLen = %d\n\n", maxLen)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("var table = [1<<%d]Atom{\n", best.k)
0000000000000000000000000000000000000000;;		for i, s := range best.tab {
0000000000000000000000000000000000000000;;			if s == "" {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			fmt.Printf("\t%#x: %#x, // %s\n", i, atom[s], s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("}\n")
0000000000000000000000000000000000000000;;		datasize := (1 << best.k) * 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Printf("const atomText =\n")
0000000000000000000000000000000000000000;;		textsize := len(text)
0000000000000000000000000000000000000000;;		for len(text) > 60 {
0000000000000000000000000000000000000000;;			fmt.Printf("\t%q +\n", text[:60])
0000000000000000000000000000000000000000;;			text = text[60:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Printf("\t%q\n\n", text)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fmt.Fprintf(os.Stderr, "%d atoms; %d string bytes + %d tables = %d total data\n", len(all), textsize, datasize, textsize+datasize)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type byLen []string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (x byLen) Less(i, j int) bool { return len(x[i]) > len(x[j]) }
0000000000000000000000000000000000000000;;	func (x byLen) Swap(i, j int)      { x[i], x[j] = x[j], x[i] }
0000000000000000000000000000000000000000;;	func (x byLen) Len() int           { return len(x) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// fnv computes the FNV hash with an arbitrary starting value h.
0000000000000000000000000000000000000000;;	func fnv(h uint32, s string) uint32 {
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); i++ {
0000000000000000000000000000000000000000;;			h ^= uint32(s[i])
0000000000000000000000000000000000000000;;			h *= 16777619
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return h
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A table represents an attempt at constructing the lookup table.
0000000000000000000000000000000000000000;;	// The lookup table uses cuckoo hashing, meaning that each string
0000000000000000000000000000000000000000;;	// can be found in one of two positions.
0000000000000000000000000000000000000000;;	type table struct {
0000000000000000000000000000000000000000;;		h0   uint32
0000000000000000000000000000000000000000;;		k    uint
0000000000000000000000000000000000000000;;		mask uint32
0000000000000000000000000000000000000000;;		tab  []string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// hash returns the two hashes for s.
0000000000000000000000000000000000000000;;	func (t *table) hash(s string) (h1, h2 uint32) {
0000000000000000000000000000000000000000;;		h := fnv(t.h0, s)
0000000000000000000000000000000000000000;;		h1 = h & t.mask
0000000000000000000000000000000000000000;;		h2 = (h >> 16) & t.mask
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// init initializes the table with the given parameters.
0000000000000000000000000000000000000000;;	// h0 is the initial hash value,
0000000000000000000000000000000000000000;;	// k is the number of bits of hash value to use, and
0000000000000000000000000000000000000000;;	// x is the list of strings to store in the table.
0000000000000000000000000000000000000000;;	// init returns false if the table cannot be constructed.
0000000000000000000000000000000000000000;;	func (t *table) init(h0 uint32, k uint, x []string) bool {
0000000000000000000000000000000000000000;;		t.h0 = h0
0000000000000000000000000000000000000000;;		t.k = k
0000000000000000000000000000000000000000;;		t.tab = make([]string, 1<<k)
0000000000000000000000000000000000000000;;		t.mask = 1<<k - 1
0000000000000000000000000000000000000000;;		for _, s := range x {
0000000000000000000000000000000000000000;;			if !t.insert(s) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// insert inserts s in the table.
0000000000000000000000000000000000000000;;	func (t *table) insert(s string) bool {
0000000000000000000000000000000000000000;;		h1, h2 := t.hash(s)
0000000000000000000000000000000000000000;;		if t.tab[h1] == "" {
0000000000000000000000000000000000000000;;			t.tab[h1] = s
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.tab[h2] == "" {
0000000000000000000000000000000000000000;;			t.tab[h2] = s
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.push(h1, 0) {
0000000000000000000000000000000000000000;;			t.tab[h1] = s
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if t.push(h2, 0) {
0000000000000000000000000000000000000000;;			t.tab[h2] = s
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// push attempts to push aside the entry in slot i.
0000000000000000000000000000000000000000;;	func (t *table) push(i uint32, depth int) bool {
0000000000000000000000000000000000000000;;		if depth > len(t.tab) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := t.tab[i]
0000000000000000000000000000000000000000;;		h1, h2 := t.hash(s)
0000000000000000000000000000000000000000;;		j := h1 + h2 - i
0000000000000000000000000000000000000000;;		if t.tab[j] != "" && !t.push(j, depth+1) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t.tab[j] = s
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The lists of element names and attribute keys were taken from
0000000000000000000000000000000000000000;;	// https://html.spec.whatwg.org/multipage/indices.html#index
0000000000000000000000000000000000000000;;	// as of the "HTML Living Standard - Last Updated 21 February 2015" version.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var elements = []string{
0000000000000000000000000000000000000000;;		"a",
0000000000000000000000000000000000000000;;		"abbr",
0000000000000000000000000000000000000000;;		"address",
0000000000000000000000000000000000000000;;		"area",
0000000000000000000000000000000000000000;;		"article",
0000000000000000000000000000000000000000;;		"aside",
0000000000000000000000000000000000000000;;		"audio",
0000000000000000000000000000000000000000;;		"b",
0000000000000000000000000000000000000000;;		"base",
0000000000000000000000000000000000000000;;		"bdi",
0000000000000000000000000000000000000000;;		"bdo",
0000000000000000000000000000000000000000;;		"blockquote",
0000000000000000000000000000000000000000;;		"body",
0000000000000000000000000000000000000000;;		"br",
0000000000000000000000000000000000000000;;		"button",
0000000000000000000000000000000000000000;;		"canvas",
0000000000000000000000000000000000000000;;		"caption",
0000000000000000000000000000000000000000;;		"cite",
0000000000000000000000000000000000000000;;		"code",
0000000000000000000000000000000000000000;;		"col",
0000000000000000000000000000000000000000;;		"colgroup",
0000000000000000000000000000000000000000;;		"command",
0000000000000000000000000000000000000000;;		"data",
0000000000000000000000000000000000000000;;		"datalist",
0000000000000000000000000000000000000000;;		"dd",
0000000000000000000000000000000000000000;;		"del",
0000000000000000000000000000000000000000;;		"details",
0000000000000000000000000000000000000000;;		"dfn",
0000000000000000000000000000000000000000;;		"dialog",
0000000000000000000000000000000000000000;;		"div",
0000000000000000000000000000000000000000;;		"dl",
0000000000000000000000000000000000000000;;		"dt",
0000000000000000000000000000000000000000;;		"em",
0000000000000000000000000000000000000000;;		"embed",
0000000000000000000000000000000000000000;;		"fieldset",
0000000000000000000000000000000000000000;;		"figcaption",
0000000000000000000000000000000000000000;;		"figure",
0000000000000000000000000000000000000000;;		"footer",
0000000000000000000000000000000000000000;;		"form",
0000000000000000000000000000000000000000;;		"h1",
0000000000000000000000000000000000000000;;		"h2",
0000000000000000000000000000000000000000;;		"h3",
0000000000000000000000000000000000000000;;		"h4",
0000000000000000000000000000000000000000;;		"h5",
0000000000000000000000000000000000000000;;		"h6",
0000000000000000000000000000000000000000;;		"head",
0000000000000000000000000000000000000000;;		"header",
0000000000000000000000000000000000000000;;		"hgroup",
0000000000000000000000000000000000000000;;		"hr",
0000000000000000000000000000000000000000;;		"html",
0000000000000000000000000000000000000000;;		"i",
0000000000000000000000000000000000000000;;		"iframe",
0000000000000000000000000000000000000000;;		"img",
0000000000000000000000000000000000000000;;		"input",
0000000000000000000000000000000000000000;;		"ins",
0000000000000000000000000000000000000000;;		"kbd",
0000000000000000000000000000000000000000;;		"keygen",
0000000000000000000000000000000000000000;;		"label",
0000000000000000000000000000000000000000;;		"legend",
0000000000000000000000000000000000000000;;		"li",
0000000000000000000000000000000000000000;;		"link",
0000000000000000000000000000000000000000;;		"map",
0000000000000000000000000000000000000000;;		"mark",
0000000000000000000000000000000000000000;;		"menu",
0000000000000000000000000000000000000000;;		"menuitem",
0000000000000000000000000000000000000000;;		"meta",
0000000000000000000000000000000000000000;;		"meter",
0000000000000000000000000000000000000000;;		"nav",
0000000000000000000000000000000000000000;;		"noscript",
0000000000000000000000000000000000000000;;		"object",
0000000000000000000000000000000000000000;;		"ol",
0000000000000000000000000000000000000000;;		"optgroup",
0000000000000000000000000000000000000000;;		"option",
0000000000000000000000000000000000000000;;		"output",
0000000000000000000000000000000000000000;;		"p",
0000000000000000000000000000000000000000;;		"param",
0000000000000000000000000000000000000000;;		"pre",
0000000000000000000000000000000000000000;;		"progress",
0000000000000000000000000000000000000000;;		"q",
0000000000000000000000000000000000000000;;		"rp",
0000000000000000000000000000000000000000;;		"rt",
0000000000000000000000000000000000000000;;		"ruby",
0000000000000000000000000000000000000000;;		"s",
0000000000000000000000000000000000000000;;		"samp",
0000000000000000000000000000000000000000;;		"script",
0000000000000000000000000000000000000000;;		"section",
0000000000000000000000000000000000000000;;		"select",
0000000000000000000000000000000000000000;;		"small",
0000000000000000000000000000000000000000;;		"source",
0000000000000000000000000000000000000000;;		"span",
0000000000000000000000000000000000000000;;		"strong",
0000000000000000000000000000000000000000;;		"style",
0000000000000000000000000000000000000000;;		"sub",
0000000000000000000000000000000000000000;;		"summary",
0000000000000000000000000000000000000000;;		"sup",
0000000000000000000000000000000000000000;;		"table",
0000000000000000000000000000000000000000;;		"tbody",
0000000000000000000000000000000000000000;;		"td",
0000000000000000000000000000000000000000;;		"template",
0000000000000000000000000000000000000000;;		"textarea",
0000000000000000000000000000000000000000;;		"tfoot",
0000000000000000000000000000000000000000;;		"th",
0000000000000000000000000000000000000000;;		"thead",
0000000000000000000000000000000000000000;;		"time",
0000000000000000000000000000000000000000;;		"title",
0000000000000000000000000000000000000000;;		"tr",
0000000000000000000000000000000000000000;;		"track",
0000000000000000000000000000000000000000;;		"u",
0000000000000000000000000000000000000000;;		"ul",
0000000000000000000000000000000000000000;;		"var",
0000000000000000000000000000000000000000;;		"video",
0000000000000000000000000000000000000000;;		"wbr",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// https://html.spec.whatwg.org/multipage/indices.html#attributes-3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var attributes = []string{
0000000000000000000000000000000000000000;;		"abbr",
0000000000000000000000000000000000000000;;		"accept",
0000000000000000000000000000000000000000;;		"accept-charset",
0000000000000000000000000000000000000000;;		"accesskey",
0000000000000000000000000000000000000000;;		"action",
0000000000000000000000000000000000000000;;		"alt",
0000000000000000000000000000000000000000;;		"async",
0000000000000000000000000000000000000000;;		"autocomplete",
0000000000000000000000000000000000000000;;		"autofocus",
0000000000000000000000000000000000000000;;		"autoplay",
0000000000000000000000000000000000000000;;		"challenge",
0000000000000000000000000000000000000000;;		"charset",
0000000000000000000000000000000000000000;;		"checked",
0000000000000000000000000000000000000000;;		"cite",
0000000000000000000000000000000000000000;;		"class",
0000000000000000000000000000000000000000;;		"cols",
0000000000000000000000000000000000000000;;		"colspan",
0000000000000000000000000000000000000000;;		"command",
0000000000000000000000000000000000000000;;		"content",
0000000000000000000000000000000000000000;;		"contenteditable",
0000000000000000000000000000000000000000;;		"contextmenu",
0000000000000000000000000000000000000000;;		"controls",
0000000000000000000000000000000000000000;;		"coords",
0000000000000000000000000000000000000000;;		"crossorigin",
0000000000000000000000000000000000000000;;		"data",
0000000000000000000000000000000000000000;;		"datetime",
0000000000000000000000000000000000000000;;		"default",
0000000000000000000000000000000000000000;;		"defer",
0000000000000000000000000000000000000000;;		"dir",
0000000000000000000000000000000000000000;;		"dirname",
0000000000000000000000000000000000000000;;		"disabled",
0000000000000000000000000000000000000000;;		"download",
0000000000000000000000000000000000000000;;		"draggable",
0000000000000000000000000000000000000000;;		"dropzone",
0000000000000000000000000000000000000000;;		"enctype",
0000000000000000000000000000000000000000;;		"for",
0000000000000000000000000000000000000000;;		"form",
0000000000000000000000000000000000000000;;		"formaction",
0000000000000000000000000000000000000000;;		"formenctype",
0000000000000000000000000000000000000000;;		"formmethod",
0000000000000000000000000000000000000000;;		"formnovalidate",
0000000000000000000000000000000000000000;;		"formtarget",
0000000000000000000000000000000000000000;;		"headers",
0000000000000000000000000000000000000000;;		"height",
0000000000000000000000000000000000000000;;		"hidden",
0000000000000000000000000000000000000000;;		"high",
0000000000000000000000000000000000000000;;		"href",
0000000000000000000000000000000000000000;;		"hreflang",
0000000000000000000000000000000000000000;;		"http-equiv",
0000000000000000000000000000000000000000;;		"icon",
0000000000000000000000000000000000000000;;		"id",
0000000000000000000000000000000000000000;;		"inputmode",
0000000000000000000000000000000000000000;;		"ismap",
0000000000000000000000000000000000000000;;		"itemid",
0000000000000000000000000000000000000000;;		"itemprop",
0000000000000000000000000000000000000000;;		"itemref",
0000000000000000000000000000000000000000;;		"itemscope",
0000000000000000000000000000000000000000;;		"itemtype",
0000000000000000000000000000000000000000;;		"keytype",
0000000000000000000000000000000000000000;;		"kind",
0000000000000000000000000000000000000000;;		"label",
0000000000000000000000000000000000000000;;		"lang",
0000000000000000000000000000000000000000;;		"list",
0000000000000000000000000000000000000000;;		"loop",
0000000000000000000000000000000000000000;;		"low",
0000000000000000000000000000000000000000;;		"manifest",
0000000000000000000000000000000000000000;;		"max",
0000000000000000000000000000000000000000;;		"maxlength",
0000000000000000000000000000000000000000;;		"media",
0000000000000000000000000000000000000000;;		"mediagroup",
0000000000000000000000000000000000000000;;		"method",
0000000000000000000000000000000000000000;;		"min",
0000000000000000000000000000000000000000;;		"minlength",
0000000000000000000000000000000000000000;;		"multiple",
0000000000000000000000000000000000000000;;		"muted",
0000000000000000000000000000000000000000;;		"name",
0000000000000000000000000000000000000000;;		"novalidate",
0000000000000000000000000000000000000000;;		"open",
0000000000000000000000000000000000000000;;		"optimum",
0000000000000000000000000000000000000000;;		"pattern",
0000000000000000000000000000000000000000;;		"ping",
0000000000000000000000000000000000000000;;		"placeholder",
0000000000000000000000000000000000000000;;		"poster",
0000000000000000000000000000000000000000;;		"preload",
0000000000000000000000000000000000000000;;		"radiogroup",
0000000000000000000000000000000000000000;;		"readonly",
0000000000000000000000000000000000000000;;		"rel",
0000000000000000000000000000000000000000;;		"required",
0000000000000000000000000000000000000000;;		"reversed",
0000000000000000000000000000000000000000;;		"rows",
0000000000000000000000000000000000000000;;		"rowspan",
0000000000000000000000000000000000000000;;		"sandbox",
0000000000000000000000000000000000000000;;		"spellcheck",
0000000000000000000000000000000000000000;;		"scope",
0000000000000000000000000000000000000000;;		"scoped",
0000000000000000000000000000000000000000;;		"seamless",
0000000000000000000000000000000000000000;;		"selected",
0000000000000000000000000000000000000000;;		"shape",
0000000000000000000000000000000000000000;;		"size",
0000000000000000000000000000000000000000;;		"sizes",
0000000000000000000000000000000000000000;;		"sortable",
0000000000000000000000000000000000000000;;		"sorted",
0000000000000000000000000000000000000000;;		"span",
0000000000000000000000000000000000000000;;		"src",
0000000000000000000000000000000000000000;;		"srcdoc",
0000000000000000000000000000000000000000;;		"srclang",
0000000000000000000000000000000000000000;;		"start",
0000000000000000000000000000000000000000;;		"step",
0000000000000000000000000000000000000000;;		"style",
0000000000000000000000000000000000000000;;		"tabindex",
0000000000000000000000000000000000000000;;		"target",
0000000000000000000000000000000000000000;;		"title",
0000000000000000000000000000000000000000;;		"translate",
0000000000000000000000000000000000000000;;		"type",
0000000000000000000000000000000000000000;;		"typemustmatch",
0000000000000000000000000000000000000000;;		"usemap",
0000000000000000000000000000000000000000;;		"value",
0000000000000000000000000000000000000000;;		"width",
0000000000000000000000000000000000000000;;		"wrap",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var eventHandlers = []string{
0000000000000000000000000000000000000000;;		"onabort",
0000000000000000000000000000000000000000;;		"onautocomplete",
0000000000000000000000000000000000000000;;		"onautocompleteerror",
0000000000000000000000000000000000000000;;		"onafterprint",
0000000000000000000000000000000000000000;;		"onbeforeprint",
0000000000000000000000000000000000000000;;		"onbeforeunload",
0000000000000000000000000000000000000000;;		"onblur",
0000000000000000000000000000000000000000;;		"oncancel",
0000000000000000000000000000000000000000;;		"oncanplay",
0000000000000000000000000000000000000000;;		"oncanplaythrough",
0000000000000000000000000000000000000000;;		"onchange",
0000000000000000000000000000000000000000;;		"onclick",
0000000000000000000000000000000000000000;;		"onclose",
0000000000000000000000000000000000000000;;		"oncontextmenu",
0000000000000000000000000000000000000000;;		"oncuechange",
0000000000000000000000000000000000000000;;		"ondblclick",
0000000000000000000000000000000000000000;;		"ondrag",
0000000000000000000000000000000000000000;;		"ondragend",
0000000000000000000000000000000000000000;;		"ondragenter",
0000000000000000000000000000000000000000;;		"ondragleave",
0000000000000000000000000000000000000000;;		"ondragover",
0000000000000000000000000000000000000000;;		"ondragstart",
0000000000000000000000000000000000000000;;		"ondrop",
0000000000000000000000000000000000000000;;		"ondurationchange",
0000000000000000000000000000000000000000;;		"onemptied",
0000000000000000000000000000000000000000;;		"onended",
0000000000000000000000000000000000000000;;		"onerror",
0000000000000000000000000000000000000000;;		"onfocus",
0000000000000000000000000000000000000000;;		"onhashchange",
0000000000000000000000000000000000000000;;		"oninput",
0000000000000000000000000000000000000000;;		"oninvalid",
0000000000000000000000000000000000000000;;		"onkeydown",
0000000000000000000000000000000000000000;;		"onkeypress",
0000000000000000000000000000000000000000;;		"onkeyup",
0000000000000000000000000000000000000000;;		"onlanguagechange",
0000000000000000000000000000000000000000;;		"onload",
0000000000000000000000000000000000000000;;		"onloadeddata",
0000000000000000000000000000000000000000;;		"onloadedmetadata",
0000000000000000000000000000000000000000;;		"onloadstart",
0000000000000000000000000000000000000000;;		"onmessage",
0000000000000000000000000000000000000000;;		"onmousedown",
0000000000000000000000000000000000000000;;		"onmousemove",
0000000000000000000000000000000000000000;;		"onmouseout",
0000000000000000000000000000000000000000;;		"onmouseover",
0000000000000000000000000000000000000000;;		"onmouseup",
0000000000000000000000000000000000000000;;		"onmousewheel",
0000000000000000000000000000000000000000;;		"onoffline",
0000000000000000000000000000000000000000;;		"ononline",
0000000000000000000000000000000000000000;;		"onpagehide",
0000000000000000000000000000000000000000;;		"onpageshow",
0000000000000000000000000000000000000000;;		"onpause",
0000000000000000000000000000000000000000;;		"onplay",
0000000000000000000000000000000000000000;;		"onplaying",
0000000000000000000000000000000000000000;;		"onpopstate",
0000000000000000000000000000000000000000;;		"onprogress",
0000000000000000000000000000000000000000;;		"onratechange",
0000000000000000000000000000000000000000;;		"onreset",
0000000000000000000000000000000000000000;;		"onresize",
0000000000000000000000000000000000000000;;		"onscroll",
0000000000000000000000000000000000000000;;		"onseeked",
0000000000000000000000000000000000000000;;		"onseeking",
0000000000000000000000000000000000000000;;		"onselect",
0000000000000000000000000000000000000000;;		"onshow",
0000000000000000000000000000000000000000;;		"onsort",
0000000000000000000000000000000000000000;;		"onstalled",
0000000000000000000000000000000000000000;;		"onstorage",
0000000000000000000000000000000000000000;;		"onsubmit",
0000000000000000000000000000000000000000;;		"onsuspend",
0000000000000000000000000000000000000000;;		"ontimeupdate",
0000000000000000000000000000000000000000;;		"ontoggle",
0000000000000000000000000000000000000000;;		"onunload",
0000000000000000000000000000000000000000;;		"onvolumechange",
0000000000000000000000000000000000000000;;		"onwaiting",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// extra are ad-hoc values not covered by any of the lists above.
0000000000000000000000000000000000000000;;	var extra = []string{
0000000000000000000000000000000000000000;;		"align",
0000000000000000000000000000000000000000;;		"annotation",
0000000000000000000000000000000000000000;;		"annotation-xml",
0000000000000000000000000000000000000000;;		"applet",
0000000000000000000000000000000000000000;;		"basefont",
0000000000000000000000000000000000000000;;		"bgsound",
0000000000000000000000000000000000000000;;		"big",
0000000000000000000000000000000000000000;;		"blink",
0000000000000000000000000000000000000000;;		"center",
0000000000000000000000000000000000000000;;		"color",
0000000000000000000000000000000000000000;;		"desc",
0000000000000000000000000000000000000000;;		"face",
0000000000000000000000000000000000000000;;		"font",
0000000000000000000000000000000000000000;;		"foreignObject", // HTML is case-insensitive, but SVG-embedded-in-HTML is case-sensitive.
0000000000000000000000000000000000000000;;		"foreignobject",
0000000000000000000000000000000000000000;;		"frame",
0000000000000000000000000000000000000000;;		"frameset",
0000000000000000000000000000000000000000;;		"image",
0000000000000000000000000000000000000000;;		"isindex",
0000000000000000000000000000000000000000;;		"listing",
0000000000000000000000000000000000000000;;		"malignmark",
0000000000000000000000000000000000000000;;		"marquee",
0000000000000000000000000000000000000000;;		"math",
0000000000000000000000000000000000000000;;		"mglyph",
0000000000000000000000000000000000000000;;		"mi",
0000000000000000000000000000000000000000;;		"mn",
0000000000000000000000000000000000000000;;		"mo",
0000000000000000000000000000000000000000;;		"ms",
0000000000000000000000000000000000000000;;		"mtext",
0000000000000000000000000000000000000000;;		"nobr",
0000000000000000000000000000000000000000;;		"noembed",
0000000000000000000000000000000000000000;;		"noframes",
0000000000000000000000000000000000000000;;		"plaintext",
0000000000000000000000000000000000000000;;		"prompt",
0000000000000000000000000000000000000000;;		"public",
0000000000000000000000000000000000000000;;		"spacer",
0000000000000000000000000000000000000000;;		"strike",
0000000000000000000000000000000000000000;;		"svg",
0000000000000000000000000000000000000000;;		"system",
0000000000000000000000000000000000000000;;		"tt",
0000000000000000000000000000000000000000;;		"xmp",
0000000000000000000000000000000000000000;;	}
