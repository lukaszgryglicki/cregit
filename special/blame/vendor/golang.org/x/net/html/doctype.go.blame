0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
c2bfd044362efe23765620d054edcdab7497bde5;third_party/src/code.google.com/p/go.net/html/doctype.go[third_party/src/code.google.com/p/go.net/html/doctype.go][vendor/golang.org/x/net/html/doctype.go];	
0000000000000000000000000000000000000000;;	package html
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// parseDoctype parses the data from a DoctypeToken into a name,
0000000000000000000000000000000000000000;;	// public identifier, and system identifier. It returns a Node whose Type
0000000000000000000000000000000000000000;;	// is DoctypeNode, whose Data is the name, and which has attributes
0000000000000000000000000000000000000000;;	// named "system" and "public" for the two identifiers if they were present.
0000000000000000000000000000000000000000;;	// quirks is whether the document should be parsed in "quirks mode".
0000000000000000000000000000000000000000;;	func parseDoctype(s string) (n *Node, quirks bool) {
0000000000000000000000000000000000000000;;		n = &Node{Type: DoctypeNode}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Find the name.
0000000000000000000000000000000000000000;;		space := strings.IndexAny(s, whitespace)
0000000000000000000000000000000000000000;;		if space == -1 {
0000000000000000000000000000000000000000;;			space = len(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n.Data = s[:space]
0000000000000000000000000000000000000000;;		// The comparison to "html" is case-sensitive.
0000000000000000000000000000000000000000;;		if n.Data != "html" {
0000000000000000000000000000000000000000;;			quirks = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n.Data = strings.ToLower(n.Data)
0000000000000000000000000000000000000000;;		s = strings.TrimLeft(s[space:], whitespace)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(s) < 6 {
0000000000000000000000000000000000000000;;			// It can't start with "PUBLIC" or "SYSTEM".
0000000000000000000000000000000000000000;;			// Ignore the rest of the string.
0000000000000000000000000000000000000000;;			return n, quirks || s != ""
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key := strings.ToLower(s[:6])
0000000000000000000000000000000000000000;;		s = s[6:]
0000000000000000000000000000000000000000;;		for key == "public" || key == "system" {
0000000000000000000000000000000000000000;;			s = strings.TrimLeft(s, whitespace)
0000000000000000000000000000000000000000;;			if s == "" {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			quote := s[0]
0000000000000000000000000000000000000000;;			if quote != '"' && quote != '\'' {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s = s[1:]
0000000000000000000000000000000000000000;;			q := strings.IndexRune(s, rune(quote))
0000000000000000000000000000000000000000;;			var id string
0000000000000000000000000000000000000000;;			if q == -1 {
0000000000000000000000000000000000000000;;				id = s
0000000000000000000000000000000000000000;;				s = ""
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				id = s[:q]
0000000000000000000000000000000000000000;;				s = s[q+1:]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			n.Attr = append(n.Attr, Attribute{Key: key, Val: id})
0000000000000000000000000000000000000000;;			if key == "public" {
0000000000000000000000000000000000000000;;				key = "system"
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				key = ""
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if key != "" || s != "" {
0000000000000000000000000000000000000000;;			quirks = true
0000000000000000000000000000000000000000;;		} else if len(n.Attr) > 0 {
0000000000000000000000000000000000000000;;			if n.Attr[0].Key == "public" {
0000000000000000000000000000000000000000;;				public := strings.ToLower(n.Attr[0].Val)
0000000000000000000000000000000000000000;;				switch public {
0000000000000000000000000000000000000000;;				case "-//w3o//dtd w3 html strict 3.0//en//", "-/w3d/dtd html 4.0 transitional/en", "html":
0000000000000000000000000000000000000000;;					quirks = true
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					for _, q := range quirkyIDs {
0000000000000000000000000000000000000000;;						if strings.HasPrefix(public, q) {
0000000000000000000000000000000000000000;;							quirks = true
0000000000000000000000000000000000000000;;							break
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				// The following two public IDs only cause quirks mode if there is no system ID.
0000000000000000000000000000000000000000;;				if len(n.Attr) == 1 && (strings.HasPrefix(public, "-//w3c//dtd html 4.01 frameset//") ||
0000000000000000000000000000000000000000;;					strings.HasPrefix(public, "-//w3c//dtd html 4.01 transitional//")) {
0000000000000000000000000000000000000000;;					quirks = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if lastAttr := n.Attr[len(n.Attr)-1]; lastAttr.Key == "system" &&
0000000000000000000000000000000000000000;;				strings.ToLower(lastAttr.Val) == "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd" {
0000000000000000000000000000000000000000;;				quirks = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return n, quirks
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// quirkyIDs is a list of public doctype identifiers that cause a document
0000000000000000000000000000000000000000;;	// to be interpreted in quirks mode. The identifiers should be in lower case.
0000000000000000000000000000000000000000;;	var quirkyIDs = []string{
0000000000000000000000000000000000000000;;		"+//silmaril//dtd html pro v0r11 19970101//",
0000000000000000000000000000000000000000;;		"-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
0000000000000000000000000000000000000000;;		"-//as//dtd html 3.0 aswedit + extensions//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0 level 1//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0 level 2//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0 strict level 1//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0 strict level 2//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0 strict//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.0//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 2.1e//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 3.0//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 3.2 final//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 3.2//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html 3//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html level 0//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html level 1//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html level 2//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html level 3//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html strict level 0//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html strict level 1//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html strict level 2//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html strict level 3//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html strict//",
0000000000000000000000000000000000000000;;		"-//ietf//dtd html//",
0000000000000000000000000000000000000000;;		"-//metrius//dtd metrius presentational//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 2.0 html strict//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 2.0 html//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 2.0 tables//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 3.0 html strict//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 3.0 html//",
0000000000000000000000000000000000000000;;		"-//microsoft//dtd internet explorer 3.0 tables//",
0000000000000000000000000000000000000000;;		"-//netscape comm. corp.//dtd html//",
0000000000000000000000000000000000000000;;		"-//netscape comm. corp.//dtd strict html//",
0000000000000000000000000000000000000000;;		"-//o'reilly and associates//dtd html 2.0//",
0000000000000000000000000000000000000000;;		"-//o'reilly and associates//dtd html extended 1.0//",
0000000000000000000000000000000000000000;;		"-//o'reilly and associates//dtd html extended relaxed 1.0//",
0000000000000000000000000000000000000000;;		"-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
0000000000000000000000000000000000000000;;		"-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
0000000000000000000000000000000000000000;;		"-//spyglass//dtd html 2.0 extended//",
0000000000000000000000000000000000000000;;		"-//sq//dtd html 2.0 hotmetal + extensions//",
0000000000000000000000000000000000000000;;		"-//sun microsystems corp.//dtd hotjava html//",
0000000000000000000000000000000000000000;;		"-//sun microsystems corp.//dtd hotjava strict html//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 3 1995-03-24//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 3.2 draft//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 3.2 final//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 3.2//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 3.2s draft//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 4.0 frameset//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html 4.0 transitional//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html experimental 19960712//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd html experimental 970421//",
0000000000000000000000000000000000000000;;		"-//w3c//dtd w3 html//",
0000000000000000000000000000000000000000;;		"-//w3o//dtd w3 html 3.0//",
0000000000000000000000000000000000000000;;		"-//webtechs//dtd mozilla html 2.0//",
0000000000000000000000000000000000000000;;		"-//webtechs//dtd mozilla html//",
0000000000000000000000000000000000000000;;	}
