0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5523d6b09d9d51d8a0e43a77ea5d81aa9394f2bf;third_party/src/code.google.com/p/go.net/websocket/server.go[third_party/src/code.google.com/p/go.net/websocket/server.go][vendor/golang.org/x/net/websocket/server.go];	
0000000000000000000000000000000000000000;;	package websocket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServerConn(rwc io.ReadWriteCloser, buf *bufio.ReadWriter, req *http.Request, config *Config, handshake func(*Config, *http.Request) error) (conn *Conn, err error) {
0000000000000000000000000000000000000000;;		var hs serverHandshaker = &hybiServerHandshaker{Config: config}
0000000000000000000000000000000000000000;;		code, err := hs.ReadHandshake(buf.Reader, req)
0000000000000000000000000000000000000000;;		if err == ErrBadWebSocketVersion {
0000000000000000000000000000000000000000;;			fmt.Fprintf(buf, "HTTP/1.1 %03d %s\r\n", code, http.StatusText(code))
0000000000000000000000000000000000000000;;			fmt.Fprintf(buf, "Sec-WebSocket-Version: %s\r\n", SupportedProtocolVersion)
0000000000000000000000000000000000000000;;			buf.WriteString("\r\n")
0000000000000000000000000000000000000000;;			buf.WriteString(err.Error())
0000000000000000000000000000000000000000;;			buf.Flush()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Fprintf(buf, "HTTP/1.1 %03d %s\r\n", code, http.StatusText(code))
0000000000000000000000000000000000000000;;			buf.WriteString("\r\n")
0000000000000000000000000000000000000000;;			buf.WriteString(err.Error())
0000000000000000000000000000000000000000;;			buf.Flush()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if handshake != nil {
0000000000000000000000000000000000000000;;			err = handshake(config, req)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				code = http.StatusForbidden
0000000000000000000000000000000000000000;;				fmt.Fprintf(buf, "HTTP/1.1 %03d %s\r\n", code, http.StatusText(code))
0000000000000000000000000000000000000000;;				buf.WriteString("\r\n")
0000000000000000000000000000000000000000;;				buf.Flush()
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = hs.AcceptHandshake(buf.Writer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			code = http.StatusBadRequest
0000000000000000000000000000000000000000;;			fmt.Fprintf(buf, "HTTP/1.1 %03d %s\r\n", code, http.StatusText(code))
0000000000000000000000000000000000000000;;			buf.WriteString("\r\n")
0000000000000000000000000000000000000000;;			buf.Flush()
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		conn = hs.NewServerConn(buf, rwc, req)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Server represents a server of a WebSocket.
0000000000000000000000000000000000000000;;	type Server struct {
0000000000000000000000000000000000000000;;		// Config is a WebSocket configuration for new WebSocket connection.
0000000000000000000000000000000000000000;;		Config
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handshake is an optional function in WebSocket handshake.
0000000000000000000000000000000000000000;;		// For example, you can check, or don't check Origin header.
0000000000000000000000000000000000000000;;		// Another example, you can select config.Protocol.
0000000000000000000000000000000000000000;;		Handshake func(*Config, *http.Request) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Handler handles a WebSocket connection.
0000000000000000000000000000000000000000;;		Handler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServeHTTP implements the http.Handler interface for a WebSocket
0000000000000000000000000000000000000000;;	func (s Server) ServeHTTP(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		s.serveWebSocket(w, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Server) serveWebSocket(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		rwc, buf, err := w.(http.Hijacker).Hijack()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic("Hijack failed: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// The server should abort the WebSocket connection if it finds
0000000000000000000000000000000000000000;;		// the client did not send a handshake that matches with protocol
0000000000000000000000000000000000000000;;		// specification.
0000000000000000000000000000000000000000;;		defer rwc.Close()
0000000000000000000000000000000000000000;;		conn, err := newServerConn(rwc, buf, req, &s.Config, s.Handshake)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if conn == nil {
0000000000000000000000000000000000000000;;			panic("unexpected nil conn")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Handler(conn)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handler is a simple interface to a WebSocket browser client.
0000000000000000000000000000000000000000;;	// It checks if Origin header is valid URL by default.
0000000000000000000000000000000000000000;;	// You might want to verify websocket.Conn.Config().Origin in the func.
0000000000000000000000000000000000000000;;	// If you use Server instead of Handler, you could call websocket.Origin and
0000000000000000000000000000000000000000;;	// check the origin in your Handshake func. So, if you want to accept
0000000000000000000000000000000000000000;;	// non-browser clients, which do not send an Origin header, set a
0000000000000000000000000000000000000000;;	// Server.Handshake that does not check the origin.
0000000000000000000000000000000000000000;;	type Handler func(*Conn)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func checkOrigin(config *Config, req *http.Request) (err error) {
0000000000000000000000000000000000000000;;		config.Origin, err = Origin(config, req)
0000000000000000000000000000000000000000;;		if err == nil && config.Origin == nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("null origin")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServeHTTP implements the http.Handler interface for a WebSocket
0000000000000000000000000000000000000000;;	func (h Handler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
0000000000000000000000000000000000000000;;		s := Server{Handler: h, Handshake: checkOrigin}
0000000000000000000000000000000000000000;;		s.serveWebSocket(w, req)
0000000000000000000000000000000000000000;;	}
