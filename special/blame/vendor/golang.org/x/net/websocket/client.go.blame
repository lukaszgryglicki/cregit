0000000000000000000000000000000000000000;;	// Copyright 2009 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5523d6b09d9d51d8a0e43a77ea5d81aa9394f2bf;third_party/src/code.google.com/p/go.net/websocket/client.go[third_party/src/code.google.com/p/go.net/websocket/client.go][vendor/golang.org/x/net/websocket/client.go];	
0000000000000000000000000000000000000000;;	package websocket
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DialError is an error that occurs while dialling a websocket server.
0000000000000000000000000000000000000000;;	type DialError struct {
0000000000000000000000000000000000000000;;		*Config
0000000000000000000000000000000000000000;;		Err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *DialError) Error() string {
0000000000000000000000000000000000000000;;		return "websocket.Dial " + e.Config.Location.String() + ": " + e.Err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewConfig creates a new WebSocket config for client connection.
0000000000000000000000000000000000000000;;	func NewConfig(server, origin string) (config *Config, err error) {
0000000000000000000000000000000000000000;;		config = new(Config)
0000000000000000000000000000000000000000;;		config.Version = ProtocolVersionHybi13
0000000000000000000000000000000000000000;;		config.Location, err = url.ParseRequestURI(server)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Origin, err = url.ParseRequestURI(origin)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		config.Header = http.Header(make(map[string][]string))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewClient creates a new WebSocket client connection over rwc.
0000000000000000000000000000000000000000;;	func NewClient(config *Config, rwc io.ReadWriteCloser) (ws *Conn, err error) {
0000000000000000000000000000000000000000;;		br := bufio.NewReader(rwc)
0000000000000000000000000000000000000000;;		bw := bufio.NewWriter(rwc)
0000000000000000000000000000000000000000;;		err = hybiClientHandshake(config, br, bw)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf := bufio.NewReadWriter(br, bw)
0000000000000000000000000000000000000000;;		ws = newHybiClientConn(config, buf, rwc)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dial opens a new client connection to a WebSocket.
0000000000000000000000000000000000000000;;	func Dial(url_, protocol, origin string) (ws *Conn, err error) {
0000000000000000000000000000000000000000;;		config, err := NewConfig(url_, origin)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if protocol != "" {
0000000000000000000000000000000000000000;;			config.Protocol = []string{protocol}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return DialConfig(config)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var portMap = map[string]string{
0000000000000000000000000000000000000000;;		"ws":  "80",
0000000000000000000000000000000000000000;;		"wss": "443",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func parseAuthority(location *url.URL) string {
0000000000000000000000000000000000000000;;		if _, ok := portMap[location.Scheme]; ok {
0000000000000000000000000000000000000000;;			if _, _, err := net.SplitHostPort(location.Host); err != nil {
0000000000000000000000000000000000000000;;				return net.JoinHostPort(location.Host, portMap[location.Scheme])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return location.Host
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DialConfig opens a new client connection to a WebSocket with a config.
0000000000000000000000000000000000000000;;	func DialConfig(config *Config) (ws *Conn, err error) {
0000000000000000000000000000000000000000;;		var client net.Conn
0000000000000000000000000000000000000000;;		if config.Location == nil {
0000000000000000000000000000000000000000;;			return nil, &DialError{config, ErrBadWebSocketLocation}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if config.Origin == nil {
0000000000000000000000000000000000000000;;			return nil, &DialError{config, ErrBadWebSocketOrigin}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dialer := config.Dialer
0000000000000000000000000000000000000000;;		if dialer == nil {
0000000000000000000000000000000000000000;;			dialer = &net.Dialer{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		client, err = dialWithDialer(dialer, config)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			goto Error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ws, err = NewClient(config, client)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			client.Close()
0000000000000000000000000000000000000000;;			goto Error
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Error:
0000000000000000000000000000000000000000;;		return nil, &DialError{config, err}
0000000000000000000000000000000000000000;;	}
