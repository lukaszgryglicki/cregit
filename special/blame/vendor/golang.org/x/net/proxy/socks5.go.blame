0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/golang.org/x/net/proxy/socks5.go[Godeps/_workspace/src/golang.org/x/net/proxy/socks5.go][vendor/golang.org/x/net/proxy/socks5.go];	
0000000000000000000000000000000000000000;;	package proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SOCKS5 returns a Dialer that makes SOCKSv5 connections to the given address
0000000000000000000000000000000000000000;;	// with an optional username and password. See RFC 1928.
0000000000000000000000000000000000000000;;	func SOCKS5(network, addr string, auth *Auth, forward Dialer) (Dialer, error) {
0000000000000000000000000000000000000000;;		s := &socks5{
0000000000000000000000000000000000000000;;			network: network,
0000000000000000000000000000000000000000;;			addr:    addr,
0000000000000000000000000000000000000000;;			forward: forward,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if auth != nil {
0000000000000000000000000000000000000000;;			s.user = auth.User
0000000000000000000000000000000000000000;;			s.password = auth.Password
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type socks5 struct {
0000000000000000000000000000000000000000;;		user, password string
0000000000000000000000000000000000000000;;		network, addr  string
0000000000000000000000000000000000000000;;		forward        Dialer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const socks5Version = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		socks5AuthNone     = 0
0000000000000000000000000000000000000000;;		socks5AuthPassword = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const socks5Connect = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		socks5IP4    = 1
0000000000000000000000000000000000000000;;		socks5Domain = 3
0000000000000000000000000000000000000000;;		socks5IP6    = 4
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var socks5Errors = []string{
0000000000000000000000000000000000000000;;		"",
0000000000000000000000000000000000000000;;		"general failure",
0000000000000000000000000000000000000000;;		"connection forbidden",
0000000000000000000000000000000000000000;;		"network unreachable",
0000000000000000000000000000000000000000;;		"host unreachable",
0000000000000000000000000000000000000000;;		"connection refused",
0000000000000000000000000000000000000000;;		"TTL expired",
0000000000000000000000000000000000000000;;		"command not supported",
0000000000000000000000000000000000000000;;		"address type not supported",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dial connects to the address addr on the network net via the SOCKS5 proxy.
0000000000000000000000000000000000000000;;	func (s *socks5) Dial(network, addr string) (net.Conn, error) {
0000000000000000000000000000000000000000;;		switch network {
0000000000000000000000000000000000000000;;		case "tcp", "tcp6", "tcp4":
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: no support for SOCKS5 proxy connections of type " + network)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		conn, err := s.forward.Dial(s.network, s.addr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		closeConn := &conn
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if closeConn != nil {
0000000000000000000000000000000000000000;;				(*closeConn).Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		host, portStr, err := net.SplitHostPort(addr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		port, err := strconv.Atoi(portStr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to parse port number: " + portStr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if port < 1 || port > 0xffff {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: port number out of range: " + portStr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// the size here is just an estimate
0000000000000000000000000000000000000000;;		buf := make([]byte, 0, 6+len(host))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf = append(buf, socks5Version)
0000000000000000000000000000000000000000;;		if len(s.user) > 0 && len(s.user) < 256 && len(s.password) < 256 {
0000000000000000000000000000000000000000;;			buf = append(buf, 2 /* num auth methods */, socks5AuthNone, socks5AuthPassword)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			buf = append(buf, 1 /* num auth methods */, socks5AuthNone)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := conn.Write(buf); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to write greeting to SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(conn, buf[:2]); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to read greeting from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if buf[0] != 5 {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: SOCKS5 proxy at " + s.addr + " has unexpected version " + strconv.Itoa(int(buf[0])))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if buf[1] == 0xff {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: SOCKS5 proxy at " + s.addr + " requires authentication")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if buf[1] == socks5AuthPassword {
0000000000000000000000000000000000000000;;			buf = buf[:0]
0000000000000000000000000000000000000000;;			buf = append(buf, 1 /* password protocol version */)
0000000000000000000000000000000000000000;;			buf = append(buf, uint8(len(s.user)))
0000000000000000000000000000000000000000;;			buf = append(buf, s.user...)
0000000000000000000000000000000000000000;;			buf = append(buf, uint8(len(s.password)))
0000000000000000000000000000000000000000;;			buf = append(buf, s.password...)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := conn.Write(buf); err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.New("proxy: failed to write authentication request to SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if _, err := io.ReadFull(conn, buf[:2]); err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.New("proxy: failed to read authentication reply from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if buf[1] != 0 {
0000000000000000000000000000000000000000;;				return nil, errors.New("proxy: SOCKS5 proxy at " + s.addr + " rejected username/password")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		buf = buf[:0]
0000000000000000000000000000000000000000;;		buf = append(buf, socks5Version, socks5Connect, 0 /* reserved */)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if ip := net.ParseIP(host); ip != nil {
0000000000000000000000000000000000000000;;			if ip4 := ip.To4(); ip4 != nil {
0000000000000000000000000000000000000000;;				buf = append(buf, socks5IP4)
0000000000000000000000000000000000000000;;				ip = ip4
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				buf = append(buf, socks5IP6)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf = append(buf, ip...)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(host) > 255 {
0000000000000000000000000000000000000000;;				return nil, errors.New("proxy: destination hostname too long: " + host)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			buf = append(buf, socks5Domain)
0000000000000000000000000000000000000000;;			buf = append(buf, byte(len(host)))
0000000000000000000000000000000000000000;;			buf = append(buf, host...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		buf = append(buf, byte(port>>8), byte(port))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := conn.Write(buf); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to write connect request to SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(conn, buf[:4]); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to read connect reply from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		failure := "unknown error"
0000000000000000000000000000000000000000;;		if int(buf[1]) < len(socks5Errors) {
0000000000000000000000000000000000000000;;			failure = socks5Errors[buf[1]]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(failure) > 0 {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: SOCKS5 proxy at " + s.addr + " failed to connect: " + failure)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bytesToDiscard := 0
0000000000000000000000000000000000000000;;		switch buf[3] {
0000000000000000000000000000000000000000;;		case socks5IP4:
0000000000000000000000000000000000000000;;			bytesToDiscard = net.IPv4len
0000000000000000000000000000000000000000;;		case socks5IP6:
0000000000000000000000000000000000000000;;			bytesToDiscard = net.IPv6len
0000000000000000000000000000000000000000;;		case socks5Domain:
0000000000000000000000000000000000000000;;			_, err := io.ReadFull(conn, buf[:1])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, errors.New("proxy: failed to read domain length from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			bytesToDiscard = int(buf[0])
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: got unknown address type " + strconv.Itoa(int(buf[3])) + " from SOCKS5 proxy at " + s.addr)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if cap(buf) < bytesToDiscard {
0000000000000000000000000000000000000000;;			buf = make([]byte, bytesToDiscard)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			buf = buf[:bytesToDiscard]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(conn, buf); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to read address from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Also need to discard the port number
0000000000000000000000000000000000000000;;		if _, err := io.ReadFull(conn, buf[:2]); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("proxy: failed to read port from SOCKS5 proxy at " + s.addr + ": " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		closeConn = nil
0000000000000000000000000000000000000000;;		return conn, nil
0000000000000000000000000000000000000000;;	}
