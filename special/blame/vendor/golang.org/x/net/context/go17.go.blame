0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5f86d3a99c832846d70d13f1c71f1c4ed2622a9c;;	
0000000000000000000000000000000000000000;;	// +build go1.7
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package context
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context" // standard library's context, as of Go 1.7
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		todo       = context.TODO()
0000000000000000000000000000000000000000;;		background = context.Background()
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Canceled is the error returned by Context.Err when the context is canceled.
0000000000000000000000000000000000000000;;	var Canceled = context.Canceled
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeadlineExceeded is the error returned by Context.Err when the context's
0000000000000000000000000000000000000000;;	// deadline passes.
0000000000000000000000000000000000000000;;	var DeadlineExceeded = context.DeadlineExceeded
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithCancel returns a copy of parent with a new Done channel. The returned
0000000000000000000000000000000000000000;;	// context's Done channel is closed when the returned cancel function is called
0000000000000000000000000000000000000000;;	// or when the parent context's Done channel is closed, whichever happens first.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Canceling this context releases resources associated with it, so code should
0000000000000000000000000000000000000000;;	// call cancel as soon as the operations running in this Context complete.
0000000000000000000000000000000000000000;;	func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {
0000000000000000000000000000000000000000;;		ctx, f := context.WithCancel(parent)
0000000000000000000000000000000000000000;;		return ctx, CancelFunc(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithDeadline returns a copy of the parent context with the deadline adjusted
0000000000000000000000000000000000000000;;	// to be no later than d.  If the parent's deadline is already earlier than d,
0000000000000000000000000000000000000000;;	// WithDeadline(parent, d) is semantically equivalent to parent.  The returned
0000000000000000000000000000000000000000;;	// context's Done channel is closed when the deadline expires, when the returned
0000000000000000000000000000000000000000;;	// cancel function is called, or when the parent context's Done channel is
0000000000000000000000000000000000000000;;	// closed, whichever happens first.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Canceling this context releases resources associated with it, so code should
0000000000000000000000000000000000000000;;	// call cancel as soon as the operations running in this Context complete.
0000000000000000000000000000000000000000;;	func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) {
0000000000000000000000000000000000000000;;		ctx, f := context.WithDeadline(parent, deadline)
0000000000000000000000000000000000000000;;		return ctx, CancelFunc(f)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Canceling this context releases resources associated with it, so code should
0000000000000000000000000000000000000000;;	// call cancel as soon as the operations running in this Context complete:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	func slowOperationWithTimeout(ctx context.Context) (Result, error) {
0000000000000000000000000000000000000000;;	// 		ctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)
0000000000000000000000000000000000000000;;	// 		defer cancel()  // releases resources if slowOperation completes before timeout elapses
0000000000000000000000000000000000000000;;	// 		return slowOperation(ctx)
0000000000000000000000000000000000000000;;	// 	}
0000000000000000000000000000000000000000;;	func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {
0000000000000000000000000000000000000000;;		return WithDeadline(parent, time.Now().Add(timeout))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WithValue returns a copy of parent in which the value associated with key is
0000000000000000000000000000000000000000;;	// val.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Use context Values only for request-scoped data that transits processes and
0000000000000000000000000000000000000000;;	// APIs, not for passing optional parameters to functions.
0000000000000000000000000000000000000000;;	func WithValue(parent Context, key interface{}, val interface{}) Context {
0000000000000000000000000000000000000000;;		return context.WithValue(parent, key, val)
0000000000000000000000000000000000000000;;	}
