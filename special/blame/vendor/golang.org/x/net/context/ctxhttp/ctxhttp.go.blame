0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
6fd497dba70f902b67873c1c49f71fd2a2ac0580;Godeps/_workspace/src/golang.org/x/net/context/ctxhttp/ctxhttp.go[Godeps/_workspace/src/golang.org/x/net/context/ctxhttp/ctxhttp.go][vendor/golang.org/x/net/context/ctxhttp/ctxhttp.go];	
0000000000000000000000000000000000000000;;	// +build go1.7
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package ctxhttp provides helper functions for performing context-aware HTTP requests.
0000000000000000000000000000000000000000;;	package ctxhttp
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do sends an HTTP request with the provided http.Client and returns
0000000000000000000000000000000000000000;;	// an HTTP response.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the client is nil, http.DefaultClient is used.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The provided ctx must be non-nil. If it is canceled or times out,
0000000000000000000000000000000000000000;;	// ctx.Err() will be returned.
0000000000000000000000000000000000000000;;	func Do(ctx context.Context, client *http.Client, req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			client = http.DefaultClient
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		resp, err := client.Do(req.WithContext(ctx))
0000000000000000000000000000000000000000;;		// If we got an error, and the context has been canceled,
0000000000000000000000000000000000000000;;		// the context's error is probably more useful.
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-ctx.Done():
0000000000000000000000000000000000000000;;				err = ctx.Err()
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get issues a GET request via the Do function.
0000000000000000000000000000000000000000;;	func Get(ctx context.Context, client *http.Client, url string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("GET", url, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Do(ctx, client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Head issues a HEAD request via the Do function.
0000000000000000000000000000000000000000;;	func Head(ctx context.Context, client *http.Client, url string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("HEAD", url, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return Do(ctx, client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Post issues a POST request via the Do function.
0000000000000000000000000000000000000000;;	func Post(ctx context.Context, client *http.Client, url string, bodyType string, body io.Reader) (*http.Response, error) {
0000000000000000000000000000000000000000;;		req, err := http.NewRequest("POST", url, body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("Content-Type", bodyType)
0000000000000000000000000000000000000000;;		return Do(ctx, client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PostForm issues a POST request via the Do function.
0000000000000000000000000000000000000000;;	func PostForm(ctx context.Context, client *http.Client, url string, data url.Values) (*http.Response, error) {
0000000000000000000000000000000000000000;;		return Post(ctx, client, url, "application/x-www-form-urlencoded", strings.NewReader(data.Encode()))
0000000000000000000000000000000000000000;;	}
