0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// Package idna implements IDNA2008 (Internationalized Domain Names for
0000000000000000000000000000000000000000;;	// Applications), defined in RFC 5890, RFC 5891, RFC 5892, RFC 5893 and
0000000000000000000000000000000000000000;;	// RFC 5894.
0000000000000000000000000000000000000000;;	package idna
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"unicode/utf8"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(nigeltao): specify when errors occur. For example, is ToASCII(".") or
0000000000000000000000000000000000000000;;	// ToASCII("foo\x00") an error? See also http://www.unicode.org/faq/idn.html#11
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// acePrefix is the ASCII Compatible Encoding prefix.
0000000000000000000000000000000000000000;;	const acePrefix = "xn--"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToASCII converts a domain or domain label to its ASCII form. For example,
0000000000000000000000000000000000000000;;	// ToASCII("bücher.example.com") is "xn--bcher-kva.example.com", and
0000000000000000000000000000000000000000;;	// ToASCII("golang") is "golang".
0000000000000000000000000000000000000000;;	func ToASCII(s string) (string, error) {
0000000000000000000000000000000000000000;;		if ascii(s) {
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labels := strings.Split(s, ".")
0000000000000000000000000000000000000000;;		for i, label := range labels {
0000000000000000000000000000000000000000;;			if !ascii(label) {
0000000000000000000000000000000000000000;;				a, err := encode(acePrefix, label)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				labels[i] = a
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(labels, "."), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ToUnicode converts a domain or domain label to its Unicode form. For example,
0000000000000000000000000000000000000000;;	// ToUnicode("xn--bcher-kva.example.com") is "bücher.example.com", and
0000000000000000000000000000000000000000;;	// ToUnicode("golang") is "golang".
0000000000000000000000000000000000000000;;	func ToUnicode(s string) (string, error) {
0000000000000000000000000000000000000000;;		if !strings.Contains(s, acePrefix) {
0000000000000000000000000000000000000000;;			return s, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		labels := strings.Split(s, ".")
0000000000000000000000000000000000000000;;		for i, label := range labels {
0000000000000000000000000000000000000000;;			if strings.HasPrefix(label, acePrefix) {
0000000000000000000000000000000000000000;;				u, err := decode(label[len(acePrefix):])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return "", err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				labels[i] = u
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(labels, "."), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ascii(s string) bool {
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); i++ {
0000000000000000000000000000000000000000;;			if s[i] >= utf8.RuneSelf {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
