0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5f86d3a99c832846d70d13f1c71f1c4ed2622a9c;;	
0000000000000000000000000000000000000000;;	// +build go1.6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package http2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func transportExpectContinueTimeout(t1 *http.Transport) time.Duration {
0000000000000000000000000000000000000000;;		return t1.ExpectContinueTimeout
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// isBadCipher reports whether the cipher is blacklisted by the HTTP/2 spec.
0000000000000000000000000000000000000000;;	func isBadCipher(cipher uint16) bool {
0000000000000000000000000000000000000000;;		switch cipher {
0000000000000000000000000000000000000000;;		case tls.TLS_RSA_WITH_RC4_128_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_RSA_WITH_AES_128_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_RSA_WITH_AES_256_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
0000000000000000000000000000000000000000;;			tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
0000000000000000000000000000000000000000;;			tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
0000000000000000000000000000000000000000;;			// Reject cipher suites from Appendix A.
0000000000000000000000000000000000000000;;			// "This list includes those cipher suites that do not
0000000000000000000000000000000000000000;;			// offer an ephemeral key exchange and those that are
0000000000000000000000000000000000000000;;			// based on the TLS null, stream or block cipher type"
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
