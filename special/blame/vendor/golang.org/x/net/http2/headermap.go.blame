0000000000000000000000000000000000000000;;	// Copyright 2014 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/bradfitz/http2/headermap.go[Godeps/_workspace/src/github.com/bradfitz/http2/headermap.go][vendor/golang.org/x/net/http2/headermap.go];	
0000000000000000000000000000000000000000;;	package http2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		commonLowerHeader = map[string]string{} // Go-Canonical-Case -> lower-case
0000000000000000000000000000000000000000;;		commonCanonHeader = map[string]string{} // lower-case -> Go-Canonical-Case
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		for _, v := range []string{
0000000000000000000000000000000000000000;;			"accept",
0000000000000000000000000000000000000000;;			"accept-charset",
0000000000000000000000000000000000000000;;			"accept-encoding",
0000000000000000000000000000000000000000;;			"accept-language",
0000000000000000000000000000000000000000;;			"accept-ranges",
0000000000000000000000000000000000000000;;			"age",
0000000000000000000000000000000000000000;;			"access-control-allow-origin",
0000000000000000000000000000000000000000;;			"allow",
0000000000000000000000000000000000000000;;			"authorization",
0000000000000000000000000000000000000000;;			"cache-control",
0000000000000000000000000000000000000000;;			"content-disposition",
0000000000000000000000000000000000000000;;			"content-encoding",
0000000000000000000000000000000000000000;;			"content-language",
0000000000000000000000000000000000000000;;			"content-length",
0000000000000000000000000000000000000000;;			"content-location",
0000000000000000000000000000000000000000;;			"content-range",
0000000000000000000000000000000000000000;;			"content-type",
0000000000000000000000000000000000000000;;			"cookie",
0000000000000000000000000000000000000000;;			"date",
0000000000000000000000000000000000000000;;			"etag",
0000000000000000000000000000000000000000;;			"expect",
0000000000000000000000000000000000000000;;			"expires",
0000000000000000000000000000000000000000;;			"from",
0000000000000000000000000000000000000000;;			"host",
0000000000000000000000000000000000000000;;			"if-match",
0000000000000000000000000000000000000000;;			"if-modified-since",
0000000000000000000000000000000000000000;;			"if-none-match",
0000000000000000000000000000000000000000;;			"if-unmodified-since",
0000000000000000000000000000000000000000;;			"last-modified",
0000000000000000000000000000000000000000;;			"link",
0000000000000000000000000000000000000000;;			"location",
0000000000000000000000000000000000000000;;			"max-forwards",
0000000000000000000000000000000000000000;;			"proxy-authenticate",
0000000000000000000000000000000000000000;;			"proxy-authorization",
0000000000000000000000000000000000000000;;			"range",
0000000000000000000000000000000000000000;;			"referer",
0000000000000000000000000000000000000000;;			"refresh",
0000000000000000000000000000000000000000;;			"retry-after",
0000000000000000000000000000000000000000;;			"server",
0000000000000000000000000000000000000000;;			"set-cookie",
0000000000000000000000000000000000000000;;			"strict-transport-security",
0000000000000000000000000000000000000000;;			"trailer",
0000000000000000000000000000000000000000;;			"transfer-encoding",
0000000000000000000000000000000000000000;;			"user-agent",
0000000000000000000000000000000000000000;;			"vary",
0000000000000000000000000000000000000000;;			"via",
0000000000000000000000000000000000000000;;			"www-authenticate",
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			chk := http.CanonicalHeaderKey(v)
0000000000000000000000000000000000000000;;			commonLowerHeader[chk] = v
0000000000000000000000000000000000000000;;			commonCanonHeader[v] = chk
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lowerHeader(v string) string {
0000000000000000000000000000000000000000;;		if s, ok := commonLowerHeader[v]; ok {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.ToLower(v)
0000000000000000000000000000000000000000;;	}
