0000000000000000000000000000000000000000;;	// Copyright 2014 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/github.com/bradfitz/http2/errors.go[Godeps/_workspace/src/github.com/bradfitz/http2/errors.go][vendor/golang.org/x/net/http2/errors.go];	
0000000000000000000000000000000000000000;;	package http2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ErrCode is an unsigned 32-bit error code as defined in the HTTP/2 spec.
0000000000000000000000000000000000000000;;	type ErrCode uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ErrCodeNo                 ErrCode = 0x0
0000000000000000000000000000000000000000;;		ErrCodeProtocol           ErrCode = 0x1
0000000000000000000000000000000000000000;;		ErrCodeInternal           ErrCode = 0x2
0000000000000000000000000000000000000000;;		ErrCodeFlowControl        ErrCode = 0x3
0000000000000000000000000000000000000000;;		ErrCodeSettingsTimeout    ErrCode = 0x4
0000000000000000000000000000000000000000;;		ErrCodeStreamClosed       ErrCode = 0x5
0000000000000000000000000000000000000000;;		ErrCodeFrameSize          ErrCode = 0x6
0000000000000000000000000000000000000000;;		ErrCodeRefusedStream      ErrCode = 0x7
0000000000000000000000000000000000000000;;		ErrCodeCancel             ErrCode = 0x8
0000000000000000000000000000000000000000;;		ErrCodeCompression        ErrCode = 0x9
0000000000000000000000000000000000000000;;		ErrCodeConnect            ErrCode = 0xa
0000000000000000000000000000000000000000;;		ErrCodeEnhanceYourCalm    ErrCode = 0xb
0000000000000000000000000000000000000000;;		ErrCodeInadequateSecurity ErrCode = 0xc
0000000000000000000000000000000000000000;;		ErrCodeHTTP11Required     ErrCode = 0xd
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var errCodeName = map[ErrCode]string{
0000000000000000000000000000000000000000;;		ErrCodeNo:                 "NO_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeProtocol:           "PROTOCOL_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeInternal:           "INTERNAL_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeFlowControl:        "FLOW_CONTROL_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeSettingsTimeout:    "SETTINGS_TIMEOUT",
0000000000000000000000000000000000000000;;		ErrCodeStreamClosed:       "STREAM_CLOSED",
0000000000000000000000000000000000000000;;		ErrCodeFrameSize:          "FRAME_SIZE_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeRefusedStream:      "REFUSED_STREAM",
0000000000000000000000000000000000000000;;		ErrCodeCancel:             "CANCEL",
0000000000000000000000000000000000000000;;		ErrCodeCompression:        "COMPRESSION_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeConnect:            "CONNECT_ERROR",
0000000000000000000000000000000000000000;;		ErrCodeEnhanceYourCalm:    "ENHANCE_YOUR_CALM",
0000000000000000000000000000000000000000;;		ErrCodeInadequateSecurity: "INADEQUATE_SECURITY",
0000000000000000000000000000000000000000;;		ErrCodeHTTP11Required:     "HTTP_1_1_REQUIRED",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ErrCode) String() string {
0000000000000000000000000000000000000000;;		if s, ok := errCodeName[e]; ok {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("unknown error code 0x%x", uint32(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConnectionError is an error that results in the termination of the
0000000000000000000000000000000000000000;;	// entire connection.
0000000000000000000000000000000000000000;;	type ConnectionError ErrCode
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e ConnectionError) Error() string { return fmt.Sprintf("connection error: %s", ErrCode(e)) }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamError is an error that only affects one stream within an
0000000000000000000000000000000000000000;;	// HTTP/2 connection.
0000000000000000000000000000000000000000;;	type StreamError struct {
0000000000000000000000000000000000000000;;		StreamID uint32
0000000000000000000000000000000000000000;;		Code     ErrCode
0000000000000000000000000000000000000000;;		Cause    error // optional additional detail
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func streamError(id uint32, code ErrCode) StreamError {
0000000000000000000000000000000000000000;;		return StreamError{StreamID: id, Code: code}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e StreamError) Error() string {
0000000000000000000000000000000000000000;;		if e.Cause != nil {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("stream error: stream ID %d; %v; %v", e.StreamID, e.Code, e.Cause)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fmt.Sprintf("stream error: stream ID %d; %v", e.StreamID, e.Code)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// 6.9.1 The Flow Control Window
0000000000000000000000000000000000000000;;	// "If a sender receives a WINDOW_UPDATE that causes a flow control
0000000000000000000000000000000000000000;;	// window to exceed this maximum it MUST terminate either the stream
0000000000000000000000000000000000000000;;	// or the connection, as appropriate. For streams, [...]; for the
0000000000000000000000000000000000000000;;	// connection, a GOAWAY frame with a FLOW_CONTROL_ERROR code."
0000000000000000000000000000000000000000;;	type goAwayFlowError struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (goAwayFlowError) Error() string { return "connection exceeded flow control window size" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// connErrorReason wraps a ConnectionError with an informative error about why it occurs.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errors of this type are only returned by the frame parser functions
0000000000000000000000000000000000000000;;	// and converted into ConnectionError(ErrCodeProtocol).
0000000000000000000000000000000000000000;;	type connError struct {
0000000000000000000000000000000000000000;;		Code   ErrCode
0000000000000000000000000000000000000000;;		Reason string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e connError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("http2: connection error: %v: %v", e.Code, e.Reason)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pseudoHeaderError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e pseudoHeaderError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("invalid pseudo-header %q", string(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type duplicatePseudoHeaderError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e duplicatePseudoHeaderError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("duplicate pseudo-header %q", string(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type headerFieldNameError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e headerFieldNameError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("invalid header field name %q", string(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type headerFieldValueError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e headerFieldValueError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("invalid header field value %q", string(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errMixPseudoHeaderTypes = errors.New("mix of request and response pseudo headers")
0000000000000000000000000000000000000000;;		errPseudoAfterRegular   = errors.New("pseudo header field after regular")
0000000000000000000000000000000000000000;;	)
