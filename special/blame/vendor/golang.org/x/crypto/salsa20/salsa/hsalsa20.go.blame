0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
ea5ce496739655bc10dc42138f80f7e34ba4dc2e;;	
0000000000000000000000000000000000000000;;	// Package salsa provides low-level access to functions in the Salsa family.
0000000000000000000000000000000000000000;;	package salsa
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sigma is the Salsa20 constant for 256-bit keys.
0000000000000000000000000000000000000000;;	var Sigma = [16]byte{'e', 'x', 'p', 'a', 'n', 'd', ' ', '3', '2', '-', 'b', 'y', 't', 'e', ' ', 'k'}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HSalsa20 applies the HSalsa20 core function to a 16-byte input in, 32-byte
0000000000000000000000000000000000000000;;	// key k, and 16-byte constant c, and puts the result into the 32-byte array
0000000000000000000000000000000000000000;;	// out.
0000000000000000000000000000000000000000;;	func HSalsa20(out *[32]byte, in *[16]byte, k *[32]byte, c *[16]byte) {
0000000000000000000000000000000000000000;;		x0 := uint32(c[0]) | uint32(c[1])<<8 | uint32(c[2])<<16 | uint32(c[3])<<24
0000000000000000000000000000000000000000;;		x1 := uint32(k[0]) | uint32(k[1])<<8 | uint32(k[2])<<16 | uint32(k[3])<<24
0000000000000000000000000000000000000000;;		x2 := uint32(k[4]) | uint32(k[5])<<8 | uint32(k[6])<<16 | uint32(k[7])<<24
0000000000000000000000000000000000000000;;		x3 := uint32(k[8]) | uint32(k[9])<<8 | uint32(k[10])<<16 | uint32(k[11])<<24
0000000000000000000000000000000000000000;;		x4 := uint32(k[12]) | uint32(k[13])<<8 | uint32(k[14])<<16 | uint32(k[15])<<24
0000000000000000000000000000000000000000;;		x5 := uint32(c[4]) | uint32(c[5])<<8 | uint32(c[6])<<16 | uint32(c[7])<<24
0000000000000000000000000000000000000000;;		x6 := uint32(in[0]) | uint32(in[1])<<8 | uint32(in[2])<<16 | uint32(in[3])<<24
0000000000000000000000000000000000000000;;		x7 := uint32(in[4]) | uint32(in[5])<<8 | uint32(in[6])<<16 | uint32(in[7])<<24
0000000000000000000000000000000000000000;;		x8 := uint32(in[8]) | uint32(in[9])<<8 | uint32(in[10])<<16 | uint32(in[11])<<24
0000000000000000000000000000000000000000;;		x9 := uint32(in[12]) | uint32(in[13])<<8 | uint32(in[14])<<16 | uint32(in[15])<<24
0000000000000000000000000000000000000000;;		x10 := uint32(c[8]) | uint32(c[9])<<8 | uint32(c[10])<<16 | uint32(c[11])<<24
0000000000000000000000000000000000000000;;		x11 := uint32(k[16]) | uint32(k[17])<<8 | uint32(k[18])<<16 | uint32(k[19])<<24
0000000000000000000000000000000000000000;;		x12 := uint32(k[20]) | uint32(k[21])<<8 | uint32(k[22])<<16 | uint32(k[23])<<24
0000000000000000000000000000000000000000;;		x13 := uint32(k[24]) | uint32(k[25])<<8 | uint32(k[26])<<16 | uint32(k[27])<<24
0000000000000000000000000000000000000000;;		x14 := uint32(k[28]) | uint32(k[29])<<8 | uint32(k[30])<<16 | uint32(k[31])<<24
0000000000000000000000000000000000000000;;		x15 := uint32(c[12]) | uint32(c[13])<<8 | uint32(c[14])<<16 | uint32(c[15])<<24
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < 20; i += 2 {
0000000000000000000000000000000000000000;;			u := x0 + x12
0000000000000000000000000000000000000000;;			x4 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x4 + x0
0000000000000000000000000000000000000000;;			x8 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x8 + x4
0000000000000000000000000000000000000000;;			x12 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x12 + x8
0000000000000000000000000000000000000000;;			x0 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x5 + x1
0000000000000000000000000000000000000000;;			x9 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x9 + x5
0000000000000000000000000000000000000000;;			x13 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x13 + x9
0000000000000000000000000000000000000000;;			x1 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x1 + x13
0000000000000000000000000000000000000000;;			x5 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x10 + x6
0000000000000000000000000000000000000000;;			x14 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x14 + x10
0000000000000000000000000000000000000000;;			x2 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x2 + x14
0000000000000000000000000000000000000000;;			x6 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x6 + x2
0000000000000000000000000000000000000000;;			x10 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x15 + x11
0000000000000000000000000000000000000000;;			x3 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x3 + x15
0000000000000000000000000000000000000000;;			x7 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x7 + x3
0000000000000000000000000000000000000000;;			x11 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x11 + x7
0000000000000000000000000000000000000000;;			x15 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x0 + x3
0000000000000000000000000000000000000000;;			x1 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x1 + x0
0000000000000000000000000000000000000000;;			x2 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x2 + x1
0000000000000000000000000000000000000000;;			x3 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x3 + x2
0000000000000000000000000000000000000000;;			x0 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x5 + x4
0000000000000000000000000000000000000000;;			x6 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x6 + x5
0000000000000000000000000000000000000000;;			x7 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x7 + x6
0000000000000000000000000000000000000000;;			x4 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x4 + x7
0000000000000000000000000000000000000000;;			x5 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x10 + x9
0000000000000000000000000000000000000000;;			x11 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x11 + x10
0000000000000000000000000000000000000000;;			x8 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x8 + x11
0000000000000000000000000000000000000000;;			x9 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x9 + x8
0000000000000000000000000000000000000000;;			x10 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			u = x15 + x14
0000000000000000000000000000000000000000;;			x12 ^= u<<7 | u>>(32-7)
0000000000000000000000000000000000000000;;			u = x12 + x15
0000000000000000000000000000000000000000;;			x13 ^= u<<9 | u>>(32-9)
0000000000000000000000000000000000000000;;			u = x13 + x12
0000000000000000000000000000000000000000;;			x14 ^= u<<13 | u>>(32-13)
0000000000000000000000000000000000000000;;			u = x14 + x13
0000000000000000000000000000000000000000;;			x15 ^= u<<18 | u>>(32-18)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		out[0] = byte(x0)
0000000000000000000000000000000000000000;;		out[1] = byte(x0 >> 8)
0000000000000000000000000000000000000000;;		out[2] = byte(x0 >> 16)
0000000000000000000000000000000000000000;;		out[3] = byte(x0 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[4] = byte(x5)
0000000000000000000000000000000000000000;;		out[5] = byte(x5 >> 8)
0000000000000000000000000000000000000000;;		out[6] = byte(x5 >> 16)
0000000000000000000000000000000000000000;;		out[7] = byte(x5 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[8] = byte(x10)
0000000000000000000000000000000000000000;;		out[9] = byte(x10 >> 8)
0000000000000000000000000000000000000000;;		out[10] = byte(x10 >> 16)
0000000000000000000000000000000000000000;;		out[11] = byte(x10 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[12] = byte(x15)
0000000000000000000000000000000000000000;;		out[13] = byte(x15 >> 8)
0000000000000000000000000000000000000000;;		out[14] = byte(x15 >> 16)
0000000000000000000000000000000000000000;;		out[15] = byte(x15 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[16] = byte(x6)
0000000000000000000000000000000000000000;;		out[17] = byte(x6 >> 8)
0000000000000000000000000000000000000000;;		out[18] = byte(x6 >> 16)
0000000000000000000000000000000000000000;;		out[19] = byte(x6 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[20] = byte(x7)
0000000000000000000000000000000000000000;;		out[21] = byte(x7 >> 8)
0000000000000000000000000000000000000000;;		out[22] = byte(x7 >> 16)
0000000000000000000000000000000000000000;;		out[23] = byte(x7 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[24] = byte(x8)
0000000000000000000000000000000000000000;;		out[25] = byte(x8 >> 8)
0000000000000000000000000000000000000000;;		out[26] = byte(x8 >> 16)
0000000000000000000000000000000000000000;;		out[27] = byte(x8 >> 24)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out[28] = byte(x9)
0000000000000000000000000000000000000000;;		out[29] = byte(x9 >> 8)
0000000000000000000000000000000000000000;;		out[30] = byte(x9 >> 16)
0000000000000000000000000000000000000000;;		out[31] = byte(x9 >> 24)
0000000000000000000000000000000000000000;;	}
