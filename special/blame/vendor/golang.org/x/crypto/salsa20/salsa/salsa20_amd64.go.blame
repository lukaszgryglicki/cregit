0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
ea5ce496739655bc10dc42138f80f7e34ba4dc2e;;	
0000000000000000000000000000000000000000;;	// +build amd64,!appengine,!gccgo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package salsa
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This function is implemented in salsa2020_amd64.s.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:noescape
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func salsa2020XORKeyStream(out, in *byte, n uint64, nonce, key *byte)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// XORKeyStream crypts bytes from in to out using the given key and counters.
0000000000000000000000000000000000000000;;	// In and out may be the same slice but otherwise should not overlap. Counter
0000000000000000000000000000000000000000;;	// contains the raw salsa20 counter bytes (both nonce and block counter).
0000000000000000000000000000000000000000;;	func XORKeyStream(out, in []byte, counter *[16]byte, key *[32]byte) {
0000000000000000000000000000000000000000;;		if len(in) == 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		salsa2020XORKeyStream(&out[0], &in[0], uint64(len(in)), &counter[0], &key[0])
0000000000000000000000000000000000000000;;	}
