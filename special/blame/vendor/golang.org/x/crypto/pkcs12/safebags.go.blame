0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	package pkcs12
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/x509"
0000000000000000000000000000000000000000;;		"encoding/asn1"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// see https://tools.ietf.org/html/rfc7292#appendix-D
0000000000000000000000000000000000000000;;		oidCertTypeX509Certificate = asn1.ObjectIdentifier([]int{1, 2, 840, 113549, 1, 9, 22, 1})
0000000000000000000000000000000000000000;;		oidPKCS8ShroundedKeyBag    = asn1.ObjectIdentifier([]int{1, 2, 840, 113549, 1, 12, 10, 1, 2})
0000000000000000000000000000000000000000;;		oidCertBag                 = asn1.ObjectIdentifier([]int{1, 2, 840, 113549, 1, 12, 10, 1, 3})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type certBag struct {
0000000000000000000000000000000000000000;;		Id   asn1.ObjectIdentifier
0000000000000000000000000000000000000000;;		Data []byte `asn1:"tag:0,explicit"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodePkcs8ShroudedKeyBag(asn1Data, password []byte) (privateKey interface{}, err error) {
0000000000000000000000000000000000000000;;		pkinfo := new(encryptedPrivateKeyInfo)
0000000000000000000000000000000000000000;;		if err = unmarshal(asn1Data, pkinfo); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("pkcs12: error decoding PKCS#8 shrouded key bag: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pkData, err := pbDecrypt(pkinfo, password)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("pkcs12: error decrypting PKCS#8 shrouded key bag: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ret := new(asn1.RawValue)
0000000000000000000000000000000000000000;;		if err = unmarshal(pkData, ret); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("pkcs12: error unmarshaling decrypted private key: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if privateKey, err = x509.ParsePKCS8PrivateKey(pkData); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("pkcs12: error parsing PKCS#8 private key: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return privateKey, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func decodeCertBag(asn1Data []byte) (x509Certificates []byte, err error) {
0000000000000000000000000000000000000000;;		bag := new(certBag)
0000000000000000000000000000000000000000;;		if err := unmarshal(asn1Data, bag); err != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("pkcs12: error decoding cert bag: " + err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !bag.Id.Equal(oidCertTypeX509Certificate) {
0000000000000000000000000000000000000000;;			return nil, NotImplementedError("only X509 certificates are supported")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return bag.Data, nil
0000000000000000000000000000000000000000;;	}
