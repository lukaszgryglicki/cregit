0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
4719f97477417ada91b80cafeecea0dd05c6fdd6;;	
0000000000000000000000000000000000000000;;	package pkcs12
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/hmac"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"crypto/x509/pkix"
0000000000000000000000000000000000000000;;		"encoding/asn1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type macData struct {
0000000000000000000000000000000000000000;;		Mac        digestInfo
0000000000000000000000000000000000000000;;		MacSalt    []byte
0000000000000000000000000000000000000000;;		Iterations int `asn1:"optional,default:1"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// from PKCS#7:
0000000000000000000000000000000000000000;;	type digestInfo struct {
0000000000000000000000000000000000000000;;		Algorithm pkix.AlgorithmIdentifier
0000000000000000000000000000000000000000;;		Digest    []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		oidSHA1 = asn1.ObjectIdentifier([]int{1, 3, 14, 3, 2, 26})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func verifyMac(macData *macData, message, password []byte) error {
0000000000000000000000000000000000000000;;		if !macData.Mac.Algorithm.Algorithm.Equal(oidSHA1) {
0000000000000000000000000000000000000000;;			return NotImplementedError("unknown digest algorithm: " + macData.Mac.Algorithm.Algorithm.String())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		key := pbkdf(sha1Sum, 20, 64, macData.MacSalt, password, macData.Iterations, 3, 20)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mac := hmac.New(sha1.New, key)
0000000000000000000000000000000000000000;;		mac.Write(message)
0000000000000000000000000000000000000000;;		expectedMAC := mac.Sum(nil)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !hmac.Equal(macData.Mac.Digest, expectedMAC) {
0000000000000000000000000000000000000000;;			return ErrIncorrectPassword
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
