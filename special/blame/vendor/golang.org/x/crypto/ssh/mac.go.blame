0000000000000000000000000000000000000000;;	// Copyright 2012 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
d05faf3fd63586437e38382c48fa03d7bd30de0c;Godeps/_workspace/src/golang.org/x/crypto/ssh/mac.go[Godeps/_workspace/src/golang.org/x/crypto/ssh/mac.go][vendor/golang.org/x/crypto/ssh/mac.go];	
0000000000000000000000000000000000000000;;	package ssh
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Message authentication support
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/hmac"
0000000000000000000000000000000000000000;;		"crypto/sha1"
0000000000000000000000000000000000000000;;		"crypto/sha256"
0000000000000000000000000000000000000000;;		"hash"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type macMode struct {
0000000000000000000000000000000000000000;;		keySize int
0000000000000000000000000000000000000000;;		new     func(key []byte) hash.Hash
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// truncatingMAC wraps around a hash.Hash and truncates the output digest to
0000000000000000000000000000000000000000;;	// a given size.
0000000000000000000000000000000000000000;;	type truncatingMAC struct {
0000000000000000000000000000000000000000;;		length int
0000000000000000000000000000000000000000;;		hmac   hash.Hash
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t truncatingMAC) Write(data []byte) (int, error) {
0000000000000000000000000000000000000000;;		return t.hmac.Write(data)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t truncatingMAC) Sum(in []byte) []byte {
0000000000000000000000000000000000000000;;		out := t.hmac.Sum(in)
0000000000000000000000000000000000000000;;		return out[:len(in)+t.length]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t truncatingMAC) Reset() {
0000000000000000000000000000000000000000;;		t.hmac.Reset()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t truncatingMAC) Size() int {
0000000000000000000000000000000000000000;;		return t.length
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t truncatingMAC) BlockSize() int { return t.hmac.BlockSize() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var macModes = map[string]*macMode{
0000000000000000000000000000000000000000;;		"hmac-sha2-256": {32, func(key []byte) hash.Hash {
0000000000000000000000000000000000000000;;			return hmac.New(sha256.New, key)
0000000000000000000000000000000000000000;;		}},
0000000000000000000000000000000000000000;;		"hmac-sha1": {20, func(key []byte) hash.Hash {
0000000000000000000000000000000000000000;;			return hmac.New(sha1.New, key)
0000000000000000000000000000000000000000;;		}},
0000000000000000000000000000000000000000;;		"hmac-sha1-96": {20, func(key []byte) hash.Hash {
0000000000000000000000000000000000000000;;			return truncatingMAC{12, hmac.New(sha1.New, key)}
0000000000000000000000000000000000000000;;		}},
0000000000000000000000000000000000000000;;	}
