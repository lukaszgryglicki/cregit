0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
9f682346087cfbb4ef0ef809569eecf5e61c29e8;;	
0000000000000000000000000000000000000000;;	// +build solaris
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package terminal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/sys/unix"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// State contains the state of a terminal.
0000000000000000000000000000000000000000;;	type State struct {
0000000000000000000000000000000000000000;;		termios syscall.Termios
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal(fd int) bool {
0000000000000000000000000000000000000000;;		// see: http://src.illumos.org/source/xref/illumos-gate/usr/src/lib/libbc/libc/gen/common/isatty.c
0000000000000000000000000000000000000000;;		var termio unix.Termio
0000000000000000000000000000000000000000;;		err := unix.IoctlSetTermio(fd, unix.TCGETA, &termio)
0000000000000000000000000000000000000000;;		return err == nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadPassword reads a line of input from a terminal without local echo.  This
0000000000000000000000000000000000000000;;	// is commonly used for inputting passwords and other sensitive data. The slice
0000000000000000000000000000000000000000;;	// returned does not include the \n.
0000000000000000000000000000000000000000;;	func ReadPassword(fd int) ([]byte, error) {
0000000000000000000000000000000000000000;;		// see also: http://src.illumos.org/source/xref/illumos-gate/usr/src/lib/libast/common/uwin/getpass.c
0000000000000000000000000000000000000000;;		val, err := unix.IoctlGetTermios(fd, unix.TCGETS)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		oldState := *val
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newState := oldState
0000000000000000000000000000000000000000;;		newState.Lflag &^= syscall.ECHO
0000000000000000000000000000000000000000;;		newState.Lflag |= syscall.ICANON | syscall.ISIG
0000000000000000000000000000000000000000;;		newState.Iflag |= syscall.ICRNL
0000000000000000000000000000000000000000;;		err = unix.IoctlSetTermios(fd, unix.TCSETS, &newState)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer unix.IoctlSetTermios(fd, unix.TCSETS, &oldState)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf [16]byte
0000000000000000000000000000000000000000;;		var ret []byte
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			n, err := syscall.Read(fd, buf[:])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n == 0 {
0000000000000000000000000000000000000000;;				if len(ret) == 0 {
0000000000000000000000000000000000000000;;					return nil, io.EOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf[n-1] == '\n' {
0000000000000000000000000000000000000000;;				n--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ret = append(ret, buf[:n]...)
0000000000000000000000000000000000000000;;			if n < len(buf) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
