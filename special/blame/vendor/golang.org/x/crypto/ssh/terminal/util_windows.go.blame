0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
fd67f7b54069fd4e3fd5dcc2238cb8c3266f5202;;	
0000000000000000000000000000000000000000;;	// +build windows
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package terminal provides support functions for dealing with terminals, as
0000000000000000000000000000000000000000;;	// commonly found on UNIX systems.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Putting a terminal into raw mode is the most common requirement:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	oldState, err := terminal.MakeRaw(0)
0000000000000000000000000000000000000000;;	// 	if err != nil {
0000000000000000000000000000000000000000;;	// 	        panic(err)
0000000000000000000000000000000000000000;;	// 	}
0000000000000000000000000000000000000000;;	// 	defer terminal.Restore(0, oldState)
0000000000000000000000000000000000000000;;	package terminal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		enableLineInput       = 2
0000000000000000000000000000000000000000;;		enableEchoInput       = 4
0000000000000000000000000000000000000000;;		enableProcessedInput  = 1
0000000000000000000000000000000000000000;;		enableWindowInput     = 8
0000000000000000000000000000000000000000;;		enableMouseInput      = 16
0000000000000000000000000000000000000000;;		enableInsertMode      = 32
0000000000000000000000000000000000000000;;		enableQuickEditMode   = 64
0000000000000000000000000000000000000000;;		enableExtendedFlags   = 128
0000000000000000000000000000000000000000;;		enableAutoPosition    = 256
0000000000000000000000000000000000000000;;		enableProcessedOutput = 1
0000000000000000000000000000000000000000;;		enableWrapAtEolOutput = 2
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var kernel32 = syscall.NewLazyDLL("kernel32.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		procGetConsoleMode             = kernel32.NewProc("GetConsoleMode")
0000000000000000000000000000000000000000;;		procSetConsoleMode             = kernel32.NewProc("SetConsoleMode")
0000000000000000000000000000000000000000;;		procGetConsoleScreenBufferInfo = kernel32.NewProc("GetConsoleScreenBufferInfo")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type (
0000000000000000000000000000000000000000;;		short int16
0000000000000000000000000000000000000000;;		word  uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		coord struct {
0000000000000000000000000000000000000000;;			x short
0000000000000000000000000000000000000000;;			y short
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		smallRect struct {
0000000000000000000000000000000000000000;;			left   short
0000000000000000000000000000000000000000;;			top    short
0000000000000000000000000000000000000000;;			right  short
0000000000000000000000000000000000000000;;			bottom short
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		consoleScreenBufferInfo struct {
0000000000000000000000000000000000000000;;			size              coord
0000000000000000000000000000000000000000;;			cursorPosition    coord
0000000000000000000000000000000000000000;;			attributes        word
0000000000000000000000000000000000000000;;			window            smallRect
0000000000000000000000000000000000000000;;			maximumWindowSize coord
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type State struct {
0000000000000000000000000000000000000000;;		mode uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal(fd int) bool {
0000000000000000000000000000000000000000;;		var st uint32
0000000000000000000000000000000000000000;;		r, _, e := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&st)), 0)
0000000000000000000000000000000000000000;;		return r != 0 && e == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRaw put the terminal connected to the given file descriptor into raw
0000000000000000000000000000000000000000;;	// mode and returns the previous state of the terminal so that it can be
0000000000000000000000000000000000000000;;	// restored.
0000000000000000000000000000000000000000;;	func MakeRaw(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		var st uint32
0000000000000000000000000000000000000000;;		_, _, e := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&st)), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return nil, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		raw := st &^ (enableEchoInput | enableProcessedInput | enableLineInput | enableProcessedOutput)
0000000000000000000000000000000000000000;;		_, _, e = syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(fd), uintptr(raw), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return nil, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &State{st}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetState returns the current state of a terminal which may be useful to
0000000000000000000000000000000000000000;;	// restore the terminal after a signal.
0000000000000000000000000000000000000000;;	func GetState(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		var st uint32
0000000000000000000000000000000000000000;;		_, _, e := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&st)), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return nil, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &State{st}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore restores the terminal connected to the given file descriptor to a
0000000000000000000000000000000000000000;;	// previous state.
0000000000000000000000000000000000000000;;	func Restore(fd int, state *State) error {
0000000000000000000000000000000000000000;;		_, _, err := syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(fd), uintptr(state.mode), 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSize returns the dimensions of the given terminal.
0000000000000000000000000000000000000000;;	func GetSize(fd int) (width, height int, err error) {
0000000000000000000000000000000000000000;;		var info consoleScreenBufferInfo
0000000000000000000000000000000000000000;;		_, _, e := syscall.Syscall(procGetConsoleScreenBufferInfo.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&info)), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return 0, 0, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(info.size.x), int(info.size.y), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadPassword reads a line of input from a terminal without local echo.  This
0000000000000000000000000000000000000000;;	// is commonly used for inputting passwords and other sensitive data. The slice
0000000000000000000000000000000000000000;;	// returned does not include the \n.
0000000000000000000000000000000000000000;;	func ReadPassword(fd int) ([]byte, error) {
0000000000000000000000000000000000000000;;		var st uint32
0000000000000000000000000000000000000000;;		_, _, e := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(fd), uintptr(unsafe.Pointer(&st)), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return nil, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		old := st
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		st &^= (enableEchoInput)
0000000000000000000000000000000000000000;;		st |= (enableProcessedInput | enableLineInput | enableProcessedOutput)
0000000000000000000000000000000000000000;;		_, _, e = syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(fd), uintptr(st), 0)
0000000000000000000000000000000000000000;;		if e != 0 {
0000000000000000000000000000000000000000;;			return nil, error(e)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(fd), uintptr(old), 0)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf [16]byte
0000000000000000000000000000000000000000;;		var ret []byte
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			n, err := syscall.Read(syscall.Handle(fd), buf[:])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n == 0 {
0000000000000000000000000000000000000000;;				if len(ret) == 0 {
0000000000000000000000000000000000000000;;					return nil, io.EOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf[n-1] == '\n' {
0000000000000000000000000000000000000000;;				n--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n > 0 && buf[n-1] == '\r' {
0000000000000000000000000000000000000000;;				n--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ret = append(ret, buf[:n]...)
0000000000000000000000000000000000000000;;			if n < len(buf) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
