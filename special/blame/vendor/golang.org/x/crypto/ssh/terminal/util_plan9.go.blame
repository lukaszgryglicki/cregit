0000000000000000000000000000000000000000;;	// Copyright 2016 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
9f682346087cfbb4ef0ef809569eecf5e61c29e8;;	
0000000000000000000000000000000000000000;;	// Package terminal provides support functions for dealing with terminals, as
0000000000000000000000000000000000000000;;	// commonly found on UNIX systems.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Putting a terminal into raw mode is the most common requirement:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	oldState, err := terminal.MakeRaw(0)
0000000000000000000000000000000000000000;;	// 	if err != nil {
0000000000000000000000000000000000000000;;	// 	        panic(err)
0000000000000000000000000000000000000000;;	// 	}
0000000000000000000000000000000000000000;;	// 	defer terminal.Restore(0, oldState)
0000000000000000000000000000000000000000;;	package terminal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type State struct{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal(fd int) bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRaw put the terminal connected to the given file descriptor into raw
0000000000000000000000000000000000000000;;	// mode and returns the previous state of the terminal so that it can be
0000000000000000000000000000000000000000;;	// restored.
0000000000000000000000000000000000000000;;	func MakeRaw(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("terminal: MakeRaw not implemented on %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetState returns the current state of a terminal which may be useful to
0000000000000000000000000000000000000000;;	// restore the terminal after a signal.
0000000000000000000000000000000000000000;;	func GetState(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("terminal: GetState not implemented on %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore restores the terminal connected to the given file descriptor to a
0000000000000000000000000000000000000000;;	// previous state.
0000000000000000000000000000000000000000;;	func Restore(fd int, state *State) error {
0000000000000000000000000000000000000000;;		return fmt.Errorf("terminal: Restore not implemented on %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSize returns the dimensions of the given terminal.
0000000000000000000000000000000000000000;;	func GetSize(fd int) (width, height int, err error) {
0000000000000000000000000000000000000000;;		return 0, 0, fmt.Errorf("terminal: GetSize not implemented on %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadPassword reads a line of input from a terminal without local echo.  This
0000000000000000000000000000000000000000;;	// is commonly used for inputting passwords and other sensitive data. The slice
0000000000000000000000000000000000000000;;	// returned does not include the \n.
0000000000000000000000000000000000000000;;	func ReadPassword(fd int) ([]byte, error) {
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("terminal: ReadPassword not implemented on %s/%s", runtime.GOOS, runtime.GOARCH)
0000000000000000000000000000000000000000;;	}
