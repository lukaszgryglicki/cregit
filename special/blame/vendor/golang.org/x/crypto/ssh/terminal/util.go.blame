0000000000000000000000000000000000000000;;	// Copyright 2011 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
fd67f7b54069fd4e3fd5dcc2238cb8c3266f5202;;	
0000000000000000000000000000000000000000;;	// +build darwin dragonfly freebsd linux,!appengine netbsd openbsd
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package terminal provides support functions for dealing with terminals, as
0000000000000000000000000000000000000000;;	// commonly found on UNIX systems.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Putting a terminal into raw mode is the most common requirement:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// 	oldState, err := terminal.MakeRaw(0)
0000000000000000000000000000000000000000;;	// 	if err != nil {
0000000000000000000000000000000000000000;;	// 	        panic(err)
0000000000000000000000000000000000000000;;	// 	}
0000000000000000000000000000000000000000;;	// 	defer terminal.Restore(0, oldState)
0000000000000000000000000000000000000000;;	package terminal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// State contains the state of a terminal.
0000000000000000000000000000000000000000;;	type State struct {
0000000000000000000000000000000000000000;;		termios syscall.Termios
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IsTerminal returns true if the given file descriptor is a terminal.
0000000000000000000000000000000000000000;;	func IsTerminal(fd int) bool {
0000000000000000000000000000000000000000;;		var termios syscall.Termios
0000000000000000000000000000000000000000;;		_, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlReadTermios, uintptr(unsafe.Pointer(&termios)), 0, 0, 0)
0000000000000000000000000000000000000000;;		return err == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeRaw put the terminal connected to the given file descriptor into raw
0000000000000000000000000000000000000000;;	// mode and returns the previous state of the terminal so that it can be
0000000000000000000000000000000000000000;;	// restored.
0000000000000000000000000000000000000000;;	func MakeRaw(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		var oldState State
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlReadTermios, uintptr(unsafe.Pointer(&oldState.termios)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newState := oldState.termios
0000000000000000000000000000000000000000;;		// This attempts to replicate the behaviour documented for cfmakeraw in
0000000000000000000000000000000000000000;;		// the termios(3) manpage.
0000000000000000000000000000000000000000;;		newState.Iflag &^= syscall.IGNBRK | syscall.BRKINT | syscall.PARMRK | syscall.ISTRIP | syscall.INLCR | syscall.IGNCR | syscall.ICRNL | syscall.IXON
0000000000000000000000000000000000000000;;		newState.Oflag &^= syscall.OPOST
0000000000000000000000000000000000000000;;		newState.Lflag &^= syscall.ECHO | syscall.ECHONL | syscall.ICANON | syscall.ISIG | syscall.IEXTEN
0000000000000000000000000000000000000000;;		newState.Cflag &^= syscall.CSIZE | syscall.PARENB
0000000000000000000000000000000000000000;;		newState.Cflag |= syscall.CS8
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlWriteTermios, uintptr(unsafe.Pointer(&newState)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &oldState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetState returns the current state of a terminal which may be useful to
0000000000000000000000000000000000000000;;	// restore the terminal after a signal.
0000000000000000000000000000000000000000;;	func GetState(fd int) (*State, error) {
0000000000000000000000000000000000000000;;		var oldState State
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlReadTermios, uintptr(unsafe.Pointer(&oldState.termios)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &oldState, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore restores the terminal connected to the given file descriptor to a
0000000000000000000000000000000000000000;;	// previous state.
0000000000000000000000000000000000000000;;	func Restore(fd int, state *State) error {
0000000000000000000000000000000000000000;;		_, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlWriteTermios, uintptr(unsafe.Pointer(&state.termios)), 0, 0, 0)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetSize returns the dimensions of the given terminal.
0000000000000000000000000000000000000000;;	func GetSize(fd int) (width, height int, err error) {
0000000000000000000000000000000000000000;;		var dimensions [4]uint16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TIOCGWINSZ), uintptr(unsafe.Pointer(&dimensions)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return -1, -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return int(dimensions[1]), int(dimensions[0]), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ReadPassword reads a line of input from a terminal without local echo.  This
0000000000000000000000000000000000000000;;	// is commonly used for inputting passwords and other sensitive data. The slice
0000000000000000000000000000000000000000;;	// returned does not include the \n.
0000000000000000000000000000000000000000;;	func ReadPassword(fd int) ([]byte, error) {
0000000000000000000000000000000000000000;;		var oldState syscall.Termios
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlReadTermios, uintptr(unsafe.Pointer(&oldState)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		newState := oldState
0000000000000000000000000000000000000000;;		newState.Lflag &^= syscall.ECHO
0000000000000000000000000000000000000000;;		newState.Lflag |= syscall.ICANON | syscall.ISIG
0000000000000000000000000000000000000000;;		newState.Iflag |= syscall.ICRNL
0000000000000000000000000000000000000000;;		if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlWriteTermios, uintptr(unsafe.Pointer(&newState)), 0, 0, 0); err != 0 {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), ioctlWriteTermios, uintptr(unsafe.Pointer(&oldState)), 0, 0, 0)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var buf [16]byte
0000000000000000000000000000000000000000;;		var ret []byte
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			n, err := syscall.Read(fd, buf[:])
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if n == 0 {
0000000000000000000000000000000000000000;;				if len(ret) == 0 {
0000000000000000000000000000000000000000;;					return nil, io.EOF
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if buf[n-1] == '\n' {
0000000000000000000000000000000000000000;;				n--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ret = append(ret, buf[:n]...)
0000000000000000000000000000000000000000;;			if n < len(buf) {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;	}
