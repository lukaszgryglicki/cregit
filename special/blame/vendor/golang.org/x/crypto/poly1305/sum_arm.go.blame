0000000000000000000000000000000000000000;;	// Copyright 2015 The Go Authors. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
ea5ce496739655bc10dc42138f80f7e34ba4dc2e;;	
0000000000000000000000000000000000000000;;	// +build arm,!gccgo,!appengine
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package poly1305
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// This function is implemented in poly1305_arm.s
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:noescape
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func poly1305_auth_armv6(out *[16]byte, m *byte, mlen uint32, key *[32]byte)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sum generates an authenticator for m using a one-time key and puts the
0000000000000000000000000000000000000000;;	// 16-byte result into out. Authenticating two different messages with the same
0000000000000000000000000000000000000000;;	// key allows an attacker to forge messages at will.
0000000000000000000000000000000000000000;;	func Sum(out *[16]byte, m []byte, key *[32]byte) {
0000000000000000000000000000000000000000;;		var mPtr *byte
0000000000000000000000000000000000000000;;		if len(m) > 0 {
0000000000000000000000000000000000000000;;			mPtr = &m[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		poly1305_auth_armv6(out, mPtr, uint32(len(m)), key)
0000000000000000000000000000000000000000;;	}
