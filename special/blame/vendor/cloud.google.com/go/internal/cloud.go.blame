0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//      http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
704ec7acf462a76e04a301542b2d8c2282cfc6b2;;	
0000000000000000000000000000000000000000;;	// Package internal provides support for the cloud packages.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Users should not import this package directly.
0000000000000000000000000000000000000000;;	package internal
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const userAgent = "gcloud-golang/0.1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Transport is an http.RoundTripper that appends Google Cloud client's
0000000000000000000000000000000000000000;;	// user-agent to the original request's user-agent header.
0000000000000000000000000000000000000000;;	type Transport struct {
0000000000000000000000000000000000000000;;		// TODO(bradfitz): delete internal.Transport. It's too wrappy for what it does.
0000000000000000000000000000000000000000;;		// Do User-Agent some other way.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Base is the actual http.RoundTripper
0000000000000000000000000000000000000000;;		// requests will use. It must not be nil.
0000000000000000000000000000000000000000;;		Base http.RoundTripper
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RoundTrip appends a user-agent to the existing user-agent
0000000000000000000000000000000000000000;;	// header and delegates the request to the base http.RoundTripper.
0000000000000000000000000000000000000000;;	func (t *Transport) RoundTrip(req *http.Request) (*http.Response, error) {
0000000000000000000000000000000000000000;;		req = cloneRequest(req)
0000000000000000000000000000000000000000;;		ua := req.Header.Get("User-Agent")
0000000000000000000000000000000000000000;;		if ua == "" {
0000000000000000000000000000000000000000;;			ua = userAgent
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			ua = fmt.Sprintf("%s %s", ua, userAgent)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		req.Header.Set("User-Agent", ua)
0000000000000000000000000000000000000000;;		return t.Base.RoundTrip(req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cloneRequest returns a clone of the provided *http.Request.
0000000000000000000000000000000000000000;;	// The clone is a shallow copy of the struct and its Header map.
0000000000000000000000000000000000000000;;	func cloneRequest(r *http.Request) *http.Request {
0000000000000000000000000000000000000000;;		// shallow copy of the struct
0000000000000000000000000000000000000000;;		r2 := new(http.Request)
0000000000000000000000000000000000000000;;		*r2 = *r
0000000000000000000000000000000000000000;;		// deep copy of the Header
0000000000000000000000000000000000000000;;		r2.Header = make(http.Header)
0000000000000000000000000000000000000000;;		for k, s := range r.Header {
0000000000000000000000000000000000000000;;			r2.Header[k] = s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r2
0000000000000000000000000000000000000000;;	}
