0000000000000000000000000000000000000000;;	// Copyright 2014 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//      http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
704ec7acf462a76e04a301542b2d8c2282cfc6b2;;	
0000000000000000000000000000000000000000;;	// Package metadata provides access to Google Compute Engine (GCE)
0000000000000000000000000000000000000000;;	// metadata and API service accounts.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This package is a wrapper around the GCE metadata service,
0000000000000000000000000000000000000000;;	// as documented at https://developers.google.com/compute/docs/metadata.
0000000000000000000000000000000000000000;;	package metadata
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;		"golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"cloud.google.com/go/internal"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// metadataIP is the documented metadata server IP address.
0000000000000000000000000000000000000000;;		metadataIP = "169.254.169.254"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// metadataHostEnv is the environment variable specifying the
0000000000000000000000000000000000000000;;		// GCE metadata hostname.  If empty, the default value of
0000000000000000000000000000000000000000;;		// metadataIP ("169.254.169.254") is used instead.
0000000000000000000000000000000000000000;;		// This is variable name is not defined by any spec, as far as
0000000000000000000000000000000000000000;;		// I know; it was made up for the Go package.
0000000000000000000000000000000000000000;;		metadataHostEnv = "GCE_METADATA_HOST"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type cachedValue struct {
0000000000000000000000000000000000000000;;		k    string
0000000000000000000000000000000000000000;;		trim bool
0000000000000000000000000000000000000000;;		mu   sync.Mutex
0000000000000000000000000000000000000000;;		v    string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		projID  = &cachedValue{k: "project/project-id", trim: true}
0000000000000000000000000000000000000000;;		projNum = &cachedValue{k: "project/numeric-project-id", trim: true}
0000000000000000000000000000000000000000;;		instID  = &cachedValue{k: "instance/id", trim: true}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		metaClient = &http.Client{
0000000000000000000000000000000000000000;;			Transport: &internal.Transport{
0000000000000000000000000000000000000000;;				Base: &http.Transport{
0000000000000000000000000000000000000000;;					Dial: (&net.Dialer{
0000000000000000000000000000000000000000;;						Timeout:   2 * time.Second,
0000000000000000000000000000000000000000;;						KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;					}).Dial,
0000000000000000000000000000000000000000;;					ResponseHeaderTimeout: 2 * time.Second,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		subscribeClient = &http.Client{
0000000000000000000000000000000000000000;;			Transport: &internal.Transport{
0000000000000000000000000000000000000000;;				Base: &http.Transport{
0000000000000000000000000000000000000000;;					Dial: (&net.Dialer{
0000000000000000000000000000000000000000;;						Timeout:   2 * time.Second,
0000000000000000000000000000000000000000;;						KeepAlive: 30 * time.Second,
0000000000000000000000000000000000000000;;					}).Dial,
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NotDefinedError is returned when requested metadata is not defined.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The underlying string is the suffix after "/computeMetadata/v1/".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This error is not returned if the value is defined to be the empty
0000000000000000000000000000000000000000;;	// string.
0000000000000000000000000000000000000000;;	type NotDefinedError string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (suffix NotDefinedError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("metadata: GCE metadata %q not defined", string(suffix))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get returns a value from the metadata service.
0000000000000000000000000000000000000000;;	// The suffix is appended to "http://${GCE_METADATA_HOST}/computeMetadata/v1/".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the GCE_METADATA_HOST environment variable is not defined, a default of
0000000000000000000000000000000000000000;;	// 169.254.169.254 will be used instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the requested metadata is not defined, the returned error will
0000000000000000000000000000000000000000;;	// be of type NotDefinedError.
0000000000000000000000000000000000000000;;	func Get(suffix string) (string, error) {
0000000000000000000000000000000000000000;;		val, _, err := getETag(metaClient, suffix)
0000000000000000000000000000000000000000;;		return val, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getETag returns a value from the metadata service as well as the associated
0000000000000000000000000000000000000000;;	// ETag using the provided client. This func is otherwise equivalent to Get.
0000000000000000000000000000000000000000;;	func getETag(client *http.Client, suffix string) (value, etag string, err error) {
0000000000000000000000000000000000000000;;		// Using a fixed IP makes it very difficult to spoof the metadata service in
0000000000000000000000000000000000000000;;		// a container, which is an important use-case for local testing of cloud
0000000000000000000000000000000000000000;;		// deployments. To enable spoofing of the metadata service, the environment
0000000000000000000000000000000000000000;;		// variable GCE_METADATA_HOST is first inspected to decide where metadata
0000000000000000000000000000000000000000;;		// requests shall go.
0000000000000000000000000000000000000000;;		host := os.Getenv(metadataHostEnv)
0000000000000000000000000000000000000000;;		if host == "" {
0000000000000000000000000000000000000000;;			// Using 169.254.169.254 instead of "metadata" here because Go
0000000000000000000000000000000000000000;;			// binaries built with the "netgo" tag and without cgo won't
0000000000000000000000000000000000000000;;			// know the search suffix for "metadata" is
0000000000000000000000000000000000000000;;			// ".google.internal", and this IP address is documented as
0000000000000000000000000000000000000000;;			// being stable anyway.
0000000000000000000000000000000000000000;;			host = metadataIP
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		url := "http://" + host + "/computeMetadata/v1/" + suffix
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", url, nil)
0000000000000000000000000000000000000000;;		req.Header.Set("Metadata-Flavor", "Google")
0000000000000000000000000000000000000000;;		res, err := client.Do(req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer res.Body.Close()
0000000000000000000000000000000000000000;;		if res.StatusCode == http.StatusNotFound {
0000000000000000000000000000000000000000;;			return "", "", NotDefinedError(suffix)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if res.StatusCode != 200 {
0000000000000000000000000000000000000000;;			return "", "", fmt.Errorf("status code %d trying to fetch %s", res.StatusCode, url)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		all, err := ioutil.ReadAll(res.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return string(all), res.Header.Get("Etag"), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getTrimmed(suffix string) (s string, err error) {
0000000000000000000000000000000000000000;;		s, err = Get(suffix)
0000000000000000000000000000000000000000;;		s = strings.TrimSpace(s)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *cachedValue) get() (v string, err error) {
0000000000000000000000000000000000000000;;		defer c.mu.Unlock()
0000000000000000000000000000000000000000;;		c.mu.Lock()
0000000000000000000000000000000000000000;;		if c.v != "" {
0000000000000000000000000000000000000000;;			return c.v, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c.trim {
0000000000000000000000000000000000000000;;			v, err = getTrimmed(c.k)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			v, err = Get(c.k)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			c.v = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		onGCEOnce sync.Once
0000000000000000000000000000000000000000;;		onGCE     bool
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OnGCE reports whether this process is running on Google Compute Engine.
0000000000000000000000000000000000000000;;	func OnGCE() bool {
0000000000000000000000000000000000000000;;		onGCEOnce.Do(initOnGCE)
0000000000000000000000000000000000000000;;		return onGCE
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initOnGCE() {
0000000000000000000000000000000000000000;;		onGCE = testOnGCE()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func testOnGCE() bool {
0000000000000000000000000000000000000000;;		// The user explicitly said they're on GCE, so trust them.
0000000000000000000000000000000000000000;;		if os.Getenv(metadataHostEnv) != "" {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ctx, cancel := context.WithCancel(context.Background())
0000000000000000000000000000000000000000;;		defer cancel()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resc := make(chan bool, 2)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Try two strategies in parallel.
0000000000000000000000000000000000000000;;		// See https://github.com/GoogleCloudPlatform/google-cloud-go/issues/194
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			res, err := ctxhttp.Get(ctx, metaClient, "http://"+metadataIP)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				resc <- false
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			defer res.Body.Close()
0000000000000000000000000000000000000000;;			resc <- res.Header.Get("Metadata-Flavor") == "Google"
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go func() {
0000000000000000000000000000000000000000;;			addrs, err := net.LookupHost("metadata.google.internal")
0000000000000000000000000000000000000000;;			if err != nil || len(addrs) == 0 {
0000000000000000000000000000000000000000;;				resc <- false
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			resc <- strsContains(addrs, metadataIP)
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tryHarder := systemInfoSuggestsGCE()
0000000000000000000000000000000000000000;;		if tryHarder {
0000000000000000000000000000000000000000;;			res := <-resc
0000000000000000000000000000000000000000;;			if res {
0000000000000000000000000000000000000000;;				// The first strategy succeeded, so let's use it.
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// Wait for either the DNS or metadata server probe to
0000000000000000000000000000000000000000;;			// contradict the other one and say we are running on
0000000000000000000000000000000000000000;;			// GCE. Give it a lot of time to do so, since the system
0000000000000000000000000000000000000000;;			// info already suggests we're running on a GCE BIOS.
0000000000000000000000000000000000000000;;			timer := time.NewTimer(5 * time.Second)
0000000000000000000000000000000000000000;;			defer timer.Stop()
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case res = <-resc:
0000000000000000000000000000000000000000;;				return res
0000000000000000000000000000000000000000;;			case <-timer.C:
0000000000000000000000000000000000000000;;				// Too slow. Who knows what this system is.
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// There's no hint from the system info that we're running on
0000000000000000000000000000000000000000;;		// GCE, so use the first probe's result as truth, whether it's
0000000000000000000000000000000000000000;;		// true or false. The goal here is to optimize for speed for
0000000000000000000000000000000000000000;;		// users who are NOT running on GCE. We can't assume that
0000000000000000000000000000000000000000;;		// either a DNS lookup or an HTTP request to a blackholed IP
0000000000000000000000000000000000000000;;		// address is fast. Worst case this should return when the
0000000000000000000000000000000000000000;;		// metaClient's Transport.ResponseHeaderTimeout or
0000000000000000000000000000000000000000;;		// Transport.Dial.Timeout fires (in two seconds).
0000000000000000000000000000000000000000;;		return <-resc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// systemInfoSuggestsGCE reports whether the local system (without
0000000000000000000000000000000000000000;;	// doing network requests) suggests that we're running on GCE. If this
0000000000000000000000000000000000000000;;	// returns true, testOnGCE tries a bit harder to reach its metadata
0000000000000000000000000000000000000000;;	// server.
0000000000000000000000000000000000000000;;	func systemInfoSuggestsGCE() bool {
0000000000000000000000000000000000000000;;		if runtime.GOOS != "linux" {
0000000000000000000000000000000000000000;;			// We don't have any non-Linux clues available, at least yet.
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		slurp, _ := ioutil.ReadFile("/sys/class/dmi/id/product_name")
0000000000000000000000000000000000000000;;		name := strings.TrimSpace(string(slurp))
0000000000000000000000000000000000000000;;		return name == "Google" || name == "Google Compute Engine"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Subscribe subscribes to a value from the metadata service.
0000000000000000000000000000000000000000;;	// The suffix is appended to "http://${GCE_METADATA_HOST}/computeMetadata/v1/".
0000000000000000000000000000000000000000;;	// The suffix may contain query parameters.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Subscribe calls fn with the latest metadata value indicated by the provided
0000000000000000000000000000000000000000;;	// suffix. If the metadata value is deleted, fn is called with the empty string
0000000000000000000000000000000000000000;;	// and ok false. Subscribe blocks until fn returns a non-nil error or the value
0000000000000000000000000000000000000000;;	// is deleted. Subscribe returns the error value returned from the last call to
0000000000000000000000000000000000000000;;	// fn, which may be nil when ok == false.
0000000000000000000000000000000000000000;;	func Subscribe(suffix string, fn func(v string, ok bool) error) error {
0000000000000000000000000000000000000000;;		const failedSubscribeSleep = time.Second * 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// First check to see if the metadata value exists at all.
0000000000000000000000000000000000000000;;		val, lastETag, err := getETag(subscribeClient, suffix)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := fn(val, true); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ok := true
0000000000000000000000000000000000000000;;		if strings.ContainsRune(suffix, '?') {
0000000000000000000000000000000000000000;;			suffix += "&wait_for_change=true&last_etag="
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			suffix += "?wait_for_change=true&last_etag="
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			val, etag, err := getETag(subscribeClient, suffix+url.QueryEscape(lastETag))
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				if _, deleted := err.(NotDefinedError); !deleted {
0000000000000000000000000000000000000000;;					time.Sleep(failedSubscribeSleep)
0000000000000000000000000000000000000000;;					continue // Retry on other errors.
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				ok = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			lastETag = etag
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if err := fn(val, ok); err != nil || !ok {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProjectID returns the current instance's project ID string.
0000000000000000000000000000000000000000;;	func ProjectID() (string, error) { return projID.get() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NumericProjectID returns the current instance's numeric project ID.
0000000000000000000000000000000000000000;;	func NumericProjectID() (string, error) { return projNum.get() }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InternalIP returns the instance's primary internal IP address.
0000000000000000000000000000000000000000;;	func InternalIP() (string, error) {
0000000000000000000000000000000000000000;;		return getTrimmed("instance/network-interfaces/0/ip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExternalIP returns the instance's primary external (public) IP address.
0000000000000000000000000000000000000000;;	func ExternalIP() (string, error) {
0000000000000000000000000000000000000000;;		return getTrimmed("instance/network-interfaces/0/access-configs/0/external-ip")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hostname returns the instance's hostname. This will be of the form
0000000000000000000000000000000000000000;;	// "<instanceID>.c.<projID>.internal".
0000000000000000000000000000000000000000;;	func Hostname() (string, error) {
0000000000000000000000000000000000000000;;		return getTrimmed("instance/hostname")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceTags returns the list of user-defined instance tags,
0000000000000000000000000000000000000000;;	// assigned when initially creating a GCE instance.
0000000000000000000000000000000000000000;;	func InstanceTags() ([]string, error) {
0000000000000000000000000000000000000000;;		var s []string
0000000000000000000000000000000000000000;;		j, err := Get("instance/tags")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(strings.NewReader(j)).Decode(&s); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceID returns the current VM's numeric instance ID.
0000000000000000000000000000000000000000;;	func InstanceID() (string, error) {
0000000000000000000000000000000000000000;;		return instID.get()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceName returns the current VM's instance ID string.
0000000000000000000000000000000000000000;;	func InstanceName() (string, error) {
0000000000000000000000000000000000000000;;		host, err := Hostname()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Split(host, ".")[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Zone returns the current VM's zone, such as "us-central1-b".
0000000000000000000000000000000000000000;;	func Zone() (string, error) {
0000000000000000000000000000000000000000;;		zone, err := getTrimmed("instance/zone")
0000000000000000000000000000000000000000;;		// zone is of the form "projects/<projNum>/zones/<zoneName>".
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return zone[strings.LastIndex(zone, "/")+1:], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceAttributes returns the list of user-defined attributes,
0000000000000000000000000000000000000000;;	// assigned when initially creating a GCE VM instance. The value of an
0000000000000000000000000000000000000000;;	// attribute can be obtained with InstanceAttributeValue.
0000000000000000000000000000000000000000;;	func InstanceAttributes() ([]string, error) { return lines("instance/attributes/") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProjectAttributes returns the list of user-defined attributes
0000000000000000000000000000000000000000;;	// applying to the project as a whole, not just this VM.  The value of
0000000000000000000000000000000000000000;;	// an attribute can be obtained with ProjectAttributeValue.
0000000000000000000000000000000000000000;;	func ProjectAttributes() ([]string, error) { return lines("project/attributes/") }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lines(suffix string) ([]string, error) {
0000000000000000000000000000000000000000;;		j, err := Get(suffix)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := strings.Split(strings.TrimSpace(j), "\n")
0000000000000000000000000000000000000000;;		for i := range s {
0000000000000000000000000000000000000000;;			s[i] = strings.TrimSpace(s[i])
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// InstanceAttributeValue returns the value of the provided VM
0000000000000000000000000000000000000000;;	// instance attribute.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the requested attribute is not defined, the returned error will
0000000000000000000000000000000000000000;;	// be of type NotDefinedError.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// InstanceAttributeValue may return ("", nil) if the attribute was
0000000000000000000000000000000000000000;;	// defined to be the empty string.
0000000000000000000000000000000000000000;;	func InstanceAttributeValue(attr string) (string, error) {
0000000000000000000000000000000000000000;;		return Get("instance/attributes/" + attr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ProjectAttributeValue returns the value of the provided
0000000000000000000000000000000000000000;;	// project attribute.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the requested attribute is not defined, the returned error will
0000000000000000000000000000000000000000;;	// be of type NotDefinedError.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// ProjectAttributeValue may return ("", nil) if the attribute was
0000000000000000000000000000000000000000;;	// defined to be the empty string.
0000000000000000000000000000000000000000;;	func ProjectAttributeValue(attr string) (string, error) {
0000000000000000000000000000000000000000;;		return Get("project/attributes/" + attr)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Scopes returns the service account scopes for the given account.
0000000000000000000000000000000000000000;;	// The account may be empty or the string "default" to use the instance's
0000000000000000000000000000000000000000;;	// main account.
0000000000000000000000000000000000000000;;	func Scopes(serviceAccount string) ([]string, error) {
0000000000000000000000000000000000000000;;		if serviceAccount == "" {
0000000000000000000000000000000000000000;;			serviceAccount = "default"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return lines("instance/service-accounts/" + serviceAccount + "/scopes")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func strsContains(ss []string, s string) bool {
0000000000000000000000000000000000000000;;		for _, v := range ss {
0000000000000000000000000000000000000000;;			if v == s {
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
