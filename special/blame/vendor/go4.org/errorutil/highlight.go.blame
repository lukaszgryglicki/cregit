0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2011 Google Inc.
e1c97c6d3adc056ee4113e77832c622bbb62d66e;Godeps/_workspace/src/github.com/camlistore/camlistore/pkg/errorutil/highlight.go[Godeps/_workspace/src/github.com/camlistore/camlistore/pkg/errorutil/highlight.go][vendor/go4.org/errorutil/highlight.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package errorutil helps make better error messages.
0000000000000000000000000000000000000000;;	package errorutil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HighlightBytePosition takes a reader and the location in bytes of a parse
0000000000000000000000000000000000000000;;	// error (for instance, from json.SyntaxError.Offset) and returns the line, column,
0000000000000000000000000000000000000000;;	// and pretty-printed context around the error with an arrow indicating the exact
0000000000000000000000000000000000000000;;	// position of the syntax error.
0000000000000000000000000000000000000000;;	func HighlightBytePosition(f io.Reader, pos int64) (line, col int, highlight string) {
0000000000000000000000000000000000000000;;		line = 1
0000000000000000000000000000000000000000;;		br := bufio.NewReader(f)
0000000000000000000000000000000000000000;;		lastLine := ""
0000000000000000000000000000000000000000;;		thisLine := new(bytes.Buffer)
0000000000000000000000000000000000000000;;		for n := int64(0); n < pos; n++ {
0000000000000000000000000000000000000000;;			b, err := br.ReadByte()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if b == '\n' {
0000000000000000000000000000000000000000;;				lastLine = thisLine.String()
0000000000000000000000000000000000000000;;				thisLine.Reset()
0000000000000000000000000000000000000000;;				line++
0000000000000000000000000000000000000000;;				col = 1
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				col++
0000000000000000000000000000000000000000;;				thisLine.WriteByte(b)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if line > 1 {
0000000000000000000000000000000000000000;;			highlight += fmt.Sprintf("%5d: %s\n", line-1, lastLine)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		highlight += fmt.Sprintf("%5d: %s\n", line, thisLine.String())
0000000000000000000000000000000000000000;;		highlight += fmt.Sprintf("%s^\n", strings.Repeat(" ", col+5))
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
