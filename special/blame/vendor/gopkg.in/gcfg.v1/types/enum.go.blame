0000000000000000000000000000000000000000;;	package types
050f3b901a990524b87ff3fe91d0929dfb078c81;Godeps/_workspace/src/code.google.com/p/gcfg/types/enum.go[Godeps/_workspace/src/code.google.com/p/gcfg/types/enum.go][vendor/gopkg.in/gcfg.v1/types/enum.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnumParser parses "enum" values; i.e. a predefined set of strings to
0000000000000000000000000000000000000000;;	// predefined values.
0000000000000000000000000000000000000000;;	type EnumParser struct {
0000000000000000000000000000000000000000;;		Type      string // type name; if not set, use type of first value added
0000000000000000000000000000000000000000;;		CaseMatch bool   // if true, matching of strings is case-sensitive
0000000000000000000000000000000000000000;;		// PrefixMatch bool
0000000000000000000000000000000000000000;;		vals map[string]interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddVals adds strings and values to an EnumParser.
0000000000000000000000000000000000000000;;	func (ep *EnumParser) AddVals(vals map[string]interface{}) {
0000000000000000000000000000000000000000;;		if ep.vals == nil {
0000000000000000000000000000000000000000;;			ep.vals = make(map[string]interface{})
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for k, v := range vals {
0000000000000000000000000000000000000000;;			if ep.Type == "" {
0000000000000000000000000000000000000000;;				ep.Type = reflect.TypeOf(v).Name()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !ep.CaseMatch {
0000000000000000000000000000000000000000;;				k = strings.ToLower(k)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			ep.vals[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Parse parses the string and returns the value or an error.
0000000000000000000000000000000000000000;;	func (ep EnumParser) Parse(s string) (interface{}, error) {
0000000000000000000000000000000000000000;;		if !ep.CaseMatch {
0000000000000000000000000000000000000000;;			s = strings.ToLower(s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, ok := ep.vals[s]
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return false, fmt.Errorf("failed to parse %s %#q", ep.Type, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v, nil
0000000000000000000000000000000000000000;;	}
