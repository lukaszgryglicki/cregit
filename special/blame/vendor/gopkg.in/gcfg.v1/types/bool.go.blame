0000000000000000000000000000000000000000;;	package types
050f3b901a990524b87ff3fe91d0929dfb078c81;Godeps/_workspace/src/code.google.com/p/gcfg/types/bool.go[Godeps/_workspace/src/code.google.com/p/gcfg/types/bool.go][vendor/gopkg.in/gcfg.v1/types/bool.go];	
0000000000000000000000000000000000000000;;	// BoolValues defines the name and value mappings for ParseBool.
0000000000000000000000000000000000000000;;	var BoolValues = map[string]interface{}{
0000000000000000000000000000000000000000;;		"true": true, "yes": true, "on": true, "1": true,
0000000000000000000000000000000000000000;;		"false": false, "no": false, "off": false, "0": false,
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var boolParser = func() *EnumParser {
0000000000000000000000000000000000000000;;		ep := &EnumParser{}
0000000000000000000000000000000000000000;;		ep.AddVals(BoolValues)
0000000000000000000000000000000000000000;;		return ep
0000000000000000000000000000000000000000;;	}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseBool parses bool values according to the definitions in BoolValues.
0000000000000000000000000000000000000000;;	// Parsing is case-insensitive.
0000000000000000000000000000000000000000;;	func ParseBool(s string) (bool, error) {
0000000000000000000000000000000000000000;;		v, err := boolParser.Parse(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return false, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return v.(bool), nil
0000000000000000000000000000000000000000;;	}
