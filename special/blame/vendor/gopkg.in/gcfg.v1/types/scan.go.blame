0000000000000000000000000000000000000000;;	package types
050f3b901a990524b87ff3fe91d0929dfb078c81;Godeps/_workspace/src/code.google.com/p/gcfg/types/scan.go[Godeps/_workspace/src/code.google.com/p/gcfg/types/scan.go][vendor/gopkg.in/gcfg.v1/types/scan.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ScanFully uses fmt.Sscanf with verb to fully scan val into ptr.
0000000000000000000000000000000000000000;;	func ScanFully(ptr interface{}, val string, verb byte) error {
0000000000000000000000000000000000000000;;		t := reflect.ValueOf(ptr).Elem().Type()
0000000000000000000000000000000000000000;;		// attempt to read extra bytes to make sure the value is consumed
0000000000000000000000000000000000000000;;		var b []byte
0000000000000000000000000000000000000000;;		n, err := fmt.Sscanf(val, "%"+string(verb)+"%s", ptr, &b)
0000000000000000000000000000000000000000;;		switch {
0000000000000000000000000000000000000000;;		case n < 1 || n == 1 && err != io.EOF:
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to parse %q as %v: %v", val, t, err)
0000000000000000000000000000000000000000;;		case n > 1:
0000000000000000000000000000000000000000;;			return fmt.Errorf("failed to parse %q as %v: extra characters %q", val, t, string(b))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// n == 1 && err == io.EOF
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
