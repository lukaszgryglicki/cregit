0000000000000000000000000000000000000000;;	# lumberjack  [![GoDoc](https://godoc.org/gopkg.in/natefinch/lumberjack.v2?status.png)](https://godoc.org/gopkg.in/natefinch/lumberjack.v2) [![Build Status](https://drone.io/github.com/natefinch/lumberjack/status.png)](https://drone.io/github.com/natefinch/lumberjack/latest) [![Build status](https://ci.appveyor.com/api/projects/status/00gchpxtg4gkrt5d)](https://ci.appveyor.com/project/natefinch/lumberjack) [![Coverage Status](https://coveralls.io/repos/natefinch/lumberjack/badge.svg?branch=v2.0)](https://coveralls.io/r/natefinch/lumberjack?branch=v2.0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Lumberjack is a Go package for writing logs to rolling files.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Package lumberjack provides a rolling logger.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that this is v2.0 of lumberjack, and should be imported using gopkg.in
0000000000000000000000000000000000000000;;	thusly:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    import "gopkg.in/natefinch/lumberjack.v2"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The package name remains simply lumberjack, and the code resides at
0000000000000000000000000000000000000000;;	https://github.com/natefinch/lumberjack under the v2.0 branch.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Lumberjack is intended to be one part of a logging infrastructure.
0000000000000000000000000000000000000000;;	It is not an all-in-one solution, but instead is a pluggable
0000000000000000000000000000000000000000;;	component at the bottom of the logging stack that simply controls the files
0000000000000000000000000000000000000000;;	to which logs are written.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Lumberjack plays well with any logging package that can write to an
0000000000000000000000000000000000000000;;	io.Writer, including the standard library's log package.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Lumberjack assumes that only one process is writing to the output files.
0000000000000000000000000000000000000000;;	Using the same lumberjack configuration from multiple processes on the same
0000000000000000000000000000000000000000;;	machine will result in improper behavior.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Example**
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To use lumberjack with the standard library's log package, just pass it into the SetOutput function when your application starts.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	log.SetOutput(&lumberjack.Logger{
0000000000000000000000000000000000000000;;	    Filename:   "/var/log/myapp/foo.log",
0000000000000000000000000000000000000000;;	    MaxSize:    500, // megabytes
0000000000000000000000000000000000000000;;	    MaxBackups: 3,
0000000000000000000000000000000000000000;;	    MaxAge:     28, //days
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## type Logger
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	type Logger struct {
0000000000000000000000000000000000000000;;	    // Filename is the file to write logs to.  Backup log files will be retained
0000000000000000000000000000000000000000;;	    // in the same directory.  It uses <processname>-lumberjack.log in
0000000000000000000000000000000000000000;;	    // os.TempDir() if empty.
0000000000000000000000000000000000000000;;	    Filename string `json:"filename" yaml:"filename"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // MaxSize is the maximum size in megabytes of the log file before it gets
0000000000000000000000000000000000000000;;	    // rotated. It defaults to 100 megabytes.
0000000000000000000000000000000000000000;;	    MaxSize int `json:"maxsize" yaml:"maxsize"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // MaxAge is the maximum number of days to retain old log files based on the
0000000000000000000000000000000000000000;;	    // timestamp encoded in their filename.  Note that a day is defined as 24
0000000000000000000000000000000000000000;;	    // hours and may not exactly correspond to calendar days due to daylight
0000000000000000000000000000000000000000;;	    // savings, leap seconds, etc. The default is not to remove old log files
0000000000000000000000000000000000000000;;	    // based on age.
0000000000000000000000000000000000000000;;	    MaxAge int `json:"maxage" yaml:"maxage"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // MaxBackups is the maximum number of old log files to retain.  The default
0000000000000000000000000000000000000000;;	    // is to retain all old log files (though MaxAge may still cause them to get
0000000000000000000000000000000000000000;;	    // deleted.)
0000000000000000000000000000000000000000;;	    MaxBackups int `json:"maxbackups" yaml:"maxbackups"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // LocalTime determines if the time used for formatting the timestamps in
0000000000000000000000000000000000000000;;	    // backup files is the computer's local time.  The default is to use UTC
0000000000000000000000000000000000000000;;	    // time.
0000000000000000000000000000000000000000;;	    LocalTime bool `json:"localtime" yaml:"localtime"`
0000000000000000000000000000000000000000;;	    // contains filtered or unexported fields
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Logger is an io.WriteCloser that writes to the specified filename.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Logger opens or creates the logfile on first Write.  If the file exists and
0000000000000000000000000000000000000000;;	is less than MaxSize megabytes, lumberjack will open and append to that file.
0000000000000000000000000000000000000000;;	If the file exists and its size is >= MaxSize megabytes, the file is renamed
0000000000000000000000000000000000000000;;	by putting the current time in a timestamp in the name immediately before the
0000000000000000000000000000000000000000;;	file's extension (or the end of the filename if there's no extension). A new
0000000000000000000000000000000000000000;;	log file is then created using original filename.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Whenever a write would cause the current log file exceed MaxSize megabytes,
0000000000000000000000000000000000000000;;	the current file is closed, renamed, and a new log file created with the
0000000000000000000000000000000000000000;;	original name. Thus, the filename you give Logger is always the "current" log
0000000000000000000000000000000000000000;;	file.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Cleaning Up Old Log Files
0000000000000000000000000000000000000000;;	Whenever a new logfile gets created, old log files may be deleted.  The most
0000000000000000000000000000000000000000;;	recent files according to the encoded timestamp will be retained, up to a
0000000000000000000000000000000000000000;;	number equal to MaxBackups (or all of them if MaxBackups is 0).  Any files
0000000000000000000000000000000000000000;;	with an encoded timestamp older than MaxAge days are deleted, regardless of
0000000000000000000000000000000000000000;;	MaxBackups.  Note that the time encoded in the timestamp is the rotation
0000000000000000000000000000000000000000;;	time, which may differ from the last time that file was written to.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	If MaxBackups and MaxAge are both 0, no old log files will be deleted.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### func (\*Logger) Close
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	func (l *Logger) Close() error
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Close implements io.Closer, and closes the current logfile.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### func (\*Logger) Rotate
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	func (l *Logger) Rotate() error
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Rotate causes Logger to close the existing log file and immediately create a
0000000000000000000000000000000000000000;;	new one.  This is a helper function for applications that want to initiate
0000000000000000000000000000000000000000;;	rotations outside of the normal rotation rules, such as in response to
0000000000000000000000000000000000000000;;	SIGHUP.  After rotating, this initiates a cleanup of old log files according
0000000000000000000000000000000000000000;;	to the normal rules.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Example**
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Example of how to rotate in response to SIGHUP.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Code:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	l := &lumberjack.Logger{}
0000000000000000000000000000000000000000;;	log.SetOutput(l)
0000000000000000000000000000000000000000;;	c := make(chan os.Signal, 1)
0000000000000000000000000000000000000000;;	signal.Notify(c, syscall.SIGHUP)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	go func() {
0000000000000000000000000000000000000000;;	    for {
0000000000000000000000000000000000000000;;	        <-c
0000000000000000000000000000000000000000;;	        l.Rotate()
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}()
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### func (\*Logger) Write
0000000000000000000000000000000000000000;;	``` go
0000000000000000000000000000000000000000;;	func (l *Logger) Write(p []byte) (n int, err error)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Write implements io.Writer.  If a write would cause the log file to be larger
0000000000000000000000000000000000000000;;	than MaxSize, the file is closed, renamed to include a timestamp of the
0000000000000000000000000000000000000000;;	current time, and a new log file is created using the original log file name.
0000000000000000000000000000000000000000;;	If the length of the write is greater than MaxSize, an error is returned.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- - -
0000000000000000000000000000000000000000;;	Generated by [godoc2md](http://godoc.org/github.com/davecheney/godoc2md)
