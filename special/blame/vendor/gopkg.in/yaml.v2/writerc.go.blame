0000000000000000000000000000000000000000;;	package yaml
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/gopkg.in/v2/yaml/writerc.go[Godeps/_workspace/src/gopkg.in/v2/yaml/writerc.go][vendor/gopkg.in/yaml.v2/writerc.go];	
0000000000000000000000000000000000000000;;	// Set the writer error and return false.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_writer_error(emitter *yaml_emitter_t, problem string) bool {
0000000000000000000000000000000000000000;;		emitter.error = yaml_WRITER_ERROR
0000000000000000000000000000000000000000;;		emitter.problem = problem
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flush the output buffer.
0000000000000000000000000000000000000000;;	func yaml_emitter_flush(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if emitter.write_handler == nil {
0000000000000000000000000000000000000000;;			panic("write handler not set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check if the buffer is empty.
0000000000000000000000000000000000000000;;		if emitter.buffer_pos == 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If the output encoding is UTF-8, we don't need to recode the buffer.
0000000000000000000000000000000000000000;;		if emitter.encoding == yaml_UTF8_ENCODING {
0000000000000000000000000000000000000000;;			if err := emitter.write_handler(emitter, emitter.buffer[:emitter.buffer_pos]); err != nil {
0000000000000000000000000000000000000000;;				return yaml_emitter_set_writer_error(emitter, "write error: "+err.Error())
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.buffer_pos = 0
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Recode the buffer into the raw buffer.
0000000000000000000000000000000000000000;;		var low, high int
0000000000000000000000000000000000000000;;		if emitter.encoding == yaml_UTF16LE_ENCODING {
0000000000000000000000000000000000000000;;			low, high = 0, 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			high, low = 1, 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pos := 0
0000000000000000000000000000000000000000;;		for pos < emitter.buffer_pos {
0000000000000000000000000000000000000000;;			// See the "reader.c" code for more details on UTF-8 encoding.  Note
0000000000000000000000000000000000000000;;			// that we assume that the buffer contains a valid UTF-8 sequence.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Read the next UTF-8 character.
0000000000000000000000000000000000000000;;			octet := emitter.buffer[pos]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var w int
0000000000000000000000000000000000000000;;			var value rune
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case octet&0x80 == 0x00:
0000000000000000000000000000000000000000;;				w, value = 1, rune(octet&0x7F)
0000000000000000000000000000000000000000;;			case octet&0xE0 == 0xC0:
0000000000000000000000000000000000000000;;				w, value = 2, rune(octet&0x1F)
0000000000000000000000000000000000000000;;			case octet&0xF0 == 0xE0:
0000000000000000000000000000000000000000;;				w, value = 3, rune(octet&0x0F)
0000000000000000000000000000000000000000;;			case octet&0xF8 == 0xF0:
0000000000000000000000000000000000000000;;				w, value = 4, rune(octet&0x07)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for k := 1; k < w; k++ {
0000000000000000000000000000000000000000;;				octet = emitter.buffer[pos+k]
0000000000000000000000000000000000000000;;				value = (value << 6) + (rune(octet) & 0x3F)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			pos += w
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Write the character.
0000000000000000000000000000000000000000;;			if value < 0x10000 {
0000000000000000000000000000000000000000;;				var b [2]byte
0000000000000000000000000000000000000000;;				b[high] = byte(value >> 8)
0000000000000000000000000000000000000000;;				b[low] = byte(value & 0xFF)
0000000000000000000000000000000000000000;;				emitter.raw_buffer = append(emitter.raw_buffer, b[0], b[1])
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Write the character using a surrogate pair (check "reader.c").
0000000000000000000000000000000000000000;;				var b [4]byte
0000000000000000000000000000000000000000;;				value -= 0x10000
0000000000000000000000000000000000000000;;				b[high] = byte(0xD8 + (value >> 18))
0000000000000000000000000000000000000000;;				b[low] = byte((value >> 10) & 0xFF)
0000000000000000000000000000000000000000;;				b[high+2] = byte(0xDC + ((value >> 8) & 0xFF))
0000000000000000000000000000000000000000;;				b[low+2] = byte(value & 0xFF)
0000000000000000000000000000000000000000;;				emitter.raw_buffer = append(emitter.raw_buffer, b[0], b[1], b[2], b[3])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Write the raw buffer.
0000000000000000000000000000000000000000;;		if err := emitter.write_handler(emitter, emitter.raw_buffer); err != nil {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_writer_error(emitter, "write error: "+err.Error())
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.buffer_pos = 0
0000000000000000000000000000000000000000;;		emitter.raw_buffer = emitter.raw_buffer[:0]
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
