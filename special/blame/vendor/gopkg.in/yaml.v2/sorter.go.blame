0000000000000000000000000000000000000000;;	package yaml
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/gopkg.in/v2/yaml/sorter.go[Godeps/_workspace/src/gopkg.in/v2/yaml/sorter.go][vendor/gopkg.in/yaml.v2/sorter.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type keyList []reflect.Value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l keyList) Len() int      { return len(l) }
0000000000000000000000000000000000000000;;	func (l keyList) Swap(i, j int) { l[i], l[j] = l[j], l[i] }
0000000000000000000000000000000000000000;;	func (l keyList) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		a := l[i]
0000000000000000000000000000000000000000;;		b := l[j]
0000000000000000000000000000000000000000;;		ak := a.Kind()
0000000000000000000000000000000000000000;;		bk := b.Kind()
0000000000000000000000000000000000000000;;		for (ak == reflect.Interface || ak == reflect.Ptr) && !a.IsNil() {
0000000000000000000000000000000000000000;;			a = a.Elem()
0000000000000000000000000000000000000000;;			ak = a.Kind()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for (bk == reflect.Interface || bk == reflect.Ptr) && !b.IsNil() {
0000000000000000000000000000000000000000;;			b = b.Elem()
0000000000000000000000000000000000000000;;			bk = b.Kind()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		af, aok := keyFloat(a)
0000000000000000000000000000000000000000;;		bf, bok := keyFloat(b)
0000000000000000000000000000000000000000;;		if aok && bok {
0000000000000000000000000000000000000000;;			if af != bf {
0000000000000000000000000000000000000000;;				return af < bf
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ak != bk {
0000000000000000000000000000000000000000;;				return ak < bk
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return numLess(a, b)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if ak != reflect.String || bk != reflect.String {
0000000000000000000000000000000000000000;;			return ak < bk
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ar, br := []rune(a.String()), []rune(b.String())
0000000000000000000000000000000000000000;;		for i := 0; i < len(ar) && i < len(br); i++ {
0000000000000000000000000000000000000000;;			if ar[i] == br[i] {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			al := unicode.IsLetter(ar[i])
0000000000000000000000000000000000000000;;			bl := unicode.IsLetter(br[i])
0000000000000000000000000000000000000000;;			if al && bl {
0000000000000000000000000000000000000000;;				return ar[i] < br[i]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if al || bl {
0000000000000000000000000000000000000000;;				return bl
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var ai, bi int
0000000000000000000000000000000000000000;;			var an, bn int64
0000000000000000000000000000000000000000;;			for ai = i; ai < len(ar) && unicode.IsDigit(ar[ai]); ai++ {
0000000000000000000000000000000000000000;;				an = an*10 + int64(ar[ai]-'0')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for bi = i; bi < len(br) && unicode.IsDigit(br[bi]); bi++ {
0000000000000000000000000000000000000000;;				bn = bn*10 + int64(br[bi]-'0')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if an != bn {
0000000000000000000000000000000000000000;;				return an < bn
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if ai != bi {
0000000000000000000000000000000000000000;;				return ai < bi
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return ar[i] < br[i]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return len(ar) < len(br)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// keyFloat returns a float value for v if it is a number/bool
0000000000000000000000000000000000000000;;	// and whether it is a number/bool or not.
0000000000000000000000000000000000000000;;	func keyFloat(v reflect.Value) (f float64, ok bool) {
0000000000000000000000000000000000000000;;		switch v.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return float64(v.Int()), true
0000000000000000000000000000000000000000;;		case reflect.Float32, reflect.Float64:
0000000000000000000000000000000000000000;;			return v.Float(), true
0000000000000000000000000000000000000000;;		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
0000000000000000000000000000000000000000;;			return float64(v.Uint()), true
0000000000000000000000000000000000000000;;		case reflect.Bool:
0000000000000000000000000000000000000000;;			if v.Bool() {
0000000000000000000000000000000000000000;;				return 1, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0, false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// numLess returns whether a < b.
0000000000000000000000000000000000000000;;	// a and b must necessarily have the same kind.
0000000000000000000000000000000000000000;;	func numLess(a, b reflect.Value) bool {
0000000000000000000000000000000000000000;;		switch a.Kind() {
0000000000000000000000000000000000000000;;		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
0000000000000000000000000000000000000000;;			return a.Int() < b.Int()
0000000000000000000000000000000000000000;;		case reflect.Float32, reflect.Float64:
0000000000000000000000000000000000000000;;			return a.Float() < b.Float()
0000000000000000000000000000000000000000;;		case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
0000000000000000000000000000000000000000;;			return a.Uint() < b.Uint()
0000000000000000000000000000000000000000;;		case reflect.Bool:
0000000000000000000000000000000000000000;;			return !a.Bool() && b.Bool()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("not a number")
0000000000000000000000000000000000000000;;	}
