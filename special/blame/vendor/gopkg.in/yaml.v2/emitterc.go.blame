0000000000000000000000000000000000000000;;	package yaml
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/gopkg.in/v2/yaml/emitterc.go[Godeps/_workspace/src/gopkg.in/v2/yaml/emitterc.go][vendor/gopkg.in/yaml.v2/emitterc.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flush the buffer if needed.
0000000000000000000000000000000000000000;;	func flush(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if emitter.buffer_pos+5 >= len(emitter.buffer) {
0000000000000000000000000000000000000000;;			return yaml_emitter_flush(emitter)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put a character to the output buffer.
0000000000000000000000000000000000000000;;	func put(emitter *yaml_emitter_t, value byte) bool {
0000000000000000000000000000000000000000;;		if emitter.buffer_pos+5 >= len(emitter.buffer) && !yaml_emitter_flush(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.buffer[emitter.buffer_pos] = value
0000000000000000000000000000000000000000;;		emitter.buffer_pos++
0000000000000000000000000000000000000000;;		emitter.column++
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Put a line break to the output buffer.
0000000000000000000000000000000000000000;;	func put_break(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if emitter.buffer_pos+5 >= len(emitter.buffer) && !yaml_emitter_flush(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch emitter.line_break {
0000000000000000000000000000000000000000;;		case yaml_CR_BREAK:
0000000000000000000000000000000000000000;;			emitter.buffer[emitter.buffer_pos] = '\r'
0000000000000000000000000000000000000000;;			emitter.buffer_pos += 1
0000000000000000000000000000000000000000;;		case yaml_LN_BREAK:
0000000000000000000000000000000000000000;;			emitter.buffer[emitter.buffer_pos] = '\n'
0000000000000000000000000000000000000000;;			emitter.buffer_pos += 1
0000000000000000000000000000000000000000;;		case yaml_CRLN_BREAK:
0000000000000000000000000000000000000000;;			emitter.buffer[emitter.buffer_pos+0] = '\r'
0000000000000000000000000000000000000000;;			emitter.buffer[emitter.buffer_pos+1] = '\n'
0000000000000000000000000000000000000000;;			emitter.buffer_pos += 2
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("unknown line break setting")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.column = 0
0000000000000000000000000000000000000000;;		emitter.line++
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copy a character from a string into buffer.
0000000000000000000000000000000000000000;;	func write(emitter *yaml_emitter_t, s []byte, i *int) bool {
0000000000000000000000000000000000000000;;		if emitter.buffer_pos+5 >= len(emitter.buffer) && !yaml_emitter_flush(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		p := emitter.buffer_pos
0000000000000000000000000000000000000000;;		w := width(s[*i])
0000000000000000000000000000000000000000;;		switch w {
0000000000000000000000000000000000000000;;		case 4:
0000000000000000000000000000000000000000;;			emitter.buffer[p+3] = s[*i+3]
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case 3:
0000000000000000000000000000000000000000;;			emitter.buffer[p+2] = s[*i+2]
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case 2:
0000000000000000000000000000000000000000;;			emitter.buffer[p+1] = s[*i+1]
0000000000000000000000000000000000000000;;			fallthrough
0000000000000000000000000000000000000000;;		case 1:
0000000000000000000000000000000000000000;;			emitter.buffer[p+0] = s[*i+0]
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("unknown character width")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.column++
0000000000000000000000000000000000000000;;		emitter.buffer_pos += w
0000000000000000000000000000000000000000;;		*i += w
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write a whole string into buffer.
0000000000000000000000000000000000000000;;	func write_all(emitter *yaml_emitter_t, s []byte) bool {
0000000000000000000000000000000000000000;;		for i := 0; i < len(s); {
0000000000000000000000000000000000000000;;			if !write(emitter, s, &i) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Copy a line break character from a string into buffer.
0000000000000000000000000000000000000000;;	func write_break(emitter *yaml_emitter_t, s []byte, i *int) bool {
0000000000000000000000000000000000000000;;		if s[*i] == '\n' {
0000000000000000000000000000000000000000;;			if !put_break(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*i++
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !write(emitter, s, i) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.column = 0
0000000000000000000000000000000000000000;;			emitter.line++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set an emitter error and return false.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_emitter_error(emitter *yaml_emitter_t, problem string) bool {
0000000000000000000000000000000000000000;;		emitter.error = yaml_EMITTER_ERROR
0000000000000000000000000000000000000000;;		emitter.problem = problem
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Emit an event.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		emitter.events = append(emitter.events, *event)
0000000000000000000000000000000000000000;;		for !yaml_emitter_need_more_events(emitter) {
0000000000000000000000000000000000000000;;			event := &emitter.events[emitter.events_head]
0000000000000000000000000000000000000000;;			if !yaml_emitter_analyze_event(emitter, event) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_state_machine(emitter, event) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			yaml_event_delete(event)
0000000000000000000000000000000000000000;;			emitter.events_head++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if we need to accumulate more events before emitting.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// We accumulate extra
0000000000000000000000000000000000000000;;	//  - 1 event for DOCUMENT-START
0000000000000000000000000000000000000000;;	//  - 2 events for SEQUENCE-START
0000000000000000000000000000000000000000;;	//  - 3 events for MAPPING-START
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	func yaml_emitter_need_more_events(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if emitter.events_head == len(emitter.events) {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var accumulate int
0000000000000000000000000000000000000000;;		switch emitter.events[emitter.events_head].typ {
0000000000000000000000000000000000000000;;		case yaml_DOCUMENT_START_EVENT:
0000000000000000000000000000000000000000;;			accumulate = 1
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		case yaml_SEQUENCE_START_EVENT:
0000000000000000000000000000000000000000;;			accumulate = 2
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		case yaml_MAPPING_START_EVENT:
0000000000000000000000000000000000000000;;			accumulate = 3
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(emitter.events)-emitter.events_head > accumulate {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var level int
0000000000000000000000000000000000000000;;		for i := emitter.events_head; i < len(emitter.events); i++ {
0000000000000000000000000000000000000000;;			switch emitter.events[i].typ {
0000000000000000000000000000000000000000;;			case yaml_STREAM_START_EVENT, yaml_DOCUMENT_START_EVENT, yaml_SEQUENCE_START_EVENT, yaml_MAPPING_START_EVENT:
0000000000000000000000000000000000000000;;				level++
0000000000000000000000000000000000000000;;			case yaml_STREAM_END_EVENT, yaml_DOCUMENT_END_EVENT, yaml_SEQUENCE_END_EVENT, yaml_MAPPING_END_EVENT:
0000000000000000000000000000000000000000;;				level--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if level == 0 {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Append a directive to the directives stack.
0000000000000000000000000000000000000000;;	func yaml_emitter_append_tag_directive(emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool) bool {
0000000000000000000000000000000000000000;;		for i := 0; i < len(emitter.tag_directives); i++ {
0000000000000000000000000000000000000000;;			if bytes.Equal(value.handle, emitter.tag_directives[i].handle) {
0000000000000000000000000000000000000000;;				if allow_duplicates {
0000000000000000000000000000000000000000;;					return true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return yaml_emitter_set_emitter_error(emitter, "duplicate %TAG directive")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// [Go] Do we actually need to copy this given garbage collection
0000000000000000000000000000000000000000;;		// and the lack of deallocating destructors?
0000000000000000000000000000000000000000;;		tag_copy := yaml_tag_directive_t{
0000000000000000000000000000000000000000;;			handle: make([]byte, len(value.handle)),
0000000000000000000000000000000000000000;;			prefix: make([]byte, len(value.prefix)),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		copy(tag_copy.handle, value.handle)
0000000000000000000000000000000000000000;;		copy(tag_copy.prefix, value.prefix)
0000000000000000000000000000000000000000;;		emitter.tag_directives = append(emitter.tag_directives, tag_copy)
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Increase the indentation level.
0000000000000000000000000000000000000000;;	func yaml_emitter_increase_indent(emitter *yaml_emitter_t, flow, indentless bool) bool {
0000000000000000000000000000000000000000;;		emitter.indents = append(emitter.indents, emitter.indent)
0000000000000000000000000000000000000000;;		if emitter.indent < 0 {
0000000000000000000000000000000000000000;;			if flow {
0000000000000000000000000000000000000000;;				emitter.indent = emitter.best_indent
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				emitter.indent = 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else if !indentless {
0000000000000000000000000000000000000000;;			emitter.indent += emitter.best_indent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// State dispatcher.
0000000000000000000000000000000000000000;;	func yaml_emitter_state_machine(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		switch emitter.state {
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		case yaml_EMIT_STREAM_START_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_stream_start(emitter, event)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FIRST_DOCUMENT_START_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_document_start(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_DOCUMENT_START_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_document_start(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_DOCUMENT_CONTENT_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_document_content(emitter, event)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_DOCUMENT_END_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_document_end(emitter, event)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_sequence_item(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_sequence_item(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_MAPPING_FIRST_KEY_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_mapping_key(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_MAPPING_KEY_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_mapping_key(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_mapping_value(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_FLOW_MAPPING_VALUE_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_flow_mapping_value(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_sequence_item(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_sequence_item(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_mapping_key(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_MAPPING_KEY_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_mapping_key(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_mapping_value(emitter, event, true)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_BLOCK_MAPPING_VALUE_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_block_mapping_value(emitter, event, false)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_EMIT_END_STATE:
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "expected nothing after STREAM-END")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("invalid emitter state")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect STREAM-START.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_stream_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if event.typ != yaml_STREAM_START_EVENT {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "expected STREAM-START")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.encoding == yaml_ANY_ENCODING {
0000000000000000000000000000000000000000;;			emitter.encoding = event.encoding
0000000000000000000000000000000000000000;;			if emitter.encoding == yaml_ANY_ENCODING {
0000000000000000000000000000000000000000;;				emitter.encoding = yaml_UTF8_ENCODING
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.best_indent < 2 || emitter.best_indent > 9 {
0000000000000000000000000000000000000000;;			emitter.best_indent = 2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.best_width >= 0 && emitter.best_width <= emitter.best_indent*2 {
0000000000000000000000000000000000000000;;			emitter.best_width = 80
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.best_width < 0 {
0000000000000000000000000000000000000000;;			emitter.best_width = 1<<31 - 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.line_break == yaml_ANY_BREAK {
0000000000000000000000000000000000000000;;			emitter.line_break = yaml_LN_BREAK
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.indent = -1
0000000000000000000000000000000000000000;;		emitter.line = 0
0000000000000000000000000000000000000000;;		emitter.column = 0
0000000000000000000000000000000000000000;;		emitter.whitespace = true
0000000000000000000000000000000000000000;;		emitter.indention = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if emitter.encoding != yaml_UTF8_ENCODING {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_bom(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.state = yaml_EMIT_FIRST_DOCUMENT_START_STATE
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect DOCUMENT-START or STREAM-END.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_document_start(emitter *yaml_emitter_t, event *yaml_event_t, first bool) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if event.typ == yaml_DOCUMENT_START_EVENT {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if event.version_directive != nil {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_version_directive(emitter, event.version_directive) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i := 0; i < len(event.tag_directives); i++ {
0000000000000000000000000000000000000000;;				tag_directive := &event.tag_directives[i]
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_tag_directive(emitter, tag_directive) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_append_tag_directive(emitter, tag_directive, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for i := 0; i < len(default_tag_directives); i++ {
0000000000000000000000000000000000000000;;				tag_directive := &default_tag_directives[i]
0000000000000000000000000000000000000000;;				if !yaml_emitter_append_tag_directive(emitter, tag_directive, true) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			implicit := event.implicit
0000000000000000000000000000000000000000;;			if !first || emitter.canonical {
0000000000000000000000000000000000000000;;				implicit = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if emitter.open_ended && (event.version_directive != nil || len(event.tag_directives) > 0) {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte("..."), true, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if event.version_directive != nil {
0000000000000000000000000000000000000000;;				implicit = false
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte("%YAML"), true, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte("1.1"), true, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if len(event.tag_directives) > 0 {
0000000000000000000000000000000000000000;;				implicit = false
0000000000000000000000000000000000000000;;				for i := 0; i < len(event.tag_directives); i++ {
0000000000000000000000000000000000000000;;					tag_directive := &event.tag_directives[i]
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indicator(emitter, []byte("%TAG"), true, false, false) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_tag_handle(emitter, tag_directive.handle) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_tag_content(emitter, tag_directive.prefix, true) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if yaml_emitter_check_empty_document(emitter) {
0000000000000000000000000000000000000000;;				implicit = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !implicit {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte("---"), true, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if emitter.canonical {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_DOCUMENT_CONTENT_STATE
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if event.typ == yaml_STREAM_END_EVENT {
0000000000000000000000000000000000000000;;			if emitter.open_ended {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte("..."), true, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_flush(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_END_STATE
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return yaml_emitter_set_emitter_error(emitter, "expected DOCUMENT-START or STREAM-END")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect the root node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_document_content(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_DOCUMENT_END_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, true, false, false, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect DOCUMENT-END.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_document_end(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if event.typ != yaml_DOCUMENT_END_EVENT {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "expected DOCUMENT-END")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !event.implicit {
0000000000000000000000000000000000000000;;			// [Go] Allocate the slice elsewhere.
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte("..."), true, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_flush(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.state = yaml_EMIT_DOCUMENT_START_STATE
0000000000000000000000000000000000000000;;		emitter.tag_directives = emitter.tag_directives[:0]
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a flow item node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_flow_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool) bool {
0000000000000000000000000000000000000000;;		if first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{'['}, true, true, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_increase_indent(emitter, true, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.flow_level++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if event.typ == yaml_SEQUENCE_END_EVENT {
0000000000000000000000000000000000000000;;			emitter.flow_level--
0000000000000000000000000000000000000000;;			emitter.indent = emitter.indents[len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.indents = emitter.indents[:len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			if emitter.canonical && !first {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte{','}, false, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{']'}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;			emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{','}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if emitter.canonical || emitter.column > emitter.best_width {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, true, false, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a flow key node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_flow_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool) bool {
0000000000000000000000000000000000000000;;		if first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{'{'}, true, true, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_increase_indent(emitter, true, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.flow_level++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if event.typ == yaml_MAPPING_END_EVENT {
0000000000000000000000000000000000000000;;			emitter.flow_level--
0000000000000000000000000000000000000000;;			emitter.indent = emitter.indents[len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.indents = emitter.indents[:len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			if emitter.canonical && !first {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indicator(emitter, []byte{','}, false, false, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{'}'}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;			emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{','}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.canonical || emitter.column > emitter.best_width {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !emitter.canonical && yaml_emitter_check_simple_key(emitter) {
0000000000000000000000000000000000000000;;			emitter.states = append(emitter.states, yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE)
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_node(emitter, event, false, false, true, true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'?'}, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_FLOW_MAPPING_VALUE_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, false, true, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a flow value node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_flow_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool) bool {
0000000000000000000000000000000000000000;;		if simple {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{':'}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if emitter.canonical || emitter.column > emitter.best_width {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{':'}, true, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_FLOW_MAPPING_KEY_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, false, true, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a block item node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_block_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool) bool {
0000000000000000000000000000000000000000;;		if first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_increase_indent(emitter, false, emitter.mapping_context && !emitter.indention) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if event.typ == yaml_SEQUENCE_END_EVENT {
0000000000000000000000000000000000000000;;			emitter.indent = emitter.indents[len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.indents = emitter.indents[:len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;			emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'-'}, true, false, true) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, true, false, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a block key node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_block_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool) bool {
0000000000000000000000000000000000000000;;		if first {
0000000000000000000000000000000000000000;;			if !yaml_emitter_increase_indent(emitter, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if event.typ == yaml_MAPPING_END_EVENT {
0000000000000000000000000000000000000000;;			emitter.indent = emitter.indents[len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.indents = emitter.indents[:len(emitter.indents)-1]
0000000000000000000000000000000000000000;;			emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;			emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if yaml_emitter_check_simple_key(emitter) {
0000000000000000000000000000000000000000;;			emitter.states = append(emitter.states, yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE)
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_node(emitter, event, false, false, true, true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'?'}, true, false, true) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_BLOCK_MAPPING_VALUE_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, false, true, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a block value node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_block_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool) bool {
0000000000000000000000000000000000000000;;		if simple {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{':'}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{':'}, true, false, true) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.states = append(emitter.states, yaml_EMIT_BLOCK_MAPPING_KEY_STATE)
0000000000000000000000000000000000000000;;		return yaml_emitter_emit_node(emitter, event, false, false, true, false)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect a node.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_node(emitter *yaml_emitter_t, event *yaml_event_t,
0000000000000000000000000000000000000000;;		root bool, sequence bool, mapping bool, simple_key bool) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.root_context = root
0000000000000000000000000000000000000000;;		emitter.sequence_context = sequence
0000000000000000000000000000000000000000;;		emitter.mapping_context = mapping
0000000000000000000000000000000000000000;;		emitter.simple_key_context = simple_key
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch event.typ {
0000000000000000000000000000000000000000;;		case yaml_ALIAS_EVENT:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_alias(emitter, event)
0000000000000000000000000000000000000000;;		case yaml_SCALAR_EVENT:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_scalar(emitter, event)
0000000000000000000000000000000000000000;;		case yaml_SEQUENCE_START_EVENT:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_sequence_start(emitter, event)
0000000000000000000000000000000000000000;;		case yaml_MAPPING_START_EVENT:
0000000000000000000000000000000000000000;;			return yaml_emitter_emit_mapping_start(emitter, event)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter,
0000000000000000000000000000000000000000;;				"expected SCALAR, SEQUENCE-START, MAPPING-START, or ALIAS")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect ALIAS.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_alias(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_anchor(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;		emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect SCALAR.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_scalar(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_select_scalar_style(emitter, event) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_anchor(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_tag(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_increase_indent(emitter, true, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_scalar(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.indent = emitter.indents[len(emitter.indents)-1]
0000000000000000000000000000000000000000;;		emitter.indents = emitter.indents[:len(emitter.indents)-1]
0000000000000000000000000000000000000000;;		emitter.state = emitter.states[len(emitter.states)-1]
0000000000000000000000000000000000000000;;		emitter.states = emitter.states[:len(emitter.states)-1]
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect SEQUENCE-START.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_sequence_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_anchor(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_tag(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.flow_level > 0 || emitter.canonical || event.sequence_style() == yaml_FLOW_SEQUENCE_STYLE ||
0000000000000000000000000000000000000000;;			yaml_emitter_check_empty_sequence(emitter) {
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Expect MAPPING-START.
0000000000000000000000000000000000000000;;	func yaml_emitter_emit_mapping_start(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_anchor(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_process_tag(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.flow_level > 0 || emitter.canonical || event.mapping_style() == yaml_FLOW_MAPPING_STYLE ||
0000000000000000000000000000000000000000;;			yaml_emitter_check_empty_mapping(emitter) {
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_FLOW_MAPPING_FIRST_KEY_STATE
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			emitter.state = yaml_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if the document content is an empty scalar.
0000000000000000000000000000000000000000;;	func yaml_emitter_check_empty_document(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		return false // [Go] Huh?
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if the next events represent an empty sequence.
0000000000000000000000000000000000000000;;	func yaml_emitter_check_empty_sequence(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if len(emitter.events)-emitter.events_head < 2 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return emitter.events[emitter.events_head].typ == yaml_SEQUENCE_START_EVENT &&
0000000000000000000000000000000000000000;;			emitter.events[emitter.events_head+1].typ == yaml_SEQUENCE_END_EVENT
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if the next events represent an empty mapping.
0000000000000000000000000000000000000000;;	func yaml_emitter_check_empty_mapping(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if len(emitter.events)-emitter.events_head < 2 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return emitter.events[emitter.events_head].typ == yaml_MAPPING_START_EVENT &&
0000000000000000000000000000000000000000;;			emitter.events[emitter.events_head+1].typ == yaml_MAPPING_END_EVENT
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if the next node can be expressed as a simple key.
0000000000000000000000000000000000000000;;	func yaml_emitter_check_simple_key(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		length := 0
0000000000000000000000000000000000000000;;		switch emitter.events[emitter.events_head].typ {
0000000000000000000000000000000000000000;;		case yaml_ALIAS_EVENT:
0000000000000000000000000000000000000000;;			length += len(emitter.anchor_data.anchor)
0000000000000000000000000000000000000000;;		case yaml_SCALAR_EVENT:
0000000000000000000000000000000000000000;;			if emitter.scalar_data.multiline {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			length += len(emitter.anchor_data.anchor) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.handle) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.suffix) +
0000000000000000000000000000000000000000;;				len(emitter.scalar_data.value)
0000000000000000000000000000000000000000;;		case yaml_SEQUENCE_START_EVENT:
0000000000000000000000000000000000000000;;			if !yaml_emitter_check_empty_sequence(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			length += len(emitter.anchor_data.anchor) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.handle) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.suffix)
0000000000000000000000000000000000000000;;		case yaml_MAPPING_START_EVENT:
0000000000000000000000000000000000000000;;			if !yaml_emitter_check_empty_mapping(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			length += len(emitter.anchor_data.anchor) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.handle) +
0000000000000000000000000000000000000000;;				len(emitter.tag_data.suffix)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return length <= 128
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Determine an acceptable scalar style.
0000000000000000000000000000000000000000;;	func yaml_emitter_select_scalar_style(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		no_tag := len(emitter.tag_data.handle) == 0 && len(emitter.tag_data.suffix) == 0
0000000000000000000000000000000000000000;;		if no_tag && !event.implicit && !event.quoted_implicit {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "neither tag nor implicit flags are specified")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		style := event.scalar_style()
0000000000000000000000000000000000000000;;		if style == yaml_ANY_SCALAR_STYLE {
0000000000000000000000000000000000000000;;			style = yaml_PLAIN_SCALAR_STYLE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.canonical {
0000000000000000000000000000000000000000;;			style = yaml_DOUBLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if emitter.simple_key_context && emitter.scalar_data.multiline {
0000000000000000000000000000000000000000;;			style = yaml_DOUBLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if style == yaml_PLAIN_SCALAR_STYLE {
0000000000000000000000000000000000000000;;			if emitter.flow_level > 0 && !emitter.scalar_data.flow_plain_allowed ||
0000000000000000000000000000000000000000;;				emitter.flow_level == 0 && !emitter.scalar_data.block_plain_allowed {
0000000000000000000000000000000000000000;;				style = yaml_SINGLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(emitter.scalar_data.value) == 0 && (emitter.flow_level > 0 || emitter.simple_key_context) {
0000000000000000000000000000000000000000;;				style = yaml_SINGLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if no_tag && !event.implicit {
0000000000000000000000000000000000000000;;				style = yaml_SINGLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if style == yaml_SINGLE_QUOTED_SCALAR_STYLE {
0000000000000000000000000000000000000000;;			if !emitter.scalar_data.single_quoted_allowed {
0000000000000000000000000000000000000000;;				style = yaml_DOUBLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if style == yaml_LITERAL_SCALAR_STYLE || style == yaml_FOLDED_SCALAR_STYLE {
0000000000000000000000000000000000000000;;			if !emitter.scalar_data.block_allowed || emitter.flow_level > 0 || emitter.simple_key_context {
0000000000000000000000000000000000000000;;				style = yaml_DOUBLE_QUOTED_SCALAR_STYLE
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if no_tag && !event.quoted_implicit && style != yaml_PLAIN_SCALAR_STYLE {
0000000000000000000000000000000000000000;;			emitter.tag_data.handle = []byte{'!'}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.scalar_data.style = style
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write an achor.
0000000000000000000000000000000000000000;;	func yaml_emitter_process_anchor(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if emitter.anchor_data.anchor == nil {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		c := []byte{'&'}
0000000000000000000000000000000000000000;;		if emitter.anchor_data.alias {
0000000000000000000000000000000000000000;;			c[0] = '*'
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, c, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return yaml_emitter_write_anchor(emitter, emitter.anchor_data.anchor)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write a tag.
0000000000000000000000000000000000000000;;	func yaml_emitter_process_tag(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if len(emitter.tag_data.handle) == 0 && len(emitter.tag_data.suffix) == 0 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(emitter.tag_data.handle) > 0 {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_tag_handle(emitter, emitter.tag_data.handle) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(emitter.tag_data.suffix) > 0 {
0000000000000000000000000000000000000000;;				if !yaml_emitter_write_tag_content(emitter, emitter.tag_data.suffix, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// [Go] Allocate these slices elsewhere.
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte("!<"), true, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_tag_content(emitter, emitter.tag_data.suffix, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, []byte{'>'}, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write a scalar.
0000000000000000000000000000000000000000;;	func yaml_emitter_process_scalar(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		switch emitter.scalar_data.style {
0000000000000000000000000000000000000000;;		case yaml_PLAIN_SCALAR_STYLE:
0000000000000000000000000000000000000000;;			return yaml_emitter_write_plain_scalar(emitter, emitter.scalar_data.value, !emitter.simple_key_context)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_SINGLE_QUOTED_SCALAR_STYLE:
0000000000000000000000000000000000000000;;			return yaml_emitter_write_single_quoted_scalar(emitter, emitter.scalar_data.value, !emitter.simple_key_context)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_DOUBLE_QUOTED_SCALAR_STYLE:
0000000000000000000000000000000000000000;;			return yaml_emitter_write_double_quoted_scalar(emitter, emitter.scalar_data.value, !emitter.simple_key_context)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_LITERAL_SCALAR_STYLE:
0000000000000000000000000000000000000000;;			return yaml_emitter_write_literal_scalar(emitter, emitter.scalar_data.value)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_FOLDED_SCALAR_STYLE:
0000000000000000000000000000000000000000;;			return yaml_emitter_write_folded_scalar(emitter, emitter.scalar_data.value)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("unknown scalar style")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if a %YAML directive is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_version_directive(emitter *yaml_emitter_t, version_directive *yaml_version_directive_t) bool {
0000000000000000000000000000000000000000;;		if version_directive.major != 1 || version_directive.minor != 1 {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "incompatible %YAML directive")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if a %TAG directive is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_tag_directive(emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t) bool {
0000000000000000000000000000000000000000;;		handle := tag_directive.handle
0000000000000000000000000000000000000000;;		prefix := tag_directive.prefix
0000000000000000000000000000000000000000;;		if len(handle) == 0 {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "tag handle must not be empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if handle[0] != '!' {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "tag handle must start with '!'")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if handle[len(handle)-1] != '!' {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "tag handle must end with '!'")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 1; i < len(handle)-1; i += width(handle[i]) {
0000000000000000000000000000000000000000;;			if !is_alpha(handle, i) {
0000000000000000000000000000000000000000;;				return yaml_emitter_set_emitter_error(emitter, "tag handle must contain alphanumerical characters only")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(prefix) == 0 {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "tag prefix must not be empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if an anchor is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_anchor(emitter *yaml_emitter_t, anchor []byte, alias bool) bool {
0000000000000000000000000000000000000000;;		if len(anchor) == 0 {
0000000000000000000000000000000000000000;;			problem := "anchor value must not be empty"
0000000000000000000000000000000000000000;;			if alias {
0000000000000000000000000000000000000000;;				problem = "alias value must not be empty"
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, problem)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < len(anchor); i += width(anchor[i]) {
0000000000000000000000000000000000000000;;			if !is_alpha(anchor, i) {
0000000000000000000000000000000000000000;;				problem := "anchor value must contain alphanumerical characters only"
0000000000000000000000000000000000000000;;				if alias {
0000000000000000000000000000000000000000;;					problem = "alias value must contain alphanumerical characters only"
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return yaml_emitter_set_emitter_error(emitter, problem)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.anchor_data.anchor = anchor
0000000000000000000000000000000000000000;;		emitter.anchor_data.alias = alias
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if a tag is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_tag(emitter *yaml_emitter_t, tag []byte) bool {
0000000000000000000000000000000000000000;;		if len(tag) == 0 {
0000000000000000000000000000000000000000;;			return yaml_emitter_set_emitter_error(emitter, "tag value must not be empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < len(emitter.tag_directives); i++ {
0000000000000000000000000000000000000000;;			tag_directive := &emitter.tag_directives[i]
0000000000000000000000000000000000000000;;			if bytes.HasPrefix(tag, tag_directive.prefix) {
0000000000000000000000000000000000000000;;				emitter.tag_data.handle = tag_directive.handle
0000000000000000000000000000000000000000;;				emitter.tag_data.suffix = tag[len(tag_directive.prefix):]
0000000000000000000000000000000000000000;;				return true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.tag_data.suffix = tag
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if a scalar is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_scalar(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		var (
0000000000000000000000000000000000000000;;			block_indicators   = false
0000000000000000000000000000000000000000;;			flow_indicators    = false
0000000000000000000000000000000000000000;;			line_breaks        = false
0000000000000000000000000000000000000000;;			special_characters = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			leading_space  = false
0000000000000000000000000000000000000000;;			leading_break  = false
0000000000000000000000000000000000000000;;			trailing_space = false
0000000000000000000000000000000000000000;;			trailing_break = false
0000000000000000000000000000000000000000;;			break_space    = false
0000000000000000000000000000000000000000;;			space_break    = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			preceeded_by_whitespace = false
0000000000000000000000000000000000000000;;			followed_by_whitespace  = false
0000000000000000000000000000000000000000;;			previous_space          = false
0000000000000000000000000000000000000000;;			previous_break          = false
0000000000000000000000000000000000000000;;		)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.scalar_data.value = value
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(value) == 0 {
0000000000000000000000000000000000000000;;			emitter.scalar_data.multiline = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = true
0000000000000000000000000000000000000000;;			emitter.scalar_data.single_quoted_allowed = true
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_allowed = false
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(value) >= 3 && ((value[0] == '-' && value[1] == '-' && value[2] == '-') || (value[0] == '.' && value[1] == '.' && value[2] == '.')) {
0000000000000000000000000000000000000000;;			block_indicators = true
0000000000000000000000000000000000000000;;			flow_indicators = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		preceeded_by_whitespace = true
0000000000000000000000000000000000000000;;		for i, w := 0, 0; i < len(value); i += w {
0000000000000000000000000000000000000000;;			w = width(value[i])
0000000000000000000000000000000000000000;;			followed_by_whitespace = i+w >= len(value) || is_blank(value, i+w)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				switch value[i] {
0000000000000000000000000000000000000000;;				case '#', ',', '[', ']', '{', '}', '&', '*', '!', '|', '>', '\'', '"', '%', '@', '`':
0000000000000000000000000000000000000000;;					flow_indicators = true
0000000000000000000000000000000000000000;;					block_indicators = true
0000000000000000000000000000000000000000;;				case '?', ':':
0000000000000000000000000000000000000000;;					flow_indicators = true
0000000000000000000000000000000000000000;;					if followed_by_whitespace {
0000000000000000000000000000000000000000;;						block_indicators = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case '-':
0000000000000000000000000000000000000000;;					if followed_by_whitespace {
0000000000000000000000000000000000000000;;						flow_indicators = true
0000000000000000000000000000000000000000;;						block_indicators = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				switch value[i] {
0000000000000000000000000000000000000000;;				case ',', '?', '[', ']', '{', '}':
0000000000000000000000000000000000000000;;					flow_indicators = true
0000000000000000000000000000000000000000;;				case ':':
0000000000000000000000000000000000000000;;					flow_indicators = true
0000000000000000000000000000000000000000;;					if followed_by_whitespace {
0000000000000000000000000000000000000000;;						block_indicators = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				case '#':
0000000000000000000000000000000000000000;;					if preceeded_by_whitespace {
0000000000000000000000000000000000000000;;						flow_indicators = true
0000000000000000000000000000000000000000;;						block_indicators = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !is_printable(value, i) || !is_ascii(value, i) && !emitter.unicode {
0000000000000000000000000000000000000000;;				special_characters = true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if is_space(value, i) {
0000000000000000000000000000000000000000;;				if i == 0 {
0000000000000000000000000000000000000000;;					leading_space = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if i+width(value[i]) == len(value) {
0000000000000000000000000000000000000000;;					trailing_space = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if previous_break {
0000000000000000000000000000000000000000;;					break_space = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				previous_space = true
0000000000000000000000000000000000000000;;				previous_break = false
0000000000000000000000000000000000000000;;			} else if is_break(value, i) {
0000000000000000000000000000000000000000;;				line_breaks = true
0000000000000000000000000000000000000000;;				if i == 0 {
0000000000000000000000000000000000000000;;					leading_break = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if i+width(value[i]) == len(value) {
0000000000000000000000000000000000000000;;					trailing_break = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if previous_space {
0000000000000000000000000000000000000000;;					space_break = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				previous_space = false
0000000000000000000000000000000000000000;;				previous_break = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				previous_space = false
0000000000000000000000000000000000000000;;				previous_break = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// [Go]: Why 'z'? Couldn't be the end of the string as that's the loop condition.
0000000000000000000000000000000000000000;;			preceeded_by_whitespace = is_blankz(value, i)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.scalar_data.multiline = line_breaks
0000000000000000000000000000000000000000;;		emitter.scalar_data.flow_plain_allowed = true
0000000000000000000000000000000000000000;;		emitter.scalar_data.block_plain_allowed = true
0000000000000000000000000000000000000000;;		emitter.scalar_data.single_quoted_allowed = true
0000000000000000000000000000000000000000;;		emitter.scalar_data.block_allowed = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if leading_space || leading_break || trailing_space || trailing_break {
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if trailing_space {
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if break_space {
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.single_quoted_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if space_break || special_characters {
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.single_quoted_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if line_breaks {
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if flow_indicators {
0000000000000000000000000000000000000000;;			emitter.scalar_data.flow_plain_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if block_indicators {
0000000000000000000000000000000000000000;;			emitter.scalar_data.block_plain_allowed = false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Check if the event data is valid.
0000000000000000000000000000000000000000;;	func yaml_emitter_analyze_event(emitter *yaml_emitter_t, event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.anchor_data.anchor = nil
0000000000000000000000000000000000000000;;		emitter.tag_data.handle = nil
0000000000000000000000000000000000000000;;		emitter.tag_data.suffix = nil
0000000000000000000000000000000000000000;;		emitter.scalar_data.value = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch event.typ {
0000000000000000000000000000000000000000;;		case yaml_ALIAS_EVENT:
0000000000000000000000000000000000000000;;			if !yaml_emitter_analyze_anchor(emitter, event.anchor, true) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_SCALAR_EVENT:
0000000000000000000000000000000000000000;;			if len(event.anchor) > 0 {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_anchor(emitter, event.anchor, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(event.tag) > 0 && (emitter.canonical || (!event.implicit && !event.quoted_implicit)) {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_tag(emitter, event.tag) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !yaml_emitter_analyze_scalar(emitter, event.value) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_SEQUENCE_START_EVENT:
0000000000000000000000000000000000000000;;			if len(event.anchor) > 0 {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_anchor(emitter, event.anchor, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(event.tag) > 0 && (emitter.canonical || !event.implicit) {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_tag(emitter, event.tag) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		case yaml_MAPPING_START_EVENT:
0000000000000000000000000000000000000000;;			if len(event.anchor) > 0 {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_anchor(emitter, event.anchor, false) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if len(event.tag) > 0 && (emitter.canonical || !event.implicit) {
0000000000000000000000000000000000000000;;				if !yaml_emitter_analyze_tag(emitter, event.tag) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write the BOM character.
0000000000000000000000000000000000000000;;	func yaml_emitter_write_bom(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		if !flush(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		pos := emitter.buffer_pos
0000000000000000000000000000000000000000;;		emitter.buffer[pos+0] = '\xEF'
0000000000000000000000000000000000000000;;		emitter.buffer[pos+1] = '\xBB'
0000000000000000000000000000000000000000;;		emitter.buffer[pos+2] = '\xBF'
0000000000000000000000000000000000000000;;		emitter.buffer_pos += 3
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_indent(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		indent := emitter.indent
0000000000000000000000000000000000000000;;		if indent < 0 {
0000000000000000000000000000000000000000;;			indent = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !emitter.indention || emitter.column > indent || (emitter.column == indent && !emitter.whitespace) {
0000000000000000000000000000000000000000;;			if !put_break(emitter) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for emitter.column < indent {
0000000000000000000000000000000000000000;;			if !put(emitter, ' ') {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = true
0000000000000000000000000000000000000000;;		emitter.indention = true
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_indicator(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool) bool {
0000000000000000000000000000000000000000;;		if need_whitespace && !emitter.whitespace {
0000000000000000000000000000000000000000;;			if !put(emitter, ' ') {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !write_all(emitter, indicator) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = is_whitespace
0000000000000000000000000000000000000000;;		emitter.indention = (emitter.indention && is_indention)
0000000000000000000000000000000000000000;;		emitter.open_ended = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_anchor(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		if !write_all(emitter, value) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_tag_handle(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		if !emitter.whitespace {
0000000000000000000000000000000000000000;;			if !put(emitter, ' ') {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !write_all(emitter, value) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_tag_content(emitter *yaml_emitter_t, value []byte, need_whitespace bool) bool {
0000000000000000000000000000000000000000;;		if need_whitespace && !emitter.whitespace {
0000000000000000000000000000000000000000;;			if !put(emitter, ' ') {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			var must_write bool
0000000000000000000000000000000000000000;;			switch value[i] {
0000000000000000000000000000000000000000;;			case ';', '/', '?', ':', '@', '&', '=', '+', '$', ',', '_', '.', '~', '*', '\'', '(', ')', '[', ']':
0000000000000000000000000000000000000000;;				must_write = true
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				must_write = is_alpha(value, i)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if must_write {
0000000000000000000000000000000000000000;;				if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				w := width(value[i])
0000000000000000000000000000000000000000;;				for k := 0; k < w; k++ {
0000000000000000000000000000000000000000;;					octet := value[i]
0000000000000000000000000000000000000000;;					i++
0000000000000000000000000000000000000000;;					if !put(emitter, '%') {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					c := octet >> 4
0000000000000000000000000000000000000000;;					if c < 10 {
0000000000000000000000000000000000000000;;						c += '0'
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						c += 'A' - 10
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !put(emitter, c) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;					c = octet & 0x0f
0000000000000000000000000000000000000000;;					if c < 10 {
0000000000000000000000000000000000000000;;						c += '0'
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						c += 'A' - 10
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !put(emitter, c) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_plain_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool) bool {
0000000000000000000000000000000000000000;;		if !emitter.whitespace {
0000000000000000000000000000000000000000;;			if !put(emitter, ' ') {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spaces := false
0000000000000000000000000000000000000000;;		breaks := false
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			if is_space(value, i) {
0000000000000000000000000000000000000000;;				if allow_breaks && !spaces && emitter.column > emitter.best_width && !is_space(value, i+1) {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					i += width(value[i])
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				spaces = true
0000000000000000000000000000000000000000;;			} else if is_break(value, i) {
0000000000000000000000000000000000000000;;				if !breaks && value[i] == '\n' {
0000000000000000000000000000000000000000;;					if !put_break(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write_break(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = true
0000000000000000000000000000000000000000;;				breaks = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if breaks {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = false
0000000000000000000000000000000000000000;;				spaces = false
0000000000000000000000000000000000000000;;				breaks = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		if emitter.root_context {
0000000000000000000000000000000000000000;;			emitter.open_ended = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_single_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool) bool {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'\''}, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		spaces := false
0000000000000000000000000000000000000000;;		breaks := false
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			if is_space(value, i) {
0000000000000000000000000000000000000000;;				if allow_breaks && !spaces && emitter.column > emitter.best_width && i > 0 && i < len(value)-1 && !is_space(value, i+1) {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					i += width(value[i])
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				spaces = true
0000000000000000000000000000000000000000;;			} else if is_break(value, i) {
0000000000000000000000000000000000000000;;				if !breaks && value[i] == '\n' {
0000000000000000000000000000000000000000;;					if !put_break(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write_break(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = true
0000000000000000000000000000000000000000;;				breaks = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if breaks {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if value[i] == '\'' {
0000000000000000000000000000000000000000;;					if !put(emitter, '\'') {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = false
0000000000000000000000000000000000000000;;				spaces = false
0000000000000000000000000000000000000000;;				breaks = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'\''}, false, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_double_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool) bool {
0000000000000000000000000000000000000000;;		spaces := false
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'"'}, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			if !is_printable(value, i) || (!emitter.unicode && !is_ascii(value, i)) ||
0000000000000000000000000000000000000000;;				is_bom(value, i) || is_break(value, i) ||
0000000000000000000000000000000000000000;;				value[i] == '"' || value[i] == '\\' {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				octet := value[i]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var w int
0000000000000000000000000000000000000000;;				var v rune
0000000000000000000000000000000000000000;;				switch {
0000000000000000000000000000000000000000;;				case octet&0x80 == 0x00:
0000000000000000000000000000000000000000;;					w, v = 1, rune(octet&0x7F)
0000000000000000000000000000000000000000;;				case octet&0xE0 == 0xC0:
0000000000000000000000000000000000000000;;					w, v = 2, rune(octet&0x1F)
0000000000000000000000000000000000000000;;				case octet&0xF0 == 0xE0:
0000000000000000000000000000000000000000;;					w, v = 3, rune(octet&0x0F)
0000000000000000000000000000000000000000;;				case octet&0xF8 == 0xF0:
0000000000000000000000000000000000000000;;					w, v = 4, rune(octet&0x07)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				for k := 1; k < w; k++ {
0000000000000000000000000000000000000000;;					octet = value[i+k]
0000000000000000000000000000000000000000;;					v = (v << 6) + (rune(octet) & 0x3F)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				i += w
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if !put(emitter, '\\') {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				var ok bool
0000000000000000000000000000000000000000;;				switch v {
0000000000000000000000000000000000000000;;				case 0x00:
0000000000000000000000000000000000000000;;					ok = put(emitter, '0')
0000000000000000000000000000000000000000;;				case 0x07:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'a')
0000000000000000000000000000000000000000;;				case 0x08:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'b')
0000000000000000000000000000000000000000;;				case 0x09:
0000000000000000000000000000000000000000;;					ok = put(emitter, 't')
0000000000000000000000000000000000000000;;				case 0x0A:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'n')
0000000000000000000000000000000000000000;;				case 0x0b:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'v')
0000000000000000000000000000000000000000;;				case 0x0c:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'f')
0000000000000000000000000000000000000000;;				case 0x0d:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'r')
0000000000000000000000000000000000000000;;				case 0x1b:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'e')
0000000000000000000000000000000000000000;;				case 0x22:
0000000000000000000000000000000000000000;;					ok = put(emitter, '"')
0000000000000000000000000000000000000000;;				case 0x5c:
0000000000000000000000000000000000000000;;					ok = put(emitter, '\\')
0000000000000000000000000000000000000000;;				case 0x85:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'N')
0000000000000000000000000000000000000000;;				case 0xA0:
0000000000000000000000000000000000000000;;					ok = put(emitter, '_')
0000000000000000000000000000000000000000;;				case 0x2028:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'L')
0000000000000000000000000000000000000000;;				case 0x2029:
0000000000000000000000000000000000000000;;					ok = put(emitter, 'P')
0000000000000000000000000000000000000000;;				default:
0000000000000000000000000000000000000000;;					if v <= 0xFF {
0000000000000000000000000000000000000000;;						ok = put(emitter, 'x')
0000000000000000000000000000000000000000;;						w = 2
0000000000000000000000000000000000000000;;					} else if v <= 0xFFFF {
0000000000000000000000000000000000000000;;						ok = put(emitter, 'u')
0000000000000000000000000000000000000000;;						w = 4
0000000000000000000000000000000000000000;;					} else {
0000000000000000000000000000000000000000;;						ok = put(emitter, 'U')
0000000000000000000000000000000000000000;;						w = 8
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					for k := (w - 1) * 4; ok && k >= 0; k -= 4 {
0000000000000000000000000000000000000000;;						digit := byte((v >> uint(k)) & 0x0F)
0000000000000000000000000000000000000000;;						if digit < 10 {
0000000000000000000000000000000000000000;;							ok = put(emitter, digit+'0')
0000000000000000000000000000000000000000;;						} else {
0000000000000000000000000000000000000000;;							ok = put(emitter, digit+'A'-10)
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !ok {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				spaces = false
0000000000000000000000000000000000000000;;			} else if is_space(value, i) {
0000000000000000000000000000000000000000;;				if allow_breaks && !spaces && emitter.column > emitter.best_width && i > 0 && i < len(value)-1 {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if is_space(value, i+1) {
0000000000000000000000000000000000000000;;						if !put(emitter, '\\') {
0000000000000000000000000000000000000000;;							return false
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					i += width(value[i])
0000000000000000000000000000000000000000;;				} else if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				spaces = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				spaces = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'"'}, false, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.whitespace = false
0000000000000000000000000000000000000000;;		emitter.indention = false
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_block_scalar_hints(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		if is_space(value, 0) || is_break(value, 0) {
0000000000000000000000000000000000000000;;			indent_hint := []byte{'0' + byte(emitter.best_indent)}
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, indent_hint, false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		emitter.open_ended = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var chomp_hint [1]byte
0000000000000000000000000000000000000000;;		if len(value) == 0 {
0000000000000000000000000000000000000000;;			chomp_hint[0] = '-'
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			i := len(value) - 1
0000000000000000000000000000000000000000;;			for value[i]&0xC0 == 0x80 {
0000000000000000000000000000000000000000;;				i--
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !is_break(value, i) {
0000000000000000000000000000000000000000;;				chomp_hint[0] = '-'
0000000000000000000000000000000000000000;;			} else if i == 0 {
0000000000000000000000000000000000000000;;				chomp_hint[0] = '+'
0000000000000000000000000000000000000000;;				emitter.open_ended = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				i--
0000000000000000000000000000000000000000;;				for value[i]&0xC0 == 0x80 {
0000000000000000000000000000000000000000;;					i--
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if is_break(value, i) {
0000000000000000000000000000000000000000;;					chomp_hint[0] = '+'
0000000000000000000000000000000000000000;;					emitter.open_ended = true
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if chomp_hint[0] != 0 {
0000000000000000000000000000000000000000;;			if !yaml_emitter_write_indicator(emitter, chomp_hint[:], false, false, false) {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_literal_scalar(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'|'}, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_block_scalar_hints(emitter, value) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !put_break(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.indention = true
0000000000000000000000000000000000000000;;		emitter.whitespace = true
0000000000000000000000000000000000000000;;		breaks := true
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			if is_break(value, i) {
0000000000000000000000000000000000000000;;				if !write_break(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = true
0000000000000000000000000000000000000000;;				breaks = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if breaks {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = false
0000000000000000000000000000000000000000;;				breaks = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_emitter_write_folded_scalar(emitter *yaml_emitter_t, value []byte) bool {
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_indicator(emitter, []byte{'>'}, true, false, false) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !yaml_emitter_write_block_scalar_hints(emitter, value) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !put_break(emitter) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.indention = true
0000000000000000000000000000000000000000;;		emitter.whitespace = true
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		breaks := true
0000000000000000000000000000000000000000;;		leading_spaces := true
0000000000000000000000000000000000000000;;		for i := 0; i < len(value); {
0000000000000000000000000000000000000000;;			if is_break(value, i) {
0000000000000000000000000000000000000000;;				if !breaks && !leading_spaces && value[i] == '\n' {
0000000000000000000000000000000000000000;;					k := 0
0000000000000000000000000000000000000000;;					for is_break(value, k) {
0000000000000000000000000000000000000000;;						k += width(value[k])
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if !is_blankz(value, k) {
0000000000000000000000000000000000000000;;						if !put_break(emitter) {
0000000000000000000000000000000000000000;;							return false
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !write_break(emitter, value, &i) {
0000000000000000000000000000000000000000;;					return false
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = true
0000000000000000000000000000000000000000;;				breaks = true
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				if breaks {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					leading_spaces = is_blank(value, i)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				if !breaks && is_space(value, i) && !is_space(value, i+1) && emitter.column > emitter.best_width {
0000000000000000000000000000000000000000;;					if !yaml_emitter_write_indent(emitter) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					i += width(value[i])
0000000000000000000000000000000000000000;;				} else {
0000000000000000000000000000000000000000;;					if !write(emitter, value, &i) {
0000000000000000000000000000000000000000;;						return false
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				emitter.indention = false
0000000000000000000000000000000000000000;;				breaks = false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
