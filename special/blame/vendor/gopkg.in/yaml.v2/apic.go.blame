0000000000000000000000000000000000000000;;	package yaml
5187a61b412c69823a116353fb1601738e904060;Godeps/_workspace/src/gopkg.in/v2/yaml/apic.go[Godeps/_workspace/src/gopkg.in/v2/yaml/apic.go][vendor/gopkg.in/yaml.v2/apic.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func yaml_insert_token(parser *yaml_parser_t, pos int, token *yaml_token_t) {
0000000000000000000000000000000000000000;;		//fmt.Println("yaml_insert_token", "pos:", pos, "typ:", token.typ, "head:", parser.tokens_head, "len:", len(parser.tokens))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Check if we can move the queue at the beginning of the buffer.
0000000000000000000000000000000000000000;;		if parser.tokens_head > 0 && len(parser.tokens) == cap(parser.tokens) {
0000000000000000000000000000000000000000;;			if parser.tokens_head != len(parser.tokens) {
0000000000000000000000000000000000000000;;				copy(parser.tokens, parser.tokens[parser.tokens_head:])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			parser.tokens = parser.tokens[:len(parser.tokens)-parser.tokens_head]
0000000000000000000000000000000000000000;;			parser.tokens_head = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parser.tokens = append(parser.tokens, *token)
0000000000000000000000000000000000000000;;		if pos < 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		copy(parser.tokens[parser.tokens_head+pos+1:], parser.tokens[parser.tokens_head+pos:])
0000000000000000000000000000000000000000;;		parser.tokens[parser.tokens_head+pos] = *token
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a new parser object.
0000000000000000000000000000000000000000;;	func yaml_parser_initialize(parser *yaml_parser_t) bool {
0000000000000000000000000000000000000000;;		*parser = yaml_parser_t{
0000000000000000000000000000000000000000;;			raw_buffer: make([]byte, 0, input_raw_buffer_size),
0000000000000000000000000000000000000000;;			buffer:     make([]byte, 0, input_buffer_size),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroy a parser object.
0000000000000000000000000000000000000000;;	func yaml_parser_delete(parser *yaml_parser_t) {
0000000000000000000000000000000000000000;;		*parser = yaml_parser_t{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String read handler.
0000000000000000000000000000000000000000;;	func yaml_string_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		if parser.input_pos == len(parser.input) {
0000000000000000000000000000000000000000;;			return 0, io.EOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n = copy(buffer, parser.input[parser.input_pos:])
0000000000000000000000000000000000000000;;		parser.input_pos += n
0000000000000000000000000000000000000000;;		return n, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// File read handler.
0000000000000000000000000000000000000000;;	func yaml_file_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		return parser.input_file.Read(buffer)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set a string input.
0000000000000000000000000000000000000000;;	func yaml_parser_set_input_string(parser *yaml_parser_t, input []byte) {
0000000000000000000000000000000000000000;;		if parser.read_handler != nil {
0000000000000000000000000000000000000000;;			panic("must set the input source only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parser.read_handler = yaml_string_read_handler
0000000000000000000000000000000000000000;;		parser.input = input
0000000000000000000000000000000000000000;;		parser.input_pos = 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set a file input.
0000000000000000000000000000000000000000;;	func yaml_parser_set_input_file(parser *yaml_parser_t, file *os.File) {
0000000000000000000000000000000000000000;;		if parser.read_handler != nil {
0000000000000000000000000000000000000000;;			panic("must set the input source only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parser.read_handler = yaml_file_read_handler
0000000000000000000000000000000000000000;;		parser.input_file = file
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the source encoding.
0000000000000000000000000000000000000000;;	func yaml_parser_set_encoding(parser *yaml_parser_t, encoding yaml_encoding_t) {
0000000000000000000000000000000000000000;;		if parser.encoding != yaml_ANY_ENCODING {
0000000000000000000000000000000000000000;;			panic("must set the encoding only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		parser.encoding = encoding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create a new emitter object.
0000000000000000000000000000000000000000;;	func yaml_emitter_initialize(emitter *yaml_emitter_t) bool {
0000000000000000000000000000000000000000;;		*emitter = yaml_emitter_t{
0000000000000000000000000000000000000000;;			buffer:     make([]byte, output_buffer_size),
0000000000000000000000000000000000000000;;			raw_buffer: make([]byte, 0, output_raw_buffer_size),
0000000000000000000000000000000000000000;;			states:     make([]yaml_emitter_state_t, 0, initial_stack_size),
0000000000000000000000000000000000000000;;			events:     make([]yaml_event_t, 0, initial_queue_size),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroy an emitter object.
0000000000000000000000000000000000000000;;	func yaml_emitter_delete(emitter *yaml_emitter_t) {
0000000000000000000000000000000000000000;;		*emitter = yaml_emitter_t{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String write handler.
0000000000000000000000000000000000000000;;	func yaml_string_write_handler(emitter *yaml_emitter_t, buffer []byte) error {
0000000000000000000000000000000000000000;;		*emitter.output_buffer = append(*emitter.output_buffer, buffer...)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// File write handler.
0000000000000000000000000000000000000000;;	func yaml_file_write_handler(emitter *yaml_emitter_t, buffer []byte) error {
0000000000000000000000000000000000000000;;		_, err := emitter.output_file.Write(buffer)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set a string output.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_output_string(emitter *yaml_emitter_t, output_buffer *[]byte) {
0000000000000000000000000000000000000000;;		if emitter.write_handler != nil {
0000000000000000000000000000000000000000;;			panic("must set the output target only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.write_handler = yaml_string_write_handler
0000000000000000000000000000000000000000;;		emitter.output_buffer = output_buffer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set a file output.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_output_file(emitter *yaml_emitter_t, file io.Writer) {
0000000000000000000000000000000000000000;;		if emitter.write_handler != nil {
0000000000000000000000000000000000000000;;			panic("must set the output target only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.write_handler = yaml_file_write_handler
0000000000000000000000000000000000000000;;		emitter.output_file = file
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the output encoding.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_encoding(emitter *yaml_emitter_t, encoding yaml_encoding_t) {
0000000000000000000000000000000000000000;;		if emitter.encoding != yaml_ANY_ENCODING {
0000000000000000000000000000000000000000;;			panic("must set the output encoding only once")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.encoding = encoding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the canonical output style.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_canonical(emitter *yaml_emitter_t, canonical bool) {
0000000000000000000000000000000000000000;;		emitter.canonical = canonical
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//// Set the indentation increment.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_indent(emitter *yaml_emitter_t, indent int) {
0000000000000000000000000000000000000000;;		if indent < 2 || indent > 9 {
0000000000000000000000000000000000000000;;			indent = 2
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.best_indent = indent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the preferred line width.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_width(emitter *yaml_emitter_t, width int) {
0000000000000000000000000000000000000000;;		if width < 0 {
0000000000000000000000000000000000000000;;			width = -1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		emitter.best_width = width
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set if unescaped non-ASCII characters are allowed.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_unicode(emitter *yaml_emitter_t, unicode bool) {
0000000000000000000000000000000000000000;;		emitter.unicode = unicode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set the preferred line break character.
0000000000000000000000000000000000000000;;	func yaml_emitter_set_break(emitter *yaml_emitter_t, line_break yaml_break_t) {
0000000000000000000000000000000000000000;;		emitter.line_break = line_break
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Destroy a token object.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(void)
0000000000000000000000000000000000000000;;	//yaml_token_delete(yaml_token_t *token)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    assert(token);  // Non-NULL token object expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    switch (token.type)
0000000000000000000000000000000000000000;;	//    {
0000000000000000000000000000000000000000;;	//        case YAML_TAG_DIRECTIVE_TOKEN:
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.tag_directive.handle);
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.tag_directive.prefix);
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        case YAML_ALIAS_TOKEN:
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.alias.value);
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        case YAML_ANCHOR_TOKEN:
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.anchor.value);
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        case YAML_TAG_TOKEN:
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.tag.handle);
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.tag.suffix);
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        case YAML_SCALAR_TOKEN:
0000000000000000000000000000000000000000;;	//            yaml_free(token.data.scalar.value);
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        default:
0000000000000000000000000000000000000000;;	//            break;
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    memset(token, 0, sizeof(yaml_token_t));
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Check if a string is a valid UTF-8 sequence.
0000000000000000000000000000000000000000;;	// *
0000000000000000000000000000000000000000;;	// * Check 'reader.c' for more details on UTF-8 encoding.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//static int
0000000000000000000000000000000000000000;;	//yaml_check_utf8(yaml_char_t *start, size_t length)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    yaml_char_t *end = start+length;
0000000000000000000000000000000000000000;;	//    yaml_char_t *pointer = start;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    while (pointer < end) {
0000000000000000000000000000000000000000;;	//        unsigned char octet;
0000000000000000000000000000000000000000;;	//        unsigned int width;
0000000000000000000000000000000000000000;;	//        unsigned int value;
0000000000000000000000000000000000000000;;	//        size_t k;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        octet = pointer[0];
0000000000000000000000000000000000000000;;	//        width = (octet & 0x80) == 0x00 ? 1 :
0000000000000000000000000000000000000000;;	//                (octet & 0xE0) == 0xC0 ? 2 :
0000000000000000000000000000000000000000;;	//                (octet & 0xF0) == 0xE0 ? 3 :
0000000000000000000000000000000000000000;;	//                (octet & 0xF8) == 0xF0 ? 4 : 0;
0000000000000000000000000000000000000000;;	//        value = (octet & 0x80) == 0x00 ? octet & 0x7F :
0000000000000000000000000000000000000000;;	//                (octet & 0xE0) == 0xC0 ? octet & 0x1F :
0000000000000000000000000000000000000000;;	//                (octet & 0xF0) == 0xE0 ? octet & 0x0F :
0000000000000000000000000000000000000000;;	//                (octet & 0xF8) == 0xF0 ? octet & 0x07 : 0;
0000000000000000000000000000000000000000;;	//        if (!width) return 0;
0000000000000000000000000000000000000000;;	//        if (pointer+width > end) return 0;
0000000000000000000000000000000000000000;;	//        for (k = 1; k < width; k ++) {
0000000000000000000000000000000000000000;;	//            octet = pointer[k];
0000000000000000000000000000000000000000;;	//            if ((octet & 0xC0) != 0x80) return 0;
0000000000000000000000000000000000000000;;	//            value = (value << 6) + (octet & 0x3F);
0000000000000000000000000000000000000000;;	//        }
0000000000000000000000000000000000000000;;	//        if (!((width == 1) ||
0000000000000000000000000000000000000000;;	//            (width == 2 && value >= 0x80) ||
0000000000000000000000000000000000000000;;	//            (width == 3 && value >= 0x800) ||
0000000000000000000000000000000000000000;;	//            (width == 4 && value >= 0x10000))) return 0;
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//        pointer += width;
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 1;
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create STREAM-START.
0000000000000000000000000000000000000000;;	func yaml_stream_start_event_initialize(event *yaml_event_t, encoding yaml_encoding_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:      yaml_STREAM_START_EVENT,
0000000000000000000000000000000000000000;;			encoding: encoding,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create STREAM-END.
0000000000000000000000000000000000000000;;	func yaml_stream_end_event_initialize(event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ: yaml_STREAM_END_EVENT,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create DOCUMENT-START.
0000000000000000000000000000000000000000;;	func yaml_document_start_event_initialize(event *yaml_event_t, version_directive *yaml_version_directive_t,
0000000000000000000000000000000000000000;;		tag_directives []yaml_tag_directive_t, implicit bool) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:               yaml_DOCUMENT_START_EVENT,
0000000000000000000000000000000000000000;;			version_directive: version_directive,
0000000000000000000000000000000000000000;;			tag_directives:    tag_directives,
0000000000000000000000000000000000000000;;			implicit:          implicit,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create DOCUMENT-END.
0000000000000000000000000000000000000000;;	func yaml_document_end_event_initialize(event *yaml_event_t, implicit bool) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:      yaml_DOCUMENT_END_EVENT,
0000000000000000000000000000000000000000;;			implicit: implicit,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Create ALIAS.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_alias_event_initialize(event *yaml_event_t, anchor *yaml_char_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    mark yaml_mark_t = { 0, 0, 0 }
0000000000000000000000000000000000000000;;	//    anchor_copy *yaml_char_t = NULL
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(event) // Non-NULL event object is expected.
0000000000000000000000000000000000000000;;	//    assert(anchor) // Non-NULL anchor is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!yaml_check_utf8(anchor, strlen((char *)anchor))) return 0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    anchor_copy = yaml_strdup(anchor)
0000000000000000000000000000000000000000;;	//    if (!anchor_copy)
0000000000000000000000000000000000000000;;	//        return 0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    ALIAS_EVENT_INIT(*event, anchor_copy, mark, mark)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 1
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create SCALAR.
0000000000000000000000000000000000000000;;	func yaml_scalar_event_initialize(event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:             yaml_SCALAR_EVENT,
0000000000000000000000000000000000000000;;			anchor:          anchor,
0000000000000000000000000000000000000000;;			tag:             tag,
0000000000000000000000000000000000000000;;			value:           value,
0000000000000000000000000000000000000000;;			implicit:        plain_implicit,
0000000000000000000000000000000000000000;;			quoted_implicit: quoted_implicit,
0000000000000000000000000000000000000000;;			style:           yaml_style_t(style),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create SEQUENCE-START.
0000000000000000000000000000000000000000;;	func yaml_sequence_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:      yaml_SEQUENCE_START_EVENT,
0000000000000000000000000000000000000000;;			anchor:   anchor,
0000000000000000000000000000000000000000;;			tag:      tag,
0000000000000000000000000000000000000000;;			implicit: implicit,
0000000000000000000000000000000000000000;;			style:    yaml_style_t(style),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create SEQUENCE-END.
0000000000000000000000000000000000000000;;	func yaml_sequence_end_event_initialize(event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ: yaml_SEQUENCE_END_EVENT,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create MAPPING-START.
0000000000000000000000000000000000000000;;	func yaml_mapping_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ:      yaml_MAPPING_START_EVENT,
0000000000000000000000000000000000000000;;			anchor:   anchor,
0000000000000000000000000000000000000000;;			tag:      tag,
0000000000000000000000000000000000000000;;			implicit: implicit,
0000000000000000000000000000000000000000;;			style:    yaml_style_t(style),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create MAPPING-END.
0000000000000000000000000000000000000000;;	func yaml_mapping_end_event_initialize(event *yaml_event_t) bool {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{
0000000000000000000000000000000000000000;;			typ: yaml_MAPPING_END_EVENT,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroy an event object.
0000000000000000000000000000000000000000;;	func yaml_event_delete(event *yaml_event_t) {
0000000000000000000000000000000000000000;;		*event = yaml_event_t{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Create a document object.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_initialize(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        version_directive *yaml_version_directive_t,
0000000000000000000000000000000000000000;;	//        tag_directives_start *yaml_tag_directive_t,
0000000000000000000000000000000000000000;;	//        tag_directives_end *yaml_tag_directive_t,
0000000000000000000000000000000000000000;;	//        start_implicit int, end_implicit int)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        start *yaml_node_t
0000000000000000000000000000000000000000;;	//        end *yaml_node_t
0000000000000000000000000000000000000000;;	//        top *yaml_node_t
0000000000000000000000000000000000000000;;	//    } nodes = { NULL, NULL, NULL }
0000000000000000000000000000000000000000;;	//    version_directive_copy *yaml_version_directive_t = NULL
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        start *yaml_tag_directive_t
0000000000000000000000000000000000000000;;	//        end *yaml_tag_directive_t
0000000000000000000000000000000000000000;;	//        top *yaml_tag_directive_t
0000000000000000000000000000000000000000;;	//    } tag_directives_copy = { NULL, NULL, NULL }
0000000000000000000000000000000000000000;;	//    value yaml_tag_directive_t = { NULL, NULL }
0000000000000000000000000000000000000000;;	//    mark yaml_mark_t = { 0, 0, 0 }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//    assert((tag_directives_start && tag_directives_end) ||
0000000000000000000000000000000000000000;;	//            (tag_directives_start == tag_directives_end))
0000000000000000000000000000000000000000;;	//                            // Valid tag directives are expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!STACK_INIT(&context, nodes, INITIAL_STACK_SIZE)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (version_directive) {
0000000000000000000000000000000000000000;;	//        version_directive_copy = yaml_malloc(sizeof(yaml_version_directive_t))
0000000000000000000000000000000000000000;;	//        if (!version_directive_copy) goto error
0000000000000000000000000000000000000000;;	//        version_directive_copy.major = version_directive.major
0000000000000000000000000000000000000000;;	//        version_directive_copy.minor = version_directive.minor
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (tag_directives_start != tag_directives_end) {
0000000000000000000000000000000000000000;;	//        tag_directive *yaml_tag_directive_t
0000000000000000000000000000000000000000;;	//        if (!STACK_INIT(&context, tag_directives_copy, INITIAL_STACK_SIZE))
0000000000000000000000000000000000000000;;	//            goto error
0000000000000000000000000000000000000000;;	//        for (tag_directive = tag_directives_start
0000000000000000000000000000000000000000;;	//                tag_directive != tag_directives_end; tag_directive ++) {
0000000000000000000000000000000000000000;;	//            assert(tag_directive.handle)
0000000000000000000000000000000000000000;;	//            assert(tag_directive.prefix)
0000000000000000000000000000000000000000;;	//            if (!yaml_check_utf8(tag_directive.handle,
0000000000000000000000000000000000000000;;	//                        strlen((char *)tag_directive.handle)))
0000000000000000000000000000000000000000;;	//                goto error
0000000000000000000000000000000000000000;;	//            if (!yaml_check_utf8(tag_directive.prefix,
0000000000000000000000000000000000000000;;	//                        strlen((char *)tag_directive.prefix)))
0000000000000000000000000000000000000000;;	//                goto error
0000000000000000000000000000000000000000;;	//            value.handle = yaml_strdup(tag_directive.handle)
0000000000000000000000000000000000000000;;	//            value.prefix = yaml_strdup(tag_directive.prefix)
0000000000000000000000000000000000000000;;	//            if (!value.handle || !value.prefix) goto error
0000000000000000000000000000000000000000;;	//            if (!PUSH(&context, tag_directives_copy, value))
0000000000000000000000000000000000000000;;	//                goto error
0000000000000000000000000000000000000000;;	//            value.handle = NULL
0000000000000000000000000000000000000000;;	//            value.prefix = NULL
0000000000000000000000000000000000000000;;	//        }
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    DOCUMENT_INIT(*document, nodes.start, nodes.end, version_directive_copy,
0000000000000000000000000000000000000000;;	//            tag_directives_copy.start, tag_directives_copy.top,
0000000000000000000000000000000000000000;;	//            start_implicit, end_implicit, mark, mark)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 1
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//error:
0000000000000000000000000000000000000000;;	//    STACK_DEL(&context, nodes)
0000000000000000000000000000000000000000;;	//    yaml_free(version_directive_copy)
0000000000000000000000000000000000000000;;	//    while (!STACK_EMPTY(&context, tag_directives_copy)) {
0000000000000000000000000000000000000000;;	//        value yaml_tag_directive_t = POP(&context, tag_directives_copy)
0000000000000000000000000000000000000000;;	//        yaml_free(value.handle)
0000000000000000000000000000000000000000;;	//        yaml_free(value.prefix)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//    STACK_DEL(&context, tag_directives_copy)
0000000000000000000000000000000000000000;;	//    yaml_free(value.handle)
0000000000000000000000000000000000000000;;	//    yaml_free(value.prefix)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 0
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Destroy a document object.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(void)
0000000000000000000000000000000000000000;;	//yaml_document_delete(document *yaml_document_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//    tag_directive *yaml_tag_directive_t
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    context.error = YAML_NO_ERROR // Eliminate a compliler warning.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    while (!STACK_EMPTY(&context, document.nodes)) {
0000000000000000000000000000000000000000;;	//        node yaml_node_t = POP(&context, document.nodes)
0000000000000000000000000000000000000000;;	//        yaml_free(node.tag)
0000000000000000000000000000000000000000;;	//        switch (node.type) {
0000000000000000000000000000000000000000;;	//            case YAML_SCALAR_NODE:
0000000000000000000000000000000000000000;;	//                yaml_free(node.data.scalar.value)
0000000000000000000000000000000000000000;;	//                break
0000000000000000000000000000000000000000;;	//            case YAML_SEQUENCE_NODE:
0000000000000000000000000000000000000000;;	//                STACK_DEL(&context, node.data.sequence.items)
0000000000000000000000000000000000000000;;	//                break
0000000000000000000000000000000000000000;;	//            case YAML_MAPPING_NODE:
0000000000000000000000000000000000000000;;	//                STACK_DEL(&context, node.data.mapping.pairs)
0000000000000000000000000000000000000000;;	//                break
0000000000000000000000000000000000000000;;	//            default:
0000000000000000000000000000000000000000;;	//                assert(0) // Should not happen.
0000000000000000000000000000000000000000;;	//        }
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//    STACK_DEL(&context, document.nodes)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    yaml_free(document.version_directive)
0000000000000000000000000000000000000000;;	//    for (tag_directive = document.tag_directives.start
0000000000000000000000000000000000000000;;	//            tag_directive != document.tag_directives.end
0000000000000000000000000000000000000000;;	//            tag_directive++) {
0000000000000000000000000000000000000000;;	//        yaml_free(tag_directive.handle)
0000000000000000000000000000000000000000;;	//        yaml_free(tag_directive.prefix)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//    yaml_free(document.tag_directives.start)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    memset(document, 0, sizeof(yaml_document_t))
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///**
0000000000000000000000000000000000000000;;	// * Get a document node.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(yaml_node_t *)
0000000000000000000000000000000000000000;;	//yaml_document_get_node(document *yaml_document_t, index int)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (index > 0 && document.nodes.start + index <= document.nodes.top) {
0000000000000000000000000000000000000000;;	//        return document.nodes.start + index - 1
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//    return NULL
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///**
0000000000000000000000000000000000000000;;	// * Get the root object.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(yaml_node_t *)
0000000000000000000000000000000000000000;;	//yaml_document_get_root_node(document *yaml_document_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (document.nodes.top != document.nodes.start) {
0000000000000000000000000000000000000000;;	//        return document.nodes.start
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//    return NULL
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Add a scalar node to a document.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_add_scalar(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        tag *yaml_char_t, value *yaml_char_t, length int,
0000000000000000000000000000000000000000;;	//        style yaml_scalar_style_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//    mark yaml_mark_t = { 0, 0, 0 }
0000000000000000000000000000000000000000;;	//    tag_copy *yaml_char_t = NULL
0000000000000000000000000000000000000000;;	//    value_copy *yaml_char_t = NULL
0000000000000000000000000000000000000000;;	//    node yaml_node_t
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//    assert(value) // Non-NULL value is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!tag) {
0000000000000000000000000000000000000000;;	//        tag = (yaml_char_t *)YAML_DEFAULT_SCALAR_TAG
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error
0000000000000000000000000000000000000000;;	//    tag_copy = yaml_strdup(tag)
0000000000000000000000000000000000000000;;	//    if (!tag_copy) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (length < 0) {
0000000000000000000000000000000000000000;;	//        length = strlen((char *)value)
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!yaml_check_utf8(value, length)) goto error
0000000000000000000000000000000000000000;;	//    value_copy = yaml_malloc(length+1)
0000000000000000000000000000000000000000;;	//    if (!value_copy) goto error
0000000000000000000000000000000000000000;;	//    memcpy(value_copy, value, length)
0000000000000000000000000000000000000000;;	//    value_copy[length] = '\0'
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    SCALAR_NODE_INIT(node, tag_copy, value_copy, length, style, mark, mark)
0000000000000000000000000000000000000000;;	//    if (!PUSH(&context, document.nodes, node)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return document.nodes.top - document.nodes.start
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//error:
0000000000000000000000000000000000000000;;	//    yaml_free(tag_copy)
0000000000000000000000000000000000000000;;	//    yaml_free(value_copy)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 0
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Add a sequence node to a document.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_add_sequence(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        tag *yaml_char_t, style yaml_sequence_style_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//    mark yaml_mark_t = { 0, 0, 0 }
0000000000000000000000000000000000000000;;	//    tag_copy *yaml_char_t = NULL
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        start *yaml_node_item_t
0000000000000000000000000000000000000000;;	//        end *yaml_node_item_t
0000000000000000000000000000000000000000;;	//        top *yaml_node_item_t
0000000000000000000000000000000000000000;;	//    } items = { NULL, NULL, NULL }
0000000000000000000000000000000000000000;;	//    node yaml_node_t
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!tag) {
0000000000000000000000000000000000000000;;	//        tag = (yaml_char_t *)YAML_DEFAULT_SEQUENCE_TAG
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error
0000000000000000000000000000000000000000;;	//    tag_copy = yaml_strdup(tag)
0000000000000000000000000000000000000000;;	//    if (!tag_copy) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!STACK_INIT(&context, items, INITIAL_STACK_SIZE)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    SEQUENCE_NODE_INIT(node, tag_copy, items.start, items.end,
0000000000000000000000000000000000000000;;	//            style, mark, mark)
0000000000000000000000000000000000000000;;	//    if (!PUSH(&context, document.nodes, node)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return document.nodes.top - document.nodes.start
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//error:
0000000000000000000000000000000000000000;;	//    STACK_DEL(&context, items)
0000000000000000000000000000000000000000;;	//    yaml_free(tag_copy)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 0
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Add a mapping node to a document.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_add_mapping(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        tag *yaml_char_t, style yaml_mapping_style_t)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//    mark yaml_mark_t = { 0, 0, 0 }
0000000000000000000000000000000000000000;;	//    tag_copy *yaml_char_t = NULL
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        start *yaml_node_pair_t
0000000000000000000000000000000000000000;;	//        end *yaml_node_pair_t
0000000000000000000000000000000000000000;;	//        top *yaml_node_pair_t
0000000000000000000000000000000000000000;;	//    } pairs = { NULL, NULL, NULL }
0000000000000000000000000000000000000000;;	//    node yaml_node_t
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document object is expected.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!tag) {
0000000000000000000000000000000000000000;;	//        tag = (yaml_char_t *)YAML_DEFAULT_MAPPING_TAG
0000000000000000000000000000000000000000;;	//    }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!yaml_check_utf8(tag, strlen((char *)tag))) goto error
0000000000000000000000000000000000000000;;	//    tag_copy = yaml_strdup(tag)
0000000000000000000000000000000000000000;;	//    if (!tag_copy) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!STACK_INIT(&context, pairs, INITIAL_STACK_SIZE)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    MAPPING_NODE_INIT(node, tag_copy, pairs.start, pairs.end,
0000000000000000000000000000000000000000;;	//            style, mark, mark)
0000000000000000000000000000000000000000;;	//    if (!PUSH(&context, document.nodes, node)) goto error
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return document.nodes.top - document.nodes.start
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//error:
0000000000000000000000000000000000000000;;	//    STACK_DEL(&context, pairs)
0000000000000000000000000000000000000000;;	//    yaml_free(tag_copy)
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 0
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Append an item to a sequence node.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_append_sequence_item(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        sequence int, item int)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document is required.
0000000000000000000000000000000000000000;;	//    assert(sequence > 0
0000000000000000000000000000000000000000;;	//            && document.nodes.start + sequence <= document.nodes.top)
0000000000000000000000000000000000000000;;	//                            // Valid sequence id is required.
0000000000000000000000000000000000000000;;	//    assert(document.nodes.start[sequence-1].type == YAML_SEQUENCE_NODE)
0000000000000000000000000000000000000000;;	//                            // A sequence node is required.
0000000000000000000000000000000000000000;;	//    assert(item > 0 && document.nodes.start + item <= document.nodes.top)
0000000000000000000000000000000000000000;;	//                            // Valid item id is required.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!PUSH(&context,
0000000000000000000000000000000000000000;;	//                document.nodes.start[sequence-1].data.sequence.items, item))
0000000000000000000000000000000000000000;;	//        return 0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 1
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	///*
0000000000000000000000000000000000000000;;	// * Append a pair of a key and a value to a mapping node.
0000000000000000000000000000000000000000;;	// */
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//YAML_DECLARE(int)
0000000000000000000000000000000000000000;;	//yaml_document_append_mapping_pair(document *yaml_document_t,
0000000000000000000000000000000000000000;;	//        mapping int, key int, value int)
0000000000000000000000000000000000000000;;	//{
0000000000000000000000000000000000000000;;	//    struct {
0000000000000000000000000000000000000000;;	//        error yaml_error_type_t
0000000000000000000000000000000000000000;;	//    } context
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    pair yaml_node_pair_t
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    assert(document) // Non-NULL document is required.
0000000000000000000000000000000000000000;;	//    assert(mapping > 0
0000000000000000000000000000000000000000;;	//            && document.nodes.start + mapping <= document.nodes.top)
0000000000000000000000000000000000000000;;	//                            // Valid mapping id is required.
0000000000000000000000000000000000000000;;	//    assert(document.nodes.start[mapping-1].type == YAML_MAPPING_NODE)
0000000000000000000000000000000000000000;;	//                            // A mapping node is required.
0000000000000000000000000000000000000000;;	//    assert(key > 0 && document.nodes.start + key <= document.nodes.top)
0000000000000000000000000000000000000000;;	//                            // Valid key id is required.
0000000000000000000000000000000000000000;;	//    assert(value > 0 && document.nodes.start + value <= document.nodes.top)
0000000000000000000000000000000000000000;;	//                            // Valid value id is required.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    pair.key = key
0000000000000000000000000000000000000000;;	//    pair.value = value
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    if (!PUSH(&context,
0000000000000000000000000000000000000000;;	//                document.nodes.start[mapping-1].data.mapping.pairs, pair))
0000000000000000000000000000000000000000;;	//        return 0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    return 1
0000000000000000000000000000000000000000;;	//}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
