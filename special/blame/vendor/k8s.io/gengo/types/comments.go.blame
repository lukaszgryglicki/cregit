0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package types contains go type information, packaged in a way that makes
0000000000000000000000000000000000000000;;	// auto-generation convenient, whether by template or straight go functions.
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractCommentTags parses comments for lines of the form:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   'marker' + "key=value".
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Values are optional; "" is the default.  A tag can be specified more than
0000000000000000000000000000000000000000;;	// one time and all values are returned.  If the resulting map has an entry for
0000000000000000000000000000000000000000;;	// a key, the value (a slice) is guaranteed to have at least 1 element.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example: if you pass "+" for 'marker', and the following lines are in
0000000000000000000000000000000000000000;;	// the comments:
0000000000000000000000000000000000000000;;	//   +foo=value1
0000000000000000000000000000000000000000;;	//   +bar
0000000000000000000000000000000000000000;;	//   +foo=value2
0000000000000000000000000000000000000000;;	//   +baz="qux"
0000000000000000000000000000000000000000;;	// Then this function will return:
0000000000000000000000000000000000000000;;	//   map[string][]string{"foo":{"value1, "value2"}, "bar": {""}, "baz": {"qux"}}
0000000000000000000000000000000000000000;;	func ExtractCommentTags(marker string, lines []string) map[string][]string {
0000000000000000000000000000000000000000;;		out := map[string][]string{}
0000000000000000000000000000000000000000;;		for _, line := range lines {
0000000000000000000000000000000000000000;;			line = strings.Trim(line, " ")
0000000000000000000000000000000000000000;;			if len(line) == 0 {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !strings.HasPrefix(line, marker) {
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			// TODO: we could support multiple values per key if we split on spaces
0000000000000000000000000000000000000000;;			kv := strings.SplitN(line[len(marker):], "=", 2)
0000000000000000000000000000000000000000;;			if len(kv) == 2 {
0000000000000000000000000000000000000000;;				out[kv[0]] = append(out[kv[0]], kv[1])
0000000000000000000000000000000000000000;;			} else if len(kv) == 1 {
0000000000000000000000000000000000000000;;				out[kv[0]] = append(out[kv[0]], "")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return out
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExtractSingleBoolCommentTag parses comments for lines of the form:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   'marker' + "key=value1"
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the tag is not found, the default value is returned.  Values are asserted
0000000000000000000000000000000000000000;;	// to be boolean ("true" or "false"), and any other value will cause an error
0000000000000000000000000000000000000000;;	// to be returned.  If the key has multiple values, the first one will be used.
0000000000000000000000000000000000000000;;	func ExtractSingleBoolCommentTag(marker string, key string, defaultVal bool, lines []string) (bool, error) {
0000000000000000000000000000000000000000;;		values := ExtractCommentTags(marker, lines)[key]
0000000000000000000000000000000000000000;;		if values == nil {
0000000000000000000000000000000000000000;;			return defaultVal, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if values[0] == "true" {
0000000000000000000000000000000000000000;;			return true, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if values[0] == "false" {
0000000000000000000000000000000000000000;;			return false, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false, fmt.Errorf("tag value for %q is not boolean: %q", key, values[0])
0000000000000000000000000000000000000000;;	}
