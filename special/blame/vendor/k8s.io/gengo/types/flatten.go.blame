0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FlattenMembers recursively takes any embedded members and puts them in the
0000000000000000000000000000000000000000;;	// top level, correctly hiding them if the top level hides them. There must not
0000000000000000000000000000000000000000;;	// be a cycle-- that implies infinite members.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is useful for e.g. computing all the valid keys in a json struct,
0000000000000000000000000000000000000000;;	// properly considering any configuration of embedded structs.
0000000000000000000000000000000000000000;;	func FlattenMembers(m []Member) []Member {
0000000000000000000000000000000000000000;;		embedded := []Member{}
0000000000000000000000000000000000000000;;		normal := []Member{}
0000000000000000000000000000000000000000;;		type nameInfo struct {
0000000000000000000000000000000000000000;;			top bool
0000000000000000000000000000000000000000;;			i   int
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		names := map[string]nameInfo{}
0000000000000000000000000000000000000000;;		for i := range m {
0000000000000000000000000000000000000000;;			if m[i].Embedded && m[i].Type.Kind == Struct {
0000000000000000000000000000000000000000;;				embedded = append(embedded, m[i])
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				normal = append(normal, m[i])
0000000000000000000000000000000000000000;;				names[m[i].Name] = nameInfo{true, len(normal) - 1}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i := range embedded {
0000000000000000000000000000000000000000;;			for _, e := range FlattenMembers(embedded[i].Type.Members) {
0000000000000000000000000000000000000000;;				if info, found := names[e.Name]; found {
0000000000000000000000000000000000000000;;					if info.top {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					if n := normal[info.i]; n.Name == e.Name && n.Type == e.Type {
0000000000000000000000000000000000000000;;						continue
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;					panic("conflicting members")
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				normal = append(normal, e)
0000000000000000000000000000000000000000;;				names[e.Name] = nameInfo{false, len(normal) - 1}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return normal
0000000000000000000000000000000000000000;;	}
