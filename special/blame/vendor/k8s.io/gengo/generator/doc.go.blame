0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package generator defines an interface for code generators to implement.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// To use this package, you'll implement the "Package" and "Generator"
0000000000000000000000000000000000000000;;	// interfaces; you'll call NewContext to load up the types you want to work
0000000000000000000000000000000000000000;;	// with, and then you'll call one or more of the Execute methods. See the
0000000000000000000000000000000000000000;;	// interface definitions for explanations. All output will have gofmt called on
0000000000000000000000000000000000000000;;	// it automatically, so you do not need to worry about generating correct
0000000000000000000000000000000000000000;;	// indentation.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This package also exposes SnippetWriter. SnippetWriter reduces to a minimum
0000000000000000000000000000000000000000;;	// the boilerplate involved in setting up a template from go's text/template
0000000000000000000000000000000000000000;;	// package. Additionally, all naming systems in the Context will be added as
0000000000000000000000000000000000000000;;	// functions to the parsed template, so that they can be called directly from
0000000000000000000000000000000000000000;;	// your templates!
0000000000000000000000000000000000000000;;	package generator
