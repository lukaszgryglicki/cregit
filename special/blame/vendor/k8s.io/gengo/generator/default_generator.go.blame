0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GolangFileType = "golang"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultGen implements a do-nothing Generator.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It can be used to implement static content files.
0000000000000000000000000000000000000000;;	type DefaultGen struct {
0000000000000000000000000000000000000000;;		// OptionalName, if present, will be used for the generator's name, and
0000000000000000000000000000000000000000;;		// the filename (with ".go" appended).
0000000000000000000000000000000000000000;;		OptionalName string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OptionalBody, if present, will be used as the return from the "Init"
0000000000000000000000000000000000000000;;		// method. This causes it to be static content for the entire file if
0000000000000000000000000000000000000000;;		// no other generator touches the file.
0000000000000000000000000000000000000000;;		OptionalBody []byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d DefaultGen) Name() string                                        { return d.OptionalName }
0000000000000000000000000000000000000000;;	func (d DefaultGen) Filter(*Context, *types.Type) bool                   { return true }
0000000000000000000000000000000000000000;;	func (d DefaultGen) Namers(*Context) namer.NameSystems                   { return nil }
0000000000000000000000000000000000000000;;	func (d DefaultGen) Imports(*Context) []string                           { return []string{} }
0000000000000000000000000000000000000000;;	func (d DefaultGen) PackageVars(*Context) []string                       { return []string{} }
0000000000000000000000000000000000000000;;	func (d DefaultGen) PackageConsts(*Context) []string                     { return []string{} }
0000000000000000000000000000000000000000;;	func (d DefaultGen) GenerateType(*Context, *types.Type, io.Writer) error { return nil }
0000000000000000000000000000000000000000;;	func (d DefaultGen) Filename() string                                    { return d.OptionalName + ".go" }
0000000000000000000000000000000000000000;;	func (d DefaultGen) FileType() string                                    { return GolangFileType }
0000000000000000000000000000000000000000;;	func (d DefaultGen) Finalize(*Context, io.Writer) error                  { return nil }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d DefaultGen) Init(c *Context, w io.Writer) error {
0000000000000000000000000000000000000000;;		_, err := w.Write(d.OptionalBody)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		_ = Generator(DefaultGen{})
0000000000000000000000000000000000000000;;	)
