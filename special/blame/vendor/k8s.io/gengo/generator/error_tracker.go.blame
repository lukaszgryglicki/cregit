0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ErrorTracker tracks errors to the underlying writer, so that you can ignore
0000000000000000000000000000000000000000;;	// them until you're ready to return.
0000000000000000000000000000000000000000;;	type ErrorTracker struct {
0000000000000000000000000000000000000000;;		io.Writer
0000000000000000000000000000000000000000;;		err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewErrorTracker makes a new error tracker; note that it implements io.Writer.
0000000000000000000000000000000000000000;;	func NewErrorTracker(w io.Writer) *ErrorTracker {
0000000000000000000000000000000000000000;;		return &ErrorTracker{Writer: w}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write intercepts calls to Write.
0000000000000000000000000000000000000000;;	func (et *ErrorTracker) Write(p []byte) (n int, err error) {
0000000000000000000000000000000000000000;;		if et.err != nil {
0000000000000000000000000000000000000000;;			return 0, et.err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		n, err = et.Writer.Write(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			et.err = err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error returns nil if no error has occurred, otherwise it returns the error.
0000000000000000000000000000000000000000;;	func (et *ErrorTracker) Error() error {
0000000000000000000000000000000000000000;;		return et.err
0000000000000000000000000000000000000000;;	}
