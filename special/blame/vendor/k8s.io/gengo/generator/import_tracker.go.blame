0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/namer"
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewImportTracker(typesToAdd ...*types.Type) namer.ImportTracker {
0000000000000000000000000000000000000000;;		tracker := namer.NewDefaultImportTracker(types.Name{})
0000000000000000000000000000000000000000;;		tracker.IsInvalidType = func(*types.Type) bool { return false }
0000000000000000000000000000000000000000;;		tracker.LocalName = func(name types.Name) string { return golangTrackerLocalName(&tracker, name) }
0000000000000000000000000000000000000000;;		tracker.PrintImport = func(path, name string) string { return name + " \"" + path + "\"" }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		tracker.AddTypes(typesToAdd...)
0000000000000000000000000000000000000000;;		return &tracker
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func golangTrackerLocalName(tracker namer.ImportTracker, t types.Name) string {
0000000000000000000000000000000000000000;;		path := t.Package
0000000000000000000000000000000000000000;;		dirs := strings.Split(path, string(filepath.Separator))
0000000000000000000000000000000000000000;;		for n := len(dirs) - 1; n >= 0; n-- {
0000000000000000000000000000000000000000;;			// TODO: bikeshed about whether it's more readable to have an
0000000000000000000000000000000000000000;;			// _, something else, or nothing between directory names.
0000000000000000000000000000000000000000;;			name := strings.Join(dirs[n:], "_")
0000000000000000000000000000000000000000;;			// These characters commonly appear in import paths for go
0000000000000000000000000000000000000000;;			// packages, but aren't legal go names. So we'll sanitize.
0000000000000000000000000000000000000000;;			name = strings.Replace(name, ".", "_", -1)
0000000000000000000000000000000000000000;;			name = strings.Replace(name, "-", "_", -1)
0000000000000000000000000000000000000000;;			if _, found := tracker.PathOf(name); found {
0000000000000000000000000000000000000000;;				// This name collides with some other package
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return name
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		panic("can't find import for " + path)
0000000000000000000000000000000000000000;;	}
