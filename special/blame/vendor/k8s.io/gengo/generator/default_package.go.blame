0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultPackage contains a default implementation of Package.
0000000000000000000000000000000000000000;;	type DefaultPackage struct {
0000000000000000000000000000000000000000;;		// Short name of package, used in the "package xxxx" line.
0000000000000000000000000000000000000000;;		PackageName string
0000000000000000000000000000000000000000;;		// Import path of the package, and the location on disk of the package.
0000000000000000000000000000000000000000;;		PackagePath string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Emitted at the top of every file.
0000000000000000000000000000000000000000;;		HeaderText []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Emitted only for a "doc.go" file; appended to the HeaderText for
0000000000000000000000000000000000000000;;		// that file.
0000000000000000000000000000000000000000;;		PackageDocumentation []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// If non-nil, will be called on "Generators"; otherwise, the static
0000000000000000000000000000000000000000;;		// list will be used. So you should set only one of these two fields.
0000000000000000000000000000000000000000;;		GeneratorFunc func(*Context) []Generator
0000000000000000000000000000000000000000;;		GeneratorList []Generator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Optional; filters the types exposed to the generators.
0000000000000000000000000000000000000000;;		FilterFunc func(*Context, *types.Type) bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DefaultPackage) Name() string { return d.PackageName }
0000000000000000000000000000000000000000;;	func (d *DefaultPackage) Path() string { return d.PackagePath }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DefaultPackage) Filter(c *Context, t *types.Type) bool {
0000000000000000000000000000000000000000;;		if d.FilterFunc != nil {
0000000000000000000000000000000000000000;;			return d.FilterFunc(c, t)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DefaultPackage) Generators(c *Context) []Generator {
0000000000000000000000000000000000000000;;		if d.GeneratorFunc != nil {
0000000000000000000000000000000000000000;;			return d.GeneratorFunc(c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d.GeneratorList
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *DefaultPackage) Header(filename string) []byte {
0000000000000000000000000000000000000000;;		if filename == "doc.go" {
0000000000000000000000000000000000000000;;			return append(d.HeaderText, d.PackageDocumentation...)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return d.HeaderText
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		_ = Package(&DefaultPackage{})
0000000000000000000000000000000000000000;;	)
