0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package namer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Orderer produces an ordering of types given a Namer.
0000000000000000000000000000000000000000;;	type Orderer struct {
0000000000000000000000000000000000000000;;		Namer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrderUniverse assigns a name to every type in the Universe, including Types,
0000000000000000000000000000000000000000;;	// Functions and Variables, and returns a list sorted by those names.
0000000000000000000000000000000000000000;;	func (o *Orderer) OrderUniverse(u types.Universe) []*types.Type {
0000000000000000000000000000000000000000;;		list := tList{
0000000000000000000000000000000000000000;;			namer: o.Namer,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, p := range u {
0000000000000000000000000000000000000000;;			for _, t := range p.Types {
0000000000000000000000000000000000000000;;				list.types = append(list.types, t)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, f := range p.Functions {
0000000000000000000000000000000000000000;;				list.types = append(list.types, f)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			for _, v := range p.Variables {
0000000000000000000000000000000000000000;;				list.types = append(list.types, v)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(list)
0000000000000000000000000000000000000000;;		return list.types
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrderTypes assigns a name to every type, and returns a list sorted by those
0000000000000000000000000000000000000000;;	// names.
0000000000000000000000000000000000000000;;	func (o *Orderer) OrderTypes(typeList []*types.Type) []*types.Type {
0000000000000000000000000000000000000000;;		list := tList{
0000000000000000000000000000000000000000;;			namer: o.Namer,
0000000000000000000000000000000000000000;;			types: typeList,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sort.Sort(list)
0000000000000000000000000000000000000000;;		return list.types
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type tList struct {
0000000000000000000000000000000000000000;;		namer Namer
0000000000000000000000000000000000000000;;		types []*types.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t tList) Len() int           { return len(t.types) }
0000000000000000000000000000000000000000;;	func (t tList) Less(i, j int) bool { return t.namer.Name(t.types[i]) < t.namer.Name(t.types[j]) }
0000000000000000000000000000000000000000;;	func (t tList) Swap(i, j int)      { t.types[i], t.types[j] = t.types[j], t.types[i] }
