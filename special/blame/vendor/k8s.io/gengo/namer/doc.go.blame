0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Package namer has support for making different type naming systems.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is because sometimes you want to refer to the literal type, sometimes
0000000000000000000000000000000000000000;;	// you want to make a name for the thing you're generating, and you want to
0000000000000000000000000000000000000000;;	// make the name based on the type. For example, if you have `type foo string`,
0000000000000000000000000000000000000000;;	// you want to be able to generate something like `func FooPrinter(f *foo) {
0000000000000000000000000000000000000000;;	// Print(string(*f)) }`; that is, you want to refer to a public name, a literal
0000000000000000000000000000000000000000;;	// name, and the underlying literal name.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This package supports the idea of a "Namer" and a set of "NameSystems" to
0000000000000000000000000000000000000000;;	// support these use cases.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Additionally, a "RawNamer" can optionally keep track of what needs to be
0000000000000000000000000000000000000000;;	// imported.
0000000000000000000000000000000000000000;;	package namer
