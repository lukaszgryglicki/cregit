0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright 2015 The Kubernetes Authors.
6547a7ca1fd679ace4f46c3b3c758abe031852fd;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package namer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"k8s.io/gengo/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type pluralNamer struct {
0000000000000000000000000000000000000000;;		// key is the case-sensitive type name, value is the case-insensitive
0000000000000000000000000000000000000000;;		// intended output.
0000000000000000000000000000000000000000;;		exceptions map[string]string
0000000000000000000000000000000000000000;;		finalize   func(string) string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPublicPluralNamer returns a namer that returns the plural form of the input
0000000000000000000000000000000000000000;;	// type's name, starting with a uppercase letter.
0000000000000000000000000000000000000000;;	func NewPublicPluralNamer(exceptions map[string]string) *pluralNamer {
0000000000000000000000000000000000000000;;		return &pluralNamer{exceptions, IC}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewPrivatePluralNamer returns a namer that returns the plural form of the input
0000000000000000000000000000000000000000;;	// type's name, starting with a lowercase letter.
0000000000000000000000000000000000000000;;	func NewPrivatePluralNamer(exceptions map[string]string) *pluralNamer {
0000000000000000000000000000000000000000;;		return &pluralNamer{exceptions, IL}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewAllLowercasePluralNamer returns a namer that returns the plural form of the input
0000000000000000000000000000000000000000;;	// type's name, with all letters in lowercase.
0000000000000000000000000000000000000000;;	func NewAllLowercasePluralNamer(exceptions map[string]string) *pluralNamer {
0000000000000000000000000000000000000000;;		return &pluralNamer{exceptions, strings.ToLower}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name returns the plural form of the type's name. If the type's name is found
0000000000000000000000000000000000000000;;	// in the exceptions map, the map value is returned.
0000000000000000000000000000000000000000;;	func (r *pluralNamer) Name(t *types.Type) string {
0000000000000000000000000000000000000000;;		singular := t.Name.Name
0000000000000000000000000000000000000000;;		var plural string
0000000000000000000000000000000000000000;;		var ok bool
0000000000000000000000000000000000000000;;		if plural, ok = r.exceptions[singular]; ok {
0000000000000000000000000000000000000000;;			return r.finalize(plural)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch string(singular[len(singular)-1]) {
0000000000000000000000000000000000000000;;		case "s", "x":
0000000000000000000000000000000000000000;;			plural = singular + "es"
0000000000000000000000000000000000000000;;		case "y":
0000000000000000000000000000000000000000;;			plural = singular[:len(singular)-1] + "ies"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			plural = singular + "s"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return r.finalize(plural)
0000000000000000000000000000000000000000;;	}
