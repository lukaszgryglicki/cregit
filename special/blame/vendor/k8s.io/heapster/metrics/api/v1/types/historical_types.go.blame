0000000000000000000000000000000000000000;;	// Copyright 2016 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
56fa44be278680bcd758a99ffbc5cb2c7de9f1b2;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricValue is either a floating point value or an unsigned integer value
0000000000000000000000000000000000000000;;	type MetricValue struct {
0000000000000000000000000000000000000000;;		IntValue   *int64   `json:"intValue,omitempty"`
0000000000000000000000000000000000000000;;		FloatValue *float64 `json:"floatValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricAggregationBucket holds information about various aggregations across a single bucket of time
0000000000000000000000000000000000000000;;	type MetricAggregationBucket struct {
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		Count     *uint64   `json:"count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Average *MetricValue `json:"average,omitempty"`
0000000000000000000000000000000000000000;;		Maximum *MetricValue `json:"maximum,omitempty"`
0000000000000000000000000000000000000000;;		Minimum *MetricValue `json:"minimum,omitempty"`
0000000000000000000000000000000000000000;;		Median  *MetricValue `json:"median,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Percentiles map[string]MetricValue `json:"percentiles,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricAggregationResult holds a series of MetricAggregationBuckets of a particular size
0000000000000000000000000000000000000000;;	type MetricAggregationResult struct {
0000000000000000000000000000000000000000;;		Buckets    []MetricAggregationBucket `json:"buckets"`
0000000000000000000000000000000000000000;;		BucketSize time.Duration             `json:"bucketSize"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricAggregationResultList is a list of MetricAggregationResults, each for a different object
0000000000000000000000000000000000000000;;	type MetricAggregationResultList struct {
0000000000000000000000000000000000000000;;		Items []MetricAggregationResult `json:"items"`
0000000000000000000000000000000000000000;;	}
