0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ac6a6712e324e081a28c987e6ff3b9650b998a01;Godeps/_workspace/src/k8s.io/heapster/api/v1/types/model_types.go[Godeps/_workspace/src/k8s.io/heapster/api/v1/types/model_types.go][vendor/k8s.io/heapster/metrics/api/v1/types/model_types.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricPoint struct {
0000000000000000000000000000000000000000;;		Timestamp time.Time `json:"timestamp"`
0000000000000000000000000000000000000000;;		Value     uint64    `json:"value"`
0000000000000000000000000000000000000000;;		// This will be populated only for float custom metrics. In that case
0000000000000000000000000000000000000000;;		// "value" will be zero. This is a temporary hack. Overall most likely
0000000000000000000000000000000000000000;;		// we will need a new api versioned in the similar way as K8S api.
0000000000000000000000000000000000000000;;		FloatValue *float64 `json:"floatValue,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricResult struct {
0000000000000000000000000000000000000000;;		Metrics         []MetricPoint `json:"metrics"`
0000000000000000000000000000000000000000;;		LatestTimestamp time.Time     `json:"latestTimestamp"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricResultList struct {
0000000000000000000000000000000000000000;;		Items []MetricResult `json:"items"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Stats struct {
0000000000000000000000000000000000000000;;		Average     uint64 `json:"average"`
0000000000000000000000000000000000000000;;		NinetyFifth uint64 `json:"percentile"`
0000000000000000000000000000000000000000;;		Max         uint64 `json:"max"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalStatBundle struct {
0000000000000000000000000000000000000000;;		Minute Stats `json:"minute"`
0000000000000000000000000000000000000000;;		Hour   Stats `json:"hour"`
0000000000000000000000000000000000000000;;		Day    Stats `json:"day"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsResponse struct {
0000000000000000000000000000000000000000;;		// Uptime is in seconds
0000000000000000000000000000000000000000;;		Uptime uint64                        `json:"uptime"`
0000000000000000000000000000000000000000;;		Stats  map[string]ExternalStatBundle `json:"stats"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// An ExternalEntityListEntry represents the latest CPU and Memory usage of a model entity.
0000000000000000000000000000000000000000;;	// A model entity can be a Pod, a Container, a Namespace or a Node.
0000000000000000000000000000000000000000;;	type ExternalEntityListEntry struct {
0000000000000000000000000000000000000000;;		Name     string `json:"name"`
0000000000000000000000000000000000000000;;		CPUUsage uint64 `json:"cpuUsage"`
0000000000000000000000000000000000000000;;		MemUsage uint64 `json:"memUsage"`
0000000000000000000000000000000000000000;;	}
