0000000000000000000000000000000000000000;;	// Copyright 2015 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
ac6a6712e324e081a28c987e6ff3b9650b998a01;Godeps/_workspace/src/k8s.io/heapster/api/v1/types/types.go[Godeps/_workspace/src/k8s.io/heapster/api/v1/types/types.go][vendor/k8s.io/heapster/metrics/api/v1/types/types.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timeseries represents a set of metrics for the same target object
0000000000000000000000000000000000000000;;	// (typically a container).
0000000000000000000000000000000000000000;;	type Timeseries struct {
0000000000000000000000000000000000000000;;		// Map of metric names to their values.
0000000000000000000000000000000000000000;;		Metrics map[string][]Point `json:"metrics"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Common labels for all metrics.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Point represent a metric value.
0000000000000000000000000000000000000000;;	type Point struct {
0000000000000000000000000000000000000000;;		// The start and end time for which this data is representative.
0000000000000000000000000000000000000000;;		Start time.Time `json:"start"`
0000000000000000000000000000000000000000;;		End   time.Time `json:"end"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels specific to this data point.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The value of the metric.
0000000000000000000000000000000000000000;;		Value interface{} `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeseriesSchema represents all the metrics and labels.
0000000000000000000000000000000000000000;;	type TimeseriesSchema struct {
0000000000000000000000000000000000000000;;		// All the metrics handled by heapster.
0000000000000000000000000000000000000000;;		Metrics []MetricDescriptor `json:"metrics,omitempty"`
0000000000000000000000000000000000000000;;		// Labels that are common to all metrics.
0000000000000000000000000000000000000000;;		CommonLabels []LabelDescriptor `json:"common_labels,omitempty"`
0000000000000000000000000000000000000000;;		// Labels that are present only for containers in pods.
0000000000000000000000000000000000000000;;		// A container metric belongs to a pod is "pod_name" label is set.
0000000000000000000000000000000000000000;;		PodLabels []LabelDescriptor `json:"pod_labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// To maintain stable api for GKE.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDescriptor struct {
0000000000000000000000000000000000000000;;		// The unique name of the metric.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description of the metric.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Descriptor of the labels specific to this metric.
0000000000000000000000000000000000000000;;		Labels []LabelDescriptor `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type and value of metric data.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The type of value returned as part of this metric.
0000000000000000000000000000000000000000;;		ValueType string `json:"value_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// The units of the value returned as part of this metric.
0000000000000000000000000000000000000000;;		Units string `json:"units,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LabelDescriptor struct {
0000000000000000000000000000000000000000;;		// Key to use for the label.
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description of the label.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
