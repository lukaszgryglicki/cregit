0000000000000000000000000000000000000000;;	// +build go1.7
a0c6d1f6525fb38e26fc8c9217073cf57b989161;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2016, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package credentials
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/tls"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cloneTLSConfig returns a shallow clone of the exported
0000000000000000000000000000000000000000;;	// fields of cfg, ignoring the unexported sync.Once, which
0000000000000000000000000000000000000000;;	// contains a mutex and must not be copied.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If cfg is nil, a new zero tls.Config is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// TODO replace this function with official clone function.
0000000000000000000000000000000000000000;;	func cloneTLSConfig(cfg *tls.Config) *tls.Config {
0000000000000000000000000000000000000000;;		if cfg == nil {
0000000000000000000000000000000000000000;;			return &tls.Config{}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &tls.Config{
0000000000000000000000000000000000000000;;			Rand:                        cfg.Rand,
0000000000000000000000000000000000000000;;			Time:                        cfg.Time,
0000000000000000000000000000000000000000;;			Certificates:                cfg.Certificates,
0000000000000000000000000000000000000000;;			NameToCertificate:           cfg.NameToCertificate,
0000000000000000000000000000000000000000;;			GetCertificate:              cfg.GetCertificate,
0000000000000000000000000000000000000000;;			RootCAs:                     cfg.RootCAs,
0000000000000000000000000000000000000000;;			NextProtos:                  cfg.NextProtos,
0000000000000000000000000000000000000000;;			ServerName:                  cfg.ServerName,
0000000000000000000000000000000000000000;;			ClientAuth:                  cfg.ClientAuth,
0000000000000000000000000000000000000000;;			ClientCAs:                   cfg.ClientCAs,
0000000000000000000000000000000000000000;;			InsecureSkipVerify:          cfg.InsecureSkipVerify,
0000000000000000000000000000000000000000;;			CipherSuites:                cfg.CipherSuites,
0000000000000000000000000000000000000000;;			PreferServerCipherSuites:    cfg.PreferServerCipherSuites,
0000000000000000000000000000000000000000;;			SessionTicketsDisabled:      cfg.SessionTicketsDisabled,
0000000000000000000000000000000000000000;;			SessionTicketKey:            cfg.SessionTicketKey,
0000000000000000000000000000000000000000;;			ClientSessionCache:          cfg.ClientSessionCache,
0000000000000000000000000000000000000000;;			MinVersion:                  cfg.MinVersion,
0000000000000000000000000000000000000000;;			MaxVersion:                  cfg.MaxVersion,
0000000000000000000000000000000000000000;;			CurvePreferences:            cfg.CurvePreferences,
0000000000000000000000000000000000000000;;			DynamicRecordSizingDisabled: cfg.DynamicRecordSizingDisabled,
0000000000000000000000000000000000000000;;			Renegotiation:               cfg.Renegotiation,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
