0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2016, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
885071b7d07344044421ffe2fd90c1bcd1ee9812;;	
0000000000000000000000000000000000000000;;	package grpc
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryInvoker is called by UnaryClientInterceptor to complete RPCs.
0000000000000000000000000000000000000000;;	type UnaryInvoker func(ctx context.Context, method string, req, reply interface{}, cc *ClientConn, opts ...CallOption) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryClientInterceptor intercepts the execution of a unary RPC on the client. inovker is the handler to complete the RPC
0000000000000000000000000000000000000000;;	// and it is the responsibility of the interceptor to call it.
0000000000000000000000000000000000000000;;	// This is the EXPERIMENTAL API.
0000000000000000000000000000000000000000;;	type UnaryClientInterceptor func(ctx context.Context, method string, req, reply interface{}, cc *ClientConn, invoker UnaryInvoker, opts ...CallOption) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Streamer is called by StreamClientInterceptor to create a ClientStream.
0000000000000000000000000000000000000000;;	type Streamer func(ctx context.Context, desc *StreamDesc, cc *ClientConn, method string, opts ...CallOption) (ClientStream, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamClientInterceptor intercepts the creation of ClientStream. It may return a custom ClientStream to intercept all I/O
0000000000000000000000000000000000000000;;	// operations. streamer is the handlder to create a ClientStream and it is the responsibility of the interceptor to call it.
0000000000000000000000000000000000000000;;	// This is the EXPERIMENTAL API.
0000000000000000000000000000000000000000;;	type StreamClientInterceptor func(ctx context.Context, desc *StreamDesc, cc *ClientConn, method string, streamer Streamer, opts ...CallOption) (ClientStream, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryServerInfo consists of various information about a unary RPC on
0000000000000000000000000000000000000000;;	// server side. All per-rpc information may be mutated by the interceptor.
0000000000000000000000000000000000000000;;	type UnaryServerInfo struct {
0000000000000000000000000000000000000000;;		// Server is the service implementation the user provides. This is read-only.
0000000000000000000000000000000000000000;;		Server interface{}
0000000000000000000000000000000000000000;;		// FullMethod is the full RPC method string, i.e., /package.service/method.
0000000000000000000000000000000000000000;;		FullMethod string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryHandler defines the handler invoked by UnaryServerInterceptor to complete the normal
0000000000000000000000000000000000000000;;	// execution of a unary RPC.
0000000000000000000000000000000000000000;;	type UnaryHandler func(ctx context.Context, req interface{}) (interface{}, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnaryServerInterceptor provides a hook to intercept the execution of a unary RPC on the server. info
0000000000000000000000000000000000000000;;	// contains all the information of this RPC the interceptor can operate on. And handler is the wrapper
0000000000000000000000000000000000000000;;	// of the service method implementation. It is the responsibility of the interceptor to invoke handler
0000000000000000000000000000000000000000;;	// to complete the RPC.
0000000000000000000000000000000000000000;;	type UnaryServerInterceptor func(ctx context.Context, req interface{}, info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamServerInfo consists of various information about a streaming RPC on
0000000000000000000000000000000000000000;;	// server side. All per-rpc information may be mutated by the interceptor.
0000000000000000000000000000000000000000;;	type StreamServerInfo struct {
0000000000000000000000000000000000000000;;		// FullMethod is the full RPC method string, i.e., /package.service/method.
0000000000000000000000000000000000000000;;		FullMethod string
0000000000000000000000000000000000000000;;		// IsClientStream indicates whether the RPC is a client streaming RPC.
0000000000000000000000000000000000000000;;		IsClientStream bool
0000000000000000000000000000000000000000;;		// IsServerStream indicates whether the RPC is a server streaming RPC.
0000000000000000000000000000000000000000;;		IsServerStream bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StreamServerInterceptor provides a hook to intercept the execution of a streaming RPC on the server.
0000000000000000000000000000000000000000;;	// info contains all the information of this RPC the interceptor can operate on. And handler is the
0000000000000000000000000000000000000000;;	// service method implementation. It is the responsibility of the interceptor to invoke handler to
0000000000000000000000000000000000000000;;	// complete the RPC.
0000000000000000000000000000000000000000;;	type StreamServerInterceptor func(srv interface{}, ss ServerStream, info *StreamServerInfo, handler StreamHandler) error
