0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2014, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/google.golang.org/grpc/codes/codes.go[Godeps/_workspace/src/google.golang.org/grpc/codes/codes.go][vendor/google.golang.org/grpc/codes/codes.go];	
0000000000000000000000000000000000000000;;	// Package codes defines the canonical error codes used by gRPC. It is
0000000000000000000000000000000000000000;;	// consistent across various languages.
0000000000000000000000000000000000000000;;	package codes
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// A Code is an unsigned 32-bit error code as defined in the gRPC spec.
0000000000000000000000000000000000000000;;	type Code uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//go:generate stringer -type=Code
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// OK is returned on success.
0000000000000000000000000000000000000000;;		OK Code = 0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Canceled indicates the operation was cancelled (typically by the caller).
0000000000000000000000000000000000000000;;		Canceled Code = 1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unknown error.  An example of where this error may be returned is
0000000000000000000000000000000000000000;;		// if a Status value received from another address space belongs to
0000000000000000000000000000000000000000;;		// an error-space that is not known in this address space.  Also
0000000000000000000000000000000000000000;;		// errors raised by APIs that do not return enough error information
0000000000000000000000000000000000000000;;		// may be converted to this error.
0000000000000000000000000000000000000000;;		Unknown Code = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InvalidArgument indicates client specified an invalid argument.
0000000000000000000000000000000000000000;;		// Note that this differs from FailedPrecondition. It indicates arguments
0000000000000000000000000000000000000000;;		// that are problematic regardless of the state of the system
0000000000000000000000000000000000000000;;		// (e.g., a malformed file name).
0000000000000000000000000000000000000000;;		InvalidArgument Code = 3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DeadlineExceeded means operation expired before completion.
0000000000000000000000000000000000000000;;		// For operations that change the state of the system, this error may be
0000000000000000000000000000000000000000;;		// returned even if the operation has completed successfully. For
0000000000000000000000000000000000000000;;		// example, a successful response from a server could have been delayed
0000000000000000000000000000000000000000;;		// long enough for the deadline to expire.
0000000000000000000000000000000000000000;;		DeadlineExceeded Code = 4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NotFound means some requested entity (e.g., file or directory) was
0000000000000000000000000000000000000000;;		// not found.
0000000000000000000000000000000000000000;;		NotFound Code = 5
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AlreadyExists means an attempt to create an entity failed because one
0000000000000000000000000000000000000000;;		// already exists.
0000000000000000000000000000000000000000;;		AlreadyExists Code = 6
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PermissionDenied indicates the caller does not have permission to
0000000000000000000000000000000000000000;;		// execute the specified operation. It must not be used for rejections
0000000000000000000000000000000000000000;;		// caused by exhausting some resource (use ResourceExhausted
0000000000000000000000000000000000000000;;		// instead for those errors).  It must not be
0000000000000000000000000000000000000000;;		// used if the caller cannot be identified (use Unauthenticated
0000000000000000000000000000000000000000;;		// instead for those errors).
0000000000000000000000000000000000000000;;		PermissionDenied Code = 7
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unauthenticated indicates the request does not have valid
0000000000000000000000000000000000000000;;		// authentication credentials for the operation.
0000000000000000000000000000000000000000;;		Unauthenticated Code = 16
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceExhausted indicates some resource has been exhausted, perhaps
0000000000000000000000000000000000000000;;		// a per-user quota, or perhaps the entire file system is out of space.
0000000000000000000000000000000000000000;;		ResourceExhausted Code = 8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FailedPrecondition indicates operation was rejected because the
0000000000000000000000000000000000000000;;		// system is not in a state required for the operation's execution.
0000000000000000000000000000000000000000;;		// For example, directory to be deleted may be non-empty, an rmdir
0000000000000000000000000000000000000000;;		// operation is applied to a non-directory, etc.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// A litmus test that may help a service implementor in deciding
0000000000000000000000000000000000000000;;		// between FailedPrecondition, Aborted, and Unavailable:
0000000000000000000000000000000000000000;;		//  (a) Use Unavailable if the client can retry just the failing call.
0000000000000000000000000000000000000000;;		//  (b) Use Aborted if the client should retry at a higher-level
0000000000000000000000000000000000000000;;		//      (e.g., restarting a read-modify-write sequence).
0000000000000000000000000000000000000000;;		//  (c) Use FailedPrecondition if the client should not retry until
0000000000000000000000000000000000000000;;		//      the system state has been explicitly fixed.  E.g., if an "rmdir"
0000000000000000000000000000000000000000;;		//      fails because the directory is non-empty, FailedPrecondition
0000000000000000000000000000000000000000;;		//      should be returned since the client should not retry unless
0000000000000000000000000000000000000000;;		//      they have first fixed up the directory by deleting files from it.
0000000000000000000000000000000000000000;;		//  (d) Use FailedPrecondition if the client performs conditional
0000000000000000000000000000000000000000;;		//      REST Get/Update/Delete on a resource and the resource on the
0000000000000000000000000000000000000000;;		//      server does not match the condition. E.g., conflicting
0000000000000000000000000000000000000000;;		//      read-modify-write on the same resource.
0000000000000000000000000000000000000000;;		FailedPrecondition Code = 9
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Aborted indicates the operation was aborted, typically due to a
0000000000000000000000000000000000000000;;		// concurrency issue like sequencer check failures, transaction aborts,
0000000000000000000000000000000000000000;;		// etc.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// See litmus test above for deciding between FailedPrecondition,
0000000000000000000000000000000000000000;;		// Aborted, and Unavailable.
0000000000000000000000000000000000000000;;		Aborted Code = 10
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OutOfRange means operation was attempted past the valid range.
0000000000000000000000000000000000000000;;		// E.g., seeking or reading past end of file.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Unlike InvalidArgument, this error indicates a problem that may
0000000000000000000000000000000000000000;;		// be fixed if the system state changes. For example, a 32-bit file
0000000000000000000000000000000000000000;;		// system will generate InvalidArgument if asked to read at an
0000000000000000000000000000000000000000;;		// offset that is not in the range [0,2^32-1], but it will generate
0000000000000000000000000000000000000000;;		// OutOfRange if asked to read from an offset past the current
0000000000000000000000000000000000000000;;		// file size.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// There is a fair bit of overlap between FailedPrecondition and
0000000000000000000000000000000000000000;;		// OutOfRange.  We recommend using OutOfRange (the more specific
0000000000000000000000000000000000000000;;		// error) when it applies so that callers who are iterating through
0000000000000000000000000000000000000000;;		// a space can easily look for an OutOfRange error to detect when
0000000000000000000000000000000000000000;;		// they are done.
0000000000000000000000000000000000000000;;		OutOfRange Code = 11
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unimplemented indicates operation is not implemented or not
0000000000000000000000000000000000000000;;		// supported/enabled in this service.
0000000000000000000000000000000000000000;;		Unimplemented Code = 12
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Internal errors.  Means some invariants expected by underlying
0000000000000000000000000000000000000000;;		// system has been broken.  If you see one of these errors,
0000000000000000000000000000000000000000;;		// something is very broken.
0000000000000000000000000000000000000000;;		Internal Code = 13
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unavailable indicates the service is currently unavailable.
0000000000000000000000000000000000000000;;		// This is a most likely a transient condition and may be corrected
0000000000000000000000000000000000000000;;		// by retrying with a backoff.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// See litmus test above for deciding between FailedPrecondition,
0000000000000000000000000000000000000000;;		// Aborted, and Unavailable.
0000000000000000000000000000000000000000;;		Unavailable Code = 14
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DataLoss indicates unrecoverable data loss or corruption.
0000000000000000000000000000000000000000;;		DataLoss Code = 15
0000000000000000000000000000000000000000;;	)
