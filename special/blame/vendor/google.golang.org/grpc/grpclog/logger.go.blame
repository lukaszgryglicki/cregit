0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2015, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/google.golang.org/grpc/grpclog/logger.go[Godeps/_workspace/src/google.golang.org/grpc/grpclog/logger.go][vendor/google.golang.org/grpc/grpclog/logger.go];	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package grpclog defines logging for grpc.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package grpclog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Use golang's standard logger by default.
0000000000000000000000000000000000000000;;	// Access is not mutex-protected: do not modify except in init()
0000000000000000000000000000000000000000;;	// functions.
0000000000000000000000000000000000000000;;	var logger Logger = log.New(os.Stderr, "", log.LstdFlags)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Logger mimics golang's standard Logger as an interface.
0000000000000000000000000000000000000000;;	type Logger interface {
0000000000000000000000000000000000000000;;		Fatal(args ...interface{})
0000000000000000000000000000000000000000;;		Fatalf(format string, args ...interface{})
0000000000000000000000000000000000000000;;		Fatalln(args ...interface{})
0000000000000000000000000000000000000000;;		Print(args ...interface{})
0000000000000000000000000000000000000000;;		Printf(format string, args ...interface{})
0000000000000000000000000000000000000000;;		Println(args ...interface{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLogger sets the logger that is used in grpc. Call only from
0000000000000000000000000000000000000000;;	// init() functions.
0000000000000000000000000000000000000000;;	func SetLogger(l Logger) {
0000000000000000000000000000000000000000;;		logger = l
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fatal is equivalent to Print() followed by a call to os.Exit() with a non-zero exit code.
0000000000000000000000000000000000000000;;	func Fatal(args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Fatal(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fatalf is equivalent to Printf() followed by a call to os.Exit() with a non-zero exit code.
0000000000000000000000000000000000000000;;	func Fatalf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Fatalf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fatalln is equivalent to Println() followed by a call to os.Exit()) with a non-zero exit code.
0000000000000000000000000000000000000000;;	func Fatalln(args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Fatalln(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Print prints to the logger. Arguments are handled in the manner of fmt.Print.
0000000000000000000000000000000000000000;;	func Print(args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Print(args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Printf prints to the logger. Arguments are handled in the manner of fmt.Printf.
0000000000000000000000000000000000000000;;	func Printf(format string, args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Printf(format, args...)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Println prints to the logger. Arguments are handled in the manner of fmt.Println.
0000000000000000000000000000000000000000;;	func Println(args ...interface{}) {
0000000000000000000000000000000000000000;;		logger.Println(args...)
0000000000000000000000000000000000000000;;	}
