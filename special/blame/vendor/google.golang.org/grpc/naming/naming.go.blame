0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2014, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
6cf8b80e5da3322f98ca221bde5f9ff5eb4fa392;Godeps/_workspace/src/google.golang.org/grpc/naming/naming.go[Godeps/_workspace/src/google.golang.org/grpc/naming/naming.go][vendor/google.golang.org/grpc/naming/naming.go];	
0000000000000000000000000000000000000000;;	// Package naming defines the naming API and related data structures for gRPC.
0000000000000000000000000000000000000000;;	// The interface is EXPERIMENTAL and may be suject to change.
0000000000000000000000000000000000000000;;	package naming
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation defines the corresponding operations for a name resolution change.
0000000000000000000000000000000000000000;;	type Operation uint8
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Add indicates a new address is added.
0000000000000000000000000000000000000000;;		Add Operation = iota
0000000000000000000000000000000000000000;;		// Delete indicates an exisiting address is deleted.
0000000000000000000000000000000000000000;;		Delete
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update defines a name resolution update. Notice that it is not valid having both
0000000000000000000000000000000000000000;;	// empty string Addr and nil Metadata in an Update.
0000000000000000000000000000000000000000;;	type Update struct {
0000000000000000000000000000000000000000;;		// Op indicates the operation of the update.
0000000000000000000000000000000000000000;;		Op Operation
0000000000000000000000000000000000000000;;		// Addr is the updated address. It is empty string if there is no address update.
0000000000000000000000000000000000000000;;		Addr string
0000000000000000000000000000000000000000;;		// Metadata is the updated metadata. It is nil if there is no metadata update.
0000000000000000000000000000000000000000;;		// Metadata is not required for a custom naming implementation.
0000000000000000000000000000000000000000;;		Metadata interface{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Resolver creates a Watcher for a target to track its resolution changes.
0000000000000000000000000000000000000000;;	type Resolver interface {
0000000000000000000000000000000000000000;;		// Resolve creates a Watcher for target.
0000000000000000000000000000000000000000;;		Resolve(target string) (Watcher, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Watcher watches for the updates on the specified target.
0000000000000000000000000000000000000000;;	type Watcher interface {
0000000000000000000000000000000000000000;;		// Next blocks until an update or error happens. It may return one or more
0000000000000000000000000000000000000000;;		// updates. The first call should get the full set of the results. It should
0000000000000000000000000000000000000000;;		// return an error if and only if Watcher cannot recover.
0000000000000000000000000000000000000000;;		Next() ([]*Update, error)
0000000000000000000000000000000000000000;;		// Close closes the Watcher.
0000000000000000000000000000000000000000;;		Close()
0000000000000000000000000000000000000000;;	}
