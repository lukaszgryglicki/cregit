0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Copyright 2014, Google Inc.
0000000000000000000000000000000000000000;;	 * All rights reserved.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * Redistribution and use in source and binary forms, with or without
0000000000000000000000000000000000000000;;	 * modification, are permitted provided that the following conditions are
0000000000000000000000000000000000000000;;	 * met:
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 *     * Redistributions of source code must retain the above copyright
0000000000000000000000000000000000000000;;	 * notice, this list of conditions and the following disclaimer.
0000000000000000000000000000000000000000;;	 *     * Redistributions in binary form must reproduce the above
0000000000000000000000000000000000000000;;	 * copyright notice, this list of conditions and the following disclaimer
0000000000000000000000000000000000000000;;	 * in the documentation and/or other materials provided with the
0000000000000000000000000000000000000000;;	 * distribution.
0000000000000000000000000000000000000000;;	 *     * Neither the name of Google Inc. nor the names of its
0000000000000000000000000000000000000000;;	 * contributors may be used to endorse or promote products derived from
0000000000000000000000000000000000000000;;	 * this software without specific prior written permission.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
0000000000000000000000000000000000000000;;	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
0000000000000000000000000000000000000000;;	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
0000000000000000000000000000000000000000;;	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
0000000000000000000000000000000000000000;;	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
0000000000000000000000000000000000000000;;	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
0000000000000000000000000000000000000000;;	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
0000000000000000000000000000000000000000;;	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
0000000000000000000000000000000000000000;;	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
0000000000000000000000000000000000000000;;	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
0000000000000000000000000000000000000000;;	 *
0000000000000000000000000000000000000000;;	 */
5da4772d7eee0df4a5bf872fd32f72643fc2e5c9;Godeps/_workspace/src/google.golang.org/grpc/transport/control.go[Godeps/_workspace/src/google.golang.org/grpc/transport/control.go][vendor/google.golang.org/grpc/transport/control.go];	
0000000000000000000000000000000000000000;;	package transport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/http2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// The default value of flow control window size in HTTP2 spec.
0000000000000000000000000000000000000000;;		defaultWindowSize = 65535
0000000000000000000000000000000000000000;;		// The initial window size for flow control.
0000000000000000000000000000000000000000;;		initialWindowSize     = defaultWindowSize      // for an RPC
0000000000000000000000000000000000000000;;		initialConnWindowSize = defaultWindowSize * 16 // for a connection
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// The following defines various control items which could flow through
0000000000000000000000000000000000000000;;	// the control buffer of transport. They represent different aspects of
0000000000000000000000000000000000000000;;	// control tasks, e.g., flow control, settings, streaming resetting, etc.
0000000000000000000000000000000000000000;;	type windowUpdate struct {
0000000000000000000000000000000000000000;;		streamID  uint32
0000000000000000000000000000000000000000;;		increment uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*windowUpdate) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type settings struct {
0000000000000000000000000000000000000000;;		ack bool
0000000000000000000000000000000000000000;;		ss  []http2.Setting
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*settings) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type resetStream struct {
0000000000000000000000000000000000000000;;		streamID uint32
0000000000000000000000000000000000000000;;		code     http2.ErrCode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*resetStream) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type goAway struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*goAway) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type flushIO struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*flushIO) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ping struct {
0000000000000000000000000000000000000000;;		ack  bool
0000000000000000000000000000000000000000;;		data [8]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (*ping) item() {}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// quotaPool is a pool which accumulates the quota and sends it to acquire()
0000000000000000000000000000000000000000;;	// when it is available.
0000000000000000000000000000000000000000;;	type quotaPool struct {
0000000000000000000000000000000000000000;;		c chan int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mu    sync.Mutex
0000000000000000000000000000000000000000;;		quota int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// newQuotaPool creates a quotaPool which has quota q available to consume.
0000000000000000000000000000000000000000;;	func newQuotaPool(q int) *quotaPool {
0000000000000000000000000000000000000000;;		qb := &quotaPool{
0000000000000000000000000000000000000000;;			c: make(chan int, 1),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if q > 0 {
0000000000000000000000000000000000000000;;			qb.c <- q
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			qb.quota = q
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return qb
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// add adds n to the available quota and tries to send it on acquire.
0000000000000000000000000000000000000000;;	func (qb *quotaPool) add(n int) {
0000000000000000000000000000000000000000;;		qb.mu.Lock()
0000000000000000000000000000000000000000;;		defer qb.mu.Unlock()
0000000000000000000000000000000000000000;;		qb.quota += n
0000000000000000000000000000000000000000;;		if qb.quota <= 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case qb.c <- qb.quota:
0000000000000000000000000000000000000000;;			qb.quota = 0
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// cancel cancels the pending quota sent on acquire, if any.
0000000000000000000000000000000000000000;;	func (qb *quotaPool) cancel() {
0000000000000000000000000000000000000000;;		qb.mu.Lock()
0000000000000000000000000000000000000000;;		defer qb.mu.Unlock()
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case n := <-qb.c:
0000000000000000000000000000000000000000;;			qb.quota += n
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// reset cancels the pending quota sent on acquired, incremented by v and sends
0000000000000000000000000000000000000000;;	// it back on acquire.
0000000000000000000000000000000000000000;;	func (qb *quotaPool) reset(v int) {
0000000000000000000000000000000000000000;;		qb.mu.Lock()
0000000000000000000000000000000000000000;;		defer qb.mu.Unlock()
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case n := <-qb.c:
0000000000000000000000000000000000000000;;			qb.quota += n
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		qb.quota += v
0000000000000000000000000000000000000000;;		if qb.quota <= 0 {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		select {
0000000000000000000000000000000000000000;;		case qb.c <- qb.quota:
0000000000000000000000000000000000000000;;			qb.quota = 0
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// acquire returns the channel on which available quota amounts are sent.
0000000000000000000000000000000000000000;;	func (qb *quotaPool) acquire() <-chan int {
0000000000000000000000000000000000000000;;		return qb.c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// inFlow deals with inbound flow control
0000000000000000000000000000000000000000;;	type inFlow struct {
0000000000000000000000000000000000000000;;		// The inbound flow control limit for pending data.
0000000000000000000000000000000000000000;;		limit uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mu sync.Mutex
0000000000000000000000000000000000000000;;		// pendingData is the overall data which have been received but not been
0000000000000000000000000000000000000000;;		// consumed by applications.
0000000000000000000000000000000000000000;;		pendingData uint32
0000000000000000000000000000000000000000;;		// The amount of data the application has consumed but grpc has not sent
0000000000000000000000000000000000000000;;		// window update for them. Used to reduce window update frequency.
0000000000000000000000000000000000000000;;		pendingUpdate uint32
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// onData is invoked when some data frame is received. It updates pendingData.
0000000000000000000000000000000000000000;;	func (f *inFlow) onData(n uint32) error {
0000000000000000000000000000000000000000;;		f.mu.Lock()
0000000000000000000000000000000000000000;;		defer f.mu.Unlock()
0000000000000000000000000000000000000000;;		f.pendingData += n
0000000000000000000000000000000000000000;;		if f.pendingData+f.pendingUpdate > f.limit {
0000000000000000000000000000000000000000;;			return fmt.Errorf("received %d-bytes data exceeding the limit %d bytes", f.pendingData+f.pendingUpdate, f.limit)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// onRead is invoked when the application reads the data. It returns the window size
0000000000000000000000000000000000000000;;	// to be sent to the peer.
0000000000000000000000000000000000000000;;	func (f *inFlow) onRead(n uint32) uint32 {
0000000000000000000000000000000000000000;;		f.mu.Lock()
0000000000000000000000000000000000000000;;		defer f.mu.Unlock()
0000000000000000000000000000000000000000;;		if f.pendingData == 0 {
0000000000000000000000000000000000000000;;			return 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		f.pendingData -= n
0000000000000000000000000000000000000000;;		f.pendingUpdate += n
0000000000000000000000000000000000000000;;		if f.pendingUpdate >= f.limit/4 {
0000000000000000000000000000000000000000;;			wu := f.pendingUpdate
0000000000000000000000000000000000000000;;			f.pendingUpdate = 0
0000000000000000000000000000000000000000;;			return wu
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f *inFlow) resetPendingData() uint32 {
0000000000000000000000000000000000000000;;		f.mu.Lock()
0000000000000000000000000000000000000000;;		defer f.mu.Unlock()
0000000000000000000000000000000000000000;;		n := f.pendingData
0000000000000000000000000000000000000000;;		f.pendingData = 0
0000000000000000000000000000000000000000;;		return n
0000000000000000000000000000000000000000;;	}
