0000000000000000000000000000000000000000;;	// Package monitoring provides access to the Stackdriver Monitoring API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://cloud.google.com/monitoring/api/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/monitoring/v3"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   monitoringService, err := monitoring.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package monitoring
01aeb47db56067954939868e4cc922daadf38b59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "monitoring:v3"
0000000000000000000000000000000000000000;;	const apiName = "monitoring"
0000000000000000000000000000000000000000;;	const apiVersion = "v3"
0000000000000000000000000000000000000000;;	const basePath = "https://monitoring.googleapis.com/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View and write monitoring data for all of your Google and third-party
0000000000000000000000000000000000000000;;		// Cloud and API projects
0000000000000000000000000000000000000000;;		MonitoringScope = "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View monitoring data for all of your Google Cloud and third-party
0000000000000000000000000000000000000000;;		// projects
0000000000000000000000000000000000000000;;		MonitoringReadScope = "https://www.googleapis.com/auth/monitoring.read"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Publish metric data to your Google Cloud projects
0000000000000000000000000000000000000000;;		MonitoringWriteScope = "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.Projects = NewProjectsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Projects *ProjectsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsService(s *Service) *ProjectsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsService{s: s}
0000000000000000000000000000000000000000;;		rs.CollectdTimeSeries = NewProjectsCollectdTimeSeriesService(s)
0000000000000000000000000000000000000000;;		rs.Groups = NewProjectsGroupsService(s)
0000000000000000000000000000000000000000;;		rs.MetricDescriptors = NewProjectsMetricDescriptorsService(s)
0000000000000000000000000000000000000000;;		rs.MonitoredResourceDescriptors = NewProjectsMonitoredResourceDescriptorsService(s)
0000000000000000000000000000000000000000;;		rs.TimeSeries = NewProjectsTimeSeriesService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CollectdTimeSeries *ProjectsCollectdTimeSeriesService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Groups *ProjectsGroupsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MetricDescriptors *ProjectsMetricDescriptorsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MonitoredResourceDescriptors *ProjectsMonitoredResourceDescriptorsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TimeSeries *ProjectsTimeSeriesService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsCollectdTimeSeriesService(s *Service) *ProjectsCollectdTimeSeriesService {
0000000000000000000000000000000000000000;;		rs := &ProjectsCollectdTimeSeriesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsCollectdTimeSeriesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsGroupsService(s *Service) *ProjectsGroupsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsGroupsService{s: s}
0000000000000000000000000000000000000000;;		rs.Members = NewProjectsGroupsMembersService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Members *ProjectsGroupsMembersService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsGroupsMembersService(s *Service) *ProjectsGroupsMembersService {
0000000000000000000000000000000000000000;;		rs := &ProjectsGroupsMembersService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsMembersService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsMetricDescriptorsService(s *Service) *ProjectsMetricDescriptorsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsMetricDescriptorsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricDescriptorsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsMonitoredResourceDescriptorsService(s *Service) *ProjectsMonitoredResourceDescriptorsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsMonitoredResourceDescriptorsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMonitoredResourceDescriptorsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsTimeSeriesService(s *Service) *ProjectsTimeSeriesService {
0000000000000000000000000000000000000000;;		rs := &ProjectsTimeSeriesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsTimeSeriesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// BucketOptions: BucketOptions describes the bucket boundaries used to
0000000000000000000000000000000000000000;;	// create a histogram for the distribution. The buckets can be in a
0000000000000000000000000000000000000000;;	// linear sequence, an exponential sequence, or each bucket can be
0000000000000000000000000000000000000000;;	// specified explicitly. BucketOptions does not include the number of
0000000000000000000000000000000000000000;;	// values in each bucket.A bucket has an inclusive lower bound and
0000000000000000000000000000000000000000;;	// exclusive upper bound for the values that are counted for that
0000000000000000000000000000000000000000;;	// bucket. The upper bound of a bucket must be strictly greater than the
0000000000000000000000000000000000000000;;	// lower bound. The sequence of N buckets for a distribution consists of
0000000000000000000000000000000000000000;;	// an underflow bucket (number 0), zero or more finite buckets (number 1
0000000000000000000000000000000000000000;;	// through N - 2) and an overflow bucket (number N - 1). The buckets are
0000000000000000000000000000000000000000;;	// contiguous: the lower bound of bucket i (i > 0) is the same as the
0000000000000000000000000000000000000000;;	// upper bound of bucket i - 1. The buckets span the whole range of
0000000000000000000000000000000000000000;;	// finite values: lower bound of the underflow bucket is -infinity and
0000000000000000000000000000000000000000;;	// the upper bound of the overflow bucket is +infinity. The finite
0000000000000000000000000000000000000000;;	// buckets are so-called because both bounds are finite.
0000000000000000000000000000000000000000;;	type BucketOptions struct {
0000000000000000000000000000000000000000;;		// ExplicitBuckets: The explicit buckets.
0000000000000000000000000000000000000000;;		ExplicitBuckets *Explicit `json:"explicitBuckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExponentialBuckets: The exponential buckets.
0000000000000000000000000000000000000000;;		ExponentialBuckets *Exponential `json:"exponentialBuckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LinearBuckets: The linear bucket.
0000000000000000000000000000000000000000;;		LinearBuckets *Linear `json:"linearBuckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "ExplicitBuckets") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "ExplicitBuckets") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *BucketOptions) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod BucketOptions
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectdPayload: A collection of data points sent from a
0000000000000000000000000000000000000000;;	// collectd-based plugin. See the collectd documentation for more
0000000000000000000000000000000000000000;;	// information.
0000000000000000000000000000000000000000;;	type CollectdPayload struct {
0000000000000000000000000000000000000000;;		// EndTime: The end time of the interval.
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metadata: The measurement metadata. Example: "process_id" -> 12345
0000000000000000000000000000000000000000;;		Metadata map[string]TypedValue `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Plugin: The name of the plugin. Example: "disk".
0000000000000000000000000000000000000000;;		Plugin string `json:"plugin,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PluginInstance: The instance name of the plugin Example: "hdcl".
0000000000000000000000000000000000000000;;		PluginInstance string `json:"pluginInstance,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartTime: The start time of the interval.
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: The measurement type. Example: "memory".
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TypeInstance: The measurement type instance. Example: "used".
0000000000000000000000000000000000000000;;		TypeInstance string `json:"typeInstance,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Values: The measured values during this time interval. Each value
0000000000000000000000000000000000000000;;		// must have a different dataSourceName.
0000000000000000000000000000000000000000;;		Values []*CollectdValue `json:"values,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "EndTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "EndTime") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CollectdPayload) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CollectdPayload
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CollectdValue: A single data point from a collectd-based plugin.
0000000000000000000000000000000000000000;;	type CollectdValue struct {
0000000000000000000000000000000000000000;;		// DataSourceName: The data source for the collectd value. For example
0000000000000000000000000000000000000000;;		// there are two data sources for network measurements: "rx" and "tx".
0000000000000000000000000000000000000000;;		DataSourceName string `json:"dataSourceName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DataSourceType: The type of measurement.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "UNSPECIFIED_DATA_SOURCE_TYPE" - An unspecified data source type.
0000000000000000000000000000000000000000;;		// This corresponds to
0000000000000000000000000000000000000000;;		// google.api.MetricDescriptor.MetricKind.METRIC_KIND_UNSPECIFIED.
0000000000000000000000000000000000000000;;		//   "GAUGE" - An instantaneous measurement of a varying quantity. This
0000000000000000000000000000000000000000;;		// corresponds to google.api.MetricDescriptor.MetricKind.GAUGE.
0000000000000000000000000000000000000000;;		//   "COUNTER" - A cumulative value over time. This corresponds to
0000000000000000000000000000000000000000;;		// google.api.MetricDescriptor.MetricKind.CUMULATIVE.
0000000000000000000000000000000000000000;;		//   "DERIVE" - A rate of change of the measurement.
0000000000000000000000000000000000000000;;		//   "ABSOLUTE" - An amount of change since the last measurement
0000000000000000000000000000000000000000;;		// interval. This corresponds to
0000000000000000000000000000000000000000;;		// google.api.MetricDescriptor.MetricKind.DELTA.
0000000000000000000000000000000000000000;;		DataSourceType string `json:"dataSourceType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value: The measurement value.
0000000000000000000000000000000000000000;;		Value *TypedValue `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "DataSourceName") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "DataSourceName") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CollectdValue) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CollectdValue
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateCollectdTimeSeriesRequest: The CreateCollectdTimeSeries
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	type CreateCollectdTimeSeriesRequest struct {
0000000000000000000000000000000000000000;;		// CollectdPayloads: The collectd payloads representing the time series
0000000000000000000000000000000000000000;;		// data. You must not include more than a single point for each time
0000000000000000000000000000000000000000;;		// series, so no two payloads can have the same values for all of the
0000000000000000000000000000000000000000;;		// fields plugin, plugin_instance, type, and type_instance.
0000000000000000000000000000000000000000;;		CollectdPayloads []*CollectdPayload `json:"collectdPayloads,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CollectdVersion: The version of collectd that collected the data.
0000000000000000000000000000000000000000;;		// Example: "5.3.0-192.el6".
0000000000000000000000000000000000000000;;		CollectdVersion string `json:"collectdVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource: The monitored resource associated with the time series.
0000000000000000000000000000000000000000;;		Resource *MonitoredResource `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CollectdPayloads") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CollectdPayloads") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CreateCollectdTimeSeriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CreateCollectdTimeSeriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateTimeSeriesRequest: The CreateTimeSeries request.
0000000000000000000000000000000000000000;;	type CreateTimeSeriesRequest struct {
0000000000000000000000000000000000000000;;		// TimeSeries: The new data to be added to a list of time series. Adds
0000000000000000000000000000000000000000;;		// at most one data point to each of several time series. The new data
0000000000000000000000000000000000000000;;		// point must be more recent than any other point in its time series.
0000000000000000000000000000000000000000;;		// Each TimeSeries value must fully specify a unique time series by
0000000000000000000000000000000000000000;;		// supplying all label values for the metric and the monitored resource.
0000000000000000000000000000000000000000;;		TimeSeries []*TimeSeries `json:"timeSeries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "TimeSeries") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "TimeSeries") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CreateTimeSeriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CreateTimeSeriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Distribution: Distribution contains summary statistics for a
0000000000000000000000000000000000000000;;	// population of values. It optionally contains a histogram representing
0000000000000000000000000000000000000000;;	// the distribution of those values across a set of buckets.The summary
0000000000000000000000000000000000000000;;	// statistics are the count, mean, sum of the squared deviation from the
0000000000000000000000000000000000000000;;	// mean, the minimum, and the maximum of the set of population of
0000000000000000000000000000000000000000;;	// values. The histogram is based on a sequence of buckets and gives a
0000000000000000000000000000000000000000;;	// count of values that fall into each bucket. The boundaries of the
0000000000000000000000000000000000000000;;	// buckets are given either explicitly or by formulas for buckets of
0000000000000000000000000000000000000000;;	// fixed or exponentially increasing widths.Although it is not
0000000000000000000000000000000000000000;;	// forbidden, it is generally a bad idea to include non-finite values
0000000000000000000000000000000000000000;;	// (infinities or NaNs) in the population of values, as this will render
0000000000000000000000000000000000000000;;	// the mean and sum_of_squared_deviation fields meaningless.
0000000000000000000000000000000000000000;;	type Distribution struct {
0000000000000000000000000000000000000000;;		// BucketCounts: Required in the Stackdriver Monitoring API v3. The
0000000000000000000000000000000000000000;;		// values for each bucket specified in bucket_options. The sum of the
0000000000000000000000000000000000000000;;		// values in bucketCounts must equal the value in the count field of the
0000000000000000000000000000000000000000;;		// Distribution object. The order of the bucket counts follows the
0000000000000000000000000000000000000000;;		// numbering schemes described for the three bucket types. The underflow
0000000000000000000000000000000000000000;;		// bucket has number 0; the finite buckets, if any, have numbers 1
0000000000000000000000000000000000000000;;		// through N-2; and the overflow bucket has number N-1. The size of
0000000000000000000000000000000000000000;;		// bucket_counts must not be greater than N. If the size is less than N,
0000000000000000000000000000000000000000;;		// then the remaining buckets are assigned values of zero.
0000000000000000000000000000000000000000;;		BucketCounts googleapi.Int64s `json:"bucketCounts,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// BucketOptions: Required in the Stackdriver Monitoring API v3. Defines
0000000000000000000000000000000000000000;;		// the histogram bucket boundaries.
0000000000000000000000000000000000000000;;		BucketOptions *BucketOptions `json:"bucketOptions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Count: The number of values in the population. Must be non-negative.
0000000000000000000000000000000000000000;;		// This value must equal the sum of the values in bucket_counts if a
0000000000000000000000000000000000000000;;		// histogram is provided.
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Mean: The arithmetic mean of the values in the population. If count
0000000000000000000000000000000000000000;;		// is zero then this field must be zero.
0000000000000000000000000000000000000000;;		Mean float64 `json:"mean,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Range: If specified, contains the range of the population values. The
0000000000000000000000000000000000000000;;		// field must not be present if the count is zero. This field is
0000000000000000000000000000000000000000;;		// presently ignored by the Stackdriver Monitoring API v3.
0000000000000000000000000000000000000000;;		Range *Range `json:"range,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SumOfSquaredDeviation: The sum of squared deviations from the mean of
0000000000000000000000000000000000000000;;		// the values in the population. For values x_i this
0000000000000000000000000000000000000000;;		// is:
0000000000000000000000000000000000000000;;		// Sum[i=1..n]((x_i - mean)^2)
0000000000000000000000000000000000000000;;		// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd
0000000000000000000000000000000000000000;;		// edition describes Welford's method for accumulating this sum in one
0000000000000000000000000000000000000000;;		// pass.If count is zero then this field must be zero.
0000000000000000000000000000000000000000;;		SumOfSquaredDeviation float64 `json:"sumOfSquaredDeviation,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "BucketCounts") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "BucketCounts") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Distribution) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Distribution
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Distribution) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod Distribution
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			Mean                  gensupport.JSONFloat64 `json:"mean"`
0000000000000000000000000000000000000000;;			SumOfSquaredDeviation gensupport.JSONFloat64 `json:"sumOfSquaredDeviation"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Mean = float64(s1.Mean)
0000000000000000000000000000000000000000;;		s.SumOfSquaredDeviation = float64(s1.SumOfSquaredDeviation)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty: A generic empty message that you can re-use to avoid defining
0000000000000000000000000000000000000000;;	// duplicated empty messages in your APIs. A typical example is to use
0000000000000000000000000000000000000000;;	// it as the request or the response type of an API method. For
0000000000000000000000000000000000000000;;	// instance:
0000000000000000000000000000000000000000;;	// service Foo {
0000000000000000000000000000000000000000;;	//   rpc Bar(google.protobuf.Empty) returns
0000000000000000000000000000000000000000;;	// (google.protobuf.Empty);
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	// The JSON representation for Empty is empty JSON object {}.
0000000000000000000000000000000000000000;;	type Empty struct {
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Explicit: Specifies a set of buckets with arbitrary widths.There are
0000000000000000000000000000000000000000;;	// size(bounds) + 1 (= N) buckets. Bucket i has the following
0000000000000000000000000000000000000000;;	// boundaries:Upper bound (0 <= i < N-1): boundsi  Lower bound (1 <= i <
0000000000000000000000000000000000000000;;	// N); boundsi - 1The bounds field must contain at least one element. If
0000000000000000000000000000000000000000;;	// bounds has only one element, then there are no finite buckets, and
0000000000000000000000000000000000000000;;	// that single element is the common boundary of the overflow and
0000000000000000000000000000000000000000;;	// underflow buckets.
0000000000000000000000000000000000000000;;	type Explicit struct {
0000000000000000000000000000000000000000;;		// Bounds: The values must be monotonically increasing.
0000000000000000000000000000000000000000;;		Bounds []float64 `json:"bounds,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Bounds") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Bounds") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Explicit) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Explicit
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Exponential: Specifies an exponential sequence of buckets that have a
0000000000000000000000000000000000000000;;	// width that is proportional to the value of the lower bound. Each
0000000000000000000000000000000000000000;;	// bucket represents a constant relative uncertainty on a specific value
0000000000000000000000000000000000000000;;	// in the bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket
0000000000000000000000000000000000000000;;	// i has the following boundaries:Upper bound (0 <= i < N-1): scale *
0000000000000000000000000000000000000000;;	// (growth_factor ^ i).  Lower bound (1 <= i < N): scale *
0000000000000000000000000000000000000000;;	// (growth_factor ^ (i - 1)).
0000000000000000000000000000000000000000;;	type Exponential struct {
0000000000000000000000000000000000000000;;		// GrowthFactor: Must be greater than 1.
0000000000000000000000000000000000000000;;		GrowthFactor float64 `json:"growthFactor,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NumFiniteBuckets: Must be greater than 0.
0000000000000000000000000000000000000000;;		NumFiniteBuckets int64 `json:"numFiniteBuckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Scale: Must be greater than 0.
0000000000000000000000000000000000000000;;		Scale float64 `json:"scale,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "GrowthFactor") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "GrowthFactor") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Exponential) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Exponential
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Exponential) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod Exponential
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			GrowthFactor gensupport.JSONFloat64 `json:"growthFactor"`
0000000000000000000000000000000000000000;;			Scale        gensupport.JSONFloat64 `json:"scale"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.GrowthFactor = float64(s1.GrowthFactor)
0000000000000000000000000000000000000000;;		s.Scale = float64(s1.Scale)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Field: A single field of a message type.
0000000000000000000000000000000000000000;;	type Field struct {
0000000000000000000000000000000000000000;;		// Cardinality: The field cardinality.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "CARDINALITY_UNKNOWN" - For fields with unknown cardinality.
0000000000000000000000000000000000000000;;		//   "CARDINALITY_OPTIONAL" - For optional fields.
0000000000000000000000000000000000000000;;		//   "CARDINALITY_REQUIRED" - For required fields. Proto2 syntax only.
0000000000000000000000000000000000000000;;		//   "CARDINALITY_REPEATED" - For repeated fields.
0000000000000000000000000000000000000000;;		Cardinality string `json:"cardinality,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultValue: The string value of the default value of this field.
0000000000000000000000000000000000000000;;		// Proto2 syntax only.
0000000000000000000000000000000000000000;;		DefaultValue string `json:"defaultValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// JsonName: The field JSON name.
0000000000000000000000000000000000000000;;		JsonName string `json:"jsonName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind: The field type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "TYPE_UNKNOWN" - Field type unknown.
0000000000000000000000000000000000000000;;		//   "TYPE_DOUBLE" - Field type double.
0000000000000000000000000000000000000000;;		//   "TYPE_FLOAT" - Field type float.
0000000000000000000000000000000000000000;;		//   "TYPE_INT64" - Field type int64.
0000000000000000000000000000000000000000;;		//   "TYPE_UINT64" - Field type uint64.
0000000000000000000000000000000000000000;;		//   "TYPE_INT32" - Field type int32.
0000000000000000000000000000000000000000;;		//   "TYPE_FIXED64" - Field type fixed64.
0000000000000000000000000000000000000000;;		//   "TYPE_FIXED32" - Field type fixed32.
0000000000000000000000000000000000000000;;		//   "TYPE_BOOL" - Field type bool.
0000000000000000000000000000000000000000;;		//   "TYPE_STRING" - Field type string.
0000000000000000000000000000000000000000;;		//   "TYPE_GROUP" - Field type group. Proto2 syntax only, and
0000000000000000000000000000000000000000;;		// deprecated.
0000000000000000000000000000000000000000;;		//   "TYPE_MESSAGE" - Field type message.
0000000000000000000000000000000000000000;;		//   "TYPE_BYTES" - Field type bytes.
0000000000000000000000000000000000000000;;		//   "TYPE_UINT32" - Field type uint32.
0000000000000000000000000000000000000000;;		//   "TYPE_ENUM" - Field type enum.
0000000000000000000000000000000000000000;;		//   "TYPE_SFIXED32" - Field type sfixed32.
0000000000000000000000000000000000000000;;		//   "TYPE_SFIXED64" - Field type sfixed64.
0000000000000000000000000000000000000000;;		//   "TYPE_SINT32" - Field type sint32.
0000000000000000000000000000000000000000;;		//   "TYPE_SINT64" - Field type sint64.
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The field name.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number: The field number.
0000000000000000000000000000000000000000;;		Number int64 `json:"number,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OneofIndex: The index of the field type in Type.oneofs, for message
0000000000000000000000000000000000000000;;		// or enumeration types. The first type has index 1; zero means the type
0000000000000000000000000000000000000000;;		// is not in the list.
0000000000000000000000000000000000000000;;		OneofIndex int64 `json:"oneofIndex,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Options: The protocol buffer options.
0000000000000000000000000000000000000000;;		Options []*Option `json:"options,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Packed: Whether to use alternative packed wire representation.
0000000000000000000000000000000000000000;;		Packed bool `json:"packed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TypeUrl: The field type URL, without the scheme, for message or
0000000000000000000000000000000000000000;;		// enumeration types. Example:
0000000000000000000000000000000000000000;;		// "type.googleapis.com/google.protobuf.Timestamp".
0000000000000000000000000000000000000000;;		TypeUrl string `json:"typeUrl,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Cardinality") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Cardinality") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Field) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Field
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Group: The description of a dynamic collection of monitored
0000000000000000000000000000000000000000;;	// resources. Each group has a filter that is matched against monitored
0000000000000000000000000000000000000000;;	// resources and their associated metadata. If a group's filter matches
0000000000000000000000000000000000000000;;	// an available monitored resource, then that resource is a member of
0000000000000000000000000000000000000000;;	// that group. Groups can contain any number of monitored resources, and
0000000000000000000000000000000000000000;;	// each monitored resource can be a member of any number of
0000000000000000000000000000000000000000;;	// groups.Groups can be nested in parent-child hierarchies. The
0000000000000000000000000000000000000000;;	// parentName field identifies an optional parent for each group. If a
0000000000000000000000000000000000000000;;	// group has a parent, then the only monitored resources available to be
0000000000000000000000000000000000000000;;	// matched by the group's filter are the resources contained in the
0000000000000000000000000000000000000000;;	// parent group. In other words, a group contains the monitored
0000000000000000000000000000000000000000;;	// resources that match its filter and the filters of all the group's
0000000000000000000000000000000000000000;;	// ancestors. A group without a parent can contain any monitored
0000000000000000000000000000000000000000;;	// resource.For example, consider an infrastructure running a set of
0000000000000000000000000000000000000000;;	// instances with two user-defined tags: "environment" and "role". A
0000000000000000000000000000000000000000;;	// parent group has a filter, environment="production". A child of that
0000000000000000000000000000000000000000;;	// parent group has a filter, role="transcoder". The parent group
0000000000000000000000000000000000000000;;	// contains all instances in the production environment, regardless of
0000000000000000000000000000000000000000;;	// their roles. The child group contains instances that have the
0000000000000000000000000000000000000000;;	// transcoder role and are in the production environment.The monitored
0000000000000000000000000000000000000000;;	// resources contained in a group can change at any moment, depending on
0000000000000000000000000000000000000000;;	// what resources exist and what filters are associated with the group
0000000000000000000000000000000000000000;;	// and its ancestors.
0000000000000000000000000000000000000000;;	type Group struct {
0000000000000000000000000000000000000000;;		// DisplayName: A user-assigned name for this group, used only for
0000000000000000000000000000000000000000;;		// display purposes.
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filter: The filter used to determine which monitored resources belong
0000000000000000000000000000000000000000;;		// to this group.
0000000000000000000000000000000000000000;;		Filter string `json:"filter,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IsCluster: If true, the members of this group are considered to be a
0000000000000000000000000000000000000000;;		// cluster. The system can perform additional analysis on groups that
0000000000000000000000000000000000000000;;		// are clusters.
0000000000000000000000000000000000000000;;		IsCluster bool `json:"isCluster,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Output only. The name of this group. The format is
0000000000000000000000000000000000000000;;		// "projects/{project_id_or_number}/groups/{group_id}". When creating a
0000000000000000000000000000000000000000;;		// group, this field is ignored and a new name is created consisting of
0000000000000000000000000000000000000000;;		// the project specified in the call to CreateGroup and a unique
0000000000000000000000000000000000000000;;		// {group_id} that is generated automatically.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ParentName: The name of the group's parent, if it has one. The format
0000000000000000000000000000000000000000;;		// is "projects/{project_id_or_number}/groups/{group_id}". For groups
0000000000000000000000000000000000000000;;		// with no parent, parentName is the empty string, "".
0000000000000000000000000000000000000000;;		ParentName string `json:"parentName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "DisplayName") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "DisplayName") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Group) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Group
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LabelDescriptor: A description of a label.
0000000000000000000000000000000000000000;;	type LabelDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: A human-readable description for the label.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Key: The label key.
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValueType: The type of data that can be assigned to the label.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "STRING" - A variable-length string. This is the default.
0000000000000000000000000000000000000000;;		//   "BOOL" - Boolean; true or false.
0000000000000000000000000000000000000000;;		//   "INT64" - A 64-bit signed integer.
0000000000000000000000000000000000000000;;		ValueType string `json:"valueType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LabelDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LabelDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Linear: Specifies a linear sequence of buckets that all have the same
0000000000000000000000000000000000000000;;	// width (except overflow and underflow). Each bucket represents a
0000000000000000000000000000000000000000;;	// constant absolute uncertainty on the specific value in the
0000000000000000000000000000000000000000;;	// bucket.There are num_finite_buckets + 2 (= N) buckets. Bucket i has
0000000000000000000000000000000000000000;;	// the following boundaries:Upper bound (0 <= i < N-1): offset + (width
0000000000000000000000000000000000000000;;	// * i).  Lower bound (1 <= i < N): offset + (width * (i - 1)).
0000000000000000000000000000000000000000;;	type Linear struct {
0000000000000000000000000000000000000000;;		// NumFiniteBuckets: Must be greater than 0.
0000000000000000000000000000000000000000;;		NumFiniteBuckets int64 `json:"numFiniteBuckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Offset: Lower bound of the first bucket.
0000000000000000000000000000000000000000;;		Offset float64 `json:"offset,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Width: Must be greater than 0.
0000000000000000000000000000000000000000;;		Width float64 `json:"width,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NumFiniteBuckets") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NumFiniteBuckets") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Linear) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Linear
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Linear) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod Linear
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			Offset gensupport.JSONFloat64 `json:"offset"`
0000000000000000000000000000000000000000;;			Width  gensupport.JSONFloat64 `json:"width"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Offset = float64(s1.Offset)
0000000000000000000000000000000000000000;;		s.Width = float64(s1.Width)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGroupMembersResponse: The ListGroupMembers response.
0000000000000000000000000000000000000000;;	type ListGroupMembersResponse struct {
0000000000000000000000000000000000000000;;		// Members: A set of monitored resources in the group.
0000000000000000000000000000000000000000;;		Members []*MonitoredResource `json:"members,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there are more results than have been returned,
0000000000000000000000000000000000000000;;		// then this field is set to a non-empty value. To see the additional
0000000000000000000000000000000000000000;;		// results, use that value as pageToken in the next call to this method.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TotalSize: The total number of elements matching this request.
0000000000000000000000000000000000000000;;		TotalSize int64 `json:"totalSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Members") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Members") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListGroupMembersResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListGroupMembersResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListGroupsResponse: The ListGroups response.
0000000000000000000000000000000000000000;;	type ListGroupsResponse struct {
0000000000000000000000000000000000000000;;		// Group: The groups that match the specified filters.
0000000000000000000000000000000000000000;;		Group []*Group `json:"group,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there are more results than have been returned,
0000000000000000000000000000000000000000;;		// then this field is set to a non-empty value. To see the additional
0000000000000000000000000000000000000000;;		// results, use that value as pageToken in the next call to this method.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Group") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Group") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListGroupsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListGroupsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMetricDescriptorsResponse: The ListMetricDescriptors response.
0000000000000000000000000000000000000000;;	type ListMetricDescriptorsResponse struct {
0000000000000000000000000000000000000000;;		// MetricDescriptors: The metric descriptors that are available to the
0000000000000000000000000000000000000000;;		// project and that match the value of filter, if present.
0000000000000000000000000000000000000000;;		MetricDescriptors []*MetricDescriptor `json:"metricDescriptors,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there are more results than have been returned,
0000000000000000000000000000000000000000;;		// then this field is set to a non-empty value. To see the additional
0000000000000000000000000000000000000000;;		// results, use that value as pageToken in the next call to this method.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "MetricDescriptors")
0000000000000000000000000000000000000000;;		// to unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "MetricDescriptors") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListMetricDescriptorsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListMetricDescriptorsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMonitoredResourceDescriptorsResponse: The
0000000000000000000000000000000000000000;;	// ListMonitoredResourceDescriptors response.
0000000000000000000000000000000000000000;;	type ListMonitoredResourceDescriptorsResponse struct {
0000000000000000000000000000000000000000;;		// NextPageToken: If there are more results than have been returned,
0000000000000000000000000000000000000000;;		// then this field is set to a non-empty value. To see the additional
0000000000000000000000000000000000000000;;		// results, use that value as pageToken in the next call to this method.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceDescriptors: The monitored resource descriptors that are
0000000000000000000000000000000000000000;;		// available to this project and that match filter, if present.
0000000000000000000000000000000000000000;;		ResourceDescriptors []*MonitoredResourceDescriptor `json:"resourceDescriptors,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NextPageToken") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NextPageToken") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListMonitoredResourceDescriptorsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListMonitoredResourceDescriptorsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTimeSeriesResponse: The ListTimeSeries response.
0000000000000000000000000000000000000000;;	type ListTimeSeriesResponse struct {
0000000000000000000000000000000000000000;;		// NextPageToken: If there are more results than have been returned,
0000000000000000000000000000000000000000;;		// then this field is set to a non-empty value. To see the additional
0000000000000000000000000000000000000000;;		// results, use that value as pageToken in the next call to this method.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TimeSeries: One or more time series that match the filter included in
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		TimeSeries []*TimeSeries `json:"timeSeries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NextPageToken") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NextPageToken") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListTimeSeriesResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListTimeSeriesResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Metric: A specific metric, identified by specifying values for all of
0000000000000000000000000000000000000000;;	// the labels of a MetricDescriptor.
0000000000000000000000000000000000000000;;	type Metric struct {
0000000000000000000000000000000000000000;;		// Labels: The set of label values that uniquely identify this metric.
0000000000000000000000000000000000000000;;		// All labels listed in the MetricDescriptor must be assigned values.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: An existing metric type, see google.api.MetricDescriptor. For
0000000000000000000000000000000000000000;;		// example, custom.googleapis.com/invoice/paid/amount.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Labels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Labels") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Metric) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Metric
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricDescriptor: Defines a metric type and its schema. Once a metric
0000000000000000000000000000000000000000;;	// descriptor is created, deleting or altering it stops data collection
0000000000000000000000000000000000000000;;	// and makes the metric type's existing data unusable.
0000000000000000000000000000000000000000;;	type MetricDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: A detailed description of the metric, which can be used
0000000000000000000000000000000000000000;;		// in documentation.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisplayName: A concise name for the metric, which can be displayed in
0000000000000000000000000000000000000000;;		// user interfaces. Use sentence case without an ending period, for
0000000000000000000000000000000000000000;;		// example "Request count".
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: The set of labels that can be used to describe a specific
0000000000000000000000000000000000000000;;		// instance of this metric type. For example, the
0000000000000000000000000000000000000000;;		// appengine.googleapis.com/http/server/response_latencies metric type
0000000000000000000000000000000000000000;;		// has a label for the HTTP response code, response_code, so you can
0000000000000000000000000000000000000000;;		// look at latencies for successful responses or just for responses that
0000000000000000000000000000000000000000;;		// failed.
0000000000000000000000000000000000000000;;		Labels []*LabelDescriptor `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MetricKind: Whether the metric records instantaneous values, changes
0000000000000000000000000000000000000000;;		// to a value, etc. Some combinations of metric_kind and value_type
0000000000000000000000000000000000000000;;		// might not be supported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "METRIC_KIND_UNSPECIFIED" - Do not use this default value.
0000000000000000000000000000000000000000;;		//   "GAUGE" - An instantaneous measurement of a value.
0000000000000000000000000000000000000000;;		//   "DELTA" - The change in a value during a time interval.
0000000000000000000000000000000000000000;;		//   "CUMULATIVE" - A value accumulated over a time interval. Cumulative
0000000000000000000000000000000000000000;;		// measurements in a time series should have the same start time and
0000000000000000000000000000000000000000;;		// increasing end times, until an event resets the cumulative value to
0000000000000000000000000000000000000000;;		// zero and sets a new start time for the following points.
0000000000000000000000000000000000000000;;		MetricKind string `json:"metricKind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The resource name of the metric descriptor. Depending on the
0000000000000000000000000000000000000000;;		// implementation, the name typically includes: (1) the parent resource
0000000000000000000000000000000000000000;;		// name that defines the scope of the metric type or of its data; and
0000000000000000000000000000000000000000;;		// (2) the metric's URL-encoded type, which also appears in the type
0000000000000000000000000000000000000000;;		// field of this descriptor. For example, following is the resource name
0000000000000000000000000000000000000000;;		// of a custom metric within the GCP project
0000000000000000000000000000000000000000;;		// my-project-id:
0000000000000000000000000000000000000000;;		// "projects/my-project-id/metricDescriptors/custom.google
0000000000000000000000000000000000000000;;		// apis.com%2Finvoice%2Fpaid%2Famount"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: The metric type, including its DNS name prefix. The type is not
0000000000000000000000000000000000000000;;		// URL-encoded. All user-defined custom metric types have the DNS name
0000000000000000000000000000000000000000;;		// custom.googleapis.com. Metric types should use a natural hierarchical
0000000000000000000000000000000000000000;;		// grouping. For
0000000000000000000000000000000000000000;;		// example:
0000000000000000000000000000000000000000;;		// "custom.googleapis.com/invoice/paid/amount"
0000000000000000000000000000000000000000;;		// "appengine.google
0000000000000000000000000000000000000000;;		// apis.com/http/server/response_latencies"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unit: The unit in which the metric value is reported. It is only
0000000000000000000000000000000000000000;;		// applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The
0000000000000000000000000000000000000000;;		// supported units are a subset of The Unified Code for Units of Measure
0000000000000000000000000000000000000000;;		// (http://unitsofmeasure.org/ucum.html) standard:Basic units (UNIT)
0000000000000000000000000000000000000000;;		// bit bit
0000000000000000000000000000000000000000;;		// By byte
0000000000000000000000000000000000000000;;		// s second
0000000000000000000000000000000000000000;;		// min minute
0000000000000000000000000000000000000000;;		// h hour
0000000000000000000000000000000000000000;;		// d dayPrefixes (PREFIX)
0000000000000000000000000000000000000000;;		// k kilo (10**3)
0000000000000000000000000000000000000000;;		// M mega (10**6)
0000000000000000000000000000000000000000;;		// G giga (10**9)
0000000000000000000000000000000000000000;;		// T tera (10**12)
0000000000000000000000000000000000000000;;		// P peta (10**15)
0000000000000000000000000000000000000000;;		// E exa (10**18)
0000000000000000000000000000000000000000;;		// Z zetta (10**21)
0000000000000000000000000000000000000000;;		// Y yotta (10**24)
0000000000000000000000000000000000000000;;		// m milli (10**-3)
0000000000000000000000000000000000000000;;		// u micro (10**-6)
0000000000000000000000000000000000000000;;		// n nano (10**-9)
0000000000000000000000000000000000000000;;		// p pico (10**-12)
0000000000000000000000000000000000000000;;		// f femto (10**-15)
0000000000000000000000000000000000000000;;		// a atto (10**-18)
0000000000000000000000000000000000000000;;		// z zepto (10**-21)
0000000000000000000000000000000000000000;;		// y yocto (10**-24)
0000000000000000000000000000000000000000;;		// Ki kibi (2**10)
0000000000000000000000000000000000000000;;		// Mi mebi (2**20)
0000000000000000000000000000000000000000;;		// Gi gibi (2**30)
0000000000000000000000000000000000000000;;		// Ti tebi (2**40)GrammarThe grammar includes the dimensionless unit 1,
0000000000000000000000000000000000000000;;		// such as 1/s.The grammar also includes these connectors:
0000000000000000000000000000000000000000;;		// / division (as an infix operator, e.g. 1/s).
0000000000000000000000000000000000000000;;		// . multiplication (as an infix operator, e.g. GBy.d)The grammar for a
0000000000000000000000000000000000000000;;		// unit is as follows:
0000000000000000000000000000000000000000;;		// Expression = Component { "." Component } { "/" Component }
0000000000000000000000000000000000000000;;		// ;
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Component = [ PREFIX ] UNIT [ Annotation ]
0000000000000000000000000000000000000000;;		//           | Annotation
0000000000000000000000000000000000000000;;		//           | "1"
0000000000000000000000000000000000000000;;		//           ;
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Annotation = "{" NAME "}" ;
0000000000000000000000000000000000000000;;		// Notes:
0000000000000000000000000000000000000000;;		// Annotation is just a comment if it follows a UNIT and is  equivalent
0000000000000000000000000000000000000000;;		// to 1 if it is used alone. For examples,  {requests}/s == 1/s,
0000000000000000000000000000000000000000;;		// By{transmitted}/s == By/s.
0000000000000000000000000000000000000000;;		// NAME is a sequence of non-blank printable ASCII characters not
0000000000000000000000000000000000000000;;		// containing '{' or '}'.
0000000000000000000000000000000000000000;;		Unit string `json:"unit,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValueType: Whether the measurement is an integer, a floating-point
0000000000000000000000000000000000000000;;		// number, etc. Some combinations of metric_kind and value_type might
0000000000000000000000000000000000000000;;		// not be supported.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "VALUE_TYPE_UNSPECIFIED" - Do not use this default value.
0000000000000000000000000000000000000000;;		//   "BOOL" - The value is a boolean. This value type can be used only
0000000000000000000000000000000000000000;;		// if the metric kind is GAUGE.
0000000000000000000000000000000000000000;;		//   "INT64" - The value is a signed 64-bit integer.
0000000000000000000000000000000000000000;;		//   "DOUBLE" - The value is a double precision floating point number.
0000000000000000000000000000000000000000;;		//   "STRING" - The value is a text string. This value type can be used
0000000000000000000000000000000000000000;;		// only if the metric kind is GAUGE.
0000000000000000000000000000000000000000;;		//   "DISTRIBUTION" - The value is a Distribution.
0000000000000000000000000000000000000000;;		//   "MONEY" - The value is money.
0000000000000000000000000000000000000000;;		ValueType string `json:"valueType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MetricDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MetricDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitoredResource: An object representing a resource that can be used
0000000000000000000000000000000000000000;;	// for monitoring, logging, billing, or other purposes. Examples include
0000000000000000000000000000000000000000;;	// virtual machine instances, databases, and storage devices such as
0000000000000000000000000000000000000000;;	// disks. The type field identifies a MonitoredResourceDescriptor object
0000000000000000000000000000000000000000;;	// that describes the resource's schema. Information in the labels field
0000000000000000000000000000000000000000;;	// identifies the actual resource and its attributes according to the
0000000000000000000000000000000000000000;;	// schema. For example, a particular Compute Engine VM instance could be
0000000000000000000000000000000000000000;;	// represented by the following object, because the
0000000000000000000000000000000000000000;;	// MonitoredResourceDescriptor for "gce_instance" has labels
0000000000000000000000000000000000000000;;	// "instance_id" and "zone":
0000000000000000000000000000000000000000;;	// { "type": "gce_instance",
0000000000000000000000000000000000000000;;	//   "labels": { "instance_id": "12345678901234",
0000000000000000000000000000000000000000;;	//               "zone": "us-central1-a" }}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type MonitoredResource struct {
0000000000000000000000000000000000000000;;		// Labels: Required. Values for all of the labels listed in the
0000000000000000000000000000000000000000;;		// associated monitored resource descriptor. For example, Compute Engine
0000000000000000000000000000000000000000;;		// VM instances use the labels "project_id", "instance_id", and "zone".
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: Required. The monitored resource type. This field must match
0000000000000000000000000000000000000000;;		// the type field of a MonitoredResourceDescriptor object. For example,
0000000000000000000000000000000000000000;;		// the type of a Compute Engine VM instance is gce_instance.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Labels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Labels") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MonitoredResource) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MonitoredResource
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitoredResourceDescriptor: An object that describes the schema of a
0000000000000000000000000000000000000000;;	// MonitoredResource object using a type name and a set of labels. For
0000000000000000000000000000000000000000;;	// example, the monitored resource descriptor for Google Compute Engine
0000000000000000000000000000000000000000;;	// VM instances has a type of "gce_instance" and specifies the use of
0000000000000000000000000000000000000000;;	// the labels "instance_id" and "zone" to identify particular VM
0000000000000000000000000000000000000000;;	// instances.Different APIs can support different monitored resource
0000000000000000000000000000000000000000;;	// types. APIs generally provide a list method that returns the
0000000000000000000000000000000000000000;;	// monitored resource descriptors used by the API.
0000000000000000000000000000000000000000;;	type MonitoredResourceDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: Optional. A detailed description of the monitored
0000000000000000000000000000000000000000;;		// resource type that might be used in documentation.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisplayName: Optional. A concise name for the monitored resource type
0000000000000000000000000000000000000000;;		// that might be displayed in user interfaces. It should be a Title
0000000000000000000000000000000000000000;;		// Cased Noun Phrase, without any article or other determiners. For
0000000000000000000000000000000000000000;;		// example, "Google Cloud SQL Database".
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: Required. A set of labels used to describe instances of this
0000000000000000000000000000000000000000;;		// monitored resource type. For example, an individual Google Cloud SQL
0000000000000000000000000000000000000000;;		// database is identified by values for the labels "database_id" and
0000000000000000000000000000000000000000;;		// "zone".
0000000000000000000000000000000000000000;;		Labels []*LabelDescriptor `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Optional. The resource name of the monitored resource
0000000000000000000000000000000000000000;;		// descriptor:
0000000000000000000000000000000000000000;;		// "projects/{project_id}/monitoredResourceDescriptors/{type}" where
0000000000000000000000000000000000000000;;		// {type} is the value of the type field in this object and {project_id}
0000000000000000000000000000000000000000;;		// is a project ID that provides API-specific context for accessing the
0000000000000000000000000000000000000000;;		// type. APIs that do not use project information can use the resource
0000000000000000000000000000000000000000;;		// name format "monitoredResourceDescriptors/{type}".
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: Required. The monitored resource type. For example, the type
0000000000000000000000000000000000000000;;		// "cloudsql_database" represents databases in Google Cloud SQL. The
0000000000000000000000000000000000000000;;		// maximum length of this value is 256 characters.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MonitoredResourceDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MonitoredResourceDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Option: A protocol buffer option, which can be attached to a message,
0000000000000000000000000000000000000000;;	// field, enumeration, etc.
0000000000000000000000000000000000000000;;	type Option struct {
0000000000000000000000000000000000000000;;		// Name: The option's name. For protobuf built-in options (options
0000000000000000000000000000000000000000;;		// defined in descriptor.proto), this is the short name. For example,
0000000000000000000000000000000000000000;;		// "map_entry". For custom options, it should be the fully-qualified
0000000000000000000000000000000000000000;;		// name. For example, "google.api.http".
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value: The option's value packed in an Any message. If the value is a
0000000000000000000000000000000000000000;;		// primitive, the corresponding wrapper type defined in
0000000000000000000000000000000000000000;;		// google/protobuf/wrappers.proto should be used. If the value is an
0000000000000000000000000000000000000000;;		// enum, it should be stored as an int32 value using the
0000000000000000000000000000000000000000;;		// google.protobuf.Int32Value type.
0000000000000000000000000000000000000000;;		Value googleapi.RawMessage `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Name") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Name") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Option) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Option
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Point: A single data point in a time series.
0000000000000000000000000000000000000000;;	type Point struct {
0000000000000000000000000000000000000000;;		// Interval: The time interval to which the data point applies. For
0000000000000000000000000000000000000000;;		// GAUGE metrics, only the end time of the interval is used. For DELTA
0000000000000000000000000000000000000000;;		// metrics, the start and end time should specify a non-zero interval,
0000000000000000000000000000000000000000;;		// with subsequent points specifying contiguous and non-overlapping
0000000000000000000000000000000000000000;;		// intervals. For CUMULATIVE metrics, the start and end time should
0000000000000000000000000000000000000000;;		// specify a non-zero interval, with subsequent points specifying the
0000000000000000000000000000000000000000;;		// same start time and increasing end times, until an event resets the
0000000000000000000000000000000000000000;;		// cumulative value to zero and sets a new start time for the following
0000000000000000000000000000000000000000;;		// points.
0000000000000000000000000000000000000000;;		Interval *TimeInterval `json:"interval,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value: The value of the data point.
0000000000000000000000000000000000000000;;		Value *TypedValue `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Interval") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Interval") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Point) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Point
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Range: The range of the population values.
0000000000000000000000000000000000000000;;	type Range struct {
0000000000000000000000000000000000000000;;		// Max: The maximum of the population values.
0000000000000000000000000000000000000000;;		Max float64 `json:"max,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Min: The minimum of the population values.
0000000000000000000000000000000000000000;;		Min float64 `json:"min,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Max") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Max") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Range) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Range
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Range) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod Range
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			Max gensupport.JSONFloat64 `json:"max"`
0000000000000000000000000000000000000000;;			Min gensupport.JSONFloat64 `json:"min"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Max = float64(s1.Max)
0000000000000000000000000000000000000000;;		s.Min = float64(s1.Min)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourceContext: SourceContext represents information about the source
0000000000000000000000000000000000000000;;	// of a protobuf element, like the file in which it is defined.
0000000000000000000000000000000000000000;;	type SourceContext struct {
0000000000000000000000000000000000000000;;		// FileName: The path-qualified name of the .proto file that contained
0000000000000000000000000000000000000000;;		// the associated protobuf element. For example:
0000000000000000000000000000000000000000;;		// "google/protobuf/source_context.proto".
0000000000000000000000000000000000000000;;		FileName string `json:"fileName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "FileName") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "FileName") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SourceContext) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SourceContext
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeInterval: A time interval extending just after a start time
0000000000000000000000000000000000000000;;	// through an end time. If the start time is the same as the end time,
0000000000000000000000000000000000000000;;	// then the interval represents a single point in time.
0000000000000000000000000000000000000000;;	type TimeInterval struct {
0000000000000000000000000000000000000000;;		// EndTime: Required. The end of the time interval.
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartTime: Optional. The beginning of the time interval. The default
0000000000000000000000000000000000000000;;		// value for the start time is the end time. The start time must not be
0000000000000000000000000000000000000000;;		// later than the end time.
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "EndTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "EndTime") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TimeInterval) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TimeInterval
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeSeries: A collection of data points that describes the
0000000000000000000000000000000000000000;;	// time-varying values of a metric. A time series is identified by a
0000000000000000000000000000000000000000;;	// combination of a fully-specified monitored resource and a
0000000000000000000000000000000000000000;;	// fully-specified metric. This type is used for both listing and
0000000000000000000000000000000000000000;;	// creating time series.
0000000000000000000000000000000000000000;;	type TimeSeries struct {
0000000000000000000000000000000000000000;;		// Metric: The associated metric. A fully-specified metric used to
0000000000000000000000000000000000000000;;		// identify the time series.
0000000000000000000000000000000000000000;;		Metric *Metric `json:"metric,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MetricKind: The metric kind of the time series. When listing time
0000000000000000000000000000000000000000;;		// series, this metric kind might be different from the metric kind of
0000000000000000000000000000000000000000;;		// the associated metric if this time series is an alignment or
0000000000000000000000000000000000000000;;		// reduction of other time series.When creating a time series, this
0000000000000000000000000000000000000000;;		// field is optional. If present, it must be the same as the metric kind
0000000000000000000000000000000000000000;;		// of the associated metric. If the associated metric's descriptor must
0000000000000000000000000000000000000000;;		// be auto-created, then this field specifies the metric kind of the new
0000000000000000000000000000000000000000;;		// descriptor and must be either GAUGE (the default) or CUMULATIVE.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "METRIC_KIND_UNSPECIFIED" - Do not use this default value.
0000000000000000000000000000000000000000;;		//   "GAUGE" - An instantaneous measurement of a value.
0000000000000000000000000000000000000000;;		//   "DELTA" - The change in a value during a time interval.
0000000000000000000000000000000000000000;;		//   "CUMULATIVE" - A value accumulated over a time interval. Cumulative
0000000000000000000000000000000000000000;;		// measurements in a time series should have the same start time and
0000000000000000000000000000000000000000;;		// increasing end times, until an event resets the cumulative value to
0000000000000000000000000000000000000000;;		// zero and sets a new start time for the following points.
0000000000000000000000000000000000000000;;		MetricKind string `json:"metricKind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Points: The data points of this time series. When listing time
0000000000000000000000000000000000000000;;		// series, the order of the points is specified by the list method.When
0000000000000000000000000000000000000000;;		// creating a time series, this field must contain exactly one point and
0000000000000000000000000000000000000000;;		// the point's type must be the same as the value type of the associated
0000000000000000000000000000000000000000;;		// metric. If the associated metric's descriptor must be auto-created,
0000000000000000000000000000000000000000;;		// then the value type of the descriptor is determined by the point's
0000000000000000000000000000000000000000;;		// type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.
0000000000000000000000000000000000000000;;		Points []*Point `json:"points,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource: The associated monitored resource. Custom metrics can use
0000000000000000000000000000000000000000;;		// only certain monitored resource types in their time series data.
0000000000000000000000000000000000000000;;		Resource *MonitoredResource `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValueType: The value type of the time series. When listing time
0000000000000000000000000000000000000000;;		// series, this value type might be different from the value type of the
0000000000000000000000000000000000000000;;		// associated metric if this time series is an alignment or reduction of
0000000000000000000000000000000000000000;;		// other time series.When creating a time series, this field is
0000000000000000000000000000000000000000;;		// optional. If present, it must be the same as the type of the data in
0000000000000000000000000000000000000000;;		// the points field.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "VALUE_TYPE_UNSPECIFIED" - Do not use this default value.
0000000000000000000000000000000000000000;;		//   "BOOL" - The value is a boolean. This value type can be used only
0000000000000000000000000000000000000000;;		// if the metric kind is GAUGE.
0000000000000000000000000000000000000000;;		//   "INT64" - The value is a signed 64-bit integer.
0000000000000000000000000000000000000000;;		//   "DOUBLE" - The value is a double precision floating point number.
0000000000000000000000000000000000000000;;		//   "STRING" - The value is a text string. This value type can be used
0000000000000000000000000000000000000000;;		// only if the metric kind is GAUGE.
0000000000000000000000000000000000000000;;		//   "DISTRIBUTION" - The value is a Distribution.
0000000000000000000000000000000000000000;;		//   "MONEY" - The value is money.
0000000000000000000000000000000000000000;;		ValueType string `json:"valueType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Metric") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Metric") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TimeSeries) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TimeSeries
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Type: A protocol buffer message type.
0000000000000000000000000000000000000000;;	type Type struct {
0000000000000000000000000000000000000000;;		// Fields: The list of fields.
0000000000000000000000000000000000000000;;		Fields []*Field `json:"fields,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The fully qualified message name.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Oneofs: The list of types appearing in oneof definitions in this
0000000000000000000000000000000000000000;;		// type.
0000000000000000000000000000000000000000;;		Oneofs []string `json:"oneofs,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Options: The protocol buffer options.
0000000000000000000000000000000000000000;;		Options []*Option `json:"options,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SourceContext: The source context.
0000000000000000000000000000000000000000;;		SourceContext *SourceContext `json:"sourceContext,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Syntax: The source syntax.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "SYNTAX_PROTO2" - Syntax proto2.
0000000000000000000000000000000000000000;;		//   "SYNTAX_PROTO3" - Syntax proto3.
0000000000000000000000000000000000000000;;		Syntax string `json:"syntax,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Fields") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Fields") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Type) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Type
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TypedValue: A single strongly-typed value.
0000000000000000000000000000000000000000;;	type TypedValue struct {
0000000000000000000000000000000000000000;;		// BoolValue: A Boolean value: true or false.
0000000000000000000000000000000000000000;;		BoolValue *bool `json:"boolValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DistributionValue: A distribution value.
0000000000000000000000000000000000000000;;		DistributionValue *Distribution `json:"distributionValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DoubleValue: A 64-bit double-precision floating-point number. Its
0000000000000000000000000000000000000000;;		// magnitude is approximately &plusmn;10<sup>&plusmn;300</sup> and it
0000000000000000000000000000000000000000;;		// has 16 significant digits of precision.
0000000000000000000000000000000000000000;;		DoubleValue *float64 `json:"doubleValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Int64Value: A 64-bit integer. Its range is approximately
0000000000000000000000000000000000000000;;		// &plusmn;9.2x10<sup>18</sup>.
0000000000000000000000000000000000000000;;		Int64Value *int64 `json:"int64Value,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StringValue: A variable-length string value.
0000000000000000000000000000000000000000;;		StringValue *string `json:"stringValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "BoolValue") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "BoolValue") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TypedValue) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TypedValue
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TypedValue) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod TypedValue
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			DoubleValue *gensupport.JSONFloat64 `json:"doubleValue"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s1.DoubleValue != nil {
0000000000000000000000000000000000000000;;			s.DoubleValue = (*float64)(s1.DoubleValue)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.collectdTimeSeries.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsCollectdTimeSeriesCreateCall struct {
0000000000000000000000000000000000000000;;		s                               *Service
0000000000000000000000000000000000000000;;		name                            string
0000000000000000000000000000000000000000;;		createcollectdtimeseriesrequest *CreateCollectdTimeSeriesRequest
0000000000000000000000000000000000000000;;		urlParams_                      gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                            context.Context
0000000000000000000000000000000000000000;;		header_                         http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Stackdriver Monitoring Agent only: Creates a new time
0000000000000000000000000000000000000000;;	// series.<aside class="caution">This method is only for use by the
0000000000000000000000000000000000000000;;	// Stackdriver Monitoring Agent. Use projects.timeSeries.create
0000000000000000000000000000000000000000;;	// instead.</aside>
0000000000000000000000000000000000000000;;	func (r *ProjectsCollectdTimeSeriesService) Create(name string, createcollectdtimeseriesrequest *CreateCollectdTimeSeriesRequest) *ProjectsCollectdTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsCollectdTimeSeriesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.createcollectdtimeseriesrequest = createcollectdtimeseriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsCollectdTimeSeriesCreateCall) Fields(s ...googleapi.Field) *ProjectsCollectdTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsCollectdTimeSeriesCreateCall) Context(ctx context.Context) *ProjectsCollectdTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsCollectdTimeSeriesCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsCollectdTimeSeriesCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.createcollectdtimeseriesrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/collectdTimeSeries")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.collectdTimeSeries.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsCollectdTimeSeriesCreateCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Stackdriver Monitoring Agent only: Creates a new time series.\u003caside class=\"caution\"\u003eThis method is only for use by the Stackdriver Monitoring Agent. Use projects.timeSeries.create instead.\u003c/aside\u003e",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/collectdTimeSeries",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.collectdTimeSeries.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project in which to create the time series. The format is \"projects/PROJECT_ID_OR_NUMBER\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/collectdTimeSeries",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CreateCollectdTimeSeriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsCreateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		name       string
0000000000000000000000000000000000000000;;		group      *Group
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a new group.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsService) Create(name string, group *Group) *ProjectsGroupsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.group = group
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateOnly sets the optional parameter "validateOnly": If true,
0000000000000000000000000000000000000000;;	// validate this request but do not create the group.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) ValidateOnly(validateOnly bool) *ProjectsGroupsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("validateOnly", fmt.Sprint(validateOnly))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) Fields(s ...googleapi.Field) *ProjectsGroupsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) Context(ctx context.Context) *ProjectsGroupsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.group)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/groups")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Group or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Group.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsCreateCall) Do(opts ...googleapi.CallOption) (*Group, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Group{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a new group.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project in which to create the group. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "validateOnly": {
0000000000000000000000000000000000000000;;		//       "description": "If true, validate this request but do not create the group.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "boolean"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/groups",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "Group"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Group"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		name       string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes an existing group.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsService) Delete(name string) *ProjectsGroupsDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsDeleteCall) Fields(s ...googleapi.Field) *ProjectsGroupsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsDeleteCall) Context(ctx context.Context) *ProjectsGroupsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes an existing group.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The group to delete. The format is \"projects/{project_id_or_number}/groups/{group_id}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/groups/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets a single group.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsService) Get(name string) *ProjectsGroupsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) Fields(s ...googleapi.Field) *ProjectsGroupsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) IfNoneMatch(entityTag string) *ProjectsGroupsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) Context(ctx context.Context) *ProjectsGroupsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Group or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Group.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsGetCall) Do(opts ...googleapi.CallOption) (*Group, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Group{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets a single group.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The group to retrieve. The format is \"projects/{project_id_or_number}/groups/{group_id}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/groups/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Group"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the existing groups.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsService) List(name string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AncestorsOfGroup sets the optional parameter "ancestorsOfGroup": A
0000000000000000000000000000000000000000;;	// group name: "projects/{project_id_or_number}/groups/{group_id}".
0000000000000000000000000000000000000000;;	// Returns groups that are ancestors of the specified group. The groups
0000000000000000000000000000000000000000;;	// are returned in order, starting with the immediate parent and ending
0000000000000000000000000000000000000000;;	// with the most distant ancestor. If the specified group has no
0000000000000000000000000000000000000000;;	// immediate parent, the results are empty.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) AncestorsOfGroup(ancestorsOfGroup string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("ancestorsOfGroup", ancestorsOfGroup)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChildrenOfGroup sets the optional parameter "childrenOfGroup": A
0000000000000000000000000000000000000000;;	// group name: "projects/{project_id_or_number}/groups/{group_id}".
0000000000000000000000000000000000000000;;	// Returns groups whose parentName field contains the group name. If no
0000000000000000000000000000000000000000;;	// groups have this parent, the results are empty.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) ChildrenOfGroup(childrenOfGroup string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("childrenOfGroup", childrenOfGroup)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DescendantsOfGroup sets the optional parameter "descendantsOfGroup":
0000000000000000000000000000000000000000;;	// A group name: "projects/{project_id_or_number}/groups/{group_id}".
0000000000000000000000000000000000000000;;	// Returns the descendants of the specified group. This is a superset of
0000000000000000000000000000000000000000;;	// the results returned by the childrenOfGroup filter, and includes
0000000000000000000000000000000000000000;;	// children-of-children, and so forth.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) DescendantsOfGroup(descendantsOfGroup string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("descendantsOfGroup", descendantsOfGroup)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": A positive number
0000000000000000000000000000000000000000;;	// that is the maximum number of results to return.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) PageSize(pageSize int64) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If this field is
0000000000000000000000000000000000000000;;	// not empty then it must contain the nextPageToken value returned by a
0000000000000000000000000000000000000000;;	// previous call to this method. Using this field causes the method to
0000000000000000000000000000000000000000;;	// return additional results from the previous method call.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) PageToken(pageToken string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) Fields(s ...googleapi.Field) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) IfNoneMatch(entityTag string) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) Context(ctx context.Context) *ProjectsGroupsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/groups")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListGroupsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListGroupsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) Do(opts ...googleapi.CallOption) (*ListGroupsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListGroupsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the existing groups.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "ancestorsOfGroup": {
0000000000000000000000000000000000000000;;		//       "description": "A group name: \"projects/{project_id_or_number}/groups/{group_id}\". Returns groups that are ancestors of the specified group. The groups are returned in order, starting with the immediate parent and ending with the most distant ancestor. If the specified group has no immediate parent, the results are empty.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "childrenOfGroup": {
0000000000000000000000000000000000000000;;		//       "description": "A group name: \"projects/{project_id_or_number}/groups/{group_id}\". Returns groups whose parentName field contains the group name. If no groups have this parent, the results are empty.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "descendantsOfGroup": {
0000000000000000000000000000000000000000;;		//       "description": "A group name: \"projects/{project_id_or_number}/groups/{group_id}\". Returns the descendants of the specified group. This is a superset of the results returned by the childrenOfGroup filter, and includes children-of-children, and so forth.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project whose groups are to be listed. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "A positive number that is the maximum number of results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/groups",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListGroupsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsListCall) Pages(ctx context.Context, f func(*ListGroupsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.update":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsUpdateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		name       string
0000000000000000000000000000000000000000;;		group      *Group
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update: Updates an existing group. You can change any group
0000000000000000000000000000000000000000;;	// attributes except name.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsService) Update(name string, group *Group) *ProjectsGroupsUpdateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.group = group
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateOnly sets the optional parameter "validateOnly": If true,
0000000000000000000000000000000000000000;;	// validate this request but do not update the existing group.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) ValidateOnly(validateOnly bool) *ProjectsGroupsUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("validateOnly", fmt.Sprint(validateOnly))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) Fields(s ...googleapi.Field) *ProjectsGroupsUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) Context(ctx context.Context) *ProjectsGroupsUpdateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.group)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PUT", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.update" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Group or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Group.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsUpdateCall) Do(opts ...googleapi.CallOption) (*Group, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Group{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Updates an existing group. You can change any group attributes except name.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PUT",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.update",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Output only. The name of this group. The format is \"projects/{project_id_or_number}/groups/{group_id}\". When creating a group, this field is ignored and a new name is created consisting of the project specified in the call to CreateGroup and a unique {group_id} that is generated automatically.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/groups/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "validateOnly": {
0000000000000000000000000000000000000000;;		//       "description": "If true, validate this request but do not update the existing group.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "boolean"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "Group"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Group"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.groups.members.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGroupsMembersListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the monitored resources that are members of a group.
0000000000000000000000000000000000000000;;	func (r *ProjectsGroupsMembersService) List(name string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGroupsMembersListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter sets the optional parameter "filter": An optional list filter
0000000000000000000000000000000000000000;;	// describing the members to be returned. The filter may reference the
0000000000000000000000000000000000000000;;	// type, labels, and metadata of monitored resources that comprise the
0000000000000000000000000000000000000000;;	// group. For example, to return only resources representing Compute
0000000000000000000000000000000000000000;;	// Engine VM instances, use this filter:
0000000000000000000000000000000000000000;;	// resource.type = "gce_instance"
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Filter(filter string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("filter", filter)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntervalEndTime sets the optional parameter "interval.endTime":
0000000000000000000000000000000000000000;;	// Required. The end of the time interval.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) IntervalEndTime(intervalEndTime string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("interval.endTime", intervalEndTime)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntervalStartTime sets the optional parameter "interval.startTime":
0000000000000000000000000000000000000000;;	// The beginning of the time interval. The default value for the start
0000000000000000000000000000000000000000;;	// time is the end time. The start time must not be later than the end
0000000000000000000000000000000000000000;;	// time.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) IntervalStartTime(intervalStartTime string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("interval.startTime", intervalStartTime)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": A positive number
0000000000000000000000000000000000000000;;	// that is the maximum number of results to return.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) PageSize(pageSize int64) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If this field is
0000000000000000000000000000000000000000;;	// not empty then it must contain the nextPageToken value returned by a
0000000000000000000000000000000000000000;;	// previous call to this method. Using this field causes the method to
0000000000000000000000000000000000000000;;	// return additional results from the previous method call.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) PageToken(pageToken string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Fields(s ...googleapi.Field) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) IfNoneMatch(entityTag string) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Context(ctx context.Context) *ProjectsGroupsMembersListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/members")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.groups.members.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListGroupMembersResponse or error will be non-nil.
0000000000000000000000000000000000000000;;	// Any non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListGroupMembersResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Do(opts ...googleapi.CallOption) (*ListGroupMembersResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListGroupMembersResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the monitored resources that are members of a group.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/groups/{groupsId}/members",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.groups.members.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "filter": {
0000000000000000000000000000000000000000;;		//       "description": "An optional list filter describing the members to be returned. The filter may reference the type, labels, and metadata of monitored resources that comprise the group. For example, to return only resources representing Compute Engine VM instances, use this filter:\nresource.type = \"gce_instance\"\n",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "interval.endTime": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The end of the time interval.",
0000000000000000000000000000000000000000;;		//       "format": "google-datetime",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "interval.startTime": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.",
0000000000000000000000000000000000000000;;		//       "format": "google-datetime",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The group whose members are listed. The format is \"projects/{project_id_or_number}/groups/{group_id}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/groups/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "A positive number that is the maximum number of results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/members",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListGroupMembersResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsGroupsMembersListCall) Pages(ctx context.Context, f func(*ListGroupMembersResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.metricDescriptors.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricDescriptorsCreateCall struct {
0000000000000000000000000000000000000000;;		s                *Service
0000000000000000000000000000000000000000;;		name             string
0000000000000000000000000000000000000000;;		metricdescriptor *MetricDescriptor
0000000000000000000000000000000000000000;;		urlParams_       gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_             context.Context
0000000000000000000000000000000000000000;;		header_          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a new metric descriptor. User-created metric
0000000000000000000000000000000000000000;;	// descriptors define custom metrics.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricDescriptorsService) Create(name string, metricdescriptor *MetricDescriptor) *ProjectsMetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricDescriptorsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.metricdescriptor = metricdescriptor
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsCreateCall) Fields(s ...googleapi.Field) *ProjectsMetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsCreateCall) Context(ctx context.Context) *ProjectsMetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.metricdescriptor)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/metricDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.metricDescriptors.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *MetricDescriptor or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *MetricDescriptor.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsCreateCall) Do(opts ...googleapi.CallOption) (*MetricDescriptor, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &MetricDescriptor{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a new metric descriptor. User-created metric descriptors define custom metrics.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.metricDescriptors.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project on which to execute the request. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "MetricDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "MetricDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.metricDescriptors.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricDescriptorsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		name       string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes a metric descriptor. Only user-created custom metrics
0000000000000000000000000000000000000000;;	// can be deleted.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricDescriptorsService) Delete(name string) *ProjectsMetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricDescriptorsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsDeleteCall) Fields(s ...googleapi.Field) *ProjectsMetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsDeleteCall) Context(ctx context.Context) *ProjectsMetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.metricDescriptors.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes a metric descriptor. Only user-created custom metrics can be deleted.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/metricDescriptors/{metricDescriptorsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.metricDescriptors.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The metric descriptor on which to execute the request. The format is \"projects/{project_id_or_number}/metricDescriptors/{metric_id}\". An example of {metric_id} is: \"custom.googleapis.com/my_test_metric\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/metricDescriptors/.+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.metricDescriptors.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricDescriptorsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets a single metric descriptor. This method does not require a
0000000000000000000000000000000000000000;;	// Stackdriver account.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricDescriptorsService) Get(name string) *ProjectsMetricDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricDescriptorsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) Fields(s ...googleapi.Field) *ProjectsMetricDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) IfNoneMatch(entityTag string) *ProjectsMetricDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) Context(ctx context.Context) *ProjectsMetricDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.metricDescriptors.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *MetricDescriptor or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *MetricDescriptor.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsGetCall) Do(opts ...googleapi.CallOption) (*MetricDescriptor, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &MetricDescriptor{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets a single metric descriptor. This method does not require a Stackdriver account.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/metricDescriptors/{metricDescriptorsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.metricDescriptors.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The metric descriptor on which to execute the request. The format is \"projects/{project_id_or_number}/metricDescriptors/{metric_id}\". An example value of {metric_id} is \"compute.googleapis.com/instance/disk/read_bytes_count\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/metricDescriptors/.+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "MetricDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.metricDescriptors.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricDescriptorsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists metric descriptors that match a filter. This method does
0000000000000000000000000000000000000000;;	// not require a Stackdriver account.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricDescriptorsService) List(name string) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricDescriptorsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter sets the optional parameter "filter": If this field is empty,
0000000000000000000000000000000000000000;;	// all custom and system-defined metric descriptors are returned.
0000000000000000000000000000000000000000;;	// Otherwise, the filter specifies which metric descriptors are to be
0000000000000000000000000000000000000000;;	// returned. For example, the following filter matches all custom
0000000000000000000000000000000000000000;;	// metrics:
0000000000000000000000000000000000000000;;	// metric.type = starts_with("custom.googleapis.com/")
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Filter(filter string) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("filter", filter)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": A positive number
0000000000000000000000000000000000000000;;	// that is the maximum number of results to return.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) PageSize(pageSize int64) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If this field is
0000000000000000000000000000000000000000;;	// not empty then it must contain the nextPageToken value returned by a
0000000000000000000000000000000000000000;;	// previous call to this method. Using this field causes the method to
0000000000000000000000000000000000000000;;	// return additional results from the previous method call.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) PageToken(pageToken string) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Fields(s ...googleapi.Field) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) IfNoneMatch(entityTag string) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Context(ctx context.Context) *ProjectsMetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/metricDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.metricDescriptors.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListMetricDescriptorsResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *ListMetricDescriptorsResponse.ServerResponse.Header or (if a
0000000000000000000000000000000000000000;;	// response was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Do(opts ...googleapi.CallOption) (*ListMetricDescriptorsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListMetricDescriptorsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists metric descriptors that match a filter. This method does not require a Stackdriver account.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.metricDescriptors.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "filter": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is empty, all custom and system-defined metric descriptors are returned. Otherwise, the filter specifies which metric descriptors are to be returned. For example, the following filter matches all custom metrics:\nmetric.type = starts_with(\"custom.googleapis.com/\")\n",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project on which to execute the request. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "A positive number that is the maximum number of results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListMetricDescriptorsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricDescriptorsListCall) Pages(ctx context.Context, f func(*ListMetricDescriptorsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.monitoredResourceDescriptors.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMonitoredResourceDescriptorsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets a single monitored resource descriptor. This method does
0000000000000000000000000000000000000000;;	// not require a Stackdriver account.
0000000000000000000000000000000000000000;;	func (r *ProjectsMonitoredResourceDescriptorsService) Get(name string) *ProjectsMonitoredResourceDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMonitoredResourceDescriptorsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) Fields(s ...googleapi.Field) *ProjectsMonitoredResourceDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) IfNoneMatch(entityTag string) *ProjectsMonitoredResourceDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) Context(ctx context.Context) *ProjectsMonitoredResourceDescriptorsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.monitoredResourceDescriptors.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *MonitoredResourceDescriptor or error will be non-nil.
0000000000000000000000000000000000000000;;	// Any non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *MonitoredResourceDescriptor.ServerResponse.Header or (if a response
0000000000000000000000000000000000000000;;	// was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsGetCall) Do(opts ...googleapi.CallOption) (*MonitoredResourceDescriptor, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &MonitoredResourceDescriptor{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets a single monitored resource descriptor. This method does not require a Stackdriver account.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/monitoredResourceDescriptors/{monitoredResourceDescriptorsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.monitoredResourceDescriptors.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The monitored resource descriptor to get. The format is \"projects/{project_id_or_number}/monitoredResourceDescriptors/{resource_type}\". The {resource_type} is a predefined type, such as cloudsql_database.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/monitoredResourceDescriptors/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "MonitoredResourceDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.monitoredResourceDescriptors.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMonitoredResourceDescriptorsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists monitored resource descriptors that match a filter. This
0000000000000000000000000000000000000000;;	// method does not require a Stackdriver account.
0000000000000000000000000000000000000000;;	func (r *ProjectsMonitoredResourceDescriptorsService) List(name string) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMonitoredResourceDescriptorsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter sets the optional parameter "filter": An optional filter
0000000000000000000000000000000000000000;;	// describing the descriptors to be returned. The filter can reference
0000000000000000000000000000000000000000;;	// the descriptor's type and labels. For example, the following filter
0000000000000000000000000000000000000000;;	// returns only Google Compute Engine descriptors that have an id
0000000000000000000000000000000000000000;;	// label:
0000000000000000000000000000000000000000;;	// resource.type = starts_with("gce_") AND resource.label:id
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Filter(filter string) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("filter", filter)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": A positive number
0000000000000000000000000000000000000000;;	// that is the maximum number of results to return.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) PageSize(pageSize int64) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If this field is
0000000000000000000000000000000000000000;;	// not empty then it must contain the nextPageToken value returned by a
0000000000000000000000000000000000000000;;	// previous call to this method. Using this field causes the method to
0000000000000000000000000000000000000000;;	// return additional results from the previous method call.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) PageToken(pageToken string) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Fields(s ...googleapi.Field) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) IfNoneMatch(entityTag string) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Context(ctx context.Context) *ProjectsMonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/monitoredResourceDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.monitoredResourceDescriptors.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListMonitoredResourceDescriptorsResponse or error
0000000000000000000000000000000000000000;;	// will be non-nil. Any non-2xx status code is an error. Response
0000000000000000000000000000000000000000;;	// headers are in either
0000000000000000000000000000000000000000;;	// *ListMonitoredResourceDescriptorsResponse.ServerResponse.Header or
0000000000000000000000000000000000000000;;	// (if a response was returned at all) in
0000000000000000000000000000000000000000;;	// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
0000000000000000000000000000000000000000;;	// whether the returned error was because http.StatusNotModified was
0000000000000000000000000000000000000000;;	// returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Do(opts ...googleapi.CallOption) (*ListMonitoredResourceDescriptorsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListMonitoredResourceDescriptorsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists monitored resource descriptors that match a filter. This method does not require a Stackdriver account.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/monitoredResourceDescriptors",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.monitoredResourceDescriptors.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "filter": {
0000000000000000000000000000000000000000;;		//       "description": "An optional filter describing the descriptors to be returned. The filter can reference the descriptor's type and labels. For example, the following filter returns only Google Compute Engine descriptors that have an id label:\nresource.type = starts_with(\"gce_\") AND resource.label:id\n",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project on which to execute the request. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "A positive number that is the maximum number of results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/monitoredResourceDescriptors",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListMonitoredResourceDescriptorsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsMonitoredResourceDescriptorsListCall) Pages(ctx context.Context, f func(*ListMonitoredResourceDescriptorsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.timeSeries.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsTimeSeriesCreateCall struct {
0000000000000000000000000000000000000000;;		s                       *Service
0000000000000000000000000000000000000000;;		name                    string
0000000000000000000000000000000000000000;;		createtimeseriesrequest *CreateTimeSeriesRequest
0000000000000000000000000000000000000000;;		urlParams_              gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                    context.Context
0000000000000000000000000000000000000000;;		header_                 http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates or adds data to one or more time series. The response
0000000000000000000000000000000000000000;;	// is empty if all time series in the request were written. If any time
0000000000000000000000000000000000000000;;	// series could not be written, a corresponding failure message is
0000000000000000000000000000000000000000;;	// included in the error response.
0000000000000000000000000000000000000000;;	func (r *ProjectsTimeSeriesService) Create(name string, createtimeseriesrequest *CreateTimeSeriesRequest) *ProjectsTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsTimeSeriesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.createtimeseriesrequest = createtimeseriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesCreateCall) Fields(s ...googleapi.Field) *ProjectsTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesCreateCall) Context(ctx context.Context) *ProjectsTimeSeriesCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.createtimeseriesrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/timeSeries")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.timeSeries.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesCreateCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates or adds data to one or more time series. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/timeSeries",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.timeSeries.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project on which to execute the request. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/timeSeries",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CreateTimeSeriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "monitoring.projects.timeSeries.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsTimeSeriesListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists time series that match a filter. This method does not
0000000000000000000000000000000000000000;;	// require a Stackdriver account.
0000000000000000000000000000000000000000;;	func (r *ProjectsTimeSeriesService) List(name string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsTimeSeriesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AggregationAlignmentPeriod sets the optional parameter
0000000000000000000000000000000000000000;;	// "aggregation.alignmentPeriod": The alignment period for per-time
0000000000000000000000000000000000000000;;	// series alignment. If present, alignmentPeriod must be at least 60
0000000000000000000000000000000000000000;;	// seconds. After per-time series alignment, each time series will
0000000000000000000000000000000000000000;;	// contain data points only on the period boundaries. If
0000000000000000000000000000000000000000;;	// perSeriesAligner is not specified or equals ALIGN_NONE, then this
0000000000000000000000000000000000000000;;	// field is ignored. If perSeriesAligner is specified and does not equal
0000000000000000000000000000000000000000;;	// ALIGN_NONE, then this field must be defined; otherwise an error is
0000000000000000000000000000000000000000;;	// returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) AggregationAlignmentPeriod(aggregationAlignmentPeriod string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("aggregation.alignmentPeriod", aggregationAlignmentPeriod)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AggregationCrossSeriesReducer sets the optional parameter
0000000000000000000000000000000000000000;;	// "aggregation.crossSeriesReducer": The approach to be used to combine
0000000000000000000000000000000000000000;;	// time series. Not all reducer functions may be applied to all time
0000000000000000000000000000000000000000;;	// series, depending on the metric type and the value type of the
0000000000000000000000000000000000000000;;	// original time series. Reduction may change the metric type of value
0000000000000000000000000000000000000000;;	// type of the time series.Time series data must be aligned in order to
0000000000000000000000000000000000000000;;	// perform cross-time series reduction. If crossSeriesReducer is
0000000000000000000000000000000000000000;;	// specified, then perSeriesAligner must be specified and not equal
0000000000000000000000000000000000000000;;	// ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error
0000000000000000000000000000000000000000;;	// is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "REDUCE_NONE"
0000000000000000000000000000000000000000;;	//   "REDUCE_MEAN"
0000000000000000000000000000000000000000;;	//   "REDUCE_MIN"
0000000000000000000000000000000000000000;;	//   "REDUCE_MAX"
0000000000000000000000000000000000000000;;	//   "REDUCE_SUM"
0000000000000000000000000000000000000000;;	//   "REDUCE_STDDEV"
0000000000000000000000000000000000000000;;	//   "REDUCE_COUNT"
0000000000000000000000000000000000000000;;	//   "REDUCE_COUNT_TRUE"
0000000000000000000000000000000000000000;;	//   "REDUCE_FRACTION_TRUE"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_99"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_95"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_50"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_05"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) AggregationCrossSeriesReducer(aggregationCrossSeriesReducer string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("aggregation.crossSeriesReducer", aggregationCrossSeriesReducer)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AggregationGroupByFields sets the optional parameter
0000000000000000000000000000000000000000;;	// "aggregation.groupByFields": The set of fields to preserve when
0000000000000000000000000000000000000000;;	// crossSeriesReducer is specified. The groupByFields determine how the
0000000000000000000000000000000000000000;;	// time series are partitioned into subsets prior to applying the
0000000000000000000000000000000000000000;;	// aggregation function. Each subset contains time series that have the
0000000000000000000000000000000000000000;;	// same value for each of the grouping fields. Each individual time
0000000000000000000000000000000000000000;;	// series is a member of exactly one subset. The crossSeriesReducer is
0000000000000000000000000000000000000000;;	// applied to each subset of time series. It is not possible to reduce
0000000000000000000000000000000000000000;;	// across different resource types, so this field implicitly contains
0000000000000000000000000000000000000000;;	// resource.type. Fields not specified in groupByFields are aggregated
0000000000000000000000000000000000000000;;	// away. If groupByFields is not specified and all the time series have
0000000000000000000000000000000000000000;;	// the same resource type, then the time series are aggregated into a
0000000000000000000000000000000000000000;;	// single output time series. If crossSeriesReducer is not defined, this
0000000000000000000000000000000000000000;;	// field is ignored.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) AggregationGroupByFields(aggregationGroupByFields ...string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.SetMulti("aggregation.groupByFields", append([]string{}, aggregationGroupByFields...))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AggregationPerSeriesAligner sets the optional parameter
0000000000000000000000000000000000000000;;	// "aggregation.perSeriesAligner": The approach to be used to align
0000000000000000000000000000000000000000;;	// individual time series. Not all alignment functions may be applied to
0000000000000000000000000000000000000000;;	// all time series, depending on the metric type and value type of the
0000000000000000000000000000000000000000;;	// original time series. Alignment may change the metric type or the
0000000000000000000000000000000000000000;;	// value type of the time series.Time series data must be aligned in
0000000000000000000000000000000000000000;;	// order to perform cross-time series reduction. If crossSeriesReducer
0000000000000000000000000000000000000000;;	// is specified, then perSeriesAligner must be specified and not equal
0000000000000000000000000000000000000000;;	// ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error
0000000000000000000000000000000000000000;;	// is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "ALIGN_NONE"
0000000000000000000000000000000000000000;;	//   "ALIGN_DELTA"
0000000000000000000000000000000000000000;;	//   "ALIGN_RATE"
0000000000000000000000000000000000000000;;	//   "ALIGN_INTERPOLATE"
0000000000000000000000000000000000000000;;	//   "ALIGN_NEXT_OLDER"
0000000000000000000000000000000000000000;;	//   "ALIGN_MIN"
0000000000000000000000000000000000000000;;	//   "ALIGN_MAX"
0000000000000000000000000000000000000000;;	//   "ALIGN_MEAN"
0000000000000000000000000000000000000000;;	//   "ALIGN_COUNT"
0000000000000000000000000000000000000000;;	//   "ALIGN_SUM"
0000000000000000000000000000000000000000;;	//   "ALIGN_STDDEV"
0000000000000000000000000000000000000000;;	//   "ALIGN_COUNT_TRUE"
0000000000000000000000000000000000000000;;	//   "ALIGN_FRACTION_TRUE"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_99"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_95"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_50"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_05"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) AggregationPerSeriesAligner(aggregationPerSeriesAligner string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("aggregation.perSeriesAligner", aggregationPerSeriesAligner)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter sets the optional parameter "filter": A monitoring filter that
0000000000000000000000000000000000000000;;	// specifies which time series should be returned. The filter must
0000000000000000000000000000000000000000;;	// specify a single metric type, and can additionally specify metric
0000000000000000000000000000000000000000;;	// labels and other information. For example:
0000000000000000000000000000000000000000;;	// metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
0000000000000000000000000000000000000000;;	//     metric.label.instance_name = "my-instance-name"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Filter(filter string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("filter", filter)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntervalEndTime sets the optional parameter "interval.endTime":
0000000000000000000000000000000000000000;;	// Required. The end of the time interval.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) IntervalEndTime(intervalEndTime string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("interval.endTime", intervalEndTime)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IntervalStartTime sets the optional parameter "interval.startTime":
0000000000000000000000000000000000000000;;	// The beginning of the time interval. The default value for the start
0000000000000000000000000000000000000000;;	// time is the end time. The start time must not be later than the end
0000000000000000000000000000000000000000;;	// time.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) IntervalStartTime(intervalStartTime string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("interval.startTime", intervalStartTime)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OrderBy sets the optional parameter "orderBy": Specifies the order in
0000000000000000000000000000000000000000;;	// which the points of the time series should be returned. By default,
0000000000000000000000000000000000000000;;	// results are not ordered. Currently, this field must be left blank.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) OrderBy(orderBy string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("orderBy", orderBy)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": A positive number
0000000000000000000000000000000000000000;;	// that is the maximum number of results to return. When view field sets
0000000000000000000000000000000000000000;;	// to FULL, it limits the number of Points server will return; if view
0000000000000000000000000000000000000000;;	// field is HEADERS, it limits the number of TimeSeries server will
0000000000000000000000000000000000000000;;	// return.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) PageSize(pageSize int64) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If this field is
0000000000000000000000000000000000000000;;	// not empty then it must contain the nextPageToken value returned by a
0000000000000000000000000000000000000000;;	// previous call to this method. Using this field causes the method to
0000000000000000000000000000000000000000;;	// return additional results from the previous method call.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) PageToken(pageToken string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecondaryAggregationAlignmentPeriod sets the optional parameter
0000000000000000000000000000000000000000;;	// "secondaryAggregation.alignmentPeriod": The alignment period for
0000000000000000000000000000000000000000;;	// per-time series alignment. If present, alignmentPeriod must be at
0000000000000000000000000000000000000000;;	// least 60 seconds. After per-time series alignment, each time series
0000000000000000000000000000000000000000;;	// will contain data points only on the period boundaries. If
0000000000000000000000000000000000000000;;	// perSeriesAligner is not specified or equals ALIGN_NONE, then this
0000000000000000000000000000000000000000;;	// field is ignored. If perSeriesAligner is specified and does not equal
0000000000000000000000000000000000000000;;	// ALIGN_NONE, then this field must be defined; otherwise an error is
0000000000000000000000000000000000000000;;	// returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) SecondaryAggregationAlignmentPeriod(secondaryAggregationAlignmentPeriod string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("secondaryAggregation.alignmentPeriod", secondaryAggregationAlignmentPeriod)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecondaryAggregationCrossSeriesReducer sets the optional parameter
0000000000000000000000000000000000000000;;	// "secondaryAggregation.crossSeriesReducer": The approach to be used to
0000000000000000000000000000000000000000;;	// combine time series. Not all reducer functions may be applied to all
0000000000000000000000000000000000000000;;	// time series, depending on the metric type and the value type of the
0000000000000000000000000000000000000000;;	// original time series. Reduction may change the metric type of value
0000000000000000000000000000000000000000;;	// type of the time series.Time series data must be aligned in order to
0000000000000000000000000000000000000000;;	// perform cross-time series reduction. If crossSeriesReducer is
0000000000000000000000000000000000000000;;	// specified, then perSeriesAligner must be specified and not equal
0000000000000000000000000000000000000000;;	// ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error
0000000000000000000000000000000000000000;;	// is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "REDUCE_NONE"
0000000000000000000000000000000000000000;;	//   "REDUCE_MEAN"
0000000000000000000000000000000000000000;;	//   "REDUCE_MIN"
0000000000000000000000000000000000000000;;	//   "REDUCE_MAX"
0000000000000000000000000000000000000000;;	//   "REDUCE_SUM"
0000000000000000000000000000000000000000;;	//   "REDUCE_STDDEV"
0000000000000000000000000000000000000000;;	//   "REDUCE_COUNT"
0000000000000000000000000000000000000000;;	//   "REDUCE_COUNT_TRUE"
0000000000000000000000000000000000000000;;	//   "REDUCE_FRACTION_TRUE"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_99"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_95"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_50"
0000000000000000000000000000000000000000;;	//   "REDUCE_PERCENTILE_05"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) SecondaryAggregationCrossSeriesReducer(secondaryAggregationCrossSeriesReducer string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("secondaryAggregation.crossSeriesReducer", secondaryAggregationCrossSeriesReducer)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecondaryAggregationGroupByFields sets the optional parameter
0000000000000000000000000000000000000000;;	// "secondaryAggregation.groupByFields": The set of fields to preserve
0000000000000000000000000000000000000000;;	// when crossSeriesReducer is specified. The groupByFields determine how
0000000000000000000000000000000000000000;;	// the time series are partitioned into subsets prior to applying the
0000000000000000000000000000000000000000;;	// aggregation function. Each subset contains time series that have the
0000000000000000000000000000000000000000;;	// same value for each of the grouping fields. Each individual time
0000000000000000000000000000000000000000;;	// series is a member of exactly one subset. The crossSeriesReducer is
0000000000000000000000000000000000000000;;	// applied to each subset of time series. It is not possible to reduce
0000000000000000000000000000000000000000;;	// across different resource types, so this field implicitly contains
0000000000000000000000000000000000000000;;	// resource.type. Fields not specified in groupByFields are aggregated
0000000000000000000000000000000000000000;;	// away. If groupByFields is not specified and all the time series have
0000000000000000000000000000000000000000;;	// the same resource type, then the time series are aggregated into a
0000000000000000000000000000000000000000;;	// single output time series. If crossSeriesReducer is not defined, this
0000000000000000000000000000000000000000;;	// field is ignored.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) SecondaryAggregationGroupByFields(secondaryAggregationGroupByFields ...string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.SetMulti("secondaryAggregation.groupByFields", append([]string{}, secondaryAggregationGroupByFields...))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SecondaryAggregationPerSeriesAligner sets the optional parameter
0000000000000000000000000000000000000000;;	// "secondaryAggregation.perSeriesAligner": The approach to be used to
0000000000000000000000000000000000000000;;	// align individual time series. Not all alignment functions may be
0000000000000000000000000000000000000000;;	// applied to all time series, depending on the metric type and value
0000000000000000000000000000000000000000;;	// type of the original time series. Alignment may change the metric
0000000000000000000000000000000000000000;;	// type or the value type of the time series.Time series data must be
0000000000000000000000000000000000000000;;	// aligned in order to perform cross-time series reduction. If
0000000000000000000000000000000000000000;;	// crossSeriesReducer is specified, then perSeriesAligner must be
0000000000000000000000000000000000000000;;	// specified and not equal ALIGN_NONE and alignmentPeriod must be
0000000000000000000000000000000000000000;;	// specified; otherwise, an error is returned.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "ALIGN_NONE"
0000000000000000000000000000000000000000;;	//   "ALIGN_DELTA"
0000000000000000000000000000000000000000;;	//   "ALIGN_RATE"
0000000000000000000000000000000000000000;;	//   "ALIGN_INTERPOLATE"
0000000000000000000000000000000000000000;;	//   "ALIGN_NEXT_OLDER"
0000000000000000000000000000000000000000;;	//   "ALIGN_MIN"
0000000000000000000000000000000000000000;;	//   "ALIGN_MAX"
0000000000000000000000000000000000000000;;	//   "ALIGN_MEAN"
0000000000000000000000000000000000000000;;	//   "ALIGN_COUNT"
0000000000000000000000000000000000000000;;	//   "ALIGN_SUM"
0000000000000000000000000000000000000000;;	//   "ALIGN_STDDEV"
0000000000000000000000000000000000000000;;	//   "ALIGN_COUNT_TRUE"
0000000000000000000000000000000000000000;;	//   "ALIGN_FRACTION_TRUE"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_99"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_95"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_50"
0000000000000000000000000000000000000000;;	//   "ALIGN_PERCENTILE_05"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) SecondaryAggregationPerSeriesAligner(secondaryAggregationPerSeriesAligner string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("secondaryAggregation.perSeriesAligner", secondaryAggregationPerSeriesAligner)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// View sets the optional parameter "view": Specifies which information
0000000000000000000000000000000000000000;;	// is returned about the time series.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "FULL"
0000000000000000000000000000000000000000;;	//   "HEADERS"
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) View(view string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("view", view)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Fields(s ...googleapi.Field) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) IfNoneMatch(entityTag string) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Context(ctx context.Context) *ProjectsTimeSeriesListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v3/{+name}/timeSeries")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "monitoring.projects.timeSeries.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListTimeSeriesResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListTimeSeriesResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Do(opts ...googleapi.CallOption) (*ListTimeSeriesResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListTimeSeriesResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists time series that match a filter. This method does not require a Stackdriver account.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v3/projects/{projectsId}/timeSeries",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "monitoring.projects.timeSeries.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "aggregation.alignmentPeriod": {
0000000000000000000000000000000000000000;;		//       "description": "The alignment period for per-time series alignment. If present, alignmentPeriod must be at least 60 seconds. After per-time series alignment, each time series will contain data points only on the period boundaries. If perSeriesAligner is not specified or equals ALIGN_NONE, then this field is ignored. If perSeriesAligner is specified and does not equal ALIGN_NONE, then this field must be defined; otherwise an error is returned.",
0000000000000000000000000000000000000000;;		//       "format": "google-duration",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "aggregation.crossSeriesReducer": {
0000000000000000000000000000000000000000;;		//       "description": "The approach to be used to combine time series. Not all reducer functions may be applied to all time series, depending on the metric type and the value type of the original time series. Reduction may change the metric type of value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "REDUCE_NONE",
0000000000000000000000000000000000000000;;		//         "REDUCE_MEAN",
0000000000000000000000000000000000000000;;		//         "REDUCE_MIN",
0000000000000000000000000000000000000000;;		//         "REDUCE_MAX",
0000000000000000000000000000000000000000;;		//         "REDUCE_SUM",
0000000000000000000000000000000000000000;;		//         "REDUCE_STDDEV",
0000000000000000000000000000000000000000;;		//         "REDUCE_COUNT",
0000000000000000000000000000000000000000;;		//         "REDUCE_COUNT_TRUE",
0000000000000000000000000000000000000000;;		//         "REDUCE_FRACTION_TRUE",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_99",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_95",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_50",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_05"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "aggregation.groupByFields": {
0000000000000000000000000000000000000000;;		//       "description": "The set of fields to preserve when crossSeriesReducer is specified. The groupByFields determine how the time series are partitioned into subsets prior to applying the aggregation function. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The crossSeriesReducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in groupByFields are aggregated away. If groupByFields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If crossSeriesReducer is not defined, this field is ignored.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "repeated": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "aggregation.perSeriesAligner": {
0000000000000000000000000000000000000000;;		//       "description": "The approach to be used to align individual time series. Not all alignment functions may be applied to all time series, depending on the metric type and value type of the original time series. Alignment may change the metric type or the value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "ALIGN_NONE",
0000000000000000000000000000000000000000;;		//         "ALIGN_DELTA",
0000000000000000000000000000000000000000;;		//         "ALIGN_RATE",
0000000000000000000000000000000000000000;;		//         "ALIGN_INTERPOLATE",
0000000000000000000000000000000000000000;;		//         "ALIGN_NEXT_OLDER",
0000000000000000000000000000000000000000;;		//         "ALIGN_MIN",
0000000000000000000000000000000000000000;;		//         "ALIGN_MAX",
0000000000000000000000000000000000000000;;		//         "ALIGN_MEAN",
0000000000000000000000000000000000000000;;		//         "ALIGN_COUNT",
0000000000000000000000000000000000000000;;		//         "ALIGN_SUM",
0000000000000000000000000000000000000000;;		//         "ALIGN_STDDEV",
0000000000000000000000000000000000000000;;		//         "ALIGN_COUNT_TRUE",
0000000000000000000000000000000000000000;;		//         "ALIGN_FRACTION_TRUE",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_99",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_95",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_50",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_05"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "filter": {
0000000000000000000000000000000000000000;;		//       "description": "A monitoring filter that specifies which time series should be returned. The filter must specify a single metric type, and can additionally specify metric labels and other information. For example:\nmetric.type = \"compute.googleapis.com/instance/cpu/usage_time\" AND\n    metric.label.instance_name = \"my-instance-name\"\n",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "interval.endTime": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The end of the time interval.",
0000000000000000000000000000000000000000;;		//       "format": "google-datetime",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "interval.startTime": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The beginning of the time interval. The default value for the start time is the end time. The start time must not be later than the end time.",
0000000000000000000000000000000000000000;;		//       "format": "google-datetime",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The project on which to execute the request. The format is \"projects/{project_id_or_number}\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "orderBy": {
0000000000000000000000000000000000000000;;		//       "description": "Specifies the order in which the points of the time series should be returned. By default, results are not ordered. Currently, this field must be left blank.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "A positive number that is the maximum number of results to return. When view field sets to FULL, it limits the number of Points server will return; if view field is HEADERS, it limits the number of TimeSeries server will return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "If this field is not empty then it must contain the nextPageToken value returned by a previous call to this method. Using this field causes the method to return additional results from the previous method call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "secondaryAggregation.alignmentPeriod": {
0000000000000000000000000000000000000000;;		//       "description": "The alignment period for per-time series alignment. If present, alignmentPeriod must be at least 60 seconds. After per-time series alignment, each time series will contain data points only on the period boundaries. If perSeriesAligner is not specified or equals ALIGN_NONE, then this field is ignored. If perSeriesAligner is specified and does not equal ALIGN_NONE, then this field must be defined; otherwise an error is returned.",
0000000000000000000000000000000000000000;;		//       "format": "google-duration",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "secondaryAggregation.crossSeriesReducer": {
0000000000000000000000000000000000000000;;		//       "description": "The approach to be used to combine time series. Not all reducer functions may be applied to all time series, depending on the metric type and the value type of the original time series. Reduction may change the metric type of value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "REDUCE_NONE",
0000000000000000000000000000000000000000;;		//         "REDUCE_MEAN",
0000000000000000000000000000000000000000;;		//         "REDUCE_MIN",
0000000000000000000000000000000000000000;;		//         "REDUCE_MAX",
0000000000000000000000000000000000000000;;		//         "REDUCE_SUM",
0000000000000000000000000000000000000000;;		//         "REDUCE_STDDEV",
0000000000000000000000000000000000000000;;		//         "REDUCE_COUNT",
0000000000000000000000000000000000000000;;		//         "REDUCE_COUNT_TRUE",
0000000000000000000000000000000000000000;;		//         "REDUCE_FRACTION_TRUE",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_99",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_95",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_50",
0000000000000000000000000000000000000000;;		//         "REDUCE_PERCENTILE_05"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "secondaryAggregation.groupByFields": {
0000000000000000000000000000000000000000;;		//       "description": "The set of fields to preserve when crossSeriesReducer is specified. The groupByFields determine how the time series are partitioned into subsets prior to applying the aggregation function. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The crossSeriesReducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in groupByFields are aggregated away. If groupByFields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If crossSeriesReducer is not defined, this field is ignored.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "repeated": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "secondaryAggregation.perSeriesAligner": {
0000000000000000000000000000000000000000;;		//       "description": "The approach to be used to align individual time series. Not all alignment functions may be applied to all time series, depending on the metric type and value type of the original time series. Alignment may change the metric type or the value type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If crossSeriesReducer is specified, then perSeriesAligner must be specified and not equal ALIGN_NONE and alignmentPeriod must be specified; otherwise, an error is returned.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "ALIGN_NONE",
0000000000000000000000000000000000000000;;		//         "ALIGN_DELTA",
0000000000000000000000000000000000000000;;		//         "ALIGN_RATE",
0000000000000000000000000000000000000000;;		//         "ALIGN_INTERPOLATE",
0000000000000000000000000000000000000000;;		//         "ALIGN_NEXT_OLDER",
0000000000000000000000000000000000000000;;		//         "ALIGN_MIN",
0000000000000000000000000000000000000000;;		//         "ALIGN_MAX",
0000000000000000000000000000000000000000;;		//         "ALIGN_MEAN",
0000000000000000000000000000000000000000;;		//         "ALIGN_COUNT",
0000000000000000000000000000000000000000;;		//         "ALIGN_SUM",
0000000000000000000000000000000000000000;;		//         "ALIGN_STDDEV",
0000000000000000000000000000000000000000;;		//         "ALIGN_COUNT_TRUE",
0000000000000000000000000000000000000000;;		//         "ALIGN_FRACTION_TRUE",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_99",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_95",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_50",
0000000000000000000000000000000000000000;;		//         "ALIGN_PERCENTILE_05"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "view": {
0000000000000000000000000000000000000000;;		//       "description": "Specifies which information is returned about the time series.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "FULL",
0000000000000000000000000000000000000000;;		//         "HEADERS"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v3/{+name}/timeSeries",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListTimeSeriesResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsTimeSeriesListCall) Pages(ctx context.Context, f func(*ListTimeSeriesResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
