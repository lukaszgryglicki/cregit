0000000000000000000000000000000000000000;;	// Package dns provides access to the Google Cloud DNS API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://developers.google.com/cloud-dns
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/dns/v1"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   dnsService, err := dns.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package dns
9f9f0346e80a20cbbdacc5015ec805ee2aa07d38;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "dns:v1"
0000000000000000000000000000000000000000;;	const apiName = "dns"
0000000000000000000000000000000000000000;;	const apiVersion = "v1"
0000000000000000000000000000000000000000;;	const basePath = "https://www.googleapis.com/dns/v1/projects/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformReadOnlyScope = "https://www.googleapis.com/auth/cloud-platform.read-only"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View your DNS records hosted by Google Cloud DNS
0000000000000000000000000000000000000000;;		NdevClouddnsReadonlyScope = "https://www.googleapis.com/auth/ndev.clouddns.readonly"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View and manage your DNS records hosted by Google Cloud DNS
0000000000000000000000000000000000000000;;		NdevClouddnsReadwriteScope = "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.Changes = NewChangesService(s)
0000000000000000000000000000000000000000;;		s.ManagedZones = NewManagedZonesService(s)
0000000000000000000000000000000000000000;;		s.Projects = NewProjectsService(s)
0000000000000000000000000000000000000000;;		s.ResourceRecordSets = NewResourceRecordSetsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Changes *ChangesService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedZones *ManagedZonesService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Projects *ProjectsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceRecordSets *ResourceRecordSetsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewChangesService(s *Service) *ChangesService {
0000000000000000000000000000000000000000;;		rs := &ChangesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewManagedZonesService(s *Service) *ManagedZonesService {
0000000000000000000000000000000000000000;;		rs := &ManagedZonesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsService(s *Service) *ProjectsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourceRecordSetsService(s *Service) *ResourceRecordSetsService {
0000000000000000000000000000000000000000;;		rs := &ResourceRecordSetsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSetsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Change: An atomic update to a collection of ResourceRecordSets.
0000000000000000000000000000000000000000;;	type Change struct {
0000000000000000000000000000000000000000;;		// Additions: Which ResourceRecordSets to add?
0000000000000000000000000000000000000000;;		Additions []*ResourceRecordSet `json:"additions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Deletions: Which ResourceRecordSets to remove? Must match existing
0000000000000000000000000000000000000000;;		// data exactly.
0000000000000000000000000000000000000000;;		Deletions []*ResourceRecordSet `json:"deletions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Id: Unique identifier for the resource; defined by the server (output
0000000000000000000000000000000000000000;;		// only).
0000000000000000000000000000000000000000;;		Id string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "dns#change".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartTime: The time that this operation was started by the server
0000000000000000000000000000000000000000;;		// (output only). This is in RFC3339 text format.
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: Status of the operation (output only).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "done"
0000000000000000000000000000000000000000;;		//   "pending"
0000000000000000000000000000000000000000;;		Status string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Additions") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Additions") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Change) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Change
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ChangesListResponse: The response to a request to enumerate Changes
0000000000000000000000000000000000000000;;	// to a ResourceRecordSets collection.
0000000000000000000000000000000000000000;;	type ChangesListResponse struct {
0000000000000000000000000000000000000000;;		// Changes: The requested changes.
0000000000000000000000000000000000000000;;		Changes []*Change `json:"changes,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind: Type of resource.
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: The presence of this field indicates that there exist
0000000000000000000000000000000000000000;;		// more results following your last page of results in pagination order.
0000000000000000000000000000000000000000;;		// To fetch them, make another list request using this value as your
0000000000000000000000000000000000000000;;		// pagination token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this way you can retrieve the complete contents of even very large
0000000000000000000000000000000000000000;;		// collections one page at a time. However, if the contents of the
0000000000000000000000000000000000000000;;		// collection change between the first and last paginated list request,
0000000000000000000000000000000000000000;;		// the set of all elements returned will be an inconsistent view of the
0000000000000000000000000000000000000000;;		// collection. There is no way to retrieve a "snapshot" of collections
0000000000000000000000000000000000000000;;		// larger than the maximum page size.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Changes") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Changes") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ChangesListResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ChangesListResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ManagedZone: A zone is a subtree of the DNS namespace under one
0000000000000000000000000000000000000000;;	// administrative responsibility. A ManagedZone is a resource that
0000000000000000000000000000000000000000;;	// represents a DNS zone hosted by the Cloud DNS service.
0000000000000000000000000000000000000000;;	type ManagedZone struct {
0000000000000000000000000000000000000000;;		// CreationTime: The time that this resource was created on the server.
0000000000000000000000000000000000000000;;		// This is in RFC3339 text format. Output only.
0000000000000000000000000000000000000000;;		CreationTime string `json:"creationTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description: A mutable string of at most 1024 characters associated
0000000000000000000000000000000000000000;;		// with this resource for the user's convenience. Has no effect on the
0000000000000000000000000000000000000000;;		// managed zone's function.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DnsName: The DNS name of this managed zone, for instance
0000000000000000000000000000000000000000;;		// "example.com.".
0000000000000000000000000000000000000000;;		DnsName string `json:"dnsName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Id: Unique identifier for the resource; defined by the server (output
0000000000000000000000000000000000000000;;		// only)
0000000000000000000000000000000000000000;;		Id uint64 `json:"id,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "dns#managedZone".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: User assigned name for this resource. Must be unique within the
0000000000000000000000000000000000000000;;		// project. The name must be 1-63 characters long, must begin with a
0000000000000000000000000000000000000000;;		// letter, end with a letter or digit, and only contain lowercase
0000000000000000000000000000000000000000;;		// letters, digits or dashes.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NameServerSet: Optionally specifies the NameServerSet for this
0000000000000000000000000000000000000000;;		// ManagedZone. A NameServerSet is a set of DNS name servers that all
0000000000000000000000000000000000000000;;		// host the same ManagedZones. Most users will leave this field unset.
0000000000000000000000000000000000000000;;		NameServerSet string `json:"nameServerSet,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NameServers: Delegate your managed_zone to these virtual name
0000000000000000000000000000000000000000;;		// servers; defined by the server (output only)
0000000000000000000000000000000000000000;;		NameServers []string `json:"nameServers,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CreationTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CreationTime") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ManagedZone) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ManagedZone
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesListResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Type of resource.
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ManagedZones: The managed zone resources.
0000000000000000000000000000000000000000;;		ManagedZones []*ManagedZone `json:"managedZones,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: The presence of this field indicates that there exist
0000000000000000000000000000000000000000;;		// more results following your last page of results in pagination order.
0000000000000000000000000000000000000000;;		// To fetch them, make another list request using this value as your
0000000000000000000000000000000000000000;;		// page token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this way you can retrieve the complete contents of even very large
0000000000000000000000000000000000000000;;		// collections one page at a time. However, if the contents of the
0000000000000000000000000000000000000000;;		// collection change between the first and last paginated list request,
0000000000000000000000000000000000000000;;		// the set of all elements returned will be an inconsistent view of the
0000000000000000000000000000000000000000;;		// collection. There is no way to retrieve a consistent snapshot of a
0000000000000000000000000000000000000000;;		// collection larger than the maximum page size.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ManagedZonesListResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ManagedZonesListResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Project: A project resource. The project is a top level container for
0000000000000000000000000000000000000000;;	// resources including Cloud DNS ManagedZones. Projects can be created
0000000000000000000000000000000000000000;;	// only in the APIs console.
0000000000000000000000000000000000000000;;	type Project struct {
0000000000000000000000000000000000000000;;		// Id: User assigned unique identifier for the resource (output only).
0000000000000000000000000000000000000000;;		Id string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "dns#project".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Number: Unique numeric identifier for the resource; defined by the
0000000000000000000000000000000000000000;;		// server (output only).
0000000000000000000000000000000000000000;;		Number uint64 `json:"number,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Quota: Quotas assigned to this project (output only).
0000000000000000000000000000000000000000;;		Quota *Quota `json:"quota,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Id") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Id") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Project) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Project
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Quota: Limits associated with a Project.
0000000000000000000000000000000000000000;;	type Quota struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "dns#quota".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ManagedZones: Maximum allowed number of managed zones in the project.
0000000000000000000000000000000000000000;;		ManagedZones int64 `json:"managedZones,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceRecordsPerRrset: Maximum allowed number of ResourceRecords
0000000000000000000000000000000000000000;;		// per ResourceRecordSet.
0000000000000000000000000000000000000000;;		ResourceRecordsPerRrset int64 `json:"resourceRecordsPerRrset,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RrsetAdditionsPerChange: Maximum allowed number of ResourceRecordSets
0000000000000000000000000000000000000000;;		// to add per ChangesCreateRequest.
0000000000000000000000000000000000000000;;		RrsetAdditionsPerChange int64 `json:"rrsetAdditionsPerChange,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RrsetDeletionsPerChange: Maximum allowed number of ResourceRecordSets
0000000000000000000000000000000000000000;;		// to delete per ChangesCreateRequest.
0000000000000000000000000000000000000000;;		RrsetDeletionsPerChange int64 `json:"rrsetDeletionsPerChange,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RrsetsPerManagedZone: Maximum allowed number of ResourceRecordSets
0000000000000000000000000000000000000000;;		// per zone in the project.
0000000000000000000000000000000000000000;;		RrsetsPerManagedZone int64 `json:"rrsetsPerManagedZone,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TotalRrdataSizePerChange: Maximum allowed size for total rrdata in
0000000000000000000000000000000000000000;;		// one ChangesCreateRequest in bytes.
0000000000000000000000000000000000000000;;		TotalRrdataSizePerChange int64 `json:"totalRrdataSizePerChange,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Quota) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Quota
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceRecordSet: A unit of data that will be returned by the DNS
0000000000000000000000000000000000000000;;	// servers.
0000000000000000000000000000000000000000;;	type ResourceRecordSet struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "dns#resourceRecordSet".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: For example, www.example.com.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rrdatas: As defined in RFC 1035 (section 5) and RFC 1034 (section
0000000000000000000000000000000000000000;;		// 3.6.1).
0000000000000000000000000000000000000000;;		Rrdatas []string `json:"rrdatas,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ttl: Number of seconds that this ResourceRecordSet can be cached by
0000000000000000000000000000000000000000;;		// resolvers.
0000000000000000000000000000000000000000;;		Ttl int64 `json:"ttl,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: The identifier of a supported record type, for example, A,
0000000000000000000000000000000000000000;;		// AAAA, MX, TXT, and so on.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSet) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ResourceRecordSet
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSetsListResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Type of resource.
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: The presence of this field indicates that there exist
0000000000000000000000000000000000000000;;		// more results following your last page of results in pagination order.
0000000000000000000000000000000000000000;;		// To fetch them, make another list request using this value as your
0000000000000000000000000000000000000000;;		// pagination token.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// In this way you can retrieve the complete contents of even very large
0000000000000000000000000000000000000000;;		// collections one page at a time. However, if the contents of the
0000000000000000000000000000000000000000;;		// collection change between the first and last paginated list request,
0000000000000000000000000000000000000000;;		// the set of all elements returned will be an inconsistent view of the
0000000000000000000000000000000000000000;;		// collection. There is no way to retrieve a consistent snapshot of a
0000000000000000000000000000000000000000;;		// collection larger than the maximum page size.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rrsets: The resource record set resources.
0000000000000000000000000000000000000000;;		Rrsets []*ResourceRecordSet `json:"rrsets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ResourceRecordSetsListResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ResourceRecordSetsListResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.changes.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesCreateCall struct {
0000000000000000000000000000000000000000;;		s           *Service
0000000000000000000000000000000000000000;;		project     string
0000000000000000000000000000000000000000;;		managedZone string
0000000000000000000000000000000000000000;;		change      *Change
0000000000000000000000000000000000000000;;		urlParams_  gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_        context.Context
0000000000000000000000000000000000000000;;		header_     http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Atomically update the ResourceRecordSet collection.
0000000000000000000000000000000000000000;;	func (r *ChangesService) Create(project string, managedZone string, change *Change) *ChangesCreateCall {
0000000000000000000000000000000000000000;;		c := &ChangesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		c.change = change
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ChangesCreateCall) Fields(s ...googleapi.Field) *ChangesCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ChangesCreateCall) Context(ctx context.Context) *ChangesCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ChangesCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangesCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.change)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}/changes")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.changes.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Change or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Change.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ChangesCreateCall) Do(opts ...googleapi.CallOption) (*Change, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Change{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Atomically update the ResourceRecordSet collection.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "dns.changes.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}/changes",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "Change"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Change"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.changes.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		managedZone  string
0000000000000000000000000000000000000000;;		changeId     string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Fetch the representation of an existing Change.
0000000000000000000000000000000000000000;;	func (r *ChangesService) Get(project string, managedZone string, changeId string) *ChangesGetCall {
0000000000000000000000000000000000000000;;		c := &ChangesGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		c.changeId = changeId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) Fields(s ...googleapi.Field) *ChangesGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) IfNoneMatch(entityTag string) *ChangesGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) Context(ctx context.Context) *ChangesGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}/changes/{changeId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;			"changeId":    c.changeId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.changes.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Change or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Change.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ChangesGetCall) Do(opts ...googleapi.CallOption) (*Change, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Change{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Fetch the representation of an existing Change.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.changes.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone",
0000000000000000000000000000000000000000;;		//     "changeId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "changeId": {
0000000000000000000000000000000000000000;;		//       "description": "The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}/changes/{changeId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Change"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.changes.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangesListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		managedZone  string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Enumerate Changes to a ResourceRecordSet collection.
0000000000000000000000000000000000000000;;	func (r *ChangesService) List(project string, managedZone string) *ChangesListCall {
0000000000000000000000000000000000000000;;		c := &ChangesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MaxResults sets the optional parameter "maxResults": Maximum number
0000000000000000000000000000000000000000;;	// of results to be returned. If unspecified, the server will decide how
0000000000000000000000000000000000000000;;	// many results to return.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) MaxResults(maxResults int64) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("maxResults", fmt.Sprint(maxResults))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": A tag returned by
0000000000000000000000000000000000000000;;	// a previous list request that was truncated. Use this parameter to
0000000000000000000000000000000000000000;;	// continue a previous list request.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) PageToken(pageToken string) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SortBy sets the optional parameter "sortBy": Sorting criterion. The
0000000000000000000000000000000000000000;;	// only supported value is change sequence.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "changeSequence" (default)
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) SortBy(sortBy string) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("sortBy", sortBy)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SortOrder sets the optional parameter "sortOrder": Sorting order
0000000000000000000000000000000000000000;;	// direction: 'ascending' or 'descending'.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) SortOrder(sortOrder string) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("sortOrder", sortOrder)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) Fields(s ...googleapi.Field) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) IfNoneMatch(entityTag string) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) Context(ctx context.Context) *ChangesListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}/changes")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.changes.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ChangesListResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ChangesListResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) Do(opts ...googleapi.CallOption) (*ChangesListResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ChangesListResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Enumerate Changes to a ResourceRecordSet collection.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.changes.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "maxResults": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "sortBy": {
0000000000000000000000000000000000000000;;		//       "default": "changeSequence",
0000000000000000000000000000000000000000;;		//       "description": "Sorting criterion. The only supported value is change sequence.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "changeSequence"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "enumDescriptions": [
0000000000000000000000000000000000000000;;		//         ""
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "sortOrder": {
0000000000000000000000000000000000000000;;		//       "description": "Sorting order direction: 'ascending' or 'descending'.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}/changes",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ChangesListResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ChangesListCall) Pages(ctx context.Context, f func(*ChangesListResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.managedZones.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesCreateCall struct {
0000000000000000000000000000000000000000;;		s           *Service
0000000000000000000000000000000000000000;;		project     string
0000000000000000000000000000000000000000;;		managedzone *ManagedZone
0000000000000000000000000000000000000000;;		urlParams_  gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_        context.Context
0000000000000000000000000000000000000000;;		header_     http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Create a new ManagedZone.
0000000000000000000000000000000000000000;;	func (r *ManagedZonesService) Create(project string, managedzone *ManagedZone) *ManagedZonesCreateCall {
0000000000000000000000000000000000000000;;		c := &ManagedZonesCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedzone = managedzone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesCreateCall) Fields(s ...googleapi.Field) *ManagedZonesCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesCreateCall) Context(ctx context.Context) *ManagedZonesCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ManagedZonesCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.managedzone)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.managedZones.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ManagedZone or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ManagedZone.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesCreateCall) Do(opts ...googleapi.CallOption) (*ManagedZone, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ManagedZone{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Create a new ManagedZone.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "dns.managedZones.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "ManagedZone"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ManagedZone"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.managedZones.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesDeleteCall struct {
0000000000000000000000000000000000000000;;		s           *Service
0000000000000000000000000000000000000000;;		project     string
0000000000000000000000000000000000000000;;		managedZone string
0000000000000000000000000000000000000000;;		urlParams_  gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_        context.Context
0000000000000000000000000000000000000000;;		header_     http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Delete a previously created ManagedZone.
0000000000000000000000000000000000000000;;	func (r *ManagedZonesService) Delete(project string, managedZone string) *ManagedZonesDeleteCall {
0000000000000000000000000000000000000000;;		c := &ManagedZonesDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesDeleteCall) Fields(s ...googleapi.Field) *ManagedZonesDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesDeleteCall) Context(ctx context.Context) *ManagedZonesDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ManagedZonesDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.managedZones.delete" call.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesDeleteCall) Do(opts ...googleapi.CallOption) error {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Delete a previously created ManagedZone.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "dns.managedZones.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}",
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.managedZones.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		managedZone  string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Fetch the representation of an existing ManagedZone.
0000000000000000000000000000000000000000;;	func (r *ManagedZonesService) Get(project string, managedZone string) *ManagedZonesGetCall {
0000000000000000000000000000000000000000;;		c := &ManagedZonesGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) Fields(s ...googleapi.Field) *ManagedZonesGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) IfNoneMatch(entityTag string) *ManagedZonesGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) Context(ctx context.Context) *ManagedZonesGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.managedZones.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ManagedZone or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ManagedZone.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesGetCall) Do(opts ...googleapi.CallOption) (*ManagedZone, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ManagedZone{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Fetch the representation of an existing ManagedZone.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.managedZones.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ManagedZone"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.managedZones.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedZonesListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Enumerate ManagedZones that have been created but not yet
0000000000000000000000000000000000000000;;	// deleted.
0000000000000000000000000000000000000000;;	func (r *ManagedZonesService) List(project string) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c := &ManagedZonesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DnsName sets the optional parameter "dnsName": Restricts the list to
0000000000000000000000000000000000000000;;	// return only zones with this domain name.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) DnsName(dnsName string) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("dnsName", dnsName)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MaxResults sets the optional parameter "maxResults": Maximum number
0000000000000000000000000000000000000000;;	// of results to be returned. If unspecified, the server will decide how
0000000000000000000000000000000000000000;;	// many results to return.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) MaxResults(maxResults int64) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("maxResults", fmt.Sprint(maxResults))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": A tag returned by
0000000000000000000000000000000000000000;;	// a previous list request that was truncated. Use this parameter to
0000000000000000000000000000000000000000;;	// continue a previous list request.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) PageToken(pageToken string) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) Fields(s ...googleapi.Field) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) IfNoneMatch(entityTag string) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) Context(ctx context.Context) *ManagedZonesListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.managedZones.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ManagedZonesListResponse or error will be non-nil.
0000000000000000000000000000000000000000;;	// Any non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ManagedZonesListResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) Do(opts ...googleapi.CallOption) (*ManagedZonesListResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ManagedZonesListResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Enumerate ManagedZones that have been created but not yet deleted.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.managedZones.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "dnsName": {
0000000000000000000000000000000000000000;;		//       "description": "Restricts the list to return only zones with this domain name.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "maxResults": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ManagedZonesListResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ManagedZonesListCall) Pages(ctx context.Context, f func(*ManagedZonesListResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.projects.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Fetch the representation of an existing Project.
0000000000000000000000000000000000000000;;	func (r *ProjectsService) Get(project string) *ProjectsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) Fields(s ...googleapi.Field) *ProjectsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) IfNoneMatch(entityTag string) *ProjectsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) Context(ctx context.Context) *ProjectsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.projects.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Project or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Project.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsGetCall) Do(opts ...googleapi.CallOption) (*Project, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Project{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Fetch the representation of an existing Project.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.projects.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Project"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "dns.resourceRecordSets.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceRecordSetsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		project      string
0000000000000000000000000000000000000000;;		managedZone  string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Enumerate ResourceRecordSets that have been created but not yet
0000000000000000000000000000000000000000;;	// deleted.
0000000000000000000000000000000000000000;;	func (r *ResourceRecordSetsService) List(project string, managedZone string) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c := &ResourceRecordSetsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.managedZone = managedZone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MaxResults sets the optional parameter "maxResults": Maximum number
0000000000000000000000000000000000000000;;	// of results to be returned. If unspecified, the server will decide how
0000000000000000000000000000000000000000;;	// many results to return.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) MaxResults(maxResults int64) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("maxResults", fmt.Sprint(maxResults))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Name sets the optional parameter "name": Restricts the list to return
0000000000000000000000000000000000000000;;	// only records with this fully qualified domain name.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Name(name string) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("name", name)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": A tag returned by
0000000000000000000000000000000000000000;;	// a previous list request that was truncated. Use this parameter to
0000000000000000000000000000000000000000;;	// continue a previous list request.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) PageToken(pageToken string) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Type sets the optional parameter "type": Restricts the list to return
0000000000000000000000000000000000000000;;	// only records of this type. If present, the "name" parameter must also
0000000000000000000000000000000000000000;;	// be present.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Type(type_ string) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("type", type_)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Fields(s ...googleapi.Field) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) IfNoneMatch(entityTag string) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Context(ctx context.Context) *ResourceRecordSetsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/managedZones/{managedZone}/rrsets")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project":     c.project,
0000000000000000000000000000000000000000;;			"managedZone": c.managedZone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "dns.resourceRecordSets.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ResourceRecordSetsListResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *ResourceRecordSetsListResponse.ServerResponse.Header or (if a
0000000000000000000000000000000000000000;;	// response was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Do(opts ...googleapi.CallOption) (*ResourceRecordSetsListResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ResourceRecordSetsListResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Enumerate ResourceRecordSets that have been created but not yet deleted.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "dns.resourceRecordSets.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "managedZone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "managedZone": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or id.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "maxResults": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Restricts the list to return only records with this fully qualified domain name.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "Identifies the project addressed by this request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "type": {
0000000000000000000000000000000000000000;;		//       "description": "Restricts the list to return only records of this type. If present, the \"name\" parameter must also be present.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/managedZones/{managedZone}/rrsets",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ResourceRecordSetsListResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readonly",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ResourceRecordSetsListCall) Pages(ctx context.Context, f func(*ResourceRecordSetsListResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
