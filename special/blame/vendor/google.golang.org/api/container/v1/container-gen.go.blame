0000000000000000000000000000000000000000;;	// Package container provides access to the Google Container Engine API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://cloud.google.com/container-engine/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/container/v1"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   containerService, err := container.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package container
3c5b01cf3b40a66d614a82b4e47a8137b9009330;Godeps/_workspace/src/code.google.com/p/google-api-go-client/container/v1beta1/container-gen.go[Godeps/_workspace/src/code.google.com/p/google-api-go-client/container/v1beta1/container-gen.go][vendor/google.golang.org/api/container/v1/container-gen.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "container:v1"
0000000000000000000000000000000000000000;;	const apiName = "container"
0000000000000000000000000000000000000000;;	const apiVersion = "v1"
0000000000000000000000000000000000000000;;	const basePath = "https://container.googleapis.com/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.Projects = NewProjectsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Projects *ProjectsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsService(s *Service) *ProjectsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsService{s: s}
0000000000000000000000000000000000000000;;		rs.Zones = NewProjectsZonesService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Zones *ProjectsZonesService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsZonesService(s *Service) *ProjectsZonesService {
0000000000000000000000000000000000000000;;		rs := &ProjectsZonesService{s: s}
0000000000000000000000000000000000000000;;		rs.Clusters = NewProjectsZonesClustersService(s)
0000000000000000000000000000000000000000;;		rs.Operations = NewProjectsZonesOperationsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Clusters *ProjectsZonesClustersService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Operations *ProjectsZonesOperationsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsZonesClustersService(s *Service) *ProjectsZonesClustersService {
0000000000000000000000000000000000000000;;		rs := &ProjectsZonesClustersService{s: s}
0000000000000000000000000000000000000000;;		rs.NodePools = NewProjectsZonesClustersNodePoolsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NodePools *ProjectsZonesClustersNodePoolsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsZonesClustersNodePoolsService(s *Service) *ProjectsZonesClustersNodePoolsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsZonesClustersNodePoolsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsZonesOperationsService(s *Service) *ProjectsZonesOperationsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsZonesOperationsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesOperationsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddonsConfig: Configuration for the addons that can be automatically
0000000000000000000000000000000000000000;;	// spun up in the
0000000000000000000000000000000000000000;;	// cluster, enabling additional functionality.
0000000000000000000000000000000000000000;;	type AddonsConfig struct {
0000000000000000000000000000000000000000;;		// HorizontalPodAutoscaling: Configuration for the horizontal pod
0000000000000000000000000000000000000000;;		// autoscaling feature, which
0000000000000000000000000000000000000000;;		// increases or decreases the number of replica pods a replication
0000000000000000000000000000000000000000;;		// controller
0000000000000000000000000000000000000000;;		// has based on the resource usage of the existing pods.
0000000000000000000000000000000000000000;;		HorizontalPodAutoscaling *HorizontalPodAutoscaling `json:"horizontalPodAutoscaling,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HttpLoadBalancing: Configuration for the HTTP (L7) load balancing
0000000000000000000000000000000000000000;;		// controller addon, which
0000000000000000000000000000000000000000;;		// makes it easy to set up HTTP load balancers for services in a
0000000000000000000000000000000000000000;;		// cluster.
0000000000000000000000000000000000000000;;		HttpLoadBalancing *HttpLoadBalancing `json:"httpLoadBalancing,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "HorizontalPodAutoscaling") to unconditionally include in API
0000000000000000000000000000000000000000;;		// requests. By default, fields with empty values are omitted from API
0000000000000000000000000000000000000000;;		// requests. However, any non-pointer, non-interface field appearing in
0000000000000000000000000000000000000000;;		// ForceSendFields will be sent to the server regardless of whether the
0000000000000000000000000000000000000000;;		// field is empty or not. This may be used to include empty fields in
0000000000000000000000000000000000000000;;		// Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "HorizontalPodAutoscaling")
0000000000000000000000000000000000000000;;		// to include in API requests with the JSON null value. By default,
0000000000000000000000000000000000000000;;		// fields with empty values are omitted from API requests. However, any
0000000000000000000000000000000000000000;;		// field with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *AddonsConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod AddonsConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AutoUpgradeOptions: AutoUpgradeOptions defines the set of options for
0000000000000000000000000000000000000000;;	// the user to control how
0000000000000000000000000000000000000000;;	// the Auto Upgrades will proceed.
0000000000000000000000000000000000000000;;	type AutoUpgradeOptions struct {
0000000000000000000000000000000000000000;;		// AutoUpgradeStartTime: [Output only] This field is set when upgrades
0000000000000000000000000000000000000000;;		// are about to commence
0000000000000000000000000000000000000000;;		// with the approximate start time for the upgrades,
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
0000000000000000000000000000000000000000;;		AutoUpgradeStartTime string `json:"autoUpgradeStartTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description: [Output only] This field is set when upgrades are about
0000000000000000000000000000000000000000;;		// to commence
0000000000000000000000000000000000000000;;		// with the description of the upgrade.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "AutoUpgradeStartTime") to unconditionally include in API requests.
0000000000000000000000000000000000000000;;		// By default, fields with empty values are omitted from API requests.
0000000000000000000000000000000000000000;;		// However, any non-pointer, non-interface field appearing in
0000000000000000000000000000000000000000;;		// ForceSendFields will be sent to the server regardless of whether the
0000000000000000000000000000000000000000;;		// field is empty or not. This may be used to include empty fields in
0000000000000000000000000000000000000000;;		// Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AutoUpgradeStartTime") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *AutoUpgradeOptions) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod AutoUpgradeOptions
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CancelOperationRequest: CancelOperationRequest cancels a single
0000000000000000000000000000000000000000;;	// operation.
0000000000000000000000000000000000000000;;	type CancelOperationRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cluster: A Google Container Engine cluster.
0000000000000000000000000000000000000000;;	type Cluster struct {
0000000000000000000000000000000000000000;;		// AddonsConfig: Configurations for the various addons available to run
0000000000000000000000000000000000000000;;		// in the cluster.
0000000000000000000000000000000000000000;;		AddonsConfig *AddonsConfig `json:"addonsConfig,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClusterIpv4Cidr: The IP address range of the container pods in this
0000000000000000000000000000000000000000;;		// cluster,
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// notation (e.g. `10.96.0.0/14`). Leave blank to have
0000000000000000000000000000000000000000;;		// one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
0000000000000000000000000000000000000000;;		ClusterIpv4Cidr string `json:"clusterIpv4Cidr,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CreateTime: [Output only] The time the cluster was created,
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
0000000000000000000000000000000000000000;;		CreateTime string `json:"createTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CurrentMasterVersion: [Output only] The current software version of
0000000000000000000000000000000000000000;;		// the master endpoint.
0000000000000000000000000000000000000000;;		CurrentMasterVersion string `json:"currentMasterVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CurrentNodeCount: [Output only] The number of nodes currently in the
0000000000000000000000000000000000000000;;		// cluster.
0000000000000000000000000000000000000000;;		CurrentNodeCount int64 `json:"currentNodeCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CurrentNodeVersion: [Output only] The current version of the node
0000000000000000000000000000000000000000;;		// software components.
0000000000000000000000000000000000000000;;		// If they are currently at multiple versions because they're in the
0000000000000000000000000000000000000000;;		// process
0000000000000000000000000000000000000000;;		// of being upgraded, this reflects the minimum version of all nodes.
0000000000000000000000000000000000000000;;		CurrentNodeVersion string `json:"currentNodeVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description: An optional description of this cluster.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EnableKubernetesAlpha: Kubernetes alpha features are enabled on this
0000000000000000000000000000000000000000;;		// cluster. This includes alpha
0000000000000000000000000000000000000000;;		// API groups (e.g. v1alpha1) and features that may not be production
0000000000000000000000000000000000000000;;		// ready in
0000000000000000000000000000000000000000;;		// the kubernetes version of the master and nodes.
0000000000000000000000000000000000000000;;		// The cluster has no SLA for uptime and master/node upgrades are
0000000000000000000000000000000000000000;;		// disabled.
0000000000000000000000000000000000000000;;		// Alpha enabled clusters are automatically deleted thirty days
0000000000000000000000000000000000000000;;		// after
0000000000000000000000000000000000000000;;		// creation.
0000000000000000000000000000000000000000;;		EnableKubernetesAlpha bool `json:"enableKubernetesAlpha,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Endpoint: [Output only] The IP address of this cluster's master
0000000000000000000000000000000000000000;;		// endpoint.
0000000000000000000000000000000000000000;;		// The endpoint can be accessed from the internet
0000000000000000000000000000000000000000;;		// at
0000000000000000000000000000000000000000;;		// `https://username:password@endpoint/`.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// See the `masterAuth` property of this resource for username
0000000000000000000000000000000000000000;;		// and
0000000000000000000000000000000000000000;;		// password information.
0000000000000000000000000000000000000000;;		Endpoint string `json:"endpoint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ExpireTime: [Output only] The time the cluster will be
0000000000000000000000000000000000000000;;		// automatically
0000000000000000000000000000000000000000;;		// deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text
0000000000000000000000000000000000000000;;		// format.
0000000000000000000000000000000000000000;;		ExpireTime string `json:"expireTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InitialClusterVersion: The initial Kubernetes version for this
0000000000000000000000000000000000000000;;		// cluster.  Valid versions are those
0000000000000000000000000000000000000000;;		// found in validMasterVersions returned by getServerConfig.  The
0000000000000000000000000000000000000000;;		// version can
0000000000000000000000000000000000000000;;		// be upgraded over time; such upgrades are reflected
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// currentMasterVersion and currentNodeVersion.
0000000000000000000000000000000000000000;;		InitialClusterVersion string `json:"initialClusterVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InitialNodeCount: The number of nodes to create in this cluster. You
0000000000000000000000000000000000000000;;		// must ensure that your
0000000000000000000000000000000000000000;;		// Compute Engine <a href="/compute/docs/resource-quotas">resource
0000000000000000000000000000000000000000;;		// quota</a>
0000000000000000000000000000000000000000;;		// is sufficient for this number of instances. You must also have
0000000000000000000000000000000000000000;;		// available
0000000000000000000000000000000000000000;;		// firewall and routes quota.
0000000000000000000000000000000000000000;;		// For requests, this field should only be used in lieu of a
0000000000000000000000000000000000000000;;		// "node_pool" object, since this configuration (along with
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// "node_config") will be used to create a "NodePool" object with
0000000000000000000000000000000000000000;;		// an
0000000000000000000000000000000000000000;;		// auto-generated name. Do not use this and a node_pool at the same
0000000000000000000000000000000000000000;;		// time.
0000000000000000000000000000000000000000;;		InitialNodeCount int64 `json:"initialNodeCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceGroupUrls: [Output only] The resource URLs of
0000000000000000000000000000000000000000;;		// [instance
0000000000000000000000000000000000000000;;		// groups](/compute/docs/instance-groups/) associated with this
0000000000000000000000000000000000000000;;		// cluster.
0000000000000000000000000000000000000000;;		InstanceGroupUrls []string `json:"instanceGroupUrls,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LabelFingerprint: The fingerprint of the set of labels for this
0000000000000000000000000000000000000000;;		// cluster.
0000000000000000000000000000000000000000;;		LabelFingerprint string `json:"labelFingerprint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LegacyAbac: Configuration for the legacy ABAC authorization mode.
0000000000000000000000000000000000000000;;		LegacyAbac *LegacyAbac `json:"legacyAbac,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Locations: The list of Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [locations](/compute/docs/zones#available) in which the cluster's
0000000000000000000000000000000000000000;;		// nodes
0000000000000000000000000000000000000000;;		// should be located.
0000000000000000000000000000000000000000;;		Locations []string `json:"locations,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LoggingService: The logging service the cluster should use to write
0000000000000000000000000000000000000000;;		// logs.
0000000000000000000000000000000000000000;;		// Currently available options:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `logging.googleapis.com` - the Google Cloud Logging service.
0000000000000000000000000000000000000000;;		// * `none` - no logs will be exported from the cluster.
0000000000000000000000000000000000000000;;		// * if left as an empty string,`logging.googleapis.com` will be used.
0000000000000000000000000000000000000000;;		LoggingService string `json:"loggingService,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MasterAuth: The authentication information for accessing the master
0000000000000000000000000000000000000000;;		// endpoint.
0000000000000000000000000000000000000000;;		MasterAuth *MasterAuth `json:"masterAuth,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MonitoringService: The monitoring service the cluster should use to
0000000000000000000000000000000000000000;;		// write metrics.
0000000000000000000000000000000000000000;;		// Currently available options:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `monitoring.googleapis.com` - the Google Cloud Monitoring
0000000000000000000000000000000000000000;;		// service.
0000000000000000000000000000000000000000;;		// * `none` - no metrics will be exported from the cluster.
0000000000000000000000000000000000000000;;		// * if left as an empty string, `monitoring.googleapis.com` will be
0000000000000000000000000000000000000000;;		// used.
0000000000000000000000000000000000000000;;		MonitoringService string `json:"monitoringService,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The name of this cluster. The name must be unique within this
0000000000000000000000000000000000000000;;		// project
0000000000000000000000000000000000000000;;		// and zone, and can be up to 40 characters with the following
0000000000000000000000000000000000000000;;		// restrictions:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * Lowercase letters, numbers, and hyphens only.
0000000000000000000000000000000000000000;;		// * Must start with a letter.
0000000000000000000000000000000000000000;;		// * Must end with a number or a letter.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Network: The name of the Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [network](/compute/docs/networks-and-firewalls#networks) to which
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// cluster is connected. If left unspecified, the `default` network
0000000000000000000000000000000000000000;;		// will be used.
0000000000000000000000000000000000000000;;		Network string `json:"network,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodeConfig: Parameters used in creating the cluster's nodes.
0000000000000000000000000000000000000000;;		// See `nodeConfig` for the description of its properties.
0000000000000000000000000000000000000000;;		// For requests, this field should only be used in lieu of a
0000000000000000000000000000000000000000;;		// "node_pool" object, since this configuration (along with
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// "initial_node_count") will be used to create a "NodePool" object with
0000000000000000000000000000000000000000;;		// an
0000000000000000000000000000000000000000;;		// auto-generated name. Do not use this and a node_pool at the same
0000000000000000000000000000000000000000;;		// time.
0000000000000000000000000000000000000000;;		// For responses, this field will be populated with the node
0000000000000000000000000000000000000000;;		// configuration of
0000000000000000000000000000000000000000;;		// the first node pool.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If unspecified, the defaults are used.
0000000000000000000000000000000000000000;;		NodeConfig *NodeConfig `json:"nodeConfig,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodeIpv4CidrSize: [Output only] The size of the address space on each
0000000000000000000000000000000000000000;;		// node for hosting
0000000000000000000000000000000000000000;;		// containers. This is provisioned from within the
0000000000000000000000000000000000000000;;		// `container_ipv4_cidr`
0000000000000000000000000000000000000000;;		// range.
0000000000000000000000000000000000000000;;		NodeIpv4CidrSize int64 `json:"nodeIpv4CidrSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NodePools: The node pools associated with this cluster.
0000000000000000000000000000000000000000;;		// This field should not be set if "node_config" or "initial_node_count"
0000000000000000000000000000000000000000;;		// are
0000000000000000000000000000000000000000;;		// specified.
0000000000000000000000000000000000000000;;		NodePools []*NodePool `json:"nodePools,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceLabels: The resource labels for the cluster to use to
0000000000000000000000000000000000000000;;		// annotate any related GCE
0000000000000000000000000000000000000000;;		// resources.
0000000000000000000000000000000000000000;;		ResourceLabels map[string]string `json:"resourceLabels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SelfLink: [Output only] Server-defined URL for the resource.
0000000000000000000000000000000000000000;;		SelfLink string `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServicesIpv4Cidr: [Output only] The IP address range of the
0000000000000000000000000000000000000000;;		// Kubernetes services in
0000000000000000000000000000000000000000;;		// this cluster,
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// notation (e.g. `1.2.3.4/29`). Service addresses are
0000000000000000000000000000000000000000;;		// typically put in the last `/16` from the container CIDR.
0000000000000000000000000000000000000000;;		ServicesIpv4Cidr string `json:"servicesIpv4Cidr,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: [Output only] The current status of this cluster.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "STATUS_UNSPECIFIED" - Not set.
0000000000000000000000000000000000000000;;		//   "PROVISIONING" - The PROVISIONING state indicates the cluster is
0000000000000000000000000000000000000000;;		// being created.
0000000000000000000000000000000000000000;;		//   "RUNNING" - The RUNNING state indicates the cluster has been
0000000000000000000000000000000000000000;;		// created and is fully
0000000000000000000000000000000000000000;;		// usable.
0000000000000000000000000000000000000000;;		//   "RECONCILING" - The RECONCILING state indicates that some work is
0000000000000000000000000000000000000000;;		// actively being done on
0000000000000000000000000000000000000000;;		// the cluster, such as upgrading the master or node software. Details
0000000000000000000000000000000000000000;;		// can
0000000000000000000000000000000000000000;;		// be found in the `statusMessage` field.
0000000000000000000000000000000000000000;;		//   "STOPPING" - The STOPPING state indicates the cluster is being
0000000000000000000000000000000000000000;;		// deleted.
0000000000000000000000000000000000000000;;		//   "ERROR" - The ERROR state indicates the cluster may be unusable.
0000000000000000000000000000000000000000;;		// Details
0000000000000000000000000000000000000000;;		// can be found in the `statusMessage` field.
0000000000000000000000000000000000000000;;		Status string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusMessage: [Output only] Additional information about the current
0000000000000000000000000000000000000000;;		// status of this
0000000000000000000000000000000000000000;;		// cluster, if available.
0000000000000000000000000000000000000000;;		StatusMessage string `json:"statusMessage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Subnetwork: The name of the Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [subnetwork](/compute/docs/subnetworks) to which the
0000000000000000000000000000000000000000;;		// cluster is connected.
0000000000000000000000000000000000000000;;		Subnetwork string `json:"subnetwork,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Zone: [Output only] The name of the Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [zone](/compute/docs/zones#available) in which the cluster
0000000000000000000000000000000000000000;;		// resides.
0000000000000000000000000000000000000000;;		Zone string `json:"zone,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "AddonsConfig") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AddonsConfig") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Cluster) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Cluster
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ClusterUpdate: ClusterUpdate describes an update to the cluster.
0000000000000000000000000000000000000000;;	// Exactly one update can
0000000000000000000000000000000000000000;;	// be applied to a cluster with each request, so at most one field can
0000000000000000000000000000000000000000;;	// be
0000000000000000000000000000000000000000;;	// provided.
0000000000000000000000000000000000000000;;	type ClusterUpdate struct {
0000000000000000000000000000000000000000;;		// DesiredAddonsConfig: Configurations for the various addons available
0000000000000000000000000000000000000000;;		// to run in the cluster.
0000000000000000000000000000000000000000;;		DesiredAddonsConfig *AddonsConfig `json:"desiredAddonsConfig,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredImageType: The desired image type for the node pool.
0000000000000000000000000000000000000000;;		// NOTE: Set the "desired_node_pool" field as well.
0000000000000000000000000000000000000000;;		DesiredImageType string `json:"desiredImageType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredLocations: The desired list of Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [locations](/compute/docs/zones#available) in which the cluster's
0000000000000000000000000000000000000000;;		// nodes
0000000000000000000000000000000000000000;;		// should be located. Changing the locations a cluster is in will
0000000000000000000000000000000000000000;;		// result
0000000000000000000000000000000000000000;;		// in nodes being either created or removed from the cluster, depending
0000000000000000000000000000000000000000;;		// on
0000000000000000000000000000000000000000;;		// whether locations are being added or removed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// This list must always include the cluster's primary zone.
0000000000000000000000000000000000000000;;		DesiredLocations []string `json:"desiredLocations,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredMasterVersion: The Kubernetes version to change the master to.
0000000000000000000000000000000000000000;;		// The only valid value is the
0000000000000000000000000000000000000000;;		// latest supported version. Use "-" to have the server automatically
0000000000000000000000000000000000000000;;		// select
0000000000000000000000000000000000000000;;		// the latest version.
0000000000000000000000000000000000000000;;		DesiredMasterVersion string `json:"desiredMasterVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredMonitoringService: The monitoring service the cluster should
0000000000000000000000000000000000000000;;		// use to write metrics.
0000000000000000000000000000000000000000;;		// Currently available options:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * "monitoring.googleapis.com" - the Google Cloud Monitoring service
0000000000000000000000000000000000000000;;		// * "none" - no metrics will be exported from the cluster
0000000000000000000000000000000000000000;;		DesiredMonitoringService string `json:"desiredMonitoringService,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredNodePoolAutoscaling: Autoscaler configuration for the node
0000000000000000000000000000000000000000;;		// pool specified in
0000000000000000000000000000000000000000;;		// desired_node_pool_id. If there is only one pool in the
0000000000000000000000000000000000000000;;		// cluster and desired_node_pool_id is not provided then
0000000000000000000000000000000000000000;;		// the change applies to that single node pool.
0000000000000000000000000000000000000000;;		DesiredNodePoolAutoscaling *NodePoolAutoscaling `json:"desiredNodePoolAutoscaling,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredNodePoolId: The node pool to be upgraded. This field is
0000000000000000000000000000000000000000;;		// mandatory if
0000000000000000000000000000000000000000;;		// "desired_node_version", "desired_image_family"
0000000000000000000000000000000000000000;;		// or
0000000000000000000000000000000000000000;;		// "desired_node_pool_autoscaling" is specified and there is more than
0000000000000000000000000000000000000000;;		// one
0000000000000000000000000000000000000000;;		// node pool on the cluster.
0000000000000000000000000000000000000000;;		DesiredNodePoolId string `json:"desiredNodePoolId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DesiredNodeVersion: The Kubernetes version to change the nodes to
0000000000000000000000000000000000000000;;		// (typically an
0000000000000000000000000000000000000000;;		// upgrade). Use `-` to upgrade to the latest version supported by
0000000000000000000000000000000000000000;;		// the server.
0000000000000000000000000000000000000000;;		DesiredNodeVersion string `json:"desiredNodeVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "DesiredAddonsConfig")
0000000000000000000000000000000000000000;;		// to unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "DesiredAddonsConfig") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ClusterUpdate) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ClusterUpdate
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompleteIPRotationRequest: CompleteIPRotationRequest moves the
0000000000000000000000000000000000000000;;	// cluster master back into single-IP mode.
0000000000000000000000000000000000000000;;	type CompleteIPRotationRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateClusterRequest: CreateClusterRequest creates a cluster.
0000000000000000000000000000000000000000;;	type CreateClusterRequest struct {
0000000000000000000000000000000000000000;;		// Cluster: A
0000000000000000000000000000000000000000;;		// [cluster
0000000000000000000000000000000000000000;;		// resource](/container-engine/reference/rest/v1/projects.zones.
0000000000000000000000000000000000000000;;		// clusters)
0000000000000000000000000000000000000000;;		Cluster *Cluster `json:"cluster,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Cluster") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Cluster") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CreateClusterRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CreateClusterRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateNodePoolRequest: CreateNodePoolRequest creates a node pool for
0000000000000000000000000000000000000000;;	// a cluster.
0000000000000000000000000000000000000000;;	type CreateNodePoolRequest struct {
0000000000000000000000000000000000000000;;		// NodePool: The node pool to create.
0000000000000000000000000000000000000000;;		NodePool *NodePool `json:"nodePool,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NodePool") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NodePool") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CreateNodePoolRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CreateNodePoolRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty: A generic empty message that you can re-use to avoid defining
0000000000000000000000000000000000000000;;	// duplicated
0000000000000000000000000000000000000000;;	// empty messages in your APIs. A typical example is to use it as the
0000000000000000000000000000000000000000;;	// request
0000000000000000000000000000000000000000;;	// or the response type of an API method. For instance:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     service Foo {
0000000000000000000000000000000000000000;;	//       rpc Bar(google.protobuf.Empty) returns
0000000000000000000000000000000000000000;;	// (google.protobuf.Empty);
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The JSON representation for `Empty` is empty JSON object `{}`.
0000000000000000000000000000000000000000;;	type Empty struct {
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HorizontalPodAutoscaling: Configuration options for the horizontal
0000000000000000000000000000000000000000;;	// pod autoscaling feature, which
0000000000000000000000000000000000000000;;	// increases or decreases the number of replica pods a replication
0000000000000000000000000000000000000000;;	// controller
0000000000000000000000000000000000000000;;	// has based on the resource usage of the existing pods.
0000000000000000000000000000000000000000;;	type HorizontalPodAutoscaling struct {
0000000000000000000000000000000000000000;;		// Disabled: Whether the Horizontal Pod Autoscaling feature is enabled
0000000000000000000000000000000000000000;;		// in the cluster.
0000000000000000000000000000000000000000;;		// When enabled, it ensures that a Heapster pod is running in the
0000000000000000000000000000000000000000;;		// cluster,
0000000000000000000000000000000000000000;;		// which is also used by the Cloud Monitoring service.
0000000000000000000000000000000000000000;;		Disabled bool `json:"disabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Disabled") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Disabled") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HorizontalPodAutoscaling) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod HorizontalPodAutoscaling
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpLoadBalancing: Configuration options for the HTTP (L7) load
0000000000000000000000000000000000000000;;	// balancing controller addon,
0000000000000000000000000000000000000000;;	// which makes it easy to set up HTTP load balancers for services in a
0000000000000000000000000000000000000000;;	// cluster.
0000000000000000000000000000000000000000;;	type HttpLoadBalancing struct {
0000000000000000000000000000000000000000;;		// Disabled: Whether the HTTP Load Balancing controller is enabled in
0000000000000000000000000000000000000000;;		// the cluster.
0000000000000000000000000000000000000000;;		// When enabled, it runs a small pod in the cluster that manages the
0000000000000000000000000000000000000000;;		// load
0000000000000000000000000000000000000000;;		// balancers.
0000000000000000000000000000000000000000;;		Disabled bool `json:"disabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Disabled") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Disabled") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HttpLoadBalancing) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod HttpLoadBalancing
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LegacyAbac: Configuration for the legacy Attribute Based Access
0000000000000000000000000000000000000000;;	// Control authorization
0000000000000000000000000000000000000000;;	// mode.
0000000000000000000000000000000000000000;;	type LegacyAbac struct {
0000000000000000000000000000000000000000;;		// Enabled: Whether the ABAC authorizer is enabled for this cluster.
0000000000000000000000000000000000000000;;		// When enabled,
0000000000000000000000000000000000000000;;		// identities in the system, including service accounts, nodes,
0000000000000000000000000000000000000000;;		// and
0000000000000000000000000000000000000000;;		// controllers, will have statically granted permissions beyond
0000000000000000000000000000000000000000;;		// those
0000000000000000000000000000000000000000;;		// provided by the RBAC configuration or IAM.
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Enabled") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Enabled") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LegacyAbac) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LegacyAbac
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListClustersResponse: ListClustersResponse is the result of
0000000000000000000000000000000000000000;;	// ListClustersRequest.
0000000000000000000000000000000000000000;;	type ListClustersResponse struct {
0000000000000000000000000000000000000000;;		// Clusters: A list of clusters in the project in the specified zone,
0000000000000000000000000000000000000000;;		// or
0000000000000000000000000000000000000000;;		// across all ones.
0000000000000000000000000000000000000000;;		Clusters []*Cluster `json:"clusters,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MissingZones: If any zones are listed here, the list of clusters
0000000000000000000000000000000000000000;;		// returned
0000000000000000000000000000000000000000;;		// may be missing those zones.
0000000000000000000000000000000000000000;;		MissingZones []string `json:"missingZones,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Clusters") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Clusters") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListClustersResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListClustersResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListNodePoolsResponse: ListNodePoolsResponse is the result of
0000000000000000000000000000000000000000;;	// ListNodePoolsRequest.
0000000000000000000000000000000000000000;;	type ListNodePoolsResponse struct {
0000000000000000000000000000000000000000;;		// NodePools: A list of node pools for a cluster.
0000000000000000000000000000000000000000;;		NodePools []*NodePool `json:"nodePools,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NodePools") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NodePools") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListNodePoolsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListNodePoolsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListOperationsResponse: ListOperationsResponse is the result of
0000000000000000000000000000000000000000;;	// ListOperationsRequest.
0000000000000000000000000000000000000000;;	type ListOperationsResponse struct {
0000000000000000000000000000000000000000;;		// MissingZones: If any zones are listed here, the list of operations
0000000000000000000000000000000000000000;;		// returned
0000000000000000000000000000000000000000;;		// may be missing the operations from those zones.
0000000000000000000000000000000000000000;;		MissingZones []string `json:"missingZones,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Operations: A list of operations in the project in the specified
0000000000000000000000000000000000000000;;		// zone.
0000000000000000000000000000000000000000;;		Operations []*Operation `json:"operations,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "MissingZones") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "MissingZones") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListOperationsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListOperationsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MasterAuth: The authentication information for accessing the master
0000000000000000000000000000000000000000;;	// endpoint.
0000000000000000000000000000000000000000;;	// Authentication can be done using HTTP basic auth or using
0000000000000000000000000000000000000000;;	// client
0000000000000000000000000000000000000000;;	// certificates.
0000000000000000000000000000000000000000;;	type MasterAuth struct {
0000000000000000000000000000000000000000;;		// ClientCertificate: [Output only] Base64-encoded public certificate
0000000000000000000000000000000000000000;;		// used by clients to
0000000000000000000000000000000000000000;;		// authenticate to the cluster endpoint.
0000000000000000000000000000000000000000;;		ClientCertificate string `json:"clientCertificate,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClientKey: [Output only] Base64-encoded private key used by clients
0000000000000000000000000000000000000000;;		// to authenticate
0000000000000000000000000000000000000000;;		// to the cluster endpoint.
0000000000000000000000000000000000000000;;		ClientKey string `json:"clientKey,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ClusterCaCertificate: [Output only] Base64-encoded public certificate
0000000000000000000000000000000000000000;;		// that is the root of
0000000000000000000000000000000000000000;;		// trust for the cluster.
0000000000000000000000000000000000000000;;		ClusterCaCertificate string `json:"clusterCaCertificate,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Password: The password to use for HTTP basic authentication to the
0000000000000000000000000000000000000000;;		// master endpoint.
0000000000000000000000000000000000000000;;		// Because the master endpoint is open to the Internet, you should
0000000000000000000000000000000000000000;;		// create a
0000000000000000000000000000000000000000;;		// strong password.  If a password is provided for cluster creation,
0000000000000000000000000000000000000000;;		// username
0000000000000000000000000000000000000000;;		// must be non-empty.
0000000000000000000000000000000000000000;;		Password string `json:"password,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Username: The username to use for HTTP basic authentication to the
0000000000000000000000000000000000000000;;		// master endpoint.
0000000000000000000000000000000000000000;;		// For clusters v1.6.0 and later, you can disable basic authentication
0000000000000000000000000000000000000000;;		// by
0000000000000000000000000000000000000000;;		// providing an empty username.
0000000000000000000000000000000000000000;;		Username string `json:"username,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "ClientCertificate")
0000000000000000000000000000000000000000;;		// to unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "ClientCertificate") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MasterAuth) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MasterAuth
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeConfig: Parameters that describe the nodes in a cluster.
0000000000000000000000000000000000000000;;	type NodeConfig struct {
0000000000000000000000000000000000000000;;		// DiskSizeGb: Size of the disk attached to each node, specified in
0000000000000000000000000000000000000000;;		// GB.
0000000000000000000000000000000000000000;;		// The smallest allowed disk size is 10GB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If unspecified, the default disk size is 100GB.
0000000000000000000000000000000000000000;;		DiskSizeGb int64 `json:"diskSizeGb,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ImageType: The image type to use for this node. Note that for a given
0000000000000000000000000000000000000000;;		// image type,
0000000000000000000000000000000000000000;;		// the latest version of it will be used.
0000000000000000000000000000000000000000;;		ImageType string `json:"imageType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: The map of Kubernetes labels (key/value pairs) to be applied
0000000000000000000000000000000000000000;;		// to each node.
0000000000000000000000000000000000000000;;		// These will added in addition to any default label(s) that
0000000000000000000000000000000000000000;;		// Kubernetes may apply to the node.
0000000000000000000000000000000000000000;;		// In case of conflict in label keys, the applied set may differ
0000000000000000000000000000000000000000;;		// depending on
0000000000000000000000000000000000000000;;		// the Kubernetes version -- it's best to assume the behavior is
0000000000000000000000000000000000000000;;		// undefined
0000000000000000000000000000000000000000;;		// and conflicts should be avoided.
0000000000000000000000000000000000000000;;		// For more information, including usage and the valid values,
0000000000000000000000000000000000000000;;		// see:
0000000000000000000000000000000000000000;;		// http://kubernetes.io/v1.1/docs/user-guide/labels.html
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LocalSsdCount: The number of local SSD disks to be attached to the
0000000000000000000000000000000000000000;;		// node.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The limit for this value is dependant upon the maximum number
0000000000000000000000000000000000000000;;		// of
0000000000000000000000000000000000000000;;		// disks available on a machine per zone.
0000000000000000000000000000000000000000;;		// See:
0000000000000000000000000000000000000000;;		// https://cloud.google.com/compute/docs/disks/local-ssd#local_ssd_l
0000000000000000000000000000000000000000;;		// imits
0000000000000000000000000000000000000000;;		// for more information.
0000000000000000000000000000000000000000;;		LocalSsdCount int64 `json:"localSsdCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MachineType: The name of a Google Compute Engine
0000000000000000000000000000000000000000;;		// [machine
0000000000000000000000000000000000000000;;		// type](/compute/docs/machine-types) (e.g.
0000000000000000000000000000000000000000;;		// `n1-standard-1`).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If unspecified, the default machine type is
0000000000000000000000000000000000000000;;		// `n1-standard-1`.
0000000000000000000000000000000000000000;;		MachineType string `json:"machineType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metadata: The metadata key/value pairs assigned to instances in the
0000000000000000000000000000000000000000;;		// cluster.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Keys must conform to the regexp [a-zA-Z0-9-_]+ and be less than 128
0000000000000000000000000000000000000000;;		// bytes
0000000000000000000000000000000000000000;;		// in length. These are reflected as part of a URL in the metadata
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		// Additionally, to avoid ambiguity, keys must not conflict with any
0000000000000000000000000000000000000000;;		// other
0000000000000000000000000000000000000000;;		// metadata keys for the project or be one of the four reserved
0000000000000000000000000000000000000000;;		// keys:
0000000000000000000000000000000000000000;;		// "instance-template", "kube-env", "startup-script", and
0000000000000000000000000000000000000000;;		// "user-data"
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Values are free-form strings, and only have meaning as interpreted
0000000000000000000000000000000000000000;;		// by
0000000000000000000000000000000000000000;;		// the image running in the instance. The only restriction placed on
0000000000000000000000000000000000000000;;		// them is
0000000000000000000000000000000000000000;;		// that each value's size must be less than or equal to 32 KB.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The total size of all keys and values must be less than 512 KB.
0000000000000000000000000000000000000000;;		Metadata map[string]string `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OauthScopes: The set of Google API scopes to be made available on all
0000000000000000000000000000000000000000;;		// of the
0000000000000000000000000000000000000000;;		// node VMs under the "default" service account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The following scopes are recommended, but not required, and by
0000000000000000000000000000000000000000;;		// default are
0000000000000000000000000000000000000000;;		// not included:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `https://www.googleapis.com/auth/compute` is required for
0000000000000000000000000000000000000000;;		// mounting
0000000000000000000000000000000000000000;;		// persistent storage on your nodes.
0000000000000000000000000000000000000000;;		// * `https://www.googleapis.com/auth/devstorage.read_only` is required
0000000000000000000000000000000000000000;;		// for
0000000000000000000000000000000000000000;;		// communicating with **gcr.io**
0000000000000000000000000000000000000000;;		// (the [Google Container Registry](/container-registry/)).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If unspecified, no scopes are added, unless Cloud Logging or
0000000000000000000000000000000000000000;;		// Cloud
0000000000000000000000000000000000000000;;		// Monitoring are enabled, in which case their required scopes will be
0000000000000000000000000000000000000000;;		// added.
0000000000000000000000000000000000000000;;		OauthScopes []string `json:"oauthScopes,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Preemptible: Whether the nodes are created as preemptible VM
0000000000000000000000000000000000000000;;		// instances.
0000000000000000000000000000000000000000;;		// See:
0000000000000000000000000000000000000000;;		// https://cloud.google.com/compute/docs/instances/preemptible for
0000000000000000000000000000000000000000;;		// more
0000000000000000000000000000000000000000;;		// inforamtion about preemptible VM instances.
0000000000000000000000000000000000000000;;		Preemptible bool `json:"preemptible,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServiceAccount: The Google Cloud Platform Service Account to be used
0000000000000000000000000000000000000000;;		// by the node VMs. If
0000000000000000000000000000000000000000;;		// no Service Account is specified, the "default" service account is
0000000000000000000000000000000000000000;;		// used.
0000000000000000000000000000000000000000;;		ServiceAccount string `json:"serviceAccount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Tags: The list of instance tags applied to all nodes. Tags are used
0000000000000000000000000000000000000000;;		// to identify
0000000000000000000000000000000000000000;;		// valid sources or targets for network firewalls and are specified
0000000000000000000000000000000000000000;;		// by
0000000000000000000000000000000000000000;;		// the client during cluster or node pool creation. Each tag within the
0000000000000000000000000000000000000000;;		// list
0000000000000000000000000000000000000000;;		// must comply with RFC1035.
0000000000000000000000000000000000000000;;		Tags []string `json:"tags,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "DiskSizeGb") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "DiskSizeGb") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *NodeConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod NodeConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodeManagement: NodeManagement defines the set of node management
0000000000000000000000000000000000000000;;	// services turned on for the
0000000000000000000000000000000000000000;;	// node pool.
0000000000000000000000000000000000000000;;	type NodeManagement struct {
0000000000000000000000000000000000000000;;		// AutoRepair: A flag that specifies whether the node auto-repair is
0000000000000000000000000000000000000000;;		// enabled for the node
0000000000000000000000000000000000000000;;		// pool. If enabled, the nodes in this node pool will be monitored and,
0000000000000000000000000000000000000000;;		// if
0000000000000000000000000000000000000000;;		// they fail health checks too many times, an automatic repair action
0000000000000000000000000000000000000000;;		// will be
0000000000000000000000000000000000000000;;		// triggered.
0000000000000000000000000000000000000000;;		AutoRepair bool `json:"autoRepair,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AutoUpgrade: A flag that specifies whether node auto-upgrade is
0000000000000000000000000000000000000000;;		// enabled for the node
0000000000000000000000000000000000000000;;		// pool. If enabled, node auto-upgrade helps keep the nodes in your node
0000000000000000000000000000000000000000;;		// pool
0000000000000000000000000000000000000000;;		// up to date with the latest release version of Kubernetes.
0000000000000000000000000000000000000000;;		AutoUpgrade bool `json:"autoUpgrade,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpgradeOptions: Specifies the Auto Upgrade knobs for the node pool.
0000000000000000000000000000000000000000;;		UpgradeOptions *AutoUpgradeOptions `json:"upgradeOptions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "AutoRepair") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AutoRepair") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *NodeManagement) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod NodeManagement
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodePool: NodePool contains the name and configuration for a
0000000000000000000000000000000000000000;;	// cluster's node pool.
0000000000000000000000000000000000000000;;	// Node pools are a set of nodes (i.e. VM's), with a common
0000000000000000000000000000000000000000;;	// configuration and
0000000000000000000000000000000000000000;;	// specification, under the control of the cluster master. They may have
0000000000000000000000000000000000000000;;	// a set
0000000000000000000000000000000000000000;;	// of Kubernetes labels applied to them, which may be used to reference
0000000000000000000000000000000000000000;;	// them
0000000000000000000000000000000000000000;;	// during pod scheduling. They may also be resized up or down, to
0000000000000000000000000000000000000000;;	// accommodate
0000000000000000000000000000000000000000;;	// the workload.
0000000000000000000000000000000000000000;;	type NodePool struct {
0000000000000000000000000000000000000000;;		// Autoscaling: Autoscaler configuration for this NodePool. Autoscaler
0000000000000000000000000000000000000000;;		// is enabled
0000000000000000000000000000000000000000;;		// only if a valid configuration is present.
0000000000000000000000000000000000000000;;		Autoscaling *NodePoolAutoscaling `json:"autoscaling,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Config: The node configuration of the pool.
0000000000000000000000000000000000000000;;		Config *NodeConfig `json:"config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InitialNodeCount: The initial node count for the pool. You must
0000000000000000000000000000000000000000;;		// ensure that your
0000000000000000000000000000000000000000;;		// Compute Engine <a href="/compute/docs/resource-quotas">resource
0000000000000000000000000000000000000000;;		// quota</a>
0000000000000000000000000000000000000000;;		// is sufficient for this number of instances. You must also have
0000000000000000000000000000000000000000;;		// available
0000000000000000000000000000000000000000;;		// firewall and routes quota.
0000000000000000000000000000000000000000;;		InitialNodeCount int64 `json:"initialNodeCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceGroupUrls: [Output only] The resource URLs of
0000000000000000000000000000000000000000;;		// [instance
0000000000000000000000000000000000000000;;		// groups](/compute/docs/instance-groups/) associated with this
0000000000000000000000000000000000000000;;		// node pool.
0000000000000000000000000000000000000000;;		InstanceGroupUrls []string `json:"instanceGroupUrls,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Management: NodeManagement configuration for this NodePool.
0000000000000000000000000000000000000000;;		Management *NodeManagement `json:"management,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The name of the node pool.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SelfLink: [Output only] Server-defined URL for the resource.
0000000000000000000000000000000000000000;;		SelfLink string `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: [Output only] The status of the nodes in this pool instance.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "STATUS_UNSPECIFIED" - Not set.
0000000000000000000000000000000000000000;;		//   "PROVISIONING" - The PROVISIONING state indicates the node pool is
0000000000000000000000000000000000000000;;		// being created.
0000000000000000000000000000000000000000;;		//   "RUNNING" - The RUNNING state indicates the node pool has been
0000000000000000000000000000000000000000;;		// created
0000000000000000000000000000000000000000;;		// and is fully usable.
0000000000000000000000000000000000000000;;		//   "RUNNING_WITH_ERROR" - The RUNNING_WITH_ERROR state indicates the
0000000000000000000000000000000000000000;;		// node pool has been created
0000000000000000000000000000000000000000;;		// and is partially usable. Some error state has occurred and
0000000000000000000000000000000000000000;;		// some
0000000000000000000000000000000000000000;;		// functionality may be impaired. Customer may need to reissue a
0000000000000000000000000000000000000000;;		// request
0000000000000000000000000000000000000000;;		// or trigger a new update.
0000000000000000000000000000000000000000;;		//   "RECONCILING" - The RECONCILING state indicates that some work is
0000000000000000000000000000000000000000;;		// actively being done on
0000000000000000000000000000000000000000;;		// the node pool, such as upgrading node software. Details can
0000000000000000000000000000000000000000;;		// be found in the `statusMessage` field.
0000000000000000000000000000000000000000;;		//   "STOPPING" - The STOPPING state indicates the node pool is being
0000000000000000000000000000000000000000;;		// deleted.
0000000000000000000000000000000000000000;;		//   "ERROR" - The ERROR state indicates the node pool may be unusable.
0000000000000000000000000000000000000000;;		// Details
0000000000000000000000000000000000000000;;		// can be found in the `statusMessage` field.
0000000000000000000000000000000000000000;;		Status string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusMessage: [Output only] Additional information about the current
0000000000000000000000000000000000000000;;		// status of this
0000000000000000000000000000000000000000;;		// node pool instance, if available.
0000000000000000000000000000000000000000;;		StatusMessage string `json:"statusMessage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Version: [Output only] The version of the Kubernetes of this node.
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Autoscaling") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Autoscaling") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *NodePool) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod NodePool
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NodePoolAutoscaling: NodePoolAutoscaling contains information
0000000000000000000000000000000000000000;;	// required by cluster autoscaler to
0000000000000000000000000000000000000000;;	// adjust the size of the node pool to the current cluster usage.
0000000000000000000000000000000000000000;;	type NodePoolAutoscaling struct {
0000000000000000000000000000000000000000;;		// Enabled: Is autoscaling enabled for this node pool.
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MaxNodeCount: Maximum number of nodes in the NodePool. Must be >=
0000000000000000000000000000000000000000;;		// min_node_count. There
0000000000000000000000000000000000000000;;		// has to enough quota to scale up the cluster.
0000000000000000000000000000000000000000;;		MaxNodeCount int64 `json:"maxNodeCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MinNodeCount: Minimum number of nodes in the NodePool. Must be >= 1
0000000000000000000000000000000000000000;;		// and <=
0000000000000000000000000000000000000000;;		// max_node_count.
0000000000000000000000000000000000000000;;		MinNodeCount int64 `json:"minNodeCount,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Enabled") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Enabled") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *NodePoolAutoscaling) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod NodePoolAutoscaling
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Operation: This operation resource represents operations that may
0000000000000000000000000000000000000000;;	// have happened or are
0000000000000000000000000000000000000000;;	// happening on the cluster. All fields are output only.
0000000000000000000000000000000000000000;;	type Operation struct {
0000000000000000000000000000000000000000;;		// Detail: Detailed operation progress, if available.
0000000000000000000000000000000000000000;;		Detail string `json:"detail,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The server-assigned ID for the operation.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OperationType: The operation type.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "TYPE_UNSPECIFIED" - Not set.
0000000000000000000000000000000000000000;;		//   "CREATE_CLUSTER" - Cluster create.
0000000000000000000000000000000000000000;;		//   "DELETE_CLUSTER" - Cluster delete.
0000000000000000000000000000000000000000;;		//   "UPGRADE_MASTER" - A master upgrade.
0000000000000000000000000000000000000000;;		//   "UPGRADE_NODES" - A node upgrade.
0000000000000000000000000000000000000000;;		//   "REPAIR_CLUSTER" - Cluster repair.
0000000000000000000000000000000000000000;;		//   "UPDATE_CLUSTER" - Cluster update.
0000000000000000000000000000000000000000;;		//   "CREATE_NODE_POOL" - Node pool create.
0000000000000000000000000000000000000000;;		//   "DELETE_NODE_POOL" - Node pool delete.
0000000000000000000000000000000000000000;;		//   "SET_NODE_POOL_MANAGEMENT" - Set node pool management.
0000000000000000000000000000000000000000;;		//   "AUTO_REPAIR_NODES" - Automatic node pool repair.
0000000000000000000000000000000000000000;;		//   "AUTO_UPGRADE_NODES" - Automatic node upgrade.
0000000000000000000000000000000000000000;;		//   "SET_LABELS" - Set labels.
0000000000000000000000000000000000000000;;		//   "SET_MASTER_AUTH" - Set/generate master auth materials
0000000000000000000000000000000000000000;;		OperationType string `json:"operationType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SelfLink: Server-defined URL for the resource.
0000000000000000000000000000000000000000;;		SelfLink string `json:"selfLink,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: The current status of the operation.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "STATUS_UNSPECIFIED" - Not set.
0000000000000000000000000000000000000000;;		//   "PENDING" - The operation has been created.
0000000000000000000000000000000000000000;;		//   "RUNNING" - The operation is currently running.
0000000000000000000000000000000000000000;;		//   "DONE" - The operation is done, either cancelled or completed.
0000000000000000000000000000000000000000;;		//   "ABORTING" - The operation is aborting.
0000000000000000000000000000000000000000;;		Status string `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StatusMessage: If an error has occurred, a textual description of the
0000000000000000000000000000000000000000;;		// error.
0000000000000000000000000000000000000000;;		StatusMessage string `json:"statusMessage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TargetLink: Server-defined URL for the target of the operation.
0000000000000000000000000000000000000000;;		TargetLink string `json:"targetLink,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Zone: The name of the Google Compute
0000000000000000000000000000000000000000;;		// Engine
0000000000000000000000000000000000000000;;		// [zone](/compute/docs/zones#available) in which the operation
0000000000000000000000000000000000000000;;		// is taking place.
0000000000000000000000000000000000000000;;		Zone string `json:"zone,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Detail") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Detail") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Operation) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Operation
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RollbackNodePoolUpgradeRequest: RollbackNodePoolUpgradeRequest
0000000000000000000000000000000000000000;;	// rollbacks the previously Aborted or Failed
0000000000000000000000000000000000000000;;	// NodePool upgrade. This will be an no-op if the last upgrade
0000000000000000000000000000000000000000;;	// successfully
0000000000000000000000000000000000000000;;	// completed.
0000000000000000000000000000000000000000;;	type RollbackNodePoolUpgradeRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ServerConfig: Container Engine service configuration.
0000000000000000000000000000000000000000;;	type ServerConfig struct {
0000000000000000000000000000000000000000;;		// DefaultClusterVersion: Version of Kubernetes the service deploys by
0000000000000000000000000000000000000000;;		// default.
0000000000000000000000000000000000000000;;		DefaultClusterVersion string `json:"defaultClusterVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DefaultImageType: Default image type.
0000000000000000000000000000000000000000;;		DefaultImageType string `json:"defaultImageType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValidImageTypes: List of valid image types.
0000000000000000000000000000000000000000;;		ValidImageTypes []string `json:"validImageTypes,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValidMasterVersions: List of valid master versions.
0000000000000000000000000000000000000000;;		ValidMasterVersions []string `json:"validMasterVersions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValidNodeVersions: List of valid node upgrade target versions.
0000000000000000000000000000000000000000;;		ValidNodeVersions []string `json:"validNodeVersions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "DefaultClusterVersion") to unconditionally include in API requests.
0000000000000000000000000000000000000000;;		// By default, fields with empty values are omitted from API requests.
0000000000000000000000000000000000000000;;		// However, any non-pointer, non-interface field appearing in
0000000000000000000000000000000000000000;;		// ForceSendFields will be sent to the server regardless of whether the
0000000000000000000000000000000000000000;;		// field is empty or not. This may be used to include empty fields in
0000000000000000000000000000000000000000;;		// Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "DefaultClusterVersion") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ServerConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ServerConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLabelsRequest: SetLabelsRequest sets the Google Cloud Platform
0000000000000000000000000000000000000000;;	// labels on a Google Container
0000000000000000000000000000000000000000;;	// Engine cluster, which will in turn set them for Google Compute
0000000000000000000000000000000000000000;;	// Engine
0000000000000000000000000000000000000000;;	// resources used by that cluster
0000000000000000000000000000000000000000;;	type SetLabelsRequest struct {
0000000000000000000000000000000000000000;;		// LabelFingerprint: The fingerprint of the previous set of labels for
0000000000000000000000000000000000000000;;		// this resource,
0000000000000000000000000000000000000000;;		// used to detect conflicts. The fingerprint is initially generated
0000000000000000000000000000000000000000;;		// by
0000000000000000000000000000000000000000;;		// Container Engine and changes after every request to modify or
0000000000000000000000000000000000000000;;		// update
0000000000000000000000000000000000000000;;		// labels. You must always provide an up-to-date fingerprint hash
0000000000000000000000000000000000000000;;		// when
0000000000000000000000000000000000000000;;		// updating or changing labels. Make a <code>get()</code> request to
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// resource to get the latest fingerprint.
0000000000000000000000000000000000000000;;		LabelFingerprint string `json:"labelFingerprint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceLabels: The labels to set for that cluster.
0000000000000000000000000000000000000000;;		ResourceLabels map[string]string `json:"resourceLabels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "LabelFingerprint") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "LabelFingerprint") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SetLabelsRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SetLabelsRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetLegacyAbacRequest: SetLegacyAbacRequest enables or disables the
0000000000000000000000000000000000000000;;	// ABAC authorization mechanism for
0000000000000000000000000000000000000000;;	// a cluster.
0000000000000000000000000000000000000000;;	type SetLegacyAbacRequest struct {
0000000000000000000000000000000000000000;;		// Enabled: Whether ABAC authorization will be enabled in the cluster.
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Enabled") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Enabled") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SetLegacyAbacRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SetLegacyAbacRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMasterAuthRequest: SetMasterAuthRequest updates the admin password
0000000000000000000000000000000000000000;;	// of a cluster.
0000000000000000000000000000000000000000;;	type SetMasterAuthRequest struct {
0000000000000000000000000000000000000000;;		// Action: The exact form of action to be taken on the master auth
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "UNKNOWN" - Operation is unknown and will error out
0000000000000000000000000000000000000000;;		//   "SET_PASSWORD" - Set the password to a user generated value.
0000000000000000000000000000000000000000;;		//   "GENERATE_PASSWORD" - Generate a new password and set it to that.
0000000000000000000000000000000000000000;;		Action string `json:"action,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Update: A description of the update.
0000000000000000000000000000000000000000;;		Update *MasterAuth `json:"update,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Action") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Action") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SetMasterAuthRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SetMasterAuthRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetNodePoolManagementRequest: SetNodePoolManagementRequest sets the
0000000000000000000000000000000000000000;;	// node management properties of a node
0000000000000000000000000000000000000000;;	// pool.
0000000000000000000000000000000000000000;;	type SetNodePoolManagementRequest struct {
0000000000000000000000000000000000000000;;		// Management: NodeManagement configuration for the node pool.
0000000000000000000000000000000000000000;;		Management *NodeManagement `json:"management,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Management") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Management") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SetNodePoolManagementRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SetNodePoolManagementRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartIPRotationRequest: StartIPRotationRequest creates a new IP for
0000000000000000000000000000000000000000;;	// the cluster and then performs
0000000000000000000000000000000000000000;;	// a node upgrade on each node pool to point to the new IP.
0000000000000000000000000000000000000000;;	type StartIPRotationRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateClusterRequest: UpdateClusterRequest updates the settings of a
0000000000000000000000000000000000000000;;	// cluster.
0000000000000000000000000000000000000000;;	type UpdateClusterRequest struct {
0000000000000000000000000000000000000000;;		// Update: A description of the update.
0000000000000000000000000000000000000000;;		Update *ClusterUpdate `json:"update,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Update") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Update") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *UpdateClusterRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod UpdateClusterRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.getServerconfig":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesGetServerconfigCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetServerconfig: Returns configuration info about the Container
0000000000000000000000000000000000000000;;	// Engine service.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesService) GetServerconfig(projectId string, zone string) *ProjectsZonesGetServerconfigCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesGetServerconfigCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) Fields(s ...googleapi.Field) *ProjectsZonesGetServerconfigCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) IfNoneMatch(entityTag string) *ProjectsZonesGetServerconfigCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) Context(ctx context.Context) *ProjectsZonesGetServerconfigCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/serverconfig")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.getServerconfig" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ServerConfig or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ServerConfig.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesGetServerconfigCall) Do(opts ...googleapi.CallOption) (*ServerConfig, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ServerConfig{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns configuration info about the Container Engine service.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/serverconfig",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.getServerconfig",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine [zone](/compute/docs/zones#available)\nto return operations for.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/serverconfig",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ServerConfig"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.completeIpRotation":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersCompleteIpRotationCall struct {
0000000000000000000000000000000000000000;;		s                         *Service
0000000000000000000000000000000000000000;;		projectId                 string
0000000000000000000000000000000000000000;;		zone                      string
0000000000000000000000000000000000000000;;		clusterId                 string
0000000000000000000000000000000000000000;;		completeiprotationrequest *CompleteIPRotationRequest
0000000000000000000000000000000000000000;;		urlParams_                gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                      context.Context
0000000000000000000000000000000000000000;;		header_                   http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CompleteIpRotation: Completes master IP rotation.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) CompleteIpRotation(projectId string, zone string, clusterId string, completeiprotationrequest *CompleteIPRotationRequest) *ProjectsZonesClustersCompleteIpRotationCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersCompleteIpRotationCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.completeiprotationrequest = completeiprotationrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCompleteIpRotationCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersCompleteIpRotationCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCompleteIpRotationCall) Context(ctx context.Context) *ProjectsZonesClustersCompleteIpRotationCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCompleteIpRotationCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCompleteIpRotationCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.completeiprotationrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.completeIpRotation" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCompleteIpRotationCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Completes master IP rotation.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.completeIpRotation",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CompleteIPRotationRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersCreateCall struct {
0000000000000000000000000000000000000000;;		s                    *Service
0000000000000000000000000000000000000000;;		projectId            string
0000000000000000000000000000000000000000;;		zone                 string
0000000000000000000000000000000000000000;;		createclusterrequest *CreateClusterRequest
0000000000000000000000000000000000000000;;		urlParams_           gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                 context.Context
0000000000000000000000000000000000000000;;		header_              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a cluster, consisting of the specified number and
0000000000000000000000000000000000000000;;	// type of Google
0000000000000000000000000000000000000000;;	// Compute Engine instances.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// By default, the cluster is created in the project's
0000000000000000000000000000000000000000;;	// [default
0000000000000000000000000000000000000000;;	// network](/compute/docs/networks-and-firewalls#networks).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// One firewall is added for the cluster. After cluster creation,
0000000000000000000000000000000000000000;;	// the cluster creates routes for each node to allow the containers
0000000000000000000000000000000000000000;;	// on that node to communicate with all other instances in
0000000000000000000000000000000000000000;;	// the
0000000000000000000000000000000000000000;;	// cluster.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Finally, an entry is added to the project's global metadata
0000000000000000000000000000000000000000;;	// indicating
0000000000000000000000000000000000000000;;	// which CIDR range is being used by the cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) Create(projectId string, zone string, createclusterrequest *CreateClusterRequest) *ProjectsZonesClustersCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.createclusterrequest = createclusterrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCreateCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCreateCall) Context(ctx context.Context) *ProjectsZonesClustersCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.createclusterrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersCreateCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a cluster, consisting of the specified number and type of Google\nCompute Engine instances.\n\nBy default, the cluster is created in the project's\n[default network](/compute/docs/networks-and-firewalls#networks).\n\nOne firewall is added for the cluster. After cluster creation,\nthe cluster creates routes for each node to allow the containers\non that node to communicate with all other instances in the\ncluster.\n\nFinally, an entry is added to the project's global metadata indicating\nwhich CIDR range is being used by the cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CreateClusterRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		projectId  string
0000000000000000000000000000000000000000;;		zone       string
0000000000000000000000000000000000000000;;		clusterId  string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes the cluster, including the Kubernetes endpoint and
0000000000000000000000000000000000000000;;	// all worker
0000000000000000000000000000000000000000;;	// nodes.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Firewalls and routes that were configured during cluster creation
0000000000000000000000000000000000000000;;	// are also deleted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Other Google Compute Engine resources that might be in use by the
0000000000000000000000000000000000000000;;	// cluster
0000000000000000000000000000000000000000;;	// (e.g. load balancer resources) will not be deleted if they weren't
0000000000000000000000000000000000000000;;	// present
0000000000000000000000000000000000000000;;	// at the initial create time.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) Delete(projectId string, zone string, clusterId string) *ProjectsZonesClustersDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersDeleteCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersDeleteCall) Context(ctx context.Context) *ProjectsZonesClustersDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes the cluster, including the Kubernetes endpoint and all worker\nnodes.\n\nFirewalls and routes that were configured during cluster creation\nare also deleted.\n\nOther Google Compute Engine resources that might be in use by the cluster\n(e.g. load balancer resources) will not be deleted if they weren't present\nat the initial create time.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to delete.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		clusterId    string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets the details of a specific cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) Get(projectId string, zone string, clusterId string) *ProjectsZonesClustersGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) IfNoneMatch(entityTag string) *ProjectsZonesClustersGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) Context(ctx context.Context) *ProjectsZonesClustersGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Cluster or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Cluster.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersGetCall) Do(opts ...googleapi.CallOption) (*Cluster, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Cluster{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets the details of a specific cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to retrieve.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Cluster"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.legacyAbac":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersLegacyAbacCall struct {
0000000000000000000000000000000000000000;;		s                    *Service
0000000000000000000000000000000000000000;;		projectId            string
0000000000000000000000000000000000000000;;		zone                 string
0000000000000000000000000000000000000000;;		clusterId            string
0000000000000000000000000000000000000000;;		setlegacyabacrequest *SetLegacyAbacRequest
0000000000000000000000000000000000000000;;		urlParams_           gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                 context.Context
0000000000000000000000000000000000000000;;		header_              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LegacyAbac: Enables or disables the ABAC authorization mechanism on a
0000000000000000000000000000000000000000;;	// cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) LegacyAbac(projectId string, zone string, clusterId string, setlegacyabacrequest *SetLegacyAbacRequest) *ProjectsZonesClustersLegacyAbacCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersLegacyAbacCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.setlegacyabacrequest = setlegacyabacrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersLegacyAbacCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersLegacyAbacCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersLegacyAbacCall) Context(ctx context.Context) *ProjectsZonesClustersLegacyAbacCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersLegacyAbacCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersLegacyAbacCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setlegacyabacrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.legacyAbac" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersLegacyAbacCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Enables or disables the ABAC authorization mechanism on a cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.legacyAbac",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to update.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetLegacyAbacRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists all clusters owned by a project in either the specified
0000000000000000000000000000000000000000;;	// zone or all
0000000000000000000000000000000000000000;;	// zones.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) List(projectId string, zone string) *ProjectsZonesClustersListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) IfNoneMatch(entityTag string) *ProjectsZonesClustersListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) Context(ctx context.Context) *ProjectsZonesClustersListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListClustersResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListClustersResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersListCall) Do(opts ...googleapi.CallOption) (*ListClustersResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListClustersResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists all clusters owned by a project in either the specified zone or all\nzones.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides, or \"-\" for all zones.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListClustersResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.resourceLabels":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersResourceLabelsCall struct {
0000000000000000000000000000000000000000;;		s                *Service
0000000000000000000000000000000000000000;;		projectId        string
0000000000000000000000000000000000000000;;		zone             string
0000000000000000000000000000000000000000;;		clusterId        string
0000000000000000000000000000000000000000;;		setlabelsrequest *SetLabelsRequest
0000000000000000000000000000000000000000;;		urlParams_       gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_             context.Context
0000000000000000000000000000000000000000;;		header_          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResourceLabels: Sets labels on a cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) ResourceLabels(projectId string, zone string, clusterId string, setlabelsrequest *SetLabelsRequest) *ProjectsZonesClustersResourceLabelsCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersResourceLabelsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.setlabelsrequest = setlabelsrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersResourceLabelsCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersResourceLabelsCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersResourceLabelsCall) Context(ctx context.Context) *ProjectsZonesClustersResourceLabelsCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersResourceLabelsCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersResourceLabelsCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setlabelsrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.resourceLabels" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersResourceLabelsCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Sets labels on a cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.resourceLabels",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetLabelsRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.setMasterAuth":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersSetMasterAuthCall struct {
0000000000000000000000000000000000000000;;		s                    *Service
0000000000000000000000000000000000000000;;		projectId            string
0000000000000000000000000000000000000000;;		zone                 string
0000000000000000000000000000000000000000;;		clusterId            string
0000000000000000000000000000000000000000;;		setmasterauthrequest *SetMasterAuthRequest
0000000000000000000000000000000000000000;;		urlParams_           gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                 context.Context
0000000000000000000000000000000000000000;;		header_              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetMasterAuth: Used to set master auth materials. Currently supports
0000000000000000000000000000000000000000;;	// :-
0000000000000000000000000000000000000000;;	// Changing the admin password of a specific cluster.
0000000000000000000000000000000000000000;;	// This can be either via password generation or explicitly set the
0000000000000000000000000000000000000000;;	// password.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) SetMasterAuth(projectId string, zone string, clusterId string, setmasterauthrequest *SetMasterAuthRequest) *ProjectsZonesClustersSetMasterAuthCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersSetMasterAuthCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.setmasterauthrequest = setmasterauthrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersSetMasterAuthCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersSetMasterAuthCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersSetMasterAuthCall) Context(ctx context.Context) *ProjectsZonesClustersSetMasterAuthCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersSetMasterAuthCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersSetMasterAuthCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setmasterauthrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.setMasterAuth" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersSetMasterAuthCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Used to set master auth materials. Currently supports :-\nChanging the admin password of a specific cluster.\nThis can be either via password generation or explicitly set the password.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.setMasterAuth",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to upgrade.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetMasterAuthRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.startIpRotation":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersStartIpRotationCall struct {
0000000000000000000000000000000000000000;;		s                      *Service
0000000000000000000000000000000000000000;;		projectId              string
0000000000000000000000000000000000000000;;		zone                   string
0000000000000000000000000000000000000000;;		clusterId              string
0000000000000000000000000000000000000000;;		startiprotationrequest *StartIPRotationRequest
0000000000000000000000000000000000000000;;		urlParams_             gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                   context.Context
0000000000000000000000000000000000000000;;		header_                http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// StartIpRotation: Start master IP rotation.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) StartIpRotation(projectId string, zone string, clusterId string, startiprotationrequest *StartIPRotationRequest) *ProjectsZonesClustersStartIpRotationCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersStartIpRotationCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.startiprotationrequest = startiprotationrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersStartIpRotationCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersStartIpRotationCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersStartIpRotationCall) Context(ctx context.Context) *ProjectsZonesClustersStartIpRotationCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersStartIpRotationCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersStartIpRotationCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.startiprotationrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.startIpRotation" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersStartIpRotationCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Start master IP rotation.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.startIpRotation",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "StartIPRotationRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.update":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersUpdateCall struct {
0000000000000000000000000000000000000000;;		s                    *Service
0000000000000000000000000000000000000000;;		projectId            string
0000000000000000000000000000000000000000;;		zone                 string
0000000000000000000000000000000000000000;;		clusterId            string
0000000000000000000000000000000000000000;;		updateclusterrequest *UpdateClusterRequest
0000000000000000000000000000000000000000;;		urlParams_           gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                 context.Context
0000000000000000000000000000000000000000;;		header_              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update: Updates the settings of a specific cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersService) Update(projectId string, zone string, clusterId string, updateclusterrequest *UpdateClusterRequest) *ProjectsZonesClustersUpdateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.updateclusterrequest = updateclusterrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersUpdateCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersUpdateCall) Context(ctx context.Context) *ProjectsZonesClustersUpdateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersUpdateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersUpdateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.updateclusterrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PUT", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.update" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersUpdateCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Updates the settings of a specific cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PUT",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.update",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to upgrade.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "UpdateClusterRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsCreateCall struct {
0000000000000000000000000000000000000000;;		s                     *Service
0000000000000000000000000000000000000000;;		projectId             string
0000000000000000000000000000000000000000;;		zone                  string
0000000000000000000000000000000000000000;;		clusterId             string
0000000000000000000000000000000000000000;;		createnodepoolrequest *CreateNodePoolRequest
0000000000000000000000000000000000000000;;		urlParams_            gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                  context.Context
0000000000000000000000000000000000000000;;		header_               http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a node pool for a cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) Create(projectId string, zone string, clusterId string, createnodepoolrequest *CreateNodePoolRequest) *ProjectsZonesClustersNodePoolsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.createnodepoolrequest = createnodepoolrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsCreateCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsCreateCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.createnodepoolrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsCreateCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a node pool for a cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CreateNodePoolRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		projectId  string
0000000000000000000000000000000000000000;;		zone       string
0000000000000000000000000000000000000000;;		clusterId  string
0000000000000000000000000000000000000000;;		nodePoolId string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes a node pool from a cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) Delete(projectId string, zone string, clusterId string, nodePoolId string) *ProjectsZonesClustersNodePoolsDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.nodePoolId = nodePoolId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsDeleteCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsDeleteCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":  c.projectId,
0000000000000000000000000000000000000000;;			"zone":       c.zone,
0000000000000000000000000000000000000000;;			"clusterId":  c.clusterId,
0000000000000000000000000000000000000000;;			"nodePoolId": c.nodePoolId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes a node pool from a cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId",
0000000000000000000000000000000000000000;;		//     "nodePoolId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "nodePoolId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the node pool to delete.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		clusterId    string
0000000000000000000000000000000000000000;;		nodePoolId   string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Retrieves the node pool requested.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) Get(projectId string, zone string, clusterId string, nodePoolId string) *ProjectsZonesClustersNodePoolsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.nodePoolId = nodePoolId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) IfNoneMatch(entityTag string) *ProjectsZonesClustersNodePoolsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":  c.projectId,
0000000000000000000000000000000000000000;;			"zone":       c.zone,
0000000000000000000000000000000000000000;;			"clusterId":  c.clusterId,
0000000000000000000000000000000000000000;;			"nodePoolId": c.nodePoolId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *NodePool or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *NodePool.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsGetCall) Do(opts ...googleapi.CallOption) (*NodePool, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &NodePool{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Retrieves the node pool requested.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId",
0000000000000000000000000000000000000000;;		//     "nodePoolId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "nodePoolId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the node pool.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "NodePool"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		clusterId    string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the node pools for a cluster.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) List(projectId string, zone string, clusterId string) *ProjectsZonesClustersNodePoolsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) IfNoneMatch(entityTag string) *ProjectsZonesClustersNodePoolsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;			"clusterId": c.clusterId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListNodePoolsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListNodePoolsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsListCall) Do(opts ...googleapi.CallOption) (*ListNodePoolsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListNodePoolsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the node pools for a cluster.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://developers.google.com/console/help/new/#projectnumber).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListNodePoolsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.rollback":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsRollbackCall struct {
0000000000000000000000000000000000000000;;		s                              *Service
0000000000000000000000000000000000000000;;		projectId                      string
0000000000000000000000000000000000000000;;		zone                           string
0000000000000000000000000000000000000000;;		clusterId                      string
0000000000000000000000000000000000000000;;		nodePoolId                     string
0000000000000000000000000000000000000000;;		rollbacknodepoolupgraderequest *RollbackNodePoolUpgradeRequest
0000000000000000000000000000000000000000;;		urlParams_                     gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                           context.Context
0000000000000000000000000000000000000000;;		header_                        http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rollback: Roll back the previously Aborted or Failed NodePool
0000000000000000000000000000000000000000;;	// upgrade.
0000000000000000000000000000000000000000;;	// This will be an no-op if the last upgrade successfully completed.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) Rollback(projectId string, zone string, clusterId string, nodePoolId string, rollbacknodepoolupgraderequest *RollbackNodePoolUpgradeRequest) *ProjectsZonesClustersNodePoolsRollbackCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsRollbackCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.nodePoolId = nodePoolId
0000000000000000000000000000000000000000;;		c.rollbacknodepoolupgraderequest = rollbacknodepoolupgraderequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsRollbackCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsRollbackCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsRollbackCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsRollbackCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsRollbackCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsRollbackCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.rollbacknodepoolupgraderequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":  c.projectId,
0000000000000000000000000000000000000000;;			"zone":       c.zone,
0000000000000000000000000000000000000000;;			"clusterId":  c.clusterId,
0000000000000000000000000000000000000000;;			"nodePoolId": c.nodePoolId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.rollback" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsRollbackCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Roll back the previously Aborted or Failed NodePool upgrade.\nThis will be an no-op if the last upgrade successfully completed.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.rollback",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId",
0000000000000000000000000000000000000000;;		//     "nodePoolId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to rollback.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "nodePoolId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the node pool to rollback.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "RollbackNodePoolUpgradeRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.clusters.nodePools.setManagement":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesClustersNodePoolsSetManagementCall struct {
0000000000000000000000000000000000000000;;		s                            *Service
0000000000000000000000000000000000000000;;		projectId                    string
0000000000000000000000000000000000000000;;		zone                         string
0000000000000000000000000000000000000000;;		clusterId                    string
0000000000000000000000000000000000000000;;		nodePoolId                   string
0000000000000000000000000000000000000000;;		setnodepoolmanagementrequest *SetNodePoolManagementRequest
0000000000000000000000000000000000000000;;		urlParams_                   gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                         context.Context
0000000000000000000000000000000000000000;;		header_                      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetManagement: Sets the NodeManagement options for a node pool.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesClustersNodePoolsService) SetManagement(projectId string, zone string, clusterId string, nodePoolId string, setnodepoolmanagementrequest *SetNodePoolManagementRequest) *ProjectsZonesClustersNodePoolsSetManagementCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesClustersNodePoolsSetManagementCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.clusterId = clusterId
0000000000000000000000000000000000000000;;		c.nodePoolId = nodePoolId
0000000000000000000000000000000000000000;;		c.setnodepoolmanagementrequest = setnodepoolmanagementrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsSetManagementCall) Fields(s ...googleapi.Field) *ProjectsZonesClustersNodePoolsSetManagementCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsSetManagementCall) Context(ctx context.Context) *ProjectsZonesClustersNodePoolsSetManagementCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsSetManagementCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsSetManagementCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setnodepoolmanagementrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":  c.projectId,
0000000000000000000000000000000000000000;;			"zone":       c.zone,
0000000000000000000000000000000000000000;;			"clusterId":  c.clusterId,
0000000000000000000000000000000000000000;;			"nodePoolId": c.nodePoolId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.clusters.nodePools.setManagement" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesClustersNodePoolsSetManagementCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Sets the NodeManagement options for a node pool.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.clusters.nodePools.setManagement",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "clusterId",
0000000000000000000000000000000000000000;;		//     "nodePoolId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "clusterId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the cluster to update.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "nodePoolId": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the node pool to update.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetNodePoolManagementRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.operations.cancel":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesOperationsCancelCall struct {
0000000000000000000000000000000000000000;;		s                      *Service
0000000000000000000000000000000000000000;;		projectId              string
0000000000000000000000000000000000000000;;		zone                   string
0000000000000000000000000000000000000000;;		operationId            string
0000000000000000000000000000000000000000;;		canceloperationrequest *CancelOperationRequest
0000000000000000000000000000000000000000;;		urlParams_             gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                   context.Context
0000000000000000000000000000000000000000;;		header_                http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Cancel: Cancels the specified operation.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesOperationsService) Cancel(projectId string, zone string, operationId string, canceloperationrequest *CancelOperationRequest) *ProjectsZonesOperationsCancelCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesOperationsCancelCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.operationId = operationId
0000000000000000000000000000000000000000;;		c.canceloperationrequest = canceloperationrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsCancelCall) Fields(s ...googleapi.Field) *ProjectsZonesOperationsCancelCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsCancelCall) Context(ctx context.Context) *ProjectsZonesOperationsCancelCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsCancelCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsCancelCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.canceloperationrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":   c.projectId,
0000000000000000000000000000000000000000;;			"zone":        c.zone,
0000000000000000000000000000000000000000;;			"operationId": c.operationId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.operations.cancel" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsCancelCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Cancels the specified operation.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.operations.cancel",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "operationId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "operationId": {
0000000000000000000000000000000000000000;;		//       "description": "The server-assigned `name` of the operation.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the operation resides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CancelOperationRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.operations.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesOperationsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		operationId  string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets the specified operation.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesOperationsService) Get(projectId string, zone string, operationId string) *ProjectsZonesOperationsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesOperationsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		c.operationId = operationId
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) Fields(s ...googleapi.Field) *ProjectsZonesOperationsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) IfNoneMatch(entityTag string) *ProjectsZonesOperationsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) Context(ctx context.Context) *ProjectsZonesOperationsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/operations/{operationId}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId":   c.projectId,
0000000000000000000000000000000000000000;;			"zone":        c.zone,
0000000000000000000000000000000000000000;;			"operationId": c.operationId,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.operations.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Operation or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Operation.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsGetCall) Do(opts ...googleapi.CallOption) (*Operation, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Operation{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets the specified operation.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/operations/{operationId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.operations.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone",
0000000000000000000000000000000000000000;;		//     "operationId"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "operationId": {
0000000000000000000000000000000000000000;;		//       "description": "The server-assigned `name` of the operation.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine\n[zone](/compute/docs/zones#available) in which the cluster\nresides.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/operations/{operationId}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Operation"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "container.projects.zones.operations.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsZonesOperationsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		projectId    string
0000000000000000000000000000000000000000;;		zone         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists all operations in a project in a specific zone or all
0000000000000000000000000000000000000000;;	// zones.
0000000000000000000000000000000000000000;;	func (r *ProjectsZonesOperationsService) List(projectId string, zone string) *ProjectsZonesOperationsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsZonesOperationsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.projectId = projectId
0000000000000000000000000000000000000000;;		c.zone = zone
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) Fields(s ...googleapi.Field) *ProjectsZonesOperationsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) IfNoneMatch(entityTag string) *ProjectsZonesOperationsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) Context(ctx context.Context) *ProjectsZonesOperationsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/projects/{projectId}/zones/{zone}/operations")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"projectId": c.projectId,
0000000000000000000000000000000000000000;;			"zone":      c.zone,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "container.projects.zones.operations.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListOperationsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListOperationsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsZonesOperationsListCall) Do(opts ...googleapi.CallOption) (*ListOperationsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListOperationsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists all operations in a project in a specific zone or all zones.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectId}/zones/{zone}/operations",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "container.projects.zones.operations.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "projectId",
0000000000000000000000000000000000000000;;		//     "zone"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "projectId": {
0000000000000000000000000000000000000000;;		//       "description": "The Google Developers Console [project ID or project\nnumber](https://support.google.com/cloud/answer/6158840).",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "zone": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the Google Compute Engine [zone](/compute/docs/zones#available)\nto return operations for, or `-` for all zones.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/projects/{projectId}/zones/{zone}/operations",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListOperationsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
