0000000000000000000000000000000000000000;;	// Copyright 2017 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//      http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
db73eca7336e67cf99cea454745afc888e9596fd;;	
0000000000000000000000000000000000000000;;	package gensupport
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/net/context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retry invokes the given function, retrying it multiple times if the connection failed or
0000000000000000000000000000000000000000;;	// the HTTP status response indicates the request should be attempted again. ctx may be nil.
0000000000000000000000000000000000000000;;	func Retry(ctx context.Context, f func() (*http.Response, error), backoff BackoffStrategy) (*http.Response, error) {
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			resp, err := f()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			var status int
0000000000000000000000000000000000000000;;			if resp != nil {
0000000000000000000000000000000000000000;;				status = resp.StatusCode
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Return if we shouldn't retry.
0000000000000000000000000000000000000000;;			pause, retry := backoff.Pause()
0000000000000000000000000000000000000000;;			if !shouldRetry(status, err) || !retry {
0000000000000000000000000000000000000000;;				return resp, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Ensure the response body is closed, if any.
0000000000000000000000000000000000000000;;			if resp != nil && resp.Body != nil {
0000000000000000000000000000000000000000;;				resp.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Pause, but still listen to ctx.Done if context is not nil.
0000000000000000000000000000000000000000;;			var done <-chan struct{}
0000000000000000000000000000000000000000;;			if ctx != nil {
0000000000000000000000000000000000000000;;				done = ctx.Done()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case <-done:
0000000000000000000000000000000000000000;;				return nil, ctx.Err()
0000000000000000000000000000000000000000;;			case <-time.After(pause):
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DefaultBackoffStrategy returns a default strategy to use for retrying failed upload requests.
0000000000000000000000000000000000000000;;	func DefaultBackoffStrategy() BackoffStrategy {
0000000000000000000000000000000000000000;;		return &ExponentialBackoff{
0000000000000000000000000000000000000000;;			Base: 250 * time.Millisecond,
0000000000000000000000000000000000000000;;			Max:  16 * time.Second,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// shouldRetry returns true if the HTTP response / error indicates that the
0000000000000000000000000000000000000000;;	// request should be attempted again.
0000000000000000000000000000000000000000;;	func shouldRetry(status int, err error) bool {
0000000000000000000000000000000000000000;;		if 500 <= status && status <= 599 {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if status == statusTooManyRequests {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == io.ErrUnexpectedEOF {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err, ok := err.(net.Error); ok {
0000000000000000000000000000000000000000;;			return err.Temporary()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
