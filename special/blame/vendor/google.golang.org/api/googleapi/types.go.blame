0000000000000000000000000000000000000000;;	// Copyright 2013 Google Inc. All rights reserved.
0000000000000000000000000000000000000000;;	// Use of this source code is governed by a BSD-style
0000000000000000000000000000000000000000;;	// license that can be found in the LICENSE file.
0bb851a996de6832be77e7fbed24df546e763dcf;third_party/src/code.google.com/p/google-api-go-client/googleapi/types.go[third_party/src/code.google.com/p/google-api-go-client/googleapi/types.go][vendor/google.golang.org/api/googleapi/types.go];	
0000000000000000000000000000000000000000;;	package googleapi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64s is a slice of int64s that marshal as quoted strings in JSON.
0000000000000000000000000000000000000000;;	type Int64s []int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *Int64s) UnmarshalJSON(raw []byte) error {
0000000000000000000000000000000000000000;;		*q = (*q)[:0]
0000000000000000000000000000000000000000;;		var ss []string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(raw, &ss); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			v, err := strconv.ParseInt(s, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*q = append(*q, int64(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32s is a slice of int32s that marshal as quoted strings in JSON.
0000000000000000000000000000000000000000;;	type Int32s []int32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *Int32s) UnmarshalJSON(raw []byte) error {
0000000000000000000000000000000000000000;;		*q = (*q)[:0]
0000000000000000000000000000000000000000;;		var ss []string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(raw, &ss); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			v, err := strconv.ParseInt(s, 10, 32)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*q = append(*q, int32(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64s is a slice of uint64s that marshal as quoted strings in JSON.
0000000000000000000000000000000000000000;;	type Uint64s []uint64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *Uint64s) UnmarshalJSON(raw []byte) error {
0000000000000000000000000000000000000000;;		*q = (*q)[:0]
0000000000000000000000000000000000000000;;		var ss []string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(raw, &ss); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			v, err := strconv.ParseUint(s, 10, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*q = append(*q, uint64(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32s is a slice of uint32s that marshal as quoted strings in JSON.
0000000000000000000000000000000000000000;;	type Uint32s []uint32
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *Uint32s) UnmarshalJSON(raw []byte) error {
0000000000000000000000000000000000000000;;		*q = (*q)[:0]
0000000000000000000000000000000000000000;;		var ss []string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(raw, &ss); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			v, err := strconv.ParseUint(s, 10, 32)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*q = append(*q, uint32(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64s is a slice of float64s that marshal as quoted strings in JSON.
0000000000000000000000000000000000000000;;	type Float64s []float64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (q *Float64s) UnmarshalJSON(raw []byte) error {
0000000000000000000000000000000000000000;;		*q = (*q)[:0]
0000000000000000000000000000000000000000;;		var ss []string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(raw, &ss); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, s := range ss {
0000000000000000000000000000000000000000;;			v, err := strconv.ParseFloat(s, 64)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			*q = append(*q, float64(v))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func quotedList(n int, fn func(dst []byte, i int) []byte) ([]byte, error) {
0000000000000000000000000000000000000000;;		dst := make([]byte, 0, 2+n*10) // somewhat arbitrary
0000000000000000000000000000000000000000;;		dst = append(dst, '[')
0000000000000000000000000000000000000000;;		for i := 0; i < n; i++ {
0000000000000000000000000000000000000000;;			if i > 0 {
0000000000000000000000000000000000000000;;				dst = append(dst, ',')
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			dst = append(dst, '"')
0000000000000000000000000000000000000000;;			dst = fn(dst, i)
0000000000000000000000000000000000000000;;			dst = append(dst, '"')
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dst = append(dst, ']')
0000000000000000000000000000000000000000;;		return dst, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Int64s) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return quotedList(len(s), func(dst []byte, i int) []byte {
0000000000000000000000000000000000000000;;			return strconv.AppendInt(dst, s[i], 10)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Int32s) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return quotedList(len(s), func(dst []byte, i int) []byte {
0000000000000000000000000000000000000000;;			return strconv.AppendInt(dst, int64(s[i]), 10)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Uint64s) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return quotedList(len(s), func(dst []byte, i int) []byte {
0000000000000000000000000000000000000000;;			return strconv.AppendUint(dst, s[i], 10)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Uint32s) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return quotedList(len(s), func(dst []byte, i int) []byte {
0000000000000000000000000000000000000000;;			return strconv.AppendUint(dst, uint64(s[i]), 10)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s Float64s) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return quotedList(len(s), func(dst []byte, i int) []byte {
0000000000000000000000000000000000000000;;			return strconv.AppendFloat(dst, s[i], 'g', -1, 64)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RawMessage is a raw encoded JSON value.
0000000000000000000000000000000000000000;;	// It is identical to json.RawMessage, except it does not suffer from
0000000000000000000000000000000000000000;;	// https://golang.org/issue/14493.
0000000000000000000000000000000000000000;;	type RawMessage []byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON returns m.
0000000000000000000000000000000000000000;;	func (m RawMessage) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return m, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON sets *m to a copy of data.
0000000000000000000000000000000000000000;;	func (m *RawMessage) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		if m == nil {
0000000000000000000000000000000000000000;;			return errors.New("googleapi.RawMessage: UnmarshalJSON on nil pointer")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*m = append((*m)[:0], data...)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	 * Helper routines for simplifying the creation of optional fields of basic type.
0000000000000000000000000000000000000000;;	 */
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Bool is a helper routine that allocates a new bool value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Bool(v bool) *bool { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int32 is a helper routine that allocates a new int32 value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Int32(v int32) *int32 { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Int64 is a helper routine that allocates a new int64 value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Int64(v int64) *int64 { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Float64 is a helper routine that allocates a new float64 value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Float64(v float64) *float64 { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint32 is a helper routine that allocates a new uint32 value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Uint32(v uint32) *uint32 { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Uint64 is a helper routine that allocates a new uint64 value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func Uint64(v uint64) *uint64 { return &v }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String is a helper routine that allocates a new string value
0000000000000000000000000000000000000000;;	// to store v and returns a pointer to it.
0000000000000000000000000000000000000000;;	func String(v string) *string { return &v }
