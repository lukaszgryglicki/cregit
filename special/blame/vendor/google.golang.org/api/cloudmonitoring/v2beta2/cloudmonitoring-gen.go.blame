0000000000000000000000000000000000000000;;	// Package cloudmonitoring provides access to the Cloud Monitoring API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://cloud.google.com/monitoring/v2beta2/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/cloudmonitoring/v2beta2"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   cloudmonitoringService, err := cloudmonitoring.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package cloudmonitoring
f93a2f32edc5a80bfe62d9d1be4a5a1dcbfbe5aa;Godeps/_workspace/src/github.com/google/google-api-go-client/cloudmonitoring/v2beta2/cloudmonitoring-gen.go[Godeps/_workspace/src/github.com/google/google-api-go-client/cloudmonitoring/v2beta2/cloudmonitoring-gen.go][vendor/google.golang.org/api/cloudmonitoring/v2beta2/cloudmonitoring-gen.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "cloudmonitoring:v2beta2"
0000000000000000000000000000000000000000;;	const apiName = "cloudmonitoring"
0000000000000000000000000000000000000000;;	const apiVersion = "v2beta2"
0000000000000000000000000000000000000000;;	const basePath = "https://www.googleapis.com/cloudmonitoring/v2beta2/projects/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View and write monitoring data for all of your Google and third-party
0000000000000000000000000000000000000000;;		// Cloud and API projects
0000000000000000000000000000000000000000;;		MonitoringScope = "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.MetricDescriptors = NewMetricDescriptorsService(s)
0000000000000000000000000000000000000000;;		s.Timeseries = NewTimeseriesService(s)
0000000000000000000000000000000000000000;;		s.TimeseriesDescriptors = NewTimeseriesDescriptorsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MetricDescriptors *MetricDescriptorsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timeseries *TimeseriesService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TimeseriesDescriptors *TimeseriesDescriptorsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMetricDescriptorsService(s *Service) *MetricDescriptorsService {
0000000000000000000000000000000000000000;;		rs := &MetricDescriptorsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDescriptorsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTimeseriesService(s *Service) *TimeseriesService {
0000000000000000000000000000000000000000;;		rs := &TimeseriesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewTimeseriesDescriptorsService(s *Service) *TimeseriesDescriptorsService {
0000000000000000000000000000000000000000;;		rs := &TimeseriesDescriptorsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesDescriptorsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteMetricDescriptorResponse: The response of
0000000000000000000000000000000000000000;;	// cloudmonitoring.metricDescriptors.delete.
0000000000000000000000000000000000000000;;	type DeleteMetricDescriptorResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#deleteMetricDescriptorResponse".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DeleteMetricDescriptorResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod DeleteMetricDescriptorResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMetricDescriptorsRequest: The request of
0000000000000000000000000000000000000000;;	// cloudmonitoring.metricDescriptors.list.
0000000000000000000000000000000000000000;;	type ListMetricDescriptorsRequest struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listMetricDescriptorsRequest".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListMetricDescriptorsRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListMetricDescriptorsRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMetricDescriptorsResponse: The response of
0000000000000000000000000000000000000000;;	// cloudmonitoring.metricDescriptors.list.
0000000000000000000000000000000000000000;;	type ListMetricDescriptorsResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listMetricDescriptorsResponse".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metrics: The returned metric descriptors.
0000000000000000000000000000000000000000;;		Metrics []*MetricDescriptor `json:"metrics,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: Pagination token. If present, indicates that
0000000000000000000000000000000000000000;;		// additional results are available for retrieval. To access the results
0000000000000000000000000000000000000000;;		// past the pagination limit, pass this value to the pageToken query
0000000000000000000000000000000000000000;;		// parameter.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListMetricDescriptorsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListMetricDescriptorsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTimeseriesDescriptorsRequest: The request of
0000000000000000000000000000000000000000;;	// cloudmonitoring.timeseriesDescriptors.list
0000000000000000000000000000000000000000;;	type ListTimeseriesDescriptorsRequest struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listTimeseriesDescriptorsRequest".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListTimeseriesDescriptorsRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListTimeseriesDescriptorsRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTimeseriesDescriptorsResponse: The response of
0000000000000000000000000000000000000000;;	// cloudmonitoring.timeseriesDescriptors.list
0000000000000000000000000000000000000000;;	type ListTimeseriesDescriptorsResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listTimeseriesDescriptorsResponse".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: Pagination token. If present, indicates that
0000000000000000000000000000000000000000;;		// additional results are available for retrieval. To access the results
0000000000000000000000000000000000000000;;		// past the pagination limit, set this value to the pageToken query
0000000000000000000000000000000000000000;;		// parameter.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Oldest: The oldest timestamp of the interval of this query, as an RFC
0000000000000000000000000000000000000000;;		// 3339 string.
0000000000000000000000000000000000000000;;		Oldest string `json:"oldest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Timeseries: The returned time series descriptors.
0000000000000000000000000000000000000000;;		Timeseries []*TimeseriesDescriptor `json:"timeseries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Youngest: The youngest timestamp of the interval of this query, as an
0000000000000000000000000000000000000000;;		// RFC 3339 string.
0000000000000000000000000000000000000000;;		Youngest string `json:"youngest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListTimeseriesDescriptorsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListTimeseriesDescriptorsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTimeseriesRequest: The request of cloudmonitoring.timeseries.list
0000000000000000000000000000000000000000;;	type ListTimeseriesRequest struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listTimeseriesRequest".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListTimeseriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListTimeseriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListTimeseriesResponse: The response of
0000000000000000000000000000000000000000;;	// cloudmonitoring.timeseries.list
0000000000000000000000000000000000000000;;	type ListTimeseriesResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#listTimeseriesResponse".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: Pagination token. If present, indicates that
0000000000000000000000000000000000000000;;		// additional results are available for retrieval. To access the results
0000000000000000000000000000000000000000;;		// past the pagination limit, set the pageToken query parameter to this
0000000000000000000000000000000000000000;;		// value. All of the points of a time series will be returned before
0000000000000000000000000000000000000000;;		// returning any point of the subsequent time series.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Oldest: The oldest timestamp of the interval of this query as an RFC
0000000000000000000000000000000000000000;;		// 3339 string.
0000000000000000000000000000000000000000;;		Oldest string `json:"oldest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Timeseries: The returned time series.
0000000000000000000000000000000000000000;;		Timeseries []*Timeseries `json:"timeseries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Youngest: The youngest timestamp of the interval of this query as an
0000000000000000000000000000000000000000;;		// RFC 3339 string.
0000000000000000000000000000000000000000;;		Youngest string `json:"youngest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListTimeseriesResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListTimeseriesResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricDescriptor: A metricDescriptor defines the name, label keys,
0000000000000000000000000000000000000000;;	// and data type of a particular metric.
0000000000000000000000000000000000000000;;	type MetricDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: Description of this metric.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: Labels defined for this metric.
0000000000000000000000000000000000000000;;		Labels []*MetricDescriptorLabelDescriptor `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The name of this metric.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Project: The project ID to which the metric belongs.
0000000000000000000000000000000000000000;;		Project string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TypeDescriptor: Type description for this metric.
0000000000000000000000000000000000000000;;		TypeDescriptor *MetricDescriptorTypeDescriptor `json:"typeDescriptor,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MetricDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MetricDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricDescriptorLabelDescriptor: A label in a metric is a description
0000000000000000000000000000000000000000;;	// of this metric, including the key of this description (what the
0000000000000000000000000000000000000000;;	// description is), and the value for this description.
0000000000000000000000000000000000000000;;	type MetricDescriptorLabelDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: Label description.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Key: Label key.
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MetricDescriptorLabelDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MetricDescriptorLabelDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MetricDescriptorTypeDescriptor: A type in a metric contains
0000000000000000000000000000000000000000;;	// information about how the metric is collected and what its data
0000000000000000000000000000000000000000;;	// points look like.
0000000000000000000000000000000000000000;;	type MetricDescriptorTypeDescriptor struct {
0000000000000000000000000000000000000000;;		// MetricType: The method of collecting data for the metric. See Metric
0000000000000000000000000000000000000000;;		// types.
0000000000000000000000000000000000000000;;		MetricType string `json:"metricType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValueType: The data type of of individual points in the metric's time
0000000000000000000000000000000000000000;;		// series. See Metric value types.
0000000000000000000000000000000000000000;;		ValueType string `json:"valueType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "MetricType") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "MetricType") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MetricDescriptorTypeDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MetricDescriptorTypeDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Point: Point is a single point in a time series. It consists of a
0000000000000000000000000000000000000000;;	// start time, an end time, and a value.
0000000000000000000000000000000000000000;;	type Point struct {
0000000000000000000000000000000000000000;;		// BoolValue: The value of this data point. Either "true" or "false".
0000000000000000000000000000000000000000;;		BoolValue *bool `json:"boolValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DistributionValue: The value of this data point as a distribution. A
0000000000000000000000000000000000000000;;		// distribution value can contain a list of buckets and/or an
0000000000000000000000000000000000000000;;		// underflowBucket and an overflowBucket. The values of these points can
0000000000000000000000000000000000000000;;		// be used to create a histogram.
0000000000000000000000000000000000000000;;		DistributionValue *PointDistribution `json:"distributionValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DoubleValue: The value of this data point as a double-precision
0000000000000000000000000000000000000000;;		// floating-point number.
0000000000000000000000000000000000000000;;		DoubleValue *float64 `json:"doubleValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// End: The interval [start, end] is the time period to which the
0000000000000000000000000000000000000000;;		// point's value applies. For gauge metrics, whose values are
0000000000000000000000000000000000000000;;		// instantaneous measurements, this interval should be empty (start
0000000000000000000000000000000000000000;;		// should equal end). For cumulative metrics (of which deltas and rates
0000000000000000000000000000000000000000;;		// are special cases), the interval should be non-empty. Both start and
0000000000000000000000000000000000000000;;		// end are RFC 3339 strings.
0000000000000000000000000000000000000000;;		End string `json:"end,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Int64Value: The value of this data point as a 64-bit integer.
0000000000000000000000000000000000000000;;		Int64Value *int64 `json:"int64Value,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start: The interval [start, end] is the time period to which the
0000000000000000000000000000000000000000;;		// point's value applies. For gauge metrics, whose values are
0000000000000000000000000000000000000000;;		// instantaneous measurements, this interval should be empty (start
0000000000000000000000000000000000000000;;		// should equal end). For cumulative metrics (of which deltas and rates
0000000000000000000000000000000000000000;;		// are special cases), the interval should be non-empty. Both start and
0000000000000000000000000000000000000000;;		// end are RFC 3339 strings.
0000000000000000000000000000000000000000;;		Start string `json:"start,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StringValue: The value of this data point in string format.
0000000000000000000000000000000000000000;;		StringValue *string `json:"stringValue,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "BoolValue") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "BoolValue") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Point) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Point
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Point) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod Point
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			DoubleValue *gensupport.JSONFloat64 `json:"doubleValue"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if s1.DoubleValue != nil {
0000000000000000000000000000000000000000;;			s.DoubleValue = (*float64)(s1.DoubleValue)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PointDistribution: Distribution data point value type. When writing
0000000000000000000000000000000000000000;;	// distribution points, try to be consistent with the boundaries of your
0000000000000000000000000000000000000000;;	// buckets. If you must modify the bucket boundaries, then do so by
0000000000000000000000000000000000000000;;	// merging, partitioning, or appending rather than skewing them.
0000000000000000000000000000000000000000;;	type PointDistribution struct {
0000000000000000000000000000000000000000;;		// Buckets: The finite buckets.
0000000000000000000000000000000000000000;;		Buckets []*PointDistributionBucket `json:"buckets,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OverflowBucket: The overflow bucket.
0000000000000000000000000000000000000000;;		OverflowBucket *PointDistributionOverflowBucket `json:"overflowBucket,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UnderflowBucket: The underflow bucket.
0000000000000000000000000000000000000000;;		UnderflowBucket *PointDistributionUnderflowBucket `json:"underflowBucket,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Buckets") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Buckets") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistribution) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod PointDistribution
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PointDistributionBucket: The histogram's bucket. Buckets that form
0000000000000000000000000000000000000000;;	// the histogram of a distribution value. If the upper bound of a
0000000000000000000000000000000000000000;;	// bucket, say U1, does not equal the lower bound of the next bucket,
0000000000000000000000000000000000000000;;	// say L2, this means that there is no event in [U1, L2).
0000000000000000000000000000000000000000;;	type PointDistributionBucket struct {
0000000000000000000000000000000000000000;;		// Count: The number of events whose values are in the interval defined
0000000000000000000000000000000000000000;;		// by this bucket.
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LowerBound: The lower bound of the value interval of this bucket
0000000000000000000000000000000000000000;;		// (inclusive).
0000000000000000000000000000000000000000;;		LowerBound float64 `json:"lowerBound,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpperBound: The upper bound of the value interval of this bucket
0000000000000000000000000000000000000000;;		// (exclusive).
0000000000000000000000000000000000000000;;		UpperBound float64 `json:"upperBound,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Count") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Count") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionBucket) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionBucket
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionBucket) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionBucket
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			LowerBound gensupport.JSONFloat64 `json:"lowerBound"`
0000000000000000000000000000000000000000;;			UpperBound gensupport.JSONFloat64 `json:"upperBound"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.LowerBound = float64(s1.LowerBound)
0000000000000000000000000000000000000000;;		s.UpperBound = float64(s1.UpperBound)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PointDistributionOverflowBucket: The overflow bucket is a special
0000000000000000000000000000000000000000;;	// bucket that does not have the upperBound field; it includes all of
0000000000000000000000000000000000000000;;	// the events that are no less than its lower bound.
0000000000000000000000000000000000000000;;	type PointDistributionOverflowBucket struct {
0000000000000000000000000000000000000000;;		// Count: The number of events whose values are in the interval defined
0000000000000000000000000000000000000000;;		// by this bucket.
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LowerBound: The lower bound of the value interval of this bucket
0000000000000000000000000000000000000000;;		// (inclusive).
0000000000000000000000000000000000000000;;		LowerBound float64 `json:"lowerBound,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Count") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Count") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionOverflowBucket) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionOverflowBucket
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionOverflowBucket) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionOverflowBucket
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			LowerBound gensupport.JSONFloat64 `json:"lowerBound"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.LowerBound = float64(s1.LowerBound)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PointDistributionUnderflowBucket: The underflow bucket is a special
0000000000000000000000000000000000000000;;	// bucket that does not have the lowerBound field; it includes all of
0000000000000000000000000000000000000000;;	// the events that are less than its upper bound.
0000000000000000000000000000000000000000;;	type PointDistributionUnderflowBucket struct {
0000000000000000000000000000000000000000;;		// Count: The number of events whose values are in the interval defined
0000000000000000000000000000000000000000;;		// by this bucket.
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpperBound: The upper bound of the value interval of this bucket
0000000000000000000000000000000000000000;;		// (exclusive).
0000000000000000000000000000000000000000;;		UpperBound float64 `json:"upperBound,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Count") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Count") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionUnderflowBucket) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionUnderflowBucket
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *PointDistributionUnderflowBucket) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod PointDistributionUnderflowBucket
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			UpperBound gensupport.JSONFloat64 `json:"upperBound"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.UpperBound = float64(s1.UpperBound)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timeseries: The monitoring data is organized as metrics and stored as
0000000000000000000000000000000000000000;;	// data points that are recorded over time. Each data point represents
0000000000000000000000000000000000000000;;	// information like the CPU utilization of your virtual machine. A
0000000000000000000000000000000000000000;;	// historical record of these data points is called a time series.
0000000000000000000000000000000000000000;;	type Timeseries struct {
0000000000000000000000000000000000000000;;		// Points: The data points of this time series. The points are listed in
0000000000000000000000000000000000000000;;		// order of their end timestamp, from younger to older.
0000000000000000000000000000000000000000;;		Points []*Point `json:"points,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TimeseriesDesc: The descriptor of this time series.
0000000000000000000000000000000000000000;;		TimeseriesDesc *TimeseriesDescriptor `json:"timeseriesDesc,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Points") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Points") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Timeseries) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Timeseries
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeseriesDescriptor: TimeseriesDescriptor identifies a single time
0000000000000000000000000000000000000000;;	// series.
0000000000000000000000000000000000000000;;	type TimeseriesDescriptor struct {
0000000000000000000000000000000000000000;;		// Labels: The label's name.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metric: The name of the metric.
0000000000000000000000000000000000000000;;		Metric string `json:"metric,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Project: The Developers Console project number to which this time
0000000000000000000000000000000000000000;;		// series belongs.
0000000000000000000000000000000000000000;;		Project string `json:"project,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Labels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Labels") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TimeseriesDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TimeseriesDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesDescriptorLabel struct {
0000000000000000000000000000000000000000;;		// Key: The label's name.
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value: The label's value.
0000000000000000000000000000000000000000;;		Value string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Key") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Key") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TimeseriesDescriptorLabel) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TimeseriesDescriptorLabel
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TimeseriesPoint: When writing time series, TimeseriesPoint should be
0000000000000000000000000000000000000000;;	// used instead of Timeseries, to enforce single point for each time
0000000000000000000000000000000000000000;;	// series in the timeseries.write request.
0000000000000000000000000000000000000000;;	type TimeseriesPoint struct {
0000000000000000000000000000000000000000;;		// Point: The data point in this time series snapshot.
0000000000000000000000000000000000000000;;		Point *Point `json:"point,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TimeseriesDesc: The descriptor of this time series.
0000000000000000000000000000000000000000;;		TimeseriesDesc *TimeseriesDescriptor `json:"timeseriesDesc,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Point") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Point") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TimeseriesPoint) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TimeseriesPoint
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteTimeseriesRequest: The request of
0000000000000000000000000000000000000000;;	// cloudmonitoring.timeseries.write
0000000000000000000000000000000000000000;;	type WriteTimeseriesRequest struct {
0000000000000000000000000000000000000000;;		// CommonLabels: The label's name.
0000000000000000000000000000000000000000;;		CommonLabels map[string]string `json:"commonLabels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Timeseries: Provide time series specific labels and the data points
0000000000000000000000000000000000000000;;		// for each time series. The labels in timeseries and the common_labels
0000000000000000000000000000000000000000;;		// should form a complete list of labels that required by the metric.
0000000000000000000000000000000000000000;;		Timeseries []*TimeseriesPoint `json:"timeseries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CommonLabels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CommonLabels") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *WriteTimeseriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod WriteTimeseriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteTimeseriesResponse: The response of
0000000000000000000000000000000000000000;;	// cloudmonitoring.timeseries.write
0000000000000000000000000000000000000000;;	type WriteTimeseriesResponse struct {
0000000000000000000000000000000000000000;;		// Kind: Identifies what kind of resource this is. Value: the fixed
0000000000000000000000000000000000000000;;		// string "cloudmonitoring#writeTimeseriesResponse".
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Kind") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Kind") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *WriteTimeseriesResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod WriteTimeseriesResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.metricDescriptors.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDescriptorsCreateCall struct {
0000000000000000000000000000000000000000;;		s                *Service
0000000000000000000000000000000000000000;;		project          string
0000000000000000000000000000000000000000;;		metricdescriptor *MetricDescriptor
0000000000000000000000000000000000000000;;		urlParams_       gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_             context.Context
0000000000000000000000000000000000000000;;		header_          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Create a new metric.
0000000000000000000000000000000000000000;;	func (r *MetricDescriptorsService) Create(project string, metricdescriptor *MetricDescriptor) *MetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c := &MetricDescriptorsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.metricdescriptor = metricdescriptor
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsCreateCall) Fields(s ...googleapi.Field) *MetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsCreateCall) Context(ctx context.Context) *MetricDescriptorsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.metricdescriptor)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/metricDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.metricDescriptors.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *MetricDescriptor or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *MetricDescriptor.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsCreateCall) Do(opts ...googleapi.CallOption) (*MetricDescriptor, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &MetricDescriptor{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Create a new metric.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.metricDescriptors.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project id. The value can be the numeric project ID or string-based project name.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "MetricDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "MetricDescriptor"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.metricDescriptors.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDescriptorsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		project    string
0000000000000000000000000000000000000000;;		metric     string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Delete an existing metric.
0000000000000000000000000000000000000000;;	func (r *MetricDescriptorsService) Delete(project string, metric string) *MetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c := &MetricDescriptorsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.metric = metric
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsDeleteCall) Fields(s ...googleapi.Field) *MetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsDeleteCall) Context(ctx context.Context) *MetricDescriptorsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/metricDescriptors/{metric}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;			"metric":  c.metric,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.metricDescriptors.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *DeleteMetricDescriptorResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *DeleteMetricDescriptorResponse.ServerResponse.Header or (if a
0000000000000000000000000000000000000000;;	// response was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsDeleteCall) Do(opts ...googleapi.CallOption) (*DeleteMetricDescriptorResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &DeleteMetricDescriptorResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Delete an existing metric.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.metricDescriptors.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "metric"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "metric": {
0000000000000000000000000000000000000000;;		//       "description": "Name of the metric.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project ID to which the metric belongs.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/metricDescriptors/{metric}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "DeleteMetricDescriptorResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.metricDescriptors.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MetricDescriptorsListCall struct {
0000000000000000000000000000000000000000;;		s                            *Service
0000000000000000000000000000000000000000;;		project                      string
0000000000000000000000000000000000000000;;		listmetricdescriptorsrequest *ListMetricDescriptorsRequest
0000000000000000000000000000000000000000;;		urlParams_                   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_                 string
0000000000000000000000000000000000000000;;		ctx_                         context.Context
0000000000000000000000000000000000000000;;		header_                      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: List metric descriptors that match the query. If the query is
0000000000000000000000000000000000000000;;	// not set, then all of the metric descriptors will be returned. Large
0000000000000000000000000000000000000000;;	// responses will be paginated, use the nextPageToken returned in the
0000000000000000000000000000000000000000;;	// response to request subsequent pages of results by setting the
0000000000000000000000000000000000000000;;	// pageToken query parameter to the value of the nextPageToken.
0000000000000000000000000000000000000000;;	func (r *MetricDescriptorsService) List(project string, listmetricdescriptorsrequest *ListMetricDescriptorsRequest) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c := &MetricDescriptorsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.listmetricdescriptorsrequest = listmetricdescriptorsrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count sets the optional parameter "count": Maximum number of metric
0000000000000000000000000000000000000000;;	// descriptors per page. Used for pagination. If not specified, count =
0000000000000000000000000000000000000000;;	// 100.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Count(count int64) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("count", fmt.Sprint(count))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": The pagination
0000000000000000000000000000000000000000;;	// token, which is used to page through large result sets. Set this
0000000000000000000000000000000000000000;;	// value to the value of the nextPageToken to retrieve the next page of
0000000000000000000000000000000000000000;;	// results.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) PageToken(pageToken string) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Query sets the optional parameter "query": The query used to search
0000000000000000000000000000000000000000;;	// against existing metrics. Separate keywords with a space; the service
0000000000000000000000000000000000000000;;	// joins all keywords with AND, meaning that all keywords must match for
0000000000000000000000000000000000000000;;	// a metric to be returned. If this field is omitted, all metrics are
0000000000000000000000000000000000000000;;	// returned. If an empty string is passed with this field, no metrics
0000000000000000000000000000000000000000;;	// are returned.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Query(query string) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("query", query)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Fields(s ...googleapi.Field) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) IfNoneMatch(entityTag string) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Context(ctx context.Context) *MetricDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/metricDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.metricDescriptors.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListMetricDescriptorsResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *ListMetricDescriptorsResponse.ServerResponse.Header or (if a
0000000000000000000000000000000000000000;;	// response was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Do(opts ...googleapi.CallOption) (*ListMetricDescriptorsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListMetricDescriptorsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "List metric descriptors that match the query. If the query is not set, then all of the metric descriptors will be returned. Large responses will be paginated, use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.metricDescriptors.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "count": {
0000000000000000000000000000000000000000;;		//       "default": "100",
0000000000000000000000000000000000000000;;		//       "description": "Maximum number of metric descriptors per page. Used for pagination. If not specified, count = 100.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "maximum": "1000",
0000000000000000000000000000000000000000;;		//       "minimum": "1",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project id. The value can be the numeric project ID or string-based project name.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "query": {
0000000000000000000000000000000000000000;;		//       "description": "The query used to search against existing metrics. Separate keywords with a space; the service joins all keywords with AND, meaning that all keywords must match for a metric to be returned. If this field is omitted, all metrics are returned. If an empty string is passed with this field, no metrics are returned.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/metricDescriptors",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListMetricDescriptorsRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListMetricDescriptorsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *MetricDescriptorsListCall) Pages(ctx context.Context, f func(*ListMetricDescriptorsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.timeseries.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesListCall struct {
0000000000000000000000000000000000000000;;		s                     *Service
0000000000000000000000000000000000000000;;		project               string
0000000000000000000000000000000000000000;;		metric                string
0000000000000000000000000000000000000000;;		listtimeseriesrequest *ListTimeseriesRequest
0000000000000000000000000000000000000000;;		urlParams_            gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_          string
0000000000000000000000000000000000000000;;		ctx_                  context.Context
0000000000000000000000000000000000000000;;		header_               http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: List the data points of the time series that match the metric
0000000000000000000000000000000000000000;;	// and labels values and that have data points in the interval. Large
0000000000000000000000000000000000000000;;	// responses are paginated; use the nextPageToken returned in the
0000000000000000000000000000000000000000;;	// response to request subsequent pages of results by setting the
0000000000000000000000000000000000000000;;	// pageToken query parameter to the value of the nextPageToken.
0000000000000000000000000000000000000000;;	func (r *TimeseriesService) List(project string, metric string, youngest string, listtimeseriesrequest *ListTimeseriesRequest) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c := &TimeseriesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.metric = metric
0000000000000000000000000000000000000000;;		c.urlParams_.Set("youngest", youngest)
0000000000000000000000000000000000000000;;		c.listtimeseriesrequest = listtimeseriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Aggregator sets the optional parameter "aggregator": The aggregation
0000000000000000000000000000000000000000;;	// function that will reduce the data points in each window to a single
0000000000000000000000000000000000000000;;	// point. This parameter is only valid for non-cumulative metrics with a
0000000000000000000000000000000000000000;;	// value type of INT64 or DOUBLE.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "max"
0000000000000000000000000000000000000000;;	//   "mean"
0000000000000000000000000000000000000000;;	//   "min"
0000000000000000000000000000000000000000;;	//   "sum"
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Aggregator(aggregator string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("aggregator", aggregator)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count sets the optional parameter "count": Maximum number of data
0000000000000000000000000000000000000000;;	// points per page, which is used for pagination of results.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Count(count int64) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("count", fmt.Sprint(count))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Labels sets the optional parameter "labels": A collection of labels
0000000000000000000000000000000000000000;;	// for the matching time series, which are represented as:
0000000000000000000000000000000000000000;;	// - key==value: key equals the value
0000000000000000000000000000000000000000;;	// - key=~value: key regex matches the value
0000000000000000000000000000000000000000;;	// - key!=value: key does not equal the value
0000000000000000000000000000000000000000;;	// - key!~value: key regex does not match the value  For example, to
0000000000000000000000000000000000000000;;	// list all of the time series descriptors for the region us-central1,
0000000000000000000000000000000000000000;;	// you could
0000000000000000000000000000000000000000;;	// specify:
0000000000000000000000000000000000000000;;	// label=cloud.googleapis.com%2Flocation=~us-central1.*
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Labels(labels ...string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.SetMulti("labels", append([]string{}, labels...))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Oldest sets the optional parameter "oldest": Start of the time
0000000000000000000000000000000000000000;;	// interval (exclusive), which is expressed as an RFC 3339 timestamp. If
0000000000000000000000000000000000000000;;	// neither oldest nor timespan is specified, the default time interval
0000000000000000000000000000000000000000;;	// will be (youngest - 4 hours, youngest]
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Oldest(oldest string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("oldest", oldest)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": The pagination
0000000000000000000000000000000000000000;;	// token, which is used to page through large result sets. Set this
0000000000000000000000000000000000000000;;	// value to the value of the nextPageToken to retrieve the next page of
0000000000000000000000000000000000000000;;	// results.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) PageToken(pageToken string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timespan sets the optional parameter "timespan": Length of the time
0000000000000000000000000000000000000000;;	// interval to query, which is an alternative way to declare the
0000000000000000000000000000000000000000;;	// interval: (youngest - timespan, youngest]. The timespan and oldest
0000000000000000000000000000000000000000;;	// parameters should not be used together. Units:
0000000000000000000000000000000000000000;;	// - s: second
0000000000000000000000000000000000000000;;	// - m: minute
0000000000000000000000000000000000000000;;	// - h: hour
0000000000000000000000000000000000000000;;	// - d: day
0000000000000000000000000000000000000000;;	// - w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for
0000000000000000000000000000000000000000;;	// example: 2w3d is not allowed; you should use 17d instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If neither oldest nor timespan is specified, the default time
0000000000000000000000000000000000000000;;	// interval will be (youngest - 4 hours, youngest].
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Timespan(timespan string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("timespan", timespan)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Window sets the optional parameter "window": The sampling window. At
0000000000000000000000000000000000000000;;	// most one data point will be returned for each window in the requested
0000000000000000000000000000000000000000;;	// time interval. This parameter is only valid for non-cumulative metric
0000000000000000000000000000000000000000;;	// types. Units:
0000000000000000000000000000000000000000;;	// - m: minute
0000000000000000000000000000000000000000;;	// - h: hour
0000000000000000000000000000000000000000;;	// - d: day
0000000000000000000000000000000000000000;;	// - w: week  Examples: 3m, 4w. Only one unit is allowed, for example:
0000000000000000000000000000000000000000;;	// 2w3d is not allowed; you should use 17d instead.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Window(window string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("window", window)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Fields(s ...googleapi.Field) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) IfNoneMatch(entityTag string) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Context(ctx context.Context) *TimeseriesListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/timeseries/{metric}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;			"metric":  c.metric,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.timeseries.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListTimeseriesResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListTimeseriesResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Do(opts ...googleapi.CallOption) (*ListTimeseriesResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListTimeseriesResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "List the data points of the time series that match the metric and labels values and that have data points in the interval. Large responses are paginated; use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.timeseries.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "metric",
0000000000000000000000000000000000000000;;		//     "youngest"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "aggregator": {
0000000000000000000000000000000000000000;;		//       "description": "The aggregation function that will reduce the data points in each window to a single point. This parameter is only valid for non-cumulative metrics with a value type of INT64 or DOUBLE.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "max",
0000000000000000000000000000000000000000;;		//         "mean",
0000000000000000000000000000000000000000;;		//         "min",
0000000000000000000000000000000000000000;;		//         "sum"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "enumDescriptions": [
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         ""
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "count": {
0000000000000000000000000000000000000000;;		//       "default": "6000",
0000000000000000000000000000000000000000;;		//       "description": "Maximum number of data points per page, which is used for pagination of results.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "maximum": "12000",
0000000000000000000000000000000000000000;;		//       "minimum": "1",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "labels": {
0000000000000000000000000000000000000000;;		//       "description": "A collection of labels for the matching time series, which are represented as:  \n- key==value: key equals the value \n- key=~value: key regex matches the value \n- key!=value: key does not equal the value \n- key!~value: key regex does not match the value  For example, to list all of the time series descriptors for the region us-central1, you could specify:\nlabel=cloud.googleapis.com%2Flocation=~us-central1.*",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "(.+?)(==|=~|!=|!~)(.+)",
0000000000000000000000000000000000000000;;		//       "repeated": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "metric": {
0000000000000000000000000000000000000000;;		//       "description": "Metric names are protocol-free URLs as listed in the Supported Metrics page. For example, compute.googleapis.com/instance/disk/read_ops_count.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "oldest": {
0000000000000000000000000000000000000000;;		//       "description": "Start of the time interval (exclusive), which is expressed as an RFC 3339 timestamp. If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest]",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project ID to which this time series belongs. The value can be the numeric project ID or string-based project name.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "timespan": {
0000000000000000000000000000000000000000;;		//       "description": "Length of the time interval to query, which is an alternative way to declare the interval: (youngest - timespan, youngest]. The timespan and oldest parameters should not be used together. Units:  \n- s: second \n- m: minute \n- h: hour \n- d: day \n- w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.\n\nIf neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest].",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "[0-9]+[smhdw]?",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "window": {
0000000000000000000000000000000000000000;;		//       "description": "The sampling window. At most one data point will be returned for each window in the requested time interval. This parameter is only valid for non-cumulative metric types. Units:  \n- m: minute \n- h: hour \n- d: day \n- w: week  Examples: 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "[0-9]+[mhdw]?",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "youngest": {
0000000000000000000000000000000000000000;;		//       "description": "End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/timeseries/{metric}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListTimeseriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListTimeseriesResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *TimeseriesListCall) Pages(ctx context.Context, f func(*ListTimeseriesResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.timeseries.write":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesWriteCall struct {
0000000000000000000000000000000000000000;;		s                      *Service
0000000000000000000000000000000000000000;;		project                string
0000000000000000000000000000000000000000;;		writetimeseriesrequest *WriteTimeseriesRequest
0000000000000000000000000000000000000000;;		urlParams_             gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                   context.Context
0000000000000000000000000000000000000000;;		header_                http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write: Put data points to one or more time series for one or more
0000000000000000000000000000000000000000;;	// metrics. If a time series does not exist, a new time series will be
0000000000000000000000000000000000000000;;	// created. It is not allowed to write a time series point that is older
0000000000000000000000000000000000000000;;	// than the existing youngest point of that time series. Points that are
0000000000000000000000000000000000000000;;	// older than the existing youngest point of that time series will be
0000000000000000000000000000000000000000;;	// discarded silently. Therefore, users should make sure that points of
0000000000000000000000000000000000000000;;	// a time series are written sequentially in the order of their end
0000000000000000000000000000000000000000;;	// time.
0000000000000000000000000000000000000000;;	func (r *TimeseriesService) Write(project string, writetimeseriesrequest *WriteTimeseriesRequest) *TimeseriesWriteCall {
0000000000000000000000000000000000000000;;		c := &TimeseriesWriteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.writetimeseriesrequest = writetimeseriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *TimeseriesWriteCall) Fields(s ...googleapi.Field) *TimeseriesWriteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *TimeseriesWriteCall) Context(ctx context.Context) *TimeseriesWriteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *TimeseriesWriteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TimeseriesWriteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.writetimeseriesrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/timeseries:write")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.timeseries.write" call.
0000000000000000000000000000000000000000;;	// Exactly one of *WriteTimeseriesResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *WriteTimeseriesResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *TimeseriesWriteCall) Do(opts ...googleapi.CallOption) (*WriteTimeseriesResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &WriteTimeseriesResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Put data points to one or more time series for one or more metrics. If a time series does not exist, a new time series will be created. It is not allowed to write a time series point that is older than the existing youngest point of that time series. Points that are older than the existing youngest point of that time series will be discarded silently. Therefore, users should make sure that points of a time series are written sequentially in the order of their end time.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.timeseries.write",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project ID. The value can be the numeric project ID or string-based project name.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/timeseries:write",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "WriteTimeseriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "WriteTimeseriesResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudmonitoring.timeseriesDescriptors.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TimeseriesDescriptorsListCall struct {
0000000000000000000000000000000000000000;;		s                                *Service
0000000000000000000000000000000000000000;;		project                          string
0000000000000000000000000000000000000000;;		metric                           string
0000000000000000000000000000000000000000;;		listtimeseriesdescriptorsrequest *ListTimeseriesDescriptorsRequest
0000000000000000000000000000000000000000;;		urlParams_                       gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_                     string
0000000000000000000000000000000000000000;;		ctx_                             context.Context
0000000000000000000000000000000000000000;;		header_                          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: List the descriptors of the time series that match the metric
0000000000000000000000000000000000000000;;	// and labels values and that have data points in the interval. Large
0000000000000000000000000000000000000000;;	// responses are paginated; use the nextPageToken returned in the
0000000000000000000000000000000000000000;;	// response to request subsequent pages of results by setting the
0000000000000000000000000000000000000000;;	// pageToken query parameter to the value of the nextPageToken.
0000000000000000000000000000000000000000;;	func (r *TimeseriesDescriptorsService) List(project string, metric string, youngest string, listtimeseriesdescriptorsrequest *ListTimeseriesDescriptorsRequest) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c := &TimeseriesDescriptorsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.project = project
0000000000000000000000000000000000000000;;		c.metric = metric
0000000000000000000000000000000000000000;;		c.urlParams_.Set("youngest", youngest)
0000000000000000000000000000000000000000;;		c.listtimeseriesdescriptorsrequest = listtimeseriesdescriptorsrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Aggregator sets the optional parameter "aggregator": The aggregation
0000000000000000000000000000000000000000;;	// function that will reduce the data points in each window to a single
0000000000000000000000000000000000000000;;	// point. This parameter is only valid for non-cumulative metrics with a
0000000000000000000000000000000000000000;;	// value type of INT64 or DOUBLE.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Possible values:
0000000000000000000000000000000000000000;;	//   "max"
0000000000000000000000000000000000000000;;	//   "mean"
0000000000000000000000000000000000000000;;	//   "min"
0000000000000000000000000000000000000000;;	//   "sum"
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Aggregator(aggregator string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("aggregator", aggregator)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count sets the optional parameter "count": Maximum number of time
0000000000000000000000000000000000000000;;	// series descriptors per page. Used for pagination. If not specified,
0000000000000000000000000000000000000000;;	// count = 100.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Count(count int64) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("count", fmt.Sprint(count))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Labels sets the optional parameter "labels": A collection of labels
0000000000000000000000000000000000000000;;	// for the matching time series, which are represented as:
0000000000000000000000000000000000000000;;	// - key==value: key equals the value
0000000000000000000000000000000000000000;;	// - key=~value: key regex matches the value
0000000000000000000000000000000000000000;;	// - key!=value: key does not equal the value
0000000000000000000000000000000000000000;;	// - key!~value: key regex does not match the value  For example, to
0000000000000000000000000000000000000000;;	// list all of the time series descriptors for the region us-central1,
0000000000000000000000000000000000000000;;	// you could
0000000000000000000000000000000000000000;;	// specify:
0000000000000000000000000000000000000000;;	// label=cloud.googleapis.com%2Flocation=~us-central1.*
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Labels(labels ...string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.SetMulti("labels", append([]string{}, labels...))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Oldest sets the optional parameter "oldest": Start of the time
0000000000000000000000000000000000000000;;	// interval (exclusive), which is expressed as an RFC 3339 timestamp. If
0000000000000000000000000000000000000000;;	// neither oldest nor timespan is specified, the default time interval
0000000000000000000000000000000000000000;;	// will be (youngest - 4 hours, youngest]
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Oldest(oldest string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("oldest", oldest)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": The pagination
0000000000000000000000000000000000000000;;	// token, which is used to page through large result sets. Set this
0000000000000000000000000000000000000000;;	// value to the value of the nextPageToken to retrieve the next page of
0000000000000000000000000000000000000000;;	// results.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) PageToken(pageToken string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Timespan sets the optional parameter "timespan": Length of the time
0000000000000000000000000000000000000000;;	// interval to query, which is an alternative way to declare the
0000000000000000000000000000000000000000;;	// interval: (youngest - timespan, youngest]. The timespan and oldest
0000000000000000000000000000000000000000;;	// parameters should not be used together. Units:
0000000000000000000000000000000000000000;;	// - s: second
0000000000000000000000000000000000000000;;	// - m: minute
0000000000000000000000000000000000000000;;	// - h: hour
0000000000000000000000000000000000000000;;	// - d: day
0000000000000000000000000000000000000000;;	// - w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for
0000000000000000000000000000000000000000;;	// example: 2w3d is not allowed; you should use 17d instead.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If neither oldest nor timespan is specified, the default time
0000000000000000000000000000000000000000;;	// interval will be (youngest - 4 hours, youngest].
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Timespan(timespan string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("timespan", timespan)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Window sets the optional parameter "window": The sampling window. At
0000000000000000000000000000000000000000;;	// most one data point will be returned for each window in the requested
0000000000000000000000000000000000000000;;	// time interval. This parameter is only valid for non-cumulative metric
0000000000000000000000000000000000000000;;	// types. Units:
0000000000000000000000000000000000000000;;	// - m: minute
0000000000000000000000000000000000000000;;	// - h: hour
0000000000000000000000000000000000000000;;	// - d: day
0000000000000000000000000000000000000000;;	// - w: week  Examples: 3m, 4w. Only one unit is allowed, for example:
0000000000000000000000000000000000000000;;	// 2w3d is not allowed; you should use 17d instead.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Window(window string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("window", window)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Fields(s ...googleapi.Field) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) IfNoneMatch(entityTag string) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Context(ctx context.Context) *TimeseriesDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "{project}/timeseriesDescriptors/{metric}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"project": c.project,
0000000000000000000000000000000000000000;;			"metric":  c.metric,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudmonitoring.timeseriesDescriptors.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListTimeseriesDescriptorsResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *ListTimeseriesDescriptorsResponse.ServerResponse.Header or
0000000000000000000000000000000000000000;;	// (if a response was returned at all) in
0000000000000000000000000000000000000000;;	// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
0000000000000000000000000000000000000000;;	// whether the returned error was because http.StatusNotModified was
0000000000000000000000000000000000000000;;	// returned.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Do(opts ...googleapi.CallOption) (*ListTimeseriesDescriptorsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListTimeseriesDescriptorsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "List the descriptors of the time series that match the metric and labels values and that have data points in the interval. Large responses are paginated; use the nextPageToken returned in the response to request subsequent pages of results by setting the pageToken query parameter to the value of the nextPageToken.",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudmonitoring.timeseriesDescriptors.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "project",
0000000000000000000000000000000000000000;;		//     "metric",
0000000000000000000000000000000000000000;;		//     "youngest"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "aggregator": {
0000000000000000000000000000000000000000;;		//       "description": "The aggregation function that will reduce the data points in each window to a single point. This parameter is only valid for non-cumulative metrics with a value type of INT64 or DOUBLE.",
0000000000000000000000000000000000000000;;		//       "enum": [
0000000000000000000000000000000000000000;;		//         "max",
0000000000000000000000000000000000000000;;		//         "mean",
0000000000000000000000000000000000000000;;		//         "min",
0000000000000000000000000000000000000000;;		//         "sum"
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "enumDescriptions": [
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         "",
0000000000000000000000000000000000000000;;		//         ""
0000000000000000000000000000000000000000;;		//       ],
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "count": {
0000000000000000000000000000000000000000;;		//       "default": "100",
0000000000000000000000000000000000000000;;		//       "description": "Maximum number of time series descriptors per page. Used for pagination. If not specified, count = 100.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "maximum": "1000",
0000000000000000000000000000000000000000;;		//       "minimum": "1",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "labels": {
0000000000000000000000000000000000000000;;		//       "description": "A collection of labels for the matching time series, which are represented as:  \n- key==value: key equals the value \n- key=~value: key regex matches the value \n- key!=value: key does not equal the value \n- key!~value: key regex does not match the value  For example, to list all of the time series descriptors for the region us-central1, you could specify:\nlabel=cloud.googleapis.com%2Flocation=~us-central1.*",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "(.+?)(==|=~|!=|!~)(.+)",
0000000000000000000000000000000000000000;;		//       "repeated": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "metric": {
0000000000000000000000000000000000000000;;		//       "description": "Metric names are protocol-free URLs as listed in the Supported Metrics page. For example, compute.googleapis.com/instance/disk/read_ops_count.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "oldest": {
0000000000000000000000000000000000000000;;		//       "description": "Start of the time interval (exclusive), which is expressed as an RFC 3339 timestamp. If neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest]",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "The pagination token, which is used to page through large result sets. Set this value to the value of the nextPageToken to retrieve the next page of results.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "project": {
0000000000000000000000000000000000000000;;		//       "description": "The project ID to which this time series belongs. The value can be the numeric project ID or string-based project name.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "timespan": {
0000000000000000000000000000000000000000;;		//       "description": "Length of the time interval to query, which is an alternative way to declare the interval: (youngest - timespan, youngest]. The timespan and oldest parameters should not be used together. Units:  \n- s: second \n- m: minute \n- h: hour \n- d: day \n- w: week  Examples: 2s, 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.\n\nIf neither oldest nor timespan is specified, the default time interval will be (youngest - 4 hours, youngest].",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "[0-9]+[smhdw]?",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "window": {
0000000000000000000000000000000000000000;;		//       "description": "The sampling window. At most one data point will be returned for each window in the requested time interval. This parameter is only valid for non-cumulative metric types. Units:  \n- m: minute \n- h: hour \n- d: day \n- w: week  Examples: 3m, 4w. Only one unit is allowed, for example: 2w3d is not allowed; you should use 17d instead.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "pattern": "[0-9]+[mhdw]?",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "youngest": {
0000000000000000000000000000000000000000;;		//       "description": "End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "{project}/timeseriesDescriptors/{metric}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListTimeseriesDescriptorsRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListTimeseriesDescriptorsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/monitoring"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *TimeseriesDescriptorsListCall) Pages(ctx context.Context, f func(*ListTimeseriesDescriptorsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
