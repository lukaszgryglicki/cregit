0000000000000000000000000000000000000000;;	// Package cloudkms provides access to the Google Cloud Key Management Service (KMS) API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://cloud.google.com/kms/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/cloudkms/v1"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   cloudkmsService, err := cloudkms.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package cloudkms
598d882b7cc23744809d38bb43001ddd90fc2be4;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "cloudkms:v1"
0000000000000000000000000000000000000000;;	const apiName = "cloudkms"
0000000000000000000000000000000000000000;;	const apiVersion = "v1"
0000000000000000000000000000000000000000;;	const basePath = "https://cloudkms.googleapis.com/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.Projects = NewProjectsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Projects *ProjectsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsService(s *Service) *ProjectsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsService{s: s}
0000000000000000000000000000000000000000;;		rs.Locations = NewProjectsLocationsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Locations *ProjectsLocationsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsLocationsService(s *Service) *ProjectsLocationsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsLocationsService{s: s}
0000000000000000000000000000000000000000;;		rs.KeyRings = NewProjectsLocationsKeyRingsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeyRings *ProjectsLocationsKeyRingsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsLocationsKeyRingsService(s *Service) *ProjectsLocationsKeyRingsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsLocationsKeyRingsService{s: s}
0000000000000000000000000000000000000000;;		rs.CryptoKeys = NewProjectsLocationsKeyRingsCryptoKeysService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CryptoKeys *ProjectsLocationsKeyRingsCryptoKeysService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsLocationsKeyRingsCryptoKeysService(s *Service) *ProjectsLocationsKeyRingsCryptoKeysService {
0000000000000000000000000000000000000000;;		rs := &ProjectsLocationsKeyRingsCryptoKeysService{s: s}
0000000000000000000000000000000000000000;;		rs.CryptoKeyVersions = NewProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CryptoKeyVersions *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService(s *Service) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuditConfig: Specifies the audit configuration for a service.
0000000000000000000000000000000000000000;;	// The configuration determines which permission types are logged, and
0000000000000000000000000000000000000000;;	// what
0000000000000000000000000000000000000000;;	// identities, if any, are exempted from logging.
0000000000000000000000000000000000000000;;	// An AuditConfig must have one or more AuditLogConfigs.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If there are AuditConfigs for both `allServices` and a specific
0000000000000000000000000000000000000000;;	// service,
0000000000000000000000000000000000000000;;	// the union of the two AuditConfigs is used for that service: the
0000000000000000000000000000000000000000;;	// log_types
0000000000000000000000000000000000000000;;	// specified in each AuditConfig are enabled, and the exempted_members
0000000000000000000000000000000000000000;;	// in each
0000000000000000000000000000000000000000;;	// AuditConfig are exempted.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example Policy with multiple AuditConfigs:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     {
0000000000000000000000000000000000000000;;	//       "audit_configs": [
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "service": "allServices"
0000000000000000000000000000000000000000;;	//           "audit_log_configs": [
0000000000000000000000000000000000000000;;	//             {
0000000000000000000000000000000000000000;;	//               "log_type": "DATA_READ",
0000000000000000000000000000000000000000;;	//               "exempted_members": [
0000000000000000000000000000000000000000;;	//                 "user:foo@gmail.com"
0000000000000000000000000000000000000000;;	//               ]
0000000000000000000000000000000000000000;;	//             },
0000000000000000000000000000000000000000;;	//             {
0000000000000000000000000000000000000000;;	//               "log_type": "DATA_WRITE",
0000000000000000000000000000000000000000;;	//             },
0000000000000000000000000000000000000000;;	//             {
0000000000000000000000000000000000000000;;	//               "log_type": "ADMIN_READ",
0000000000000000000000000000000000000000;;	//             }
0000000000000000000000000000000000000000;;	//           ]
0000000000000000000000000000000000000000;;	//         },
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "service": "fooservice.googleapis.com"
0000000000000000000000000000000000000000;;	//           "audit_log_configs": [
0000000000000000000000000000000000000000;;	//             {
0000000000000000000000000000000000000000;;	//               "log_type": "DATA_READ",
0000000000000000000000000000000000000000;;	//             },
0000000000000000000000000000000000000000;;	//             {
0000000000000000000000000000000000000000;;	//               "log_type": "DATA_WRITE",
0000000000000000000000000000000000000000;;	//               "exempted_members": [
0000000000000000000000000000000000000000;;	//                 "user:bar@gmail.com"
0000000000000000000000000000000000000000;;	//               ]
0000000000000000000000000000000000000000;;	//             }
0000000000000000000000000000000000000000;;	//           ]
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//       ]
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For fooservice, this policy enables DATA_READ, DATA_WRITE and
0000000000000000000000000000000000000000;;	// ADMIN_READ
0000000000000000000000000000000000000000;;	// logging. It also exempts foo@gmail.com from DATA_READ logging,
0000000000000000000000000000000000000000;;	// and
0000000000000000000000000000000000000000;;	// bar@gmail.com from DATA_WRITE logging.
0000000000000000000000000000000000000000;;	type AuditConfig struct {
0000000000000000000000000000000000000000;;		// AuditLogConfigs: The configuration for logging of each type of
0000000000000000000000000000000000000000;;		// permission.
0000000000000000000000000000000000000000;;		// Next ID: 4
0000000000000000000000000000000000000000;;		AuditLogConfigs []*AuditLogConfig `json:"auditLogConfigs,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExemptedMembers []string `json:"exemptedMembers,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Service: Specifies a service that will be enabled for audit
0000000000000000000000000000000000000000;;		// logging.
0000000000000000000000000000000000000000;;		// For example, `storage.googleapis.com`,
0000000000000000000000000000000000000000;;		// `cloudsql.googleapis.com`.
0000000000000000000000000000000000000000;;		// `allServices` is a special value that covers all services.
0000000000000000000000000000000000000000;;		Service string `json:"service,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "AuditLogConfigs") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AuditLogConfigs") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *AuditConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod AuditConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AuditLogConfig: Provides the configuration for logging a type of
0000000000000000000000000000000000000000;;	// permissions.
0000000000000000000000000000000000000000;;	// Example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     {
0000000000000000000000000000000000000000;;	//       "audit_log_configs": [
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "log_type": "DATA_READ",
0000000000000000000000000000000000000000;;	//           "exempted_members": [
0000000000000000000000000000000000000000;;	//             "user:foo@gmail.com"
0000000000000000000000000000000000000000;;	//           ]
0000000000000000000000000000000000000000;;	//         },
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "log_type": "DATA_WRITE",
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//       ]
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This enables 'DATA_READ' and 'DATA_WRITE' logging, while
0000000000000000000000000000000000000000;;	// exempting
0000000000000000000000000000000000000000;;	// foo@gmail.com from DATA_READ logging.
0000000000000000000000000000000000000000;;	type AuditLogConfig struct {
0000000000000000000000000000000000000000;;		// ExemptedMembers: Specifies the identities that do not cause logging
0000000000000000000000000000000000000000;;		// for this type of
0000000000000000000000000000000000000000;;		// permission.
0000000000000000000000000000000000000000;;		// Follows the same format of Binding.members.
0000000000000000000000000000000000000000;;		ExemptedMembers []string `json:"exemptedMembers,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogType: The log type that this config enables.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "LOG_TYPE_UNSPECIFIED" - Default case. Should never be this.
0000000000000000000000000000000000000000;;		//   "ADMIN_READ" - Admin reads. Example: CloudIAM getIamPolicy
0000000000000000000000000000000000000000;;		//   "DATA_WRITE" - Data writes. Example: CloudSQL Users create
0000000000000000000000000000000000000000;;		//   "DATA_READ" - Data reads. Example: CloudSQL Users list
0000000000000000000000000000000000000000;;		LogType string `json:"logType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "ExemptedMembers") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "ExemptedMembers") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *AuditLogConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod AuditLogConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Binding: Associates `members` with a `role`.
0000000000000000000000000000000000000000;;	type Binding struct {
0000000000000000000000000000000000000000;;		// Members: Specifies the identities requesting access for a Cloud
0000000000000000000000000000000000000000;;		// Platform resource.
0000000000000000000000000000000000000000;;		// `members` can have the following values:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `allUsers`: A special identifier that represents anyone who is
0000000000000000000000000000000000000000;;		//    on the internet; with or without a Google account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `allAuthenticatedUsers`: A special identifier that represents
0000000000000000000000000000000000000000;;		// anyone
0000000000000000000000000000000000000000;;		//    who is authenticated with a Google account or a service
0000000000000000000000000000000000000000;;		// account.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `user:{emailid}`: An email address that represents a specific
0000000000000000000000000000000000000000;;		// Google
0000000000000000000000000000000000000000;;		//    account. For example, `alice@gmail.com` or `joe@example.com`.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `serviceAccount:{emailid}`: An email address that represents a
0000000000000000000000000000000000000000;;		// service
0000000000000000000000000000000000000000;;		//    account. For example,
0000000000000000000000000000000000000000;;		// `my-other-app@appspot.gserviceaccount.com`.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `group:{emailid}`: An email address that represents a Google
0000000000000000000000000000000000000000;;		// group.
0000000000000000000000000000000000000000;;		//    For example, `admins@example.com`.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// * `domain:{domain}`: A Google Apps domain name that represents all
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		//    users of that domain. For example, `google.com` or
0000000000000000000000000000000000000000;;		// `example.com`.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		Members []string `json:"members,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Role: Role that is assigned to `members`.
0000000000000000000000000000000000000000;;		// For example, `roles/viewer`, `roles/editor`, or
0000000000000000000000000000000000000000;;		// `roles/owner`.
0000000000000000000000000000000000000000;;		// Required
0000000000000000000000000000000000000000;;		Role string `json:"role,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Members") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Members") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Binding) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Binding
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CloudAuditOptions: Write a Cloud Audit log
0000000000000000000000000000000000000000;;	type CloudAuditOptions struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Condition: A condition to be met.
0000000000000000000000000000000000000000;;	type Condition struct {
0000000000000000000000000000000000000000;;		// Iam: Trusted attributes supplied by the IAM system.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "NO_ATTR" - Default non-attribute.
0000000000000000000000000000000000000000;;		//   "AUTHORITY" - Either principal or (if present) authority selector.
0000000000000000000000000000000000000000;;		//   "ATTRIBUTION" - The principal (even if an authority selector is
0000000000000000000000000000000000000000;;		// present), which
0000000000000000000000000000000000000000;;		// must only be used for attribution, not authorization.
0000000000000000000000000000000000000000;;		//   "APPROVER" - An approver (distinct from the requester) that has
0000000000000000000000000000000000000000;;		// authorized this
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		// When used with IN, the condition indicates that one of the
0000000000000000000000000000000000000000;;		// approvers
0000000000000000000000000000000000000000;;		// associated with the request matches the specified principal, or is
0000000000000000000000000000000000000000;;		// a
0000000000000000000000000000000000000000;;		// member of the specified group. Approvers can only grant
0000000000000000000000000000000000000000;;		// additional
0000000000000000000000000000000000000000;;		// access, and are thus only used in a strictly positive context
0000000000000000000000000000000000000000;;		// (e.g. ALLOW/IN or DENY/NOT_IN).
0000000000000000000000000000000000000000;;		// See: go/rpc-security-policy-dynamicauth.
0000000000000000000000000000000000000000;;		//   "JUSTIFICATION_TYPE" - What types of justifications have been
0000000000000000000000000000000000000000;;		// supplied with this request.
0000000000000000000000000000000000000000;;		// String values should match enum names from
0000000000000000000000000000000000000000;;		// tech.iam.JustificationType,
0000000000000000000000000000000000000000;;		// e.g. "MANUAL_STRING". It is not permitted to grant access based
0000000000000000000000000000000000000000;;		// on
0000000000000000000000000000000000000000;;		// the *absence* of a justification, so justification conditions can
0000000000000000000000000000000000000000;;		// only
0000000000000000000000000000000000000000;;		// be used in a "positive" context (e.g., ALLOW/IN or
0000000000000000000000000000000000000000;;		// DENY/NOT_IN).
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Multiple justifications, e.g., a Buganizer ID and a
0000000000000000000000000000000000000000;;		// manually-entered
0000000000000000000000000000000000000000;;		// reason, are normal and supported.
0000000000000000000000000000000000000000;;		Iam string `json:"iam,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Op: An operator to apply the subject with.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "NO_OP" - Default no-op.
0000000000000000000000000000000000000000;;		//   "EQUALS" - DEPRECATED. Use IN instead.
0000000000000000000000000000000000000000;;		//   "NOT_EQUALS" - DEPRECATED. Use NOT_IN instead.
0000000000000000000000000000000000000000;;		//   "IN" - The condition is true if the subject (or any element of it
0000000000000000000000000000000000000000;;		// if it is
0000000000000000000000000000000000000000;;		// a set) matches any of the supplied values.
0000000000000000000000000000000000000000;;		//   "NOT_IN" - The condition is true if the subject (or every element
0000000000000000000000000000000000000000;;		// of it if it is
0000000000000000000000000000000000000000;;		// a set) matches none of the supplied values.
0000000000000000000000000000000000000000;;		//   "DISCHARGED" - Subject is discharged
0000000000000000000000000000000000000000;;		Op string `json:"op,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Svc: Trusted attributes discharged by the service.
0000000000000000000000000000000000000000;;		Svc string `json:"svc,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sys: Trusted attributes supplied by any service that owns resources
0000000000000000000000000000000000000000;;		// and uses
0000000000000000000000000000000000000000;;		// the IAM system for access control.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "NO_ATTR" - Default non-attribute type
0000000000000000000000000000000000000000;;		//   "REGION" - Region of the resource
0000000000000000000000000000000000000000;;		//   "SERVICE" - Service name
0000000000000000000000000000000000000000;;		//   "NAME" - Resource name
0000000000000000000000000000000000000000;;		//   "IP" - IP address of the caller
0000000000000000000000000000000000000000;;		Sys string `json:"sys,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Value: DEPRECATED. Use 'values' instead.
0000000000000000000000000000000000000000;;		Value string `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Values: The objects of the condition. This is mutually exclusive with
0000000000000000000000000000000000000000;;		// 'value'.
0000000000000000000000000000000000000000;;		Values []string `json:"values,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Iam") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Iam") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Condition) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Condition
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CounterOptions: Options for counters
0000000000000000000000000000000000000000;;	type CounterOptions struct {
0000000000000000000000000000000000000000;;		// Field: The field value to attribute.
0000000000000000000000000000000000000000;;		Field string `json:"field,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metric: The metric to update.
0000000000000000000000000000000000000000;;		Metric string `json:"metric,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Field") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Field") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CounterOptions) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CounterOptions
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CryptoKey: A CryptoKey represents a logical key that can be used for
0000000000000000000000000000000000000000;;	// cryptographic
0000000000000000000000000000000000000000;;	// operations.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A CryptoKey is made up of one or more versions, which
0000000000000000000000000000000000000000;;	// represent the actual key material used in cryptographic operations.
0000000000000000000000000000000000000000;;	type CryptoKey struct {
0000000000000000000000000000000000000000;;		// CreateTime: Output only. The time at which this CryptoKey was
0000000000000000000000000000000000000000;;		// created.
0000000000000000000000000000000000000000;;		CreateTime string `json:"createTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Output only. The resource name for this CryptoKey in the
0000000000000000000000000000000000000000;;		// format
0000000000000000000000000000000000000000;;		// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextRotationTime: At next_rotation_time, the Key Management Service
0000000000000000000000000000000000000000;;		// will automatically:
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// 1. Create a new version of this CryptoKey.
0000000000000000000000000000000000000000;;		// 2. Mark the new version as primary.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Key rotations performed manually via
0000000000000000000000000000000000000000;;		// CreateCryptoKeyVersion and
0000000000000000000000000000000000000000;;		// UpdateCryptoKeyPrimaryVersion
0000000000000000000000000000000000000000;;		// do not affect next_rotation_time.
0000000000000000000000000000000000000000;;		NextRotationTime string `json:"nextRotationTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Primary: Output only. A copy of the "primary" CryptoKeyVersion that
0000000000000000000000000000000000000000;;		// will be used
0000000000000000000000000000000000000000;;		// by Encrypt when this CryptoKey is given
0000000000000000000000000000000000000000;;		// in EncryptRequest.name.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// The CryptoKey's primary version can be updated
0000000000000000000000000000000000000000;;		// via
0000000000000000000000000000000000000000;;		// UpdateCryptoKeyPrimaryVersion.
0000000000000000000000000000000000000000;;		Primary *CryptoKeyVersion `json:"primary,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Purpose: The immutable purpose of this CryptoKey. Currently, the only
0000000000000000000000000000000000000000;;		// acceptable
0000000000000000000000000000000000000000;;		// purpose is ENCRYPT_DECRYPT.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "CRYPTO_KEY_PURPOSE_UNSPECIFIED" - Not specified.
0000000000000000000000000000000000000000;;		//   "ENCRYPT_DECRYPT" - CryptoKeys with this purpose may be used
0000000000000000000000000000000000000000;;		// with
0000000000000000000000000000000000000000;;		// Encrypt and
0000000000000000000000000000000000000000;;		// Decrypt.
0000000000000000000000000000000000000000;;		Purpose string `json:"purpose,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RotationPeriod: next_rotation_time will be advanced by this period
0000000000000000000000000000000000000000;;		// when the service
0000000000000000000000000000000000000000;;		// automatically rotates a key. Must be at least one day.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If rotation_period is set, next_rotation_time must also be set.
0000000000000000000000000000000000000000;;		RotationPeriod string `json:"rotationPeriod,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CreateTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CreateTime") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CryptoKey) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CryptoKey
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CryptoKeyVersion: A CryptoKeyVersion represents an individual
0000000000000000000000000000000000000000;;	// cryptographic key, and the
0000000000000000000000000000000000000000;;	// associated key material.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It can be used for cryptographic operations either directly, or via
0000000000000000000000000000000000000000;;	// its
0000000000000000000000000000000000000000;;	// parent CryptoKey, in which case the server will choose the
0000000000000000000000000000000000000000;;	// appropriate
0000000000000000000000000000000000000000;;	// version for the operation.
0000000000000000000000000000000000000000;;	type CryptoKeyVersion struct {
0000000000000000000000000000000000000000;;		// CreateTime: Output only. The time at which this CryptoKeyVersion was
0000000000000000000000000000000000000000;;		// created.
0000000000000000000000000000000000000000;;		CreateTime string `json:"createTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DestroyEventTime: Output only. The time this CryptoKeyVersion's key
0000000000000000000000000000000000000000;;		// material was
0000000000000000000000000000000000000000;;		// destroyed. Only present if state is
0000000000000000000000000000000000000000;;		// DESTROYED.
0000000000000000000000000000000000000000;;		DestroyEventTime string `json:"destroyEventTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DestroyTime: Output only. The time this CryptoKeyVersion's key
0000000000000000000000000000000000000000;;		// material is scheduled
0000000000000000000000000000000000000000;;		// for destruction. Only present if state is
0000000000000000000000000000000000000000;;		// DESTROY_SCHEDULED.
0000000000000000000000000000000000000000;;		DestroyTime string `json:"destroyTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Output only. The resource name for this CryptoKeyVersion in the
0000000000000000000000000000000000000000;;		// format
0000000000000000000000000000000000000000;;		// `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersio
0000000000000000000000000000000000000000;;		// ns/*`.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// State: The current state of the CryptoKeyVersion.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED" - Not specified.
0000000000000000000000000000000000000000;;		//   "ENABLED" - This version may be used in Encrypt and
0000000000000000000000000000000000000000;;		// Decrypt requests.
0000000000000000000000000000000000000000;;		//   "DISABLED" - This version may not be used, but the key material is
0000000000000000000000000000000000000000;;		// still available,
0000000000000000000000000000000000000000;;		// and the version can be placed back into the ENABLED state.
0000000000000000000000000000000000000000;;		//   "DESTROYED" - This version is destroyed, and the key material is no
0000000000000000000000000000000000000000;;		// longer stored.
0000000000000000000000000000000000000000;;		// A version may not leave this state once entered.
0000000000000000000000000000000000000000;;		//   "DESTROY_SCHEDULED" - This version is scheduled for destruction,
0000000000000000000000000000000000000000;;		// and will be destroyed soon.
0000000000000000000000000000000000000000;;		// Call
0000000000000000000000000000000000000000;;		// RestoreCryptoKeyVersion
0000000000000000000000000000000000000000;;		// to put it back into the DISABLED state.
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CreateTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CreateTime") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *CryptoKeyVersion) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod CryptoKeyVersion
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DataAccessOptions: Write a Data Access (Gin) log
0000000000000000000000000000000000000000;;	type DataAccessOptions struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecryptRequest: Request message for KeyManagementService.Decrypt.
0000000000000000000000000000000000000000;;	type DecryptRequest struct {
0000000000000000000000000000000000000000;;		// AdditionalAuthenticatedData: Optional data that must match the data
0000000000000000000000000000000000000000;;		// originally supplied in
0000000000000000000000000000000000000000;;		// EncryptRequest.additional_authenticated_data.
0000000000000000000000000000000000000000;;		AdditionalAuthenticatedData string `json:"additionalAuthenticatedData,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ciphertext: Required. The encrypted data originally returned
0000000000000000000000000000000000000000;;		// in
0000000000000000000000000000000000000000;;		// EncryptResponse.ciphertext.
0000000000000000000000000000000000000000;;		Ciphertext string `json:"ciphertext,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "AdditionalAuthenticatedData") to unconditionally include in API
0000000000000000000000000000000000000000;;		// requests. By default, fields with empty values are omitted from API
0000000000000000000000000000000000000000;;		// requests. However, any non-pointer, non-interface field appearing in
0000000000000000000000000000000000000000;;		// ForceSendFields will be sent to the server regardless of whether the
0000000000000000000000000000000000000000;;		// field is empty or not. This may be used to include empty fields in
0000000000000000000000000000000000000000;;		// Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "AdditionalAuthenticatedData") to include in API requests with the
0000000000000000000000000000000000000000;;		// JSON null value. By default, fields with empty values are omitted
0000000000000000000000000000000000000000;;		// from API requests. However, any field with an empty value appearing
0000000000000000000000000000000000000000;;		// in NullFields will be sent to the server as null. It is an error if a
0000000000000000000000000000000000000000;;		// field in this list has a non-empty value. This may be used to include
0000000000000000000000000000000000000000;;		// null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DecryptRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod DecryptRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecryptResponse: Response message for KeyManagementService.Decrypt.
0000000000000000000000000000000000000000;;	type DecryptResponse struct {
0000000000000000000000000000000000000000;;		// Plaintext: The decrypted data originally supplied in
0000000000000000000000000000000000000000;;		// EncryptRequest.plaintext.
0000000000000000000000000000000000000000;;		Plaintext string `json:"plaintext,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Plaintext") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Plaintext") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *DecryptResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod DecryptResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DestroyCryptoKeyVersionRequest: Request message for
0000000000000000000000000000000000000000;;	// KeyManagementService.DestroyCryptoKeyVersion.
0000000000000000000000000000000000000000;;	type DestroyCryptoKeyVersionRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EncryptRequest: Request message for KeyManagementService.Encrypt.
0000000000000000000000000000000000000000;;	type EncryptRequest struct {
0000000000000000000000000000000000000000;;		// AdditionalAuthenticatedData: Optional data that, if specified, must
0000000000000000000000000000000000000000;;		// also be provided during decryption
0000000000000000000000000000000000000000;;		// through DecryptRequest.additional_authenticated_data.  Must be
0000000000000000000000000000000000000000;;		// no
0000000000000000000000000000000000000000;;		// larger than 64KiB.
0000000000000000000000000000000000000000;;		AdditionalAuthenticatedData string `json:"additionalAuthenticatedData,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Plaintext: Required. The data to encrypt. Must be no larger than
0000000000000000000000000000000000000000;;		// 64KiB.
0000000000000000000000000000000000000000;;		Plaintext string `json:"plaintext,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "AdditionalAuthenticatedData") to unconditionally include in API
0000000000000000000000000000000000000000;;		// requests. By default, fields with empty values are omitted from API
0000000000000000000000000000000000000000;;		// requests. However, any non-pointer, non-interface field appearing in
0000000000000000000000000000000000000000;;		// ForceSendFields will be sent to the server regardless of whether the
0000000000000000000000000000000000000000;;		// field is empty or not. This may be used to include empty fields in
0000000000000000000000000000000000000000;;		// Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g.
0000000000000000000000000000000000000000;;		// "AdditionalAuthenticatedData") to include in API requests with the
0000000000000000000000000000000000000000;;		// JSON null value. By default, fields with empty values are omitted
0000000000000000000000000000000000000000;;		// from API requests. However, any field with an empty value appearing
0000000000000000000000000000000000000000;;		// in NullFields will be sent to the server as null. It is an error if a
0000000000000000000000000000000000000000;;		// field in this list has a non-empty value. This may be used to include
0000000000000000000000000000000000000000;;		// null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EncryptRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod EncryptRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EncryptResponse: Response message for KeyManagementService.Encrypt.
0000000000000000000000000000000000000000;;	type EncryptResponse struct {
0000000000000000000000000000000000000000;;		// Ciphertext: The encrypted data.
0000000000000000000000000000000000000000;;		Ciphertext string `json:"ciphertext,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: The resource name of the CryptoKeyVersion used in encryption.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Ciphertext") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Ciphertext") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *EncryptResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod EncryptResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyRing: A KeyRing is a toplevel logical grouping of CryptoKeys.
0000000000000000000000000000000000000000;;	type KeyRing struct {
0000000000000000000000000000000000000000;;		// CreateTime: Output only. The time at which this KeyRing was created.
0000000000000000000000000000000000000000;;		CreateTime string `json:"createTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Output only. The resource name for the KeyRing in the
0000000000000000000000000000000000000000;;		// format
0000000000000000000000000000000000000000;;		// `projects/*/locations/*/keyRings/*`.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CreateTime") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CreateTime") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *KeyRing) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod KeyRing
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListCryptoKeyVersionsResponse: Response message for
0000000000000000000000000000000000000000;;	// KeyManagementService.ListCryptoKeyVersions.
0000000000000000000000000000000000000000;;	type ListCryptoKeyVersionsResponse struct {
0000000000000000000000000000000000000000;;		// CryptoKeyVersions: The list of CryptoKeyVersions.
0000000000000000000000000000000000000000;;		CryptoKeyVersions []*CryptoKeyVersion `json:"cryptoKeyVersions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: A token to retrieve next page of results. Pass this
0000000000000000000000000000000000000000;;		// value in
0000000000000000000000000000000000000000;;		// ListCryptoKeyVersionsRequest.page_token to retrieve the next page
0000000000000000000000000000000000000000;;		// of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TotalSize: The total number of CryptoKeyVersions that matched
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// query.
0000000000000000000000000000000000000000;;		TotalSize int64 `json:"totalSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CryptoKeyVersions")
0000000000000000000000000000000000000000;;		// to unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CryptoKeyVersions") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListCryptoKeyVersionsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListCryptoKeyVersionsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListCryptoKeysResponse: Response message for
0000000000000000000000000000000000000000;;	// KeyManagementService.ListCryptoKeys.
0000000000000000000000000000000000000000;;	type ListCryptoKeysResponse struct {
0000000000000000000000000000000000000000;;		// CryptoKeys: The list of CryptoKeys.
0000000000000000000000000000000000000000;;		CryptoKeys []*CryptoKey `json:"cryptoKeys,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: A token to retrieve next page of results. Pass this
0000000000000000000000000000000000000000;;		// value in
0000000000000000000000000000000000000000;;		// ListCryptoKeysRequest.page_token to retrieve the next page of
0000000000000000000000000000000000000000;;		// results.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TotalSize: The total number of CryptoKeys that matched the query.
0000000000000000000000000000000000000000;;		TotalSize int64 `json:"totalSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CryptoKeys") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CryptoKeys") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListCryptoKeysResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListCryptoKeysResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListKeyRingsResponse: Response message for
0000000000000000000000000000000000000000;;	// KeyManagementService.ListKeyRings.
0000000000000000000000000000000000000000;;	type ListKeyRingsResponse struct {
0000000000000000000000000000000000000000;;		// KeyRings: The list of KeyRings.
0000000000000000000000000000000000000000;;		KeyRings []*KeyRing `json:"keyRings,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: A token to retrieve next page of results. Pass this
0000000000000000000000000000000000000000;;		// value in
0000000000000000000000000000000000000000;;		// ListKeyRingsRequest.page_token to retrieve the next page of results.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TotalSize: The total number of KeyRings that matched the query.
0000000000000000000000000000000000000000;;		TotalSize int64 `json:"totalSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "KeyRings") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "KeyRings") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListKeyRingsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListKeyRingsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLocationsResponse: The response message for
0000000000000000000000000000000000000000;;	// Locations.ListLocations.
0000000000000000000000000000000000000000;;	type ListLocationsResponse struct {
0000000000000000000000000000000000000000;;		// Locations: A list of locations that matches the specified filter in
0000000000000000000000000000000000000000;;		// the request.
0000000000000000000000000000000000000000;;		Locations []*Location `json:"locations,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: The standard List next-page token.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Locations") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Locations") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListLocationsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListLocationsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Location: A resource that represents Google Cloud Platform location.
0000000000000000000000000000000000000000;;	type Location struct {
0000000000000000000000000000000000000000;;		// Labels: Cross-service attributes for the location. For example
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		//     {"cloud.googleapis.com/region": "us-east1"}
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LocationId: The canonical id for this location. For example:
0000000000000000000000000000000000000000;;		// "us-east1".
0000000000000000000000000000000000000000;;		LocationId string `json:"locationId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Metadata: Service-specific metadata. For example the available
0000000000000000000000000000000000000000;;		// capacity at the given
0000000000000000000000000000000000000000;;		// location.
0000000000000000000000000000000000000000;;		Metadata googleapi.RawMessage `json:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Resource name for the location, which may vary between
0000000000000000000000000000000000000000;;		// implementations.
0000000000000000000000000000000000000000;;		// For example: "projects/example-project/locations/us-east1"
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Labels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Labels") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Location) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Location
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogConfig: Specifies what kind of log the caller must write
0000000000000000000000000000000000000000;;	type LogConfig struct {
0000000000000000000000000000000000000000;;		// CloudAudit: Cloud audit options.
0000000000000000000000000000000000000000;;		CloudAudit *CloudAuditOptions `json:"cloudAudit,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Counter: Counter options.
0000000000000000000000000000000000000000;;		Counter *CounterOptions `json:"counter,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DataAccess: Data access options.
0000000000000000000000000000000000000000;;		DataAccess *DataAccessOptions `json:"dataAccess,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CloudAudit") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CloudAudit") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogConfig) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogConfig
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Policy: Defines an Identity and Access Management (IAM) policy. It is
0000000000000000000000000000000000000000;;	// used to
0000000000000000000000000000000000000000;;	// specify access control policies for Cloud Platform resources.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// A `Policy` consists of a list of `bindings`. A `Binding` binds a list
0000000000000000000000000000000000000000;;	// of
0000000000000000000000000000000000000000;;	// `members` to a `role`, where the members can be user accounts, Google
0000000000000000000000000000000000000000;;	// groups,
0000000000000000000000000000000000000000;;	// Google domains, and service accounts. A `role` is a named list of
0000000000000000000000000000000000000000;;	// permissions
0000000000000000000000000000000000000000;;	// defined by IAM.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// **Example**
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     {
0000000000000000000000000000000000000000;;	//       "bindings": [
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "role": "roles/owner",
0000000000000000000000000000000000000000;;	//           "members": [
0000000000000000000000000000000000000000;;	//             "user:mike@example.com",
0000000000000000000000000000000000000000;;	//             "group:admins@example.com",
0000000000000000000000000000000000000000;;	//             "domain:google.com",
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// "serviceAccount:my-other-app@appspot.gserviceaccount.com",
0000000000000000000000000000000000000000;;	//           ]
0000000000000000000000000000000000000000;;	//         },
0000000000000000000000000000000000000000;;	//         {
0000000000000000000000000000000000000000;;	//           "role": "roles/viewer",
0000000000000000000000000000000000000000;;	//           "members": ["user:sean@example.com"]
0000000000000000000000000000000000000000;;	//         }
0000000000000000000000000000000000000000;;	//       ]
0000000000000000000000000000000000000000;;	//     }
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// For a description of IAM and its features, see the
0000000000000000000000000000000000000000;;	// [IAM developer's guide](https://cloud.google.com/iam).
0000000000000000000000000000000000000000;;	type Policy struct {
0000000000000000000000000000000000000000;;		// AuditConfigs: Specifies cloud audit logging configuration for this
0000000000000000000000000000000000000000;;		// policy.
0000000000000000000000000000000000000000;;		AuditConfigs []*AuditConfig `json:"auditConfigs,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Bindings: Associates a list of `members` to a `role`.
0000000000000000000000000000000000000000;;		// Multiple `bindings` must not be specified for the same
0000000000000000000000000000000000000000;;		// `role`.
0000000000000000000000000000000000000000;;		// `bindings` with no members will result in an error.
0000000000000000000000000000000000000000;;		Bindings []*Binding `json:"bindings,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Etag: `etag` is used for optimistic concurrency control as a way to
0000000000000000000000000000000000000000;;		// help
0000000000000000000000000000000000000000;;		// prevent simultaneous updates of a policy from overwriting each
0000000000000000000000000000000000000000;;		// other.
0000000000000000000000000000000000000000;;		// It is strongly suggested that systems make use of the `etag` in
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// read-modify-write cycle to perform policy updates in order to avoid
0000000000000000000000000000000000000000;;		// race
0000000000000000000000000000000000000000;;		// conditions: An `etag` is returned in the response to `getIamPolicy`,
0000000000000000000000000000000000000000;;		// and
0000000000000000000000000000000000000000;;		// systems are expected to put that etag in the request to
0000000000000000000000000000000000000000;;		// `setIamPolicy` to
0000000000000000000000000000000000000000;;		// ensure that their change will be applied to the same version of the
0000000000000000000000000000000000000000;;		// policy.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// If no `etag` is provided in the call to `setIamPolicy`, then the
0000000000000000000000000000000000000000;;		// existing
0000000000000000000000000000000000000000;;		// policy is overwritten blindly.
0000000000000000000000000000000000000000;;		Etag string `json:"etag,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IamOwned bool `json:"iamOwned,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Rules: If more than one rule is specified, the rules are applied in
0000000000000000000000000000000000000000;;		// the following
0000000000000000000000000000000000000000;;		// manner:
0000000000000000000000000000000000000000;;		// - All matching LOG rules are always applied.
0000000000000000000000000000000000000000;;		// - If any DENY/DENY_WITH_LOG rule matches, permission is denied.
0000000000000000000000000000000000000000;;		//   Logging will be applied if one or more matching rule requires
0000000000000000000000000000000000000000;;		// logging.
0000000000000000000000000000000000000000;;		// - Otherwise, if any ALLOW/ALLOW_WITH_LOG rule matches, permission is
0000000000000000000000000000000000000000;;		//   granted.
0000000000000000000000000000000000000000;;		//   Logging will be applied if one or more matching rule requires
0000000000000000000000000000000000000000;;		// logging.
0000000000000000000000000000000000000000;;		// - Otherwise, if no rule applies, permission is denied.
0000000000000000000000000000000000000000;;		Rules []*Rule `json:"rules,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Version: Version of the `Policy`. The default version is 0.
0000000000000000000000000000000000000000;;		Version int64 `json:"version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "AuditConfigs") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AuditConfigs") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Policy) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Policy
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RestoreCryptoKeyVersionRequest: Request message for
0000000000000000000000000000000000000000;;	// KeyManagementService.RestoreCryptoKeyVersion.
0000000000000000000000000000000000000000;;	type RestoreCryptoKeyVersionRequest struct {
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Rule: A rule to be applied in a Policy.
0000000000000000000000000000000000000000;;	type Rule struct {
0000000000000000000000000000000000000000;;		// Action: Required
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "NO_ACTION" - Default no action.
0000000000000000000000000000000000000000;;		//   "ALLOW" - Matching 'Entries' grant access.
0000000000000000000000000000000000000000;;		//   "ALLOW_WITH_LOG" - Matching 'Entries' grant access and the caller
0000000000000000000000000000000000000000;;		// promises to log
0000000000000000000000000000000000000000;;		// the request per the returned log_configs.
0000000000000000000000000000000000000000;;		//   "DENY" - Matching 'Entries' deny access.
0000000000000000000000000000000000000000;;		//   "DENY_WITH_LOG" - Matching 'Entries' deny access and the caller
0000000000000000000000000000000000000000;;		// promises to log
0000000000000000000000000000000000000000;;		// the request per the returned log_configs.
0000000000000000000000000000000000000000;;		//   "LOG" - Matching 'Entries' tell IAM.Check callers to generate logs.
0000000000000000000000000000000000000000;;		Action string `json:"action,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Conditions: Additional restrictions that must be met
0000000000000000000000000000000000000000;;		Conditions []*Condition `json:"conditions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Description: Human-readable description of the rule.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// In: If one or more 'in' clauses are specified, the rule matches
0000000000000000000000000000000000000000;;		// if
0000000000000000000000000000000000000000;;		// the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
0000000000000000000000000000000000000000;;		In []string `json:"in,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogConfig: The config returned to callers of tech.iam.IAM.CheckPolicy
0000000000000000000000000000000000000000;;		// for any entries
0000000000000000000000000000000000000000;;		// that match the LOG action.
0000000000000000000000000000000000000000;;		LogConfig []*LogConfig `json:"logConfig,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NotIn: If one or more 'not_in' clauses are specified, the rule
0000000000000000000000000000000000000000;;		// matches
0000000000000000000000000000000000000000;;		// if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries.
0000000000000000000000000000000000000000;;		// The format for in and not_in entries is the same as for members in
0000000000000000000000000000000000000000;;		// a
0000000000000000000000000000000000000000;;		// Binding (see google/iam/v1/policy.proto).
0000000000000000000000000000000000000000;;		NotIn []string `json:"notIn,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Permissions: A permission is a string of form '<service>.<resource
0000000000000000000000000000000000000000;;		// type>.<verb>'
0000000000000000000000000000000000000000;;		// (e.g., 'storage.buckets.list'). A value of '*' matches all
0000000000000000000000000000000000000000;;		// permissions,
0000000000000000000000000000000000000000;;		// and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.
0000000000000000000000000000000000000000;;		Permissions []string `json:"permissions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Action") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Action") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Rule) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod Rule
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamPolicyRequest: Request message for `SetIamPolicy` method.
0000000000000000000000000000000000000000;;	type SetIamPolicyRequest struct {
0000000000000000000000000000000000000000;;		// Policy: REQUIRED: The complete policy to be applied to the
0000000000000000000000000000000000000000;;		// `resource`. The size of
0000000000000000000000000000000000000000;;		// the policy is limited to a few 10s of KB. An empty policy is a
0000000000000000000000000000000000000000;;		// valid policy but certain Cloud Platform services (such as
0000000000000000000000000000000000000000;;		// Projects)
0000000000000000000000000000000000000000;;		// might reject them.
0000000000000000000000000000000000000000;;		Policy *Policy `json:"policy,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UpdateMask: OPTIONAL: A FieldMask specifying which fields of the
0000000000000000000000000000000000000000;;		// policy to modify. Only
0000000000000000000000000000000000000000;;		// the fields in the mask will be modified. If no mask is provided,
0000000000000000000000000000000000000000;;		// the
0000000000000000000000000000000000000000;;		// following default mask is used:
0000000000000000000000000000000000000000;;		// paths: "bindings, etag"
0000000000000000000000000000000000000000;;		// This field is only used by Cloud IAM.
0000000000000000000000000000000000000000;;		UpdateMask string `json:"updateMask,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Policy") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Policy") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SetIamPolicyRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SetIamPolicyRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestIamPermissionsRequest: Request message for `TestIamPermissions`
0000000000000000000000000000000000000000;;	// method.
0000000000000000000000000000000000000000;;	type TestIamPermissionsRequest struct {
0000000000000000000000000000000000000000;;		// Permissions: The set of permissions to check for the `resource`.
0000000000000000000000000000000000000000;;		// Permissions with
0000000000000000000000000000000000000000;;		// wildcards (such as '*' or 'storage.*') are not allowed. For
0000000000000000000000000000000000000000;;		// more
0000000000000000000000000000000000000000;;		// information see
0000000000000000000000000000000000000000;;		// [IAM
0000000000000000000000000000000000000000;;		// Overview](https://cloud.google.com/iam/docs/overview#permissions).
0000000000000000000000000000000000000000;;		Permissions []string `json:"permissions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Permissions") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Permissions") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TestIamPermissionsRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TestIamPermissionsRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestIamPermissionsResponse: Response message for `TestIamPermissions`
0000000000000000000000000000000000000000;;	// method.
0000000000000000000000000000000000000000;;	type TestIamPermissionsResponse struct {
0000000000000000000000000000000000000000;;		// Permissions: A subset of `TestPermissionsRequest.permissions` that
0000000000000000000000000000000000000000;;		// the caller is
0000000000000000000000000000000000000000;;		// allowed.
0000000000000000000000000000000000000000;;		Permissions []string `json:"permissions,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Permissions") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Permissions") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *TestIamPermissionsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod TestIamPermissionsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateCryptoKeyPrimaryVersionRequest: Request message for
0000000000000000000000000000000000000000;;	// KeyManagementService.UpdateCryptoKeyPrimaryVersion.
0000000000000000000000000000000000000000;;	type UpdateCryptoKeyPrimaryVersionRequest struct {
0000000000000000000000000000000000000000;;		// CryptoKeyVersionId: The id of the child CryptoKeyVersion to use as
0000000000000000000000000000000000000000;;		// primary.
0000000000000000000000000000000000000000;;		CryptoKeyVersionId string `json:"cryptoKeyVersionId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CryptoKeyVersionId")
0000000000000000000000000000000000000000;;		// to unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CryptoKeyVersionId") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *UpdateCryptoKeyPrimaryVersionRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod UpdateCryptoKeyPrimaryVersionRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Get information about a location.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsService) Get(name string) *ProjectsLocationsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) Fields(s ...googleapi.Field) *ProjectsLocationsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) IfNoneMatch(entityTag string) *ProjectsLocationsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) Context(ctx context.Context) *ProjectsLocationsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Location or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Location.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsGetCall) Do(opts ...googleapi.CallOption) (*Location, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Location{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Get information about a location.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Resource name for the location.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Location"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists information about the supported locations for this
0000000000000000000000000000000000000000;;	// service.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsService) List(name string) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter sets the optional parameter "filter": The standard list
0000000000000000000000000000000000000000;;	// filter.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Filter(filter string) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("filter", filter)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The standard list
0000000000000000000000000000000000000000;;	// page size.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) PageSize(pageSize int64) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": The standard list
0000000000000000000000000000000000000000;;	// page token.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) PageToken(pageToken string) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Fields(s ...googleapi.Field) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) IfNoneMatch(entityTag string) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Context(ctx context.Context) *ProjectsLocationsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}/locations")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLocationsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLocationsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Do(opts ...googleapi.CallOption) (*ListLocationsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLocationsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists information about the supported locations for this service.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "filter": {
0000000000000000000000000000000000000000;;		//       "description": "The standard list filter.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The resource that owns the locations collection, if applicable.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "The standard list page size.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "The standard list page token.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}/locations",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLocationsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsListCall) Pages(ctx context.Context, f func(*ListLocationsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCreateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		parent     string
0000000000000000000000000000000000000000;;		keyring    *KeyRing
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Create a new KeyRing in a given Project and Location.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) Create(parent string, keyring *KeyRing) *ProjectsLocationsKeyRingsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		c.keyring = keyring
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// KeyRingId sets the optional parameter "keyRingId": Required. It must
0000000000000000000000000000000000000000;;	// be unique within a location and match the regular
0000000000000000000000000000000000000000;;	// expression `[a-zA-Z0-9_-]{1,63}`
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) KeyRingId(keyRingId string) *ProjectsLocationsKeyRingsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("keyRingId", keyRingId)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.keyring)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/keyRings")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *KeyRing or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *KeyRing.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCreateCall) Do(opts ...googleapi.CallOption) (*KeyRing, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &KeyRing{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Create a new KeyRing in a given Project and Location.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "keyRingId": {
0000000000000000000000000000000000000000;;		//       "description": "Required. It must be unique within a location and match the regular\nexpression `[a-zA-Z0-9_-]{1,63}`",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the location associated with the\nKeyRings, in the format `projects/*/locations/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/keyRings",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "KeyRing"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "KeyRing"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Returns metadata for a given KeyRing.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) Get(name string) *ProjectsLocationsKeyRingsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *KeyRing or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *KeyRing.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetCall) Do(opts ...googleapi.CallOption) (*KeyRing, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &KeyRing{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns metadata for a given KeyRing.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the KeyRing to get.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "KeyRing"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.getIamPolicy":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsGetIamPolicyCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		resource     string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIamPolicy: Gets the access control policy for a resource.
0000000000000000000000000000000000000000;;	// Returns an empty policy if the resource exists and does not have a
0000000000000000000000000000000000000000;;	// policy
0000000000000000000000000000000000000000;;	// set.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) GetIamPolicy(resource string) *ProjectsLocationsKeyRingsGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsGetIamPolicyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:getIamPolicy")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.getIamPolicy" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Policy or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Policy.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsGetIamPolicyCall) Do(opts ...googleapi.CallOption) (*Policy, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Policy{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:getIamPolicy",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.getIamPolicy",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:getIamPolicy",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Policy"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists KeyRings.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) List(parent string) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": Optional limit on
0000000000000000000000000000000000000000;;	// the number of KeyRings to include in the
0000000000000000000000000000000000000000;;	// response.  Further KeyRings can subsequently be obtained by
0000000000000000000000000000000000000000;;	// including the ListKeyRingsResponse.next_page_token in a
0000000000000000000000000000000000000000;;	// subsequent
0000000000000000000000000000000000000000;;	// request.  If unspecified, the server will pick an appropriate
0000000000000000000000000000000000000000;;	// default.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) PageSize(pageSize int64) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": Optional
0000000000000000000000000000000000000000;;	// pagination token, returned earlier
0000000000000000000000000000000000000000;;	// via
0000000000000000000000000000000000000000;;	// ListKeyRingsResponse.next_page_token.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) PageToken(pageToken string) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/keyRings")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListKeyRingsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListKeyRingsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) Do(opts ...googleapi.CallOption) (*ListKeyRingsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListKeyRingsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists KeyRings.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional limit on the number of KeyRings to include in the\nresponse.  Further KeyRings can subsequently be obtained by\nincluding the ListKeyRingsResponse.next_page_token in a subsequent\nrequest.  If unspecified, the server will pick an appropriate default.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional pagination token, returned earlier via\nListKeyRingsResponse.next_page_token.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the location associated with the\nKeyRings, in the format `projects/*/locations/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/keyRings",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListKeyRingsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsListCall) Pages(ctx context.Context, f func(*ListKeyRingsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.setIamPolicy":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsSetIamPolicyCall struct {
0000000000000000000000000000000000000000;;		s                   *Service
0000000000000000000000000000000000000000;;		resource            string
0000000000000000000000000000000000000000;;		setiampolicyrequest *SetIamPolicyRequest
0000000000000000000000000000000000000000;;		urlParams_          gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                context.Context
0000000000000000000000000000000000000000;;		header_             http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamPolicy: Sets the access control policy on the specified
0000000000000000000000000000000000000000;;	// resource. Replaces any
0000000000000000000000000000000000000000;;	// existing policy.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) SetIamPolicy(resource string, setiampolicyrequest *SetIamPolicyRequest) *ProjectsLocationsKeyRingsSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsSetIamPolicyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		c.setiampolicyrequest = setiampolicyrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsSetIamPolicyCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsSetIamPolicyCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsSetIamPolicyCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsSetIamPolicyCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setiampolicyrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:setIamPolicy")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.setIamPolicy" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Policy or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Policy.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsSetIamPolicyCall) Do(opts ...googleapi.CallOption) (*Policy, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Policy{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:setIamPolicy",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.setIamPolicy",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:setIamPolicy",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetIamPolicyRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Policy"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.testIamPermissions":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsTestIamPermissionsCall struct {
0000000000000000000000000000000000000000;;		s                         *Service
0000000000000000000000000000000000000000;;		resource                  string
0000000000000000000000000000000000000000;;		testiampermissionsrequest *TestIamPermissionsRequest
0000000000000000000000000000000000000000;;		urlParams_                gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                      context.Context
0000000000000000000000000000000000000000;;		header_                   http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestIamPermissions: Returns permissions that a caller has on the
0000000000000000000000000000000000000000;;	// specified resource.
0000000000000000000000000000000000000000;;	// If the resource does not exist, this will return an empty set
0000000000000000000000000000000000000000;;	// of
0000000000000000000000000000000000000000;;	// permissions, not a NOT_FOUND error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation is designed to be used for building
0000000000000000000000000000000000000000;;	// permission-aware
0000000000000000000000000000000000000000;;	// UIs and command-line tools, not for authorization checking. This
0000000000000000000000000000000000000000;;	// operation
0000000000000000000000000000000000000000;;	// may "fail open" without warning.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsService) TestIamPermissions(resource string, testiampermissionsrequest *TestIamPermissionsRequest) *ProjectsLocationsKeyRingsTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsTestIamPermissionsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		c.testiampermissionsrequest = testiampermissionsrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsTestIamPermissionsCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsTestIamPermissionsCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsTestIamPermissionsCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsTestIamPermissionsCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.testiampermissionsrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:testIamPermissions")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.testIamPermissions" call.
0000000000000000000000000000000000000000;;	// Exactly one of *TestIamPermissionsResponse or error will be non-nil.
0000000000000000000000000000000000000000;;	// Any non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *TestIamPermissionsResponse.ServerResponse.Header or (if a response
0000000000000000000000000000000000000000;;	// was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsTestIamPermissionsCall) Do(opts ...googleapi.CallOption) (*TestIamPermissionsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &TestIamPermissionsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:testIamPermissions",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.testIamPermissions",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:testIamPermissions",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "TestIamPermissionsRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "TestIamPermissionsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCreateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		parent     string
0000000000000000000000000000000000000000;;		cryptokey  *CryptoKey
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Create a new CryptoKey within a KeyRing.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// CryptoKey.purpose is required.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) Create(parent string, cryptokey *CryptoKey) *ProjectsLocationsKeyRingsCryptoKeysCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		c.cryptokey = cryptokey
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CryptoKeyId sets the optional parameter "cryptoKeyId": Required. It
0000000000000000000000000000000000000000;;	// must be unique within a KeyRing and match the regular
0000000000000000000000000000000000000000;;	// expression `[a-zA-Z0-9_-]{1,63}`
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) CryptoKeyId(cryptoKeyId string) *ProjectsLocationsKeyRingsCryptoKeysCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("cryptoKeyId", cryptoKeyId)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.cryptokey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/cryptoKeys")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKey or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKey.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCreateCall) Do(opts ...googleapi.CallOption) (*CryptoKey, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKey{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Create a new CryptoKey within a KeyRing.\n\nCryptoKey.purpose is required.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "cryptoKeyId": {
0000000000000000000000000000000000000000;;		//       "description": "Required. It must be unique within a KeyRing and match the regular\nexpression `[a-zA-Z0-9_-]{1,63}`",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The name of the KeyRing associated with the\nCryptoKeys.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/cryptoKeys",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.decrypt":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysDecryptCall struct {
0000000000000000000000000000000000000000;;		s              *Service
0000000000000000000000000000000000000000;;		name           string
0000000000000000000000000000000000000000;;		decryptrequest *DecryptRequest
0000000000000000000000000000000000000000;;		urlParams_     gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_           context.Context
0000000000000000000000000000000000000000;;		header_        http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Decrypt: Decrypt data that was protected by Encrypt.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) Decrypt(name string, decryptrequest *DecryptRequest) *ProjectsLocationsKeyRingsCryptoKeysDecryptCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysDecryptCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.decryptrequest = decryptrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysDecryptCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysDecryptCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysDecryptCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysDecryptCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysDecryptCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysDecryptCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.decryptrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}:decrypt")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.decrypt" call.
0000000000000000000000000000000000000000;;	// Exactly one of *DecryptResponse or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *DecryptResponse.ServerResponse.Header or (if a response was returned
0000000000000000000000000000000000000000;;	// at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysDecryptCall) Do(opts ...googleapi.CallOption) (*DecryptResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &DecryptResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Decrypt data that was protected by Encrypt.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:decrypt",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.decrypt",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the CryptoKey to use for decryption.\nThe server will choose the appropriate version.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}:decrypt",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "DecryptRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "DecryptResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.encrypt":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysEncryptCall struct {
0000000000000000000000000000000000000000;;		s              *Service
0000000000000000000000000000000000000000;;		name           string
0000000000000000000000000000000000000000;;		encryptrequest *EncryptRequest
0000000000000000000000000000000000000000;;		urlParams_     gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_           context.Context
0000000000000000000000000000000000000000;;		header_        http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Encrypt: Encrypt data, so that it can only be recovered by a call to
0000000000000000000000000000000000000000;;	// Decrypt.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) Encrypt(name string, encryptrequest *EncryptRequest) *ProjectsLocationsKeyRingsCryptoKeysEncryptCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysEncryptCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.encryptrequest = encryptrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysEncryptCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysEncryptCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysEncryptCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysEncryptCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysEncryptCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysEncryptCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.encryptrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}:encrypt")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.encrypt" call.
0000000000000000000000000000000000000000;;	// Exactly one of *EncryptResponse or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *EncryptResponse.ServerResponse.Header or (if a response was returned
0000000000000000000000000000000000000000;;	// at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysEncryptCall) Do(opts ...googleapi.CallOption) (*EncryptResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &EncryptResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Encrypt data, so that it can only be recovered by a call to Decrypt.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:encrypt",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.encrypt",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the CryptoKey or CryptoKeyVersion\nto use for encryption.\n\nIf a CryptoKey is specified, the server will use its\nprimary version.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/.+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}:encrypt",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "EncryptRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "EncryptResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Returns metadata for a given CryptoKey, as well as its
0000000000000000000000000000000000000000;;	// primary CryptoKeyVersion.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) Get(name string) *ProjectsLocationsKeyRingsCryptoKeysGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsCryptoKeysGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKey or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKey.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetCall) Do(opts ...googleapi.CallOption) (*CryptoKey, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKey{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns metadata for a given CryptoKey, as well as its\nprimary CryptoKeyVersion.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the CryptoKey to get.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		resource     string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetIamPolicy: Gets the access control policy for a resource.
0000000000000000000000000000000000000000;;	// Returns an empty policy if the resource exists and does not have a
0000000000000000000000000000000000000000;;	// policy
0000000000000000000000000000000000000000;;	// set.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) GetIamPolicy(resource string) *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:getIamPolicy")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Policy or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Policy.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysGetIamPolicyCall) Do(opts ...googleapi.CallOption) (*Policy, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Policy{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:getIamPolicy",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:getIamPolicy",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Policy"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists CryptoKeys.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) List(parent string) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": Optional limit on
0000000000000000000000000000000000000000;;	// the number of CryptoKeys to include in the
0000000000000000000000000000000000000000;;	// response.  Further CryptoKeys can subsequently be obtained
0000000000000000000000000000000000000000;;	// by
0000000000000000000000000000000000000000;;	// including the ListCryptoKeysResponse.next_page_token in a
0000000000000000000000000000000000000000;;	// subsequent
0000000000000000000000000000000000000000;;	// request.  If unspecified, the server will pick an appropriate
0000000000000000000000000000000000000000;;	// default.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) PageSize(pageSize int64) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": Optional
0000000000000000000000000000000000000000;;	// pagination token, returned earlier
0000000000000000000000000000000000000000;;	// via
0000000000000000000000000000000000000000;;	// ListCryptoKeysResponse.next_page_token.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) PageToken(pageToken string) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/cryptoKeys")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListCryptoKeysResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListCryptoKeysResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) Do(opts ...googleapi.CallOption) (*ListCryptoKeysResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListCryptoKeysResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists CryptoKeys.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional limit on the number of CryptoKeys to include in the\nresponse.  Further CryptoKeys can subsequently be obtained by\nincluding the ListCryptoKeysResponse.next_page_token in a subsequent\nrequest.  If unspecified, the server will pick an appropriate default.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional pagination token, returned earlier via\nListCryptoKeysResponse.next_page_token.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the KeyRing to list, in the format\n`projects/*/locations/*/keyRings/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/cryptoKeys",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListCryptoKeysResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysListCall) Pages(ctx context.Context, f func(*ListCryptoKeysResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.patch":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysPatchCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		name       string
0000000000000000000000000000000000000000;;		cryptokey  *CryptoKey
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch: Update a CryptoKey.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) Patch(name string, cryptokey *CryptoKey) *ProjectsLocationsKeyRingsCryptoKeysPatchCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysPatchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.cryptokey = cryptokey
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMask sets the optional parameter "updateMask": Required list of
0000000000000000000000000000000000000000;;	// fields to be updated in this request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) UpdateMask(updateMask string) *ProjectsLocationsKeyRingsCryptoKeysPatchCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("updateMask", updateMask)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysPatchCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysPatchCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.cryptokey)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PATCH", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.patch" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKey or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKey.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysPatchCall) Do(opts ...googleapi.CallOption) (*CryptoKey, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKey{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Update a CryptoKey.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PATCH",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.patch",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Output only. The resource name for this CryptoKey in the format\n`projects/*/locations/*/keyRings/*/cryptoKeys/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "updateMask": {
0000000000000000000000000000000000000000;;		//       "description": "Required list of fields to be updated in this request.",
0000000000000000000000000000000000000000;;		//       "format": "google-fieldmask",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall struct {
0000000000000000000000000000000000000000;;		s                   *Service
0000000000000000000000000000000000000000;;		resource            string
0000000000000000000000000000000000000000;;		setiampolicyrequest *SetIamPolicyRequest
0000000000000000000000000000000000000000;;		urlParams_          gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                context.Context
0000000000000000000000000000000000000000;;		header_             http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetIamPolicy: Sets the access control policy on the specified
0000000000000000000000000000000000000000;;	// resource. Replaces any
0000000000000000000000000000000000000000;;	// existing policy.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) SetIamPolicy(resource string, setiampolicyrequest *SetIamPolicyRequest) *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		c.setiampolicyrequest = setiampolicyrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.setiampolicyrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:setIamPolicy")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Policy or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Policy.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysSetIamPolicyCall) Do(opts ...googleapi.CallOption) (*Policy, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Policy{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:setIamPolicy",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:setIamPolicy",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "SetIamPolicyRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Policy"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall struct {
0000000000000000000000000000000000000000;;		s                         *Service
0000000000000000000000000000000000000000;;		resource                  string
0000000000000000000000000000000000000000;;		testiampermissionsrequest *TestIamPermissionsRequest
0000000000000000000000000000000000000000;;		urlParams_                gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                      context.Context
0000000000000000000000000000000000000000;;		header_                   http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TestIamPermissions: Returns permissions that a caller has on the
0000000000000000000000000000000000000000;;	// specified resource.
0000000000000000000000000000000000000000;;	// If the resource does not exist, this will return an empty set
0000000000000000000000000000000000000000;;	// of
0000000000000000000000000000000000000000;;	// permissions, not a NOT_FOUND error.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Note: This operation is designed to be used for building
0000000000000000000000000000000000000000;;	// permission-aware
0000000000000000000000000000000000000000;;	// UIs and command-line tools, not for authorization checking. This
0000000000000000000000000000000000000000;;	// operation
0000000000000000000000000000000000000000;;	// may "fail open" without warning.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) TestIamPermissions(resource string, testiampermissionsrequest *TestIamPermissionsRequest) *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.resource = resource
0000000000000000000000000000000000000000;;		c.testiampermissionsrequest = testiampermissionsrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.testiampermissionsrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+resource}:testIamPermissions")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"resource": c.resource,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions" call.
0000000000000000000000000000000000000000;;	// Exactly one of *TestIamPermissionsResponse or error will be non-nil.
0000000000000000000000000000000000000000;;	// Any non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *TestIamPermissionsResponse.ServerResponse.Header or (if a response
0000000000000000000000000000000000000000;;	// was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysTestIamPermissionsCall) Do(opts ...googleapi.CallOption) (*TestIamPermissionsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &TestIamPermissionsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:testIamPermissions",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "resource"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "resource": {
0000000000000000000000000000000000000000;;		//       "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+resource}:testIamPermissions",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "TestIamPermissionsRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "TestIamPermissionsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall struct {
0000000000000000000000000000000000000000;;		s                                    *Service
0000000000000000000000000000000000000000;;		name                                 string
0000000000000000000000000000000000000000;;		updatecryptokeyprimaryversionrequest *UpdateCryptoKeyPrimaryVersionRequest
0000000000000000000000000000000000000000;;		urlParams_                           gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                                 context.Context
0000000000000000000000000000000000000000;;		header_                              http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePrimaryVersion: Update the version of a CryptoKey that will be
0000000000000000000000000000000000000000;;	// used in Encrypt
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysService) UpdatePrimaryVersion(name string, updatecryptokeyprimaryversionrequest *UpdateCryptoKeyPrimaryVersionRequest) *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.updatecryptokeyprimaryversionrequest = updatecryptokeyprimaryversionrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.updatecryptokeyprimaryversionrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}:updatePrimaryVersion")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKey or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKey.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysUpdatePrimaryVersionCall) Do(opts ...googleapi.CallOption) (*CryptoKey, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKey{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Update the version of a CryptoKey that will be used in Encrypt",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:updatePrimaryVersion",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the CryptoKey to update.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}:updatePrimaryVersion",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "UpdateCryptoKeyPrimaryVersionRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKey"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall struct {
0000000000000000000000000000000000000000;;		s                *Service
0000000000000000000000000000000000000000;;		parent           string
0000000000000000000000000000000000000000;;		cryptokeyversion *CryptoKeyVersion
0000000000000000000000000000000000000000;;		urlParams_       gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_             context.Context
0000000000000000000000000000000000000000;;		header_          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Create a new CryptoKeyVersion in a CryptoKey.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// The server will assign the next sequential id. If unset,
0000000000000000000000000000000000000000;;	// state will be set to
0000000000000000000000000000000000000000;;	// ENABLED.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) Create(parent string, cryptokeyversion *CryptoKeyVersion) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		c.cryptokeyversion = cryptokeyversion
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.cryptokeyversion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/cryptoKeyVersions")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKeyVersion or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKeyVersion.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsCreateCall) Do(opts ...googleapi.CallOption) (*CryptoKeyVersion, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKeyVersion{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Create a new CryptoKeyVersion in a CryptoKey.\n\nThe server will assign the next sequential id. If unset,\nstate will be set to\nENABLED.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The name of the CryptoKey associated with\nthe CryptoKeyVersions.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/cryptoKeyVersions",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall struct {
0000000000000000000000000000000000000000;;		s                              *Service
0000000000000000000000000000000000000000;;		name                           string
0000000000000000000000000000000000000000;;		destroycryptokeyversionrequest *DestroyCryptoKeyVersionRequest
0000000000000000000000000000000000000000;;		urlParams_                     gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                           context.Context
0000000000000000000000000000000000000000;;		header_                        http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Destroy: Schedule a CryptoKeyVersion for destruction.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Upon calling this method, CryptoKeyVersion.state will be set
0000000000000000000000000000000000000000;;	// to
0000000000000000000000000000000000000000;;	// DESTROY_SCHEDULED
0000000000000000000000000000000000000000;;	// and destroy_time will be set to a time 24
0000000000000000000000000000000000000000;;	// hours in the future, at which point the state
0000000000000000000000000000000000000000;;	// will be changed to
0000000000000000000000000000000000000000;;	// DESTROYED, and the key
0000000000000000000000000000000000000000;;	// material will be irrevocably destroyed.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Before the destroy_time is reached,
0000000000000000000000000000000000000000;;	// RestoreCryptoKeyVersion may be called to reverse the process.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) Destroy(name string, destroycryptokeyversionrequest *DestroyCryptoKeyVersionRequest) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.destroycryptokeyversionrequest = destroycryptokeyversionrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.destroycryptokeyversionrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}:destroy")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKeyVersion or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKeyVersion.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsDestroyCall) Do(opts ...googleapi.CallOption) (*CryptoKeyVersion, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKeyVersion{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Schedule a CryptoKeyVersion for destruction.\n\nUpon calling this method, CryptoKeyVersion.state will be set to\nDESTROY_SCHEDULED\nand destroy_time will be set to a time 24\nhours in the future, at which point the state\nwill be changed to\nDESTROYED, and the key\nmaterial will be irrevocably destroyed.\n\nBefore the destroy_time is reached,\nRestoreCryptoKeyVersion may be called to reverse the process.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:destroy",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the CryptoKeyVersion to destroy.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+/cryptoKeyVersions/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}:destroy",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "DestroyCryptoKeyVersionRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		name         string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Returns metadata for a given CryptoKeyVersion.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) Get(name string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKeyVersion or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKeyVersion.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsGetCall) Do(opts ...googleapi.CallOption) (*CryptoKeyVersion, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKeyVersion{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Returns metadata for a given CryptoKeyVersion.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The name of the CryptoKeyVersion to get.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+/cryptoKeyVersions/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists CryptoKeyVersions.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) List(parent string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": Optional limit on
0000000000000000000000000000000000000000;;	// the number of CryptoKeyVersions to
0000000000000000000000000000000000000000;;	// include in the response. Further CryptoKeyVersions can
0000000000000000000000000000000000000000;;	// subsequently be obtained by including
0000000000000000000000000000000000000000;;	// the
0000000000000000000000000000000000000000;;	// ListCryptoKeyVersionsResponse.next_page_token in a subsequent
0000000000000000000000000000000000000000;;	// request.
0000000000000000000000000000000000000000;;	// If unspecified, the server will pick an appropriate default.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) PageSize(pageSize int64) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": Optional
0000000000000000000000000000000000000000;;	// pagination token, returned earlier
0000000000000000000000000000000000000000;;	// via
0000000000000000000000000000000000000000;;	// ListCryptoKeyVersionsResponse.next_page_token.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) PageToken(pageToken string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) IfNoneMatch(entityTag string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+parent}/cryptoKeyVersions")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListCryptoKeyVersionsResponse or error will be
0000000000000000000000000000000000000000;;	// non-nil. Any non-2xx status code is an error. Response headers are in
0000000000000000000000000000000000000000;;	// either *ListCryptoKeyVersionsResponse.ServerResponse.Header or (if a
0000000000000000000000000000000000000000;;	// response was returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) Do(opts ...googleapi.CallOption) (*ListCryptoKeyVersionsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListCryptoKeyVersionsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists CryptoKeyVersions.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional limit on the number of CryptoKeyVersions to\ninclude in the response. Further CryptoKeyVersions can\nsubsequently be obtained by including the\nListCryptoKeyVersionsResponse.next_page_token in a subsequent request.\nIf unspecified, the server will pick an appropriate default.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional pagination token, returned earlier via\nListCryptoKeyVersionsResponse.next_page_token.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the CryptoKey to list, in the format\n`projects/*/locations/*/keyRings/*/cryptoKeys/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+parent}/cryptoKeyVersions",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListCryptoKeyVersionsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsListCall) Pages(ctx context.Context, f func(*ListCryptoKeyVersionsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall struct {
0000000000000000000000000000000000000000;;		s                *Service
0000000000000000000000000000000000000000;;		name             string
0000000000000000000000000000000000000000;;		cryptokeyversion *CryptoKeyVersion
0000000000000000000000000000000000000000;;		urlParams_       gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_             context.Context
0000000000000000000000000000000000000000;;		header_          http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Patch: Update a CryptoKeyVersion's metadata.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// state may be changed between
0000000000000000000000000000000000000000;;	// ENABLED and
0000000000000000000000000000000000000000;;	// DISABLED using this
0000000000000000000000000000000000000000;;	// method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion
0000000000000000000000000000000000000000;;	// to
0000000000000000000000000000000000000000;;	// move between other states.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) Patch(name string, cryptokeyversion *CryptoKeyVersion) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.cryptokeyversion = cryptokeyversion
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateMask sets the optional parameter "updateMask": Required list of
0000000000000000000000000000000000000000;;	// fields to be updated in this request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) UpdateMask(updateMask string) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("updateMask", updateMask)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.cryptokeyversion)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PATCH", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKeyVersion or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKeyVersion.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsPatchCall) Do(opts ...googleapi.CallOption) (*CryptoKeyVersion, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKeyVersion{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Update a CryptoKeyVersion's metadata.\n\nstate may be changed between\nENABLED and\nDISABLED using this\nmethod. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to\nmove between other states.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PATCH",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "Output only. The resource name for this CryptoKeyVersion in the format\n`projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+/cryptoKeyVersions/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "updateMask": {
0000000000000000000000000000000000000000;;		//       "description": "Required list of fields to be updated in this request.",
0000000000000000000000000000000000000000;;		//       "format": "google-fieldmask",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall struct {
0000000000000000000000000000000000000000;;		s                              *Service
0000000000000000000000000000000000000000;;		name                           string
0000000000000000000000000000000000000000;;		restorecryptokeyversionrequest *RestoreCryptoKeyVersionRequest
0000000000000000000000000000000000000000;;		urlParams_                     gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                           context.Context
0000000000000000000000000000000000000000;;		header_                        http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Restore: Restore a CryptoKeyVersion in
0000000000000000000000000000000000000000;;	// the
0000000000000000000000000000000000000000;;	// DESTROY_SCHEDULED,
0000000000000000000000000000000000000000;;	// state.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Upon restoration of the CryptoKeyVersion, state
0000000000000000000000000000000000000000;;	// will be set to DISABLED,
0000000000000000000000000000000000000000;;	// and destroy_time will be cleared.
0000000000000000000000000000000000000000;;	func (r *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsService) Restore(name string, restorecryptokeyversionrequest *RestoreCryptoKeyVersionRequest) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.name = name
0000000000000000000000000000000000000000;;		c.restorecryptokeyversionrequest = restorecryptokeyversionrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall) Fields(s ...googleapi.Field) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall) Context(ctx context.Context) *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.restorecryptokeyversionrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v1/{+name}:restore")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"name": c.name,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore" call.
0000000000000000000000000000000000000000;;	// Exactly one of *CryptoKeyVersion or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *CryptoKeyVersion.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLocationsKeyRingsCryptoKeysCryptoKeyVersionsRestoreCall) Do(opts ...googleapi.CallOption) (*CryptoKeyVersion, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &CryptoKeyVersion{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Restore a CryptoKeyVersion in the\nDESTROY_SCHEDULED,\nstate.\n\nUpon restoration of the CryptoKeyVersion, state\nwill be set to DISABLED,\nand destroy_time will be cleared.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:restore",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "name"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "name": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the CryptoKeyVersion to restore.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/locations/[^/]+/keyRings/[^/]+/cryptoKeys/[^/]+/cryptoKeyVersions/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v1/{+name}:restore",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "RestoreCryptoKeyVersionRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "CryptoKeyVersion"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
