0000000000000000000000000000000000000000;;	// Package logging provides access to the Stackdriver Logging API.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// See https://cloud.google.com/logging/docs/
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Usage example:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//   import "google.golang.org/api/logging/v2beta1"
0000000000000000000000000000000000000000;;	//   ...
0000000000000000000000000000000000000000;;	//   loggingService, err := logging.New(oauthHttpClient)
0000000000000000000000000000000000000000;;	package logging
b1237a81fb1dc98457c7ff57ce4223d896a9c131;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		context "golang.org/x/net/context"
0000000000000000000000000000000000000000;;		ctxhttp "golang.org/x/net/context/ctxhttp"
0000000000000000000000000000000000000000;;		gensupport "google.golang.org/api/gensupport"
0000000000000000000000000000000000000000;;		googleapi "google.golang.org/api/googleapi"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Always reference these packages, just in case the auto-generated code
0000000000000000000000000000000000000000;;	// below doesn't.
0000000000000000000000000000000000000000;;	var _ = bytes.NewBuffer
0000000000000000000000000000000000000000;;	var _ = strconv.Itoa
0000000000000000000000000000000000000000;;	var _ = fmt.Sprintf
0000000000000000000000000000000000000000;;	var _ = json.NewDecoder
0000000000000000000000000000000000000000;;	var _ = io.Copy
0000000000000000000000000000000000000000;;	var _ = url.Parse
0000000000000000000000000000000000000000;;	var _ = gensupport.MarshalJSON
0000000000000000000000000000000000000000;;	var _ = googleapi.Version
0000000000000000000000000000000000000000;;	var _ = errors.New
0000000000000000000000000000000000000000;;	var _ = strings.Replace
0000000000000000000000000000000000000000;;	var _ = context.Canceled
0000000000000000000000000000000000000000;;	var _ = ctxhttp.Do
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const apiId = "logging:v2beta1"
0000000000000000000000000000000000000000;;	const apiName = "logging"
0000000000000000000000000000000000000000;;	const apiVersion = "v2beta1"
0000000000000000000000000000000000000000;;	const basePath = "https://logging.googleapis.com/"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// OAuth2 scopes used by this API.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// View and manage your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformScope = "https://www.googleapis.com/auth/cloud-platform"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View your data across Google Cloud Platform services
0000000000000000000000000000000000000000;;		CloudPlatformReadOnlyScope = "https://www.googleapis.com/auth/cloud-platform.read-only"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Administrate log data for your projects
0000000000000000000000000000000000000000;;		LoggingAdminScope = "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// View log data for your projects
0000000000000000000000000000000000000000;;		LoggingReadScope = "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Submit log data for your projects
0000000000000000000000000000000000000000;;		LoggingWriteScope = "https://www.googleapis.com/auth/logging.write"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func New(client *http.Client) (*Service, error) {
0000000000000000000000000000000000000000;;		if client == nil {
0000000000000000000000000000000000000000;;			return nil, errors.New("client is nil")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s := &Service{client: client, BasePath: basePath}
0000000000000000000000000000000000000000;;		s.BillingAccounts = NewBillingAccountsService(s)
0000000000000000000000000000000000000000;;		s.Entries = NewEntriesService(s)
0000000000000000000000000000000000000000;;		s.MonitoredResourceDescriptors = NewMonitoredResourceDescriptorsService(s)
0000000000000000000000000000000000000000;;		s.Organizations = NewOrganizationsService(s)
0000000000000000000000000000000000000000;;		s.Projects = NewProjectsService(s)
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Service struct {
0000000000000000000000000000000000000000;;		client    *http.Client
0000000000000000000000000000000000000000;;		BasePath  string // API endpoint base URL
0000000000000000000000000000000000000000;;		UserAgent string // optional additional User-Agent fragment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BillingAccounts *BillingAccountsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Entries *EntriesService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MonitoredResourceDescriptors *MonitoredResourceDescriptorsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Organizations *OrganizationsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Projects *ProjectsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *Service) userAgent() string {
0000000000000000000000000000000000000000;;		if s.UserAgent == "" {
0000000000000000000000000000000000000000;;			return googleapi.UserAgent
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return googleapi.UserAgent + " " + s.UserAgent
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBillingAccountsService(s *Service) *BillingAccountsService {
0000000000000000000000000000000000000000;;		rs := &BillingAccountsService{s: s}
0000000000000000000000000000000000000000;;		rs.Logs = NewBillingAccountsLogsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BillingAccountsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Logs *BillingAccountsLogsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewBillingAccountsLogsService(s *Service) *BillingAccountsLogsService {
0000000000000000000000000000000000000000;;		rs := &BillingAccountsLogsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BillingAccountsLogsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewEntriesService(s *Service) *EntriesService {
0000000000000000000000000000000000000000;;		rs := &EntriesService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntriesService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewMonitoredResourceDescriptorsService(s *Service) *MonitoredResourceDescriptorsService {
0000000000000000000000000000000000000000;;		rs := &MonitoredResourceDescriptorsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MonitoredResourceDescriptorsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOrganizationsService(s *Service) *OrganizationsService {
0000000000000000000000000000000000000000;;		rs := &OrganizationsService{s: s}
0000000000000000000000000000000000000000;;		rs.Logs = NewOrganizationsLogsService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OrganizationsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Logs *OrganizationsLogsService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOrganizationsLogsService(s *Service) *OrganizationsLogsService {
0000000000000000000000000000000000000000;;		rs := &OrganizationsLogsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OrganizationsLogsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsService(s *Service) *ProjectsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsService{s: s}
0000000000000000000000000000000000000000;;		rs.Logs = NewProjectsLogsService(s)
0000000000000000000000000000000000000000;;		rs.Metrics = NewProjectsMetricsService(s)
0000000000000000000000000000000000000000;;		rs.Sinks = NewProjectsSinksService(s)
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Logs *ProjectsLogsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Metrics *ProjectsMetricsService
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Sinks *ProjectsSinksService
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsLogsService(s *Service) *ProjectsLogsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsLogsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLogsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsMetricsService(s *Service) *ProjectsMetricsService {
0000000000000000000000000000000000000000;;		rs := &ProjectsMetricsService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProjectsSinksService(s *Service) *ProjectsSinksService {
0000000000000000000000000000000000000000;;		rs := &ProjectsSinksService{s: s}
0000000000000000000000000000000000000000;;		return rs
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksService struct {
0000000000000000000000000000000000000000;;		s *Service
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty: A generic empty message that you can re-use to avoid defining
0000000000000000000000000000000000000000;;	// duplicated empty messages in your APIs. A typical example is to use
0000000000000000000000000000000000000000;;	// it as the request or the response type of an API method. For
0000000000000000000000000000000000000000;;	// instance:
0000000000000000000000000000000000000000;;	// service Foo {
0000000000000000000000000000000000000000;;	//   rpc Bar(google.protobuf.Empty) returns
0000000000000000000000000000000000000000;;	// (google.protobuf.Empty);
0000000000000000000000000000000000000000;;	// }
0000000000000000000000000000000000000000;;	// The JSON representation for Empty is empty JSON object {}.
0000000000000000000000000000000000000000;;	type Empty struct {
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpRequest: A common proto for logging HTTP requests. Only contains
0000000000000000000000000000000000000000;;	// semantics defined by the HTTP specification. Product-specific logging
0000000000000000000000000000000000000000;;	// information MUST be defined in a separate message.
0000000000000000000000000000000000000000;;	type HttpRequest struct {
0000000000000000000000000000000000000000;;		// CacheFillBytes: The number of HTTP response bytes inserted into
0000000000000000000000000000000000000000;;		// cache. Set only when a cache fill was attempted.
0000000000000000000000000000000000000000;;		CacheFillBytes int64 `json:"cacheFillBytes,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CacheHit: Whether or not an entity was served from cache (with or
0000000000000000000000000000000000000000;;		// without validation).
0000000000000000000000000000000000000000;;		CacheHit bool `json:"cacheHit,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CacheLookup: Whether or not a cache lookup was attempted.
0000000000000000000000000000000000000000;;		CacheLookup bool `json:"cacheLookup,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// CacheValidatedWithOriginServer: Whether or not the response was
0000000000000000000000000000000000000000;;		// validated with the origin server before being served from cache. This
0000000000000000000000000000000000000000;;		// field is only meaningful if cache_hit is True.
0000000000000000000000000000000000000000;;		CacheValidatedWithOriginServer bool `json:"cacheValidatedWithOriginServer,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Latency: The request processing latency on the server, from the time
0000000000000000000000000000000000000000;;		// the request was received until the response was sent.
0000000000000000000000000000000000000000;;		Latency string `json:"latency,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Referer: The referer URL of the request, as defined in HTTP/1.1
0000000000000000000000000000000000000000;;		// Header Field Definitions
0000000000000000000000000000000000000000;;		// (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
0000000000000000000000000000000000000000;;		Referer string `json:"referer,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RemoteIp: The IP address (IPv4 or IPv6) of the client that issued the
0000000000000000000000000000000000000000;;		// HTTP request. Examples: "192.168.1.1", "FE80::0202:B3FF:FE1E:8329".
0000000000000000000000000000000000000000;;		RemoteIp string `json:"remoteIp,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RequestMethod: The request method. Examples: "GET", "HEAD", "PUT",
0000000000000000000000000000000000000000;;		// "POST".
0000000000000000000000000000000000000000;;		RequestMethod string `json:"requestMethod,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RequestSize: The size of the HTTP request message in bytes, including
0000000000000000000000000000000000000000;;		// the request headers and the request body.
0000000000000000000000000000000000000000;;		RequestSize int64 `json:"requestSize,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RequestUrl: The scheme (http, https), the host name, the path and the
0000000000000000000000000000000000000000;;		// query portion of the URL that was requested. Example:
0000000000000000000000000000000000000000;;		// "http://example.com/some/info?color=red".
0000000000000000000000000000000000000000;;		RequestUrl string `json:"requestUrl,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResponseSize: The size of the HTTP response message sent back to the
0000000000000000000000000000000000000000;;		// client, in bytes, including the response headers and the response
0000000000000000000000000000000000000000;;		// body.
0000000000000000000000000000000000000000;;		ResponseSize int64 `json:"responseSize,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerIp: The IP address (IPv4 or IPv6) of the origin server that the
0000000000000000000000000000000000000000;;		// request was sent to.
0000000000000000000000000000000000000000;;		ServerIp string `json:"serverIp,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: The response code indicating the status of response.
0000000000000000000000000000000000000000;;		// Examples: 200, 404.
0000000000000000000000000000000000000000;;		Status int64 `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserAgent: The user agent sent by the client. Example: "Mozilla/4.0
0000000000000000000000000000000000000000;;		// (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)".
0000000000000000000000000000000000000000;;		UserAgent string `json:"userAgent,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "CacheFillBytes") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "CacheFillBytes") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *HttpRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod HttpRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LabelDescriptor: A description of a label.
0000000000000000000000000000000000000000;;	type LabelDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: A human-readable description for the label.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Key: The label key.
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ValueType: The type of data that can be assigned to the label.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "STRING" - A variable-length string. This is the default.
0000000000000000000000000000000000000000;;		//   "BOOL" - Boolean; true or false.
0000000000000000000000000000000000000000;;		//   "INT64" - A 64-bit signed integer.
0000000000000000000000000000000000000000;;		ValueType string `json:"valueType,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LabelDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LabelDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLogEntriesRequest: The parameters to ListLogEntries.
0000000000000000000000000000000000000000;;	type ListLogEntriesRequest struct {
0000000000000000000000000000000000000000;;		// Filter: Optional. A filter that chooses which log entries to return.
0000000000000000000000000000000000000000;;		// See Advanced Logs Filters. Only log entries that match the filter are
0000000000000000000000000000000000000000;;		// returned. An empty filter matches all log entries in the resources
0000000000000000000000000000000000000000;;		// listed in resource_names. Referencing a parent resource that is not
0000000000000000000000000000000000000000;;		// listed in resource_names will cause the filter to return no results.
0000000000000000000000000000000000000000;;		// The maximum length of the filter is 20000 characters.
0000000000000000000000000000000000000000;;		Filter string `json:"filter,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OrderBy: Optional. How the results should be sorted. Presently, the
0000000000000000000000000000000000000000;;		// only permitted values are "timestamp asc" (default) and "timestamp
0000000000000000000000000000000000000000;;		// desc". The first option returns entries in order of increasing values
0000000000000000000000000000000000000000;;		// of LogEntry.timestamp (oldest first), and the second option returns
0000000000000000000000000000000000000000;;		// entries in order of decreasing timestamps (newest first). Entries
0000000000000000000000000000000000000000;;		// with equal timestamps are returned in order of their insert_id
0000000000000000000000000000000000000000;;		// values.
0000000000000000000000000000000000000000;;		OrderBy string `json:"orderBy,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PageSize: Optional. The maximum number of results to return from this
0000000000000000000000000000000000000000;;		// request. Non-positive values are ignored. The presence of
0000000000000000000000000000000000000000;;		// next_page_token in the response indicates that more results might be
0000000000000000000000000000000000000000;;		// available.
0000000000000000000000000000000000000000;;		PageSize int64 `json:"pageSize,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PageToken: Optional. If present, then retrieve the next batch of
0000000000000000000000000000000000000000;;		// results from the preceding call to this method. page_token must be
0000000000000000000000000000000000000000;;		// the value of next_page_token from the previous response. The values
0000000000000000000000000000000000000000;;		// of other method parameters should be identical to those in the
0000000000000000000000000000000000000000;;		// previous call.
0000000000000000000000000000000000000000;;		PageToken string `json:"pageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ProjectIds: Deprecated. Use resource_names instead. One or more
0000000000000000000000000000000000000000;;		// project identifiers or project numbers from which to retrieve log
0000000000000000000000000000000000000000;;		// entries. Example: "my-project-1A". If present, these project
0000000000000000000000000000000000000000;;		// identifiers are converted to resource name format and added to the
0000000000000000000000000000000000000000;;		// list of resources in resource_names.
0000000000000000000000000000000000000000;;		ProjectIds []string `json:"projectIds,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceNames: Required. Names of one or more parent resources from
0000000000000000000000000000000000000000;;		// which to retrieve log
0000000000000000000000000000000000000000;;		// entries:
0000000000000000000000000000000000000000;;		// "projects/[PROJECT_ID]"
0000000000000000000000000000000000000000;;		// "organizations/[ORGANIZATION_ID]"
0000000000000000000000000000000000000000;;		// "bi
0000000000000000000000000000000000000000;;		// llingAccounts/[BILLING_ACCOUNT_ID]"
0000000000000000000000000000000000000000;;		// "folders/[FOLDER_ID]"
0000000000000000000000000000000000000000;;		// Projects listed in the project_ids field are added to this list.
0000000000000000000000000000000000000000;;		ResourceNames []string `json:"resourceNames,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Filter") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Filter") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListLogEntriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListLogEntriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLogEntriesResponse: Result returned from ListLogEntries.
0000000000000000000000000000000000000000;;	type ListLogEntriesResponse struct {
0000000000000000000000000000000000000000;;		// Entries: A list of log entries.
0000000000000000000000000000000000000000;;		Entries []*LogEntry `json:"entries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there might be more results than those appearing in
0000000000000000000000000000000000000000;;		// this response, then nextPageToken is included. To get the next set of
0000000000000000000000000000000000000000;;		// results, call this method again using the value of nextPageToken as
0000000000000000000000000000000000000000;;		// pageToken.If a value for next_page_token appears and the entries
0000000000000000000000000000000000000000;;		// field is empty, it means that the search found no log entries so far
0000000000000000000000000000000000000000;;		// but it did not have time to search all the possible log entries.
0000000000000000000000000000000000000000;;		// Retry the method with this value for page_token to continue the
0000000000000000000000000000000000000000;;		// search. Alternatively, consider speeding up the search by changing
0000000000000000000000000000000000000000;;		// your filter to specify a single log name or resource type, or to
0000000000000000000000000000000000000000;;		// narrow the time range of the search.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Entries") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Entries") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListLogEntriesResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListLogEntriesResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLogMetricsResponse: Result returned from ListLogMetrics.
0000000000000000000000000000000000000000;;	type ListLogMetricsResponse struct {
0000000000000000000000000000000000000000;;		// Metrics: A list of logs-based metrics.
0000000000000000000000000000000000000000;;		Metrics []*LogMetric `json:"metrics,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there might be more results than appear in this
0000000000000000000000000000000000000000;;		// response, then nextPageToken is included. To get the next set of
0000000000000000000000000000000000000000;;		// results, call this method again using the value of nextPageToken as
0000000000000000000000000000000000000000;;		// pageToken.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Metrics") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Metrics") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListLogMetricsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListLogMetricsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListLogsResponse: Result returned from ListLogs.
0000000000000000000000000000000000000000;;	type ListLogsResponse struct {
0000000000000000000000000000000000000000;;		// LogNames: A list of log names. For example,
0000000000000000000000000000000000000000;;		// "projects/my-project/syslog" or
0000000000000000000000000000000000000000;;		// "organizations/123/cloudresourcemanager.googleapis.com%2Factivity".
0000000000000000000000000000000000000000;;		LogNames []string `json:"logNames,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NextPageToken: If there might be more results than those appearing in
0000000000000000000000000000000000000000;;		// this response, then nextPageToken is included. To get the next set of
0000000000000000000000000000000000000000;;		// results, call this method again using the value of nextPageToken as
0000000000000000000000000000000000000000;;		// pageToken.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "LogNames") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "LogNames") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListLogsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListLogsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListMonitoredResourceDescriptorsResponse: Result returned from
0000000000000000000000000000000000000000;;	// ListMonitoredResourceDescriptors.
0000000000000000000000000000000000000000;;	type ListMonitoredResourceDescriptorsResponse struct {
0000000000000000000000000000000000000000;;		// NextPageToken: If there might be more results than those appearing in
0000000000000000000000000000000000000000;;		// this response, then nextPageToken is included. To get the next set of
0000000000000000000000000000000000000000;;		// results, call this method again using the value of nextPageToken as
0000000000000000000000000000000000000000;;		// pageToken.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResourceDescriptors: A list of resource descriptors.
0000000000000000000000000000000000000000;;		ResourceDescriptors []*MonitoredResourceDescriptor `json:"resourceDescriptors,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NextPageToken") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NextPageToken") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListMonitoredResourceDescriptorsResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListMonitoredResourceDescriptorsResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ListSinksResponse: Result returned from ListSinks.
0000000000000000000000000000000000000000;;	type ListSinksResponse struct {
0000000000000000000000000000000000000000;;		// NextPageToken: If there might be more results than appear in this
0000000000000000000000000000000000000000;;		// response, then nextPageToken is included. To get the next set of
0000000000000000000000000000000000000000;;		// results, call the same method again using the value of nextPageToken
0000000000000000000000000000000000000000;;		// as pageToken.
0000000000000000000000000000000000000000;;		NextPageToken string `json:"nextPageToken,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Sinks: A list of sinks.
0000000000000000000000000000000000000000;;		Sinks []*LogSink `json:"sinks,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "NextPageToken") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "NextPageToken") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *ListSinksResponse) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod ListSinksResponse
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogEntry: An individual entry in a log.
0000000000000000000000000000000000000000;;	type LogEntry struct {
0000000000000000000000000000000000000000;;		// HttpRequest: Optional. Information about the HTTP request associated
0000000000000000000000000000000000000000;;		// with this log entry, if applicable.
0000000000000000000000000000000000000000;;		HttpRequest *HttpRequest `json:"httpRequest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InsertId: Optional. A unique identifier for the log entry. If you
0000000000000000000000000000000000000000;;		// provide a value, then Stackdriver Logging considers other log entries
0000000000000000000000000000000000000000;;		// in the same project, with the same timestamp, and with the same
0000000000000000000000000000000000000000;;		// insert_id to be duplicates which can be removed. If omitted in new
0000000000000000000000000000000000000000;;		// log entries, then Stackdriver Logging will insert its own unique
0000000000000000000000000000000000000000;;		// identifier. The insert_id is used to order log entries that have the
0000000000000000000000000000000000000000;;		// same timestamp value.
0000000000000000000000000000000000000000;;		InsertId string `json:"insertId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// JsonPayload: The log entry payload, represented as a structure that
0000000000000000000000000000000000000000;;		// is expressed as a JSON object.
0000000000000000000000000000000000000000;;		JsonPayload googleapi.RawMessage `json:"jsonPayload,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: Optional. A set of user-defined (key, value) data that
0000000000000000000000000000000000000000;;		// provides additional information about the log entry.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogName: Required. The resource name of the log to which this log
0000000000000000000000000000000000000000;;		// entry
0000000000000000000000000000000000000000;;		// belongs:
0000000000000000000000000000000000000000;;		// "projects/[PROJECT_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// "organizations/[ORGANIZ
0000000000000000000000000000000000000000;;		// ATION_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[L
0000000000000000000000000000000000000000;;		// OG_ID]"
0000000000000000000000000000000000000000;;		// "folders/[FOLDER_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// [LOG_ID] must be URL-encoded within log_name. Example:
0000000000000000000000000000000000000000;;		// "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Fa
0000000000000000000000000000000000000000;;		// ctivity". [LOG_ID] must be less than 512 characters long and can only
0000000000000000000000000000000000000000;;		// include the following characters: upper and lower case alphanumeric
0000000000000000000000000000000000000000;;		// characters, forward-slash, underscore, hyphen, and period.For
0000000000000000000000000000000000000000;;		// backward compatibility, if log_name begins with a forward-slash, such
0000000000000000000000000000000000000000;;		// as /projects/..., then the log entry is ingested as usual but the
0000000000000000000000000000000000000000;;		// forward-slash is removed. Listing the log entry will not show the
0000000000000000000000000000000000000000;;		// leading slash and filtering for a log name with a leading slash will
0000000000000000000000000000000000000000;;		// never return any results.
0000000000000000000000000000000000000000;;		LogName string `json:"logName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Operation: Optional. Information about an operation associated with
0000000000000000000000000000000000000000;;		// the log entry, if applicable.
0000000000000000000000000000000000000000;;		Operation *LogEntryOperation `json:"operation,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ProtoPayload: The log entry payload, represented as a protocol
0000000000000000000000000000000000000000;;		// buffer. Some Google Cloud Platform services use this field for their
0000000000000000000000000000000000000000;;		// log entry payloads.
0000000000000000000000000000000000000000;;		ProtoPayload googleapi.RawMessage `json:"protoPayload,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource: Required. The monitored resource associated with this log
0000000000000000000000000000000000000000;;		// entry. Example: a log entry that reports a database error would be
0000000000000000000000000000000000000000;;		// associated with the monitored resource designating the particular
0000000000000000000000000000000000000000;;		// database that reported the error.
0000000000000000000000000000000000000000;;		Resource *MonitoredResource `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Severity: Optional. The severity of the log entry. The default value
0000000000000000000000000000000000000000;;		// is LogSeverity.DEFAULT.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "DEFAULT" - (0) The log entry has no assigned severity level.
0000000000000000000000000000000000000000;;		//   "DEBUG" - (100) Debug or trace information.
0000000000000000000000000000000000000000;;		//   "INFO" - (200) Routine information, such as ongoing status or
0000000000000000000000000000000000000000;;		// performance.
0000000000000000000000000000000000000000;;		//   "NOTICE" - (300) Normal but significant events, such as start up,
0000000000000000000000000000000000000000;;		// shut down, or a configuration change.
0000000000000000000000000000000000000000;;		//   "WARNING" - (400) Warning events might cause problems.
0000000000000000000000000000000000000000;;		//   "ERROR" - (500) Error events are likely to cause problems.
0000000000000000000000000000000000000000;;		//   "CRITICAL" - (600) Critical events cause more severe problems or
0000000000000000000000000000000000000000;;		// outages.
0000000000000000000000000000000000000000;;		//   "ALERT" - (700) A person must take an action immediately.
0000000000000000000000000000000000000000;;		//   "EMERGENCY" - (800) One or more systems are unusable.
0000000000000000000000000000000000000000;;		Severity string `json:"severity,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SourceLocation: Optional. Source code location information associated
0000000000000000000000000000000000000000;;		// with the log entry, if any.
0000000000000000000000000000000000000000;;		SourceLocation *LogEntrySourceLocation `json:"sourceLocation,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TextPayload: The log entry payload, represented as a Unicode string
0000000000000000000000000000000000000000;;		// (UTF-8).
0000000000000000000000000000000000000000;;		TextPayload string `json:"textPayload,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Timestamp: Optional. The time the event described by the log entry
0000000000000000000000000000000000000000;;		// occurred. If omitted in a new log entry, Stackdriver Logging will
0000000000000000000000000000000000000000;;		// insert the time the log entry is received. Stackdriver Logging might
0000000000000000000000000000000000000000;;		// reject log entries whose time stamps are more than a couple of hours
0000000000000000000000000000000000000000;;		// in the future. Log entries with time stamps in the past are accepted.
0000000000000000000000000000000000000000;;		Timestamp string `json:"timestamp,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Trace: Optional. Resource name of the trace associated with the log
0000000000000000000000000000000000000000;;		// entry, if any. If it contains a relative resource name, the name is
0000000000000000000000000000000000000000;;		// assumed to be relative to //tracing.googleapis.com. Example:
0000000000000000000000000000000000000000;;		// projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824
0000000000000000000000000000000000000000;;		Trace string `json:"trace,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "HttpRequest") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "HttpRequest") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogEntry) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogEntry
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogEntryOperation: Additional information about a potentially
0000000000000000000000000000000000000000;;	// long-running operation with which a log entry is associated.
0000000000000000000000000000000000000000;;	type LogEntryOperation struct {
0000000000000000000000000000000000000000;;		// First: Optional. Set this to True if this is the first log entry in
0000000000000000000000000000000000000000;;		// the operation.
0000000000000000000000000000000000000000;;		First bool `json:"first,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Id: Optional. An arbitrary operation identifier. Log entries with the
0000000000000000000000000000000000000000;;		// same identifier are assumed to be part of the same operation.
0000000000000000000000000000000000000000;;		Id string `json:"id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Last: Optional. Set this to True if this is the last log entry in the
0000000000000000000000000000000000000000;;		// operation.
0000000000000000000000000000000000000000;;		Last bool `json:"last,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Producer: Optional. An arbitrary producer identifier. The combination
0000000000000000000000000000000000000000;;		// of id and producer must be globally unique. Examples for producer:
0000000000000000000000000000000000000000;;		// "MyDivision.MyBigCompany.com", "github.com/MyProject/MyApplication".
0000000000000000000000000000000000000000;;		Producer string `json:"producer,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "First") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "First") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogEntryOperation) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogEntryOperation
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogEntrySourceLocation: Additional information about the source code
0000000000000000000000000000000000000000;;	// location that produced the log entry.
0000000000000000000000000000000000000000;;	type LogEntrySourceLocation struct {
0000000000000000000000000000000000000000;;		// File: Optional. Source file name. Depending on the runtime
0000000000000000000000000000000000000000;;		// environment, this might be a simple name or a fully-qualified name.
0000000000000000000000000000000000000000;;		File string `json:"file,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Function: Optional. Human-readable name of the function or method
0000000000000000000000000000000000000000;;		// being invoked, with optional context such as the class or package
0000000000000000000000000000000000000000;;		// name. This information may be used in contexts such as the logs
0000000000000000000000000000000000000000;;		// viewer, where a file and line number are less meaningful. The format
0000000000000000000000000000000000000000;;		// can vary by language. For example: qual.if.ied.Class.method (Java),
0000000000000000000000000000000000000000;;		// dir/package.func (Go), function (Python).
0000000000000000000000000000000000000000;;		Function string `json:"function,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Line: Optional. Line within the source file. 1-based; 0 indicates no
0000000000000000000000000000000000000000;;		// line number available.
0000000000000000000000000000000000000000;;		Line int64 `json:"line,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "File") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "File") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogEntrySourceLocation) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogEntrySourceLocation
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogLine: Application log line emitted while processing a request.
0000000000000000000000000000000000000000;;	type LogLine struct {
0000000000000000000000000000000000000000;;		// LogMessage: App-provided log message.
0000000000000000000000000000000000000000;;		LogMessage string `json:"logMessage,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Severity: Severity of this log entry.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "DEFAULT" - (0) The log entry has no assigned severity level.
0000000000000000000000000000000000000000;;		//   "DEBUG" - (100) Debug or trace information.
0000000000000000000000000000000000000000;;		//   "INFO" - (200) Routine information, such as ongoing status or
0000000000000000000000000000000000000000;;		// performance.
0000000000000000000000000000000000000000;;		//   "NOTICE" - (300) Normal but significant events, such as start up,
0000000000000000000000000000000000000000;;		// shut down, or a configuration change.
0000000000000000000000000000000000000000;;		//   "WARNING" - (400) Warning events might cause problems.
0000000000000000000000000000000000000000;;		//   "ERROR" - (500) Error events are likely to cause problems.
0000000000000000000000000000000000000000;;		//   "CRITICAL" - (600) Critical events cause more severe problems or
0000000000000000000000000000000000000000;;		// outages.
0000000000000000000000000000000000000000;;		//   "ALERT" - (700) A person must take an action immediately.
0000000000000000000000000000000000000000;;		//   "EMERGENCY" - (800) One or more systems are unusable.
0000000000000000000000000000000000000000;;		Severity string `json:"severity,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SourceLocation: Where in the source code this log message was
0000000000000000000000000000000000000000;;		// written.
0000000000000000000000000000000000000000;;		SourceLocation *SourceLocation `json:"sourceLocation,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Time: Approximate time when this log entry was made.
0000000000000000000000000000000000000000;;		Time string `json:"time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "LogMessage") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "LogMessage") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogLine) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogLine
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogMetric: Describes a logs-based metric. The value of the metric is
0000000000000000000000000000000000000000;;	// the number of log entries that match a logs filter in a given time
0000000000000000000000000000000000000000;;	// interval.
0000000000000000000000000000000000000000;;	type LogMetric struct {
0000000000000000000000000000000000000000;;		// Description: Optional. A description of this metric, which is used in
0000000000000000000000000000000000000000;;		// documentation.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filter: Required. An advanced logs filter which is used to match log
0000000000000000000000000000000000000000;;		// entries. Example:
0000000000000000000000000000000000000000;;		// "resource.type=gae_app AND severity>=ERROR"
0000000000000000000000000000000000000000;;		// The maximum length of the filter is 20000 characters.
0000000000000000000000000000000000000000;;		Filter string `json:"filter,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Required. The client-assigned metric identifier. Examples:
0000000000000000000000000000000000000000;;		// "error_count", "nginx/requests".Metric identifiers are limited to 100
0000000000000000000000000000000000000000;;		// characters and can include only the following characters: A-Z, a-z,
0000000000000000000000000000000000000000;;		// 0-9, and the special characters _-.,+!*',()%/. The forward-slash
0000000000000000000000000000000000000000;;		// character (/) denotes a hierarchy of name pieces, and it cannot be
0000000000000000000000000000000000000000;;		// the first character of the name.The metric identifier in this field
0000000000000000000000000000000000000000;;		// must not be URL-encoded
0000000000000000000000000000000000000000;;		// (https://en.wikipedia.org/wiki/Percent-encoding). However, when the
0000000000000000000000000000000000000000;;		// metric identifier appears as the [METRIC_ID] part of a metric_name
0000000000000000000000000000000000000000;;		// API parameter, then the metric identifier must be URL-encoded.
0000000000000000000000000000000000000000;;		// Example: "projects/my-project/metrics/nginx%2Frequests".
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Version: Output only. The API version that created or updated this
0000000000000000000000000000000000000000;;		// metric. The version also dictates the syntax of the filter
0000000000000000000000000000000000000000;;		// expression. When a value for this field is missing, the default value
0000000000000000000000000000000000000000;;		// of V2 should be assumed.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "V2" - Stackdriver Logging API v2.
0000000000000000000000000000000000000000;;		//   "V1" - Stackdriver Logging API v1.
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogMetric) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogMetric
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LogSink: Describes a sink used to export log entries to one of the
0000000000000000000000000000000000000000;;	// following destinations in any project: a Cloud Storage bucket, a
0000000000000000000000000000000000000000;;	// BigQuery dataset, or a Cloud Pub/Sub topic. A logs filter controls
0000000000000000000000000000000000000000;;	// which log entries are exported. The sink must be created within a
0000000000000000000000000000000000000000;;	// project, organization, billing account, or folder.
0000000000000000000000000000000000000000;;	type LogSink struct {
0000000000000000000000000000000000000000;;		// Destination: Required. The export
0000000000000000000000000000000000000000;;		// destination:
0000000000000000000000000000000000000000;;		// "storage.googleapis.com/[GCS_BUCKET]"
0000000000000000000000000000000000000000;;		// "bigquery.googleapi
0000000000000000000000000000000000000000;;		// s.com/projects/[PROJECT_ID]/datasets/[DATASET]"
0000000000000000000000000000000000000000;;		// "pubsub.googleapis.com
0000000000000000000000000000000000000000;;		// /projects/[PROJECT_ID]/topics/[TOPIC_ID]"
0000000000000000000000000000000000000000;;		// The sink's writer_identity, set when the sink is created, must have
0000000000000000000000000000000000000000;;		// permission to write to the destination or else the log entries are
0000000000000000000000000000000000000000;;		// not exported. For more information, see Exporting Logs With Sinks.
0000000000000000000000000000000000000000;;		Destination string `json:"destination,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EndTime: Optional. The time at which this sink will stop exporting
0000000000000000000000000000000000000000;;		// log entries. Log entries are exported only if their timestamp is
0000000000000000000000000000000000000000;;		// earlier than the end time. If this field is not supplied, there is no
0000000000000000000000000000000000000000;;		// end time. If both a start time and an end time are provided, then the
0000000000000000000000000000000000000000;;		// end time must be later than the start time.
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Filter: Optional. An advanced logs filter. The only exported log
0000000000000000000000000000000000000000;;		// entries are those that are in the resource owning the sink and that
0000000000000000000000000000000000000000;;		// match the filter. The filter must use the log entry format specified
0000000000000000000000000000000000000000;;		// by the output_version_format parameter. For example, in the v2
0000000000000000000000000000000000000000;;		// format:
0000000000000000000000000000000000000000;;		// logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND severity>=ERROR
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		Filter string `json:"filter,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// IncludeChildren: Optional. This field presently applies only to sinks
0000000000000000000000000000000000000000;;		// in organizations and folders. If true, then logs from children of
0000000000000000000000000000000000000000;;		// this entity will also be available to this sink for export. Whether
0000000000000000000000000000000000000000;;		// particular log entries from the children are exported depends on the
0000000000000000000000000000000000000000;;		// sink's filter expression. For example, if this sink is associated
0000000000000000000000000000000000000000;;		// with an organization, then logs from all projects in the organization
0000000000000000000000000000000000000000;;		// as well as from the organization itself will be available for export.
0000000000000000000000000000000000000000;;		IncludeChildren bool `json:"includeChildren,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Required. The client-assigned sink identifier, unique within
0000000000000000000000000000000000000000;;		// the project. Example: "my-syslog-errors-to-pubsub". Sink identifiers
0000000000000000000000000000000000000000;;		// are limited to 100 characters and can include only the following
0000000000000000000000000000000000000000;;		// characters: upper and lower-case alphanumeric characters,
0000000000000000000000000000000000000000;;		// underscores, hyphens, and periods.
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// OutputVersionFormat: Optional. The log entry format to use for this
0000000000000000000000000000000000000000;;		// sink's exported log entries. The v2 format is used by default. The v1
0000000000000000000000000000000000000000;;		// format is deprecated and should be used only as part of a migration
0000000000000000000000000000000000000000;;		// effort to v2. See Migration to the v2 API.
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// Possible values:
0000000000000000000000000000000000000000;;		//   "VERSION_FORMAT_UNSPECIFIED" - An unspecified format version that
0000000000000000000000000000000000000000;;		// will default to V2.
0000000000000000000000000000000000000000;;		//   "V2" - LogEntry version 2 format.
0000000000000000000000000000000000000000;;		//   "V1" - LogEntry version 1 format.
0000000000000000000000000000000000000000;;		OutputVersionFormat string `json:"outputVersionFormat,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartTime: Optional. The time at which this sink will begin exporting
0000000000000000000000000000000000000000;;		// log entries. Log entries are exported only if their timestamp is not
0000000000000000000000000000000000000000;;		// earlier than the start time. The default value of this field is the
0000000000000000000000000000000000000000;;		// time the sink is created or updated.
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// WriterIdentity: Output only. An IAM identity&mdash;a service account
0000000000000000000000000000000000000000;;		// or group&mdash;under which Stackdriver Logging writes the exported
0000000000000000000000000000000000000000;;		// log entries to the sink's destination. This field is set by
0000000000000000000000000000000000000000;;		// sinks.create and sinks.update, based on the setting of
0000000000000000000000000000000000000000;;		// unique_writer_identity in those methods.Until you grant this identity
0000000000000000000000000000000000000000;;		// write-access to the destination, log entry exports from this sink
0000000000000000000000000000000000000000;;		// will fail. For more information, see Granting access for a resource.
0000000000000000000000000000000000000000;;		// Consult the destination service's documentation to determine the
0000000000000000000000000000000000000000;;		// appropriate IAM roles to assign to the identity.
0000000000000000000000000000000000000000;;		WriterIdentity string `json:"writerIdentity,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Destination") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Destination") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *LogSink) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod LogSink
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitoredResource: An object representing a resource that can be used
0000000000000000000000000000000000000000;;	// for monitoring, logging, billing, or other purposes. Examples include
0000000000000000000000000000000000000000;;	// virtual machine instances, databases, and storage devices such as
0000000000000000000000000000000000000000;;	// disks. The type field identifies a MonitoredResourceDescriptor object
0000000000000000000000000000000000000000;;	// that describes the resource's schema. Information in the labels field
0000000000000000000000000000000000000000;;	// identifies the actual resource and its attributes according to the
0000000000000000000000000000000000000000;;	// schema. For example, a particular Compute Engine VM instance could be
0000000000000000000000000000000000000000;;	// represented by the following object, because the
0000000000000000000000000000000000000000;;	// MonitoredResourceDescriptor for "gce_instance" has labels
0000000000000000000000000000000000000000;;	// "instance_id" and "zone":
0000000000000000000000000000000000000000;;	// { "type": "gce_instance",
0000000000000000000000000000000000000000;;	//   "labels": { "instance_id": "12345678901234",
0000000000000000000000000000000000000000;;	//               "zone": "us-central1-a" }}
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	type MonitoredResource struct {
0000000000000000000000000000000000000000;;		// Labels: Required. Values for all of the labels listed in the
0000000000000000000000000000000000000000;;		// associated monitored resource descriptor. For example, Cloud SQL
0000000000000000000000000000000000000000;;		// databases use the labels "database_id" and "zone".
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: Required. The monitored resource type. This field must match
0000000000000000000000000000000000000000;;		// the type field of a MonitoredResourceDescriptor object. For example,
0000000000000000000000000000000000000000;;		// the type of a Cloud SQL database is "cloudsql_database".
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Labels") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Labels") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MonitoredResource) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MonitoredResource
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MonitoredResourceDescriptor: An object that describes the schema of a
0000000000000000000000000000000000000000;;	// MonitoredResource object using a type name and a set of labels. For
0000000000000000000000000000000000000000;;	// example, the monitored resource descriptor for Google Compute Engine
0000000000000000000000000000000000000000;;	// VM instances has a type of "gce_instance" and specifies the use of
0000000000000000000000000000000000000000;;	// the labels "instance_id" and "zone" to identify particular VM
0000000000000000000000000000000000000000;;	// instances.Different APIs can support different monitored resource
0000000000000000000000000000000000000000;;	// types. APIs generally provide a list method that returns the
0000000000000000000000000000000000000000;;	// monitored resource descriptors used by the API.
0000000000000000000000000000000000000000;;	type MonitoredResourceDescriptor struct {
0000000000000000000000000000000000000000;;		// Description: Optional. A detailed description of the monitored
0000000000000000000000000000000000000000;;		// resource type that might be used in documentation.
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// DisplayName: Optional. A concise name for the monitored resource type
0000000000000000000000000000000000000000;;		// that might be displayed in user interfaces. It should be a Title
0000000000000000000000000000000000000000;;		// Cased Noun Phrase, without any article or other determiners. For
0000000000000000000000000000000000000000;;		// example, "Google Cloud SQL Database".
0000000000000000000000000000000000000000;;		DisplayName string `json:"displayName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: Required. A set of labels used to describe instances of this
0000000000000000000000000000000000000000;;		// monitored resource type. For example, an individual Google Cloud SQL
0000000000000000000000000000000000000000;;		// database is identified by values for the labels "database_id" and
0000000000000000000000000000000000000000;;		// "zone".
0000000000000000000000000000000000000000;;		Labels []*LabelDescriptor `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Name: Optional. The resource name of the monitored resource
0000000000000000000000000000000000000000;;		// descriptor:
0000000000000000000000000000000000000000;;		// "projects/{project_id}/monitoredResourceDescriptors/{type}" where
0000000000000000000000000000000000000000;;		// {type} is the value of the type field in this object and {project_id}
0000000000000000000000000000000000000000;;		// is a project ID that provides API-specific context for accessing the
0000000000000000000000000000000000000000;;		// type. APIs that do not use project information can use the resource
0000000000000000000000000000000000000000;;		// name format "monitoredResourceDescriptors/{type}".
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Type: Required. The monitored resource type. For example, the type
0000000000000000000000000000000000000000;;		// "cloudsql_database" represents databases in Google Cloud SQL. The
0000000000000000000000000000000000000000;;		// maximum length of this value is 256 characters.
0000000000000000000000000000000000000000;;		Type string `json:"type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Description") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Description") to include
0000000000000000000000000000000000000000;;		// in API requests with the JSON null value. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any field with
0000000000000000000000000000000000000000;;		// an empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *MonitoredResourceDescriptor) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod MonitoredResourceDescriptor
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RequestLog: Complete log information about a single HTTP request to
0000000000000000000000000000000000000000;;	// an App Engine application.
0000000000000000000000000000000000000000;;	type RequestLog struct {
0000000000000000000000000000000000000000;;		// AppEngineRelease: App Engine release version.
0000000000000000000000000000000000000000;;		AppEngineRelease string `json:"appEngineRelease,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// AppId: Application that handled this request.
0000000000000000000000000000000000000000;;		AppId string `json:"appId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Cost: An indication of the relative cost of serving this request.
0000000000000000000000000000000000000000;;		Cost float64 `json:"cost,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// EndTime: Time when the request finished.
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Finished: Whether this request is finished or active.
0000000000000000000000000000000000000000;;		Finished bool `json:"finished,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// First: Whether this is the first RequestLog entry for this request.
0000000000000000000000000000000000000000;;		// If an active request has several RequestLog entries written to
0000000000000000000000000000000000000000;;		// Stackdriver Logging, then this field will be set for one of them.
0000000000000000000000000000000000000000;;		First bool `json:"first,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Host: Internet host and port number of the resource being requested.
0000000000000000000000000000000000000000;;		Host string `json:"host,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// HttpVersion: HTTP version of request. Example: "HTTP/1.1".
0000000000000000000000000000000000000000;;		HttpVersion string `json:"httpVersion,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceId: An identifier for the instance that handled the request.
0000000000000000000000000000000000000000;;		InstanceId string `json:"instanceId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// InstanceIndex: If the instance processing this request belongs to a
0000000000000000000000000000000000000000;;		// manually scaled module, then this is the 0-based index of the
0000000000000000000000000000000000000000;;		// instance. Otherwise, this value is -1.
0000000000000000000000000000000000000000;;		InstanceIndex int64 `json:"instanceIndex,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ip: Origin IP address.
0000000000000000000000000000000000000000;;		Ip string `json:"ip,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Latency: Latency of the request.
0000000000000000000000000000000000000000;;		Latency string `json:"latency,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Line: A list of log lines emitted by the application while serving
0000000000000000000000000000000000000000;;		// this request.
0000000000000000000000000000000000000000;;		Line []*LogLine `json:"line,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// MegaCycles: Number of CPU megacycles used to process request.
0000000000000000000000000000000000000000;;		MegaCycles int64 `json:"megaCycles,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Method: Request method. Example: "GET", "HEAD", "PUT", "POST",
0000000000000000000000000000000000000000;;		// "DELETE".
0000000000000000000000000000000000000000;;		Method string `json:"method,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ModuleId: Module of the application that handled this request.
0000000000000000000000000000000000000000;;		ModuleId string `json:"moduleId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Nickname: The logged-in user who made the request.Most likely, this
0000000000000000000000000000000000000000;;		// is the part of the user's email before the @ sign. The field value is
0000000000000000000000000000000000000000;;		// the same for different requests from the same user, but different
0000000000000000000000000000000000000000;;		// users can have similar names. This information is also available to
0000000000000000000000000000000000000000;;		// the application via the App Engine Users API.This field will be
0000000000000000000000000000000000000000;;		// populated starting with App Engine 1.9.21.
0000000000000000000000000000000000000000;;		Nickname string `json:"nickname,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PendingTime: Time this request spent in the pending request queue.
0000000000000000000000000000000000000000;;		PendingTime string `json:"pendingTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Referrer: Referrer URL of request.
0000000000000000000000000000000000000000;;		Referrer string `json:"referrer,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RequestId: Globally unique identifier for a request, which is based
0000000000000000000000000000000000000000;;		// on the request start time. Request IDs for requests which started
0000000000000000000000000000000000000000;;		// later will compare greater as strings than those for requests which
0000000000000000000000000000000000000000;;		// started earlier.
0000000000000000000000000000000000000000;;		RequestId string `json:"requestId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource: Contains the path and query portion of the URL that was
0000000000000000000000000000000000000000;;		// requested. For example, if the URL was
0000000000000000000000000000000000000000;;		// "http://example.com/app?name=val", the resource would be
0000000000000000000000000000000000000000;;		// "/app?name=val". The fragment identifier, which is identified by the
0000000000000000000000000000000000000000;;		// # character, is not included.
0000000000000000000000000000000000000000;;		Resource string `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ResponseSize: Size in bytes sent back to client by request.
0000000000000000000000000000000000000000;;		ResponseSize int64 `json:"responseSize,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// SourceReference: Source code for the application that handled this
0000000000000000000000000000000000000000;;		// request. There can be more than one source reference per deployed
0000000000000000000000000000000000000000;;		// application if source code is distributed among multiple
0000000000000000000000000000000000000000;;		// repositories.
0000000000000000000000000000000000000000;;		SourceReference []*SourceReference `json:"sourceReference,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// StartTime: Time when the request started.
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Status: HTTP response status code. Example: 200, 404.
0000000000000000000000000000000000000000;;		Status int64 `json:"status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TaskName: Task name of the request, in the case of an offline
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		TaskName string `json:"taskName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TaskQueueName: Queue name of the request, in the case of an offline
0000000000000000000000000000000000000000;;		// request.
0000000000000000000000000000000000000000;;		TaskQueueName string `json:"taskQueueName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// TraceId: Stackdriver Trace identifier for this request.
0000000000000000000000000000000000000000;;		TraceId string `json:"traceId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UrlMapEntry: File or class that handled the request.
0000000000000000000000000000000000000000;;		UrlMapEntry string `json:"urlMapEntry,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// UserAgent: User agent that made the request.
0000000000000000000000000000000000000000;;		UserAgent string `json:"userAgent,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// VersionId: Version of the application that handled this request.
0000000000000000000000000000000000000000;;		VersionId string `json:"versionId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// WasLoadingRequest: Whether this was a loading request for the
0000000000000000000000000000000000000000;;		// instance.
0000000000000000000000000000000000000000;;		WasLoadingRequest bool `json:"wasLoadingRequest,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "AppEngineRelease") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "AppEngineRelease") to
0000000000000000000000000000000000000000;;		// include in API requests with the JSON null value. By default, fields
0000000000000000000000000000000000000000;;		// with empty values are omitted from API requests. However, any field
0000000000000000000000000000000000000000;;		// with an empty value appearing in NullFields will be sent to the
0000000000000000000000000000000000000000;;		// server as null. It is an error if a field in this list has a
0000000000000000000000000000000000000000;;		// non-empty value. This may be used to include null fields in Patch
0000000000000000000000000000000000000000;;		// requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *RequestLog) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod RequestLog
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *RequestLog) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		type noMethod RequestLog
0000000000000000000000000000000000000000;;		var s1 struct {
0000000000000000000000000000000000000000;;			Cost gensupport.JSONFloat64 `json:"cost"`
0000000000000000000000000000000000000000;;			*noMethod
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s1.noMethod = (*noMethod)(s)
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s1); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		s.Cost = float64(s1.Cost)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourceLocation: Specifies a location in a source code file.
0000000000000000000000000000000000000000;;	type SourceLocation struct {
0000000000000000000000000000000000000000;;		// File: Source file name. Depending on the runtime environment, this
0000000000000000000000000000000000000000;;		// might be a simple name or a fully-qualified name.
0000000000000000000000000000000000000000;;		File string `json:"file,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// FunctionName: Human-readable name of the function or method being
0000000000000000000000000000000000000000;;		// invoked, with optional context such as the class or package name.
0000000000000000000000000000000000000000;;		// This information is used in contexts such as the logs viewer, where a
0000000000000000000000000000000000000000;;		// file and line number are less meaningful. The format can vary by
0000000000000000000000000000000000000000;;		// language. For example: qual.if.ied.Class.method (Java),
0000000000000000000000000000000000000000;;		// dir/package.func (Go), function (Python).
0000000000000000000000000000000000000000;;		FunctionName string `json:"functionName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Line: Line within the source file.
0000000000000000000000000000000000000000;;		Line int64 `json:"line,omitempty,string"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "File") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "File") to include in API
0000000000000000000000000000000000000000;;		// requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SourceLocation) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SourceLocation
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SourceReference: A reference to a particular snapshot of the source
0000000000000000000000000000000000000000;;	// tree used to build and deploy an application.
0000000000000000000000000000000000000000;;	type SourceReference struct {
0000000000000000000000000000000000000000;;		// Repository: Optional. A URI string identifying the repository.
0000000000000000000000000000000000000000;;		// Example: "https://github.com/GoogleCloudPlatform/kubernetes.git"
0000000000000000000000000000000000000000;;		Repository string `json:"repository,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// RevisionId: The canonical and persistent identifier of the deployed
0000000000000000000000000000000000000000;;		// revision. Example (git): "0035781c50ec7aa23385dc841529ce8a4b70db1b"
0000000000000000000000000000000000000000;;		RevisionId string `json:"revisionId,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Repository") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Repository") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *SourceReference) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod SourceReference
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteLogEntriesRequest: The parameters to WriteLogEntries.
0000000000000000000000000000000000000000;;	type WriteLogEntriesRequest struct {
0000000000000000000000000000000000000000;;		// Entries: Required. The log entries to write. Values supplied for the
0000000000000000000000000000000000000000;;		// fields log_name, resource, and labels in this entries.write request
0000000000000000000000000000000000000000;;		// are inserted into those log entries in this list that do not provide
0000000000000000000000000000000000000000;;		// their own values.Stackdriver Logging also creates and inserts values
0000000000000000000000000000000000000000;;		// for timestamp and insert_id if the entries do not provide them. The
0000000000000000000000000000000000000000;;		// created insert_id for the N'th entry in this list will be greater
0000000000000000000000000000000000000000;;		// than earlier entries and less than later entries. Otherwise, the
0000000000000000000000000000000000000000;;		// order of log entries in this list does not matter.To improve
0000000000000000000000000000000000000000;;		// throughput and to avoid exceeding the quota limit for calls to
0000000000000000000000000000000000000000;;		// entries.write, you should write multiple log entries at once rather
0000000000000000000000000000000000000000;;		// than calling this method for each individual log entry.
0000000000000000000000000000000000000000;;		Entries []*LogEntry `json:"entries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Labels: Optional. Default labels that are added to the labels field
0000000000000000000000000000000000000000;;		// of all log entries in entries. If a log entry already has a label
0000000000000000000000000000000000000000;;		// with the same key as a label in this parameter, then the log entry's
0000000000000000000000000000000000000000;;		// label is not changed. See LogEntry.
0000000000000000000000000000000000000000;;		Labels map[string]string `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// LogName: Optional. A default log resource name that is assigned to
0000000000000000000000000000000000000000;;		// all log entries in entries that do not specify a value for
0000000000000000000000000000000000000000;;		// log_name:
0000000000000000000000000000000000000000;;		// "projects/[PROJECT_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// "organizations/[ORGANI
0000000000000000000000000000000000000000;;		// ZATION_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[
0000000000000000000000000000000000000000;;		// LOG_ID]"
0000000000000000000000000000000000000000;;		// "folders/[FOLDER_ID]/logs/[LOG_ID]"
0000000000000000000000000000000000000000;;		// [LOG_ID] must be URL-encoded. For example,
0000000000000000000000000000000000000000;;		// "projects/my-project-id/logs/syslog" or
0000000000000000000000000000000000000000;;		// "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Fa
0000000000000000000000000000000000000000;;		// ctivity". For more information about log names, see LogEntry.
0000000000000000000000000000000000000000;;		LogName string `json:"logName,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// PartialSuccess: Optional. Whether valid entries should be written
0000000000000000000000000000000000000000;;		// even if some other entries fail due to INVALID_ARGUMENT or
0000000000000000000000000000000000000000;;		// PERMISSION_DENIED errors. If any entry is not written, then the
0000000000000000000000000000000000000000;;		// response status is the error associated with one of the failed
0000000000000000000000000000000000000000;;		// entries and the response includes error details keyed by the entries'
0000000000000000000000000000000000000000;;		// zero-based index in the entries.write method.
0000000000000000000000000000000000000000;;		PartialSuccess bool `json:"partialSuccess,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Resource: Optional. A default monitored resource object that is
0000000000000000000000000000000000000000;;		// assigned to all log entries in entries that do not specify a value
0000000000000000000000000000000000000000;;		// for resource. Example:
0000000000000000000000000000000000000000;;		// { "type": "gce_instance",
0000000000000000000000000000000000000000;;		//   "labels": {
0000000000000000000000000000000000000000;;		//     "zone": "us-central1-a", "instance_id": "00000000000000000000"
0000000000000000000000000000000000000000;;		// }}
0000000000000000000000000000000000000000;;		// See LogEntry.
0000000000000000000000000000000000000000;;		Resource *MonitoredResource `json:"resource,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// ForceSendFields is a list of field names (e.g. "Entries") to
0000000000000000000000000000000000000000;;		// unconditionally include in API requests. By default, fields with
0000000000000000000000000000000000000000;;		// empty values are omitted from API requests. However, any non-pointer,
0000000000000000000000000000000000000000;;		// non-interface field appearing in ForceSendFields will be sent to the
0000000000000000000000000000000000000000;;		// server regardless of whether the field is empty or not. This may be
0000000000000000000000000000000000000000;;		// used to include empty fields in Patch requests.
0000000000000000000000000000000000000000;;		ForceSendFields []string `json:"-"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// NullFields is a list of field names (e.g. "Entries") to include in
0000000000000000000000000000000000000000;;		// API requests with the JSON null value. By default, fields with empty
0000000000000000000000000000000000000000;;		// values are omitted from API requests. However, any field with an
0000000000000000000000000000000000000000;;		// empty value appearing in NullFields will be sent to the server as
0000000000000000000000000000000000000000;;		// null. It is an error if a field in this list has a non-empty value.
0000000000000000000000000000000000000000;;		// This may be used to include null fields in Patch requests.
0000000000000000000000000000000000000000;;		NullFields []string `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *WriteLogEntriesRequest) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		type noMethod WriteLogEntriesRequest
0000000000000000000000000000000000000000;;		raw := noMethod(*s)
0000000000000000000000000000000000000000;;		return gensupport.MarshalJSON(raw, s.ForceSendFields, s.NullFields)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// WriteLogEntriesResponse: Result returned from WriteLogEntries. empty
0000000000000000000000000000000000000000;;	type WriteLogEntriesResponse struct {
0000000000000000000000000000000000000000;;		// ServerResponse contains the HTTP response code and headers from the
0000000000000000000000000000000000000000;;		// server.
0000000000000000000000000000000000000000;;		googleapi.ServerResponse `json:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.billingAccounts.logs.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BillingAccountsLogsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		logName    string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes all the log entries in a log. The log reappears if it
0000000000000000000000000000000000000000;;	// receives new entries. Log entries written shortly before the delete
0000000000000000000000000000000000000000;;	// operation might not be deleted.
0000000000000000000000000000000000000000;;	func (r *BillingAccountsLogsService) Delete(logName string) *BillingAccountsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c := &BillingAccountsLogsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.logName = logName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsDeleteCall) Fields(s ...googleapi.Field) *BillingAccountsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsDeleteCall) Context(ctx context.Context) *BillingAccountsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+logName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"logName": c.logName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.billingAccounts.logs.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/billingAccounts/{billingAccountsId}/logs/{logsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "logging.billingAccounts.logs.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "logName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "logName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the log to delete:\n\"projects/[PROJECT_ID]/logs/[LOG_ID]\"\n\"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\"\n\"folders/[FOLDER_ID]/logs/[LOG_ID]\"\n[LOG_ID] must be URL-encoded. For example, \"projects/my-project-id/logs/syslog\", \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\". For more information about log names, see LogEntry.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^billingAccounts/[^/]+/logs/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+logName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.billingAccounts.logs.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BillingAccountsLogsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the logs in projects, organizations, folders, or billing
0000000000000000000000000000000000000000;;	// accounts. Only logs that have entries are listed.
0000000000000000000000000000000000000000;;	func (r *BillingAccountsLogsService) List(parent string) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c := &BillingAccountsLogsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) PageSize(pageSize int64) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) PageToken(pageToken string) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) Fields(s ...googleapi.Field) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) IfNoneMatch(entityTag string) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) Context(ctx context.Context) *BillingAccountsLogsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/logs")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.billingAccounts.logs.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLogsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLogsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) Do(opts ...googleapi.CallOption) (*ListLogsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLogsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/billingAccounts/{billingAccountsId}/logs",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.billingAccounts.logs.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name that owns the logs:\n\"projects/[PROJECT_ID]\"\n\"organizations/[ORGANIZATION_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]\"\n\"folders/[FOLDER_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^billingAccounts/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/logs",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *BillingAccountsLogsListCall) Pages(ctx context.Context, f func(*ListLogsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.entries.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntriesListCall struct {
0000000000000000000000000000000000000000;;		s                     *Service
0000000000000000000000000000000000000000;;		listlogentriesrequest *ListLogEntriesRequest
0000000000000000000000000000000000000000;;		urlParams_            gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                  context.Context
0000000000000000000000000000000000000000;;		header_               http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists log entries. Use this method to retrieve log entries from
0000000000000000000000000000000000000000;;	// Stackdriver Logging. For ways to export log entries, see Exporting
0000000000000000000000000000000000000000;;	// Logs.
0000000000000000000000000000000000000000;;	func (r *EntriesService) List(listlogentriesrequest *ListLogEntriesRequest) *EntriesListCall {
0000000000000000000000000000000000000000;;		c := &EntriesListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.listlogentriesrequest = listlogentriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) Fields(s ...googleapi.Field) *EntriesListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) Context(ctx context.Context) *EntriesListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.listlogentriesrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/entries:list")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.entries.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLogEntriesResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLogEntriesResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) Do(opts ...googleapi.CallOption) (*ListLogEntriesResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLogEntriesResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists log entries. Use this method to retrieve log entries from Stackdriver Logging. For ways to export log entries, see Exporting Logs.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/entries:list",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "logging.entries.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [],
0000000000000000000000000000000000000000;;		//   "parameters": {},
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/entries:list",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogEntriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogEntriesResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *EntriesListCall) Pages(ctx context.Context, f func(*ListLogEntriesResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer func(pt string) { c.listlogentriesrequest.PageToken = pt }(c.listlogentriesrequest.PageToken) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.listlogentriesrequest.PageToken = x.NextPageToken
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.entries.write":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EntriesWriteCall struct {
0000000000000000000000000000000000000000;;		s                      *Service
0000000000000000000000000000000000000000;;		writelogentriesrequest *WriteLogEntriesRequest
0000000000000000000000000000000000000000;;		urlParams_             gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_                   context.Context
0000000000000000000000000000000000000000;;		header_                http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Write: Writes log entries to Stackdriver Logging.
0000000000000000000000000000000000000000;;	func (r *EntriesService) Write(writelogentriesrequest *WriteLogEntriesRequest) *EntriesWriteCall {
0000000000000000000000000000000000000000;;		c := &EntriesWriteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.writelogentriesrequest = writelogentriesrequest
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *EntriesWriteCall) Fields(s ...googleapi.Field) *EntriesWriteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *EntriesWriteCall) Context(ctx context.Context) *EntriesWriteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *EntriesWriteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *EntriesWriteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.writelogentriesrequest)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/entries:write")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.entries.write" call.
0000000000000000000000000000000000000000;;	// Exactly one of *WriteLogEntriesResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *WriteLogEntriesResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *EntriesWriteCall) Do(opts ...googleapi.CallOption) (*WriteLogEntriesResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &WriteLogEntriesResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Writes log entries to Stackdriver Logging.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/entries:write",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "logging.entries.write",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [],
0000000000000000000000000000000000000000;;		//   "parameters": {},
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/entries:write",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "WriteLogEntriesRequest"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "WriteLogEntriesResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.monitoredResourceDescriptors.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MonitoredResourceDescriptorsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the descriptors for monitored resource types used by
0000000000000000000000000000000000000000;;	// Stackdriver Logging.
0000000000000000000000000000000000000000;;	func (r *MonitoredResourceDescriptorsService) List() *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c := &MonitoredResourceDescriptorsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) PageSize(pageSize int64) *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) PageToken(pageToken string) *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) Fields(s ...googleapi.Field) *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) IfNoneMatch(entityTag string) *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) Context(ctx context.Context) *MonitoredResourceDescriptorsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/monitoredResourceDescriptors")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.monitoredResourceDescriptors.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListMonitoredResourceDescriptorsResponse or error
0000000000000000000000000000000000000000;;	// will be non-nil. Any non-2xx status code is an error. Response
0000000000000000000000000000000000000000;;	// headers are in either
0000000000000000000000000000000000000000;;	// *ListMonitoredResourceDescriptorsResponse.ServerResponse.Header or
0000000000000000000000000000000000000000;;	// (if a response was returned at all) in
0000000000000000000000000000000000000000;;	// error.(*googleapi.Error).Header. Use googleapi.IsNotModified to check
0000000000000000000000000000000000000000;;	// whether the returned error was because http.StatusNotModified was
0000000000000000000000000000000000000000;;	// returned.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) Do(opts ...googleapi.CallOption) (*ListMonitoredResourceDescriptorsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListMonitoredResourceDescriptorsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the descriptors for monitored resource types used by Stackdriver Logging.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/monitoredResourceDescriptors",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.monitoredResourceDescriptors.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/monitoredResourceDescriptors",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListMonitoredResourceDescriptorsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *MonitoredResourceDescriptorsListCall) Pages(ctx context.Context, f func(*ListMonitoredResourceDescriptorsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.organizations.logs.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OrganizationsLogsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		logName    string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes all the log entries in a log. The log reappears if it
0000000000000000000000000000000000000000;;	// receives new entries. Log entries written shortly before the delete
0000000000000000000000000000000000000000;;	// operation might not be deleted.
0000000000000000000000000000000000000000;;	func (r *OrganizationsLogsService) Delete(logName string) *OrganizationsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c := &OrganizationsLogsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.logName = logName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsDeleteCall) Fields(s ...googleapi.Field) *OrganizationsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsDeleteCall) Context(ctx context.Context) *OrganizationsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+logName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"logName": c.logName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.organizations.logs.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/organizations/{organizationsId}/logs/{logsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "logging.organizations.logs.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "logName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "logName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the log to delete:\n\"projects/[PROJECT_ID]/logs/[LOG_ID]\"\n\"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\"\n\"folders/[FOLDER_ID]/logs/[LOG_ID]\"\n[LOG_ID] must be URL-encoded. For example, \"projects/my-project-id/logs/syslog\", \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\". For more information about log names, see LogEntry.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^organizations/[^/]+/logs/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+logName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.organizations.logs.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OrganizationsLogsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the logs in projects, organizations, folders, or billing
0000000000000000000000000000000000000000;;	// accounts. Only logs that have entries are listed.
0000000000000000000000000000000000000000;;	func (r *OrganizationsLogsService) List(parent string) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c := &OrganizationsLogsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) PageSize(pageSize int64) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) PageToken(pageToken string) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) Fields(s ...googleapi.Field) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) IfNoneMatch(entityTag string) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) Context(ctx context.Context) *OrganizationsLogsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/logs")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.organizations.logs.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLogsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLogsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) Do(opts ...googleapi.CallOption) (*ListLogsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLogsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/organizations/{organizationsId}/logs",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.organizations.logs.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name that owns the logs:\n\"projects/[PROJECT_ID]\"\n\"organizations/[ORGANIZATION_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]\"\n\"folders/[FOLDER_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^organizations/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/logs",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *OrganizationsLogsListCall) Pages(ctx context.Context, f func(*ListLogsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.logs.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLogsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		logName    string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes all the log entries in a log. The log reappears if it
0000000000000000000000000000000000000000;;	// receives new entries. Log entries written shortly before the delete
0000000000000000000000000000000000000000;;	// operation might not be deleted.
0000000000000000000000000000000000000000;;	func (r *ProjectsLogsService) Delete(logName string) *ProjectsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLogsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.logName = logName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsDeleteCall) Fields(s ...googleapi.Field) *ProjectsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsDeleteCall) Context(ctx context.Context) *ProjectsLogsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+logName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"logName": c.logName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.logs.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes all the log entries in a log. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/logs/{logsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.logs.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "logName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "logName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the log to delete:\n\"projects/[PROJECT_ID]/logs/[LOG_ID]\"\n\"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\"\n\"folders/[FOLDER_ID]/logs/[LOG_ID]\"\n[LOG_ID] must be URL-encoded. For example, \"projects/my-project-id/logs/syslog\", \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\". For more information about log names, see LogEntry.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/logs/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+logName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.logs.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsLogsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists the logs in projects, organizations, folders, or billing
0000000000000000000000000000000000000000;;	// accounts. Only logs that have entries are listed.
0000000000000000000000000000000000000000;;	func (r *ProjectsLogsService) List(parent string) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsLogsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) PageSize(pageSize int64) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) PageToken(pageToken string) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) Fields(s ...googleapi.Field) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) IfNoneMatch(entityTag string) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) Context(ctx context.Context) *ProjectsLogsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/logs")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.logs.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLogsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLogsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) Do(opts ...googleapi.CallOption) (*ListLogsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLogsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/logs",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.logs.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name that owns the logs:\n\"projects/[PROJECT_ID]\"\n\"organizations/[ORGANIZATION_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]\"\n\"folders/[FOLDER_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/logs",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsLogsListCall) Pages(ctx context.Context, f func(*ListLogsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.metrics.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsCreateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		parent     string
0000000000000000000000000000000000000000;;		logmetric  *LogMetric
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a logs-based metric.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricsService) Create(parent string, logmetric *LogMetric) *ProjectsMetricsCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricsCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		c.logmetric = logmetric
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsCreateCall) Fields(s ...googleapi.Field) *ProjectsMetricsCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsCreateCall) Context(ctx context.Context) *ProjectsMetricsCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.logmetric)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/metrics")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.metrics.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogMetric or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogMetric.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsCreateCall) Do(opts ...googleapi.CallOption) (*LogMetric, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogMetric{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a logs-based metric.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/metrics",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.metrics.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the project in which to create the metric:\n\"projects/[PROJECT_ID]\"\nThe new metric must be provided in the request.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/metrics",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogMetric"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogMetric"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.metrics.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		metricName string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes a logs-based metric.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricsService) Delete(metricName string) *ProjectsMetricsDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricsDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.metricName = metricName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsDeleteCall) Fields(s ...googleapi.Field) *ProjectsMetricsDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsDeleteCall) Context(ctx context.Context) *ProjectsMetricsDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+metricName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"metricName": c.metricName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.metrics.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes a logs-based metric.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/metrics/{metricsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.metrics.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "metricName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "metricName": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the metric to delete:\n\"projects/[PROJECT_ID]/metrics/[METRIC_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/metrics/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+metricName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.metrics.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		metricName   string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets a logs-based metric.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricsService) Get(metricName string) *ProjectsMetricsGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricsGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.metricName = metricName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) Fields(s ...googleapi.Field) *ProjectsMetricsGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) IfNoneMatch(entityTag string) *ProjectsMetricsGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) Context(ctx context.Context) *ProjectsMetricsGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+metricName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"metricName": c.metricName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.metrics.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogMetric or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogMetric.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsGetCall) Do(opts ...googleapi.CallOption) (*LogMetric, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogMetric{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets a logs-based metric.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/metrics/{metricsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.metrics.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "metricName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "metricName": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the desired metric:\n\"projects/[PROJECT_ID]/metrics/[METRIC_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/metrics/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+metricName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogMetric"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.metrics.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists logs-based metrics.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricsService) List(parent string) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricsListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) PageSize(pageSize int64) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) PageToken(pageToken string) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) Fields(s ...googleapi.Field) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) IfNoneMatch(entityTag string) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) Context(ctx context.Context) *ProjectsMetricsListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/metrics")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.metrics.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListLogMetricsResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListLogMetricsResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) Do(opts ...googleapi.CallOption) (*ListLogMetricsResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListLogMetricsResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists logs-based metrics.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/metrics",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.metrics.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The name of the project containing the metrics:\n\"projects/[PROJECT_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/metrics",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListLogMetricsResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsListCall) Pages(ctx context.Context, f func(*ListLogMetricsResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.metrics.update":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsMetricsUpdateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		metricName string
0000000000000000000000000000000000000000;;		logmetric  *LogMetric
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update: Creates or updates a logs-based metric.
0000000000000000000000000000000000000000;;	func (r *ProjectsMetricsService) Update(metricName string, logmetric *LogMetric) *ProjectsMetricsUpdateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsMetricsUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.metricName = metricName
0000000000000000000000000000000000000000;;		c.logmetric = logmetric
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsUpdateCall) Fields(s ...googleapi.Field) *ProjectsMetricsUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsUpdateCall) Context(ctx context.Context) *ProjectsMetricsUpdateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsUpdateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsUpdateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.logmetric)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+metricName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PUT", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"metricName": c.metricName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.metrics.update" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogMetric or error will be non-nil. Any non-2xx
0000000000000000000000000000000000000000;;	// status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogMetric.ServerResponse.Header or (if a response was returned at
0000000000000000000000000000000000000000;;	// all) in error.(*googleapi.Error).Header. Use googleapi.IsNotModified
0000000000000000000000000000000000000000;;	// to check whether the returned error was because
0000000000000000000000000000000000000000;;	// http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsMetricsUpdateCall) Do(opts ...googleapi.CallOption) (*LogMetric, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogMetric{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates or updates a logs-based metric.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/metrics/{metricsId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PUT",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.metrics.update",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "metricName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "metricName": {
0000000000000000000000000000000000000000;;		//       "description": "The resource name of the metric to update:\n\"projects/[PROJECT_ID]/metrics/[METRIC_ID]\"\nThe updated metric must be provided in the request and it's name field must be the same as [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/metrics/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+metricName}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogMetric"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogMetric"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.write"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.sinks.create":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksCreateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		parent     string
0000000000000000000000000000000000000000;;		logsink    *LogSink
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Create: Creates a sink that exports specified log entries to a
0000000000000000000000000000000000000000;;	// destination. The export of newly-ingested log entries begins
0000000000000000000000000000000000000000;;	// immediately, unless the current time is outside the sink's start and
0000000000000000000000000000000000000000;;	// end times or the sink's writer_identity is not permitted to write to
0000000000000000000000000000000000000000;;	// the destination. A sink can export log entries only from the resource
0000000000000000000000000000000000000000;;	// owning the sink.
0000000000000000000000000000000000000000;;	func (r *ProjectsSinksService) Create(parent string, logsink *LogSink) *ProjectsSinksCreateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsSinksCreateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		c.logsink = logsink
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UniqueWriterIdentity sets the optional parameter
0000000000000000000000000000000000000000;;	// "uniqueWriterIdentity": Determines the kind of IAM identity returned
0000000000000000000000000000000000000000;;	// as writer_identity in the new sink. If this value is omitted or set
0000000000000000000000000000000000000000;;	// to false, and if the sink's parent is a project, then the value
0000000000000000000000000000000000000000;;	// returned as writer_identity is the same group or service account used
0000000000000000000000000000000000000000;;	// by Stackdriver Logging before the addition of writer identities to
0000000000000000000000000000000000000000;;	// this API. The sink's destination must be in the same project as the
0000000000000000000000000000000000000000;;	// sink itself.If this field is set to true, or if the sink is owned by
0000000000000000000000000000000000000000;;	// a non-project resource such as an organization, then the value of
0000000000000000000000000000000000000000;;	// writer_identity will be a unique service account used only for
0000000000000000000000000000000000000000;;	// exports from the new sink. For more information, see writer_identity
0000000000000000000000000000000000000000;;	// in LogSink.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) UniqueWriterIdentity(uniqueWriterIdentity bool) *ProjectsSinksCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("uniqueWriterIdentity", fmt.Sprint(uniqueWriterIdentity))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) Fields(s ...googleapi.Field) *ProjectsSinksCreateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) Context(ctx context.Context) *ProjectsSinksCreateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.logsink)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/sinks")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("POST", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.sinks.create" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogSink or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogSink.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksCreateCall) Do(opts ...googleapi.CallOption) (*LogSink, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogSink{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the current time is outside the sink's start and end times or the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/sinks",
0000000000000000000000000000000000000000;;		//   "httpMethod": "POST",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.sinks.create",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource in which to create the sink:\n\"projects/[PROJECT_ID]\"\n\"organizations/[ORGANIZATION_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]\"\n\"folders/[FOLDER_ID]\"\nExamples: \"projects/my-logging-project\", \"organizations/123456789\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "uniqueWriterIdentity": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. Determines the kind of IAM identity returned as writer_identity in the new sink. If this value is omitted or set to false, and if the sink's parent is a project, then the value returned as writer_identity is the same group or service account used by Stackdriver Logging before the addition of writer identities to this API. The sink's destination must be in the same project as the sink itself.If this field is set to true, or if the sink is owned by a non-project resource such as an organization, then the value of writer_identity will be a unique service account used only for exports from the new sink. For more information, see writer_identity in LogSink.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "boolean"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/sinks",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogSink"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogSink"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.sinks.delete":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksDeleteCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		sinkNameid string
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Delete: Deletes a sink. If the sink has a unique writer_identity,
0000000000000000000000000000000000000000;;	// then that service account is also deleted.
0000000000000000000000000000000000000000;;	func (r *ProjectsSinksService) Delete(sinkNameid string) *ProjectsSinksDeleteCall {
0000000000000000000000000000000000000000;;		c := &ProjectsSinksDeleteCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.sinkNameid = sinkNameid
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksDeleteCall) Fields(s ...googleapi.Field) *ProjectsSinksDeleteCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksDeleteCall) Context(ctx context.Context) *ProjectsSinksDeleteCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksDeleteCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksDeleteCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+sinkName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("DELETE", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"sinkName": c.sinkNameid,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.sinks.delete" call.
0000000000000000000000000000000000000000;;	// Exactly one of *Empty or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *Empty.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksDeleteCall) Do(opts ...googleapi.CallOption) (*Empty, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &Empty{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/sinks/{sinksId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "DELETE",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.sinks.delete",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "sinkName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "sinkName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The full resource name of the sink to delete, including the parent resource and the sink identifier:\n\"projects/[PROJECT_ID]/sinks/[SINK_ID]\"\n\"organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\"\n\"folders/[FOLDER_ID]/sinks/[SINK_ID]\"\nExample: \"projects/my-project-id/sinks/my-sink-id\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/sinks/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+sinkName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "Empty"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.sinks.get":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksGetCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		sinkName     string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Get: Gets a sink.
0000000000000000000000000000000000000000;;	func (r *ProjectsSinksService) Get(sinkName string) *ProjectsSinksGetCall {
0000000000000000000000000000000000000000;;		c := &ProjectsSinksGetCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.sinkName = sinkName
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) Fields(s ...googleapi.Field) *ProjectsSinksGetCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) IfNoneMatch(entityTag string) *ProjectsSinksGetCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) Context(ctx context.Context) *ProjectsSinksGetCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+sinkName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"sinkName": c.sinkName,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.sinks.get" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogSink or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogSink.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksGetCall) Do(opts ...googleapi.CallOption) (*LogSink, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogSink{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Gets a sink.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/sinks/{sinksId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.sinks.get",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "sinkName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "sinkName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The resource name of the sink:\n\"projects/[PROJECT_ID]/sinks/[SINK_ID]\"\n\"organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\"\n\"folders/[FOLDER_ID]/sinks/[SINK_ID]\"\nExample: \"projects/my-project-id/sinks/my-sink-id\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/sinks/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+sinkName}",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogSink"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.sinks.list":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksListCall struct {
0000000000000000000000000000000000000000;;		s            *Service
0000000000000000000000000000000000000000;;		parent       string
0000000000000000000000000000000000000000;;		urlParams_   gensupport.URLParams
0000000000000000000000000000000000000000;;		ifNoneMatch_ string
0000000000000000000000000000000000000000;;		ctx_         context.Context
0000000000000000000000000000000000000000;;		header_      http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// List: Lists sinks.
0000000000000000000000000000000000000000;;	func (r *ProjectsSinksService) List(parent string) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c := &ProjectsSinksListCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.parent = parent
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageSize sets the optional parameter "pageSize": The maximum number
0000000000000000000000000000000000000000;;	// of results to return from this request. Non-positive values are
0000000000000000000000000000000000000000;;	// ignored. The presence of nextPageToken in the response indicates that
0000000000000000000000000000000000000000;;	// more results might be available.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) PageSize(pageSize int64) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageSize", fmt.Sprint(pageSize))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PageToken sets the optional parameter "pageToken": If present, then
0000000000000000000000000000000000000000;;	// retrieve the next batch of results from the preceding call to this
0000000000000000000000000000000000000000;;	// method. pageToken must be the value of nextPageToken from the
0000000000000000000000000000000000000000;;	// previous response. The values of other method parameters should be
0000000000000000000000000000000000000000;;	// identical to those in the previous call.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) PageToken(pageToken string) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("pageToken", pageToken)
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) Fields(s ...googleapi.Field) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// IfNoneMatch sets the optional parameter which makes the operation
0000000000000000000000000000000000000000;;	// fail if the object's ETag matches the given value. This is useful for
0000000000000000000000000000000000000000;;	// getting updates only after the object has changed since the last
0000000000000000000000000000000000000000;;	// request. Use googleapi.IsNotModified to check whether the response
0000000000000000000000000000000000000000;;	// error from Do is the result of In-None-Match.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) IfNoneMatch(entityTag string) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c.ifNoneMatch_ = entityTag
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) Context(ctx context.Context) *ProjectsSinksListCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		if c.ifNoneMatch_ != "" {
0000000000000000000000000000000000000000;;			reqHeaders.Set("If-None-Match", c.ifNoneMatch_)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+parent}/sinks")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("GET", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"parent": c.parent,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.sinks.list" call.
0000000000000000000000000000000000000000;;	// Exactly one of *ListSinksResponse or error will be non-nil. Any
0000000000000000000000000000000000000000;;	// non-2xx status code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *ListSinksResponse.ServerResponse.Header or (if a response was
0000000000000000000000000000000000000000;;	// returned at all) in error.(*googleapi.Error).Header. Use
0000000000000000000000000000000000000000;;	// googleapi.IsNotModified to check whether the returned error was
0000000000000000000000000000000000000000;;	// because http.StatusNotModified was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) Do(opts ...googleapi.CallOption) (*ListSinksResponse, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &ListSinksResponse{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Lists sinks.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/sinks",
0000000000000000000000000000000000000000;;		//   "httpMethod": "GET",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.sinks.list",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "parent"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "pageSize": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. The maximum number of results to return from this request. Non-positive values are ignored. The presence of nextPageToken in the response indicates that more results might be available.",
0000000000000000000000000000000000000000;;		//       "format": "int32",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "integer"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "pageToken": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. If present, then retrieve the next batch of results from the preceding call to this method. pageToken must be the value of nextPageToken from the previous response. The values of other method parameters should be identical to those in the previous call.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "parent": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The parent resource whose sinks are to be listed:\n\"projects/[PROJECT_ID]\"\n\"organizations/[ORGANIZATION_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]\"\n\"folders/[FOLDER_ID]\"\n",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+parent}/sinks",
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "ListSinksResponse"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform.read-only",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.read"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Pages invokes f for each page of results.
0000000000000000000000000000000000000000;;	// A non-nil error returned from f will halt the iteration.
0000000000000000000000000000000000000000;;	// The provided context supersedes any context provided to the Context method.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksListCall) Pages(ctx context.Context, f func(*ListSinksResponse) error) error {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		defer c.PageToken(c.urlParams_.Get("pageToken")) // reset paging to original point
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			x, err := c.Do()
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err := f(x); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if x.NextPageToken == "" {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			c.PageToken(x.NextPageToken)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// method id "logging.projects.sinks.update":
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProjectsSinksUpdateCall struct {
0000000000000000000000000000000000000000;;		s          *Service
0000000000000000000000000000000000000000;;		sinkNameid string
0000000000000000000000000000000000000000;;		logsink    *LogSink
0000000000000000000000000000000000000000;;		urlParams_ gensupport.URLParams
0000000000000000000000000000000000000000;;		ctx_       context.Context
0000000000000000000000000000000000000000;;		header_    http.Header
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Update: Updates a sink. If the named sink doesn't exist, then this
0000000000000000000000000000000000000000;;	// method is identical to sinks.create. If the named sink does exist,
0000000000000000000000000000000000000000;;	// then this method replaces the following fields in the existing sink
0000000000000000000000000000000000000000;;	// with values from the new sink: destination, filter,
0000000000000000000000000000000000000000;;	// output_version_format, start_time, and end_time. The updated filter
0000000000000000000000000000000000000000;;	// might also have a new writer_identity; see the unique_writer_identity
0000000000000000000000000000000000000000;;	// field.
0000000000000000000000000000000000000000;;	func (r *ProjectsSinksService) Update(sinkNameid string, logsink *LogSink) *ProjectsSinksUpdateCall {
0000000000000000000000000000000000000000;;		c := &ProjectsSinksUpdateCall{s: r.s, urlParams_: make(gensupport.URLParams)}
0000000000000000000000000000000000000000;;		c.sinkNameid = sinkNameid
0000000000000000000000000000000000000000;;		c.logsink = logsink
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UniqueWriterIdentity sets the optional parameter
0000000000000000000000000000000000000000;;	// "uniqueWriterIdentity": See sinks.create for a description of this
0000000000000000000000000000000000000000;;	// field. When updating a sink, the effect of this field on the value of
0000000000000000000000000000000000000000;;	// writer_identity in the updated sink depends on both the old and new
0000000000000000000000000000000000000000;;	// values of this field:
0000000000000000000000000000000000000000;;	// If the old and new values of this field are both false or both true,
0000000000000000000000000000000000000000;;	// then there is no change to the sink's writer_identity.
0000000000000000000000000000000000000000;;	// If the old value is false and the new value is true, then
0000000000000000000000000000000000000000;;	// writer_identity is changed to a unique service account.
0000000000000000000000000000000000000000;;	// It is an error if the old value is true and the new value is false.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) UniqueWriterIdentity(uniqueWriterIdentity bool) *ProjectsSinksUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("uniqueWriterIdentity", fmt.Sprint(uniqueWriterIdentity))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Fields allows partial responses to be retrieved. See
0000000000000000000000000000000000000000;;	// https://developers.google.com/gdata/docs/2.0/basics#PartialResponse
0000000000000000000000000000000000000000;;	// for more information.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) Fields(s ...googleapi.Field) *ProjectsSinksUpdateCall {
0000000000000000000000000000000000000000;;		c.urlParams_.Set("fields", googleapi.CombineFields(s))
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Context sets the context to be used in this call's Do method. Any
0000000000000000000000000000000000000000;;	// pending HTTP request will be aborted if the provided context is
0000000000000000000000000000000000000000;;	// canceled.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) Context(ctx context.Context) *ProjectsSinksUpdateCall {
0000000000000000000000000000000000000000;;		c.ctx_ = ctx
0000000000000000000000000000000000000000;;		return c
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Header returns an http.Header that can be modified by the caller to
0000000000000000000000000000000000000000;;	// add HTTP headers to the request.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) Header() http.Header {
0000000000000000000000000000000000000000;;		if c.header_ == nil {
0000000000000000000000000000000000000000;;			c.header_ = make(http.Header)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return c.header_
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) doRequest(alt string) (*http.Response, error) {
0000000000000000000000000000000000000000;;		reqHeaders := make(http.Header)
0000000000000000000000000000000000000000;;		for k, v := range c.header_ {
0000000000000000000000000000000000000000;;			reqHeaders[k] = v
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("User-Agent", c.s.userAgent())
0000000000000000000000000000000000000000;;		var body io.Reader = nil
0000000000000000000000000000000000000000;;		body, err := googleapi.WithoutDataWrapper.JSONReader(c.logsink)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		reqHeaders.Set("Content-Type", "application/json")
0000000000000000000000000000000000000000;;		c.urlParams_.Set("alt", alt)
0000000000000000000000000000000000000000;;		urls := googleapi.ResolveRelative(c.s.BasePath, "v2beta1/{+sinkName}")
0000000000000000000000000000000000000000;;		urls += "?" + c.urlParams_.Encode()
0000000000000000000000000000000000000000;;		req, _ := http.NewRequest("PUT", urls, body)
0000000000000000000000000000000000000000;;		req.Header = reqHeaders
0000000000000000000000000000000000000000;;		googleapi.Expand(req.URL, map[string]string{
0000000000000000000000000000000000000000;;			"sinkName": c.sinkNameid,
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;		return gensupport.SendRequest(c.ctx_, c.s.client, req)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do executes the "logging.projects.sinks.update" call.
0000000000000000000000000000000000000000;;	// Exactly one of *LogSink or error will be non-nil. Any non-2xx status
0000000000000000000000000000000000000000;;	// code is an error. Response headers are in either
0000000000000000000000000000000000000000;;	// *LogSink.ServerResponse.Header or (if a response was returned at all)
0000000000000000000000000000000000000000;;	// in error.(*googleapi.Error).Header. Use googleapi.IsNotModified to
0000000000000000000000000000000000000000;;	// check whether the returned error was because http.StatusNotModified
0000000000000000000000000000000000000000;;	// was returned.
0000000000000000000000000000000000000000;;	func (c *ProjectsSinksUpdateCall) Do(opts ...googleapi.CallOption) (*LogSink, error) {
0000000000000000000000000000000000000000;;		gensupport.SetOptions(c.urlParams_, opts...)
0000000000000000000000000000000000000000;;		res, err := c.doRequest("json")
0000000000000000000000000000000000000000;;		if res != nil && res.StatusCode == http.StatusNotModified {
0000000000000000000000000000000000000000;;			if res.Body != nil {
0000000000000000000000000000000000000000;;				res.Body.Close()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil, &googleapi.Error{
0000000000000000000000000000000000000000;;				Code:   res.StatusCode,
0000000000000000000000000000000000000000;;				Header: res.Header,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer googleapi.CloseBody(res)
0000000000000000000000000000000000000000;;		if err := googleapi.CheckResponse(res); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ret := &LogSink{
0000000000000000000000000000000000000000;;			ServerResponse: googleapi.ServerResponse{
0000000000000000000000000000000000000000;;				Header:         res.Header,
0000000000000000000000000000000000000000;;				HTTPStatusCode: res.StatusCode,
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		target := &ret
0000000000000000000000000000000000000000;;		if err := json.NewDecoder(res.Body).Decode(target); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return ret, nil
0000000000000000000000000000000000000000;;		// {
0000000000000000000000000000000000000000;;		//   "description": "Updates a sink. If the named sink doesn't exist, then this method is identical to sinks.create. If the named sink does exist, then this method replaces the following fields in the existing sink with values from the new sink: destination, filter, output_version_format, start_time, and end_time. The updated filter might also have a new writer_identity; see the unique_writer_identity field.",
0000000000000000000000000000000000000000;;		//   "flatPath": "v2beta1/projects/{projectsId}/sinks/{sinksId}",
0000000000000000000000000000000000000000;;		//   "httpMethod": "PUT",
0000000000000000000000000000000000000000;;		//   "id": "logging.projects.sinks.update",
0000000000000000000000000000000000000000;;		//   "parameterOrder": [
0000000000000000000000000000000000000000;;		//     "sinkName"
0000000000000000000000000000000000000000;;		//   ],
0000000000000000000000000000000000000000;;		//   "parameters": {
0000000000000000000000000000000000000000;;		//     "sinkName": {
0000000000000000000000000000000000000000;;		//       "description": "Required. The full resource name of the sink to update, including the parent resource and the sink identifier:\n\"projects/[PROJECT_ID]/sinks/[SINK_ID]\"\n\"organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]\"\n\"billingAccounts/[BILLING_ACCOUNT_ID]/sinks/[SINK_ID]\"\n\"folders/[FOLDER_ID]/sinks/[SINK_ID]\"\nExample: \"projects/my-project-id/sinks/my-sink-id\".",
0000000000000000000000000000000000000000;;		//       "location": "path",
0000000000000000000000000000000000000000;;		//       "pattern": "^projects/[^/]+/sinks/[^/]+$",
0000000000000000000000000000000000000000;;		//       "required": true,
0000000000000000000000000000000000000000;;		//       "type": "string"
0000000000000000000000000000000000000000;;		//     },
0000000000000000000000000000000000000000;;		//     "uniqueWriterIdentity": {
0000000000000000000000000000000000000000;;		//       "description": "Optional. See sinks.create for a description of this field. When updating a sink, the effect of this field on the value of writer_identity in the updated sink depends on both the old and new values of this field:\nIf the old and new values of this field are both false or both true, then there is no change to the sink's writer_identity.\nIf the old value is false and the new value is true, then writer_identity is changed to a unique service account.\nIt is an error if the old value is true and the new value is false.",
0000000000000000000000000000000000000000;;		//       "location": "query",
0000000000000000000000000000000000000000;;		//       "type": "boolean"
0000000000000000000000000000000000000000;;		//     }
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "path": "v2beta1/{+sinkName}",
0000000000000000000000000000000000000000;;		//   "request": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogSink"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "response": {
0000000000000000000000000000000000000000;;		//     "$ref": "LogSink"
0000000000000000000000000000000000000000;;		//   },
0000000000000000000000000000000000000000;;		//   "scopes": [
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/cloud-platform",
0000000000000000000000000000000000000000;;		//     "https://www.googleapis.com/auth/logging.admin"
0000000000000000000000000000000000000000;;		//   ]
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
