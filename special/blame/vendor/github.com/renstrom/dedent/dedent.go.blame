0000000000000000000000000000000000000000;;	package dedent
8fc0cf4722ca1e29e820556d97c404bdf1fdce74;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		whitespaceOnly    = regexp.MustCompile("(?m)^[ \t]+$")
0000000000000000000000000000000000000000;;		leadingWhitespace = regexp.MustCompile("(?m)(^[ \t]*)(?:[^ \t\n])")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Dedent removes any common leading whitespace from every line in text.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This can be used to make multiline strings to line up with the left edge of
0000000000000000000000000000000000000000;;	// the display, while still presenting them in the source code in indented
0000000000000000000000000000000000000000;;	// form.
0000000000000000000000000000000000000000;;	func Dedent(text string) string {
0000000000000000000000000000000000000000;;		var margin string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		text = whitespaceOnly.ReplaceAllString(text, "")
0000000000000000000000000000000000000000;;		indents := leadingWhitespace.FindAllStringSubmatch(text, -1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Look for the longest leading string of spaces and tabs common to all
0000000000000000000000000000000000000000;;		// lines.
0000000000000000000000000000000000000000;;		for i, indent := range indents {
0000000000000000000000000000000000000000;;			if i == 0 {
0000000000000000000000000000000000000000;;				margin = indent[1]
0000000000000000000000000000000000000000;;			} else if strings.HasPrefix(indent[1], margin) {
0000000000000000000000000000000000000000;;				// Current line more deeply indented than previous winner:
0000000000000000000000000000000000000000;;				// no change (previous winner is still on top).
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			} else if strings.HasPrefix(margin, indent[1]) {
0000000000000000000000000000000000000000;;				// Current line consistent with and no deeper than previous winner:
0000000000000000000000000000000000000000;;				// it's the new winner.
0000000000000000000000000000000000000000;;				margin = indent[1]
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				// Current line and previous winner have no common whitespace:
0000000000000000000000000000000000000000;;				// there is no margin.
0000000000000000000000000000000000000000;;				margin = ""
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if margin != "" {
0000000000000000000000000000000000000000;;			text = regexp.MustCompile("(?m)^"+margin).ReplaceAllString(text, "")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return text
0000000000000000000000000000000000000000;;	}
