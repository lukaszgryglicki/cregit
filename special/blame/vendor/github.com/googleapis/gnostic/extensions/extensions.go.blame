0000000000000000000000000000000000000000;;	// Copyright 2017 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8337c2fc62f66cf6db7638dc013660183869f458;;	
0000000000000000000000000000000000000000;;	package openapiextension_v1
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/proto"
0000000000000000000000000000000000000000;;		"github.com/golang/protobuf/ptypes"
0000000000000000000000000000000000000000;;		"gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type documentHandler func(version string, extensionName string, document string)
0000000000000000000000000000000000000000;;	type extensionHandler func(name string, info yaml.MapSlice) (bool, proto.Message, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func forInputYamlFromOpenapic(handler documentHandler) {
0000000000000000000000000000000000000000;;		data, err := ioutil.ReadAll(os.Stdin)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Println("File error:", err.Error())
0000000000000000000000000000000000000000;;			os.Exit(1)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		request := &ExtensionHandlerRequest{}
0000000000000000000000000000000000000000;;		err = proto.Unmarshal(data, request)
0000000000000000000000000000000000000000;;		handler(request.Wrapper.Version, request.Wrapper.ExtensionName, request.Wrapper.Yaml)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ProcessExtension(handleExtension extensionHandler) {
0000000000000000000000000000000000000000;;		response := &ExtensionHandlerResponse{}
0000000000000000000000000000000000000000;;		forInputYamlFromOpenapic(
0000000000000000000000000000000000000000;;			func(version string, extensionName string, yamlInput string) {
0000000000000000000000000000000000000000;;				var info yaml.MapSlice
0000000000000000000000000000000000000000;;				var newObject proto.Message
0000000000000000000000000000000000000000;;				var err error
0000000000000000000000000000000000000000;;				err = yaml.Unmarshal([]byte(yamlInput), &info)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					response.Error = append(response.Error, err.Error())
0000000000000000000000000000000000000000;;					responseBytes, _ := proto.Marshal(response)
0000000000000000000000000000000000000000;;					os.Stdout.Write(responseBytes)
0000000000000000000000000000000000000000;;					os.Exit(0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				handled, newObject, err := handleExtension(extensionName, info)
0000000000000000000000000000000000000000;;				if !handled {
0000000000000000000000000000000000000000;;					responseBytes, _ := proto.Marshal(response)
0000000000000000000000000000000000000000;;					os.Stdout.Write(responseBytes)
0000000000000000000000000000000000000000;;					os.Exit(0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				// If we reach here, then the extension is handled
0000000000000000000000000000000000000000;;				response.Handled = true
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					response.Error = append(response.Error, err.Error())
0000000000000000000000000000000000000000;;					responseBytes, _ := proto.Marshal(response)
0000000000000000000000000000000000000000;;					os.Stdout.Write(responseBytes)
0000000000000000000000000000000000000000;;					os.Exit(0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				response.Value, err = ptypes.MarshalAny(newObject)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					response.Error = append(response.Error, err.Error())
0000000000000000000000000000000000000000;;					responseBytes, _ := proto.Marshal(response)
0000000000000000000000000000000000000000;;					os.Stdout.Write(responseBytes)
0000000000000000000000000000000000000000;;					os.Exit(0)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		responseBytes, _ := proto.Marshal(response)
0000000000000000000000000000000000000000;;		os.Stdout.Write(responseBytes)
0000000000000000000000000000000000000000;;	}
