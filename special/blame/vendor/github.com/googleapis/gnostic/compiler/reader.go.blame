0000000000000000000000000000000000000000;;	// Copyright 2017 Google Inc. All Rights Reserved.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8337c2fc62f66cf6db7638dc013660183869f458;;	
0000000000000000000000000000000000000000;;	package compiler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"gopkg.in/yaml.v2"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var file_cache map[string][]byte
0000000000000000000000000000000000000000;;	var info_cache map[string]interface{}
0000000000000000000000000000000000000000;;	var count int64
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var VERBOSE_READER = false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initializeFileCache() {
0000000000000000000000000000000000000000;;		if file_cache == nil {
0000000000000000000000000000000000000000;;			file_cache = make(map[string][]byte, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func initializeInfoCache() {
0000000000000000000000000000000000000000;;		if info_cache == nil {
0000000000000000000000000000000000000000;;			info_cache = make(map[string]interface{}, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func FetchFile(fileurl string) ([]byte, error) {
0000000000000000000000000000000000000000;;		initializeFileCache()
0000000000000000000000000000000000000000;;		bytes, ok := file_cache[fileurl]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			if VERBOSE_READER {
0000000000000000000000000000000000000000;;				log.Printf("Cache hit %s", fileurl)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return bytes, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		log.Printf("Fetching %s", fileurl)
0000000000000000000000000000000000000000;;		response, err := http.Get(fileurl)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			defer response.Body.Close()
0000000000000000000000000000000000000000;;			bytes, err := ioutil.ReadAll(response.Body)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				file_cache[fileurl] = bytes
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return bytes, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// read a file and unmarshal it as a yaml.MapSlice
0000000000000000000000000000000000000000;;	func ReadInfoForFile(filename string) (interface{}, error) {
0000000000000000000000000000000000000000;;		initializeInfoCache()
0000000000000000000000000000000000000000;;		info, ok := info_cache[filename]
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			if VERBOSE_READER {
0000000000000000000000000000000000000000;;				log.Printf("Cache hit info for file %s", filename)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return info, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if VERBOSE_READER {
0000000000000000000000000000000000000000;;			log.Printf("Reading info for file %s", filename)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// is the filename a url?
0000000000000000000000000000000000000000;;		fileurl, _ := url.Parse(filename)
0000000000000000000000000000000000000000;;		if fileurl.Scheme != "" {
0000000000000000000000000000000000000000;;			// yes, fetch it
0000000000000000000000000000000000000000;;			bytes, err := FetchFile(filename)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var info yaml.MapSlice
0000000000000000000000000000000000000000;;			err = yaml.Unmarshal(bytes, &info)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			info_cache[filename] = info
0000000000000000000000000000000000000000;;			return info, nil
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			// no, it's a local filename
0000000000000000000000000000000000000000;;			bytes, err := ioutil.ReadFile(filename)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				log.Printf("File error: %v\n", err)
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var info yaml.MapSlice
0000000000000000000000000000000000000000;;			err = yaml.Unmarshal(bytes, &info)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return nil, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			info_cache[filename] = info
0000000000000000000000000000000000000000;;			return info, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// read a file and return the fragment needed to resolve a $ref
0000000000000000000000000000000000000000;;	func ReadInfoForRef(basefile string, ref string) (interface{}, error) {
0000000000000000000000000000000000000000;;		initializeInfoCache()
0000000000000000000000000000000000000000;;		{
0000000000000000000000000000000000000000;;			info, ok := info_cache[ref]
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				if VERBOSE_READER {
0000000000000000000000000000000000000000;;					log.Printf("Cache hit for ref %s#%s", basefile, ref)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return info, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if VERBOSE_READER {
0000000000000000000000000000000000000000;;			log.Printf("Reading info for ref %s#%s", basefile, ref)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		count = count + 1
0000000000000000000000000000000000000000;;		basedir, _ := filepath.Split(basefile)
0000000000000000000000000000000000000000;;		parts := strings.Split(ref, "#")
0000000000000000000000000000000000000000;;		var filename string
0000000000000000000000000000000000000000;;		if parts[0] != "" {
0000000000000000000000000000000000000000;;			filename = basedir + parts[0]
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			filename = basefile
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info, err := ReadInfoForFile(filename)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Printf("File error: %v\n", err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			if len(parts) > 1 {
0000000000000000000000000000000000000000;;				path := strings.Split(parts[1], "/")
0000000000000000000000000000000000000000;;				for i, key := range path {
0000000000000000000000000000000000000000;;					if i > 0 {
0000000000000000000000000000000000000000;;						m, ok := info.(yaml.MapSlice)
0000000000000000000000000000000000000000;;						if ok {
0000000000000000000000000000000000000000;;							found := false
0000000000000000000000000000000000000000;;							for _, section := range m {
0000000000000000000000000000000000000000;;								if section.Key == key {
0000000000000000000000000000000000000000;;									info = section.Value
0000000000000000000000000000000000000000;;									found = true
0000000000000000000000000000000000000000;;								}
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;							if !found {
0000000000000000000000000000000000000000;;								info_cache[ref] = nil
0000000000000000000000000000000000000000;;								return nil, NewError(nil, fmt.Sprintf("could not resolve %s", ref))
0000000000000000000000000000000000000000;;							}
0000000000000000000000000000000000000000;;						}
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		info_cache[ref] = info
0000000000000000000000000000000000000000;;		return info, nil
0000000000000000000000000000000000000000;;	}
