0000000000000000000000000000000000000000;;	// +build windows
ef45a1c36722836669601cd29e4072a59ed03cc1;Godeps/_workspace/src/github.com/daviddengcn/go-colortext/ct_win.go[Godeps/_workspace/src/github.com/daviddengcn/go-colortext/ct_win.go][vendor/github.com/daviddengcn/go-colortext/ct_win.go];	
0000000000000000000000000000000000000000;;	package ct
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var fg_colors = []uint16{
0000000000000000000000000000000000000000;;		0,
0000000000000000000000000000000000000000;;		0,
0000000000000000000000000000000000000000;;		foreground_red,
0000000000000000000000000000000000000000;;		foreground_green,
0000000000000000000000000000000000000000;;		foreground_red | foreground_green,
0000000000000000000000000000000000000000;;		foreground_blue,
0000000000000000000000000000000000000000;;		foreground_red | foreground_blue,
0000000000000000000000000000000000000000;;		foreground_green | foreground_blue,
0000000000000000000000000000000000000000;;		foreground_red | foreground_green | foreground_blue}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var bg_colors = []uint16{
0000000000000000000000000000000000000000;;		0,
0000000000000000000000000000000000000000;;		0,
0000000000000000000000000000000000000000;;		background_red,
0000000000000000000000000000000000000000;;		background_green,
0000000000000000000000000000000000000000;;		background_red | background_green,
0000000000000000000000000000000000000000;;		background_blue,
0000000000000000000000000000000000000000;;		background_red | background_blue,
0000000000000000000000000000000000000000;;		background_green | background_blue,
0000000000000000000000000000000000000000;;		background_red | background_green | background_blue}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		foreground_blue      = uint16(0x0001)
0000000000000000000000000000000000000000;;		foreground_green     = uint16(0x0002)
0000000000000000000000000000000000000000;;		foreground_red       = uint16(0x0004)
0000000000000000000000000000000000000000;;		foreground_intensity = uint16(0x0008)
0000000000000000000000000000000000000000;;		background_blue      = uint16(0x0010)
0000000000000000000000000000000000000000;;		background_green     = uint16(0x0020)
0000000000000000000000000000000000000000;;		background_red       = uint16(0x0040)
0000000000000000000000000000000000000000;;		background_intensity = uint16(0x0080)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		foreground_mask = foreground_blue | foreground_green | foreground_red | foreground_intensity
0000000000000000000000000000000000000000;;		background_mask = background_blue | background_green | background_red | background_intensity
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		kernel32 = syscall.NewLazyDLL("kernel32.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procGetStdHandle               = kernel32.NewProc("GetStdHandle")
0000000000000000000000000000000000000000;;		procSetConsoleTextAttribute    = kernel32.NewProc("SetConsoleTextAttribute")
0000000000000000000000000000000000000000;;		procGetConsoleScreenBufferInfo = kernel32.NewProc("GetConsoleScreenBufferInfo")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hStdout        uintptr
0000000000000000000000000000000000000000;;		initScreenInfo *console_screen_buffer_info
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setConsoleTextAttribute(hConsoleOutput uintptr, wAttributes uint16) bool {
0000000000000000000000000000000000000000;;		ret, _, _ := procSetConsoleTextAttribute.Call(
0000000000000000000000000000000000000000;;			hConsoleOutput,
0000000000000000000000000000000000000000;;			uintptr(wAttributes))
0000000000000000000000000000000000000000;;		return ret != 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type coord struct {
0000000000000000000000000000000000000000;;		X, Y int16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type small_rect struct {
0000000000000000000000000000000000000000;;		Left, Top, Right, Bottom int16
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type console_screen_buffer_info struct {
0000000000000000000000000000000000000000;;		DwSize              coord
0000000000000000000000000000000000000000;;		DwCursorPosition    coord
0000000000000000000000000000000000000000;;		WAttributes         uint16
0000000000000000000000000000000000000000;;		SrWindow            small_rect
0000000000000000000000000000000000000000;;		DwMaximumWindowSize coord
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getConsoleScreenBufferInfo(hConsoleOutput uintptr) *console_screen_buffer_info {
0000000000000000000000000000000000000000;;		var csbi console_screen_buffer_info
0000000000000000000000000000000000000000;;		if ret, _, _ := procGetConsoleScreenBufferInfo.Call(hConsoleOutput, uintptr(unsafe.Pointer(&csbi))); ret == 0 {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &csbi
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		std_output_handle = uint32(-11 & 0xFFFFFFFF)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		kernel32 := syscall.NewLazyDLL("kernel32.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procGetStdHandle = kernel32.NewProc("GetStdHandle")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		hStdout, _, _ = procGetStdHandle.Call(uintptr(std_output_handle))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		initScreenInfo = getConsoleScreenBufferInfo(hStdout)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		syscall.LoadDLL("")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func resetColor() {
0000000000000000000000000000000000000000;;		if initScreenInfo == nil { // No console info - Ex: stdout redirection
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setConsoleTextAttribute(hStdout, initScreenInfo.WAttributes)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func changeColor(fg Color, fgBright bool, bg Color, bgBright bool) {
0000000000000000000000000000000000000000;;		attr := uint16(0)
0000000000000000000000000000000000000000;;		if fg == None || bg == None {
0000000000000000000000000000000000000000;;			cbufinfo := getConsoleScreenBufferInfo(hStdout)
0000000000000000000000000000000000000000;;			if cbufinfo == nil { // No console info - Ex: stdout redirection
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			attr = cbufinfo.WAttributes
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if fg != None {
0000000000000000000000000000000000000000;;			attr = attr & ^foreground_mask | fg_colors[fg]
0000000000000000000000000000000000000000;;			if fgBright {
0000000000000000000000000000000000000000;;				attr |= foreground_intensity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if bg != None {
0000000000000000000000000000000000000000;;			attr = attr & ^background_mask | bg_colors[bg]
0000000000000000000000000000000000000000;;			if bgBright {
0000000000000000000000000000000000000000;;				attr |= background_intensity
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		setConsoleTextAttribute(hStdout, attr)
0000000000000000000000000000000000000000;;	}
