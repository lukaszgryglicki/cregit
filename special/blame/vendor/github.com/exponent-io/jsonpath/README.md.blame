0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/exponent-io/jsonpath?status.svg)](https://godoc.org/github.com/exponent-io/jsonpath)
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/exponent-io/jsonpath.svg?branch=master)](https://travis-ci.org/exponent-io/jsonpath)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# jsonpath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This package extends the [json.Decoder](https://golang.org/pkg/encoding/json/#Decoder) to support navigating a stream of JSON tokens. You should be able to use this extended Decoder places where a json.Decoder would have been used.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This Decoder has the following enhancements...
0000000000000000000000000000000000000000;;	 * The [Scan](https://godoc.org/github.com/exponent-io/jsonpath/#Decoder.Scan) method supports scanning a JSON stream while extracting particular values along the way using [PathActions](https://godoc.org/github.com/exponent-io/jsonpath#PathActions).
0000000000000000000000000000000000000000;;	 * The [SeekTo](https://godoc.org/github.com/exponent-io/jsonpath#Decoder.SeekTo) method supports seeking forward in a JSON token stream to a particular path.
0000000000000000000000000000000000000000;;	 * The [Path](https://godoc.org/github.com/exponent-io/jsonpath#Decoder.Path) method returns the path of the most recently parsed token.
0000000000000000000000000000000000000000;;	 * The [Token](https://godoc.org/github.com/exponent-io/jsonpath#Decoder.Token) method has been modified to distinguish between strings that are object keys and strings that are values. Object key strings are returned as the [KeyString](https://godoc.org/github.com/exponent-io/jsonpath#KeyString) type rather than a native string.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    go get -u github.com/exponent-io/jsonpath
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Example Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### SeekTo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/exponent-io/jsonpath"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var j = []byte(`[
0000000000000000000000000000000000000000;;	  {"Space": "YCbCr", "Point": {"Y": 255, "Cb": 0, "Cr": -10}},
0000000000000000000000000000000000000000;;	  {"Space": "RGB",   "Point": {"R": 98, "G": 218, "B": 255}}
0000000000000000000000000000000000000000;;	]`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	w := json.NewDecoder(bytes.NewReader(j))
0000000000000000000000000000000000000000;;	var v interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	w.SeekTo(1, "Point", "G")
0000000000000000000000000000000000000000;;	w.Decode(&v) // v is 218
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Scan with PathActions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	var j = []byte(`{"colors":[
0000000000000000000000000000000000000000;;	  {"Space": "YCbCr", "Point": {"Y": 255, "Cb": 0, "Cr": -10, "A": 58}},
0000000000000000000000000000000000000000;;	  {"Space": "RGB",   "Point": {"R": 98, "G": 218, "B": 255, "A": 231}}
0000000000000000000000000000000000000000;;	]}`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var actions PathActions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Extract the value at Point.A
0000000000000000000000000000000000000000;;	actions.Add(func(d *Decoder) error {
0000000000000000000000000000000000000000;;	  var alpha int
0000000000000000000000000000000000000000;;	  err := d.Decode(&alpha)
0000000000000000000000000000000000000000;;	  fmt.Printf("Alpha: %v\n", alpha)
0000000000000000000000000000000000000000;;	  return err
0000000000000000000000000000000000000000;;	}, "Point", "A")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	w := NewDecoder(bytes.NewReader(j))
0000000000000000000000000000000000000000;;	w.SeekTo("colors", 0)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var ok = true
0000000000000000000000000000000000000000;;	var err error
0000000000000000000000000000000000000000;;	for ok {
0000000000000000000000000000000000000000;;	  ok, err = w.Scan(&actions)
0000000000000000000000000000000000000000;;	  if err != nil && err != io.EOF {
0000000000000000000000000000000000000000;;	    panic(err)
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
