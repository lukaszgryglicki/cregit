0000000000000000000000000000000000000000;;	// Extends the Go runtime's json.Decoder enabling navigation of a stream of json tokens.
0000000000000000000000000000000000000000;;	package jsonpath
3bc88e1d995d86a78861e2f0fa2b69f7b765b388;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type jsonContext int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		none jsonContext = iota
0000000000000000000000000000000000000000;;		objKey
0000000000000000000000000000000000000000;;		objValue
0000000000000000000000000000000000000000;;		arrValue
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AnyIndex can be used in a pattern to match any array index.
0000000000000000000000000000000000000000;;	const AnyIndex = -2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// JsonPath is a slice of strings and/or integers. Each string specifies an JSON object key, and
0000000000000000000000000000000000000000;;	// each integer specifies an index into a JSON array.
0000000000000000000000000000000000000000;;	type JsonPath []interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *JsonPath) push(n interface{}) { *p = append(*p, n) }
0000000000000000000000000000000000000000;;	func (p *JsonPath) pop()               { *p = (*p)[:len(*p)-1] }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// increment the index at the top of the stack (must be an array index)
0000000000000000000000000000000000000000;;	func (p *JsonPath) incTop() { (*p)[len(*p)-1] = (*p)[len(*p)-1].(int) + 1 }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// name the key at the top of the stack (must be an object key)
0000000000000000000000000000000000000000;;	func (p *JsonPath) nameTop(n string) { (*p)[len(*p)-1] = n }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// infer the context from the item at the top of the stack
0000000000000000000000000000000000000000;;	func (p *JsonPath) inferContext() jsonContext {
0000000000000000000000000000000000000000;;		if len(*p) == 0 {
0000000000000000000000000000000000000000;;			return none
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		t := (*p)[len(*p)-1]
0000000000000000000000000000000000000000;;		switch t.(type) {
0000000000000000000000000000000000000000;;		case string:
0000000000000000000000000000000000000000;;			return objKey
0000000000000000000000000000000000000000;;		case int:
0000000000000000000000000000000000000000;;			return arrValue
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic(fmt.Sprintf("Invalid stack type %T", t))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equal tests for equality between two JsonPath types.
0000000000000000000000000000000000000000;;	func (p *JsonPath) Equal(o JsonPath) bool {
0000000000000000000000000000000000000000;;		if len(*p) != len(o) {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, v := range *p {
0000000000000000000000000000000000000000;;			if v != o[i] {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *JsonPath) HasPrefix(o JsonPath) bool {
0000000000000000000000000000000000000000;;		for i, v := range o {
0000000000000000000000000000000000000000;;			if v != (*p)[i] {
0000000000000000000000000000000000000000;;				return false
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
