0000000000000000000000000000000000000000;;	package jsonpath
3bc88e1d995d86a78861e2f0fa2b69f7b765b388;;	
0000000000000000000000000000000000000000;;	// pathNode is used to construct a trie of paths to be matched
0000000000000000000000000000000000000000;;	type pathNode struct {
0000000000000000000000000000000000000000;;		matchOn    interface{} // string, or integer
0000000000000000000000000000000000000000;;		childNodes []pathNode
0000000000000000000000000000000000000000;;		action     DecodeAction
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// match climbs the trie to find a node that matches the given JSON path.
0000000000000000000000000000000000000000;;	func (n *pathNode) match(path JsonPath) *pathNode {
0000000000000000000000000000000000000000;;		var node *pathNode = n
0000000000000000000000000000000000000000;;		for _, ps := range path {
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for i, n := range node.childNodes {
0000000000000000000000000000000000000000;;				if n.matchOn == ps {
0000000000000000000000000000000000000000;;					node = &node.childNodes[i]
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				} else if _, ok := ps.(int); ok && n.matchOn == AnyIndex {
0000000000000000000000000000000000000000;;					node = &node.childNodes[i]
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				return nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return node
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PathActions represents a collection of DecodeAction functions that should be called at certain path positions
0000000000000000000000000000000000000000;;	// when scanning the JSON stream. PathActions can be created once and used many times in one or more JSON streams.
0000000000000000000000000000000000000000;;	type PathActions struct {
0000000000000000000000000000000000000000;;		node pathNode
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DecodeAction handlers are called by the Decoder when scanning objects. See PathActions.Add for more detail.
0000000000000000000000000000000000000000;;	type DecodeAction func(d *Decoder) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add specifies an action to call on the Decoder when the specified path is encountered.
0000000000000000000000000000000000000000;;	func (je *PathActions) Add(action DecodeAction, path ...interface{}) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var node *pathNode = &je.node
0000000000000000000000000000000000000000;;		for _, ps := range path {
0000000000000000000000000000000000000000;;			found := false
0000000000000000000000000000000000000000;;			for i, n := range node.childNodes {
0000000000000000000000000000000000000000;;				if n.matchOn == ps {
0000000000000000000000000000000000000000;;					node = &node.childNodes[i]
0000000000000000000000000000000000000000;;					found = true
0000000000000000000000000000000000000000;;					break
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !found {
0000000000000000000000000000000000000000;;				node.childNodes = append(node.childNodes, pathNode{matchOn: ps})
0000000000000000000000000000000000000000;;				node = &node.childNodes[len(node.childNodes)-1]
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		node.action = action
0000000000000000000000000000000000000000;;	}
