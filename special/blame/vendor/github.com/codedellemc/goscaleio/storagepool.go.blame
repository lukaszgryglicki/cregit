0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePool struct {
0000000000000000000000000000000000000000;;		StoragePool *types.StoragePool
0000000000000000000000000000000000000000;;		client      *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStoragePool(client *Client) *StoragePool {
0000000000000000000000000000000000000000;;		return &StoragePool{
0000000000000000000000000000000000000000;;			StoragePool: new(types.StoragePool),
0000000000000000000000000000000000000000;;			client:      client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewStoragePoolEx(client *Client, pool *types.StoragePool) *StoragePool {
0000000000000000000000000000000000000000;;		return &StoragePool{
0000000000000000000000000000000000000000;;			StoragePool: pool,
0000000000000000000000000000000000000000;;			client:      client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) CreateStoragePool(name string) (string, error) {
0000000000000000000000000000000000000000;;		endpoint := protectionDomain.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storagePoolParam := &types.StoragePoolParam{}
0000000000000000000000000000000000000000;;		storagePoolParam.Name = name
0000000000000000000000000000000000000000;;		storagePoolParam.ProtectionDomainID = protectionDomain.ProtectionDomain.ID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&storagePoolParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/types/StoragePool/instances")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := protectionDomain.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", protectionDomain.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := protectionDomain.client.retryCheckResp(&protectionDomain.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", errors.New("error reading body")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var sp types.StoragePoolResp
0000000000000000000000000000000000000000;;		err = json.Unmarshal(bs, &sp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sp.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) GetStoragePool(storagepoolhref string) (storagePools []*types.StoragePool, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := protectionDomain.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if storagepoolhref == "" {
0000000000000000000000000000000000000000;;			link, err := GetLink(protectionDomain.ProtectionDomain.Links, "/api/ProtectionDomain/relationship/StoragePool")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return []*types.StoragePool{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			endpoint.Path = storagepoolhref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := protectionDomain.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", protectionDomain.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := protectionDomain.client.retryCheckResp(&protectionDomain.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.StoragePool{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if storagepoolhref == "" {
0000000000000000000000000000000000000000;;			if err = protectionDomain.client.decodeBody(resp, &storagePools); err != nil {
0000000000000000000000000000000000000000;;				return []*types.StoragePool{}, fmt.Errorf("error decoding storage pool response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			storagePool := &types.StoragePool{}
0000000000000000000000000000000000000000;;			if err = protectionDomain.client.decodeBody(resp, &storagePool); err != nil {
0000000000000000000000000000000000000000;;				return []*types.StoragePool{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			storagePools = append(storagePools, storagePool)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return storagePools, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) FindStoragePool(id, name, href string) (storagePool *types.StoragePool, err error) {
0000000000000000000000000000000000000000;;		storagePools, err := protectionDomain.GetStoragePool(href)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.StoragePool{}, fmt.Errorf("Error getting protection domains %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, storagePool = range storagePools {
0000000000000000000000000000000000000000;;			if storagePool.ID == id || storagePool.Name == name || href != "" {
0000000000000000000000000000000000000000;;				return storagePool, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &types.StoragePool{}, errors.New("Couldn't find protection domain")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (storagePool *StoragePool) GetStatistics() (statistics *types.Statistics, err error) {
0000000000000000000000000000000000000000;;		link, err := GetLink(storagePool.StoragePool.Links, "/api/StoragePool/relationship/Statistics")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := storagePool.client.SIOEndpoint
0000000000000000000000000000000000000000;;		endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := storagePool.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", storagePool.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+storagePool.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := storagePool.client.retryCheckResp(&storagePool.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = storagePool.client.decodeBody(resp, &statistics); err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return statistics, nil
0000000000000000000000000000000000000000;;	}
