0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProtectionDomain struct {
0000000000000000000000000000000000000000;;		ProtectionDomain *types.ProtectionDomain
0000000000000000000000000000000000000000;;		client           *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProtectionDomain(client *Client) *ProtectionDomain {
0000000000000000000000000000000000000000;;		return &ProtectionDomain{
0000000000000000000000000000000000000000;;			ProtectionDomain: new(types.ProtectionDomain),
0000000000000000000000000000000000000000;;			client:           client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewProtectionDomainEx(client *Client, pd *types.ProtectionDomain) *ProtectionDomain {
0000000000000000000000000000000000000000;;		return &ProtectionDomain{
0000000000000000000000000000000000000000;;			ProtectionDomain: pd,
0000000000000000000000000000000000000000;;			client:           client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) CreateProtectionDomain(name string) (string, error) {
0000000000000000000000000000000000000000;;		endpoint := system.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		protectionDomainParam := &types.ProtectionDomainParam{}
0000000000000000000000000000000000000000;;		protectionDomainParam.Name = name
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&protectionDomainParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/types/ProtectionDomain/instances")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := system.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", system.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := system.client.retryCheckResp(&system.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", errors.New("error reading body")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var pd types.ProtectionDomainResp
0000000000000000000000000000000000000000;;		err = json.Unmarshal(bs, &pd)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pd.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) GetProtectionDomain(protectiondomainhref string) (protectionDomains []*types.ProtectionDomain, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := system.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if protectiondomainhref == "" {
0000000000000000000000000000000000000000;;			link, err := GetLink(system.System.Links, "/api/System/relationship/ProtectionDomain")
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return []*types.ProtectionDomain{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			endpoint.Path = protectiondomainhref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := system.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", system.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := system.client.retryCheckResp(&system.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.ProtectionDomain{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if protectiondomainhref == "" {
0000000000000000000000000000000000000000;;			if err = system.client.decodeBody(resp, &protectionDomains); err != nil {
0000000000000000000000000000000000000000;;				return []*types.ProtectionDomain{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			protectionDomain := &types.ProtectionDomain{}
0000000000000000000000000000000000000000;;			if err = system.client.decodeBody(resp, &protectionDomain); err != nil {
0000000000000000000000000000000000000000;;				return []*types.ProtectionDomain{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			protectionDomains = append(protectionDomains, protectionDomain)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		// if err != nil {
0000000000000000000000000000000000000000;;		// 	return []types.ProtectionDomain{}, errors.New("error reading body")
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// fmt.Println(string(bs))
0000000000000000000000000000000000000000;;		// log.Fatalf("here")
0000000000000000000000000000000000000000;;		// return []types.ProtectionDomain{}, nil
0000000000000000000000000000000000000000;;		return protectionDomains, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) FindProtectionDomain(id, name, href string) (protectionDomain *types.ProtectionDomain, err error) {
0000000000000000000000000000000000000000;;		protectionDomains, err := system.GetProtectionDomain(href)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.ProtectionDomain{}, fmt.Errorf("Error getting protection domains %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, protectionDomain = range protectionDomains {
0000000000000000000000000000000000000000;;			if protectionDomain.ID == id || protectionDomain.Name == name || href != "" {
0000000000000000000000000000000000000000;;				return protectionDomain, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &types.ProtectionDomain{}, errors.New("Couldn't find protection domain")
0000000000000000000000000000000000000000;;	}
