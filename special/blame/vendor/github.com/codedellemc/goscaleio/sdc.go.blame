0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"os/exec"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sdc struct {
0000000000000000000000000000000000000000;;		Sdc    *types.Sdc
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSdc(client *Client, sdc *types.Sdc) *Sdc {
0000000000000000000000000000000000000000;;		return &Sdc{
0000000000000000000000000000000000000000;;			Sdc:    sdc,
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) GetSdc() (sdcs []types.Sdc, err error) {
0000000000000000000000000000000000000000;;		endpoint := system.client.SIOEndpoint
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/instances/System::%v/relationships/Sdc", system.System.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := system.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", system.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := system.client.retryCheckResp(&system.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []types.Sdc{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = system.client.decodeBody(resp, &sdcs); err != nil {
0000000000000000000000000000000000000000;;			return []types.Sdc{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		// if err != nil {
0000000000000000000000000000000000000000;;		// 	return []types.Sdc{}, errors.New("error reading body")
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// fmt.Println(string(bs))
0000000000000000000000000000000000000000;;		// log.Fatalf("here")
0000000000000000000000000000000000000000;;		// return []types.Sdc{}, nil
0000000000000000000000000000000000000000;;		return sdcs, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) FindSdc(field, value string) (sdc *Sdc, err error) {
0000000000000000000000000000000000000000;;		sdcs, err := system.GetSdc()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &Sdc{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, sdc := range sdcs {
0000000000000000000000000000000000000000;;			valueOf := reflect.ValueOf(sdc)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case reflect.Indirect(valueOf).FieldByName(field).String() == value:
0000000000000000000000000000000000000000;;				return NewSdc(system.client, &sdc), nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &Sdc{}, errors.New("Couldn't find SDC")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdc *Sdc) GetStatistics() (statistics *types.Statistics, err error) {
0000000000000000000000000000000000000000;;		endpoint := sdc.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		link, err := GetLink(sdc.Sdc.Links, "/api/Sdc/relationship/Statistics")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := sdc.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", sdc.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+sdc.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := sdc.client.retryCheckResp(&sdc.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = sdc.client.decodeBody(resp, &statistics); err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return statistics, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sdc *Sdc) GetVolume() (volumes []*types.Volume, err error) {
0000000000000000000000000000000000000000;;		endpoint := sdc.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		link, err := GetLink(sdc.Sdc.Links, "/api/Sdc/relationship/Volume")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.Volume{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := sdc.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", sdc.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+sdc.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := sdc.client.retryCheckResp(&sdc.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.Volume{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = sdc.client.decodeBody(resp, &volumes); err != nil {
0000000000000000000000000000000000000000;;			return []*types.Volume{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return volumes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func GetSdcLocalGUID() (sdcGUID string, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// get sdc kernel guid
0000000000000000000000000000000000000000;;		// /bin/emc/scaleio/drv_cfg --query_guid
0000000000000000000000000000000000000000;;		// sdcKernelGuid := "271bad82-08ee-44f2-a2b1-7e2787c27be1"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		out, err := exec.Command("/opt/emc/scaleio/sdc/bin/drv_cfg", "--query_guid").Output()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Error querying volumes: ", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sdcGUID = strings.Replace(string(out), "\n", "", -1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sdcGUID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (volume *Volume) MapVolumeSdc(mapVolumeSdcParam *types.MapVolumeSdcParam) (err error) {
0000000000000000000000000000000000000000;;		endpoint := volume.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/instances/Volume::%s/action/addMappedSdc", volume.Volume.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&mapVolumeSdcParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			log.Fatalf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := volume.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", volume.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+volume.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+volume.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := volume.client.retryCheckResp(&volume.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (volume *Volume) UnmapVolumeSdc(unmapVolumeSdcParam *types.UnmapVolumeSdcParam) (err error) {
0000000000000000000000000000000000000000;;		endpoint := volume.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/instances/Volume::%s/action/removeMappedSdc", volume.Volume.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&unmapVolumeSdcParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := volume.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", volume.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+volume.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+volume.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := volume.client.retryCheckResp(&volume.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
