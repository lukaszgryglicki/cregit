0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Device struct {
0000000000000000000000000000000000000000;;		Device *types.Device
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDevice(client *Client) *Device {
0000000000000000000000000000000000000000;;		return &Device{
0000000000000000000000000000000000000000;;			Device: new(types.Device),
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDeviceEx(client *Client, device *types.Device) *Device {
0000000000000000000000000000000000000000;;		return &Device{
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (storagePool *StoragePool) AttachDevice(path string, sdsID string) (string, error) {
0000000000000000000000000000000000000000;;		endpoint := storagePool.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		deviceParam := &types.DeviceParam{}
0000000000000000000000000000000000000000;;		deviceParam.Name = path
0000000000000000000000000000000000000000;;		deviceParam.DeviceCurrentPathname = path
0000000000000000000000000000000000000000;;		deviceParam.StoragePoolID = storagePool.StoragePool.ID
0000000000000000000000000000000000000000;;		deviceParam.SdsID = sdsID
0000000000000000000000000000000000000000;;		deviceParam.TestMode = "testAndActivate"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&deviceParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/types/Device/instances")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := storagePool.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", storagePool.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+storagePool.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+storagePool.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := storagePool.client.retryCheckResp(&storagePool.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", errors.New("error reading body")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var dev types.DeviceResp
0000000000000000000000000000000000000000;;		err = json.Unmarshal(bs, &dev)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return dev.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (storagePool *StoragePool) GetDevice() (devices []types.Device, err error) {
0000000000000000000000000000000000000000;;		endpoint := storagePool.client.SIOEndpoint
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/instances/StoragePool::%v/relationships/Device", storagePool.StoragePool.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := storagePool.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", storagePool.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+storagePool.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := storagePool.client.retryCheckResp(&storagePool.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []types.Device{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = storagePool.client.decodeBody(resp, &devices); err != nil {
0000000000000000000000000000000000000000;;			return []types.Device{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return devices, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (storagePool *StoragePool) FindDevice(field, value string) (device *types.Device, err error) {
0000000000000000000000000000000000000000;;		devices, err := storagePool.GetDevice()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Device{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, device := range devices {
0000000000000000000000000000000000000000;;			valueOf := reflect.ValueOf(device)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case reflect.Indirect(valueOf).FieldByName(field).String() == value:
0000000000000000000000000000000000000000;;				return &device, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &types.Device{}, errors.New("Couldn't find DEV")
0000000000000000000000000000000000000000;;	}
