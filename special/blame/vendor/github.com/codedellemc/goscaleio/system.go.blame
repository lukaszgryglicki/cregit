0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type System struct {
0000000000000000000000000000000000000000;;		System *types.System
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSystem(client *Client) *System {
0000000000000000000000000000000000000000;;		return &System{
0000000000000000000000000000000000000000;;			System: new(types.System),
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) FindSystem(instanceID, name, href string) (*System, error) {
0000000000000000000000000000000000000000;;		systems, err := client.GetInstance(href)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &System{}, fmt.Errorf("err: problem getting instances: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, system := range systems {
0000000000000000000000000000000000000000;;			if system.ID == instanceID || system.Name == name || href != "" {
0000000000000000000000000000000000000000;;				outSystem := NewSystem(client)
0000000000000000000000000000000000000000;;				outSystem.System = system
0000000000000000000000000000000000000000;;				return outSystem, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &System{}, fmt.Errorf("err: systemid or systemname not found")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) GetStatistics() (statistics *types.Statistics, err error) {
0000000000000000000000000000000000000000;;		endpoint := system.client.SIOEndpoint
0000000000000000000000000000000000000000;;		// endpoint.Path = fmt.Sprintf("/api/instances/System::%v/relationships/Statistics", system.System.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		link, err := GetLink(system.System.Links, "/api/System/relationship/Statistics")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint.Path = link.HREF
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := system.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", system.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := system.client.retryCheckResp(&system.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = system.client.decodeBody(resp, &statistics); err != nil {
0000000000000000000000000000000000000000;;			return &types.Statistics{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		// if err != nil {
0000000000000000000000000000000000000000;;		// 	return errors.New("error reading body")
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;		//
0000000000000000000000000000000000000000;;		// fmt.Println(string(bs))
0000000000000000000000000000000000000000;;		return statistics, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (system *System) CreateSnapshotConsistencyGroup(snapshotVolumesParam *types.SnapshotVolumesParam) (snapshotVolumesResp *types.SnapshotVolumesResp, err error) {
0000000000000000000000000000000000000000;;		endpoint := system.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		link, err := GetLink(system.System.Links, "self")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.SnapshotVolumesResp{}, errors.New("Error: problem finding link")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("%v/action/snapshotVolumes", link.HREF)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&snapshotVolumesParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.SnapshotVolumesResp{}, fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := system.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", system.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+system.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := system.client.retryCheckResp(&system.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.SnapshotVolumesResp{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = system.client.decodeBody(resp, &snapshotVolumesResp); err != nil {
0000000000000000000000000000000000000000;;			return &types.SnapshotVolumesResp{}, fmt.Errorf("error decoding snapshotvolumes response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return snapshotVolumesResp, nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
