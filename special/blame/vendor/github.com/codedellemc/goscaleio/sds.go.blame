0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sds struct {
0000000000000000000000000000000000000000;;		Sds    *types.Sds
0000000000000000000000000000000000000000;;		client *Client
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSds(client *Client) *Sds {
0000000000000000000000000000000000000000;;		return &Sds{
0000000000000000000000000000000000000000;;			Sds:    new(types.Sds),
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSdsEx(client *Client, sds *types.Sds) *Sds {
0000000000000000000000000000000000000000;;		return &Sds{
0000000000000000000000000000000000000000;;			Sds:    sds,
0000000000000000000000000000000000000000;;			client: client,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) CreateSds(name string, ipList []string) (string, error) {
0000000000000000000000000000000000000000;;		endpoint := protectionDomain.client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		sdsParam := &types.SdsParam{}
0000000000000000000000000000000000000000;;		sdsParam.Name = name
0000000000000000000000000000000000000000;;		sdsParam.ProtectionDomainID = protectionDomain.ProtectionDomain.ID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(ipList) == 0 {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("Must provide at least 1 SDS IP")
0000000000000000000000000000000000000000;;		} else if len(ipList) == 1 {
0000000000000000000000000000000000000000;;			sdsIP := types.SdsIp{IP: ipList[0], Role: "all"}
0000000000000000000000000000000000000000;;			sdsIPList := &types.SdsIpList{sdsIP}
0000000000000000000000000000000000000000;;			sdsParam.IPList = append(sdsParam.IPList, sdsIPList)
0000000000000000000000000000000000000000;;		} else if len(ipList) >= 2 {
0000000000000000000000000000000000000000;;			sdsIP1 := types.SdsIp{IP: ipList[0], Role: "sdcOnly"}
0000000000000000000000000000000000000000;;			sdsIP2 := types.SdsIp{IP: ipList[1], Role: "sdsOnly"}
0000000000000000000000000000000000000000;;			sdsIPList1 := &types.SdsIpList{sdsIP1}
0000000000000000000000000000000000000000;;			sdsIPList2 := &types.SdsIpList{sdsIP2}
0000000000000000000000000000000000000000;;			sdsParam.IPList = append(sdsParam.IPList, sdsIPList1)
0000000000000000000000000000000000000000;;			sdsParam.IPList = append(sdsParam.IPList, sdsIPList2)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&sdsParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/types/Sds/instances")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := protectionDomain.client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", protectionDomain.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := protectionDomain.client.retryCheckResp(&protectionDomain.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", errors.New("error reading body")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var sds types.SdsResp
0000000000000000000000000000000000000000;;		err = json.Unmarshal(bs, &sds)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sds.ID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) GetSds() (sdss []types.Sds, err error) {
0000000000000000000000000000000000000000;;		endpoint := protectionDomain.client.SIOEndpoint
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/instances/ProtectionDomain::%v/relationships/Sds", protectionDomain.ProtectionDomain.ID)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := protectionDomain.client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", protectionDomain.client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+protectionDomain.client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := protectionDomain.client.retryCheckResp(&protectionDomain.client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []types.Sds{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = protectionDomain.client.decodeBody(resp, &sdss); err != nil {
0000000000000000000000000000000000000000;;			return []types.Sds{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return sdss, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (protectionDomain *ProtectionDomain) FindSds(field, value string) (sds *types.Sds, err error) {
0000000000000000000000000000000000000000;;		sdss, err := protectionDomain.GetSds()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.Sds{}, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, sds := range sdss {
0000000000000000000000000000000000000000;;			valueOf := reflect.ValueOf(sds)
0000000000000000000000000000000000000000;;			switch {
0000000000000000000000000000000000000000;;			case reflect.Indirect(valueOf).FieldByName(field).String() == value:
0000000000000000000000000000000000000000;;				return &sds, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &types.Sds{}, errors.New("Couldn't find SDS")
0000000000000000000000000000000000000000;;	}
