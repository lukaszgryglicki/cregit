0000000000000000000000000000000000000000;;	package goscaleio
035d8c1abe71a2fddb25ce05367578ce9dfeca59;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types "github.com/codedellemc/goscaleio/types/v1"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) GetInstance(systemhref string) (systems []*types.System, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := client.SIOEndpoint
0000000000000000000000000000000000000000;;		if systemhref == "" {
0000000000000000000000000000000000000000;;			endpoint.Path += "/types/System/instances"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			endpoint.Path = systemhref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.retryCheckResp(&client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.System{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if systemhref == "" {
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &systems); err != nil {
0000000000000000000000000000000000000000;;				return []*types.System{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			system := &types.System{}
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &system); err != nil {
0000000000000000000000000000000000000000;;				return []*types.System{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			systems = append(systems, system)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		// if err != nil {
0000000000000000000000000000000000000000;;		// 	return types.Systems{}, errors.New("error reading body")
0000000000000000000000000000000000000000;;		// }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return systems, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) GetVolume(volumehref, volumeid, ancestorvolumeid, volumename string, getSnapshots bool) (volumes []*types.Volume, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if volumename != "" {
0000000000000000000000000000000000000000;;			volumeid, err = client.FindVolumeID(volumename)
0000000000000000000000000000000000000000;;			if err != nil && err.Error() == "Not found" {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return []*types.Volume{}, fmt.Errorf("Error: problem finding volume: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if volumeid != "" {
0000000000000000000000000000000000000000;;			endpoint.Path = fmt.Sprintf("/api/instances/Volume::%s", volumeid)
0000000000000000000000000000000000000000;;		} else if volumehref == "" {
0000000000000000000000000000000000000000;;			endpoint.Path = "/api/types/Volume/instances"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			endpoint.Path = volumehref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.retryCheckResp(&client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.Volume{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if volumehref == "" && volumeid == "" {
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &volumes); err != nil {
0000000000000000000000000000000000000000;;				return []*types.Volume{}, fmt.Errorf("error decoding storage pool response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			var volumesNew []*types.Volume
0000000000000000000000000000000000000000;;			for _, volume := range volumes {
0000000000000000000000000000000000000000;;				if (!getSnapshots && volume.AncestorVolumeID == ancestorvolumeid) || (getSnapshots && volume.AncestorVolumeID != "") {
0000000000000000000000000000000000000000;;					volumesNew = append(volumesNew, volume)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			volumes = volumesNew
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			volume := &types.Volume{}
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &volume); err != nil {
0000000000000000000000000000000000000000;;				return []*types.Volume{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			volumes = append(volumes, volume)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return volumes, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) FindVolumeID(volumename string) (volumeID string, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeQeryIdByKeyParam := &types.VolumeQeryIdByKeyParam{}
0000000000000000000000000000000000000000;;		volumeQeryIdByKeyParam.Name = volumename
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&volumeQeryIdByKeyParam)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		endpoint.Path = fmt.Sprintf("/api/types/Volume/instances/action/queryIdByKey")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.retryCheckResp(&client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		bs, err := ioutil.ReadAll(resp.Body)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", errors.New("error reading body")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeID = string(bs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volumeID = strings.TrimRight(volumeID, `"`)
0000000000000000000000000000000000000000;;		volumeID = strings.TrimLeft(volumeID, `"`)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return volumeID, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) CreateVolume(volume *types.VolumeParam, storagePoolName string) (volumeResp *types.VolumeResp, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint.Path = "/api/types/Volume/instances"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		storagePool, err := client.FindStoragePool("", storagePoolName, "")
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		volume.StoragePoolID = storagePool.ID
0000000000000000000000000000000000000000;;		volume.ProtectionDomainID = storagePool.ProtectionDomainID
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		jsonOutput, err := json.Marshal(&volume)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.VolumeResp{}, fmt.Errorf("error marshaling: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := client.NewRequest(map[string]string{}, "POST", endpoint, bytes.NewBufferString(string(jsonOutput)))
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;		req.Header.Add("Content-Type", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.retryCheckResp(&client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.VolumeResp{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err = client.decodeBody(resp, &volumeResp); err != nil {
0000000000000000000000000000000000000000;;			return &types.VolumeResp{}, fmt.Errorf("error decoding volume creation response: %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return volumeResp, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) GetStoragePool(storagepoolhref string) (storagePools []*types.StoragePool, err error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		endpoint := client.SIOEndpoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if storagepoolhref == "" {
0000000000000000000000000000000000000000;;			endpoint.Path = "/api/types/StoragePool/instances"
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			endpoint.Path = storagepoolhref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := client.NewRequest(map[string]string{}, "GET", endpoint, nil)
0000000000000000000000000000000000000000;;		req.SetBasicAuth("", client.Token)
0000000000000000000000000000000000000000;;		req.Header.Add("Accept", "application/json;version="+client.configConnect.Version)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp, err := client.retryCheckResp(&client.Http, req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return []*types.StoragePool{}, fmt.Errorf("problem getting response: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer resp.Body.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if storagepoolhref == "" {
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &storagePools); err != nil {
0000000000000000000000000000000000000000;;				return []*types.StoragePool{}, fmt.Errorf("error decoding storage pool response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			storagePool := &types.StoragePool{}
0000000000000000000000000000000000000000;;			if err = client.decodeBody(resp, &storagePool); err != nil {
0000000000000000000000000000000000000000;;				return []*types.StoragePool{}, fmt.Errorf("error decoding instances response: %s", err)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			storagePools = append(storagePools, storagePool)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return storagePools, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (client *Client) FindStoragePool(id, name, href string) (storagePool *types.StoragePool, err error) {
0000000000000000000000000000000000000000;;		storagePools, err := client.GetStoragePool(href)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return &types.StoragePool{}, fmt.Errorf("Error getting storage pool %s", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, storagePool = range storagePools {
0000000000000000000000000000000000000000;;			if storagePool.ID == id || storagePool.Name == name || href != "" {
0000000000000000000000000000000000000000;;				return storagePool, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &types.StoragePool{}, errors.New("Couldn't find storage pool")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	}
