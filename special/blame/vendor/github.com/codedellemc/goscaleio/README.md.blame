0000000000000000000000000000000000000000;;	# Goscaleio
0000000000000000000000000000000000000000;;	The *Goscaleio* project represents API bindings that can be used to provide ScaleIO functionality into other Go applications.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	- [Current State](#state)
0000000000000000000000000000000000000000;;	- [Usage](#usage)
0000000000000000000000000000000000000000;;	- [Licensing](#licensing)
0000000000000000000000000000000000000000;;	- [Support](#support)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Use Cases
0000000000000000000000000000000000000000;;	Any application written in Go can take advantage of these bindings.  Specifically, things that are involved in monitoring, management, and more specifically infrastructrue as code would find these bindings relevant.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## <a id="state">Current State</a>
0000000000000000000000000000000000000000;;	Early build-out and pre-documentation stages.  The basics around authentication and object models are there.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## <a id="usage">Usage</a>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Logging in
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    client, err := goscaleio.NewClient()
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("err: %v", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    _, err = client.Authenticate(&goscaleio.ConfigConnect{endpoint, username, password})
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("error authenticating: %v", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    fmt.Println("Successfuly logged in to ScaleIO Gateway at", client.SIOEndpoint.String())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Reusing the authentication token
0000000000000000000000000000000000000000;;	Once a client struct is created via the ```NewClient()``` function, you can replace the ```Token``` with the saved token.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    client, err := goscaleio.NewClient()
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("error with NewClient: %s", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    client.Token = oldToken
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Get Systems
0000000000000000000000000000000000000000;;	Retrieving systems is the first step after authentication which enables you to work with other necessary methods.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### All Systems
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    systems, err := client.GetInstance()
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("err: problem getting instance %v", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Find a System
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    system, err := client.FindSystem(systemid,"","")
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("err: problem getting instance %v", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Get Protection Domains
0000000000000000000000000000000000000000;;	Once you have a ```System``` struct you can then get other things like ```Protection Domains```.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    protectiondomains, err := system.GetProtectionDomain()
0000000000000000000000000000000000000000;;	    if err != nil {
0000000000000000000000000000000000000000;;	      log.Fatalf("error getting protection domains: %v", err)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	<a id="licensing">Licensing</a>
0000000000000000000000000000000000000000;;	---------
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at <http://www.apache.org/licenses/LICENSE-2.0>
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	<a id="support">Support</a>
0000000000000000000000000000000000000000;;	-------
0000000000000000000000000000000000000000;;	Please file bugs and issues at the Github issues page. For more general discussions you can contact the EMC Code team at <a href="https://groups.google.com/forum/#!forum/emccode-users">Google Groups</a> or tagged with **EMC** on <a href="https://stackoverflow.com">Stackoverflow.com</a>. The code and documentation are released with no warranties or SLAs and are intended to be supported through a community driven process.
