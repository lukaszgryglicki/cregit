0000000000000000000000000000000000000000;;	# go-bindata-assetfs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Serve embedded files from [jteeuwen/go-bindata](https://github.com/jteeuwen/go-bindata) with `net/http`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[GoDoc](http://godoc.org/github.com/elazarl/go-bindata-assetfs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Installation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Install with
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    $ go get github.com/jteeuwen/go-bindata/...
0000000000000000000000000000000000000000;;	    $ go get github.com/elazarl/go-bindata-assetfs/...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Creating embedded data
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Usage is identical to [jteeuwen/go-bindata](https://github.com/jteeuwen/go-bindata) usage,
0000000000000000000000000000000000000000;;	instead of running `go-bindata` run `go-bindata-assetfs`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The tool will create a `bindata_assetfs.go` file, which contains the embedded data.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A typical use case is
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    $ go-bindata-assetfs data/...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Using assetFS in your code
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The generated file provides an `assetFS()` function that returns a `http.Filesystem`
0000000000000000000000000000000000000000;;	wrapping the embedded files. What you usually want to do is:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http.Handle("/", http.FileServer(assetFS()))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This would run an HTTP server serving the embedded files.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Without running binary tool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can always just run the `go-bindata` tool, and then
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	use
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	     import "github.com/elazarl/go-bindata-assetfs"
0000000000000000000000000000000000000000;;	     ...
0000000000000000000000000000000000000000;;	     http.Handle("/",
0000000000000000000000000000000000000000;;	        http.FileServer(
0000000000000000000000000000000000000000;;	        &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: "data"}))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	to serve files embedded from the `data` directory.
