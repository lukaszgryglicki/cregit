0000000000000000000000000000000000000000;;	package goproxy
d1fe717eabb388da4fbd9a76bce087a5ce94de70;Godeps/_workspace/src/github.com/elazarl/goproxy/responses.go[Godeps/_workspace/src/github.com/elazarl/goproxy/responses.go][vendor/github.com/elazarl/goproxy/responses.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"io/ioutil"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Will generate a valid http response to the given request the response will have
0000000000000000000000000000000000000000;;	// the given contentType, and http status.
0000000000000000000000000000000000000000;;	// Typical usage, refuse to process requests to local addresses:
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//	proxy.OnRequest(IsLocalHost()).DoFunc(func(r *http.Request, ctx *goproxy.ProxyCtx) (*http.Request,*http.Response) {
0000000000000000000000000000000000000000;;	//		return nil,NewResponse(r,goproxy.ContentTypeHtml,http.StatusUnauthorized,
0000000000000000000000000000000000000000;;	//			`<!doctype html><html><head><title>Can't use proxy for local addresses</title></head><body/></html>`)
0000000000000000000000000000000000000000;;	//	})
0000000000000000000000000000000000000000;;	func NewResponse(r *http.Request, contentType string, status int, body string) *http.Response {
0000000000000000000000000000000000000000;;		resp := &http.Response{}
0000000000000000000000000000000000000000;;		resp.Request = r
0000000000000000000000000000000000000000;;		resp.TransferEncoding = r.TransferEncoding
0000000000000000000000000000000000000000;;		resp.Header = make(http.Header)
0000000000000000000000000000000000000000;;		resp.Header.Add("Content-Type", contentType)
0000000000000000000000000000000000000000;;		resp.StatusCode = status
0000000000000000000000000000000000000000;;		buf := bytes.NewBufferString(body)
0000000000000000000000000000000000000000;;		resp.ContentLength = int64(buf.Len())
0000000000000000000000000000000000000000;;		resp.Body = ioutil.NopCloser(buf)
0000000000000000000000000000000000000000;;		return resp
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ContentTypeText = "text/plain"
0000000000000000000000000000000000000000;;		ContentTypeHtml = "text/html"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Alias for NewResponse(r,ContentTypeText,http.StatusAccepted,text)
0000000000000000000000000000000000000000;;	func TextResponse(r *http.Request, text string) *http.Response {
0000000000000000000000000000000000000000;;		return NewResponse(r, ContentTypeText, http.StatusAccepted, text)
0000000000000000000000000000000000000000;;	}
