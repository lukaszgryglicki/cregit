0000000000000000000000000000000000000000;;	# Introduction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/elazarl/goproxy?status.svg)](https://godoc.org/github.com/elazarl/goproxy)
0000000000000000000000000000000000000000;;	[![Join the chat at https://gitter.im/elazarl/goproxy](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/elazarl/goproxy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Package goproxy provides a customizable HTTP proxy library for Go (golang),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	It supports regular HTTP proxy, HTTPS through CONNECT, and "hijacking" HTTPS
0000000000000000000000000000000000000000;;	connection using "Man in the Middle" style attack.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The intent of the proxy, is to be usable with reasonable amount of traffic
0000000000000000000000000000000000000000;;	yet, customizable and programmable.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The proxy itself is simply a `net/http` handler.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In order to use goproxy, one should set their browser to use goproxy as an HTTP
0000000000000000000000000000000000000000;;	proxy. Here is how you do that [in Chrome](https://support.google.com/chrome/answer/96815?hl=en)
0000000000000000000000000000000000000000;;	and [in Firefox](http://www.wikihow.com/Enter-Proxy-Settings-in-Firefox).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For example, the URL you should use as proxy when running `./bin/basic` is
0000000000000000000000000000000000000000;;	`localhost:8080`, as this is the default binding for the basic proxy.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Mailing List
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	New features would be discussed on the [mailing list](https://groups.google.com/forum/#!forum/goproxy-dev)
0000000000000000000000000000000000000000;;	before their development.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Latest Stable Release
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Get the latest goproxy from `gopkg.in/elazarl/goproxy.v1`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Why not Fiddler2?
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Fiddler is an excellent software with similar intent. However, Fiddler is not
0000000000000000000000000000000000000000;;	as customable as goproxy intend to be. The main difference is, Fiddler is not
0000000000000000000000000000000000000000;;	intended to be used as a real proxy.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A possible use case that suits goproxy but
0000000000000000000000000000000000000000;;	not Fiddler, is, gathering statistics on page load times for a certain website over a week.
0000000000000000000000000000000000000000;;	With goproxy you could ask all your users to set their proxy to a dedicated machine running a
0000000000000000000000000000000000000000;;	goproxy server. Fiddler is a GUI app not designed to be ran like a server for multiple users.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# A taste of goproxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To get a taste of `goproxy`, a basic HTTP/HTTPS transparent proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package main
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	    "github.com/elazarl/goproxy"
0000000000000000000000000000000000000000;;	    "log"
0000000000000000000000000000000000000000;;	    "net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;	    proxy := goproxy.NewProxyHttpServer()
0000000000000000000000000000000000000000;;	    proxy.Verbose = true
0000000000000000000000000000000000000000;;	    log.Fatal(http.ListenAndServe(":8080", proxy))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This line will add `X-GoProxy: yxorPoG-X` header to all requests sent through the proxy
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	proxy.OnRequest().DoFunc(
0000000000000000000000000000000000000000;;	    func(r *http.Request,ctx *goproxy.ProxyCtx)(*http.Request,*http.Response) {
0000000000000000000000000000000000000000;;	        r.Header.Set("X-GoProxy","yxorPoG-X")
0000000000000000000000000000000000000000;;	        return r,nil
0000000000000000000000000000000000000000;;	    })
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`DoFunc` will process all incoming requests to the proxy. It will add a header to the request
0000000000000000000000000000000000000000;;	and return it. The proxy will send the modified request.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Note that we returned nil value as the response. Have we returned a response, goproxy would
0000000000000000000000000000000000000000;;	have discarded the request and sent the new response to the client.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In order to refuse connections to reddit at work time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	proxy.OnRequest(goproxy.DstHostIs("www.reddit.com")).DoFunc(
0000000000000000000000000000000000000000;;	    func(r *http.Request,ctx *goproxy.ProxyCtx)(*http.Request,*http.Response) {
0000000000000000000000000000000000000000;;	        if h,_,_ := time.Now().Clock(); h >= 8 && h <= 17 {
0000000000000000000000000000000000000000;;	            return r,goproxy.NewResponse(r,
0000000000000000000000000000000000000000;;	                    goproxy.ContentTypeText,http.StatusForbidden,
0000000000000000000000000000000000000000;;	                    "Don't waste your time!")
0000000000000000000000000000000000000000;;	        }
0000000000000000000000000000000000000000;;	        return r,nil
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`DstHostIs` returns a `ReqCondition`, that is a function receiving a `Request` and returning a boolean
0000000000000000000000000000000000000000;;	we will only process requests that matches the condition. `DstHostIs("www.reddit.com")` will return
0000000000000000000000000000000000000000;;	a `ReqCondition` accepting only requests directed to "www.reddit.com".
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`DoFunc` will receive a function that will preprocess the request. We can change the request, or
0000000000000000000000000000000000000000;;	return a response. If the time is between 8:00am and 17:00pm, we will neglect the request, and
0000000000000000000000000000000000000000;;	return a precanned text response saying "do not waste your time".
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See additional examples in the examples directory.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# What's New
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  1. Ability to `Hijack` CONNECT requests. See
0000000000000000000000000000000000000000;;	[the eavesdropper example](https://github.com/elazarl/goproxy/blob/master/examples/goproxy-eavesdropper/main.go#L27)
0000000000000000000000000000000000000000;;	2.  Transparent proxy support for http/https including MITM certificate generation for TLS.  See the [transparent example.](https://github.com/elazarl/goproxy/tree/master/examples/goproxy-transparent)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# License
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	I put the software temporarily under the Go-compatible BSD license,
0000000000000000000000000000000000000000;;	if this prevents someone from using the software, do let me know and I'll consider changing it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	At any rate, user feedback is very important for me, so I'll be delighted to know if you're using this package.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Beta Software
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	I've received a positive feedback from a few people who use goproxy in production settings.
0000000000000000000000000000000000000000;;	I believe it is good enough for usage.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	I'll try to keep reasonable backwards compatibility. In case of a major API change,
0000000000000000000000000000000000000000;;	I'll change the import path.
