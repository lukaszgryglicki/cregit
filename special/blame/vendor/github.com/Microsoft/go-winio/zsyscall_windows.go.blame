0000000000000000000000000000000000000000;;	// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/Microsoft/go-winio/zsyscall.go[Godeps/_workspace/src/github.com/Microsoft/go-winio/zsyscall.go][vendor/github.com/Microsoft/go-winio/zsyscall_windows.go];	
0000000000000000000000000000000000000000;;	package winio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/sys/windows"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var _ unsafe.Pointer
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Do the interface allocations only once for common
0000000000000000000000000000000000000000;;	// Errno values.
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		errnoERROR_IO_PENDING = 997
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// errnoErr returns common boxed Errno values, to prevent
0000000000000000000000000000000000000000;;	// allocations at runtime.
0000000000000000000000000000000000000000;;	func errnoErr(e syscall.Errno) error {
0000000000000000000000000000000000000000;;		switch e {
0000000000000000000000000000000000000000;;		case 0:
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case errnoERROR_IO_PENDING:
0000000000000000000000000000000000000000;;			return errERROR_IO_PENDING
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		// TODO: add more here, after collecting data on the common
0000000000000000000000000000000000000000;;		// error values see on Windows. (perhaps when running
0000000000000000000000000000000000000000;;		// all.bat?)
0000000000000000000000000000000000000000;;		return e
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
0000000000000000000000000000000000000000;;		modwinmm    = windows.NewLazySystemDLL("winmm.dll")
0000000000000000000000000000000000000000;;		modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		procCancelIoEx                                           = modkernel32.NewProc("CancelIoEx")
0000000000000000000000000000000000000000;;		procCreateIoCompletionPort                               = modkernel32.NewProc("CreateIoCompletionPort")
0000000000000000000000000000000000000000;;		procGetQueuedCompletionStatus                            = modkernel32.NewProc("GetQueuedCompletionStatus")
0000000000000000000000000000000000000000;;		procSetFileCompletionNotificationModes                   = modkernel32.NewProc("SetFileCompletionNotificationModes")
0000000000000000000000000000000000000000;;		proctimeBeginPeriod                                      = modwinmm.NewProc("timeBeginPeriod")
0000000000000000000000000000000000000000;;		procConnectNamedPipe                                     = modkernel32.NewProc("ConnectNamedPipe")
0000000000000000000000000000000000000000;;		procCreateNamedPipeW                                     = modkernel32.NewProc("CreateNamedPipeW")
0000000000000000000000000000000000000000;;		procCreateFileW                                          = modkernel32.NewProc("CreateFileW")
0000000000000000000000000000000000000000;;		procWaitNamedPipeW                                       = modkernel32.NewProc("WaitNamedPipeW")
0000000000000000000000000000000000000000;;		procGetNamedPipeInfo                                     = modkernel32.NewProc("GetNamedPipeInfo")
0000000000000000000000000000000000000000;;		procGetNamedPipeHandleStateW                             = modkernel32.NewProc("GetNamedPipeHandleStateW")
0000000000000000000000000000000000000000;;		procLocalAlloc                                           = modkernel32.NewProc("LocalAlloc")
0000000000000000000000000000000000000000;;		procLookupAccountNameW                                   = modadvapi32.NewProc("LookupAccountNameW")
0000000000000000000000000000000000000000;;		procConvertSidToStringSidW                               = modadvapi32.NewProc("ConvertSidToStringSidW")
0000000000000000000000000000000000000000;;		procConvertStringSecurityDescriptorToSecurityDescriptorW = modadvapi32.NewProc("ConvertStringSecurityDescriptorToSecurityDescriptorW")
0000000000000000000000000000000000000000;;		procConvertSecurityDescriptorToStringSecurityDescriptorW = modadvapi32.NewProc("ConvertSecurityDescriptorToStringSecurityDescriptorW")
0000000000000000000000000000000000000000;;		procLocalFree                                            = modkernel32.NewProc("LocalFree")
0000000000000000000000000000000000000000;;		procGetSecurityDescriptorLength                          = modadvapi32.NewProc("GetSecurityDescriptorLength")
0000000000000000000000000000000000000000;;		procGetFileInformationByHandleEx                         = modkernel32.NewProc("GetFileInformationByHandleEx")
0000000000000000000000000000000000000000;;		procSetFileInformationByHandle                           = modkernel32.NewProc("SetFileInformationByHandle")
0000000000000000000000000000000000000000;;		procAdjustTokenPrivileges                                = modadvapi32.NewProc("AdjustTokenPrivileges")
0000000000000000000000000000000000000000;;		procImpersonateSelf                                      = modadvapi32.NewProc("ImpersonateSelf")
0000000000000000000000000000000000000000;;		procRevertToSelf                                         = modadvapi32.NewProc("RevertToSelf")
0000000000000000000000000000000000000000;;		procOpenThreadToken                                      = modadvapi32.NewProc("OpenThreadToken")
0000000000000000000000000000000000000000;;		procGetCurrentThread                                     = modkernel32.NewProc("GetCurrentThread")
0000000000000000000000000000000000000000;;		procLookupPrivilegeValueW                                = modadvapi32.NewProc("LookupPrivilegeValueW")
0000000000000000000000000000000000000000;;		procLookupPrivilegeNameW                                 = modadvapi32.NewProc("LookupPrivilegeNameW")
0000000000000000000000000000000000000000;;		procLookupPrivilegeDisplayNameW                          = modadvapi32.NewProc("LookupPrivilegeDisplayNameW")
0000000000000000000000000000000000000000;;		procBackupRead                                           = modkernel32.NewProc("BackupRead")
0000000000000000000000000000000000000000;;		procBackupWrite                                          = modkernel32.NewProc("BackupWrite")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func cancelIoEx(file syscall.Handle, o *syscall.Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procCancelIoEx.Addr(), 2, uintptr(file), uintptr(unsafe.Pointer(o)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createIoCompletionPort(file syscall.Handle, port syscall.Handle, key uintptr, threadCount uint32) (newport syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procCreateIoCompletionPort.Addr(), 4, uintptr(file), uintptr(port), uintptr(key), uintptr(threadCount), 0, 0)
0000000000000000000000000000000000000000;;		newport = syscall.Handle(r0)
0000000000000000000000000000000000000000;;		if newport == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getQueuedCompletionStatus(port syscall.Handle, bytes *uint32, key *uintptr, o **ioOperation, timeout uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetQueuedCompletionStatus.Addr(), 5, uintptr(port), uintptr(unsafe.Pointer(bytes)), uintptr(unsafe.Pointer(key)), uintptr(unsafe.Pointer(o)), uintptr(timeout), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setFileCompletionNotificationModes(h syscall.Handle, flags uint8) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procSetFileCompletionNotificationModes.Addr(), 2, uintptr(h), uintptr(flags), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func timeBeginPeriod(period uint32) (n int32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(proctimeBeginPeriod.Addr(), 1, uintptr(period), 0, 0)
0000000000000000000000000000000000000000;;		n = int32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func connectNamedPipe(pipe syscall.Handle, o *syscall.Overlapped) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procConnectNamedPipe.Addr(), 2, uintptr(pipe), uintptr(unsafe.Pointer(o)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createNamedPipe(name string, flags uint32, pipeMode uint32, maxInstances uint32, outSize uint32, inSize uint32, defaultTimeout uint32, sa *syscall.SecurityAttributes) (handle syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _createNamedPipe(_p0, flags, pipeMode, maxInstances, outSize, inSize, defaultTimeout, sa)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _createNamedPipe(name *uint16, flags uint32, pipeMode uint32, maxInstances uint32, outSize uint32, inSize uint32, defaultTimeout uint32, sa *syscall.SecurityAttributes) (handle syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall9(procCreateNamedPipeW.Addr(), 8, uintptr(unsafe.Pointer(name)), uintptr(flags), uintptr(pipeMode), uintptr(maxInstances), uintptr(outSize), uintptr(inSize), uintptr(defaultTimeout), uintptr(unsafe.Pointer(sa)), 0)
0000000000000000000000000000000000000000;;		handle = syscall.Handle(r0)
0000000000000000000000000000000000000000;;		if handle == syscall.InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func createFile(name string, access uint32, mode uint32, sa *syscall.SecurityAttributes, createmode uint32, attrs uint32, templatefile syscall.Handle) (handle syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _createFile(_p0, access, mode, sa, createmode, attrs, templatefile)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _createFile(name *uint16, access uint32, mode uint32, sa *syscall.SecurityAttributes, createmode uint32, attrs uint32, templatefile syscall.Handle) (handle syscall.Handle, err error) {
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall9(procCreateFileW.Addr(), 7, uintptr(unsafe.Pointer(name)), uintptr(access), uintptr(mode), uintptr(unsafe.Pointer(sa)), uintptr(createmode), uintptr(attrs), uintptr(templatefile), 0, 0)
0000000000000000000000000000000000000000;;		handle = syscall.Handle(r0)
0000000000000000000000000000000000000000;;		if handle == syscall.InvalidHandle {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func waitNamedPipe(name string, timeout uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _waitNamedPipe(_p0, timeout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _waitNamedPipe(name *uint16, timeout uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procWaitNamedPipeW.Addr(), 2, uintptr(unsafe.Pointer(name)), uintptr(timeout), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getNamedPipeInfo(pipe syscall.Handle, flags *uint32, outSize *uint32, inSize *uint32, maxInstances *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetNamedPipeInfo.Addr(), 5, uintptr(pipe), uintptr(unsafe.Pointer(flags)), uintptr(unsafe.Pointer(outSize)), uintptr(unsafe.Pointer(inSize)), uintptr(unsafe.Pointer(maxInstances)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getNamedPipeHandleState(pipe syscall.Handle, state *uint32, curInstances *uint32, maxCollectionCount *uint32, collectDataTimeout *uint32, userName *uint16, maxUserNameSize uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procGetNamedPipeHandleStateW.Addr(), 7, uintptr(pipe), uintptr(unsafe.Pointer(state)), uintptr(unsafe.Pointer(curInstances)), uintptr(unsafe.Pointer(maxCollectionCount)), uintptr(unsafe.Pointer(collectDataTimeout)), uintptr(unsafe.Pointer(userName)), uintptr(maxUserNameSize), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func localAlloc(uFlags uint32, length uint32) (ptr uintptr) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procLocalAlloc.Addr(), 2, uintptr(uFlags), uintptr(length), 0)
0000000000000000000000000000000000000000;;		ptr = uintptr(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lookupAccountName(systemName *uint16, accountName string, sid *byte, sidSize *uint32, refDomain *uint16, refDomainSize *uint32, sidNameUse *uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(accountName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _lookupAccountName(systemName, _p0, sid, sidSize, refDomain, refDomainSize, sidNameUse)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _lookupAccountName(systemName *uint16, accountName *uint16, sid *byte, sidSize *uint32, refDomain *uint16, refDomainSize *uint32, sidNameUse *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procLookupAccountNameW.Addr(), 7, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(accountName)), uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(sidSize)), uintptr(unsafe.Pointer(refDomain)), uintptr(unsafe.Pointer(refDomainSize)), uintptr(unsafe.Pointer(sidNameUse)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertSidToStringSid(sid *byte, str **uint16) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procConvertSidToStringSidW.Addr(), 2, uintptr(unsafe.Pointer(sid)), uintptr(unsafe.Pointer(str)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertStringSecurityDescriptorToSecurityDescriptor(str string, revision uint32, sd *uintptr, size *uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(str)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _convertStringSecurityDescriptorToSecurityDescriptor(_p0, revision, sd, size)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _convertStringSecurityDescriptorToSecurityDescriptor(str *uint16, revision uint32, sd *uintptr, size *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procConvertStringSecurityDescriptorToSecurityDescriptorW.Addr(), 4, uintptr(unsafe.Pointer(str)), uintptr(revision), uintptr(unsafe.Pointer(sd)), uintptr(unsafe.Pointer(size)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func convertSecurityDescriptorToStringSecurityDescriptor(sd *byte, revision uint32, secInfo uint32, sddl **uint16, sddlSize *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procConvertSecurityDescriptorToStringSecurityDescriptorW.Addr(), 5, uintptr(unsafe.Pointer(sd)), uintptr(revision), uintptr(secInfo), uintptr(unsafe.Pointer(sddl)), uintptr(unsafe.Pointer(sddlSize)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func localFree(mem uintptr) {
0000000000000000000000000000000000000000;;		syscall.Syscall(procLocalFree.Addr(), 1, uintptr(mem), 0, 0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getSecurityDescriptorLength(sd uintptr) (len uint32) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetSecurityDescriptorLength.Addr(), 1, uintptr(sd), 0, 0)
0000000000000000000000000000000000000000;;		len = uint32(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getFileInformationByHandleEx(h syscall.Handle, class uint32, buffer *byte, size uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procGetFileInformationByHandleEx.Addr(), 4, uintptr(h), uintptr(class), uintptr(unsafe.Pointer(buffer)), uintptr(size), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func setFileInformationByHandle(h syscall.Handle, class uint32, buffer *byte, size uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procSetFileInformationByHandle.Addr(), 4, uintptr(h), uintptr(class), uintptr(unsafe.Pointer(buffer)), uintptr(size), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func adjustTokenPrivileges(token windows.Token, releaseAll bool, input *byte, outputSize uint32, output *byte, requiredSize *uint32) (success bool, err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if releaseAll {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r0, _, e1 := syscall.Syscall6(procAdjustTokenPrivileges.Addr(), 6, uintptr(token), uintptr(_p0), uintptr(unsafe.Pointer(input)), uintptr(outputSize), uintptr(unsafe.Pointer(output)), uintptr(unsafe.Pointer(requiredSize)))
0000000000000000000000000000000000000000;;		success = r0 != 0
0000000000000000000000000000000000000000;;		if true {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func impersonateSelf(level uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procImpersonateSelf.Addr(), 1, uintptr(level), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func revertToSelf() (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procRevertToSelf.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func openThreadToken(thread syscall.Handle, accessMask uint32, openAsSelf bool, token *windows.Token) (err error) {
0000000000000000000000000000000000000000;;		var _p0 uint32
0000000000000000000000000000000000000000;;		if openAsSelf {
0000000000000000000000000000000000000000;;			_p0 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p0 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procOpenThreadToken.Addr(), 4, uintptr(thread), uintptr(accessMask), uintptr(_p0), uintptr(unsafe.Pointer(token)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getCurrentThread() (h syscall.Handle) {
0000000000000000000000000000000000000000;;		r0, _, _ := syscall.Syscall(procGetCurrentThread.Addr(), 0, 0, 0, 0)
0000000000000000000000000000000000000000;;		h = syscall.Handle(r0)
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lookupPrivilegeValue(systemName string, name string, luid *uint64) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(systemName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 *uint16
0000000000000000000000000000000000000000;;		_p1, err = syscall.UTF16PtrFromString(name)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _lookupPrivilegeValue(_p0, _p1, luid)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _lookupPrivilegeValue(systemName *uint16, name *uint16, luid *uint64) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall(procLookupPrivilegeValueW.Addr(), 3, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(luid)))
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lookupPrivilegeName(systemName string, luid *uint64, buffer *uint16, size *uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(systemName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _lookupPrivilegeName(_p0, luid, buffer, size)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _lookupPrivilegeName(systemName *uint16, luid *uint64, buffer *uint16, size *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procLookupPrivilegeNameW.Addr(), 4, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(luid)), uintptr(unsafe.Pointer(buffer)), uintptr(unsafe.Pointer(size)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func lookupPrivilegeDisplayName(systemName string, name *uint16, buffer *uint16, size *uint32, languageId *uint32) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *uint16
0000000000000000000000000000000000000000;;		_p0, err = syscall.UTF16PtrFromString(systemName)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return _lookupPrivilegeDisplayName(_p0, name, buffer, size, languageId)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func _lookupPrivilegeDisplayName(systemName *uint16, name *uint16, buffer *uint16, size *uint32, languageId *uint32) (err error) {
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall6(procLookupPrivilegeDisplayNameW.Addr(), 5, uintptr(unsafe.Pointer(systemName)), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(buffer)), uintptr(unsafe.Pointer(size)), uintptr(unsafe.Pointer(languageId)), 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func backupRead(h syscall.Handle, b []byte, bytesRead *uint32, abort bool, processSecurity bool, context *uintptr) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 uint32
0000000000000000000000000000000000000000;;		if abort {
0000000000000000000000000000000000000000;;			_p1 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p1 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p2 uint32
0000000000000000000000000000000000000000;;		if processSecurity {
0000000000000000000000000000000000000000;;			_p2 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p2 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procBackupRead.Addr(), 7, uintptr(h), uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(unsafe.Pointer(bytesRead)), uintptr(_p1), uintptr(_p2), uintptr(unsafe.Pointer(context)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func backupWrite(h syscall.Handle, b []byte, bytesWritten *uint32, abort bool, processSecurity bool, context *uintptr) (err error) {
0000000000000000000000000000000000000000;;		var _p0 *byte
0000000000000000000000000000000000000000;;		if len(b) > 0 {
0000000000000000000000000000000000000000;;			_p0 = &b[0]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p1 uint32
0000000000000000000000000000000000000000;;		if abort {
0000000000000000000000000000000000000000;;			_p1 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p1 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var _p2 uint32
0000000000000000000000000000000000000000;;		if processSecurity {
0000000000000000000000000000000000000000;;			_p2 = 1
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			_p2 = 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		r1, _, e1 := syscall.Syscall9(procBackupWrite.Addr(), 7, uintptr(h), uintptr(unsafe.Pointer(_p0)), uintptr(len(b)), uintptr(unsafe.Pointer(bytesWritten)), uintptr(_p1), uintptr(_p2), uintptr(unsafe.Pointer(context)), 0, 0)
0000000000000000000000000000000000000000;;		if r1 == 0 {
0000000000000000000000000000000000000000;;			if e1 != 0 {
0000000000000000000000000000000000000000;;				err = errnoErr(e1)
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				err = syscall.EINVAL
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return
0000000000000000000000000000000000000000;;	}
