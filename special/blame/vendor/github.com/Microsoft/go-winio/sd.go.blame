0000000000000000000000000000000000000000;;	// +build windows
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/Microsoft/go-winio/sd.go[Godeps/_workspace/src/github.com/Microsoft/go-winio/sd.go][vendor/github.com/Microsoft/go-winio/sd.go];	
0000000000000000000000000000000000000000;;	package winio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys lookupAccountName(systemName *uint16, accountName string, sid *byte, sidSize *uint32, refDomain *uint16, refDomainSize *uint32, sidNameUse *uint32) (err error) = advapi32.LookupAccountNameW
0000000000000000000000000000000000000000;;	//sys convertSidToStringSid(sid *byte, str **uint16) (err error) = advapi32.ConvertSidToStringSidW
0000000000000000000000000000000000000000;;	//sys convertStringSecurityDescriptorToSecurityDescriptor(str string, revision uint32, sd *uintptr, size *uint32) (err error) = advapi32.ConvertStringSecurityDescriptorToSecurityDescriptorW
0000000000000000000000000000000000000000;;	//sys convertSecurityDescriptorToStringSecurityDescriptor(sd *byte, revision uint32, secInfo uint32, sddl **uint16, sddlSize *uint32) (err error) = advapi32.ConvertSecurityDescriptorToStringSecurityDescriptorW
0000000000000000000000000000000000000000;;	//sys localFree(mem uintptr) = LocalFree
0000000000000000000000000000000000000000;;	//sys getSecurityDescriptorLength(sd uintptr) (len uint32) = advapi32.GetSecurityDescriptorLength
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		cERROR_NONE_MAPPED = syscall.Errno(1332)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AccountLookupError struct {
0000000000000000000000000000000000000000;;		Name string
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *AccountLookupError) Error() string {
0000000000000000000000000000000000000000;;		if e.Name == "" {
0000000000000000000000000000000000000000;;			return "lookup account: empty account name specified"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		switch e.Err {
0000000000000000000000000000000000000000;;		case cERROR_NONE_MAPPED:
0000000000000000000000000000000000000000;;			s = "not found"
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			s = e.Err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "lookup account " + e.Name + ": " + s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SddlConversionError struct {
0000000000000000000000000000000000000000;;		Sddl string
0000000000000000000000000000000000000000;;		Err  error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *SddlConversionError) Error() string {
0000000000000000000000000000000000000000;;		return "convert " + e.Sddl + ": " + e.Err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LookupSidByName looks up the SID of an account by name
0000000000000000000000000000000000000000;;	func LookupSidByName(name string) (sid string, err error) {
0000000000000000000000000000000000000000;;		if name == "" {
0000000000000000000000000000000000000000;;			return "", &AccountLookupError{name, cERROR_NONE_MAPPED}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var sidSize, sidNameUse, refDomainSize uint32
0000000000000000000000000000000000000000;;		err = lookupAccountName(nil, name, nil, &sidSize, nil, &refDomainSize, &sidNameUse)
0000000000000000000000000000000000000000;;		if err != nil && err != syscall.ERROR_INSUFFICIENT_BUFFER {
0000000000000000000000000000000000000000;;			return "", &AccountLookupError{name, err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sidBuffer := make([]byte, sidSize)
0000000000000000000000000000000000000000;;		refDomainBuffer := make([]uint16, refDomainSize)
0000000000000000000000000000000000000000;;		err = lookupAccountName(nil, name, &sidBuffer[0], &sidSize, &refDomainBuffer[0], &refDomainSize, &sidNameUse)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", &AccountLookupError{name, err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var strBuffer *uint16
0000000000000000000000000000000000000000;;		err = convertSidToStringSid(&sidBuffer[0], &strBuffer)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", &AccountLookupError{name, err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		sid = syscall.UTF16ToString((*[0xffff]uint16)(unsafe.Pointer(strBuffer))[:])
0000000000000000000000000000000000000000;;		localFree(uintptr(unsafe.Pointer(strBuffer)))
0000000000000000000000000000000000000000;;		return sid, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SddlToSecurityDescriptor(sddl string) ([]byte, error) {
0000000000000000000000000000000000000000;;		var sdBuffer uintptr
0000000000000000000000000000000000000000;;		err := convertStringSecurityDescriptorToSecurityDescriptor(sddl, 1, &sdBuffer, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, &SddlConversionError{sddl, err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer localFree(sdBuffer)
0000000000000000000000000000000000000000;;		sd := make([]byte, getSecurityDescriptorLength(sdBuffer))
0000000000000000000000000000000000000000;;		copy(sd, (*[0xffff]byte)(unsafe.Pointer(sdBuffer))[:len(sd)])
0000000000000000000000000000000000000000;;		return sd, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SecurityDescriptorToSddl(sd []byte) (string, error) {
0000000000000000000000000000000000000000;;		var sddl *uint16
0000000000000000000000000000000000000000;;		// The returned string length seems to including an aribtrary number of terminating NULs.
0000000000000000000000000000000000000000;;		// Don't use it.
0000000000000000000000000000000000000000;;		err := convertSecurityDescriptorToStringSecurityDescriptor(&sd[0], 1, 0xff, &sddl, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer localFree(uintptr(unsafe.Pointer(sddl)))
0000000000000000000000000000000000000000;;		return syscall.UTF16ToString((*[0xffff]uint16)(unsafe.Pointer(sddl))[:]), nil
0000000000000000000000000000000000000000;;	}
