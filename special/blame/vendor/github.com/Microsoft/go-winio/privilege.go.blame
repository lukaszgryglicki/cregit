0000000000000000000000000000000000000000;;	// +build windows
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/Microsoft/go-winio/privilege.go[Godeps/_workspace/src/github.com/Microsoft/go-winio/privilege.go][vendor/github.com/Microsoft/go-winio/privilege.go];	
0000000000000000000000000000000000000000;;	package winio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bytes"
0000000000000000000000000000000000000000;;		"encoding/binary"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"sync"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unicode/utf16"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"golang.org/x/sys/windows"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys adjustTokenPrivileges(token windows.Token, releaseAll bool, input *byte, outputSize uint32, output *byte, requiredSize *uint32) (success bool, err error) [true] = advapi32.AdjustTokenPrivileges
0000000000000000000000000000000000000000;;	//sys impersonateSelf(level uint32) (err error) = advapi32.ImpersonateSelf
0000000000000000000000000000000000000000;;	//sys revertToSelf() (err error) = advapi32.RevertToSelf
0000000000000000000000000000000000000000;;	//sys openThreadToken(thread syscall.Handle, accessMask uint32, openAsSelf bool, token *windows.Token) (err error) = advapi32.OpenThreadToken
0000000000000000000000000000000000000000;;	//sys getCurrentThread() (h syscall.Handle) = GetCurrentThread
0000000000000000000000000000000000000000;;	//sys lookupPrivilegeValue(systemName string, name string, luid *uint64) (err error) = advapi32.LookupPrivilegeValueW
0000000000000000000000000000000000000000;;	//sys lookupPrivilegeName(systemName string, luid *uint64, buffer *uint16, size *uint32) (err error) = advapi32.LookupPrivilegeNameW
0000000000000000000000000000000000000000;;	//sys lookupPrivilegeDisplayName(systemName string, name *uint16, buffer *uint16, size *uint32, languageId *uint32) (err error) = advapi32.LookupPrivilegeDisplayNameW
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SE_PRIVILEGE_ENABLED = 2
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ERROR_NOT_ALL_ASSIGNED syscall.Errno = 1300
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SeBackupPrivilege  = "SeBackupPrivilege"
0000000000000000000000000000000000000000;;		SeRestorePrivilege = "SeRestorePrivilege"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		securityAnonymous = iota
0000000000000000000000000000000000000000;;		securityIdentification
0000000000000000000000000000000000000000;;		securityImpersonation
0000000000000000000000000000000000000000;;		securityDelegation
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		privNames     = make(map[string]uint64)
0000000000000000000000000000000000000000;;		privNameMutex sync.Mutex
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PrivilegeError represents an error enabling privileges.
0000000000000000000000000000000000000000;;	type PrivilegeError struct {
0000000000000000000000000000000000000000;;		privileges []uint64
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *PrivilegeError) Error() string {
0000000000000000000000000000000000000000;;		s := ""
0000000000000000000000000000000000000000;;		if len(e.privileges) > 1 {
0000000000000000000000000000000000000000;;			s = "Could not enable privileges "
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			s = "Could not enable privilege "
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, p := range e.privileges {
0000000000000000000000000000000000000000;;			if i != 0 {
0000000000000000000000000000000000000000;;				s += ", "
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			s += `"`
0000000000000000000000000000000000000000;;			s += getPrivilegeName(p)
0000000000000000000000000000000000000000;;			s += `"`
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunWithPrivilege enables a single privilege for a function call.
0000000000000000000000000000000000000000;;	func RunWithPrivilege(name string, fn func() error) error {
0000000000000000000000000000000000000000;;		return RunWithPrivileges([]string{name}, fn)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RunWithPrivileges enables privileges for a function call.
0000000000000000000000000000000000000000;;	func RunWithPrivileges(names []string, fn func() error) error {
0000000000000000000000000000000000000000;;		privileges, err := mapPrivileges(names)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runtime.LockOSThread()
0000000000000000000000000000000000000000;;		defer runtime.UnlockOSThread()
0000000000000000000000000000000000000000;;		token, err := newThreadToken()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		defer releaseThreadToken(token)
0000000000000000000000000000000000000000;;		err = adjustPrivileges(token, privileges, SE_PRIVILEGE_ENABLED)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return fn()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func mapPrivileges(names []string) ([]uint64, error) {
0000000000000000000000000000000000000000;;		var privileges []uint64
0000000000000000000000000000000000000000;;		privNameMutex.Lock()
0000000000000000000000000000000000000000;;		defer privNameMutex.Unlock()
0000000000000000000000000000000000000000;;		for _, name := range names {
0000000000000000000000000000000000000000;;			p, ok := privNames[name]
0000000000000000000000000000000000000000;;			if !ok {
0000000000000000000000000000000000000000;;				err := lookupPrivilegeValue("", name, &p)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				privNames[name] = p
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			privileges = append(privileges, p)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return privileges, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// EnableProcessPrivileges enables privileges globally for the process.
0000000000000000000000000000000000000000;;	func EnableProcessPrivileges(names []string) error {
0000000000000000000000000000000000000000;;		return enableDisableProcessPrivilege(names, SE_PRIVILEGE_ENABLED)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DisableProcessPrivileges disables privileges globally for the process.
0000000000000000000000000000000000000000;;	func DisableProcessPrivileges(names []string) error {
0000000000000000000000000000000000000000;;		return enableDisableProcessPrivilege(names, 0)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func enableDisableProcessPrivilege(names []string, action uint32) error {
0000000000000000000000000000000000000000;;		privileges, err := mapPrivileges(names)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p, _ := windows.GetCurrentProcess()
0000000000000000000000000000000000000000;;		var token windows.Token
0000000000000000000000000000000000000000;;		err = windows.OpenProcessToken(p, windows.TOKEN_ADJUST_PRIVILEGES|windows.TOKEN_QUERY, &token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		defer token.Close()
0000000000000000000000000000000000000000;;		return adjustPrivileges(token, privileges, action)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func adjustPrivileges(token windows.Token, privileges []uint64, action uint32) error {
0000000000000000000000000000000000000000;;		var b bytes.Buffer
0000000000000000000000000000000000000000;;		binary.Write(&b, binary.LittleEndian, uint32(len(privileges)))
0000000000000000000000000000000000000000;;		for _, p := range privileges {
0000000000000000000000000000000000000000;;			binary.Write(&b, binary.LittleEndian, p)
0000000000000000000000000000000000000000;;			binary.Write(&b, binary.LittleEndian, action)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		prevState := make([]byte, b.Len())
0000000000000000000000000000000000000000;;		reqSize := uint32(0)
0000000000000000000000000000000000000000;;		success, err := adjustTokenPrivileges(token, false, &b.Bytes()[0], uint32(len(prevState)), &prevState[0], &reqSize)
0000000000000000000000000000000000000000;;		if !success {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == ERROR_NOT_ALL_ASSIGNED {
0000000000000000000000000000000000000000;;			return &PrivilegeError{privileges}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func getPrivilegeName(luid uint64) string {
0000000000000000000000000000000000000000;;		var nameBuffer [256]uint16
0000000000000000000000000000000000000000;;		bufSize := uint32(len(nameBuffer))
0000000000000000000000000000000000000000;;		err := lookupPrivilegeName("", &luid, &nameBuffer[0], &bufSize)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("<unknown privilege %d>", luid)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var displayNameBuffer [256]uint16
0000000000000000000000000000000000000000;;		displayBufSize := uint32(len(displayNameBuffer))
0000000000000000000000000000000000000000;;		var langID uint32
0000000000000000000000000000000000000000;;		err = lookupPrivilegeDisplayName("", &nameBuffer[0], &displayNameBuffer[0], &displayBufSize, &langID)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("<unknown privilege %s>", string(utf16.Decode(nameBuffer[:bufSize])))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return string(utf16.Decode(displayNameBuffer[:displayBufSize]))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newThreadToken() (windows.Token, error) {
0000000000000000000000000000000000000000;;		err := impersonateSelf(securityImpersonation)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var token windows.Token
0000000000000000000000000000000000000000;;		err = openThreadToken(getCurrentThread(), syscall.TOKEN_ADJUST_PRIVILEGES|syscall.TOKEN_QUERY, false, &token)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			rerr := revertToSelf()
0000000000000000000000000000000000000000;;			if rerr != nil {
0000000000000000000000000000000000000000;;				panic(rerr)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return token, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func releaseThreadToken(h windows.Token) {
0000000000000000000000000000000000000000;;		err := revertToSelf()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		h.Close()
0000000000000000000000000000000000000000;;	}
