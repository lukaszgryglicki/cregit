0000000000000000000000000000000000000000;;	// +build windows
4fd292dfb7492cc1ce958d1370115de07503bc67;Godeps/_workspace/src/github.com/Microsoft/go-winio/fileinfo.go[Godeps/_workspace/src/github.com/Microsoft/go-winio/fileinfo.go][vendor/github.com/Microsoft/go-winio/fileinfo.go];	
0000000000000000000000000000000000000000;;	package winio
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;		"syscall"
0000000000000000000000000000000000000000;;		"unsafe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	//sys getFileInformationByHandleEx(h syscall.Handle, class uint32, buffer *byte, size uint32) (err error) = GetFileInformationByHandleEx
0000000000000000000000000000000000000000;;	//sys setFileInformationByHandle(h syscall.Handle, class uint32, buffer *byte, size uint32) (err error) = SetFileInformationByHandle
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		fileBasicInfo = 0
0000000000000000000000000000000000000000;;		fileIDInfo    = 0x12
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileBasicInfo contains file access time and file attributes information.
0000000000000000000000000000000000000000;;	type FileBasicInfo struct {
0000000000000000000000000000000000000000;;		CreationTime, LastAccessTime, LastWriteTime, ChangeTime syscall.Filetime
0000000000000000000000000000000000000000;;		FileAttributes                                          uintptr // includes padding
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFileBasicInfo retrieves times and attributes for a file.
0000000000000000000000000000000000000000;;	func GetFileBasicInfo(f *os.File) (*FileBasicInfo, error) {
0000000000000000000000000000000000000000;;		bi := &FileBasicInfo{}
0000000000000000000000000000000000000000;;		if err := getFileInformationByHandleEx(syscall.Handle(f.Fd()), fileBasicInfo, (*byte)(unsafe.Pointer(bi)), uint32(unsafe.Sizeof(*bi))); err != nil {
0000000000000000000000000000000000000000;;			return nil, &os.PathError{Op: "GetFileInformationByHandleEx", Path: f.Name(), Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runtime.KeepAlive(f)
0000000000000000000000000000000000000000;;		return bi, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SetFileBasicInfo sets times and attributes for a file.
0000000000000000000000000000000000000000;;	func SetFileBasicInfo(f *os.File, bi *FileBasicInfo) error {
0000000000000000000000000000000000000000;;		if err := setFileInformationByHandle(syscall.Handle(f.Fd()), fileBasicInfo, (*byte)(unsafe.Pointer(bi)), uint32(unsafe.Sizeof(*bi))); err != nil {
0000000000000000000000000000000000000000;;			return &os.PathError{Op: "SetFileInformationByHandle", Path: f.Name(), Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runtime.KeepAlive(f)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileIDInfo contains the volume serial number and file ID for a file. This pair should be
0000000000000000000000000000000000000000;;	// unique on a system.
0000000000000000000000000000000000000000;;	type FileIDInfo struct {
0000000000000000000000000000000000000000;;		VolumeSerialNumber uint64
0000000000000000000000000000000000000000;;		FileID             [16]byte
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetFileID retrieves the unique (volume, file ID) pair for a file.
0000000000000000000000000000000000000000;;	func GetFileID(f *os.File) (*FileIDInfo, error) {
0000000000000000000000000000000000000000;;		fileID := &FileIDInfo{}
0000000000000000000000000000000000000000;;		if err := getFileInformationByHandleEx(syscall.Handle(f.Fd()), fileIDInfo, (*byte)(unsafe.Pointer(fileID)), uint32(unsafe.Sizeof(*fileID))); err != nil {
0000000000000000000000000000000000000000;;			return nil, &os.PathError{Op: "GetFileInformationByHandleEx", Path: f.Name(), Err: err}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		runtime.KeepAlive(f)
0000000000000000000000000000000000000000;;		return fileID, nil
0000000000000000000000000000000000000000;;	}
