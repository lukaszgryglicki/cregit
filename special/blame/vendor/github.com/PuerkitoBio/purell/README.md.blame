0000000000000000000000000000000000000000;;	# Purell
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Purell is a tiny Go library to normalize URLs. It returns a pure URL. Pure-ell. Sanitizer and all. Yeah, I know...
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Based on the [wikipedia paper][wiki] and the [RFC 3986 document][rfc].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![build status](https://secure.travis-ci.org/PuerkitoBio/purell.png)](http://travis-ci.org/PuerkitoBio/purell)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Install
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`go get github.com/PuerkitoBio/purell`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Changelog
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    **2016-07-27 (v1.0.0)** : Normalize IDN to ASCII (thanks to @zenovich).
0000000000000000000000000000000000000000;;	*    **2015-02-08** : Add fix for relative paths issue ([PR #5][pr5]) and add fix for unnecessary encoding of reserved characters ([see issue #7][iss7]).
0000000000000000000000000000000000000000;;	*    **v0.2.0** : Add benchmarks, Attempt IDN support.
0000000000000000000000000000000000000000;;	*    **v0.1.0** : Initial release.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Examples
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	From `example_test.go` (note that in your code, you would import "github.com/PuerkitoBio/purell", and would prefix references to its methods and constants with "purell."):
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	package purell
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  "fmt"
0000000000000000000000000000000000000000;;	  "net/url"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExampleNormalizeURLString() {
0000000000000000000000000000000000000000;;	  if normalized, err := NormalizeURLString("hTTp://someWEBsite.com:80/Amazing%3f/url/",
0000000000000000000000000000000000000000;;	    FlagLowercaseScheme|FlagLowercaseHost|FlagUppercaseEscapes); err != nil {
0000000000000000000000000000000000000000;;	    panic(err)
0000000000000000000000000000000000000000;;	  } else {
0000000000000000000000000000000000000000;;	    fmt.Print(normalized)
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	  // Output: http://somewebsite.com:80/Amazing%3F/url/
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExampleMustNormalizeURLString() {
0000000000000000000000000000000000000000;;	  normalized := MustNormalizeURLString("hTTpS://someWEBsite.com:443/Amazing%fa/url/",
0000000000000000000000000000000000000000;;	    FlagsUnsafeGreedy)
0000000000000000000000000000000000000000;;	  fmt.Print(normalized)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  // Output: http://somewebsite.com/Amazing%FA/url
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ExampleNormalizeURL() {
0000000000000000000000000000000000000000;;	  if u, err := url.Parse("Http://SomeUrl.com:8080/a/b/.././c///g?c=3&a=1&b=9&c=0#target"); err != nil {
0000000000000000000000000000000000000000;;	    panic(err)
0000000000000000000000000000000000000000;;	  } else {
0000000000000000000000000000000000000000;;	    normalized := NormalizeURL(u, FlagsUsuallySafeGreedy|FlagRemoveDuplicateSlashes|FlagRemoveFragment)
0000000000000000000000000000000000000000;;	    fmt.Print(normalized)
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  // Output: http://someurl.com:8080/a/c/g?c=3&a=1&b=9&c=0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## API
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	As seen in the examples above, purell offers three methods, `NormalizeURLString(string, NormalizationFlags) (string, error)`, `MustNormalizeURLString(string, NormalizationFlags) (string)` and `NormalizeURL(*url.URL, NormalizationFlags) (string)`. They all normalize the provided URL based on the specified flags. Here are the available flags:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		// Safe normalizations
0000000000000000000000000000000000000000;;		FlagLowercaseScheme           NormalizationFlags = 1 << iota // HTTP://host -> http://host, applied by default in Go1.1
0000000000000000000000000000000000000000;;		FlagLowercaseHost                                            // http://HOST -> http://host
0000000000000000000000000000000000000000;;		FlagUppercaseEscapes                                         // http://host/t%ef -> http://host/t%EF
0000000000000000000000000000000000000000;;		FlagDecodeUnnecessaryEscapes                                 // http://host/t%41 -> http://host/tA
0000000000000000000000000000000000000000;;		FlagEncodeNecessaryEscapes                                   // http://host/!"#$ -> http://host/%21%22#$
0000000000000000000000000000000000000000;;		FlagRemoveDefaultPort                                        // http://host:80 -> http://host
0000000000000000000000000000000000000000;;		FlagRemoveEmptyQuerySeparator                                // http://host/path? -> http://host/path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Usually safe normalizations
0000000000000000000000000000000000000000;;		FlagRemoveTrailingSlash // http://host/path/ -> http://host/path
0000000000000000000000000000000000000000;;		FlagAddTrailingSlash    // http://host/path -> http://host/path/ (should choose only one of these add/remove trailing slash flags)
0000000000000000000000000000000000000000;;		FlagRemoveDotSegments   // http://host/path/./a/b/../c -> http://host/path/a/c
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unsafe normalizations
0000000000000000000000000000000000000000;;		FlagRemoveDirectoryIndex   // http://host/path/index.html -> http://host/path/
0000000000000000000000000000000000000000;;		FlagRemoveFragment         // http://host/path#fragment -> http://host/path
0000000000000000000000000000000000000000;;		FlagForceHTTP              // https://host -> http://host
0000000000000000000000000000000000000000;;		FlagRemoveDuplicateSlashes // http://host/path//a///b -> http://host/path/a/b
0000000000000000000000000000000000000000;;		FlagRemoveWWW              // http://www.host/ -> http://host/
0000000000000000000000000000000000000000;;		FlagAddWWW                 // http://host/ -> http://www.host/ (should choose only one of these add/remove WWW flags)
0000000000000000000000000000000000000000;;		FlagSortQuery              // http://host/path?c=3&b=2&a=1&b=1 -> http://host/path?a=1&b=1&b=2&c=3
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Normalizations not in the wikipedia article, required to cover tests cases
0000000000000000000000000000000000000000;;		// submitted by jehiah
0000000000000000000000000000000000000000;;		FlagDecodeDWORDHost           // http://1113982867 -> http://66.102.7.147
0000000000000000000000000000000000000000;;		FlagDecodeOctalHost           // http://0102.0146.07.0223 -> http://66.102.7.147
0000000000000000000000000000000000000000;;		FlagDecodeHexHost             // http://0x42660793 -> http://66.102.7.147
0000000000000000000000000000000000000000;;		FlagRemoveUnnecessaryHostDots // http://.host../path -> http://host/path
0000000000000000000000000000000000000000;;		FlagRemoveEmptyPortSeparator  // http://host:/path -> http://host/path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convenience set of safe normalizations
0000000000000000000000000000000000000000;;		FlagsSafe NormalizationFlags = FlagLowercaseHost | FlagLowercaseScheme | FlagUppercaseEscapes | FlagDecodeUnnecessaryEscapes | FlagEncodeNecessaryEscapes | FlagRemoveDefaultPort | FlagRemoveEmptyQuerySeparator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// For convenience sets, "greedy" uses the "remove trailing slash" and "remove www. prefix" flags,
0000000000000000000000000000000000000000;;		// while "non-greedy" uses the "add (or keep) the trailing slash" and "add www. prefix".
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convenience set of usually safe normalizations (includes FlagsSafe)
0000000000000000000000000000000000000000;;		FlagsUsuallySafeGreedy    NormalizationFlags = FlagsSafe | FlagRemoveTrailingSlash | FlagRemoveDotSegments
0000000000000000000000000000000000000000;;		FlagsUsuallySafeNonGreedy NormalizationFlags = FlagsSafe | FlagAddTrailingSlash | FlagRemoveDotSegments
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convenience set of unsafe normalizations (includes FlagsUsuallySafe)
0000000000000000000000000000000000000000;;		FlagsUnsafeGreedy    NormalizationFlags = FlagsUsuallySafeGreedy | FlagRemoveDirectoryIndex | FlagRemoveFragment | FlagForceHTTP | FlagRemoveDuplicateSlashes | FlagRemoveWWW | FlagSortQuery
0000000000000000000000000000000000000000;;		FlagsUnsafeNonGreedy NormalizationFlags = FlagsUsuallySafeNonGreedy | FlagRemoveDirectoryIndex | FlagRemoveFragment | FlagForceHTTP | FlagRemoveDuplicateSlashes | FlagAddWWW | FlagSortQuery
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Convenience set of all available flags
0000000000000000000000000000000000000000;;		FlagsAllGreedy    = FlagsUnsafeGreedy | FlagDecodeDWORDHost | FlagDecodeOctalHost | FlagDecodeHexHost | FlagRemoveUnnecessaryHostDots | FlagRemoveEmptyPortSeparator
0000000000000000000000000000000000000000;;		FlagsAllNonGreedy = FlagsUnsafeNonGreedy | FlagDecodeDWORDHost | FlagDecodeOctalHost | FlagDecodeHexHost | FlagRemoveUnnecessaryHostDots | FlagRemoveEmptyPortSeparator
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For convenience, the set of flags `FlagsSafe`, `FlagsUsuallySafe[Greedy|NonGreedy]`, `FlagsUnsafe[Greedy|NonGreedy]` and `FlagsAll[Greedy|NonGreedy]` are provided for the similarly grouped normalizations on [wikipedia's URL normalization page][wiki]. You can add (using the bitwise OR `|` operator) or remove (using the bitwise AND NOT `&^` operator) individual flags from the sets if required, to build your own custom set.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The [full godoc reference is available on gopkgdoc][godoc].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Some things to note:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    `FlagDecodeUnnecessaryEscapes`, `FlagEncodeNecessaryEscapes`, `FlagUppercaseEscapes` and `FlagRemoveEmptyQuerySeparator` are always implicitly set, because internally, the URL string is parsed as an URL object, which automatically decodes unnecessary escapes, uppercases and encodes necessary ones, and removes empty query separators (an unnecessary `?` at the end of the url). So this operation cannot **not** be done. For this reason, `FlagRemoveEmptyQuerySeparator` (as well as the other three) has been included in the `FlagsSafe` convenience set, instead of `FlagsUnsafe`, where Wikipedia puts it.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    The `FlagDecodeUnnecessaryEscapes` decodes the following escapes (*from -> to*):
0000000000000000000000000000000000000000;;	    -    %24 -> $
0000000000000000000000000000000000000000;;	    -    %26 -> &
0000000000000000000000000000000000000000;;	    -    %2B-%3B -> +,-./0123456789:;
0000000000000000000000000000000000000000;;	    -    %3D -> =
0000000000000000000000000000000000000000;;	    -    %40-%5A -> @ABCDEFGHIJKLMNOPQRSTUVWXYZ
0000000000000000000000000000000000000000;;	    -    %5F -> _
0000000000000000000000000000000000000000;;	    -    %61-%7A -> abcdefghijklmnopqrstuvwxyz
0000000000000000000000000000000000000000;;	    -    %7E -> ~
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    When the `NormalizeURL` function is used (passing an URL object), this source URL object is modified (that is, after the call, the URL object will be modified to reflect the normalization).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    The *replace IP with domain name* normalization (`http://208.77.188.166/ → http://www.example.com/`) is obviously not possible for a library without making some network requests. This is not implemented in purell.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    The *remove unused query string parameters* and *remove default query parameters* are also not implemented, since this is a very case-specific normalization, and it is quite trivial to do with an URL object.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Safe vs Usually Safe vs Unsafe
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Purell allows you to control the level of risk you take while normalizing an URL. You can aggressively normalize, play it totally safe, or anything in between.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Consider the following URL:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`HTTPS://www.RooT.com/toto/t%45%1f///a/./b/../c/?z=3&w=2&a=4&w=1#invalid`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Normalizing with the `FlagsSafe` gives:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`https://www.root.com/toto/tE%1F///a/./b/../c/?z=3&w=2&a=4&w=1#invalid`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	With the `FlagsUsuallySafeGreedy`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`https://www.root.com/toto/tE%1F///a/c?z=3&w=2&a=4&w=1#invalid`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And with `FlagsUnsafeGreedy`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`http://root.com/toto/tE%1F/a/c?a=4&w=1&w=2&z=3`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## TODOs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	*    Add a class/default instance to allow specifying custom directory index names? At the moment, removing directory index removes `(^|/)((?:default|index)\.\w{1,4})$`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Thanks / Contributions
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	@rogpeppe
0000000000000000000000000000000000000000;;	@jehiah
0000000000000000000000000000000000000000;;	@opennota
0000000000000000000000000000000000000000;;	@pchristopher1275
0000000000000000000000000000000000000000;;	@zenovich
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## License
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The [BSD 3-Clause license][bsd].
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[bsd]: http://opensource.org/licenses/BSD-3-Clause
0000000000000000000000000000000000000000;;	[wiki]: http://en.wikipedia.org/wiki/URL_normalization
0000000000000000000000000000000000000000;;	[rfc]: http://tools.ietf.org/html/rfc3986#section-6
0000000000000000000000000000000000000000;;	[godoc]: http://go.pkgdoc.org/github.com/PuerkitoBio/purell
0000000000000000000000000000000000000000;;	[pr5]: https://github.com/PuerkitoBio/purell/pull/5
0000000000000000000000000000000000000000;;	[iss7]: https://github.com/PuerkitoBio/purell/issues/7
