0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DIGITALOCEAN_CONFIG_TYPE = "digitaloceanConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigitaloceanConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccessToken string `json:"accessToken,omitempty" yaml:"access_token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Backups bool `json:"backups,omitempty" yaml:"backups,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Image string `json:"image,omitempty" yaml:"image,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ipv6 bool `json:"ipv6,omitempty" yaml:"ipv6,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivateNetworking bool `json:"privateNetworking,omitempty" yaml:"private_networking,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Region string `json:"region,omitempty" yaml:"region,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Size string `json:"size,omitempty" yaml:"size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshKeyFingerprint string `json:"sshKeyFingerprint,omitempty" yaml:"ssh_key_fingerprint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshPort string `json:"sshPort,omitempty" yaml:"ssh_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshUser string `json:"sshUser,omitempty" yaml:"ssh_user,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Userdata string `json:"userdata,omitempty" yaml:"userdata,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigitaloceanConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []DigitaloceanConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigitaloceanConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DigitaloceanConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*DigitaloceanConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *DigitaloceanConfig) (*DigitaloceanConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *DigitaloceanConfig, updates interface{}) (*DigitaloceanConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*DigitaloceanConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *DigitaloceanConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDigitaloceanConfigClient(rancherClient *RancherClient) *DigitaloceanConfigClient {
0000000000000000000000000000000000000000;;		return &DigitaloceanConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DigitaloceanConfigClient) Create(container *DigitaloceanConfig) (*DigitaloceanConfig, error) {
0000000000000000000000000000000000000000;;		resp := &DigitaloceanConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(DIGITALOCEAN_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DigitaloceanConfigClient) Update(existing *DigitaloceanConfig, updates interface{}) (*DigitaloceanConfig, error) {
0000000000000000000000000000000000000000;;		resp := &DigitaloceanConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(DIGITALOCEAN_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DigitaloceanConfigClient) List(opts *ListOpts) (*DigitaloceanConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &DigitaloceanConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(DIGITALOCEAN_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DigitaloceanConfigClient) ById(id string) (*DigitaloceanConfig, error) {
0000000000000000000000000000000000000000;;		resp := &DigitaloceanConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(DIGITALOCEAN_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DigitaloceanConfigClient) Delete(container *DigitaloceanConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(DIGITALOCEAN_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
