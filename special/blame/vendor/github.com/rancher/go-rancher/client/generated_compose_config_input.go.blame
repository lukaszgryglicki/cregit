0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		COMPOSE_CONFIG_INPUT_TYPE = "composeConfigInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceIds []string `json:"serviceIds,omitempty" yaml:"service_ids,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ComposeConfigInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ComposeConfigInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ComposeConfigInput) (*ComposeConfigInput, error)
0000000000000000000000000000000000000000;;		Update(existing *ComposeConfigInput, updates interface{}) (*ComposeConfigInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ComposeConfigInput, error)
0000000000000000000000000000000000000000;;		Delete(container *ComposeConfigInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newComposeConfigInputClient(rancherClient *RancherClient) *ComposeConfigInputClient {
0000000000000000000000000000000000000000;;		return &ComposeConfigInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigInputClient) Create(container *ComposeConfigInput) (*ComposeConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(COMPOSE_CONFIG_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigInputClient) Update(existing *ComposeConfigInput, updates interface{}) (*ComposeConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(COMPOSE_CONFIG_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigInputClient) List(opts *ListOpts) (*ComposeConfigInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfigInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(COMPOSE_CONFIG_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigInputClient) ById(id string) (*ComposeConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(COMPOSE_CONFIG_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigInputClient) Delete(container *ComposeConfigInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(COMPOSE_CONFIG_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
