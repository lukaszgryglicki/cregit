0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TYPE_DOCUMENTATION_TYPE = "typeDocumentation"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TypeDocumentation struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceFields map[string]interface{} `json:"resourceFields,omitempty" yaml:"resource_fields,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TypeDocumentationCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []TypeDocumentation `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TypeDocumentationClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TypeDocumentationOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*TypeDocumentationCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *TypeDocumentation) (*TypeDocumentation, error)
0000000000000000000000000000000000000000;;		Update(existing *TypeDocumentation, updates interface{}) (*TypeDocumentation, error)
0000000000000000000000000000000000000000;;		ById(id string) (*TypeDocumentation, error)
0000000000000000000000000000000000000000;;		Delete(container *TypeDocumentation) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTypeDocumentationClient(rancherClient *RancherClient) *TypeDocumentationClient {
0000000000000000000000000000000000000000;;		return &TypeDocumentationClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TypeDocumentationClient) Create(container *TypeDocumentation) (*TypeDocumentation, error) {
0000000000000000000000000000000000000000;;		resp := &TypeDocumentation{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(TYPE_DOCUMENTATION_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TypeDocumentationClient) Update(existing *TypeDocumentation, updates interface{}) (*TypeDocumentation, error) {
0000000000000000000000000000000000000000;;		resp := &TypeDocumentation{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(TYPE_DOCUMENTATION_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TypeDocumentationClient) List(opts *ListOpts) (*TypeDocumentationCollection, error) {
0000000000000000000000000000000000000000;;		resp := &TypeDocumentationCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(TYPE_DOCUMENTATION_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TypeDocumentationClient) ById(id string) (*TypeDocumentation, error) {
0000000000000000000000000000000000000000;;		resp := &TypeDocumentation{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(TYPE_DOCUMENTATION_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TypeDocumentationClient) Delete(container *TypeDocumentation) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(TYPE_DOCUMENTATION_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
