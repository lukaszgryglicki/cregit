0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		KUBERNETES_STACK_UPGRADE_TYPE = "kubernetesStackUpgrade"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesStackUpgrade struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Environment map[string]interface{} `json:"environment,omitempty" yaml:"environment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Templates map[string]interface{} `json:"templates,omitempty" yaml:"templates,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesStackUpgradeCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []KubernetesStackUpgrade `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesStackUpgradeClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesStackUpgradeOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*KubernetesStackUpgradeCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *KubernetesStackUpgrade) (*KubernetesStackUpgrade, error)
0000000000000000000000000000000000000000;;		Update(existing *KubernetesStackUpgrade, updates interface{}) (*KubernetesStackUpgrade, error)
0000000000000000000000000000000000000000;;		ById(id string) (*KubernetesStackUpgrade, error)
0000000000000000000000000000000000000000;;		Delete(container *KubernetesStackUpgrade) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newKubernetesStackUpgradeClient(rancherClient *RancherClient) *KubernetesStackUpgradeClient {
0000000000000000000000000000000000000000;;		return &KubernetesStackUpgradeClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesStackUpgradeClient) Create(container *KubernetesStackUpgrade) (*KubernetesStackUpgrade, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesStackUpgrade{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(KUBERNETES_STACK_UPGRADE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesStackUpgradeClient) Update(existing *KubernetesStackUpgrade, updates interface{}) (*KubernetesStackUpgrade, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesStackUpgrade{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(KUBERNETES_STACK_UPGRADE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesStackUpgradeClient) List(opts *ListOpts) (*KubernetesStackUpgradeCollection, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesStackUpgradeCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(KUBERNETES_STACK_UPGRADE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesStackUpgradeClient) ById(id string) (*KubernetesStackUpgrade, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesStackUpgrade{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(KUBERNETES_STACK_UPGRADE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesStackUpgradeClient) Delete(container *KubernetesStackUpgrade) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(KUBERNETES_STACK_UPGRADE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
