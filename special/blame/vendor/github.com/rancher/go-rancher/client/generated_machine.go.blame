0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		MACHINE_TYPE = "machine"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Machine struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Amazonec2Config *Amazonec2Config `json:"amazonec2Config,omitempty" yaml:"amazonec2config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthCertificateAuthority string `json:"authCertificateAuthority,omitempty" yaml:"auth_certificate_authority,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthKey string `json:"authKey,omitempty" yaml:"auth_key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AzureConfig *AzureConfig `json:"azureConfig,omitempty" yaml:"azure_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DigitaloceanConfig *DigitaloceanConfig `json:"digitaloceanConfig,omitempty" yaml:"digitalocean_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DockerVersion string `json:"dockerVersion,omitempty" yaml:"docker_version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Driver string `json:"driver,omitempty" yaml:"driver,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineEnv map[string]interface{} `json:"engineEnv,omitempty" yaml:"engine_env,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineInsecureRegistry []string `json:"engineInsecureRegistry,omitempty" yaml:"engine_insecure_registry,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineInstallUrl string `json:"engineInstallUrl,omitempty" yaml:"engine_install_url,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineLabel map[string]interface{} `json:"engineLabel,omitempty" yaml:"engine_label,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineOpt map[string]interface{} `json:"engineOpt,omitempty" yaml:"engine_opt,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineRegistryMirror []string `json:"engineRegistryMirror,omitempty" yaml:"engine_registry_mirror,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EngineStorageDriver string `json:"engineStorageDriver,omitempty" yaml:"engine_storage_driver,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtractedConfig string `json:"extractedConfig,omitempty" yaml:"extracted_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Labels map[string]interface{} `json:"labels,omitempty" yaml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PacketConfig *PacketConfig `json:"packetConfig,omitempty" yaml:"packet_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MachineCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Machine `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MachineClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MachineOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*MachineCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Machine) (*Machine, error)
0000000000000000000000000000000000000000;;		Update(existing *Machine, updates interface{}) (*Machine, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Machine, error)
0000000000000000000000000000000000000000;;		Delete(container *Machine) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionBootstrap(*Machine) (*PhysicalHost, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*Machine) (*PhysicalHost, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionError(*Machine) (*PhysicalHost, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*Machine) (*PhysicalHost, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*Machine) (*PhysicalHost, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newMachineClient(rancherClient *RancherClient) *MachineClient {
0000000000000000000000000000000000000000;;		return &MachineClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) Create(container *Machine) (*Machine, error) {
0000000000000000000000000000000000000000;;		resp := &Machine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(MACHINE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) Update(existing *Machine, updates interface{}) (*Machine, error) {
0000000000000000000000000000000000000000;;		resp := &Machine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(MACHINE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) List(opts *ListOpts) (*MachineCollection, error) {
0000000000000000000000000000000000000000;;		resp := &MachineCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(MACHINE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ById(id string) (*Machine, error) {
0000000000000000000000000000000000000000;;		resp := &Machine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(MACHINE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) Delete(container *Machine) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(MACHINE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ActionBootstrap(resource *Machine) (*PhysicalHost, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &PhysicalHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(MACHINE_TYPE, "bootstrap", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ActionCreate(resource *Machine) (*PhysicalHost, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &PhysicalHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(MACHINE_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ActionError(resource *Machine) (*PhysicalHost, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &PhysicalHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(MACHINE_TYPE, "error", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ActionRemove(resource *Machine) (*PhysicalHost, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &PhysicalHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(MACHINE_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *MachineClient) ActionUpdate(resource *Machine) (*PhysicalHost, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &PhysicalHost{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(MACHINE_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
