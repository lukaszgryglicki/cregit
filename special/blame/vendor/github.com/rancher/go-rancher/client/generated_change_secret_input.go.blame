0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CHANGE_SECRET_INPUT_TYPE = "changeSecretInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSecretInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NewSecret string `json:"newSecret,omitempty" yaml:"new_secret,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OldSecret string `json:"oldSecret,omitempty" yaml:"old_secret,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSecretInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ChangeSecretInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSecretInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ChangeSecretInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ChangeSecretInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ChangeSecretInput) (*ChangeSecretInput, error)
0000000000000000000000000000000000000000;;		Update(existing *ChangeSecretInput, updates interface{}) (*ChangeSecretInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ChangeSecretInput, error)
0000000000000000000000000000000000000000;;		Delete(container *ChangeSecretInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newChangeSecretInputClient(rancherClient *RancherClient) *ChangeSecretInputClient {
0000000000000000000000000000000000000000;;		return &ChangeSecretInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangeSecretInputClient) Create(container *ChangeSecretInput) (*ChangeSecretInput, error) {
0000000000000000000000000000000000000000;;		resp := &ChangeSecretInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CHANGE_SECRET_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangeSecretInputClient) Update(existing *ChangeSecretInput, updates interface{}) (*ChangeSecretInput, error) {
0000000000000000000000000000000000000000;;		resp := &ChangeSecretInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CHANGE_SECRET_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangeSecretInputClient) List(opts *ListOpts) (*ChangeSecretInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ChangeSecretInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CHANGE_SECRET_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangeSecretInputClient) ById(id string) (*ChangeSecretInput, error) {
0000000000000000000000000000000000000000;;		resp := &ChangeSecretInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CHANGE_SECRET_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ChangeSecretInputClient) Delete(container *ChangeSecretInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CHANGE_SECRET_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
