0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IP_ADDRESS_TYPE = "ipAddress"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddress struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Address string `json:"address,omitempty" yaml:"address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkId string `json:"networkId,omitempty" yaml:"network_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []IpAddress `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*IpAddressCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;		Update(existing *IpAddress, updates interface{}) (*IpAddress, error)
0000000000000000000000000000000000000000;;		ById(id string) (*IpAddress, error)
0000000000000000000000000000000000000000;;		Delete(container *IpAddress) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionActivate(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeactivate(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDisassociate(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionPurge(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestore(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*IpAddress) (*IpAddress, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIpAddressClient(rancherClient *RancherClient) *IpAddressClient {
0000000000000000000000000000000000000000;;		return &IpAddressClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) Create(container *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(IP_ADDRESS_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) Update(existing *IpAddress, updates interface{}) (*IpAddress, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(IP_ADDRESS_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) List(opts *ListOpts) (*IpAddressCollection, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddressCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(IP_ADDRESS_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ById(id string) (*IpAddress, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(IP_ADDRESS_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) Delete(container *IpAddress) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(IP_ADDRESS_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionActivate(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "activate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionCreate(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionDeactivate(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "deactivate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionDisassociate(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "disassociate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionPurge(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "purge", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionRemove(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionRestore(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "restore", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressClient) ActionUpdate(resource *IpAddress) (*IpAddress, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &IpAddress{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(IP_ADDRESS_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
