0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOAD_BALANCER_SERVICE_LINK_TYPE = "loadBalancerServiceLink"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerServiceLink struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ports []string `json:"ports,omitempty" yaml:"ports,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceId string `json:"serviceId,omitempty" yaml:"service_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerServiceLinkCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LoadBalancerServiceLink `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerServiceLinkClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerServiceLinkOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LoadBalancerServiceLinkCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LoadBalancerServiceLink) (*LoadBalancerServiceLink, error)
0000000000000000000000000000000000000000;;		Update(existing *LoadBalancerServiceLink, updates interface{}) (*LoadBalancerServiceLink, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LoadBalancerServiceLink, error)
0000000000000000000000000000000000000000;;		Delete(container *LoadBalancerServiceLink) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLoadBalancerServiceLinkClient(rancherClient *RancherClient) *LoadBalancerServiceLinkClient {
0000000000000000000000000000000000000000;;		return &LoadBalancerServiceLinkClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerServiceLinkClient) Create(container *LoadBalancerServiceLink) (*LoadBalancerServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOAD_BALANCER_SERVICE_LINK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerServiceLinkClient) Update(existing *LoadBalancerServiceLink, updates interface{}) (*LoadBalancerServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOAD_BALANCER_SERVICE_LINK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerServiceLinkClient) List(opts *ListOpts) (*LoadBalancerServiceLinkCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerServiceLinkCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOAD_BALANCER_SERVICE_LINK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerServiceLinkClient) ById(id string) (*LoadBalancerServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOAD_BALANCER_SERVICE_LINK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerServiceLinkClient) Delete(container *LoadBalancerServiceLink) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOAD_BALANCER_SERVICE_LINK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
