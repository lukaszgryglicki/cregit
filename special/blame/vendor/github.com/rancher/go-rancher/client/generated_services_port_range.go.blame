0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SERVICES_PORT_RANGE_TYPE = "servicesPortRange"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServicesPortRange struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EndPort int64 `json:"endPort,omitempty" yaml:"end_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartPort int64 `json:"startPort,omitempty" yaml:"start_port,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServicesPortRangeCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ServicesPortRange `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServicesPortRangeClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServicesPortRangeOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ServicesPortRangeCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ServicesPortRange) (*ServicesPortRange, error)
0000000000000000000000000000000000000000;;		Update(existing *ServicesPortRange, updates interface{}) (*ServicesPortRange, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ServicesPortRange, error)
0000000000000000000000000000000000000000;;		Delete(container *ServicesPortRange) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServicesPortRangeClient(rancherClient *RancherClient) *ServicesPortRangeClient {
0000000000000000000000000000000000000000;;		return &ServicesPortRangeClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServicesPortRangeClient) Create(container *ServicesPortRange) (*ServicesPortRange, error) {
0000000000000000000000000000000000000000;;		resp := &ServicesPortRange{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SERVICES_PORT_RANGE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServicesPortRangeClient) Update(existing *ServicesPortRange, updates interface{}) (*ServicesPortRange, error) {
0000000000000000000000000000000000000000;;		resp := &ServicesPortRange{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SERVICES_PORT_RANGE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServicesPortRangeClient) List(opts *ListOpts) (*ServicesPortRangeCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ServicesPortRangeCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SERVICES_PORT_RANGE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServicesPortRangeClient) ById(id string) (*ServicesPortRange, error) {
0000000000000000000000000000000000000000;;		resp := &ServicesPortRange{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SERVICES_PORT_RANGE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServicesPortRangeClient) Delete(container *ServicesPortRange) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SERVICES_PORT_RANGE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
