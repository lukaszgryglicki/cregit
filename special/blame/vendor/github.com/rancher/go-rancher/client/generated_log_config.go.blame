0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOG_CONFIG_TYPE = "logConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config map[string]interface{} `json:"config,omitempty" yaml:"config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Driver string `json:"driver,omitempty" yaml:"driver,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LogConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LogConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LogConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LogConfig) (*LogConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *LogConfig, updates interface{}) (*LogConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LogConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *LogConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLogConfigClient(rancherClient *RancherClient) *LogConfigClient {
0000000000000000000000000000000000000000;;		return &LogConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LogConfigClient) Create(container *LogConfig) (*LogConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LogConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOG_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LogConfigClient) Update(existing *LogConfig, updates interface{}) (*LogConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LogConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOG_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LogConfigClient) List(opts *ListOpts) (*LogConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LogConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOG_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LogConfigClient) ById(id string) (*LogConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LogConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOG_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LogConfigClient) Delete(container *LogConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOG_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
