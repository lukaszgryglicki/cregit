0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONTAINER_EXEC_TYPE = "containerExec"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerExec struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AttachStdin bool `json:"attachStdin,omitempty" yaml:"attach_stdin,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AttachStdout bool `json:"attachStdout,omitempty" yaml:"attach_stdout,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Command []string `json:"command,omitempty" yaml:"command,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tty bool `json:"tty,omitempty" yaml:"tty,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerExecCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ContainerExec `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerExecClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerExecOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ContainerExecCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ContainerExec) (*ContainerExec, error)
0000000000000000000000000000000000000000;;		Update(existing *ContainerExec, updates interface{}) (*ContainerExec, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ContainerExec, error)
0000000000000000000000000000000000000000;;		Delete(container *ContainerExec) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainerExecClient(rancherClient *RancherClient) *ContainerExecClient {
0000000000000000000000000000000000000000;;		return &ContainerExecClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerExecClient) Create(container *ContainerExec) (*ContainerExec, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerExec{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONTAINER_EXEC_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerExecClient) Update(existing *ContainerExec, updates interface{}) (*ContainerExec, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerExec{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONTAINER_EXEC_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerExecClient) List(opts *ListOpts) (*ContainerExecCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerExecCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONTAINER_EXEC_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerExecClient) ById(id string) (*ContainerExec, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerExec{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONTAINER_EXEC_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerExecClient) Delete(container *ContainerExec) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONTAINER_EXEC_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
