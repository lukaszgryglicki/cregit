0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PUBLISH_TYPE = "publish"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Publish struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PreviousIds []string `json:"previousIds,omitempty" yaml:"previous_ids,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Publisher string `json:"publisher,omitempty" yaml:"publisher,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceId string `json:"resourceId,omitempty" yaml:"resource_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceType string `json:"resourceType,omitempty" yaml:"resource_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Time int64 `json:"time,omitempty" yaml:"time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningInternalMessage string `json:"transitioningInternalMessage,omitempty" yaml:"transitioning_internal_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublishCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Publish `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublishClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublishOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*PublishCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Publish) (*Publish, error)
0000000000000000000000000000000000000000;;		Update(existing *Publish, updates interface{}) (*Publish, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Publish, error)
0000000000000000000000000000000000000000;;		Delete(container *Publish) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPublishClient(rancherClient *RancherClient) *PublishClient {
0000000000000000000000000000000000000000;;		return &PublishClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublishClient) Create(container *Publish) (*Publish, error) {
0000000000000000000000000000000000000000;;		resp := &Publish{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PUBLISH_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublishClient) Update(existing *Publish, updates interface{}) (*Publish, error) {
0000000000000000000000000000000000000000;;		resp := &Publish{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PUBLISH_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublishClient) List(opts *ListOpts) (*PublishCollection, error) {
0000000000000000000000000000000000000000;;		resp := &PublishCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PUBLISH_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublishClient) ById(id string) (*Publish, error) {
0000000000000000000000000000000000000000;;		resp := &Publish{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PUBLISH_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublishClient) Delete(container *Publish) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PUBLISH_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
