0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HOST_API_PROXY_TOKEN_TYPE = "hostApiProxyToken"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostApiProxyToken struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReportedUuid string `json:"reportedUuid,omitempty" yaml:"reported_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty" yaml:"token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `json:"url,omitempty" yaml:"url,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostApiProxyTokenCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []HostApiProxyToken `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostApiProxyTokenClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostApiProxyTokenOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*HostApiProxyTokenCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *HostApiProxyToken) (*HostApiProxyToken, error)
0000000000000000000000000000000000000000;;		Update(existing *HostApiProxyToken, updates interface{}) (*HostApiProxyToken, error)
0000000000000000000000000000000000000000;;		ById(id string) (*HostApiProxyToken, error)
0000000000000000000000000000000000000000;;		Delete(container *HostApiProxyToken) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHostApiProxyTokenClient(rancherClient *RancherClient) *HostApiProxyTokenClient {
0000000000000000000000000000000000000000;;		return &HostApiProxyTokenClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostApiProxyTokenClient) Create(container *HostApiProxyToken) (*HostApiProxyToken, error) {
0000000000000000000000000000000000000000;;		resp := &HostApiProxyToken{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(HOST_API_PROXY_TOKEN_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostApiProxyTokenClient) Update(existing *HostApiProxyToken, updates interface{}) (*HostApiProxyToken, error) {
0000000000000000000000000000000000000000;;		resp := &HostApiProxyToken{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(HOST_API_PROXY_TOKEN_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostApiProxyTokenClient) List(opts *ListOpts) (*HostApiProxyTokenCollection, error) {
0000000000000000000000000000000000000000;;		resp := &HostApiProxyTokenCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(HOST_API_PROXY_TOKEN_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostApiProxyTokenClient) ById(id string) (*HostApiProxyToken, error) {
0000000000000000000000000000000000000000;;		resp := &HostApiProxyToken{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(HOST_API_PROXY_TOKEN_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostApiProxyTokenClient) Delete(container *HostApiProxyToken) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(HOST_API_PROXY_TOKEN_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
