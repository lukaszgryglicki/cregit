0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LDAPCONFIG_TYPE = "ldapconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Ldapconfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccessMode string `json:"accessMode,omitempty" yaml:"access_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowedIdentities []interface{} `json:"allowedIdentities,omitempty" yaml:"allowed_identities,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConnectionTimeout int64 `json:"connectionTimeout,omitempty" yaml:"connection_timeout,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GroupMemberMappingAttribute string `json:"groupMemberMappingAttribute,omitempty" yaml:"group_member_mapping_attribute,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GroupNameField string `json:"groupNameField,omitempty" yaml:"group_name_field,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GroupObjectClass string `json:"groupObjectClass,omitempty" yaml:"group_object_class,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GroupSearchField string `json:"groupSearchField,omitempty" yaml:"group_search_field,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LoginDomain string `json:"loginDomain,omitempty" yaml:"login_domain,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port int64 `json:"port,omitempty" yaml:"port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Server string `json:"server,omitempty" yaml:"server,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceAccountPassword string `json:"serviceAccountPassword,omitempty" yaml:"service_account_password,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceAccountUsername string `json:"serviceAccountUsername,omitempty" yaml:"service_account_username,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tls bool `json:"tls,omitempty" yaml:"tls,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserDisabledBitMask int64 `json:"userDisabledBitMask,omitempty" yaml:"user_disabled_bit_mask,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserEnabledAttribute string `json:"userEnabledAttribute,omitempty" yaml:"user_enabled_attribute,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserLoginField string `json:"userLoginField,omitempty" yaml:"user_login_field,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserMemberAttribute string `json:"userMemberAttribute,omitempty" yaml:"user_member_attribute,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserNameField string `json:"userNameField,omitempty" yaml:"user_name_field,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserObjectClass string `json:"userObjectClass,omitempty" yaml:"user_object_class,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UserSearchField string `json:"userSearchField,omitempty" yaml:"user_search_field,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LdapconfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Ldapconfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LdapconfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LdapconfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LdapconfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Ldapconfig) (*Ldapconfig, error)
0000000000000000000000000000000000000000;;		Update(existing *Ldapconfig, updates interface{}) (*Ldapconfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Ldapconfig, error)
0000000000000000000000000000000000000000;;		Delete(container *Ldapconfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLdapconfigClient(rancherClient *RancherClient) *LdapconfigClient {
0000000000000000000000000000000000000000;;		return &LdapconfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LdapconfigClient) Create(container *Ldapconfig) (*Ldapconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Ldapconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LDAPCONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LdapconfigClient) Update(existing *Ldapconfig, updates interface{}) (*Ldapconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Ldapconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LDAPCONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LdapconfigClient) List(opts *ListOpts) (*LdapconfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LdapconfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LDAPCONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LdapconfigClient) ById(id string) (*Ldapconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Ldapconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LDAPCONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LdapconfigClient) Delete(container *Ldapconfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LDAPCONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
