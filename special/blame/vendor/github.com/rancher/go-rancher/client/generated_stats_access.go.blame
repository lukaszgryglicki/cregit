0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		STATS_ACCESS_TYPE = "statsAccess"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsAccess struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty" yaml:"token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `json:"url,omitempty" yaml:"url,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsAccessCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []StatsAccess `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsAccessClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StatsAccessOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*StatsAccessCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *StatsAccess) (*StatsAccess, error)
0000000000000000000000000000000000000000;;		Update(existing *StatsAccess, updates interface{}) (*StatsAccess, error)
0000000000000000000000000000000000000000;;		ById(id string) (*StatsAccess, error)
0000000000000000000000000000000000000000;;		Delete(container *StatsAccess) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newStatsAccessClient(rancherClient *RancherClient) *StatsAccessClient {
0000000000000000000000000000000000000000;;		return &StatsAccessClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *StatsAccessClient) Create(container *StatsAccess) (*StatsAccess, error) {
0000000000000000000000000000000000000000;;		resp := &StatsAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(STATS_ACCESS_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *StatsAccessClient) Update(existing *StatsAccess, updates interface{}) (*StatsAccess, error) {
0000000000000000000000000000000000000000;;		resp := &StatsAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(STATS_ACCESS_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *StatsAccessClient) List(opts *ListOpts) (*StatsAccessCollection, error) {
0000000000000000000000000000000000000000;;		resp := &StatsAccessCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(STATS_ACCESS_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *StatsAccessClient) ById(id string) (*StatsAccess, error) {
0000000000000000000000000000000000000000;;		resp := &StatsAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(STATS_ACCESS_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *StatsAccessClient) Delete(container *StatsAccess) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(STATS_ACCESS_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
