0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PUBLIC_ENDPOINT_TYPE = "publicEndpoint"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicEndpoint struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostId string `json:"hostId,omitempty" yaml:"host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceId string `json:"instanceId,omitempty" yaml:"instance_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddress string `json:"ipAddress,omitempty" yaml:"ip_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port int64 `json:"port,omitempty" yaml:"port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceId string `json:"serviceId,omitempty" yaml:"service_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicEndpointCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []PublicEndpoint `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicEndpointClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PublicEndpointOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*PublicEndpointCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *PublicEndpoint) (*PublicEndpoint, error)
0000000000000000000000000000000000000000;;		Update(existing *PublicEndpoint, updates interface{}) (*PublicEndpoint, error)
0000000000000000000000000000000000000000;;		ById(id string) (*PublicEndpoint, error)
0000000000000000000000000000000000000000;;		Delete(container *PublicEndpoint) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPublicEndpointClient(rancherClient *RancherClient) *PublicEndpointClient {
0000000000000000000000000000000000000000;;		return &PublicEndpointClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublicEndpointClient) Create(container *PublicEndpoint) (*PublicEndpoint, error) {
0000000000000000000000000000000000000000;;		resp := &PublicEndpoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PUBLIC_ENDPOINT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublicEndpointClient) Update(existing *PublicEndpoint, updates interface{}) (*PublicEndpoint, error) {
0000000000000000000000000000000000000000;;		resp := &PublicEndpoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PUBLIC_ENDPOINT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublicEndpointClient) List(opts *ListOpts) (*PublicEndpointCollection, error) {
0000000000000000000000000000000000000000;;		resp := &PublicEndpointCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PUBLIC_ENDPOINT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublicEndpointClient) ById(id string) (*PublicEndpoint, error) {
0000000000000000000000000000000000000000;;		resp := &PublicEndpoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PUBLIC_ENDPOINT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PublicEndpointClient) Delete(container *PublicEndpoint) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PUBLIC_ENDPOINT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
