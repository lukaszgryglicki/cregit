0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SERVICE_LINK_TYPE = "serviceLink"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLink struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceId string `json:"serviceId,omitempty" yaml:"service_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLinkCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ServiceLink `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLinkClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceLinkOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ServiceLinkCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ServiceLink) (*ServiceLink, error)
0000000000000000000000000000000000000000;;		Update(existing *ServiceLink, updates interface{}) (*ServiceLink, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ServiceLink, error)
0000000000000000000000000000000000000000;;		Delete(container *ServiceLink) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServiceLinkClient(rancherClient *RancherClient) *ServiceLinkClient {
0000000000000000000000000000000000000000;;		return &ServiceLinkClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceLinkClient) Create(container *ServiceLink) (*ServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SERVICE_LINK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceLinkClient) Update(existing *ServiceLink, updates interface{}) (*ServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SERVICE_LINK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceLinkClient) List(opts *ListOpts) (*ServiceLinkCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceLinkCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SERVICE_LINK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceLinkClient) ById(id string) (*ServiceLink, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceLink{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SERVICE_LINK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceLinkClient) Delete(container *ServiceLink) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SERVICE_LINK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
