0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONFIG_ITEM_TYPE = "configItem"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItem struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceVersion string `json:"sourceVersion,omitempty" yaml:"source_version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ConfigItem `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ConfigItemCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ConfigItem) (*ConfigItem, error)
0000000000000000000000000000000000000000;;		Update(existing *ConfigItem, updates interface{}) (*ConfigItem, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ConfigItem, error)
0000000000000000000000000000000000000000;;		Delete(container *ConfigItem) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newConfigItemClient(rancherClient *RancherClient) *ConfigItemClient {
0000000000000000000000000000000000000000;;		return &ConfigItemClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemClient) Create(container *ConfigItem) (*ConfigItem, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItem{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONFIG_ITEM_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemClient) Update(existing *ConfigItem, updates interface{}) (*ConfigItem, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItem{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONFIG_ITEM_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemClient) List(opts *ListOpts) (*ConfigItemCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItemCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONFIG_ITEM_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemClient) ById(id string) (*ConfigItem, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItem{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONFIG_ITEM_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemClient) Delete(container *ConfigItem) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONFIG_ITEM_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
