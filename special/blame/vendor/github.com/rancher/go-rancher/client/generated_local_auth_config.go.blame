0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOCAL_AUTH_CONFIG_TYPE = "localAuthConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalAuthConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccessMode string `json:"accessMode,omitempty" yaml:"access_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Password string `json:"password,omitempty" yaml:"password,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Username string `json:"username,omitempty" yaml:"username,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalAuthConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LocalAuthConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalAuthConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalAuthConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LocalAuthConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LocalAuthConfig) (*LocalAuthConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *LocalAuthConfig, updates interface{}) (*LocalAuthConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LocalAuthConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *LocalAuthConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLocalAuthConfigClient(rancherClient *RancherClient) *LocalAuthConfigClient {
0000000000000000000000000000000000000000;;		return &LocalAuthConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LocalAuthConfigClient) Create(container *LocalAuthConfig) (*LocalAuthConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LocalAuthConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOCAL_AUTH_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LocalAuthConfigClient) Update(existing *LocalAuthConfig, updates interface{}) (*LocalAuthConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LocalAuthConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOCAL_AUTH_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LocalAuthConfigClient) List(opts *ListOpts) (*LocalAuthConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LocalAuthConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOCAL_AUTH_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LocalAuthConfigClient) ById(id string) (*LocalAuthConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LocalAuthConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOCAL_AUTH_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LocalAuthConfigClient) Delete(container *LocalAuthConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOCAL_AUTH_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
