0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AUDIT_LOG_TYPE = "auditLog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuditLog struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthType string `json:"authType,omitempty" yaml:"auth_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthenticatedAsAccountId string `json:"authenticatedAsAccountId,omitempty" yaml:"authenticated_as_account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthenticatedAsIdentityId string `json:"authenticatedAsIdentityId,omitempty" yaml:"authenticated_as_identity_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientIp string `json:"clientIp,omitempty" yaml:"client_ip,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventType string `json:"eventType,omitempty" yaml:"event_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestObject string `json:"requestObject,omitempty" yaml:"request_object,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceId int64 `json:"resourceId,omitempty" yaml:"resource_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceType string `json:"resourceType,omitempty" yaml:"resource_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResponseCode string `json:"responseCode,omitempty" yaml:"response_code,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResponseObject string `json:"responseObject,omitempty" yaml:"response_object,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuditLogCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []AuditLog `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuditLogClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuditLogOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*AuditLogCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *AuditLog) (*AuditLog, error)
0000000000000000000000000000000000000000;;		Update(existing *AuditLog, updates interface{}) (*AuditLog, error)
0000000000000000000000000000000000000000;;		ById(id string) (*AuditLog, error)
0000000000000000000000000000000000000000;;		Delete(container *AuditLog) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAuditLogClient(rancherClient *RancherClient) *AuditLogClient {
0000000000000000000000000000000000000000;;		return &AuditLogClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuditLogClient) Create(container *AuditLog) (*AuditLog, error) {
0000000000000000000000000000000000000000;;		resp := &AuditLog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(AUDIT_LOG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuditLogClient) Update(existing *AuditLog, updates interface{}) (*AuditLog, error) {
0000000000000000000000000000000000000000;;		resp := &AuditLog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(AUDIT_LOG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuditLogClient) List(opts *ListOpts) (*AuditLogCollection, error) {
0000000000000000000000000000000000000000;;		resp := &AuditLogCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(AUDIT_LOG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuditLogClient) ById(id string) (*AuditLog, error) {
0000000000000000000000000000000000000000;;		resp := &AuditLog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(AUDIT_LOG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AuditLogClient) Delete(container *AuditLog) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(AUDIT_LOG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
