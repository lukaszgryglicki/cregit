0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AMAZONEC2CONFIG_TYPE = "amazonec2Config"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Amazonec2Config struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccessKey string `json:"accessKey,omitempty" yaml:"access_key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ami string `json:"ami,omitempty" yaml:"ami,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeviceName string `json:"deviceName,omitempty" yaml:"device_name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Endpoint string `json:"endpoint,omitempty" yaml:"endpoint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IamInstanceProfile string `json:"iamInstanceProfile,omitempty" yaml:"iam_instance_profile,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InsecureTransport bool `json:"insecureTransport,omitempty" yaml:"insecure_transport,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceType string `json:"instanceType,omitempty" yaml:"instance_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeypairName string `json:"keypairName,omitempty" yaml:"keypair_name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Monitoring bool `json:"monitoring,omitempty" yaml:"monitoring,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpenPort []string `json:"openPort,omitempty" yaml:"open_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivateAddressOnly bool `json:"privateAddressOnly,omitempty" yaml:"private_address_only,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Region string `json:"region,omitempty" yaml:"region,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestSpotInstance bool `json:"requestSpotInstance,omitempty" yaml:"request_spot_instance,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Retries string `json:"retries,omitempty" yaml:"retries,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RootSize string `json:"rootSize,omitempty" yaml:"root_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecretKey string `json:"secretKey,omitempty" yaml:"secret_key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecurityGroup []string `json:"securityGroup,omitempty" yaml:"security_group,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SessionToken string `json:"sessionToken,omitempty" yaml:"session_token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SpotPrice string `json:"spotPrice,omitempty" yaml:"spot_price,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshKeypath string `json:"sshKeypath,omitempty" yaml:"ssh_keypath,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshUser string `json:"sshUser,omitempty" yaml:"ssh_user,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SubnetId string `json:"subnetId,omitempty" yaml:"subnet_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tags string `json:"tags,omitempty" yaml:"tags,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UseEbsOptimizedInstance bool `json:"useEbsOptimizedInstance,omitempty" yaml:"use_ebs_optimized_instance,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UsePrivateAddress bool `json:"usePrivateAddress,omitempty" yaml:"use_private_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VolumeType string `json:"volumeType,omitempty" yaml:"volume_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VpcId string `json:"vpcId,omitempty" yaml:"vpc_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Zone string `json:"zone,omitempty" yaml:"zone,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Amazonec2ConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Amazonec2Config `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Amazonec2ConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Amazonec2ConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*Amazonec2ConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Amazonec2Config) (*Amazonec2Config, error)
0000000000000000000000000000000000000000;;		Update(existing *Amazonec2Config, updates interface{}) (*Amazonec2Config, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Amazonec2Config, error)
0000000000000000000000000000000000000000;;		Delete(container *Amazonec2Config) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAmazonec2ConfigClient(rancherClient *RancherClient) *Amazonec2ConfigClient {
0000000000000000000000000000000000000000;;		return &Amazonec2ConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Amazonec2ConfigClient) Create(container *Amazonec2Config) (*Amazonec2Config, error) {
0000000000000000000000000000000000000000;;		resp := &Amazonec2Config{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(AMAZONEC2CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Amazonec2ConfigClient) Update(existing *Amazonec2Config, updates interface{}) (*Amazonec2Config, error) {
0000000000000000000000000000000000000000;;		resp := &Amazonec2Config{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(AMAZONEC2CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Amazonec2ConfigClient) List(opts *ListOpts) (*Amazonec2ConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &Amazonec2ConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(AMAZONEC2CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Amazonec2ConfigClient) ById(id string) (*Amazonec2Config, error) {
0000000000000000000000000000000000000000;;		resp := &Amazonec2Config{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(AMAZONEC2CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *Amazonec2ConfigClient) Delete(container *Amazonec2Config) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(AMAZONEC2CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
