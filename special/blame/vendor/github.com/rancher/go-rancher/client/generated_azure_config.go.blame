0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		AZURE_CONFIG_TYPE = "azureConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AzureConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AvailabilitySet string `json:"availabilitySet,omitempty" yaml:"availability_set,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientId string `json:"clientId,omitempty" yaml:"client_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientSecret string `json:"clientSecret,omitempty" yaml:"client_secret,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CustomData string `json:"customData,omitempty" yaml:"custom_data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DockerPort string `json:"dockerPort,omitempty" yaml:"docker_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Environment string `json:"environment,omitempty" yaml:"environment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Image string `json:"image,omitempty" yaml:"image,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Location string `json:"location,omitempty" yaml:"location,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NoPublicIp bool `json:"noPublicIp,omitempty" yaml:"no_public_ip,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OpenPort []string `json:"openPort,omitempty" yaml:"open_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivateIpAddress string `json:"privateIpAddress,omitempty" yaml:"private_ip_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceGroup string `json:"resourceGroup,omitempty" yaml:"resource_group,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Size string `json:"size,omitempty" yaml:"size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SshUser string `json:"sshUser,omitempty" yaml:"ssh_user,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StaticPublicIp bool `json:"staticPublicIp,omitempty" yaml:"static_public_ip,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageType string `json:"storageType,omitempty" yaml:"storage_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Subnet string `json:"subnet,omitempty" yaml:"subnet,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SubnetPrefix string `json:"subnetPrefix,omitempty" yaml:"subnet_prefix,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SubscriptionId string `json:"subscriptionId,omitempty" yaml:"subscription_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UsePrivateIp bool `json:"usePrivateIp,omitempty" yaml:"use_private_ip,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vnet string `json:"vnet,omitempty" yaml:"vnet,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AzureConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []AzureConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AzureConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AzureConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*AzureConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *AzureConfig) (*AzureConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *AzureConfig, updates interface{}) (*AzureConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*AzureConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *AzureConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAzureConfigClient(rancherClient *RancherClient) *AzureConfigClient {
0000000000000000000000000000000000000000;;		return &AzureConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AzureConfigClient) Create(container *AzureConfig) (*AzureConfig, error) {
0000000000000000000000000000000000000000;;		resp := &AzureConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(AZURE_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AzureConfigClient) Update(existing *AzureConfig, updates interface{}) (*AzureConfig, error) {
0000000000000000000000000000000000000000;;		resp := &AzureConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(AZURE_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AzureConfigClient) List(opts *ListOpts) (*AzureConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &AzureConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(AZURE_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AzureConfigClient) ById(id string) (*AzureConfig, error) {
0000000000000000000000000000000000000000;;		resp := &AzureConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(AZURE_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AzureConfigClient) Delete(container *AzureConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(AZURE_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
