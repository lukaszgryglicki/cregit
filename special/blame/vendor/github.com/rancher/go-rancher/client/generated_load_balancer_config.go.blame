0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOAD_BALANCER_CONFIG_TYPE = "loadBalancerConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HaproxyConfig *HaproxyConfig `json:"haproxyConfig,omitempty" yaml:"haproxy_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LbCookieStickinessPolicy *LoadBalancerCookieStickinessPolicy `json:"lbCookieStickinessPolicy,omitempty" yaml:"lb_cookie_stickiness_policy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LoadBalancerConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LoadBalancerConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LoadBalancerConfig) (*LoadBalancerConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *LoadBalancerConfig, updates interface{}) (*LoadBalancerConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LoadBalancerConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *LoadBalancerConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLoadBalancerConfigClient(rancherClient *RancherClient) *LoadBalancerConfigClient {
0000000000000000000000000000000000000000;;		return &LoadBalancerConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerConfigClient) Create(container *LoadBalancerConfig) (*LoadBalancerConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOAD_BALANCER_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerConfigClient) Update(existing *LoadBalancerConfig, updates interface{}) (*LoadBalancerConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOAD_BALANCER_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerConfigClient) List(opts *ListOpts) (*LoadBalancerConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOAD_BALANCER_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerConfigClient) ById(id string) (*LoadBalancerConfig, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOAD_BALANCER_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerConfigClient) Delete(container *LoadBalancerConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOAD_BALANCER_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
