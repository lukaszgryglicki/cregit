0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DATABASECHANGELOGLOCK_TYPE = "databasechangeloglock"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Databasechangeloglock struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Locked bool `json:"locked,omitempty" yaml:"locked,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Lockedby string `json:"lockedby,omitempty" yaml:"lockedby,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Lockgranted string `json:"lockgranted,omitempty" yaml:"lockgranted,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangeloglockCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Databasechangeloglock `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangeloglockClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangeloglockOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*DatabasechangeloglockCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Databasechangeloglock) (*Databasechangeloglock, error)
0000000000000000000000000000000000000000;;		Update(existing *Databasechangeloglock, updates interface{}) (*Databasechangeloglock, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Databasechangeloglock, error)
0000000000000000000000000000000000000000;;		Delete(container *Databasechangeloglock) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDatabasechangeloglockClient(rancherClient *RancherClient) *DatabasechangeloglockClient {
0000000000000000000000000000000000000000;;		return &DatabasechangeloglockClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangeloglockClient) Create(container *Databasechangeloglock) (*Databasechangeloglock, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangeloglock{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(DATABASECHANGELOGLOCK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangeloglockClient) Update(existing *Databasechangeloglock, updates interface{}) (*Databasechangeloglock, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangeloglock{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(DATABASECHANGELOGLOCK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangeloglockClient) List(opts *ListOpts) (*DatabasechangeloglockCollection, error) {
0000000000000000000000000000000000000000;;		resp := &DatabasechangeloglockCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(DATABASECHANGELOGLOCK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangeloglockClient) ById(id string) (*Databasechangeloglock, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangeloglock{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(DATABASECHANGELOGLOCK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangeloglockClient) Delete(container *Databasechangeloglock) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(DATABASECHANGELOGLOCK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
