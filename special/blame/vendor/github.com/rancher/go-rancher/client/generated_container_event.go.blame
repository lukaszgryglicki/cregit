0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONTAINER_EVENT_TYPE = "containerEvent"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerEvent struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DockerInspect interface{} `json:"dockerInspect,omitempty" yaml:"docker_inspect,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalFrom string `json:"externalFrom,omitempty" yaml:"external_from,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalStatus string `json:"externalStatus,omitempty" yaml:"external_status,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalTimestamp int64 `json:"externalTimestamp,omitempty" yaml:"external_timestamp,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostId string `json:"hostId,omitempty" yaml:"host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReportedHostUuid string `json:"reportedHostUuid,omitempty" yaml:"reported_host_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerEventCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ContainerEvent `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerEventClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerEventOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ContainerEventCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ContainerEvent) (*ContainerEvent, error)
0000000000000000000000000000000000000000;;		Update(existing *ContainerEvent, updates interface{}) (*ContainerEvent, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ContainerEvent, error)
0000000000000000000000000000000000000000;;		Delete(container *ContainerEvent) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*ContainerEvent) (*ContainerEvent, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*ContainerEvent) (*ContainerEvent, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainerEventClient(rancherClient *RancherClient) *ContainerEventClient {
0000000000000000000000000000000000000000;;		return &ContainerEventClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) Create(container *ContainerEvent) (*ContainerEvent, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerEvent{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONTAINER_EVENT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) Update(existing *ContainerEvent, updates interface{}) (*ContainerEvent, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerEvent{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONTAINER_EVENT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) List(opts *ListOpts) (*ContainerEventCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerEventCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONTAINER_EVENT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) ById(id string) (*ContainerEvent, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerEvent{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONTAINER_EVENT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) Delete(container *ContainerEvent) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONTAINER_EVENT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) ActionCreate(resource *ContainerEvent) (*ContainerEvent, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &ContainerEvent{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(CONTAINER_EVENT_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerEventClient) ActionRemove(resource *ContainerEvent) (*ContainerEvent, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &ContainerEvent{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(CONTAINER_EVENT_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
