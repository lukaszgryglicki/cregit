0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		EXTERNAL_SERVICE_TYPE = "externalService"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalService struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EnvironmentId string `json:"environmentId,omitempty" yaml:"environment_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalIpAddresses []string `json:"externalIpAddresses,omitempty" yaml:"external_ip_addresses,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Fqdn string `json:"fqdn,omitempty" yaml:"fqdn,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthCheck *InstanceHealthCheck `json:"healthCheck,omitempty" yaml:"health_check,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthState string `json:"healthState,omitempty" yaml:"health_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LaunchConfig *LaunchConfig `json:"launchConfig,omitempty" yaml:"launch_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartOnCreate bool `json:"startOnCreate,omitempty" yaml:"start_on_create,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Upgrade *ServiceUpgrade `json:"upgrade,omitempty" yaml:"upgrade,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalServiceCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ExternalService `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalServiceClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExternalServiceOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ExternalServiceCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ExternalService) (*ExternalService, error)
0000000000000000000000000000000000000000;;		Update(existing *ExternalService, updates interface{}) (*ExternalService, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ExternalService, error)
0000000000000000000000000000000000000000;;		Delete(container *ExternalService) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionActivate(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelrollback(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelupgrade(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeactivate(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionFinishupgrade(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestart(*ExternalService, *ServiceRestart) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRollback(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*ExternalService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpgrade(*ExternalService, *ServiceUpgrade) (*Service, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newExternalServiceClient(rancherClient *RancherClient) *ExternalServiceClient {
0000000000000000000000000000000000000000;;		return &ExternalServiceClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) Create(container *ExternalService) (*ExternalService, error) {
0000000000000000000000000000000000000000;;		resp := &ExternalService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(EXTERNAL_SERVICE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) Update(existing *ExternalService, updates interface{}) (*ExternalService, error) {
0000000000000000000000000000000000000000;;		resp := &ExternalService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(EXTERNAL_SERVICE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) List(opts *ListOpts) (*ExternalServiceCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ExternalServiceCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(EXTERNAL_SERVICE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ById(id string) (*ExternalService, error) {
0000000000000000000000000000000000000000;;		resp := &ExternalService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(EXTERNAL_SERVICE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) Delete(container *ExternalService) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(EXTERNAL_SERVICE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionActivate(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "activate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionCancelrollback(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "cancelrollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionCancelupgrade(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "cancelupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionCreate(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionDeactivate(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "deactivate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionFinishupgrade(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "finishupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionRemove(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionRestart(resource *ExternalService, input *ServiceRestart) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "restart", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionRollback(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "rollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionUpdate(resource *ExternalService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExternalServiceClient) ActionUpgrade(resource *ExternalService, input *ServiceUpgrade) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(EXTERNAL_SERVICE_TYPE, "upgrade", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
