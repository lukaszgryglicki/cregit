0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		REGISTRY_CREDENTIAL_TYPE = "registryCredential"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegistryCredential struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Email string `json:"email,omitempty" yaml:"email,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PublicValue string `json:"publicValue,omitempty" yaml:"public_value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegistryId string `json:"registryId,omitempty" yaml:"registry_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecretValue string `json:"secretValue,omitempty" yaml:"secret_value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegistryCredentialCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []RegistryCredential `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegistryCredentialClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RegistryCredentialOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*RegistryCredentialCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *RegistryCredential) (*RegistryCredential, error)
0000000000000000000000000000000000000000;;		Update(existing *RegistryCredential, updates interface{}) (*RegistryCredential, error)
0000000000000000000000000000000000000000;;		ById(id string) (*RegistryCredential, error)
0000000000000000000000000000000000000000;;		Delete(container *RegistryCredential) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionActivate(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeactivate(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionPurge(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*RegistryCredential) (*Credential, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRegistryCredentialClient(rancherClient *RancherClient) *RegistryCredentialClient {
0000000000000000000000000000000000000000;;		return &RegistryCredentialClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) Create(container *RegistryCredential) (*RegistryCredential, error) {
0000000000000000000000000000000000000000;;		resp := &RegistryCredential{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(REGISTRY_CREDENTIAL_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) Update(existing *RegistryCredential, updates interface{}) (*RegistryCredential, error) {
0000000000000000000000000000000000000000;;		resp := &RegistryCredential{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(REGISTRY_CREDENTIAL_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) List(opts *ListOpts) (*RegistryCredentialCollection, error) {
0000000000000000000000000000000000000000;;		resp := &RegistryCredentialCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(REGISTRY_CREDENTIAL_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ById(id string) (*RegistryCredential, error) {
0000000000000000000000000000000000000000;;		resp := &RegistryCredential{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(REGISTRY_CREDENTIAL_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) Delete(container *RegistryCredential) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(REGISTRY_CREDENTIAL_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionActivate(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "activate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionCreate(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionDeactivate(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "deactivate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionPurge(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "purge", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionRemove(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RegistryCredentialClient) ActionUpdate(resource *RegistryCredential) (*Credential, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Credential{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(REGISTRY_CREDENTIAL_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
