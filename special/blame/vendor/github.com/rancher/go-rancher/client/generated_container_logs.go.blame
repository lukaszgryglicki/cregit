0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONTAINER_LOGS_TYPE = "containerLogs"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerLogs struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Follow bool `json:"follow,omitempty" yaml:"follow,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Lines int64 `json:"lines,omitempty" yaml:"lines,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerLogsCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ContainerLogs `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerLogsClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerLogsOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ContainerLogsCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ContainerLogs) (*ContainerLogs, error)
0000000000000000000000000000000000000000;;		Update(existing *ContainerLogs, updates interface{}) (*ContainerLogs, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ContainerLogs, error)
0000000000000000000000000000000000000000;;		Delete(container *ContainerLogs) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainerLogsClient(rancherClient *RancherClient) *ContainerLogsClient {
0000000000000000000000000000000000000000;;		return &ContainerLogsClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerLogsClient) Create(container *ContainerLogs) (*ContainerLogs, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerLogs{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONTAINER_LOGS_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerLogsClient) Update(existing *ContainerLogs, updates interface{}) (*ContainerLogs, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerLogs{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONTAINER_LOGS_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerLogsClient) List(opts *ListOpts) (*ContainerLogsCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerLogsCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONTAINER_LOGS_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerLogsClient) ById(id string) (*ContainerLogs, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerLogs{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONTAINER_LOGS_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerLogsClient) Delete(container *ContainerLogs) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONTAINER_LOGS_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
