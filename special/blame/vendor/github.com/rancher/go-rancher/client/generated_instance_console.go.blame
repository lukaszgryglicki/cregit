0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		INSTANCE_CONSOLE_TYPE = "instanceConsole"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceConsole struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Password string `json:"password,omitempty" yaml:"password,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `json:"url,omitempty" yaml:"url,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceConsoleCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []InstanceConsole `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceConsoleClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceConsoleOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*InstanceConsoleCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *InstanceConsole) (*InstanceConsole, error)
0000000000000000000000000000000000000000;;		Update(existing *InstanceConsole, updates interface{}) (*InstanceConsole, error)
0000000000000000000000000000000000000000;;		ById(id string) (*InstanceConsole, error)
0000000000000000000000000000000000000000;;		Delete(container *InstanceConsole) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInstanceConsoleClient(rancherClient *RancherClient) *InstanceConsoleClient {
0000000000000000000000000000000000000000;;		return &InstanceConsoleClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceConsoleClient) Create(container *InstanceConsole) (*InstanceConsole, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceConsole{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(INSTANCE_CONSOLE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceConsoleClient) Update(existing *InstanceConsole, updates interface{}) (*InstanceConsole, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceConsole{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(INSTANCE_CONSOLE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceConsoleClient) List(opts *ListOpts) (*InstanceConsoleCollection, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceConsoleCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(INSTANCE_CONSOLE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceConsoleClient) ById(id string) (*InstanceConsole, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceConsole{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(INSTANCE_CONSOLE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceConsoleClient) Delete(container *InstanceConsole) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(INSTANCE_CONSOLE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
