0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		VOLUME_SNAPSHOT_INPUT_TYPE = "volumeSnapshotInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeSnapshotInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeSnapshotInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []VolumeSnapshotInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeSnapshotInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VolumeSnapshotInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*VolumeSnapshotInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *VolumeSnapshotInput) (*VolumeSnapshotInput, error)
0000000000000000000000000000000000000000;;		Update(existing *VolumeSnapshotInput, updates interface{}) (*VolumeSnapshotInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*VolumeSnapshotInput, error)
0000000000000000000000000000000000000000;;		Delete(container *VolumeSnapshotInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVolumeSnapshotInputClient(rancherClient *RancherClient) *VolumeSnapshotInputClient {
0000000000000000000000000000000000000000;;		return &VolumeSnapshotInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VolumeSnapshotInputClient) Create(container *VolumeSnapshotInput) (*VolumeSnapshotInput, error) {
0000000000000000000000000000000000000000;;		resp := &VolumeSnapshotInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(VOLUME_SNAPSHOT_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VolumeSnapshotInputClient) Update(existing *VolumeSnapshotInput, updates interface{}) (*VolumeSnapshotInput, error) {
0000000000000000000000000000000000000000;;		resp := &VolumeSnapshotInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(VOLUME_SNAPSHOT_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VolumeSnapshotInputClient) List(opts *ListOpts) (*VolumeSnapshotInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &VolumeSnapshotInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(VOLUME_SNAPSHOT_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VolumeSnapshotInputClient) ById(id string) (*VolumeSnapshotInput, error) {
0000000000000000000000000000000000000000;;		resp := &VolumeSnapshotInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(VOLUME_SNAPSHOT_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VolumeSnapshotInputClient) Delete(container *VolumeSnapshotInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(VOLUME_SNAPSHOT_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
