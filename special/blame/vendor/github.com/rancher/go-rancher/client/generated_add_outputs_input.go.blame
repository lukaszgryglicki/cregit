0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ADD_OUTPUTS_INPUT_TYPE = "addOutputsInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddOutputsInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Outputs map[string]interface{} `json:"outputs,omitempty" yaml:"outputs,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddOutputsInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []AddOutputsInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddOutputsInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AddOutputsInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*AddOutputsInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *AddOutputsInput) (*AddOutputsInput, error)
0000000000000000000000000000000000000000;;		Update(existing *AddOutputsInput, updates interface{}) (*AddOutputsInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*AddOutputsInput, error)
0000000000000000000000000000000000000000;;		Delete(container *AddOutputsInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newAddOutputsInputClient(rancherClient *RancherClient) *AddOutputsInputClient {
0000000000000000000000000000000000000000;;		return &AddOutputsInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AddOutputsInputClient) Create(container *AddOutputsInput) (*AddOutputsInput, error) {
0000000000000000000000000000000000000000;;		resp := &AddOutputsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(ADD_OUTPUTS_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AddOutputsInputClient) Update(existing *AddOutputsInput, updates interface{}) (*AddOutputsInput, error) {
0000000000000000000000000000000000000000;;		resp := &AddOutputsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(ADD_OUTPUTS_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AddOutputsInputClient) List(opts *ListOpts) (*AddOutputsInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &AddOutputsInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(ADD_OUTPUTS_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AddOutputsInputClient) ById(id string) (*AddOutputsInput, error) {
0000000000000000000000000000000000000000;;		resp := &AddOutputsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(ADD_OUTPUTS_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *AddOutputsInputClient) Delete(container *AddOutputsInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(ADD_OUTPUTS_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
