0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HA_CONFIG_INPUT_TYPE = "haConfigInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cert string `json:"cert,omitempty" yaml:"cert,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CertChain string `json:"certChain,omitempty" yaml:"cert_chain,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterSize int64 `json:"clusterSize,omitempty" yaml:"cluster_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostRegistrationUrl string `json:"hostRegistrationUrl,omitempty" yaml:"host_registration_url,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HttpEnabled bool `json:"httpEnabled,omitempty" yaml:"http_enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HttpPort int64 `json:"httpPort,omitempty" yaml:"http_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HttpsPort int64 `json:"httpsPort,omitempty" yaml:"https_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty" yaml:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PpHttpPort int64 `json:"ppHttpPort,omitempty" yaml:"pp_http_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PpHttpsPort int64 `json:"ppHttpsPort,omitempty" yaml:"pp_https_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RedisPort int64 `json:"redisPort,omitempty" yaml:"redis_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwarmEnabled bool `json:"swarmEnabled,omitempty" yaml:"swarm_enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SwarmPort int64 `json:"swarmPort,omitempty" yaml:"swarm_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ZookeeperClientPort int64 `json:"zookeeperClientPort,omitempty" yaml:"zookeeper_client_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ZookeeperLeaderPort int64 `json:"zookeeperLeaderPort,omitempty" yaml:"zookeeper_leader_port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ZookeeperQuorumPort int64 `json:"zookeeperQuorumPort,omitempty" yaml:"zookeeper_quorum_port,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []HaConfigInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*HaConfigInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *HaConfigInput) (*HaConfigInput, error)
0000000000000000000000000000000000000000;;		Update(existing *HaConfigInput, updates interface{}) (*HaConfigInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*HaConfigInput, error)
0000000000000000000000000000000000000000;;		Delete(container *HaConfigInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHaConfigInputClient(rancherClient *RancherClient) *HaConfigInputClient {
0000000000000000000000000000000000000000;;		return &HaConfigInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigInputClient) Create(container *HaConfigInput) (*HaConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(HA_CONFIG_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigInputClient) Update(existing *HaConfigInput, updates interface{}) (*HaConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(HA_CONFIG_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigInputClient) List(opts *ListOpts) (*HaConfigInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfigInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(HA_CONFIG_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigInputClient) ById(id string) (*HaConfigInput, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfigInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(HA_CONFIG_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigInputClient) Delete(container *HaConfigInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(HA_CONFIG_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
