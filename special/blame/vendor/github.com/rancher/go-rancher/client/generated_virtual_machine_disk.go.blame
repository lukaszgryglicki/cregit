0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		VIRTUAL_MACHINE_DISK_TYPE = "virtualMachineDisk"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDisk struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Driver string `json:"driver,omitempty" yaml:"driver,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Opts map[string]interface{} `json:"opts,omitempty" yaml:"opts,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReadIops int64 `json:"readIops,omitempty" yaml:"read_iops,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Root bool `json:"root,omitempty" yaml:"root,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Size string `json:"size,omitempty" yaml:"size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WriteIops int64 `json:"writeIops,omitempty" yaml:"write_iops,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDiskCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []VirtualMachineDisk `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDiskClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineDiskOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*VirtualMachineDiskCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *VirtualMachineDisk) (*VirtualMachineDisk, error)
0000000000000000000000000000000000000000;;		Update(existing *VirtualMachineDisk, updates interface{}) (*VirtualMachineDisk, error)
0000000000000000000000000000000000000000;;		ById(id string) (*VirtualMachineDisk, error)
0000000000000000000000000000000000000000;;		Delete(container *VirtualMachineDisk) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVirtualMachineDiskClient(rancherClient *RancherClient) *VirtualMachineDiskClient {
0000000000000000000000000000000000000000;;		return &VirtualMachineDiskClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineDiskClient) Create(container *VirtualMachineDisk) (*VirtualMachineDisk, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachineDisk{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(VIRTUAL_MACHINE_DISK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineDiskClient) Update(existing *VirtualMachineDisk, updates interface{}) (*VirtualMachineDisk, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachineDisk{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(VIRTUAL_MACHINE_DISK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineDiskClient) List(opts *ListOpts) (*VirtualMachineDiskCollection, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachineDiskCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(VIRTUAL_MACHINE_DISK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineDiskClient) ById(id string) (*VirtualMachineDisk, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachineDisk{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(VIRTUAL_MACHINE_DISK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineDiskClient) Delete(container *VirtualMachineDisk) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(VIRTUAL_MACHINE_DISK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
