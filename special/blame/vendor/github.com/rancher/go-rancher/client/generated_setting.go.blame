0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SETTING_TYPE = "setting"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Setting struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveValue string `json:"activeValue,omitempty" yaml:"active_value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InDb bool `json:"inDb,omitempty" yaml:"in_db,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source string `json:"source,omitempty" yaml:"source,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `json:"value,omitempty" yaml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SettingCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Setting `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SettingClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SettingOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*SettingCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Setting) (*Setting, error)
0000000000000000000000000000000000000000;;		Update(existing *Setting, updates interface{}) (*Setting, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Setting, error)
0000000000000000000000000000000000000000;;		Delete(container *Setting) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSettingClient(rancherClient *RancherClient) *SettingClient {
0000000000000000000000000000000000000000;;		return &SettingClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SettingClient) Create(container *Setting) (*Setting, error) {
0000000000000000000000000000000000000000;;		resp := &Setting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SETTING_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SettingClient) Update(existing *Setting, updates interface{}) (*Setting, error) {
0000000000000000000000000000000000000000;;		resp := &Setting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SETTING_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SettingClient) List(opts *ListOpts) (*SettingCollection, error) {
0000000000000000000000000000000000000000;;		resp := &SettingCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SETTING_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SettingClient) ById(id string) (*Setting, error) {
0000000000000000000000000000000000000000;;		resp := &Setting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SETTING_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SettingClient) Delete(container *Setting) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SETTING_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
