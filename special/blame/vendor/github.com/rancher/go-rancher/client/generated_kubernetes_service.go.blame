0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		KUBERNETES_SERVICE_TYPE = "kubernetesService"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesService struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EnvironmentId string `json:"environmentId,omitempty" yaml:"environment_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthState string `json:"healthState,omitempty" yaml:"health_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SelectorContainer string `json:"selectorContainer,omitempty" yaml:"selector_container,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Template interface{} `json:"template,omitempty" yaml:"template,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vip string `json:"vip,omitempty" yaml:"vip,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesServiceCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []KubernetesService `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesServiceClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type KubernetesServiceOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*KubernetesServiceCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *KubernetesService) (*KubernetesService, error)
0000000000000000000000000000000000000000;;		Update(existing *KubernetesService, updates interface{}) (*KubernetesService, error)
0000000000000000000000000000000000000000;;		ById(id string) (*KubernetesService, error)
0000000000000000000000000000000000000000;;		Delete(container *KubernetesService) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionActivate(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionAddservicelink(*KubernetesService, *AddRemoveServiceLinkInput) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelrollback(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelupgrade(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeactivate(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionFinishupgrade(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemoveservicelink(*KubernetesService, *AddRemoveServiceLinkInput) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestart(*KubernetesService, *ServiceRestart) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRollback(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionSetservicelinks(*KubernetesService, *SetServiceLinksInput) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*KubernetesService) (*Service, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpgrade(*KubernetesService, *ServiceUpgrade) (*Service, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newKubernetesServiceClient(rancherClient *RancherClient) *KubernetesServiceClient {
0000000000000000000000000000000000000000;;		return &KubernetesServiceClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) Create(container *KubernetesService) (*KubernetesService, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(KUBERNETES_SERVICE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) Update(existing *KubernetesService, updates interface{}) (*KubernetesService, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(KUBERNETES_SERVICE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) List(opts *ListOpts) (*KubernetesServiceCollection, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesServiceCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(KUBERNETES_SERVICE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ById(id string) (*KubernetesService, error) {
0000000000000000000000000000000000000000;;		resp := &KubernetesService{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(KUBERNETES_SERVICE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) Delete(container *KubernetesService) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(KUBERNETES_SERVICE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionActivate(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "activate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionAddservicelink(resource *KubernetesService, input *AddRemoveServiceLinkInput) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "addservicelink", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionCancelrollback(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "cancelrollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionCancelupgrade(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "cancelupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionCreate(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionDeactivate(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "deactivate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionFinishupgrade(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "finishupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionRemove(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionRemoveservicelink(resource *KubernetesService, input *AddRemoveServiceLinkInput) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "removeservicelink", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionRestart(resource *KubernetesService, input *ServiceRestart) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "restart", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionRollback(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "rollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionSetservicelinks(resource *KubernetesService, input *SetServiceLinksInput) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "setservicelinks", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionUpdate(resource *KubernetesService) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *KubernetesServiceClient) ActionUpgrade(resource *KubernetesService, input *ServiceUpgrade) (*Service, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Service{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(KUBERNETES_SERVICE_TYPE, "upgrade", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
