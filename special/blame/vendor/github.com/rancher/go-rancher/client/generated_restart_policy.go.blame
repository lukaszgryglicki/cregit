0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		RESTART_POLICY_TYPE = "restartPolicy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartPolicy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaximumRetryCount int64 `json:"maximumRetryCount,omitempty" yaml:"maximum_retry_count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartPolicyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []RestartPolicy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartPolicyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestartPolicyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*RestartPolicyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *RestartPolicy) (*RestartPolicy, error)
0000000000000000000000000000000000000000;;		Update(existing *RestartPolicy, updates interface{}) (*RestartPolicy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*RestartPolicy, error)
0000000000000000000000000000000000000000;;		Delete(container *RestartPolicy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRestartPolicyClient(rancherClient *RancherClient) *RestartPolicyClient {
0000000000000000000000000000000000000000;;		return &RestartPolicyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestartPolicyClient) Create(container *RestartPolicy) (*RestartPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &RestartPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(RESTART_POLICY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestartPolicyClient) Update(existing *RestartPolicy, updates interface{}) (*RestartPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &RestartPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(RESTART_POLICY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestartPolicyClient) List(opts *ListOpts) (*RestartPolicyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &RestartPolicyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(RESTART_POLICY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestartPolicyClient) ById(id string) (*RestartPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &RestartPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(RESTART_POLICY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestartPolicyClient) Delete(container *RestartPolicy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(RESTART_POLICY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
