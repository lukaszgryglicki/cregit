0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		INSTANCE_STOP_TYPE = "instanceStop"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceStop struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Remove bool `json:"remove,omitempty" yaml:"remove,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timeout int64 `json:"timeout,omitempty" yaml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceStopCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []InstanceStop `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceStopClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceStopOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*InstanceStopCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *InstanceStop) (*InstanceStop, error)
0000000000000000000000000000000000000000;;		Update(existing *InstanceStop, updates interface{}) (*InstanceStop, error)
0000000000000000000000000000000000000000;;		ById(id string) (*InstanceStop, error)
0000000000000000000000000000000000000000;;		Delete(container *InstanceStop) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInstanceStopClient(rancherClient *RancherClient) *InstanceStopClient {
0000000000000000000000000000000000000000;;		return &InstanceStopClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceStopClient) Create(container *InstanceStop) (*InstanceStop, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceStop{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(INSTANCE_STOP_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceStopClient) Update(existing *InstanceStop, updates interface{}) (*InstanceStop, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceStop{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(INSTANCE_STOP_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceStopClient) List(opts *ListOpts) (*InstanceStopCollection, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceStopCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(INSTANCE_STOP_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceStopClient) ById(id string) (*InstanceStop, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceStop{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(INSTANCE_STOP_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceStopClient) Delete(container *InstanceStop) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(INSTANCE_STOP_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
