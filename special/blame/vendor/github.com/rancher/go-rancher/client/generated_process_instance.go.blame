0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PROCESS_INSTANCE_TYPE = "processInstance"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInstance struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty" yaml:"end_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExitReason string `json:"exitReason,omitempty" yaml:"exit_reason,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Phase string `json:"phase,omitempty" yaml:"phase,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Priority int64 `json:"priority,omitempty" yaml:"priority,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProcessName string `json:"processName,omitempty" yaml:"process_name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceId string `json:"resourceId,omitempty" yaml:"resource_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceType string `json:"resourceType,omitempty" yaml:"resource_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Result string `json:"result,omitempty" yaml:"result,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RunningProcessServerId string `json:"runningProcessServerId,omitempty" yaml:"running_process_server_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartProcessServerId string `json:"startProcessServerId,omitempty" yaml:"start_process_server_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty" yaml:"start_time,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInstanceCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ProcessInstance `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInstanceClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessInstanceOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ProcessInstanceCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ProcessInstance) (*ProcessInstance, error)
0000000000000000000000000000000000000000;;		Update(existing *ProcessInstance, updates interface{}) (*ProcessInstance, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ProcessInstance, error)
0000000000000000000000000000000000000000;;		Delete(container *ProcessInstance) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newProcessInstanceClient(rancherClient *RancherClient) *ProcessInstanceClient {
0000000000000000000000000000000000000000;;		return &ProcessInstanceClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessInstanceClient) Create(container *ProcessInstance) (*ProcessInstance, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PROCESS_INSTANCE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessInstanceClient) Update(existing *ProcessInstance, updates interface{}) (*ProcessInstance, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PROCESS_INSTANCE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessInstanceClient) List(opts *ListOpts) (*ProcessInstanceCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessInstanceCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PROCESS_INSTANCE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessInstanceClient) ById(id string) (*ProcessInstance, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PROCESS_INSTANCE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessInstanceClient) Delete(container *ProcessInstance) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PROCESS_INSTANCE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
