0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SUBSCRIBE_TYPE = "subscribe"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Subscribe struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AgentId string `json:"agentId,omitempty" yaml:"agent_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EventNames []string `json:"eventNames,omitempty" yaml:"event_names,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SubscribeCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Subscribe `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SubscribeClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SubscribeOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*SubscribeCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Subscribe) (*Subscribe, error)
0000000000000000000000000000000000000000;;		Update(existing *Subscribe, updates interface{}) (*Subscribe, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Subscribe, error)
0000000000000000000000000000000000000000;;		Delete(container *Subscribe) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSubscribeClient(rancherClient *RancherClient) *SubscribeClient {
0000000000000000000000000000000000000000;;		return &SubscribeClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SubscribeClient) Create(container *Subscribe) (*Subscribe, error) {
0000000000000000000000000000000000000000;;		resp := &Subscribe{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SUBSCRIBE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SubscribeClient) Update(existing *Subscribe, updates interface{}) (*Subscribe, error) {
0000000000000000000000000000000000000000;;		resp := &Subscribe{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SUBSCRIBE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SubscribeClient) List(opts *ListOpts) (*SubscribeCollection, error) {
0000000000000000000000000000000000000000;;		resp := &SubscribeCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SUBSCRIBE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SubscribeClient) ById(id string) (*Subscribe, error) {
0000000000000000000000000000000000000000;;		resp := &Subscribe{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SUBSCRIBE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SubscribeClient) Delete(container *Subscribe) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SUBSCRIBE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
