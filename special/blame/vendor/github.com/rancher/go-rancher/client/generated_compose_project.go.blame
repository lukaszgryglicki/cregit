0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		COMPOSE_PROJECT_TYPE = "composeProject"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeProject struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Environment map[string]interface{} `json:"environment,omitempty" yaml:"environment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthState string `json:"healthState,omitempty" yaml:"health_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PreviousEnvironment map[string]interface{} `json:"previousEnvironment,omitempty" yaml:"previous_environment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PreviousExternalId string `json:"previousExternalId,omitempty" yaml:"previous_external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Templates map[string]interface{} `json:"templates,omitempty" yaml:"templates,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeProjectCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ComposeProject `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeProjectClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeProjectOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ComposeProjectCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ComposeProject) (*ComposeProject, error)
0000000000000000000000000000000000000000;;		Update(existing *ComposeProject, updates interface{}) (*ComposeProject, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ComposeProject, error)
0000000000000000000000000000000000000000;;		Delete(container *ComposeProject) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelrollback(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCancelupgrade(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionError(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionFinishupgrade(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRollback(*ComposeProject) (*Environment, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newComposeProjectClient(rancherClient *RancherClient) *ComposeProjectClient {
0000000000000000000000000000000000000000;;		return &ComposeProjectClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) Create(container *ComposeProject) (*ComposeProject, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeProject{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(COMPOSE_PROJECT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) Update(existing *ComposeProject, updates interface{}) (*ComposeProject, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeProject{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(COMPOSE_PROJECT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) List(opts *ListOpts) (*ComposeProjectCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeProjectCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(COMPOSE_PROJECT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ById(id string) (*ComposeProject, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeProject{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(COMPOSE_PROJECT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) Delete(container *ComposeProject) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(COMPOSE_PROJECT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionCancelrollback(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "cancelrollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionCancelupgrade(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "cancelupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionCreate(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionError(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "error", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionFinishupgrade(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "finishupgrade", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionRemove(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeProjectClient) ActionRollback(resource *ComposeProject) (*Environment, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Environment{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(COMPOSE_PROJECT_TYPE, "rollback", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
