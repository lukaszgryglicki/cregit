0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SET_PROJECT_MEMBERS_INPUT_TYPE = "setProjectMembersInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetProjectMembersInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Members []interface{} `json:"members,omitempty" yaml:"members,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetProjectMembersInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []SetProjectMembersInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetProjectMembersInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetProjectMembersInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*SetProjectMembersInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *SetProjectMembersInput) (*SetProjectMembersInput, error)
0000000000000000000000000000000000000000;;		Update(existing *SetProjectMembersInput, updates interface{}) (*SetProjectMembersInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*SetProjectMembersInput, error)
0000000000000000000000000000000000000000;;		Delete(container *SetProjectMembersInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSetProjectMembersInputClient(rancherClient *RancherClient) *SetProjectMembersInputClient {
0000000000000000000000000000000000000000;;		return &SetProjectMembersInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetProjectMembersInputClient) Create(container *SetProjectMembersInput) (*SetProjectMembersInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetProjectMembersInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SET_PROJECT_MEMBERS_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetProjectMembersInputClient) Update(existing *SetProjectMembersInput, updates interface{}) (*SetProjectMembersInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetProjectMembersInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SET_PROJECT_MEMBERS_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetProjectMembersInputClient) List(opts *ListOpts) (*SetProjectMembersInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &SetProjectMembersInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SET_PROJECT_MEMBERS_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetProjectMembersInputClient) ById(id string) (*SetProjectMembersInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetProjectMembersInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SET_PROJECT_MEMBERS_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetProjectMembersInputClient) Delete(container *SetProjectMembersInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SET_PROJECT_MEMBERS_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
