0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		COMPOSE_CONFIG_TYPE = "composeConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DockerComposeConfig string `json:"dockerComposeConfig,omitempty" yaml:"docker_compose_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RancherComposeConfig string `json:"rancherComposeConfig,omitempty" yaml:"rancher_compose_config,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ComposeConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComposeConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ComposeConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ComposeConfig) (*ComposeConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *ComposeConfig, updates interface{}) (*ComposeConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ComposeConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *ComposeConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newComposeConfigClient(rancherClient *RancherClient) *ComposeConfigClient {
0000000000000000000000000000000000000000;;		return &ComposeConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigClient) Create(container *ComposeConfig) (*ComposeConfig, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(COMPOSE_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigClient) Update(existing *ComposeConfig, updates interface{}) (*ComposeConfig, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(COMPOSE_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigClient) List(opts *ListOpts) (*ComposeConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(COMPOSE_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigClient) ById(id string) (*ComposeConfig, error) {
0000000000000000000000000000000000000000;;		resp := &ComposeConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(COMPOSE_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ComposeConfigClient) Delete(container *ComposeConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(COMPOSE_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
