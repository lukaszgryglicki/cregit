0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DOCKER_BUILD_TYPE = "dockerBuild"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DockerBuild struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Context string `json:"context,omitempty" yaml:"context,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dockerfile string `json:"dockerfile,omitempty" yaml:"dockerfile,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Forcerm bool `json:"forcerm,omitempty" yaml:"forcerm,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Nocache bool `json:"nocache,omitempty" yaml:"nocache,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Remote string `json:"remote,omitempty" yaml:"remote,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Rm bool `json:"rm,omitempty" yaml:"rm,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DockerBuildCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []DockerBuild `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DockerBuildClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DockerBuildOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*DockerBuildCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *DockerBuild) (*DockerBuild, error)
0000000000000000000000000000000000000000;;		Update(existing *DockerBuild, updates interface{}) (*DockerBuild, error)
0000000000000000000000000000000000000000;;		ById(id string) (*DockerBuild, error)
0000000000000000000000000000000000000000;;		Delete(container *DockerBuild) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDockerBuildClient(rancherClient *RancherClient) *DockerBuildClient {
0000000000000000000000000000000000000000;;		return &DockerBuildClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DockerBuildClient) Create(container *DockerBuild) (*DockerBuild, error) {
0000000000000000000000000000000000000000;;		resp := &DockerBuild{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(DOCKER_BUILD_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DockerBuildClient) Update(existing *DockerBuild, updates interface{}) (*DockerBuild, error) {
0000000000000000000000000000000000000000;;		resp := &DockerBuild{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(DOCKER_BUILD_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DockerBuildClient) List(opts *ListOpts) (*DockerBuildCollection, error) {
0000000000000000000000000000000000000000;;		resp := &DockerBuildCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(DOCKER_BUILD_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DockerBuildClient) ById(id string) (*DockerBuild, error) {
0000000000000000000000000000000000000000;;		resp := &DockerBuild{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(DOCKER_BUILD_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DockerBuildClient) Delete(container *DockerBuild) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(DOCKER_BUILD_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
