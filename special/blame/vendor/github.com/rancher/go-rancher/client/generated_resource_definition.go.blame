0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		RESOURCE_DEFINITION_TYPE = "resourceDefinition"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceDefinition struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceDefinitionCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ResourceDefinition `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceDefinitionClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceDefinitionOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ResourceDefinitionCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ResourceDefinition) (*ResourceDefinition, error)
0000000000000000000000000000000000000000;;		Update(existing *ResourceDefinition, updates interface{}) (*ResourceDefinition, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ResourceDefinition, error)
0000000000000000000000000000000000000000;;		Delete(container *ResourceDefinition) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newResourceDefinitionClient(rancherClient *RancherClient) *ResourceDefinitionClient {
0000000000000000000000000000000000000000;;		return &ResourceDefinitionClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceDefinitionClient) Create(container *ResourceDefinition) (*ResourceDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ResourceDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(RESOURCE_DEFINITION_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceDefinitionClient) Update(existing *ResourceDefinition, updates interface{}) (*ResourceDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ResourceDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(RESOURCE_DEFINITION_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceDefinitionClient) List(opts *ListOpts) (*ResourceDefinitionCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ResourceDefinitionCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(RESOURCE_DEFINITION_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceDefinitionClient) ById(id string) (*ResourceDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ResourceDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(RESOURCE_DEFINITION_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ResourceDefinitionClient) Delete(container *ResourceDefinition) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(RESOURCE_DEFINITION_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
