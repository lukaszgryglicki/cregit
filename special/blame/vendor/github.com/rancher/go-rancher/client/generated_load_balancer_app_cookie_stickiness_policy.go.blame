0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE = "loadBalancerAppCookieStickinessPolicy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerAppCookieStickinessPolicy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cookie string `json:"cookie,omitempty" yaml:"cookie,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MaxLength int64 `json:"maxLength,omitempty" yaml:"max_length,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mode string `json:"mode,omitempty" yaml:"mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Prefix bool `json:"prefix,omitempty" yaml:"prefix,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestLearn bool `json:"requestLearn,omitempty" yaml:"request_learn,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Timeout int64 `json:"timeout,omitempty" yaml:"timeout,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerAppCookieStickinessPolicyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LoadBalancerAppCookieStickinessPolicy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerAppCookieStickinessPolicyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerAppCookieStickinessPolicyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LoadBalancerAppCookieStickinessPolicyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LoadBalancerAppCookieStickinessPolicy) (*LoadBalancerAppCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		Update(existing *LoadBalancerAppCookieStickinessPolicy, updates interface{}) (*LoadBalancerAppCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LoadBalancerAppCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		Delete(container *LoadBalancerAppCookieStickinessPolicy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLoadBalancerAppCookieStickinessPolicyClient(rancherClient *RancherClient) *LoadBalancerAppCookieStickinessPolicyClient {
0000000000000000000000000000000000000000;;		return &LoadBalancerAppCookieStickinessPolicyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerAppCookieStickinessPolicyClient) Create(container *LoadBalancerAppCookieStickinessPolicy) (*LoadBalancerAppCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerAppCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerAppCookieStickinessPolicyClient) Update(existing *LoadBalancerAppCookieStickinessPolicy, updates interface{}) (*LoadBalancerAppCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerAppCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerAppCookieStickinessPolicyClient) List(opts *ListOpts) (*LoadBalancerAppCookieStickinessPolicyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerAppCookieStickinessPolicyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerAppCookieStickinessPolicyClient) ById(id string) (*LoadBalancerAppCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerAppCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerAppCookieStickinessPolicyClient) Delete(container *LoadBalancerAppCookieStickinessPolicy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOAD_BALANCER_APP_COOKIE_STICKINESS_POLICY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
