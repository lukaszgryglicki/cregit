0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		INSTANCE_HEALTH_CHECK_TYPE = "instanceHealthCheck"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceHealthCheck struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthyThreshold int64 `json:"healthyThreshold,omitempty" yaml:"healthy_threshold,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InitializingTimeout int64 `json:"initializingTimeout,omitempty" yaml:"initializing_timeout,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Interval int64 `json:"interval,omitempty" yaml:"interval,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port int64 `json:"port,omitempty" yaml:"port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RecreateOnQuorumStrategyConfig *RecreateOnQuorumStrategyConfig `json:"recreateOnQuorumStrategyConfig,omitempty" yaml:"recreate_on_quorum_strategy_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReinitializingTimeout int64 `json:"reinitializingTimeout,omitempty" yaml:"reinitializing_timeout,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestLine string `json:"requestLine,omitempty" yaml:"request_line,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResponseTimeout int64 `json:"responseTimeout,omitempty" yaml:"response_timeout,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Strategy string `json:"strategy,omitempty" yaml:"strategy,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UnhealthyThreshold int64 `json:"unhealthyThreshold,omitempty" yaml:"unhealthy_threshold,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceHealthCheckCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []InstanceHealthCheck `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceHealthCheckClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InstanceHealthCheckOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*InstanceHealthCheckCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *InstanceHealthCheck) (*InstanceHealthCheck, error)
0000000000000000000000000000000000000000;;		Update(existing *InstanceHealthCheck, updates interface{}) (*InstanceHealthCheck, error)
0000000000000000000000000000000000000000;;		ById(id string) (*InstanceHealthCheck, error)
0000000000000000000000000000000000000000;;		Delete(container *InstanceHealthCheck) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newInstanceHealthCheckClient(rancherClient *RancherClient) *InstanceHealthCheckClient {
0000000000000000000000000000000000000000;;		return &InstanceHealthCheckClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceHealthCheckClient) Create(container *InstanceHealthCheck) (*InstanceHealthCheck, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceHealthCheck{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(INSTANCE_HEALTH_CHECK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceHealthCheckClient) Update(existing *InstanceHealthCheck, updates interface{}) (*InstanceHealthCheck, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceHealthCheck{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(INSTANCE_HEALTH_CHECK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceHealthCheckClient) List(opts *ListOpts) (*InstanceHealthCheckCollection, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceHealthCheckCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(INSTANCE_HEALTH_CHECK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceHealthCheckClient) ById(id string) (*InstanceHealthCheck, error) {
0000000000000000000000000000000000000000;;		resp := &InstanceHealthCheck{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(INSTANCE_HEALTH_CHECK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *InstanceHealthCheckClient) Delete(container *InstanceHealthCheck) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(INSTANCE_HEALTH_CHECK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
