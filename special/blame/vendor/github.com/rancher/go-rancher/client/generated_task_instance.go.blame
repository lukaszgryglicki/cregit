0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TASK_INSTANCE_TYPE = "taskInstance"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInstance struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EndTime string `json:"endTime,omitempty" yaml:"end_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exception string `json:"exception,omitempty" yaml:"exception,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServerId string `json:"serverId,omitempty" yaml:"server_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartTime string `json:"startTime,omitempty" yaml:"start_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TaskId string `json:"taskId,omitempty" yaml:"task_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInstanceCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []TaskInstance `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInstanceClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskInstanceOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*TaskInstanceCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *TaskInstance) (*TaskInstance, error)
0000000000000000000000000000000000000000;;		Update(existing *TaskInstance, updates interface{}) (*TaskInstance, error)
0000000000000000000000000000000000000000;;		ById(id string) (*TaskInstance, error)
0000000000000000000000000000000000000000;;		Delete(container *TaskInstance) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTaskInstanceClient(rancherClient *RancherClient) *TaskInstanceClient {
0000000000000000000000000000000000000000;;		return &TaskInstanceClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskInstanceClient) Create(container *TaskInstance) (*TaskInstance, error) {
0000000000000000000000000000000000000000;;		resp := &TaskInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(TASK_INSTANCE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskInstanceClient) Update(existing *TaskInstance, updates interface{}) (*TaskInstance, error) {
0000000000000000000000000000000000000000;;		resp := &TaskInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(TASK_INSTANCE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskInstanceClient) List(opts *ListOpts) (*TaskInstanceCollection, error) {
0000000000000000000000000000000000000000;;		resp := &TaskInstanceCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(TASK_INSTANCE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskInstanceClient) ById(id string) (*TaskInstance, error) {
0000000000000000000000000000000000000000;;		resp := &TaskInstance{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(TASK_INSTANCE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskInstanceClient) Delete(container *TaskInstance) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(TASK_INSTANCE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
