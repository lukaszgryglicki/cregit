0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HA_CONFIG_TYPE = "haConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClusterSize int64 `json:"clusterSize,omitempty" yaml:"cluster_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DbHost string `json:"dbHost,omitempty" yaml:"db_host,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DbSize int64 `json:"dbSize,omitempty" yaml:"db_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []HaConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*HaConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *HaConfig) (*HaConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *HaConfig, updates interface{}) (*HaConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*HaConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *HaConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHaConfigClient(rancherClient *RancherClient) *HaConfigClient {
0000000000000000000000000000000000000000;;		return &HaConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigClient) Create(container *HaConfig) (*HaConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(HA_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigClient) Update(existing *HaConfig, updates interface{}) (*HaConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(HA_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigClient) List(opts *ListOpts) (*HaConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(HA_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigClient) ById(id string) (*HaConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(HA_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaConfigClient) Delete(container *HaConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(HA_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
