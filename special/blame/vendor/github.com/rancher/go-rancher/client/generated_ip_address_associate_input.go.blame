0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IP_ADDRESS_ASSOCIATE_INPUT_TYPE = "ipAddressAssociateInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressAssociateInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IpAddressId string `json:"ipAddressId,omitempty" yaml:"ip_address_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressAssociateInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []IpAddressAssociateInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressAssociateInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpAddressAssociateInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*IpAddressAssociateInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *IpAddressAssociateInput) (*IpAddressAssociateInput, error)
0000000000000000000000000000000000000000;;		Update(existing *IpAddressAssociateInput, updates interface{}) (*IpAddressAssociateInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*IpAddressAssociateInput, error)
0000000000000000000000000000000000000000;;		Delete(container *IpAddressAssociateInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIpAddressAssociateInputClient(rancherClient *RancherClient) *IpAddressAssociateInputClient {
0000000000000000000000000000000000000000;;		return &IpAddressAssociateInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressAssociateInputClient) Create(container *IpAddressAssociateInput) (*IpAddressAssociateInput, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddressAssociateInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(IP_ADDRESS_ASSOCIATE_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressAssociateInputClient) Update(existing *IpAddressAssociateInput, updates interface{}) (*IpAddressAssociateInput, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddressAssociateInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(IP_ADDRESS_ASSOCIATE_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressAssociateInputClient) List(opts *ListOpts) (*IpAddressAssociateInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddressAssociateInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(IP_ADDRESS_ASSOCIATE_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressAssociateInputClient) ById(id string) (*IpAddressAssociateInput, error) {
0000000000000000000000000000000000000000;;		resp := &IpAddressAssociateInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(IP_ADDRESS_ASSOCIATE_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IpAddressAssociateInputClient) Delete(container *IpAddressAssociateInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(IP_ADDRESS_ASSOCIATE_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
