0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		EXTENSION_POINT_TYPE = "extensionPoint"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionPoint struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExcludeSetting string `json:"excludeSetting,omitempty" yaml:"exclude_setting,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Implementations []interface{} `json:"implementations,omitempty" yaml:"implementations,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IncludeSetting string `json:"includeSetting,omitempty" yaml:"include_setting,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ListSetting string `json:"listSetting,omitempty" yaml:"list_setting,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionPointCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ExtensionPoint `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionPointClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionPointOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ExtensionPointCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ExtensionPoint) (*ExtensionPoint, error)
0000000000000000000000000000000000000000;;		Update(existing *ExtensionPoint, updates interface{}) (*ExtensionPoint, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ExtensionPoint, error)
0000000000000000000000000000000000000000;;		Delete(container *ExtensionPoint) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newExtensionPointClient(rancherClient *RancherClient) *ExtensionPointClient {
0000000000000000000000000000000000000000;;		return &ExtensionPointClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionPointClient) Create(container *ExtensionPoint) (*ExtensionPoint, error) {
0000000000000000000000000000000000000000;;		resp := &ExtensionPoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(EXTENSION_POINT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionPointClient) Update(existing *ExtensionPoint, updates interface{}) (*ExtensionPoint, error) {
0000000000000000000000000000000000000000;;		resp := &ExtensionPoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(EXTENSION_POINT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionPointClient) List(opts *ListOpts) (*ExtensionPointCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ExtensionPointCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(EXTENSION_POINT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionPointClient) ById(id string) (*ExtensionPoint, error) {
0000000000000000000000000000000000000000;;		resp := &ExtensionPoint{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(EXTENSION_POINT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ExtensionPointClient) Delete(container *ExtensionPoint) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(EXTENSION_POINT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
