0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PACKET_CONFIG_TYPE = "packetConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PacketConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ApiKey string `json:"apiKey,omitempty" yaml:"api_key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BillingCycle string `json:"billingCycle,omitempty" yaml:"billing_cycle,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FacilityCode string `json:"facilityCode,omitempty" yaml:"facility_code,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Os string `json:"os,omitempty" yaml:"os,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Plan string `json:"plan,omitempty" yaml:"plan,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProjectId string `json:"projectId,omitempty" yaml:"project_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PacketConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []PacketConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PacketConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PacketConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*PacketConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *PacketConfig) (*PacketConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *PacketConfig, updates interface{}) (*PacketConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*PacketConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *PacketConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newPacketConfigClient(rancherClient *RancherClient) *PacketConfigClient {
0000000000000000000000000000000000000000;;		return &PacketConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PacketConfigClient) Create(container *PacketConfig) (*PacketConfig, error) {
0000000000000000000000000000000000000000;;		resp := &PacketConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PACKET_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PacketConfigClient) Update(existing *PacketConfig, updates interface{}) (*PacketConfig, error) {
0000000000000000000000000000000000000000;;		resp := &PacketConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PACKET_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PacketConfigClient) List(opts *ListOpts) (*PacketConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &PacketConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PACKET_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PacketConfigClient) ById(id string) (*PacketConfig, error) {
0000000000000000000000000000000000000000;;		resp := &PacketConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PACKET_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *PacketConfigClient) Delete(container *PacketConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PACKET_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
