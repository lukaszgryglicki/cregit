0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	type Collection struct {
0000000000000000000000000000000000000000;;		Type         string                 `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		ResourceType string                 `json:"resourceType,omitempty"`
0000000000000000000000000000000000000000;;		Links        map[string]string      `json:"links,omitempty"`
0000000000000000000000000000000000000000;;		CreateTypes  map[string]string      `json:"createTypes,omitempty"`
0000000000000000000000000000000000000000;;		Actions      map[string]string      `json:"actions,omitempty"`
0000000000000000000000000000000000000000;;		SortLinks    map[string]string      `json:"sortLinks,omitempty"`
0000000000000000000000000000000000000000;;		Pagination   *Pagination            `json:"pagination,omitempty"`
0000000000000000000000000000000000000000;;		Sort         *Sort                  `json:"sort,omitempty"`
0000000000000000000000000000000000000000;;		Filters      map[string][]Condition `json:"filters,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GenericCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []interface{} `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourceCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Resource `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Sort struct {
0000000000000000000000000000000000000000;;		Name    string `json:"name,omitempty"`
0000000000000000000000000000000000000000;;		Order   string `json:"order,omitempty"`
0000000000000000000000000000000000000000;;		Reverse string `json:"reverse,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Condition struct {
0000000000000000000000000000000000000000;;		Modifier string      `json:"modifier,omitempty"`
0000000000000000000000000000000000000000;;		Value    interface{} `json:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Pagination struct {
0000000000000000000000000000000000000000;;		Marker   string `json:"marker,omitempty"`
0000000000000000000000000000000000000000;;		First    string `json:"first,omitempty"`
0000000000000000000000000000000000000000;;		Previous string `json:"previous,omitempty"`
0000000000000000000000000000000000000000;;		Next     string `json:"next,omitempty"`
0000000000000000000000000000000000000000;;		Limit    *int64 `json:"limit,omitempty"`
0000000000000000000000000000000000000000;;		Total    *int64 `json:"total,omitempty"`
0000000000000000000000000000000000000000;;		Partial  bool   `json:"partial,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Resource struct {
0000000000000000000000000000000000000000;;		Id      string            `json:"id,omitempty"`
0000000000000000000000000000000000000000;;		Type    string            `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Links   map[string]string `json:"links"`
0000000000000000000000000000000000000000;;		Actions map[string]string `json:"actions"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Schema struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;		PluralName        string            `json:"pluralName,omitempty"`
0000000000000000000000000000000000000000;;		ResourceMethods   []string          `json:"resourceMethods,omitempty"`
0000000000000000000000000000000000000000;;		ResourceFields    map[string]Field  `json:"resourceFields,omitempty"`
0000000000000000000000000000000000000000;;		ResourceActions   map[string]Action `json:"resourceActions,omitempty"`
0000000000000000000000000000000000000000;;		CollectionMethods []string          `json:"collectionMethods,omitempty"`
0000000000000000000000000000000000000000;;		CollectionFields  map[string]Field  `json:"collectionFields,omitempty"`
0000000000000000000000000000000000000000;;		CollectionActions map[string]Action `json:"collectionActions,omitempty"`
0000000000000000000000000000000000000000;;		CollectionFilters map[string]Filter `json:"collectionFilters,omitempty"`
0000000000000000000000000000000000000000;;		IncludeableLinks  []string          `json:"includeableLinks,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Field struct {
0000000000000000000000000000000000000000;;		Type         string      `json:"type,omitempty"`
0000000000000000000000000000000000000000;;		Default      interface{} `json:"default,omitempty"`
0000000000000000000000000000000000000000;;		Unique       bool        `json:"unique,omitempty"`
0000000000000000000000000000000000000000;;		Nullable     bool        `json:"nullable,omitempty"`
0000000000000000000000000000000000000000;;		Create       bool        `json:"create,omitempty"`
0000000000000000000000000000000000000000;;		Required     bool        `json:"required,omitempty"`
0000000000000000000000000000000000000000;;		Update       bool        `json:"update,omitempty"`
0000000000000000000000000000000000000000;;		MinLength    *int64      `json:"minLength,omitempty"`
0000000000000000000000000000000000000000;;		MaxLength    *int64      `json:"maxLength,omitempty"`
0000000000000000000000000000000000000000;;		Min          *int64      `json:"min,omitempty"`
0000000000000000000000000000000000000000;;		Max          *int64      `json:"max,omitempty"`
0000000000000000000000000000000000000000;;		Options      []string    `json:"options,omitempty"`
0000000000000000000000000000000000000000;;		ValidChars   string      `json:"validChars,omitempty"`
0000000000000000000000000000000000000000;;		InvalidChars string      `json:"invalidChars,omitempty"`
0000000000000000000000000000000000000000;;		Description  string      `json:"description,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Action struct {
0000000000000000000000000000000000000000;;		Input  string `json:"input,omitempty"`
0000000000000000000000000000000000000000;;		Output string `json:"output,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Filter struct {
0000000000000000000000000000000000000000;;		Modifiers []string `json:"modifiers,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListOpts struct {
0000000000000000000000000000000000000000;;		Filters map[string]interface{}
0000000000000000000000000000000000000000;;	}
