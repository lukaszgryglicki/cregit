0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		VIRTUAL_MACHINE_TYPE = "virtualMachine"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachine struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AgentId string `json:"agentId,omitempty" yaml:"agent_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllocationState string `json:"allocationState,omitempty" yaml:"allocation_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlkioDeviceOptions map[string]interface{} `json:"blkioDeviceOptions,omitempty" yaml:"blkio_device_options,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Command []string `json:"command,omitempty" yaml:"command,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty" yaml:"count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuSet string `json:"cpuSet,omitempty" yaml:"cpu_set,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuShares int64 `json:"cpuShares,omitempty" yaml:"cpu_shares,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CreateIndex int64 `json:"createIndex,omitempty" yaml:"create_index,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeploymentUnitUuid string `json:"deploymentUnitUuid,omitempty" yaml:"deployment_unit_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disks []interface{} `json:"disks,omitempty" yaml:"disks,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dns []string `json:"dns,omitempty" yaml:"dns,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DnsSearch []string `json:"dnsSearch,omitempty" yaml:"dns_search,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DomainName string `json:"domainName,omitempty" yaml:"domain_name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expose []string `json:"expose,omitempty" yaml:"expose,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtraHosts []string `json:"extraHosts,omitempty" yaml:"extra_hosts,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FirstRunning string `json:"firstRunning,omitempty" yaml:"first_running,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthCheck *InstanceHealthCheck `json:"healthCheck,omitempty" yaml:"health_check,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthState string `json:"healthState,omitempty" yaml:"health_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostId string `json:"hostId,omitempty" yaml:"host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImageUuid string `json:"imageUuid,omitempty" yaml:"image_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceLinks map[string]interface{} `json:"instanceLinks,omitempty" yaml:"instance_links,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Labels map[string]interface{} `json:"labels,omitempty" yaml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LogConfig *LogConfig `json:"logConfig,omitempty" yaml:"log_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Memory int64 `json:"memory,omitempty" yaml:"memory,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemoryMb int64 `json:"memoryMb,omitempty" yaml:"memory_mb,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemorySwap int64 `json:"memorySwap,omitempty" yaml:"memory_swap,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NativeContainer bool `json:"nativeContainer,omitempty" yaml:"native_container,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkIds []string `json:"networkIds,omitempty" yaml:"network_ids,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkMode string `json:"networkMode,omitempty" yaml:"network_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ports []string `json:"ports,omitempty" yaml:"ports,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryIpAddress string `json:"primaryIpAddress,omitempty" yaml:"primary_ip_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegistryCredentialId string `json:"registryCredentialId,omitempty" yaml:"registry_credential_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedHostId string `json:"requestedHostId,omitempty" yaml:"requested_host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RestartPolicy *RestartPolicy `json:"restartPolicy,omitempty" yaml:"restart_policy,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecurityOpt []string `json:"securityOpt,omitempty" yaml:"security_opt,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartCount int64 `json:"startCount,omitempty" yaml:"start_count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartOnCreate bool `json:"startOnCreate,omitempty" yaml:"start_on_create,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemContainer string `json:"systemContainer,omitempty" yaml:"system_container,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty" yaml:"token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Userdata string `json:"userdata,omitempty" yaml:"userdata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vcpu int64 `json:"vcpu,omitempty" yaml:"vcpu,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty" yaml:"version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VolumeDriver string `json:"volumeDriver,omitempty" yaml:"volume_driver,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []VirtualMachine `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*VirtualMachineCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *VirtualMachine) (*VirtualMachine, error)
0000000000000000000000000000000000000000;;		Update(existing *VirtualMachine, updates interface{}) (*VirtualMachine, error)
0000000000000000000000000000000000000000;;		ById(id string) (*VirtualMachine, error)
0000000000000000000000000000000000000000;;		Delete(container *VirtualMachine) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionAllocate(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionConsole(*VirtualMachine, *InstanceConsoleInput) (*InstanceConsole, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeallocate(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionError(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionExecute(*VirtualMachine, *ContainerExec) (*HostAccess, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionLogs(*VirtualMachine, *ContainerLogs) (*HostAccess, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionMigrate(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionProxy(*VirtualMachine, *ContainerProxy) (*HostAccess, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionPurge(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestart(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestore(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionSetlabels(*VirtualMachine, *SetLabelsInput) (*Container, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionStart(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionStop(*VirtualMachine, *InstanceStop) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdatehealthy(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdatereinitializing(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdateunhealthy(*VirtualMachine) (*Instance, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newVirtualMachineClient(rancherClient *RancherClient) *VirtualMachineClient {
0000000000000000000000000000000000000000;;		return &VirtualMachineClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) Create(container *VirtualMachine) (*VirtualMachine, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(VIRTUAL_MACHINE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) Update(existing *VirtualMachine, updates interface{}) (*VirtualMachine, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(VIRTUAL_MACHINE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) List(opts *ListOpts) (*VirtualMachineCollection, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachineCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(VIRTUAL_MACHINE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ById(id string) (*VirtualMachine, error) {
0000000000000000000000000000000000000000;;		resp := &VirtualMachine{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(VIRTUAL_MACHINE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) Delete(container *VirtualMachine) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(VIRTUAL_MACHINE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionAllocate(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "allocate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionConsole(resource *VirtualMachine, input *InstanceConsoleInput) (*InstanceConsole, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &InstanceConsole{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "console", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionCreate(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionDeallocate(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "deallocate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionError(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "error", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionExecute(resource *VirtualMachine, input *ContainerExec) (*HostAccess, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "execute", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionLogs(resource *VirtualMachine, input *ContainerLogs) (*HostAccess, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "logs", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionMigrate(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "migrate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionProxy(resource *VirtualMachine, input *ContainerProxy) (*HostAccess, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "proxy", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionPurge(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "purge", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionRemove(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionRestart(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "restart", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionRestore(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "restore", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionSetlabels(resource *VirtualMachine, input *SetLabelsInput) (*Container, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Container{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "setlabels", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionStart(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "start", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionStop(resource *VirtualMachine, input *InstanceStop) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "stop", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionUpdate(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionUpdatehealthy(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "updatehealthy", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionUpdatereinitializing(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "updatereinitializing", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *VirtualMachineClient) ActionUpdateunhealthy(resource *VirtualMachine) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(VIRTUAL_MACHINE_TYPE, "updateunhealthy", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
