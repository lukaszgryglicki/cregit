0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PROCESS_EXECUTION_TYPE = "processExecution"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessExecution struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Log map[string]interface{} `json:"log,omitempty" yaml:"log,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProcessInstanceId string `json:"processInstanceId,omitempty" yaml:"process_instance_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessExecutionCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ProcessExecution `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessExecutionClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessExecutionOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ProcessExecutionCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ProcessExecution) (*ProcessExecution, error)
0000000000000000000000000000000000000000;;		Update(existing *ProcessExecution, updates interface{}) (*ProcessExecution, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ProcessExecution, error)
0000000000000000000000000000000000000000;;		Delete(container *ProcessExecution) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newProcessExecutionClient(rancherClient *RancherClient) *ProcessExecutionClient {
0000000000000000000000000000000000000000;;		return &ProcessExecutionClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessExecutionClient) Create(container *ProcessExecution) (*ProcessExecution, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessExecution{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PROCESS_EXECUTION_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessExecutionClient) Update(existing *ProcessExecution, updates interface{}) (*ProcessExecution, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessExecution{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PROCESS_EXECUTION_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessExecutionClient) List(opts *ListOpts) (*ProcessExecutionCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessExecutionCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PROCESS_EXECUTION_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessExecutionClient) ById(id string) (*ProcessExecution, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessExecution{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PROCESS_EXECUTION_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessExecutionClient) Delete(container *ProcessExecution) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PROCESS_EXECUTION_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
