0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SCALE_POLICY_TYPE = "scalePolicy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScalePolicy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Increment int64 `json:"increment,omitempty" yaml:"increment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Max int64 `json:"max,omitempty" yaml:"max,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Min int64 `json:"min,omitempty" yaml:"min,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScalePolicyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ScalePolicy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScalePolicyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScalePolicyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ScalePolicyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ScalePolicy) (*ScalePolicy, error)
0000000000000000000000000000000000000000;;		Update(existing *ScalePolicy, updates interface{}) (*ScalePolicy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ScalePolicy, error)
0000000000000000000000000000000000000000;;		Delete(container *ScalePolicy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newScalePolicyClient(rancherClient *RancherClient) *ScalePolicyClient {
0000000000000000000000000000000000000000;;		return &ScalePolicyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ScalePolicyClient) Create(container *ScalePolicy) (*ScalePolicy, error) {
0000000000000000000000000000000000000000;;		resp := &ScalePolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SCALE_POLICY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ScalePolicyClient) Update(existing *ScalePolicy, updates interface{}) (*ScalePolicy, error) {
0000000000000000000000000000000000000000;;		resp := &ScalePolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SCALE_POLICY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ScalePolicyClient) List(opts *ListOpts) (*ScalePolicyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ScalePolicyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SCALE_POLICY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ScalePolicyClient) ById(id string) (*ScalePolicy, error) {
0000000000000000000000000000000000000000;;		resp := &ScalePolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SCALE_POLICY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ScalePolicyClient) Delete(container *ScalePolicy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SCALE_POLICY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
