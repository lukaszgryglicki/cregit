0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HAPROXY_CONFIG_TYPE = "haproxyConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaproxyConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Defaults string `json:"defaults,omitempty" yaml:"defaults,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Global string `json:"global,omitempty" yaml:"global,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaproxyConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []HaproxyConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaproxyConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HaproxyConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*HaproxyConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *HaproxyConfig) (*HaproxyConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *HaproxyConfig, updates interface{}) (*HaproxyConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*HaproxyConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *HaproxyConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHaproxyConfigClient(rancherClient *RancherClient) *HaproxyConfigClient {
0000000000000000000000000000000000000000;;		return &HaproxyConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaproxyConfigClient) Create(container *HaproxyConfig) (*HaproxyConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaproxyConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(HAPROXY_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaproxyConfigClient) Update(existing *HaproxyConfig, updates interface{}) (*HaproxyConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaproxyConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(HAPROXY_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaproxyConfigClient) List(opts *ListOpts) (*HaproxyConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &HaproxyConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(HAPROXY_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaproxyConfigClient) ById(id string) (*HaproxyConfig, error) {
0000000000000000000000000000000000000000;;		resp := &HaproxyConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(HAPROXY_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HaproxyConfigClient) Delete(container *HaproxyConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(HAPROXY_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
