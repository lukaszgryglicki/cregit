0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		BASE_MACHINE_CONFIG_TYPE = "baseMachineConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseMachineConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseMachineConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []BaseMachineConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseMachineConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type BaseMachineConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*BaseMachineConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *BaseMachineConfig) (*BaseMachineConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *BaseMachineConfig, updates interface{}) (*BaseMachineConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*BaseMachineConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *BaseMachineConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newBaseMachineConfigClient(rancherClient *RancherClient) *BaseMachineConfigClient {
0000000000000000000000000000000000000000;;		return &BaseMachineConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BaseMachineConfigClient) Create(container *BaseMachineConfig) (*BaseMachineConfig, error) {
0000000000000000000000000000000000000000;;		resp := &BaseMachineConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(BASE_MACHINE_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BaseMachineConfigClient) Update(existing *BaseMachineConfig, updates interface{}) (*BaseMachineConfig, error) {
0000000000000000000000000000000000000000;;		resp := &BaseMachineConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(BASE_MACHINE_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BaseMachineConfigClient) List(opts *ListOpts) (*BaseMachineConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &BaseMachineConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(BASE_MACHINE_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BaseMachineConfigClient) ById(id string) (*BaseMachineConfig, error) {
0000000000000000000000000000000000000000;;		resp := &BaseMachineConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(BASE_MACHINE_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *BaseMachineConfigClient) Delete(container *BaseMachineConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(BASE_MACHINE_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
