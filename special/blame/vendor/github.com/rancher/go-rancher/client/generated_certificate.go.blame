0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CERTIFICATE_TYPE = "certificate"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Certificate struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Algorithm string `json:"algorithm,omitempty" yaml:"algorithm,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CN string `json:"cN,omitempty" yaml:"cn,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cert string `json:"cert,omitempty" yaml:"cert,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CertChain string `json:"certChain,omitempty" yaml:"cert_chain,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CertFingerprint string `json:"certFingerprint,omitempty" yaml:"cert_fingerprint,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExpiresAt string `json:"expiresAt,omitempty" yaml:"expires_at,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IssuedAt string `json:"issuedAt,omitempty" yaml:"issued_at,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Issuer string `json:"issuer,omitempty" yaml:"issuer,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key string `json:"key,omitempty" yaml:"key,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KeySize int64 `json:"keySize,omitempty" yaml:"key_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SerialNumber string `json:"serialNumber,omitempty" yaml:"serial_number,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty" yaml:"subject_alternative_names,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty" yaml:"version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Certificate `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*CertificateCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Certificate) (*Certificate, error)
0000000000000000000000000000000000000000;;		Update(existing *Certificate, updates interface{}) (*Certificate, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Certificate, error)
0000000000000000000000000000000000000000;;		Delete(container *Certificate) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*Certificate) (*Certificate, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*Certificate) (*Certificate, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*Certificate) (*Certificate, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newCertificateClient(rancherClient *RancherClient) *CertificateClient {
0000000000000000000000000000000000000000;;		return &CertificateClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) Create(container *Certificate) (*Certificate, error) {
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CERTIFICATE_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) Update(existing *Certificate, updates interface{}) (*Certificate, error) {
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CERTIFICATE_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) List(opts *ListOpts) (*CertificateCollection, error) {
0000000000000000000000000000000000000000;;		resp := &CertificateCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CERTIFICATE_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) ById(id string) (*Certificate, error) {
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CERTIFICATE_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) Delete(container *Certificate) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CERTIFICATE_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) ActionCreate(resource *Certificate) (*Certificate, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(CERTIFICATE_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) ActionRemove(resource *Certificate) (*Certificate, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(CERTIFICATE_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *CertificateClient) ActionUpdate(resource *Certificate) (*Certificate, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Certificate{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(CERTIFICATE_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
