0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		IDENTITY_TYPE = "identity"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Identity struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		All string `json:"all,omitempty" yaml:"all,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalIdType string `json:"externalIdType,omitempty" yaml:"external_id_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Login string `json:"login,omitempty" yaml:"login,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfilePicture string `json:"profilePicture,omitempty" yaml:"profile_picture,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProfileUrl string `json:"profileUrl,omitempty" yaml:"profile_url,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProjectId string `json:"projectId,omitempty" yaml:"project_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Role string `json:"role,omitempty" yaml:"role,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IdentityCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Identity `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IdentityClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IdentityOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*IdentityCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Identity) (*Identity, error)
0000000000000000000000000000000000000000;;		Update(existing *Identity, updates interface{}) (*Identity, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Identity, error)
0000000000000000000000000000000000000000;;		Delete(container *Identity) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newIdentityClient(rancherClient *RancherClient) *IdentityClient {
0000000000000000000000000000000000000000;;		return &IdentityClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IdentityClient) Create(container *Identity) (*Identity, error) {
0000000000000000000000000000000000000000;;		resp := &Identity{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(IDENTITY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IdentityClient) Update(existing *Identity, updates interface{}) (*Identity, error) {
0000000000000000000000000000000000000000;;		resp := &Identity{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(IDENTITY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IdentityClient) List(opts *ListOpts) (*IdentityCollection, error) {
0000000000000000000000000000000000000000;;		resp := &IdentityCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(IDENTITY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IdentityClient) ById(id string) (*Identity, error) {
0000000000000000000000000000000000000000;;		resp := &Identity{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(IDENTITY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *IdentityClient) Delete(container *Identity) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(IDENTITY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
