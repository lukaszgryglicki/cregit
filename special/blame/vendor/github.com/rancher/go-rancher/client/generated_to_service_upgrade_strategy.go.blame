0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TO_SERVICE_UPGRADE_STRATEGY_TYPE = "toServiceUpgradeStrategy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToServiceUpgradeStrategy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BatchSize int64 `json:"batchSize,omitempty" yaml:"batch_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FinalScale int64 `json:"finalScale,omitempty" yaml:"final_scale,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IntervalMillis int64 `json:"intervalMillis,omitempty" yaml:"interval_millis,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ToServiceId string `json:"toServiceId,omitempty" yaml:"to_service_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		UpdateLinks bool `json:"updateLinks,omitempty" yaml:"update_links,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToServiceUpgradeStrategyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ToServiceUpgradeStrategy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToServiceUpgradeStrategyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ToServiceUpgradeStrategyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ToServiceUpgradeStrategyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ToServiceUpgradeStrategy) (*ToServiceUpgradeStrategy, error)
0000000000000000000000000000000000000000;;		Update(existing *ToServiceUpgradeStrategy, updates interface{}) (*ToServiceUpgradeStrategy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ToServiceUpgradeStrategy, error)
0000000000000000000000000000000000000000;;		Delete(container *ToServiceUpgradeStrategy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newToServiceUpgradeStrategyClient(rancherClient *RancherClient) *ToServiceUpgradeStrategyClient {
0000000000000000000000000000000000000000;;		return &ToServiceUpgradeStrategyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ToServiceUpgradeStrategyClient) Create(container *ToServiceUpgradeStrategy) (*ToServiceUpgradeStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &ToServiceUpgradeStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(TO_SERVICE_UPGRADE_STRATEGY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ToServiceUpgradeStrategyClient) Update(existing *ToServiceUpgradeStrategy, updates interface{}) (*ToServiceUpgradeStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &ToServiceUpgradeStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(TO_SERVICE_UPGRADE_STRATEGY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ToServiceUpgradeStrategyClient) List(opts *ListOpts) (*ToServiceUpgradeStrategyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ToServiceUpgradeStrategyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(TO_SERVICE_UPGRADE_STRATEGY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ToServiceUpgradeStrategyClient) ById(id string) (*ToServiceUpgradeStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &ToServiceUpgradeStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(TO_SERVICE_UPGRADE_STRATEGY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ToServiceUpgradeStrategyClient) Delete(container *ToServiceUpgradeStrategy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(TO_SERVICE_UPGRADE_STRATEGY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
