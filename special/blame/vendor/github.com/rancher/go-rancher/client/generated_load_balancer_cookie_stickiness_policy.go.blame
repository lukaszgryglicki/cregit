0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE = "loadBalancerCookieStickinessPolicy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerCookieStickinessPolicy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Cookie string `json:"cookie,omitempty" yaml:"cookie,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Indirect bool `json:"indirect,omitempty" yaml:"indirect,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Mode string `json:"mode,omitempty" yaml:"mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Nocache bool `json:"nocache,omitempty" yaml:"nocache,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Postonly bool `json:"postonly,omitempty" yaml:"postonly,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerCookieStickinessPolicyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []LoadBalancerCookieStickinessPolicy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerCookieStickinessPolicyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LoadBalancerCookieStickinessPolicyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*LoadBalancerCookieStickinessPolicyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *LoadBalancerCookieStickinessPolicy) (*LoadBalancerCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		Update(existing *LoadBalancerCookieStickinessPolicy, updates interface{}) (*LoadBalancerCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*LoadBalancerCookieStickinessPolicy, error)
0000000000000000000000000000000000000000;;		Delete(container *LoadBalancerCookieStickinessPolicy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newLoadBalancerCookieStickinessPolicyClient(rancherClient *RancherClient) *LoadBalancerCookieStickinessPolicyClient {
0000000000000000000000000000000000000000;;		return &LoadBalancerCookieStickinessPolicyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerCookieStickinessPolicyClient) Create(container *LoadBalancerCookieStickinessPolicy) (*LoadBalancerCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerCookieStickinessPolicyClient) Update(existing *LoadBalancerCookieStickinessPolicy, updates interface{}) (*LoadBalancerCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerCookieStickinessPolicyClient) List(opts *ListOpts) (*LoadBalancerCookieStickinessPolicyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerCookieStickinessPolicyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerCookieStickinessPolicyClient) ById(id string) (*LoadBalancerCookieStickinessPolicy, error) {
0000000000000000000000000000000000000000;;		resp := &LoadBalancerCookieStickinessPolicy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *LoadBalancerCookieStickinessPolicyClient) Delete(container *LoadBalancerCookieStickinessPolicy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(LOAD_BALANCER_COOKIE_STICKINESS_POLICY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
