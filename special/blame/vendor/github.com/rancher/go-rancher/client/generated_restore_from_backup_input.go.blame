0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		RESTORE_FROM_BACKUP_INPUT_TYPE = "restoreFromBackupInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFromBackupInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BackupId string `json:"backupId,omitempty" yaml:"backup_id,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFromBackupInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []RestoreFromBackupInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFromBackupInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RestoreFromBackupInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*RestoreFromBackupInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *RestoreFromBackupInput) (*RestoreFromBackupInput, error)
0000000000000000000000000000000000000000;;		Update(existing *RestoreFromBackupInput, updates interface{}) (*RestoreFromBackupInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*RestoreFromBackupInput, error)
0000000000000000000000000000000000000000;;		Delete(container *RestoreFromBackupInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRestoreFromBackupInputClient(rancherClient *RancherClient) *RestoreFromBackupInputClient {
0000000000000000000000000000000000000000;;		return &RestoreFromBackupInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestoreFromBackupInputClient) Create(container *RestoreFromBackupInput) (*RestoreFromBackupInput, error) {
0000000000000000000000000000000000000000;;		resp := &RestoreFromBackupInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(RESTORE_FROM_BACKUP_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestoreFromBackupInputClient) Update(existing *RestoreFromBackupInput, updates interface{}) (*RestoreFromBackupInput, error) {
0000000000000000000000000000000000000000;;		resp := &RestoreFromBackupInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(RESTORE_FROM_BACKUP_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestoreFromBackupInputClient) List(opts *ListOpts) (*RestoreFromBackupInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &RestoreFromBackupInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(RESTORE_FROM_BACKUP_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestoreFromBackupInputClient) ById(id string) (*RestoreFromBackupInput, error) {
0000000000000000000000000000000000000000;;		resp := &RestoreFromBackupInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(RESTORE_FROM_BACKUP_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RestoreFromBackupInputClient) Delete(container *RestoreFromBackupInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(RESTORE_FROM_BACKUP_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
