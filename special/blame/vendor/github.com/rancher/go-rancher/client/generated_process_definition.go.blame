0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		PROCESS_DEFINITION_TYPE = "processDefinition"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessDefinition struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionBased bool `json:"extensionBased,omitempty" yaml:"extension_based,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PostProcessListeners interface{} `json:"postProcessListeners,omitempty" yaml:"post_process_listeners,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PreProcessListeners interface{} `json:"preProcessListeners,omitempty" yaml:"pre_process_listeners,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ProcessHandlers interface{} `json:"processHandlers,omitempty" yaml:"process_handlers,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourceType string `json:"resourceType,omitempty" yaml:"resource_type,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StateTransitions []interface{} `json:"stateTransitions,omitempty" yaml:"state_transitions,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessDefinitionCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ProcessDefinition `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessDefinitionClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProcessDefinitionOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ProcessDefinitionCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ProcessDefinition) (*ProcessDefinition, error)
0000000000000000000000000000000000000000;;		Update(existing *ProcessDefinition, updates interface{}) (*ProcessDefinition, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ProcessDefinition, error)
0000000000000000000000000000000000000000;;		Delete(container *ProcessDefinition) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newProcessDefinitionClient(rancherClient *RancherClient) *ProcessDefinitionClient {
0000000000000000000000000000000000000000;;		return &ProcessDefinitionClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessDefinitionClient) Create(container *ProcessDefinition) (*ProcessDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(PROCESS_DEFINITION_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessDefinitionClient) Update(existing *ProcessDefinition, updates interface{}) (*ProcessDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(PROCESS_DEFINITION_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessDefinitionClient) List(opts *ListOpts) (*ProcessDefinitionCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessDefinitionCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(PROCESS_DEFINITION_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessDefinitionClient) ById(id string) (*ProcessDefinition, error) {
0000000000000000000000000000000000000000;;		resp := &ProcessDefinition{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(PROCESS_DEFINITION_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ProcessDefinitionClient) Delete(container *ProcessDefinition) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(PROCESS_DEFINITION_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
