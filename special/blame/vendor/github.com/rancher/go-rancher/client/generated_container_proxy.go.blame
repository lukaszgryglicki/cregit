0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONTAINER_PROXY_TYPE = "containerProxy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerProxy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Port int64 `json:"port,omitempty" yaml:"port,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Scheme string `json:"scheme,omitempty" yaml:"scheme,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerProxyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ContainerProxy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerProxyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerProxyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ContainerProxyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ContainerProxy) (*ContainerProxy, error)
0000000000000000000000000000000000000000;;		Update(existing *ContainerProxy, updates interface{}) (*ContainerProxy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ContainerProxy, error)
0000000000000000000000000000000000000000;;		Delete(container *ContainerProxy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newContainerProxyClient(rancherClient *RancherClient) *ContainerProxyClient {
0000000000000000000000000000000000000000;;		return &ContainerProxyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerProxyClient) Create(container *ContainerProxy) (*ContainerProxy, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerProxy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONTAINER_PROXY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerProxyClient) Update(existing *ContainerProxy, updates interface{}) (*ContainerProxy, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerProxy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONTAINER_PROXY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerProxyClient) List(opts *ListOpts) (*ContainerProxyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerProxyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONTAINER_PROXY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerProxyClient) ById(id string) (*ContainerProxy, error) {
0000000000000000000000000000000000000000;;		resp := &ContainerProxy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONTAINER_PROXY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ContainerProxyClient) Delete(container *ContainerProxy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONTAINER_PROXY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
