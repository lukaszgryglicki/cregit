0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		CONFIG_ITEM_STATUS_TYPE = "configItemStatus"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemStatus struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AgentId string `json:"agentId,omitempty" yaml:"agent_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AppliedUpdated string `json:"appliedUpdated,omitempty" yaml:"applied_updated,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AppliedVersion int64 `json:"appliedVersion,omitempty" yaml:"applied_version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedUpdated string `json:"requestedUpdated,omitempty" yaml:"requested_updated,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedVersion int64 `json:"requestedVersion,omitempty" yaml:"requested_version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SourceVersion string `json:"sourceVersion,omitempty" yaml:"source_version,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemStatusCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ConfigItemStatus `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemStatusClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ConfigItemStatusOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ConfigItemStatusCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ConfigItemStatus) (*ConfigItemStatus, error)
0000000000000000000000000000000000000000;;		Update(existing *ConfigItemStatus, updates interface{}) (*ConfigItemStatus, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ConfigItemStatus, error)
0000000000000000000000000000000000000000;;		Delete(container *ConfigItemStatus) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newConfigItemStatusClient(rancherClient *RancherClient) *ConfigItemStatusClient {
0000000000000000000000000000000000000000;;		return &ConfigItemStatusClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemStatusClient) Create(container *ConfigItemStatus) (*ConfigItemStatus, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItemStatus{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(CONFIG_ITEM_STATUS_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemStatusClient) Update(existing *ConfigItemStatus, updates interface{}) (*ConfigItemStatus, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItemStatus{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(CONFIG_ITEM_STATUS_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemStatusClient) List(opts *ListOpts) (*ConfigItemStatusCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItemStatusCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(CONFIG_ITEM_STATUS_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemStatusClient) ById(id string) (*ConfigItemStatus, error) {
0000000000000000000000000000000000000000;;		resp := &ConfigItemStatus{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(CONFIG_ITEM_STATUS_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ConfigItemStatusClient) Delete(container *ConfigItemStatus) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(CONFIG_ITEM_STATUS_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
