0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ACTIVE_SETTING_TYPE = "activeSetting"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveSetting struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActiveValue interface{} `json:"activeValue,omitempty" yaml:"active_value,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InDb bool `json:"inDb,omitempty" yaml:"in_db,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source string `json:"source,omitempty" yaml:"source,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value string `json:"value,omitempty" yaml:"value,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveSettingCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ActiveSetting `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveSettingClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ActiveSettingOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ActiveSettingCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ActiveSetting) (*ActiveSetting, error)
0000000000000000000000000000000000000000;;		Update(existing *ActiveSetting, updates interface{}) (*ActiveSetting, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ActiveSetting, error)
0000000000000000000000000000000000000000;;		Delete(container *ActiveSetting) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newActiveSettingClient(rancherClient *RancherClient) *ActiveSettingClient {
0000000000000000000000000000000000000000;;		return &ActiveSettingClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ActiveSettingClient) Create(container *ActiveSetting) (*ActiveSetting, error) {
0000000000000000000000000000000000000000;;		resp := &ActiveSetting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(ACTIVE_SETTING_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ActiveSettingClient) Update(existing *ActiveSetting, updates interface{}) (*ActiveSetting, error) {
0000000000000000000000000000000000000000;;		resp := &ActiveSetting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(ACTIVE_SETTING_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ActiveSettingClient) List(opts *ListOpts) (*ActiveSettingCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ActiveSettingCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(ACTIVE_SETTING_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ActiveSettingClient) ById(id string) (*ActiveSetting, error) {
0000000000000000000000000000000000000000;;		resp := &ActiveSetting{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(ACTIVE_SETTING_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ActiveSettingClient) Delete(container *ActiveSetting) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(ACTIVE_SETTING_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
