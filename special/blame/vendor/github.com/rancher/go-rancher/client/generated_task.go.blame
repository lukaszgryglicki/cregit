0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		TASK_TYPE = "task"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Task struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Task `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*TaskCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Task) (*Task, error)
0000000000000000000000000000000000000000;;		Update(existing *Task, updates interface{}) (*Task, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Task, error)
0000000000000000000000000000000000000000;;		Delete(container *Task) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionExecute(*Task) (*Task, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTaskClient(rancherClient *RancherClient) *TaskClient {
0000000000000000000000000000000000000000;;		return &TaskClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) Create(container *Task) (*Task, error) {
0000000000000000000000000000000000000000;;		resp := &Task{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(TASK_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) Update(existing *Task, updates interface{}) (*Task, error) {
0000000000000000000000000000000000000000;;		resp := &Task{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(TASK_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) List(opts *ListOpts) (*TaskCollection, error) {
0000000000000000000000000000000000000000;;		resp := &TaskCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(TASK_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) ById(id string) (*Task, error) {
0000000000000000000000000000000000000000;;		resp := &Task{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(TASK_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) Delete(container *Task) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(TASK_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *TaskClient) ActionExecute(resource *Task) (*Task, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Task{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(TASK_TYPE, "execute", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
