0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SECONDARY_LAUNCH_CONFIG_TYPE = "secondaryLaunchConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryLaunchConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccountId string `json:"accountId,omitempty" yaml:"account_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AgentId string `json:"agentId,omitempty" yaml:"agent_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllocationState string `json:"allocationState,omitempty" yaml:"allocation_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BlkioDeviceOptions map[string]interface{} `json:"blkioDeviceOptions,omitempty" yaml:"blkio_device_options,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Build *DockerBuild `json:"build,omitempty" yaml:"build,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapAdd []string `json:"capAdd,omitempty" yaml:"cap_add,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CapDrop []string `json:"capDrop,omitempty" yaml:"cap_drop,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Command []string `json:"command,omitempty" yaml:"command,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Count int64 `json:"count,omitempty" yaml:"count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuSet string `json:"cpuSet,omitempty" yaml:"cpu_set,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CpuShares int64 `json:"cpuShares,omitempty" yaml:"cpu_shares,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CreateIndex int64 `json:"createIndex,omitempty" yaml:"create_index,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Created string `json:"created,omitempty" yaml:"created,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Data map[string]interface{} `json:"data,omitempty" yaml:"data,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DataVolumeMounts map[string]interface{} `json:"dataVolumeMounts,omitempty" yaml:"data_volume_mounts,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DataVolumes []string `json:"dataVolumes,omitempty" yaml:"data_volumes,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DataVolumesFrom []string `json:"dataVolumesFrom,omitempty" yaml:"data_volumes_from,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DataVolumesFromLaunchConfigs []string `json:"dataVolumesFromLaunchConfigs,omitempty" yaml:"data_volumes_from_launch_configs,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DeploymentUnitUuid string `json:"deploymentUnitUuid,omitempty" yaml:"deployment_unit_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Devices []string `json:"devices,omitempty" yaml:"devices,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Disks []interface{} `json:"disks,omitempty" yaml:"disks,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dns []string `json:"dns,omitempty" yaml:"dns,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DnsSearch []string `json:"dnsSearch,omitempty" yaml:"dns_search,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DomainName string `json:"domainName,omitempty" yaml:"domain_name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EntryPoint []string `json:"entryPoint,omitempty" yaml:"entry_point,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Environment map[string]interface{} `json:"environment,omitempty" yaml:"environment,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Expose []string `json:"expose,omitempty" yaml:"expose,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExternalId string `json:"externalId,omitempty" yaml:"external_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtraHosts []string `json:"extraHosts,omitempty" yaml:"extra_hosts,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FirstRunning string `json:"firstRunning,omitempty" yaml:"first_running,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthCheck *InstanceHealthCheck `json:"healthCheck,omitempty" yaml:"health_check,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HealthState string `json:"healthState,omitempty" yaml:"health_state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HostId string `json:"hostId,omitempty" yaml:"host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ImageUuid string `json:"imageUuid,omitempty" yaml:"image_uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InstanceLinks map[string]interface{} `json:"instanceLinks,omitempty" yaml:"instance_links,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Kind string `json:"kind,omitempty" yaml:"kind,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Labels map[string]interface{} `json:"labels,omitempty" yaml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LogConfig *LogConfig `json:"logConfig,omitempty" yaml:"log_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LxcConf map[string]interface{} `json:"lxcConf,omitempty" yaml:"lxc_conf,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Memory int64 `json:"memory,omitempty" yaml:"memory,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemoryMb int64 `json:"memoryMb,omitempty" yaml:"memory_mb,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MemorySwap int64 `json:"memorySwap,omitempty" yaml:"memory_swap,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NativeContainer bool `json:"nativeContainer,omitempty" yaml:"native_container,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkContainerId string `json:"networkContainerId,omitempty" yaml:"network_container_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkIds []string `json:"networkIds,omitempty" yaml:"network_ids,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkLaunchConfig string `json:"networkLaunchConfig,omitempty" yaml:"network_launch_config,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetworkMode string `json:"networkMode,omitempty" yaml:"network_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PidMode string `json:"pidMode,omitempty" yaml:"pid_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Ports []string `json:"ports,omitempty" yaml:"ports,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrimaryIpAddress string `json:"primaryIpAddress,omitempty" yaml:"primary_ip_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PublishAllPorts bool `json:"publishAllPorts,omitempty" yaml:"publish_all_ports,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReadOnly bool `json:"readOnly,omitempty" yaml:"read_only,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RegistryCredentialId string `json:"registryCredentialId,omitempty" yaml:"registry_credential_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RemoveTime string `json:"removeTime,omitempty" yaml:"remove_time,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Removed string `json:"removed,omitempty" yaml:"removed,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedHostId string `json:"requestedHostId,omitempty" yaml:"requested_host_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RequestedIpAddress string `json:"requestedIpAddress,omitempty" yaml:"requested_ip_address,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SecurityOpt []string `json:"securityOpt,omitempty" yaml:"security_opt,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartCount int64 `json:"startCount,omitempty" yaml:"start_count,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StartOnCreate bool `json:"startOnCreate,omitempty" yaml:"start_on_create,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		State string `json:"state,omitempty" yaml:"state,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StdinOpen bool `json:"stdinOpen,omitempty" yaml:"stdin_open,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SystemContainer string `json:"systemContainer,omitempty" yaml:"system_container,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty" yaml:"token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Transitioning string `json:"transitioning,omitempty" yaml:"transitioning,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningMessage string `json:"transitioningMessage,omitempty" yaml:"transitioning_message,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		TransitioningProgress int64 `json:"transitioningProgress,omitempty" yaml:"transitioning_progress,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tty bool `json:"tty,omitempty" yaml:"tty,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		User string `json:"user,omitempty" yaml:"user,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Userdata string `json:"userdata,omitempty" yaml:"userdata,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid string `json:"uuid,omitempty" yaml:"uuid,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Vcpu int64 `json:"vcpu,omitempty" yaml:"vcpu,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Version string `json:"version,omitempty" yaml:"version,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VolumeDriver string `json:"volumeDriver,omitempty" yaml:"volume_driver,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		WorkingDir string `json:"workingDir,omitempty" yaml:"working_dir,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryLaunchConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []SecondaryLaunchConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryLaunchConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SecondaryLaunchConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*SecondaryLaunchConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *SecondaryLaunchConfig) (*SecondaryLaunchConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *SecondaryLaunchConfig, updates interface{}) (*SecondaryLaunchConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*SecondaryLaunchConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *SecondaryLaunchConfig) error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionAllocate(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionConsole(*SecondaryLaunchConfig, *InstanceConsoleInput) (*InstanceConsole, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionCreate(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionDeallocate(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionError(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionExecute(*SecondaryLaunchConfig, *ContainerExec) (*HostAccess, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionMigrate(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionProxy(*SecondaryLaunchConfig, *ContainerProxy) (*HostAccess, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionPurge(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRemove(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestart(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionRestore(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionSetlabels(*SecondaryLaunchConfig, *SetLabelsInput) (*Container, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionStart(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionStop(*SecondaryLaunchConfig, *InstanceStop) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdate(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdatehealthy(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdatereinitializing(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActionUpdateunhealthy(*SecondaryLaunchConfig) (*Instance, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSecondaryLaunchConfigClient(rancherClient *RancherClient) *SecondaryLaunchConfigClient {
0000000000000000000000000000000000000000;;		return &SecondaryLaunchConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) Create(container *SecondaryLaunchConfig) (*SecondaryLaunchConfig, error) {
0000000000000000000000000000000000000000;;		resp := &SecondaryLaunchConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SECONDARY_LAUNCH_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) Update(existing *SecondaryLaunchConfig, updates interface{}) (*SecondaryLaunchConfig, error) {
0000000000000000000000000000000000000000;;		resp := &SecondaryLaunchConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SECONDARY_LAUNCH_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) List(opts *ListOpts) (*SecondaryLaunchConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &SecondaryLaunchConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SECONDARY_LAUNCH_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ById(id string) (*SecondaryLaunchConfig, error) {
0000000000000000000000000000000000000000;;		resp := &SecondaryLaunchConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SECONDARY_LAUNCH_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) Delete(container *SecondaryLaunchConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SECONDARY_LAUNCH_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionAllocate(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "allocate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionConsole(resource *SecondaryLaunchConfig, input *InstanceConsoleInput) (*InstanceConsole, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &InstanceConsole{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "console", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionCreate(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "create", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionDeallocate(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "deallocate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionError(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "error", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionExecute(resource *SecondaryLaunchConfig, input *ContainerExec) (*HostAccess, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "execute", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionMigrate(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "migrate", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionProxy(resource *SecondaryLaunchConfig, input *ContainerProxy) (*HostAccess, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "proxy", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionPurge(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "purge", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionRemove(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "remove", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionRestart(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "restart", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionRestore(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "restore", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionSetlabels(resource *SecondaryLaunchConfig, input *SetLabelsInput) (*Container, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Container{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "setlabels", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionStart(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "start", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionStop(resource *SecondaryLaunchConfig, input *InstanceStop) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "stop", &resource.Resource, input, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionUpdate(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "update", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionUpdatehealthy(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "updatehealthy", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionUpdatereinitializing(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "updatereinitializing", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SecondaryLaunchConfigClient) ActionUpdateunhealthy(resource *SecondaryLaunchConfig) (*Instance, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		resp := &Instance{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.rancherClient.doAction(SECONDARY_LAUNCH_CONFIG_TYPE, "updateunhealthy", &resource.Resource, nil, resp)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
