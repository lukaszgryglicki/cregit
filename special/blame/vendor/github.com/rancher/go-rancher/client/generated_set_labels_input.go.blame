0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SET_LABELS_INPUT_TYPE = "setLabelsInput"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLabelsInput struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Labels interface{} `json:"labels,omitempty" yaml:"labels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLabelsInputCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []SetLabelsInput `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLabelsInputClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SetLabelsInputOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*SetLabelsInputCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *SetLabelsInput) (*SetLabelsInput, error)
0000000000000000000000000000000000000000;;		Update(existing *SetLabelsInput, updates interface{}) (*SetLabelsInput, error)
0000000000000000000000000000000000000000;;		ById(id string) (*SetLabelsInput, error)
0000000000000000000000000000000000000000;;		Delete(container *SetLabelsInput) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newSetLabelsInputClient(rancherClient *RancherClient) *SetLabelsInputClient {
0000000000000000000000000000000000000000;;		return &SetLabelsInputClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetLabelsInputClient) Create(container *SetLabelsInput) (*SetLabelsInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetLabelsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SET_LABELS_INPUT_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetLabelsInputClient) Update(existing *SetLabelsInput, updates interface{}) (*SetLabelsInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetLabelsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SET_LABELS_INPUT_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetLabelsInputClient) List(opts *ListOpts) (*SetLabelsInputCollection, error) {
0000000000000000000000000000000000000000;;		resp := &SetLabelsInputCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SET_LABELS_INPUT_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetLabelsInputClient) ById(id string) (*SetLabelsInput, error) {
0000000000000000000000000000000000000000;;		resp := &SetLabelsInput{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SET_LABELS_INPUT_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *SetLabelsInputClient) Delete(container *SetLabelsInput) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SET_LABELS_INPUT_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
