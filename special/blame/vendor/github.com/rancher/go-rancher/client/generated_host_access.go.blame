0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		HOST_ACCESS_TYPE = "hostAccess"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccess struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Token string `json:"token,omitempty" yaml:"token,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Url string `json:"url,omitempty" yaml:"url,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []HostAccess `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*HostAccessCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *HostAccess) (*HostAccess, error)
0000000000000000000000000000000000000000;;		Update(existing *HostAccess, updates interface{}) (*HostAccess, error)
0000000000000000000000000000000000000000;;		ById(id string) (*HostAccess, error)
0000000000000000000000000000000000000000;;		Delete(container *HostAccess) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newHostAccessClient(rancherClient *RancherClient) *HostAccessClient {
0000000000000000000000000000000000000000;;		return &HostAccessClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostAccessClient) Create(container *HostAccess) (*HostAccess, error) {
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(HOST_ACCESS_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostAccessClient) Update(existing *HostAccess, updates interface{}) (*HostAccess, error) {
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(HOST_ACCESS_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostAccessClient) List(opts *ListOpts) (*HostAccessCollection, error) {
0000000000000000000000000000000000000000;;		resp := &HostAccessCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(HOST_ACCESS_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostAccessClient) ById(id string) (*HostAccess, error) {
0000000000000000000000000000000000000000;;		resp := &HostAccess{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(HOST_ACCESS_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *HostAccessClient) Delete(container *HostAccess) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(HOST_ACCESS_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
