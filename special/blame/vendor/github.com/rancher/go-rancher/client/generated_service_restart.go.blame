0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		SERVICE_RESTART_TYPE = "serviceRestart"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceRestart struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RollingRestartStrategy RollingRestartStrategy `json:"rollingRestartStrategy,omitempty" yaml:"rolling_restart_strategy,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceRestartCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []ServiceRestart `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceRestartClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceRestartOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*ServiceRestartCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *ServiceRestart) (*ServiceRestart, error)
0000000000000000000000000000000000000000;;		Update(existing *ServiceRestart, updates interface{}) (*ServiceRestart, error)
0000000000000000000000000000000000000000;;		ById(id string) (*ServiceRestart, error)
0000000000000000000000000000000000000000;;		Delete(container *ServiceRestart) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newServiceRestartClient(rancherClient *RancherClient) *ServiceRestartClient {
0000000000000000000000000000000000000000;;		return &ServiceRestartClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceRestartClient) Create(container *ServiceRestart) (*ServiceRestart, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceRestart{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(SERVICE_RESTART_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceRestartClient) Update(existing *ServiceRestart, updates interface{}) (*ServiceRestart, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceRestart{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(SERVICE_RESTART_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceRestartClient) List(opts *ListOpts) (*ServiceRestartCollection, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceRestartCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(SERVICE_RESTART_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceRestartClient) ById(id string) (*ServiceRestart, error) {
0000000000000000000000000000000000000000;;		resp := &ServiceRestart{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(SERVICE_RESTART_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *ServiceRestartClient) Delete(container *ServiceRestart) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(SERVICE_RESTART_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
