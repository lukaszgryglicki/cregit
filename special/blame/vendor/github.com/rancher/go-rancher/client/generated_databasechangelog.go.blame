0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		DATABASECHANGELOG_TYPE = "databasechangelog"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Databasechangelog struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Author string `json:"author,omitempty" yaml:"author,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Comments string `json:"comments,omitempty" yaml:"comments,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Dateexecuted string `json:"dateexecuted,omitempty" yaml:"dateexecuted,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description string `json:"description,omitempty" yaml:"description,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Exectype string `json:"exectype,omitempty" yaml:"exectype,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filename string `json:"filename,omitempty" yaml:"filename,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Liquibase string `json:"liquibase,omitempty" yaml:"liquibase,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Md5sum string `json:"md5sum,omitempty" yaml:"md5sum,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Orderexecuted int64 `json:"orderexecuted,omitempty" yaml:"orderexecuted,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Tag string `json:"tag,omitempty" yaml:"tag,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangelogCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Databasechangelog `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangelogClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatabasechangelogOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*DatabasechangelogCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Databasechangelog) (*Databasechangelog, error)
0000000000000000000000000000000000000000;;		Update(existing *Databasechangelog, updates interface{}) (*Databasechangelog, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Databasechangelog, error)
0000000000000000000000000000000000000000;;		Delete(container *Databasechangelog) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDatabasechangelogClient(rancherClient *RancherClient) *DatabasechangelogClient {
0000000000000000000000000000000000000000;;		return &DatabasechangelogClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangelogClient) Create(container *Databasechangelog) (*Databasechangelog, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangelog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(DATABASECHANGELOG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangelogClient) Update(existing *Databasechangelog, updates interface{}) (*Databasechangelog, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangelog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(DATABASECHANGELOG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangelogClient) List(opts *ListOpts) (*DatabasechangelogCollection, error) {
0000000000000000000000000000000000000000;;		resp := &DatabasechangelogCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(DATABASECHANGELOG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangelogClient) ById(id string) (*Databasechangelog, error) {
0000000000000000000000000000000000000000;;		resp := &Databasechangelog{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(DATABASECHANGELOG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *DatabasechangelogClient) Delete(container *Databasechangelog) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(DATABASECHANGELOG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
