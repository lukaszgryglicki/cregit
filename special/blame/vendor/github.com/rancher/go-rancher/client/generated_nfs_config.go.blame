0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		NFS_CONFIG_TYPE = "nfsConfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NfsConfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		MountOptions string `json:"mountOptions,omitempty" yaml:"mount_options,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Server string `json:"server,omitempty" yaml:"server,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Share string `json:"share,omitempty" yaml:"share,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NfsConfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []NfsConfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NfsConfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NfsConfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*NfsConfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *NfsConfig) (*NfsConfig, error)
0000000000000000000000000000000000000000;;		Update(existing *NfsConfig, updates interface{}) (*NfsConfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*NfsConfig, error)
0000000000000000000000000000000000000000;;		Delete(container *NfsConfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newNfsConfigClient(rancherClient *RancherClient) *NfsConfigClient {
0000000000000000000000000000000000000000;;		return &NfsConfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *NfsConfigClient) Create(container *NfsConfig) (*NfsConfig, error) {
0000000000000000000000000000000000000000;;		resp := &NfsConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(NFS_CONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *NfsConfigClient) Update(existing *NfsConfig, updates interface{}) (*NfsConfig, error) {
0000000000000000000000000000000000000000;;		resp := &NfsConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(NFS_CONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *NfsConfigClient) List(opts *ListOpts) (*NfsConfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &NfsConfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(NFS_CONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *NfsConfigClient) ById(id string) (*NfsConfig, error) {
0000000000000000000000000000000000000000;;		resp := &NfsConfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(NFS_CONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *NfsConfigClient) Delete(container *NfsConfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(NFS_CONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
