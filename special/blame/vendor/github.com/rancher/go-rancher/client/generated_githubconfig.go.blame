0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		GITHUBCONFIG_TYPE = "githubconfig"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Githubconfig struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AccessMode string `json:"accessMode,omitempty" yaml:"access_mode,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AllowedIdentities []interface{} `json:"allowedIdentities,omitempty" yaml:"allowed_identities,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientId string `json:"clientId,omitempty" yaml:"client_id,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ClientSecret string `json:"clientSecret,omitempty" yaml:"client_secret,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name string `json:"name,omitempty" yaml:"name,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Scheme string `json:"scheme,omitempty" yaml:"scheme,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GithubconfigCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []Githubconfig `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GithubconfigClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GithubconfigOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*GithubconfigCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *Githubconfig) (*Githubconfig, error)
0000000000000000000000000000000000000000;;		Update(existing *Githubconfig, updates interface{}) (*Githubconfig, error)
0000000000000000000000000000000000000000;;		ById(id string) (*Githubconfig, error)
0000000000000000000000000000000000000000;;		Delete(container *Githubconfig) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newGithubconfigClient(rancherClient *RancherClient) *GithubconfigClient {
0000000000000000000000000000000000000000;;		return &GithubconfigClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *GithubconfigClient) Create(container *Githubconfig) (*Githubconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Githubconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(GITHUBCONFIG_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *GithubconfigClient) Update(existing *Githubconfig, updates interface{}) (*Githubconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Githubconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(GITHUBCONFIG_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *GithubconfigClient) List(opts *ListOpts) (*GithubconfigCollection, error) {
0000000000000000000000000000000000000000;;		resp := &GithubconfigCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(GITHUBCONFIG_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *GithubconfigClient) ById(id string) (*Githubconfig, error) {
0000000000000000000000000000000000000000;;		resp := &Githubconfig{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(GITHUBCONFIG_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *GithubconfigClient) Delete(container *Githubconfig) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(GITHUBCONFIG_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
