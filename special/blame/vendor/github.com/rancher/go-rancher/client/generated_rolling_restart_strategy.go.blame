0000000000000000000000000000000000000000;;	package client
a70eec3531b96f9fd5397f7cec9cd89ffcaafa47;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		ROLLING_RESTART_STRATEGY_TYPE = "rollingRestartStrategy"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollingRestartStrategy struct {
0000000000000000000000000000000000000000;;		Resource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		BatchSize int64 `json:"batchSize,omitempty" yaml:"batch_size,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		IntervalMillis int64 `json:"intervalMillis,omitempty" yaml:"interval_millis,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollingRestartStrategyCollection struct {
0000000000000000000000000000000000000000;;		Collection
0000000000000000000000000000000000000000;;		Data []RollingRestartStrategy `json:"data,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollingRestartStrategyClient struct {
0000000000000000000000000000000000000000;;		rancherClient *RancherClient
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RollingRestartStrategyOperations interface {
0000000000000000000000000000000000000000;;		List(opts *ListOpts) (*RollingRestartStrategyCollection, error)
0000000000000000000000000000000000000000;;		Create(opts *RollingRestartStrategy) (*RollingRestartStrategy, error)
0000000000000000000000000000000000000000;;		Update(existing *RollingRestartStrategy, updates interface{}) (*RollingRestartStrategy, error)
0000000000000000000000000000000000000000;;		ById(id string) (*RollingRestartStrategy, error)
0000000000000000000000000000000000000000;;		Delete(container *RollingRestartStrategy) error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newRollingRestartStrategyClient(rancherClient *RancherClient) *RollingRestartStrategyClient {
0000000000000000000000000000000000000000;;		return &RollingRestartStrategyClient{
0000000000000000000000000000000000000000;;			rancherClient: rancherClient,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RollingRestartStrategyClient) Create(container *RollingRestartStrategy) (*RollingRestartStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &RollingRestartStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doCreate(ROLLING_RESTART_STRATEGY_TYPE, container, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RollingRestartStrategyClient) Update(existing *RollingRestartStrategy, updates interface{}) (*RollingRestartStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &RollingRestartStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doUpdate(ROLLING_RESTART_STRATEGY_TYPE, &existing.Resource, updates, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RollingRestartStrategyClient) List(opts *ListOpts) (*RollingRestartStrategyCollection, error) {
0000000000000000000000000000000000000000;;		resp := &RollingRestartStrategyCollection{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doList(ROLLING_RESTART_STRATEGY_TYPE, opts, resp)
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RollingRestartStrategyClient) ById(id string) (*RollingRestartStrategy, error) {
0000000000000000000000000000000000000000;;		resp := &RollingRestartStrategy{}
0000000000000000000000000000000000000000;;		err := c.rancherClient.doById(ROLLING_RESTART_STRATEGY_TYPE, id, resp)
0000000000000000000000000000000000000000;;		if apiError, ok := err.(*ApiError); ok {
0000000000000000000000000000000000000000;;			if apiError.StatusCode == 404 {
0000000000000000000000000000000000000000;;				return nil, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return resp, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c *RollingRestartStrategyClient) Delete(container *RollingRestartStrategy) error {
0000000000000000000000000000000000000000;;		return c.rancherClient.doResourceDelete(ROLLING_RESTART_STRATEGY_TYPE, &container.Resource)
0000000000000000000000000000000000000000;;	}
