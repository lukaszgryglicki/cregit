0000000000000000000000000000000000000000;;	package negroni
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/codegangsta/negroni/logger.go[Godeps/_workspace/src/github.com/codegangsta/negroni/logger.go][vendor/github.com/codegangsta/negroni/logger.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Logger is a middleware handler that logs the request as it goes in and the response as it goes out.
0000000000000000000000000000000000000000;;	type Logger struct {
0000000000000000000000000000000000000000;;		// Logger inherits from log.Logger used to log messages with the Logger middleware
0000000000000000000000000000000000000000;;		*log.Logger
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewLogger returns a new Logger instance
0000000000000000000000000000000000000000;;	func NewLogger() *Logger {
0000000000000000000000000000000000000000;;		return &Logger{log.New(os.Stdout, "[negroni] ", 0)}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *Logger) ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
0000000000000000000000000000000000000000;;		start := time.Now()
0000000000000000000000000000000000000000;;		l.Printf("Started %s %s", r.Method, r.URL.Path)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		next(rw, r)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res := rw.(ResponseWriter)
0000000000000000000000000000000000000000;;		l.Printf("Completed %v %s in %v", res.Status(), http.StatusText(res.Status()), time.Since(start))
0000000000000000000000000000000000000000;;	}
