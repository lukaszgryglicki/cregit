0000000000000000000000000000000000000000;;	package negroni
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/codegangsta/negroni/recovery.go[Godeps/_workspace/src/github.com/codegangsta/negroni/recovery.go][vendor/github.com/codegangsta/negroni/recovery.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"runtime"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Recovery is a Negroni middleware that recovers from any panics and writes a 500 if there was one.
0000000000000000000000000000000000000000;;	type Recovery struct {
0000000000000000000000000000000000000000;;		Logger     *log.Logger
0000000000000000000000000000000000000000;;		PrintStack bool
0000000000000000000000000000000000000000;;		StackAll   bool
0000000000000000000000000000000000000000;;		StackSize  int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewRecovery returns a new instance of Recovery
0000000000000000000000000000000000000000;;	func NewRecovery() *Recovery {
0000000000000000000000000000000000000000;;		return &Recovery{
0000000000000000000000000000000000000000;;			Logger:     log.New(os.Stdout, "[negroni] ", 0),
0000000000000000000000000000000000000000;;			PrintStack: true,
0000000000000000000000000000000000000000;;			StackAll:   false,
0000000000000000000000000000000000000000;;			StackSize:  1024 * 8,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rec *Recovery) ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
0000000000000000000000000000000000000000;;		defer func() {
0000000000000000000000000000000000000000;;			if err := recover(); err != nil {
0000000000000000000000000000000000000000;;				rw.WriteHeader(http.StatusInternalServerError)
0000000000000000000000000000000000000000;;				stack := make([]byte, rec.StackSize)
0000000000000000000000000000000000000000;;				stack = stack[:runtime.Stack(stack, rec.StackAll)]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				f := "PANIC: %s\n%s"
0000000000000000000000000000000000000000;;				rec.Logger.Printf(f, err, stack)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				if rec.PrintStack {
0000000000000000000000000000000000000000;;					fmt.Fprintf(rw, f, err, stack)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		next(rw, r)
0000000000000000000000000000000000000000;;	}
