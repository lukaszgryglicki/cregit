0000000000000000000000000000000000000000;;	package negroni
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/codegangsta/negroni/negroni.go[Godeps/_workspace/src/github.com/codegangsta/negroni/negroni.go][vendor/github.com/codegangsta/negroni/negroni.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"log"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Handler handler is an interface that objects can implement to be registered to serve as middleware
0000000000000000000000000000000000000000;;	// in the Negroni middleware stack.
0000000000000000000000000000000000000000;;	// ServeHTTP should yield to the next middleware in the chain by invoking the next http.HandlerFunc
0000000000000000000000000000000000000000;;	// passed in.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// If the Handler writes to the ResponseWriter, the next http.HandlerFunc should not be invoked.
0000000000000000000000000000000000000000;;	type Handler interface {
0000000000000000000000000000000000000000;;		ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HandlerFunc is an adapter to allow the use of ordinary functions as Negroni handlers.
0000000000000000000000000000000000000000;;	// If f is a function with the appropriate signature, HandlerFunc(f) is a Handler object that calls f.
0000000000000000000000000000000000000000;;	type HandlerFunc func(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HandlerFunc) ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
0000000000000000000000000000000000000000;;		h(rw, r, next)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type middleware struct {
0000000000000000000000000000000000000000;;		handler Handler
0000000000000000000000000000000000000000;;		next    *middleware
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m middleware) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		m.handler.ServeHTTP(rw, r, m.next.ServeHTTP)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Wrap converts a http.Handler into a negroni.Handler so it can be used as a Negroni
0000000000000000000000000000000000000000;;	// middleware. The next http.HandlerFunc is automatically called after the Handler
0000000000000000000000000000000000000000;;	// is executed.
0000000000000000000000000000000000000000;;	func Wrap(handler http.Handler) Handler {
0000000000000000000000000000000000000000;;		return HandlerFunc(func(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
0000000000000000000000000000000000000000;;			handler.ServeHTTP(rw, r)
0000000000000000000000000000000000000000;;			next(rw, r)
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Negroni is a stack of Middleware Handlers that can be invoked as an http.Handler.
0000000000000000000000000000000000000000;;	// Negroni middleware is evaluated in the order that they are added to the stack using
0000000000000000000000000000000000000000;;	// the Use and UseHandler methods.
0000000000000000000000000000000000000000;;	type Negroni struct {
0000000000000000000000000000000000000000;;		middleware middleware
0000000000000000000000000000000000000000;;		handlers   []Handler
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// New returns a new Negroni instance with no middleware preconfigured.
0000000000000000000000000000000000000000;;	func New(handlers ...Handler) *Negroni {
0000000000000000000000000000000000000000;;		return &Negroni{
0000000000000000000000000000000000000000;;			handlers:   handlers,
0000000000000000000000000000000000000000;;			middleware: build(handlers),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Classic returns a new Negroni instance with the default middleware already
0000000000000000000000000000000000000000;;	// in the stack.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Recovery - Panic Recovery Middleware
0000000000000000000000000000000000000000;;	// Logger - Request/Response Logging
0000000000000000000000000000000000000000;;	// Static - Static File Serving
0000000000000000000000000000000000000000;;	func Classic() *Negroni {
0000000000000000000000000000000000000000;;		return New(NewRecovery(), NewLogger(), NewStatic(http.Dir("public")))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n *Negroni) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
0000000000000000000000000000000000000000;;		n.middleware.ServeHTTP(NewResponseWriter(rw), r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Use adds a Handler onto the middleware stack. Handlers are invoked in the order they are added to a Negroni.
0000000000000000000000000000000000000000;;	func (n *Negroni) Use(handler Handler) {
0000000000000000000000000000000000000000;;		n.handlers = append(n.handlers, handler)
0000000000000000000000000000000000000000;;		n.middleware = build(n.handlers)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UseHandler adds a http.Handler onto the middleware stack. Handlers are invoked in the order they are added to a Negroni.
0000000000000000000000000000000000000000;;	func (n *Negroni) UseHandler(handler http.Handler) {
0000000000000000000000000000000000000000;;		n.Use(Wrap(handler))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Run is a convenience function that runs the negroni stack as an HTTP
0000000000000000000000000000000000000000;;	// server. The addr string takes the same format as http.ListenAndServe.
0000000000000000000000000000000000000000;;	func (n *Negroni) Run(addr string) {
0000000000000000000000000000000000000000;;		l := log.New(os.Stdout, "[negroni] ", 0)
0000000000000000000000000000000000000000;;		l.Printf("listening on %s", addr)
0000000000000000000000000000000000000000;;		l.Fatal(http.ListenAndServe(addr, n))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Returns a list of all the handlers in the current Negroni middleware chain.
0000000000000000000000000000000000000000;;	func (n *Negroni) Handlers() ([]Handler) {
0000000000000000000000000000000000000000;;		return n.handlers
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func build(handlers []Handler) middleware {
0000000000000000000000000000000000000000;;		var next middleware
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(handlers) == 0 {
0000000000000000000000000000000000000000;;			return voidMiddleware()
0000000000000000000000000000000000000000;;		} else if len(handlers) > 1 {
0000000000000000000000000000000000000000;;			next = build(handlers[1:])
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			next = voidMiddleware()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return middleware{handlers[0], &next}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func voidMiddleware() middleware {
0000000000000000000000000000000000000000;;		return middleware{
0000000000000000000000000000000000000000;;			HandlerFunc(func(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc) {}),
0000000000000000000000000000000000000000;;			&middleware{},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
