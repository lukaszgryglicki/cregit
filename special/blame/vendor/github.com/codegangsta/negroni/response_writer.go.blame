0000000000000000000000000000000000000000;;	package negroni
2300ac0e08fc49b83d6c5f7668561f728a0b380c;Godeps/_workspace/src/github.com/codegangsta/negroni/response_writer.go[Godeps/_workspace/src/github.com/codegangsta/negroni/response_writer.go][vendor/github.com/codegangsta/negroni/response_writer.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"bufio"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResponseWriter is a wrapper around http.ResponseWriter that provides extra information about
0000000000000000000000000000000000000000;;	// the response. It is recommended that middleware handlers use this construct to wrap a responsewriter
0000000000000000000000000000000000000000;;	// if the functionality calls for it.
0000000000000000000000000000000000000000;;	type ResponseWriter interface {
0000000000000000000000000000000000000000;;		http.ResponseWriter
0000000000000000000000000000000000000000;;		http.Flusher
0000000000000000000000000000000000000000;;		// Status returns the status code of the response or 0 if the response has not been written.
0000000000000000000000000000000000000000;;		Status() int
0000000000000000000000000000000000000000;;		// Written returns whether or not the ResponseWriter has been written.
0000000000000000000000000000000000000000;;		Written() bool
0000000000000000000000000000000000000000;;		// Size returns the size of the response body.
0000000000000000000000000000000000000000;;		Size() int
0000000000000000000000000000000000000000;;		// Before allows for a function to be called before the ResponseWriter has been written to. This is
0000000000000000000000000000000000000000;;		// useful for setting headers or any other operations that must happen before a response has been written.
0000000000000000000000000000000000000000;;		Before(func(ResponseWriter))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type beforeFunc func(ResponseWriter)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewResponseWriter creates a ResponseWriter that wraps an http.ResponseWriter
0000000000000000000000000000000000000000;;	func NewResponseWriter(rw http.ResponseWriter) ResponseWriter {
0000000000000000000000000000000000000000;;		return &responseWriter{rw, 0, 0, nil}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type responseWriter struct {
0000000000000000000000000000000000000000;;		http.ResponseWriter
0000000000000000000000000000000000000000;;		status      int
0000000000000000000000000000000000000000;;		size        int
0000000000000000000000000000000000000000;;		beforeFuncs []beforeFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) WriteHeader(s int) {
0000000000000000000000000000000000000000;;		rw.status = s
0000000000000000000000000000000000000000;;		rw.callBefore()
0000000000000000000000000000000000000000;;		rw.ResponseWriter.WriteHeader(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Write(b []byte) (int, error) {
0000000000000000000000000000000000000000;;		if !rw.Written() {
0000000000000000000000000000000000000000;;			// The status will be StatusOK if WriteHeader has not been called yet
0000000000000000000000000000000000000000;;			rw.WriteHeader(http.StatusOK)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		size, err := rw.ResponseWriter.Write(b)
0000000000000000000000000000000000000000;;		rw.size += size
0000000000000000000000000000000000000000;;		return size, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Status() int {
0000000000000000000000000000000000000000;;		return rw.status
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Size() int {
0000000000000000000000000000000000000000;;		return rw.size
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Written() bool {
0000000000000000000000000000000000000000;;		return rw.status != 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Before(before func(ResponseWriter)) {
0000000000000000000000000000000000000000;;		rw.beforeFuncs = append(rw.beforeFuncs, before)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
0000000000000000000000000000000000000000;;		hijacker, ok := rw.ResponseWriter.(http.Hijacker)
0000000000000000000000000000000000000000;;		if !ok {
0000000000000000000000000000000000000000;;			return nil, nil, fmt.Errorf("the ResponseWriter doesn't support the Hijacker interface")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return hijacker.Hijack()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) CloseNotify() <-chan bool {
0000000000000000000000000000000000000000;;		return rw.ResponseWriter.(http.CloseNotifier).CloseNotify()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) callBefore() {
0000000000000000000000000000000000000000;;		for i := len(rw.beforeFuncs) - 1; i >= 0; i-- {
0000000000000000000000000000000000000000;;			rw.beforeFuncs[i](rw)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (rw *responseWriter) Flush() {
0000000000000000000000000000000000000000;;		flusher, ok := rw.ResponseWriter.(http.Flusher)
0000000000000000000000000000000000000000;;		if ok {
0000000000000000000000000000000000000000;;			flusher.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
