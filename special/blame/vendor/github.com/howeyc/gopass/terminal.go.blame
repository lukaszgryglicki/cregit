0000000000000000000000000000000000000000;;	// +build !solaris
fd67f7b54069fd4e3fd5dcc2238cb8c3266f5202;;	
0000000000000000000000000000000000000000;;	package gopass
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "golang.org/x/crypto/ssh/terminal"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type terminalState struct {
0000000000000000000000000000000000000000;;		state *terminal.State
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isTerminal(fd uintptr) bool {
0000000000000000000000000000000000000000;;		return terminal.IsTerminal(int(fd))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func makeRaw(fd uintptr) (*terminalState, error) {
0000000000000000000000000000000000000000;;		state, err := terminal.MakeRaw(int(fd))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &terminalState{
0000000000000000000000000000000000000000;;			state: state,
0000000000000000000000000000000000000000;;		}, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func restore(fd uintptr, oldState *terminalState) error {
0000000000000000000000000000000000000000;;		return terminal.Restore(int(fd), oldState.state)
0000000000000000000000000000000000000000;;	}
