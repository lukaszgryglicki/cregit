0000000000000000000000000000000000000000;;	package gopass
fd67f7b54069fd4e3fd5dcc2238cb8c3266f5202;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FdReader interface {
0000000000000000000000000000000000000000;;		io.Reader
0000000000000000000000000000000000000000;;		Fd() uintptr
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var defaultGetCh = func(r io.Reader) (byte, error) {
0000000000000000000000000000000000000000;;		buf := make([]byte, 1)
0000000000000000000000000000000000000000;;		if n, err := r.Read(buf); n == 0 || err != nil {
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return 0, err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return 0, io.EOF
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return buf[0], nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		maxLength            = 512
0000000000000000000000000000000000000000;;		ErrInterrupted       = errors.New("interrupted")
0000000000000000000000000000000000000000;;		ErrMaxLengthExceeded = fmt.Errorf("maximum byte limit (%v) exceeded", maxLength)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Provide variable so that tests can provide a mock implementation.
0000000000000000000000000000000000000000;;		getch = defaultGetCh
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// getPasswd returns the input read from terminal.
0000000000000000000000000000000000000000;;	// If prompt is not empty, it will be output as a prompt to the user
0000000000000000000000000000000000000000;;	// If masked is true, typing will be matched by asterisks on the screen.
0000000000000000000000000000000000000000;;	// Otherwise, typing will echo nothing.
0000000000000000000000000000000000000000;;	func getPasswd(prompt string, masked bool, r FdReader, w io.Writer) ([]byte, error) {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;		var pass, bs, mask []byte
0000000000000000000000000000000000000000;;		if masked {
0000000000000000000000000000000000000000;;			bs = []byte("\b \b")
0000000000000000000000000000000000000000;;			mask = []byte("*")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if isTerminal(r.Fd()) {
0000000000000000000000000000000000000000;;			if oldState, err := makeRaw(r.Fd()); err != nil {
0000000000000000000000000000000000000000;;				return pass, err
0000000000000000000000000000000000000000;;			} else {
0000000000000000000000000000000000000000;;				defer func() {
0000000000000000000000000000000000000000;;					restore(r.Fd(), oldState)
0000000000000000000000000000000000000000;;					fmt.Fprintln(w)
0000000000000000000000000000000000000000;;				}()
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if prompt != "" {
0000000000000000000000000000000000000000;;			fmt.Fprint(w, prompt)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Track total bytes read, not just bytes in the password.  This ensures any
0000000000000000000000000000000000000000;;		// errors that might flood the console with nil or -1 bytes infinitely are
0000000000000000000000000000000000000000;;		// capped.
0000000000000000000000000000000000000000;;		var counter int
0000000000000000000000000000000000000000;;		for counter = 0; counter <= maxLength; counter++ {
0000000000000000000000000000000000000000;;			if v, e := getch(r); e != nil {
0000000000000000000000000000000000000000;;				err = e
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if v == 127 || v == 8 {
0000000000000000000000000000000000000000;;				if l := len(pass); l > 0 {
0000000000000000000000000000000000000000;;					pass = pass[:l-1]
0000000000000000000000000000000000000000;;					fmt.Fprint(w, string(bs))
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			} else if v == 13 || v == 10 {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if v == 3 {
0000000000000000000000000000000000000000;;				err = ErrInterrupted
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			} else if v != 0 {
0000000000000000000000000000000000000000;;				pass = append(pass, v)
0000000000000000000000000000000000000000;;				fmt.Fprint(w, string(mask))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if counter > maxLength {
0000000000000000000000000000000000000000;;			err = ErrMaxLengthExceeded
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return pass, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPasswd returns the password read from the terminal without echoing input.
0000000000000000000000000000000000000000;;	// The returned byte array does not include end-of-line characters.
0000000000000000000000000000000000000000;;	func GetPasswd() ([]byte, error) {
0000000000000000000000000000000000000000;;		return getPasswd("", false, os.Stdin, os.Stdout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPasswdMasked returns the password read from the terminal, echoing asterisks.
0000000000000000000000000000000000000000;;	// The returned byte array does not include end-of-line characters.
0000000000000000000000000000000000000000;;	func GetPasswdMasked() ([]byte, error) {
0000000000000000000000000000000000000000;;		return getPasswd("", true, os.Stdin, os.Stdout)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetPasswdPrompt prompts the user and returns the password read from the terminal.
0000000000000000000000000000000000000000;;	// If mask is true, then asterisks are echoed.
0000000000000000000000000000000000000000;;	// The returned byte array does not include end-of-line characters.
0000000000000000000000000000000000000000;;	func GetPasswdPrompt(prompt string, mask bool, r FdReader, w io.Writer) ([]byte, error) {
0000000000000000000000000000000000000000;;		return getPasswd(prompt, mask, r, w)
0000000000000000000000000000000000000000;;	}
