0000000000000000000000000000000000000000;;	package govalidator
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// Iterator is the function that accepts element of slice/array and its index
0000000000000000000000000000000000000000;;	type Iterator func(interface{}, int)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ResultIterator is the function that accepts element of slice/array and its index and returns any result
0000000000000000000000000000000000000000;;	type ResultIterator func(interface{}, int) interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ConditionIterator is the function that accepts element of slice/array and its index and returns boolean
0000000000000000000000000000000000000000;;	type ConditionIterator func(interface{}, int) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Each iterates over the slice and apply Iterator to every item
0000000000000000000000000000000000000000;;	func Each(array []interface{}, iterator Iterator) {
0000000000000000000000000000000000000000;;		for index, data := range array {
0000000000000000000000000000000000000000;;			iterator(data, index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Map iterates over the slice and apply ResultIterator to every item. Returns new slice as a result.
0000000000000000000000000000000000000000;;	func Map(array []interface{}, iterator ResultIterator) []interface{} {
0000000000000000000000000000000000000000;;		var result = make([]interface{}, len(array))
0000000000000000000000000000000000000000;;		for index, data := range array {
0000000000000000000000000000000000000000;;			result[index] = iterator(data, index)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Find iterates over the slice and apply ConditionIterator to every item. Returns first item that meet ConditionIterator or nil otherwise.
0000000000000000000000000000000000000000;;	func Find(array []interface{}, iterator ConditionIterator) interface{} {
0000000000000000000000000000000000000000;;		for index, data := range array {
0000000000000000000000000000000000000000;;			if iterator(data, index) {
0000000000000000000000000000000000000000;;				return data
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Filter iterates over the slice and apply ConditionIterator to every item. Returns new slice.
0000000000000000000000000000000000000000;;	func Filter(array []interface{}, iterator ConditionIterator) []interface{} {
0000000000000000000000000000000000000000;;		var result = make([]interface{}, 0)
0000000000000000000000000000000000000000;;		for index, data := range array {
0000000000000000000000000000000000000000;;			if iterator(data, index) {
0000000000000000000000000000000000000000;;				result = append(result, data)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return result
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Count iterates over the slice and apply ConditionIterator to every item. Returns count of items that meets ConditionIterator.
0000000000000000000000000000000000000000;;	func Count(array []interface{}, iterator ConditionIterator) int {
0000000000000000000000000000000000000000;;		count := 0
0000000000000000000000000000000000000000;;		for index, data := range array {
0000000000000000000000000000000000000000;;			if iterator(data, index) {
0000000000000000000000000000000000000000;;				count = count + 1
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return count
0000000000000000000000000000000000000000;;	}
