0000000000000000000000000000000000000000;;	govalidator
0000000000000000000000000000000000000000;;	===========
0000000000000000000000000000000000000000;;	[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/asaskevich/govalidator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![GoDoc](https://godoc.org/github.com/asaskevich/govalidator?status.png)](https://godoc.org/github.com/asaskevich/govalidator) [![Coverage Status](https://img.shields.io/coveralls/asaskevich/govalidator.svg)](https://coveralls.io/r/asaskevich/govalidator?branch=master) [![wercker status](https://app.wercker.com/status/1ec990b09ea86c910d5f08b0e02c6043/s "wercker status")](https://app.wercker.com/project/bykey/1ec990b09ea86c910d5f08b0e02c6043)
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/asaskevich/govalidator.svg?branch=master)](https://travis-ci.org/asaskevich/govalidator)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A package of validators and sanitizers for strings, structs and collections. Based on [validator.js](https://github.com/chriso/validator.js).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Installation
0000000000000000000000000000000000000000;;	Make sure that Go is installed on your computer.
0000000000000000000000000000000000000000;;	Type the following command in your terminal:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go get github.com/asaskevich/govalidator
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	or you can get specified release of the package with `gopkg.in`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		go get gopkg.in/asaskevich/govalidator.v4
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	After it the package is ready to use.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Import package in your project
0000000000000000000000000000000000000000;;	Add following line in your `*.go` file:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	If you are unhappy to use long `govalidator`, you can do something like this:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	  valid "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Activate behavior to require all fields have a validation tag by default
0000000000000000000000000000000000000000;;	`SetFieldsRequiredByDefault` causes validation to fail when struct fields do not include validations or are not explicitly marked as exempt (using `valid:"-"` or `valid:"email,optional"`). A good place to activate this is a package init function or the main() function.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;	  govalidator.SetFieldsRequiredByDefault(true)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Here's some code to explain it:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// this struct definition will fail govalidator.ValidateStruct() (and the field values do not matter):
0000000000000000000000000000000000000000;;	type exampleStruct struct {
0000000000000000000000000000000000000000;;	  Name  string ``
0000000000000000000000000000000000000000;;	  Email string `valid:"email"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// this, however, will only fail when Email is empty or an invalid email address:
0000000000000000000000000000000000000000;;	type exampleStruct2 struct {
0000000000000000000000000000000000000000;;	  Name  string `valid:"-"`
0000000000000000000000000000000000000000;;	  Email string `valid:"email"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// lastly, this will only fail when Email is an invalid email address but not when it's empty:
0000000000000000000000000000000000000000;;	type exampleStruct2 struct {
0000000000000000000000000000000000000000;;	  Name  string `valid:"-"`
0000000000000000000000000000000000000000;;	  Email string `valid:"email,optional"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Recent breaking changes (see [#123](https://github.com/asaskevich/govalidator/pull/123))
0000000000000000000000000000000000000000;;	##### Custom validator function signature
0000000000000000000000000000000000000000;;	A context was added as the second parameter, for structs this is the object being validated â€“ this makes dependent validation possible.
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// old signature
0000000000000000000000000000000000000000;;	func(i interface{}) bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// new signature
0000000000000000000000000000000000000000;;	func(i interface{}, o interface{}) bool
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	##### Adding a custom validator
0000000000000000000000000000000000000000;;	This was changed to prevent data races when accessing custom validators.
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// before
0000000000000000000000000000000000000000;;	govalidator.CustomTypeTagMap["customByteArrayValidator"] = CustomTypeValidator(func(i interface{}, o interface{}) bool {
0000000000000000000000000000000000000000;;	  // ...
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// after
0000000000000000000000000000000000000000;;	govalidator.CustomTypeTagMap.Set("customByteArrayValidator", CustomTypeValidator(func(i interface{}, o interface{}) bool {
0000000000000000000000000000000000000000;;	  // ...
0000000000000000000000000000000000000000;;	}))
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### List of functions:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	func Abs(value float64) float64
0000000000000000000000000000000000000000;;	func BlackList(str, chars string) string
0000000000000000000000000000000000000000;;	func ByteLength(str string, params ...string) bool
0000000000000000000000000000000000000000;;	func StringLength(str string, params ...string) bool
0000000000000000000000000000000000000000;;	func StringMatches(s string, params ...string) bool
0000000000000000000000000000000000000000;;	func CamelCaseToUnderscore(str string) string
0000000000000000000000000000000000000000;;	func Contains(str, substring string) bool
0000000000000000000000000000000000000000;;	func Count(array []interface{}, iterator ConditionIterator) int
0000000000000000000000000000000000000000;;	func Each(array []interface{}, iterator Iterator)
0000000000000000000000000000000000000000;;	func ErrorByField(e error, field string) string
0000000000000000000000000000000000000000;;	func Filter(array []interface{}, iterator ConditionIterator) []interface{}
0000000000000000000000000000000000000000;;	func Find(array []interface{}, iterator ConditionIterator) interface{}
0000000000000000000000000000000000000000;;	func GetLine(s string, index int) (string, error)
0000000000000000000000000000000000000000;;	func GetLines(s string) []string
0000000000000000000000000000000000000000;;	func IsHost(s string) bool
0000000000000000000000000000000000000000;;	func InRange(value, left, right float64) bool
0000000000000000000000000000000000000000;;	func IsASCII(str string) bool
0000000000000000000000000000000000000000;;	func IsAlpha(str string) bool
0000000000000000000000000000000000000000;;	func IsAlphanumeric(str string) bool
0000000000000000000000000000000000000000;;	func IsBase64(str string) bool
0000000000000000000000000000000000000000;;	func IsByteLength(str string, min, max int) bool
0000000000000000000000000000000000000000;;	func IsCreditCard(str string) bool
0000000000000000000000000000000000000000;;	func IsDataURI(str string) bool
0000000000000000000000000000000000000000;;	func IsDialString(str string) bool
0000000000000000000000000000000000000000;;	func IsDNSName(str string) bool
0000000000000000000000000000000000000000;;	func IsDivisibleBy(str, num string) bool
0000000000000000000000000000000000000000;;	func IsEmail(str string) bool
0000000000000000000000000000000000000000;;	func IsFilePath(str string) (bool, int)
0000000000000000000000000000000000000000;;	func IsFloat(str string) bool
0000000000000000000000000000000000000000;;	func IsFullWidth(str string) bool
0000000000000000000000000000000000000000;;	func IsHalfWidth(str string) bool
0000000000000000000000000000000000000000;;	func IsHexadecimal(str string) bool
0000000000000000000000000000000000000000;;	func IsHexcolor(str string) bool
0000000000000000000000000000000000000000;;	func IsIP(str string) bool
0000000000000000000000000000000000000000;;	func IsIPv4(str string) bool
0000000000000000000000000000000000000000;;	func IsIPv6(str string) bool
0000000000000000000000000000000000000000;;	func IsISBN(str string, version int) bool
0000000000000000000000000000000000000000;;	func IsISBN10(str string) bool
0000000000000000000000000000000000000000;;	func IsISBN13(str string) bool
0000000000000000000000000000000000000000;;	func IsISO3166Alpha2(str string) bool
0000000000000000000000000000000000000000;;	func IsISO3166Alpha3(str string) bool
0000000000000000000000000000000000000000;;	func IsInt(str string) bool
0000000000000000000000000000000000000000;;	func IsJSON(str string) bool
0000000000000000000000000000000000000000;;	func IsLatitude(str string) bool
0000000000000000000000000000000000000000;;	func IsLongitude(str string) bool
0000000000000000000000000000000000000000;;	func IsLowerCase(str string) bool
0000000000000000000000000000000000000000;;	func IsMAC(str string) bool
0000000000000000000000000000000000000000;;	func IsMongoID(str string) bool
0000000000000000000000000000000000000000;;	func IsMultibyte(str string) bool
0000000000000000000000000000000000000000;;	func IsNatural(value float64) bool
0000000000000000000000000000000000000000;;	func IsNegative(value float64) bool
0000000000000000000000000000000000000000;;	func IsNonNegative(value float64) bool
0000000000000000000000000000000000000000;;	func IsNonPositive(value float64) bool
0000000000000000000000000000000000000000;;	func IsNull(str string) bool
0000000000000000000000000000000000000000;;	func IsNumeric(str string) bool
0000000000000000000000000000000000000000;;	func IsPort(str string) bool
0000000000000000000000000000000000000000;;	func IsPositive(value float64) bool
0000000000000000000000000000000000000000;;	func IsPrintableASCII(str string) bool
0000000000000000000000000000000000000000;;	func IsRGBcolor(str string) bool
0000000000000000000000000000000000000000;;	func IsRequestURI(rawurl string) bool
0000000000000000000000000000000000000000;;	func IsRequestURL(rawurl string) bool
0000000000000000000000000000000000000000;;	func IsSSN(str string) bool
0000000000000000000000000000000000000000;;	func IsSemver(str string) bool
0000000000000000000000000000000000000000;;	func IsURL(str string) bool
0000000000000000000000000000000000000000;;	func IsUTFDigit(str string) bool
0000000000000000000000000000000000000000;;	func IsUTFLetter(str string) bool
0000000000000000000000000000000000000000;;	func IsUTFLetterNumeric(str string) bool
0000000000000000000000000000000000000000;;	func IsUTFNumeric(str string) bool
0000000000000000000000000000000000000000;;	func IsUUID(str string) bool
0000000000000000000000000000000000000000;;	func IsUUIDv3(str string) bool
0000000000000000000000000000000000000000;;	func IsUUIDv4(str string) bool
0000000000000000000000000000000000000000;;	func IsUUIDv5(str string) bool
0000000000000000000000000000000000000000;;	func IsUpperCase(str string) bool
0000000000000000000000000000000000000000;;	func IsVariableWidth(str string) bool
0000000000000000000000000000000000000000;;	func IsWhole(value float64) bool
0000000000000000000000000000000000000000;;	func LeftTrim(str, chars string) string
0000000000000000000000000000000000000000;;	func Map(array []interface{}, iterator ResultIterator) []interface{}
0000000000000000000000000000000000000000;;	func Matches(str, pattern string) bool
0000000000000000000000000000000000000000;;	func NormalizeEmail(str string) (string, error)
0000000000000000000000000000000000000000;;	func RemoveTags(s string) string
0000000000000000000000000000000000000000;;	func ReplacePattern(str, pattern, replace string) string
0000000000000000000000000000000000000000;;	func Reverse(s string) string
0000000000000000000000000000000000000000;;	func RightTrim(str, chars string) string
0000000000000000000000000000000000000000;;	func SafeFileName(str string) string
0000000000000000000000000000000000000000;;	func Sign(value float64) float64
0000000000000000000000000000000000000000;;	func StripLow(str string, keepNewLines bool) string
0000000000000000000000000000000000000000;;	func ToBoolean(str string) (bool, error)
0000000000000000000000000000000000000000;;	func ToFloat(str string) (float64, error)
0000000000000000000000000000000000000000;;	func ToInt(str string) (int64, error)
0000000000000000000000000000000000000000;;	func ToJSON(obj interface{}) (string, error)
0000000000000000000000000000000000000000;;	func ToString(obj interface{}) string
0000000000000000000000000000000000000000;;	func Trim(str, chars string) string
0000000000000000000000000000000000000000;;	func Truncate(str string, length int, ending string) string
0000000000000000000000000000000000000000;;	func UnderscoreToCamelCase(s string) string
0000000000000000000000000000000000000000;;	func ValidateStruct(s interface{}) (bool, error)
0000000000000000000000000000000000000000;;	func WhiteList(str, chars string) string
0000000000000000000000000000000000000000;;	type ConditionIterator
0000000000000000000000000000000000000000;;	type Error
0000000000000000000000000000000000000000;;	func (e Error) Error() string
0000000000000000000000000000000000000000;;	type Errors
0000000000000000000000000000000000000000;;	func (es Errors) Error() string
0000000000000000000000000000000000000000;;	type ISO3166Entry
0000000000000000000000000000000000000000;;	type Iterator
0000000000000000000000000000000000000000;;	type ParamValidator
0000000000000000000000000000000000000000;;	type ResultIterator
0000000000000000000000000000000000000000;;	type UnsupportedTypeError
0000000000000000000000000000000000000000;;	func (e *UnsupportedTypeError) Error() string
0000000000000000000000000000000000000000;;	type Validator
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Examples
0000000000000000000000000000000000000000;;	###### IsURL
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	println(govalidator.IsURL(`http://user@pass:domain.com/path/page`))
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	###### ToString
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	type User struct {
0000000000000000000000000000000000000000;;		FirstName string
0000000000000000000000000000000000000000;;		LastName string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	str := govalidator.ToString(&User{"John", "Juan"})
0000000000000000000000000000000000000000;;	println(str)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	###### Each, Map, Filter, Count for slices
0000000000000000000000000000000000000000;;	Each iterates over the slice/array and calls Iterator for every item
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	data := []interface{}{1, 2, 3, 4, 5}
0000000000000000000000000000000000000000;;	var fn govalidator.Iterator = func(value interface{}, index int) {
0000000000000000000000000000000000000000;;		println(value.(int))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	govalidator.Each(data, fn)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	data := []interface{}{1, 2, 3, 4, 5}
0000000000000000000000000000000000000000;;	var fn govalidator.ResultIterator = func(value interface{}, index int) interface{} {
0000000000000000000000000000000000000000;;		return value.(int) * 3
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	_ = govalidator.Map(data, fn) // result = []interface{}{1, 6, 9, 12, 15}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	data := []interface{}{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
0000000000000000000000000000000000000000;;	var fn govalidator.ConditionIterator = func(value interface{}, index int) bool {
0000000000000000000000000000000000000000;;		return value.(int)%2 == 0
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	_ = govalidator.Filter(data, fn) // result = []interface{}{2, 4, 6, 8, 10}
0000000000000000000000000000000000000000;;	_ = govalidator.Count(data, fn) // result = 5
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	###### ValidateStruct [#2](https://github.com/asaskevich/govalidator/pull/2)
0000000000000000000000000000000000000000;;	If you want to validate structs, you can use tag `valid` for any field in your structure. All validators used with this field in one tag are separated by comma. If you want to skip validation, place `-` in your tag. If you need a validator that is not on the list below, you can add it like this:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	govalidator.TagMap["duck"] = govalidator.Validator(func(str string) bool {
0000000000000000000000000000000000000000;;		return str == "duck"
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	For completely custom validators (interface-based), see below.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Here is a list of available validators for struct fields (validator - used function):
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	"alpha":          IsAlpha,
0000000000000000000000000000000000000000;;	"alphanum":       IsAlphanumeric,
0000000000000000000000000000000000000000;;	"ascii":          IsASCII,
0000000000000000000000000000000000000000;;	"base64":         IsBase64,
0000000000000000000000000000000000000000;;	"creditcard":     IsCreditCard,
0000000000000000000000000000000000000000;;	"datauri":        IsDataURI,
0000000000000000000000000000000000000000;;	"dialstring":     IsDialString,
0000000000000000000000000000000000000000;;	"dns":            IsDNSName,
0000000000000000000000000000000000000000;;	"email":          IsEmail,
0000000000000000000000000000000000000000;;	"float":          IsFloat,
0000000000000000000000000000000000000000;;	"fullwidth":      IsFullWidth,
0000000000000000000000000000000000000000;;	"halfwidth":      IsHalfWidth,
0000000000000000000000000000000000000000;;	"hexadecimal":    IsHexadecimal,
0000000000000000000000000000000000000000;;	"hexcolor":       IsHexcolor,
0000000000000000000000000000000000000000;;	"host":           IsHost,
0000000000000000000000000000000000000000;;	"int":            IsInt,
0000000000000000000000000000000000000000;;	"ip":             IsIP,
0000000000000000000000000000000000000000;;	"ipv4":           IsIPv4,
0000000000000000000000000000000000000000;;	"ipv6":           IsIPv6,
0000000000000000000000000000000000000000;;	"isbn10":         IsISBN10,
0000000000000000000000000000000000000000;;	"isbn13":         IsISBN13,
0000000000000000000000000000000000000000;;	"json":           IsJSON,
0000000000000000000000000000000000000000;;	"latitude":       IsLatitude,
0000000000000000000000000000000000000000;;	"longitude":      IsLongitude,
0000000000000000000000000000000000000000;;	"lowercase":      IsLowerCase,
0000000000000000000000000000000000000000;;	"mac":            IsMAC,
0000000000000000000000000000000000000000;;	"multibyte":      IsMultibyte,
0000000000000000000000000000000000000000;;	"null":           IsNull,
0000000000000000000000000000000000000000;;	"numeric":        IsNumeric,
0000000000000000000000000000000000000000;;	"port":           IsPort,
0000000000000000000000000000000000000000;;	"printableascii": IsPrintableASCII,
0000000000000000000000000000000000000000;;	"requri":         IsRequestURI,
0000000000000000000000000000000000000000;;	"requrl":         IsRequestURL,
0000000000000000000000000000000000000000;;	"rgbcolor":       IsRGBcolor,
0000000000000000000000000000000000000000;;	"ssn":            IsSSN,
0000000000000000000000000000000000000000;;	"semver":         IsSemver,
0000000000000000000000000000000000000000;;	"uppercase":      IsUpperCase,
0000000000000000000000000000000000000000;;	"url":            IsURL,
0000000000000000000000000000000000000000;;	"utfdigit":       IsUTFDigit,
0000000000000000000000000000000000000000;;	"utfletter":      IsUTFLetter,
0000000000000000000000000000000000000000;;	"utfletternum":   IsUTFLetterNumeric,
0000000000000000000000000000000000000000;;	"utfnumeric":     IsUTFNumeric,
0000000000000000000000000000000000000000;;	"uuid":           IsUUID,
0000000000000000000000000000000000000000;;	"uuidv3":         IsUUIDv3,
0000000000000000000000000000000000000000;;	"uuidv4":         IsUUIDv4,
0000000000000000000000000000000000000000;;	"uuidv5":         IsUUIDv5,
0000000000000000000000000000000000000000;;	"variablewidth":  IsVariableWidth,
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	Validators with parameters
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	"length(min|max)": ByteLength,
0000000000000000000000000000000000000000;;	"matches(pattern)": StringMatches,
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And here is small example of usage:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	type Post struct {
0000000000000000000000000000000000000000;;		Title    string `valid:"alphanum,required"`
0000000000000000000000000000000000000000;;		Message  string `valid:"duck,ascii"`
0000000000000000000000000000000000000000;;		AuthorIP string `valid:"ipv4"`
0000000000000000000000000000000000000000;;		Date     string `valid:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	post := &Post{
0000000000000000000000000000000000000000;;		Title:   "My Example Post",
0000000000000000000000000000000000000000;;		Message: "duck",
0000000000000000000000000000000000000000;;		AuthorIP: "123.234.54.3",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Add your own struct validation tags
0000000000000000000000000000000000000000;;	govalidator.TagMap["duck"] = govalidator.Validator(func(str string) bool {
0000000000000000000000000000000000000000;;		return str == "duck"
0000000000000000000000000000000000000000;;	})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	result, err := govalidator.ValidateStruct(post)
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;		println("error: " + err.Error())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	println(result)
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	###### WhiteList
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	// Remove all characters from string ignoring characters between "a" and "z"
0000000000000000000000000000000000000000;;	println(govalidator.WhiteList("a3a43a5a4a3a2a23a4a5a4a3a4", "a-z") == "aaaaaaaaaaaa")
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	###### Custom validation functions
0000000000000000000000000000000000000000;;	Custom validation using your own domain specific validators is also available - here's an example of how to use it:
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import "github.com/asaskevich/govalidator"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomByteArray [6]byte // custom types are supported and can be validated
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StructWithCustomByteArray struct {
0000000000000000000000000000000000000000;;	  ID              CustomByteArray `valid:"customByteArrayValidator,customMinLengthValidator"` // multiple custom validators are possible as well and will be evaluated in sequence
0000000000000000000000000000000000000000;;	  Email           string          `valid:"email"`
0000000000000000000000000000000000000000;;	  CustomMinLength int             `valid:"-"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	govalidator.CustomTypeTagMap.Set("customByteArrayValidator", CustomTypeValidator(func(i interface{}, context interface{}) bool {
0000000000000000000000000000000000000000;;	  switch v := context.(type) { // you can type switch on the context interface being validated
0000000000000000000000000000000000000000;;	  case StructWithCustomByteArray:
0000000000000000000000000000000000000000;;	    // you can check and validate against some other field in the context,
0000000000000000000000000000000000000000;;	    // return early or not validate against the context at all â€“ your choice
0000000000000000000000000000000000000000;;	  case SomeOtherType:
0000000000000000000000000000000000000000;;	    // ...
0000000000000000000000000000000000000000;;	  default:
0000000000000000000000000000000000000000;;	    // expecting some other type? Throw/panic here or continue
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  switch v := i.(type) { // type switch on the struct field being validated
0000000000000000000000000000000000000000;;	  case CustomByteArray:
0000000000000000000000000000000000000000;;	    for _, e := range v { // this validator checks that the byte array is not empty, i.e. not all zeroes
0000000000000000000000000000000000000000;;	      if e != 0 {
0000000000000000000000000000000000000000;;	        return true
0000000000000000000000000000000000000000;;	      }
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	  return false
0000000000000000000000000000000000000000;;	}))
0000000000000000000000000000000000000000;;	govalidator.CustomTypeTagMap.Set("customMinLengthValidator", CustomTypeValidator(func(i interface{}, context interface{}) bool {
0000000000000000000000000000000000000000;;	  switch v := context.(type) { // this validates a field against the value in another field, i.e. dependent validation
0000000000000000000000000000000000000000;;	  case StructWithCustomByteArray:
0000000000000000000000000000000000000000;;	    return len(v.ID) >= v.CustomMinLength
0000000000000000000000000000000000000000;;	  }
0000000000000000000000000000000000000000;;	  return false
0000000000000000000000000000000000000000;;	}))
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Notes
0000000000000000000000000000000000000000;;	Documentation is available here: [godoc.org](https://godoc.org/github.com/asaskevich/govalidator).
0000000000000000000000000000000000000000;;	Full information about code coverage is also available here: [govalidator on gocover.io](http://gocover.io/github.com/asaskevich/govalidator).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Support
0000000000000000000000000000000000000000;;	If you do have a contribution for the package feel free to put up a Pull Request or open Issue.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	#### Special thanks to [contributors](https://github.com/asaskevich/govalidator/graphs/contributors)
0000000000000000000000000000000000000000;;	* [Daniel Lohse](https://github.com/annismckenzie)
0000000000000000000000000000000000000000;;	* [Attila OlÃ¡h](https://github.com/attilaolah)
0000000000000000000000000000000000000000;;	* [Daniel Korner](https://github.com/Dadie)
0000000000000000000000000000000000000000;;	* [Steven Wilkin](https://github.com/stevenwilkin)
0000000000000000000000000000000000000000;;	* [Deiwin Sarjas](https://github.com/deiwin)
0000000000000000000000000000000000000000;;	* [Noah Shibley](https://github.com/slugmobile)
0000000000000000000000000000000000000000;;	* [Nathan Davies](https://github.com/nathj07)
0000000000000000000000000000000000000000;;	* [Matt Sanford](https://github.com/mzsanford)
0000000000000000000000000000000000000000;;	* [Simon ccl1115](https://github.com/ccl1115)
