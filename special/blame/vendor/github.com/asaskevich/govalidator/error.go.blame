0000000000000000000000000000000000000000;;	package govalidator
20a23b516161fc6e4e2d00ed067520ad63629162;;	
0000000000000000000000000000000000000000;;	// Errors is an array of multiple errors and conforms to the error interface.
0000000000000000000000000000000000000000;;	type Errors []error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Errors returns itself.
0000000000000000000000000000000000000000;;	func (es Errors) Errors() []error {
0000000000000000000000000000000000000000;;		return es
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (es Errors) Error() string {
0000000000000000000000000000000000000000;;		var err string
0000000000000000000000000000000000000000;;		for _, e := range es {
0000000000000000000000000000000000000000;;			err += e.Error() + ";"
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Error encapsulates a name, an error and whether there's a custom error message or not.
0000000000000000000000000000000000000000;;	type Error struct {
0000000000000000000000000000000000000000;;		Name                     string
0000000000000000000000000000000000000000;;		Err                      error
0000000000000000000000000000000000000000;;		CustomErrorMessageExists bool
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Error) Error() string {
0000000000000000000000000000000000000000;;		if e.CustomErrorMessageExists {
0000000000000000000000000000000000000000;;			return e.Err.Error()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return e.Name + ": " + e.Err.Error()
0000000000000000000000000000000000000000;;	}
