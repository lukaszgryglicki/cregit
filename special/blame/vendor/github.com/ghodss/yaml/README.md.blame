0000000000000000000000000000000000000000;;	# YAML marshaling and unmarshaling support for Go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/ghodss/yaml.svg)](https://travis-ci.org/ghodss/yaml)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Introduction
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	A wrapper around [go-yaml](https://github.com/go-yaml/yaml) designed to enable a better way of handling YAML when marshaling to and from structs. 
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	In short, this library first converts YAML to JSON using go-yaml and then uses `json.Marshal` and `json.Unmarshal` to convert to or from the struct. This means that it effectively reuses the JSON struct tags as well as the custom JSON methods `MarshalJSON` and `UnmarshalJSON` unlike go-yaml. For a detailed overview of the rationale behind this method, [see this blog post](http://ghodss.com/2014/the-right-way-to-handle-yaml-in-golang/).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Compatibility
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This package uses [go-yaml v2](https://github.com/go-yaml/yaml) and therefore supports [everything go-yaml supports](https://github.com/go-yaml/yaml#compatibility).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Caveats
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Caveat #1:** When using `yaml.Marshal` and `yaml.Unmarshal`, binary data should NOT be preceded with the `!!binary` YAML tag. If you do, go-yaml will convert the binary data from base64 to native binary data, which is not compatible with JSON. You can still use binary in your YAML files though - just store them without the `!!binary` tag and decode the base64 in your code (e.g. in the custom JSON methods `MarshalJSON` and `UnmarshalJSON`). This also has the benefit that your YAML and your JSON binary data will be decoded exactly the same way. As an example:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	BAD:
0000000000000000000000000000000000000000;;		exampleKey: !!binary gIGC
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	GOOD:
0000000000000000000000000000000000000000;;		exampleKey: gIGC
0000000000000000000000000000000000000000;;	... and decode the base64 data in your code.
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	**Caveat #2:** When using `YAMLToJSON` directly, maps with keys that are maps will result in an error since this is not supported by JSON. This error will occur in `Unmarshal` as well since you can't unmarshal map keys anyways since struct fields can't be keys.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Installation and usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	To install, run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	$ go get github.com/ghodss/yaml
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	And import using:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	import "github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Usage is very similar to the JSON library:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Person struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`  // Affects YAML field names too.
0000000000000000000000000000000000000000;;		Age int `json:"name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		// Marshal a Person struct to YAML.
0000000000000000000000000000000000000000;;		p := Person{"John", 30}
0000000000000000000000000000000000000000;;		y, err := yaml.Marshal(p)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("err: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println(string(y))
0000000000000000000000000000000000000000;;		/* Output:
0000000000000000000000000000000000000000;;		name: John
0000000000000000000000000000000000000000;;		age: 30
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Unmarshal the YAML back into a Person struct.
0000000000000000000000000000000000000000;;		var p2 Person
0000000000000000000000000000000000000000;;		err := yaml.Unmarshal(y, &p2)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("err: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println(p2)
0000000000000000000000000000000000000000;;		/* Output:
0000000000000000000000000000000000000000;;		{John 30}
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	`yaml.YAMLToJSON` and `yaml.JSONToYAML` methods are also available:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/ghodss/yaml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	func main() {
0000000000000000000000000000000000000000;;		j := []byte(`{"name": "John", "age": 30}`)
0000000000000000000000000000000000000000;;		y, err := yaml.JSONToYAML(j)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("err: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println(string(y))
0000000000000000000000000000000000000000;;		/* Output:
0000000000000000000000000000000000000000;;		name: John
0000000000000000000000000000000000000000;;		age: 30
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;		j2, err := yaml.YAMLToJSON(y)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			fmt.Printf("err: %v\n", err)
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		fmt.Println(string(j2))
0000000000000000000000000000000000000000;;		/* Output:
0000000000000000000000000000000000000000;;		{"age":30,"name":"John"}
0000000000000000000000000000000000000000;;		*/
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
