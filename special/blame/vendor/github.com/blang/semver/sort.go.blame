0000000000000000000000000000000000000000;;	package semver
9a8dd8e8e9c9f7d0ff29d2ab116ffccc9fc03c02;Godeps/_workspace/src/github.com/blang/semver/sort.go[Godeps/_workspace/src/github.com/blang/semver/sort.go][vendor/github.com/blang/semver/sort.go];	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"sort"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Versions represents multiple versions.
0000000000000000000000000000000000000000;;	type Versions []Version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Len returns length of version collection
0000000000000000000000000000000000000000;;	func (s Versions) Len() int {
0000000000000000000000000000000000000000;;		return len(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Swap swaps two versions inside the collection by its indices
0000000000000000000000000000000000000000;;	func (s Versions) Swap(i, j int) {
0000000000000000000000000000000000000000;;		s[i], s[j] = s[j], s[i]
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Less checks if version at index i is less than version at index j
0000000000000000000000000000000000000000;;	func (s Versions) Less(i, j int) bool {
0000000000000000000000000000000000000000;;		return s[i].LT(s[j])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Sort sorts a slice of versions
0000000000000000000000000000000000000000;;	func Sort(versions []Version) {
0000000000000000000000000000000000000000;;		sort.Sort(Versions(versions))
0000000000000000000000000000000000000000;;	}
