0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
7b9d7c672c86a168f69918bacbe5d619c1eaf927;Godeps/_workspace/src/github.com/appc/spec/schema/types/acidentifier.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/acidentifier.go][vendor/github.com/appc/spec/schema/types/acidentifier.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		// ValidACIdentifier is a regular expression that defines a valid ACIdentifier
0000000000000000000000000000000000000000;;		ValidACIdentifier = regexp.MustCompile("^[a-z0-9]+([-._~/][a-z0-9]+)*$")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		invalidACIdentifierChars = regexp.MustCompile("[^a-z0-9-._~/]")
0000000000000000000000000000000000000000;;		invalidACIdentifierEdges = regexp.MustCompile("(^[-._~/]+)|([-._~/]+$)")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ErrEmptyACIdentifier         = ACIdentifierError("ACIdentifier cannot be empty")
0000000000000000000000000000000000000000;;		ErrInvalidEdgeInACIdentifier = ACIdentifierError("ACIdentifier must start and end with only lower case " +
0000000000000000000000000000000000000000;;			"alphanumeric characters")
0000000000000000000000000000000000000000;;		ErrInvalidCharInACIdentifier = ACIdentifierError("ACIdentifier must contain only lower case " +
0000000000000000000000000000000000000000;;			`alphanumeric characters plus "-._~/"`)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ACIdentifier (an App-Container Identifier) is a format used by keys in image names
0000000000000000000000000000000000000000;;	// and image labels of the App Container Standard. An ACIdentifier is restricted to numeric
0000000000000000000000000000000000000000;;	// and lowercase URI unreserved characters defined in URI RFC[1]; all alphabetical characters
0000000000000000000000000000000000000000;;	// must be lowercase only. Furthermore, the first and last character ("edges") must be
0000000000000000000000000000000000000000;;	// alphanumeric, and an ACIdentifier cannot be empty. Programmatically, an ACIdentifier must
0000000000000000000000000000000000000000;;	// conform to the regular expression ValidACIdentifier.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// [1] http://tools.ietf.org/html/rfc3986#section-2.3
0000000000000000000000000000000000000000;;	type ACIdentifier string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n ACIdentifier) String() string {
0000000000000000000000000000000000000000;;		return string(n)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set sets the ACIdentifier to the given value, if it is valid; if not,
0000000000000000000000000000000000000000;;	// an error is returned.
0000000000000000000000000000000000000000;;	func (n *ACIdentifier) Set(s string) error {
0000000000000000000000000000000000000000;;		nn, err := NewACIdentifier(s)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			*n = *nn
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Equals checks whether a given ACIdentifier is equal to this one.
0000000000000000000000000000000000000000;;	func (n ACIdentifier) Equals(o ACIdentifier) bool {
0000000000000000000000000000000000000000;;		return strings.ToLower(string(n)) == strings.ToLower(string(o))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Empty returns a boolean indicating whether this ACIdentifier is empty.
0000000000000000000000000000000000000000;;	func (n ACIdentifier) Empty() bool {
0000000000000000000000000000000000000000;;		return n.String() == ""
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewACIdentifier generates a new ACIdentifier from a string. If the given string is
0000000000000000000000000000000000000000;;	// not a valid ACIdentifier, nil and an error are returned.
0000000000000000000000000000000000000000;;	func NewACIdentifier(s string) (*ACIdentifier, error) {
0000000000000000000000000000000000000000;;		n := ACIdentifier(s)
0000000000000000000000000000000000000000;;		if err := n.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &n, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MustACIdentifier generates a new ACIdentifier from a string, If the given string is
0000000000000000000000000000000000000000;;	// not a valid ACIdentifier, it panics.
0000000000000000000000000000000000000000;;	func MustACIdentifier(s string) *ACIdentifier {
0000000000000000000000000000000000000000;;		n, err := NewACIdentifier(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return n
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (n ACIdentifier) assertValid() error {
0000000000000000000000000000000000000000;;		s := string(n)
0000000000000000000000000000000000000000;;		if len(s) == 0 {
0000000000000000000000000000000000000000;;			return ErrEmptyACIdentifier
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidACIdentifierChars.MatchString(s) {
0000000000000000000000000000000000000000;;			return ErrInvalidCharInACIdentifier
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if invalidACIdentifierEdges.MatchString(s) {
0000000000000000000000000000000000000000;;			return ErrInvalidEdgeInACIdentifier
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON implements the json.Unmarshaler interface
0000000000000000000000000000000000000000;;	func (n *ACIdentifier) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nn, err := NewACIdentifier(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*n = *nn
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON implements the json.Marshaler interface
0000000000000000000000000000000000000000;;	func (n ACIdentifier) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := n.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(n.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SanitizeACIdentifier replaces every invalid ACIdentifier character in s with an underscore
0000000000000000000000000000000000000000;;	// making it a legal ACIdentifier string. If the character is an upper case letter it
0000000000000000000000000000000000000000;;	// replaces it with its lower case. It also removes illegal edge characters
0000000000000000000000000000000000000000;;	// (hyphens, period, underscore, tilde and slash).
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// This is a helper function and its algorithm is not part of the spec. It
0000000000000000000000000000000000000000;;	// should not be called without the user explicitly asking for a suggestion.
0000000000000000000000000000000000000000;;	func SanitizeACIdentifier(s string) (string, error) {
0000000000000000000000000000000000000000;;		s = strings.ToLower(s)
0000000000000000000000000000000000000000;;		s = invalidACIdentifierChars.ReplaceAllString(s, "_")
0000000000000000000000000000000000000000;;		s = invalidACIdentifierEdges.ReplaceAllString(s, "")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if s == "" {
0000000000000000000000000000000000000000;;			return "", errors.New("must contain at least one valid character")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return s, nil
0000000000000000000000000000000000000000;;	}
