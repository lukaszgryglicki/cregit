0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/port.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/port.go][vendor/github.com/appc/spec/schema/types/port.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/appc/spec/schema/common"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Port represents a port as offered by an application *inside*
0000000000000000000000000000000000000000;;	// the pod.
0000000000000000000000000000000000000000;;	type Port struct {
0000000000000000000000000000000000000000;;		Name            ACName `json:"name"`
0000000000000000000000000000000000000000;;		Protocol        string `json:"protocol"`
0000000000000000000000000000000000000000;;		Port            uint   `json:"port"`
0000000000000000000000000000000000000000;;		Count           uint   `json:"count"`
0000000000000000000000000000000000000000;;		SocketActivated bool   `json:"socketActivated"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ExposedPort represents a port listening on the host side.
0000000000000000000000000000000000000000;;	// The PodPort is optional -- if missing, then try and find the pod-side
0000000000000000000000000000000000000000;;	// information by matching names
0000000000000000000000000000000000000000;;	type ExposedPort struct {
0000000000000000000000000000000000000000;;		Name     ACName `json:"name"`
0000000000000000000000000000000000000000;;		HostPort uint   `json:"hostPort"`
0000000000000000000000000000000000000000;;		HostIP   net.IP `json:"hostIP,omitempty"`  // optional
0000000000000000000000000000000000000000;;		PodPort  *Port  `json:"podPort,omitempty"` // optional. If missing, try and find a corresponding App's port
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type port Port
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p *Port) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var pp port
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &pp); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		np := Port(pp)
0000000000000000000000000000000000000000;;		if err := np.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if np.Count == 0 {
0000000000000000000000000000000000000000;;			np.Count = 1
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*p = np
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Port) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := p.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(port(p))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p Port) assertValid() error {
0000000000000000000000000000000000000000;;		// Although there are no guarantees, most (if not all)
0000000000000000000000000000000000000000;;		// transport protocols use 16 bit ports
0000000000000000000000000000000000000000;;		if p.Port > 65535 || p.Port < 1 {
0000000000000000000000000000000000000000;;			return errors.New("port must be in 1-65535 range")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if p.Port+p.Count > 65536 {
0000000000000000000000000000000000000000;;			return errors.New("end of port range must be in 1-65535 range")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// PortFromString takes a command line port parameter and returns a port
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It is useful for actool patch-manifest --ports
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example port parameters:
0000000000000000000000000000000000000000;;	//      health-check,protocol=udp,port=8000
0000000000000000000000000000000000000000;;	// 	query,protocol=tcp,port=8080,count=1,socketActivated=true
0000000000000000000000000000000000000000;;	func PortFromString(pt string) (*Port, error) {
0000000000000000000000000000000000000000;;		var port Port
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pt = "name=" + pt
0000000000000000000000000000000000000000;;		ptQuery, err := common.MakeQueryString(pt)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, err := url.ParseQuery(ptQuery)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, val := range v {
0000000000000000000000000000000000000000;;			if len(val) > 1 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("label %s with multiple values %q", key, val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch key {
0000000000000000000000000000000000000000;;			case "name":
0000000000000000000000000000000000000000;;				acn, err := NewACName(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				port.Name = *acn
0000000000000000000000000000000000000000;;			case "protocol":
0000000000000000000000000000000000000000;;				port.Protocol = val[0]
0000000000000000000000000000000000000000;;			case "port":
0000000000000000000000000000000000000000;;				p, err := strconv.ParseUint(val[0], 10, 16)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				port.Port = uint(p)
0000000000000000000000000000000000000000;;			case "count":
0000000000000000000000000000000000000000;;				cnt, err := strconv.ParseUint(val[0], 10, 16)
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				port.Count = uint(cnt)
0000000000000000000000000000000000000000;;			case "socketActivated":
0000000000000000000000000000000000000000;;				sa, err := strconv.ParseBool(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				port.SocketActivated = sa
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unknown port parameter %q", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = port.assertValid()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &port, nil
0000000000000000000000000000000000000000;;	}
