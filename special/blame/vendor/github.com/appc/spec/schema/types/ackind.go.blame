0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/ackind.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/ackind.go][vendor/github.com/appc/spec/schema/types/ackind.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoACKind = ACKindError("ACKind must be set")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ACKind wraps a string to define a field which must be set with one of
0000000000000000000000000000000000000000;;	// several ACKind values. If it is unset, or has an invalid value, the field
0000000000000000000000000000000000000000;;	// will refuse to marshal/unmarshal.
0000000000000000000000000000000000000000;;	type ACKind string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ACKind) String() string {
0000000000000000000000000000000000000000;;		return string(a)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ACKind) assertValid() error {
0000000000000000000000000000000000000000;;		s := a.String()
0000000000000000000000000000000000000000;;		switch s {
0000000000000000000000000000000000000000;;		case "ImageManifest", "PodManifest":
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;			return ErrNoACKind
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			msg := fmt.Sprintf("bad ACKind: %s", s)
0000000000000000000000000000000000000000;;			return ACKindError(msg)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a ACKind) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := a.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(a.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *ACKind) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		err := json.Unmarshal(data, &s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		na := ACKind(s)
0000000000000000000000000000000000000000;;		if err := na.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a = na
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
