0000000000000000000000000000000000000000;;	// Copyright 2016 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e1b2a6921d4ce46e5ce744e6c28b538bd077b3b7;;	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		UnixIsolatorNames = make(map[ACIdentifier]struct{})
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		//TODO(lucab): add "ulimit" isolators
0000000000000000000000000000000000000000;;		UnixSysctlName = "os/unix/sysctl"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		for name, con := range map[ACIdentifier]IsolatorValueConstructor{
0000000000000000000000000000000000000000;;			UnixSysctlName: func() IsolatorValue { return &UnixSysctl{} },
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			AddIsolatorName(name, UnixIsolatorNames)
0000000000000000000000000000000000000000;;			AddIsolatorValueConstructor(name, con)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UnixSysctl map[string]string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *UnixSysctl) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v map[string]string
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*s = UnixSysctl(v)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s UnixSysctl) AssertValid() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s UnixSysctl) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (s UnixSysctl) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s UnixSysctl) AsIsolator() Isolator {
0000000000000000000000000000000000000000;;		isol := isolatorMap[UnixSysctlName]()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		b, err := json.Marshal(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		valRaw := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return Isolator{
0000000000000000000000000000000000000000;;			Name:     UnixSysctlName,
0000000000000000000000000000000000000000;;			ValueRaw: &valRaw,
0000000000000000000000000000000000000000;;			value:    isol,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewUnixSysctlIsolator(cfg map[string]string) (*UnixSysctl, error) {
0000000000000000000000000000000000000000;;		s := UnixSysctl(cfg)
0000000000000000000000000000000000000000;;		if err := s.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &s, nil
0000000000000000000000000000000000000000;;	}
