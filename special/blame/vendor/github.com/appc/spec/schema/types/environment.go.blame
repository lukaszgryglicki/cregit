0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/environment.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/environment.go][vendor/github.com/appc/spec/schema/types/environment.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"regexp"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		envPattern = regexp.MustCompile("^[A-Za-z_][A-Za-z_0-9]*$")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Environment []EnvironmentVariable
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type environment Environment
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnvironmentVariable struct {
0000000000000000000000000000000000000000;;		Name  string `json:"name"`
0000000000000000000000000000000000000000;;		Value string `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (ev EnvironmentVariable) assertValid() error {
0000000000000000000000000000000000000000;;		if len(ev.Name) == 0 {
0000000000000000000000000000000000000000;;			return fmt.Errorf(`environment variable name must not be empty`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !envPattern.MatchString(ev.Name) {
0000000000000000000000000000000000000000;;			return fmt.Errorf(`environment variable does not have valid identifier %q`, ev.Name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Environment) assertValid() error {
0000000000000000000000000000000000000000;;		seen := map[string]bool{}
0000000000000000000000000000000000000000;;		for _, env := range e {
0000000000000000000000000000000000000000;;			if err := env.assertValid(); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			_, ok := seen[env.Name]
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf(`duplicate environment variable of name %q`, env.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			seen[env.Name] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e Environment) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := e.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(environment(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *Environment) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var je environment
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &je); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ne := Environment(je)
0000000000000000000000000000000000000000;;		if err := ne.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*e = ne
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve the value of an environment variable by the given name from
0000000000000000000000000000000000000000;;	// Environment, if it exists.
0000000000000000000000000000000000000000;;	func (e Environment) Get(name string) (value string, ok bool) {
0000000000000000000000000000000000000000;;		for _, env := range e {
0000000000000000000000000000000000000000;;			if env.Name == name {
0000000000000000000000000000000000000000;;				return env.Value, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set sets the value of an environment variable by the given name,
0000000000000000000000000000000000000000;;	// overwriting if one already exists.
0000000000000000000000000000000000000000;;	func (e *Environment) Set(name string, value string) {
0000000000000000000000000000000000000000;;		for i, env := range *e {
0000000000000000000000000000000000000000;;			if env.Name == name {
0000000000000000000000000000000000000000;;				(*e)[i] = EnvironmentVariable{
0000000000000000000000000000000000000000;;					Name:  name,
0000000000000000000000000000000000000000;;					Value: value,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		env := EnvironmentVariable{
0000000000000000000000000000000000000000;;			Name:  name,
0000000000000000000000000000000000000000;;			Value: value,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*e = append(*e, env)
0000000000000000000000000000000000000000;;	}
