0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/uuid.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/uuid.go][vendor/github.com/appc/spec/schema/types/uuid.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/hex"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoEmptyUUID = errors.New("UUID cannot be empty")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UUID encodes an RFC4122-compliant UUID, marshaled to/from a string
0000000000000000000000000000000000000000;;	// TODO(jonboulle): vendor a package for this?
0000000000000000000000000000000000000000;;	// TODO(jonboulle): consider more flexibility in input string formats.
0000000000000000000000000000000000000000;;	// Right now, we only accept:
0000000000000000000000000000000000000000;;	//   "6733C088-A507-4694-AABF-EDBE4FC5266F"
0000000000000000000000000000000000000000;;	//   "6733C088A5074694AABFEDBE4FC5266F"
0000000000000000000000000000000000000000;;	type UUID [16]byte
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%x-%x-%x-%x-%x", u[0:4], u[4:6], u[6:8], u[8:10], u[10:16])
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID) Set(s string) error {
0000000000000000000000000000000000000000;;		nu, err := NewUUID(s)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			*u = *nu
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewUUID generates a new UUID from the given string. If the string does not
0000000000000000000000000000000000000000;;	// represent a valid UUID, nil and an error are returned.
0000000000000000000000000000000000000000;;	func NewUUID(s string) (*UUID, error) {
0000000000000000000000000000000000000000;;		s = strings.Replace(s, "-", "", -1)
0000000000000000000000000000000000000000;;		if len(s) != 32 {
0000000000000000000000000000000000000000;;			return nil, errors.New("bad UUID length != 32")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		dec, err := hex.DecodeString(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		var u UUID
0000000000000000000000000000000000000000;;		for i, b := range dec {
0000000000000000000000000000000000000000;;			u[i] = b
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &u, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) Empty() bool {
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(u, UUID{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u *UUID) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		uu, err := NewUUID(s)
0000000000000000000000000000000000000000;;		if uu.Empty() {
0000000000000000000000000000000000000000;;			return ErrNoEmptyUUID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			*u = *uu
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (u UUID) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if u.Empty() {
0000000000000000000000000000000000000000;;			return nil, ErrNoEmptyUUID
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(u.String())
0000000000000000000000000000000000000000;;	}
