0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/isolator_linux_specific.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/isolator_linux_specific.go][vendor/github.com/appc/spec/schema/types/isolator_linux_specific.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		LinuxCapabilitiesRetainSetName = "os/linux/capabilities-retain-set"
0000000000000000000000000000000000000000;;		LinuxCapabilitiesRevokeSetName = "os/linux/capabilities-remove-set"
0000000000000000000000000000000000000000;;		LinuxNoNewPrivilegesName       = "os/linux/no-new-privileges"
0000000000000000000000000000000000000000;;		LinuxSeccompRemoveSetName      = "os/linux/seccomp-remove-set"
0000000000000000000000000000000000000000;;		LinuxSeccompRetainSetName      = "os/linux/seccomp-retain-set"
0000000000000000000000000000000000000000;;		LinuxOOMScoreAdjName           = "os/linux/oom-score-adj"
0000000000000000000000000000000000000000;;		LinuxCPUSharesName             = "os/linux/cpu-shares"
0000000000000000000000000000000000000000;;		LinuxSELinuxContextName        = "os/linux/selinux-context"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var LinuxIsolatorNames = make(map[ACIdentifier]struct{})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		for name, con := range map[ACIdentifier]IsolatorValueConstructor{
0000000000000000000000000000000000000000;;			LinuxCapabilitiesRevokeSetName: func() IsolatorValue { return &LinuxCapabilitiesRevokeSet{} },
0000000000000000000000000000000000000000;;			LinuxCapabilitiesRetainSetName: func() IsolatorValue { return &LinuxCapabilitiesRetainSet{} },
0000000000000000000000000000000000000000;;			LinuxNoNewPrivilegesName:       func() IsolatorValue { v := LinuxNoNewPrivileges(false); return &v },
0000000000000000000000000000000000000000;;			LinuxOOMScoreAdjName:           func() IsolatorValue { v := LinuxOOMScoreAdj(0); return &v },
0000000000000000000000000000000000000000;;			LinuxCPUSharesName:             func() IsolatorValue { v := LinuxCPUShares(1024); return &v },
0000000000000000000000000000000000000000;;			LinuxSeccompRemoveSetName:      func() IsolatorValue { return &LinuxSeccompRemoveSet{} },
0000000000000000000000000000000000000000;;			LinuxSeccompRetainSetName:      func() IsolatorValue { return &LinuxSeccompRetainSet{} },
0000000000000000000000000000000000000000;;			LinuxSELinuxContextName:        func() IsolatorValue { return &LinuxSELinuxContext{} },
0000000000000000000000000000000000000000;;		} {
0000000000000000000000000000000000000000;;			AddIsolatorName(name, LinuxIsolatorNames)
0000000000000000000000000000000000000000;;			AddIsolatorValueConstructor(name, con)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxNoNewPrivileges bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxNoNewPrivileges) AssertValid() error {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(lucab): both need to be clarified in spec,
0000000000000000000000000000000000000000;;	// see https://github.com/appc/spec/issues/625
0000000000000000000000000000000000000000;;	func (l LinuxNoNewPrivileges) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (l LinuxNoNewPrivileges) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *LinuxNoNewPrivileges) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v bool
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*l = LinuxNoNewPrivileges(v)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AsIsolator interface {
0000000000000000000000000000000000000000;;		AsIsolator() (*Isolator, error)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxCapabilitiesSet interface {
0000000000000000000000000000000000000000;;		Set() []LinuxCapability
0000000000000000000000000000000000000000;;		AssertValid() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxCapability string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type linuxCapabilitiesSetValue struct {
0000000000000000000000000000000000000000;;		Set []LinuxCapability `json:"set"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type linuxCapabilitiesSetBase struct {
0000000000000000000000000000000000000000;;		val linuxCapabilitiesSetValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxCapabilitiesSetBase) AssertValid() error {
0000000000000000000000000000000000000000;;		if len(l.val.Set) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("set must be non-empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TODO(lucab): both need to be clarified in spec,
0000000000000000000000000000000000000000;;	// see https://github.com/appc/spec/issues/625
0000000000000000000000000000000000000000;;	func (l linuxCapabilitiesSetBase) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	func (l linuxCapabilitiesSetBase) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *linuxCapabilitiesSetBase) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v linuxCapabilitiesSetValue
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		l.val = v
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxCapabilitiesSetBase) Set() []LinuxCapability {
0000000000000000000000000000000000000000;;		return l.val.Set
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxCapabilitiesRetainSet struct {
0000000000000000000000000000000000000000;;		linuxCapabilitiesSetBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxCapabilitiesRetainSet(caps ...string) (*LinuxCapabilitiesRetainSet, error) {
0000000000000000000000000000000000000000;;		l := LinuxCapabilitiesRetainSet{
0000000000000000000000000000000000000000;;			linuxCapabilitiesSetBase{
0000000000000000000000000000000000000000;;				linuxCapabilitiesSetValue{
0000000000000000000000000000000000000000;;					make([]LinuxCapability, len(caps)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range caps {
0000000000000000000000000000000000000000;;			l.linuxCapabilitiesSetBase.val.Set[i] = LinuxCapability(c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCapabilitiesRetainSet) AsIsolator() (*Isolator, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.linuxCapabilitiesSetBase.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return &Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxCapabilitiesRetainSetName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxCapabilitiesRevokeSet struct {
0000000000000000000000000000000000000000;;		linuxCapabilitiesSetBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxCapabilitiesRevokeSet(caps ...string) (*LinuxCapabilitiesRevokeSet, error) {
0000000000000000000000000000000000000000;;		l := LinuxCapabilitiesRevokeSet{
0000000000000000000000000000000000000000;;			linuxCapabilitiesSetBase{
0000000000000000000000000000000000000000;;				linuxCapabilitiesSetValue{
0000000000000000000000000000000000000000;;					make([]LinuxCapability, len(caps)),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range caps {
0000000000000000000000000000000000000000;;			l.linuxCapabilitiesSetBase.val.Set[i] = LinuxCapability(c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCapabilitiesRevokeSet) AsIsolator() (*Isolator, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.linuxCapabilitiesSetBase.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return &Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxCapabilitiesRevokeSetName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSeccompSet interface {
0000000000000000000000000000000000000000;;		Set() []LinuxSeccompEntry
0000000000000000000000000000000000000000;;		Errno() LinuxSeccompErrno
0000000000000000000000000000000000000000;;		AssertValid() error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSeccompEntry string
0000000000000000000000000000000000000000;;	type LinuxSeccompErrno string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type linuxSeccompValue struct {
0000000000000000000000000000000000000000;;		Set   []LinuxSeccompEntry `json:"set"`
0000000000000000000000000000000000000000;;		Errno LinuxSeccompErrno   `json:"errno"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type linuxSeccompBase struct {
0000000000000000000000000000000000000000;;		val linuxSeccompValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxSeccompBase) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxSeccompBase) AssertValid() error {
0000000000000000000000000000000000000000;;		if len(l.val.Set) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("set must be non-empty")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.val.Errno == "" {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for _, c := range l.val.Errno {
0000000000000000000000000000000000000000;;			if !unicode.IsUpper(c) {
0000000000000000000000000000000000000000;;				return errors.New("errno must be an upper case string")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *linuxSeccompBase) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v linuxSeccompValue
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.val = v
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxSeccompBase) Set() []LinuxSeccompEntry {
0000000000000000000000000000000000000000;;		return l.val.Set
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l linuxSeccompBase) Errno() LinuxSeccompErrno {
0000000000000000000000000000000000000000;;		return l.val.Errno
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSeccompRetainSet struct {
0000000000000000000000000000000000000000;;		linuxSeccompBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSeccompRetainSet) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return []ACIdentifier{LinuxSeccompRemoveSetName}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxSeccompRetainSet(errno string, syscall ...string) (*LinuxSeccompRetainSet, error) {
0000000000000000000000000000000000000000;;		l := LinuxSeccompRetainSet{
0000000000000000000000000000000000000000;;			linuxSeccompBase{
0000000000000000000000000000000000000000;;				linuxSeccompValue{
0000000000000000000000000000000000000000;;					make([]LinuxSeccompEntry, len(syscall)),
0000000000000000000000000000000000000000;;					LinuxSeccompErrno(errno),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range syscall {
0000000000000000000000000000000000000000;;			l.linuxSeccompBase.val.Set[i] = LinuxSeccompEntry(c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSeccompRetainSet) AsIsolator() (*Isolator, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.linuxSeccompBase.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return &Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxSeccompRetainSetName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSeccompRemoveSet struct {
0000000000000000000000000000000000000000;;		linuxSeccompBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSeccompRemoveSet) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return []ACIdentifier{LinuxSeccompRetainSetName}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxSeccompRemoveSet(errno string, syscall ...string) (*LinuxSeccompRemoveSet, error) {
0000000000000000000000000000000000000000;;		l := LinuxSeccompRemoveSet{
0000000000000000000000000000000000000000;;			linuxSeccompBase{
0000000000000000000000000000000000000000;;				linuxSeccompValue{
0000000000000000000000000000000000000000;;					make([]LinuxSeccompEntry, len(syscall)),
0000000000000000000000000000000000000000;;					LinuxSeccompErrno(errno),
0000000000000000000000000000000000000000;;				},
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for i, c := range syscall {
0000000000000000000000000000000000000000;;			l.linuxSeccompBase.val.Set[i] = LinuxSeccompEntry(c)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSeccompRemoveSet) AsIsolator() (*Isolator, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.linuxSeccompBase.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return &Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxSeccompRemoveSetName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LinuxCPUShares assigns the CPU time share weight to the processes executed.
0000000000000000000000000000000000000000;;	// See https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#CPUShares=weight,
0000000000000000000000000000000000000000;;	// https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt
0000000000000000000000000000000000000000;;	type LinuxCPUShares int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxCPUShares(val int) (*LinuxCPUShares, error) {
0000000000000000000000000000000000000000;;		l := LinuxCPUShares(val)
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCPUShares) AssertValid() error {
0000000000000000000000000000000000000000;;		if l < 2 || l > 262144 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%s must be between 2 and 262144, got %d", LinuxCPUSharesName, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCPUShares) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCPUShares) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *LinuxCPUShares) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v int
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*l = LinuxCPUShares(v)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxCPUShares) AsIsolator() Isolator {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxCPUSharesName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// LinuxOOMScoreAdj is equivalent to /proc/[pid]/oom_score_adj
0000000000000000000000000000000000000000;;	type LinuxOOMScoreAdj int // -1000 to 1000
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxOOMScoreAdj(val int) (*LinuxOOMScoreAdj, error) {
0000000000000000000000000000000000000000;;		l := LinuxOOMScoreAdj(val)
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxOOMScoreAdj) AssertValid() error {
0000000000000000000000000000000000000000;;		if l < -1000 || l > 1000 {
0000000000000000000000000000000000000000;;			return fmt.Errorf("%s must be between -1000 and 1000, got %d", LinuxOOMScoreAdjName, l)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxOOMScoreAdj) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxOOMScoreAdj) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *LinuxOOMScoreAdj) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v int
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		*l = LinuxOOMScoreAdj(v)
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxOOMScoreAdj) AsIsolator() Isolator {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxOOMScoreAdjName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSELinuxUser string
0000000000000000000000000000000000000000;;	type LinuxSELinuxRole string
0000000000000000000000000000000000000000;;	type LinuxSELinuxType string
0000000000000000000000000000000000000000;;	type LinuxSELinuxLevel string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type linuxSELinuxValue struct {
0000000000000000000000000000000000000000;;		User  LinuxSELinuxUser  `json:"user"`
0000000000000000000000000000000000000000;;		Role  LinuxSELinuxRole  `json:"role"`
0000000000000000000000000000000000000000;;		Type  LinuxSELinuxType  `json:"type"`
0000000000000000000000000000000000000000;;		Level LinuxSELinuxLevel `json:"level"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LinuxSELinuxContext struct {
0000000000000000000000000000000000000000;;		val linuxSELinuxValue
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) AssertValid() error {
0000000000000000000000000000000000000000;;		if l.val.User == "" || strings.Contains(string(l.val.User), ":") {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid user value %q", l.val.User)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.val.Role == "" || strings.Contains(string(l.val.Role), ":") {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid role value %q", l.val.Role)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.val.Type == "" || strings.Contains(string(l.val.Type), ":") {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid type value %q", l.val.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if l.val.Level == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("invalid level value %q", l.val.Level)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l *LinuxSELinuxContext) UnmarshalJSON(b []byte) error {
0000000000000000000000000000000000000000;;		var v linuxSELinuxValue
0000000000000000000000000000000000000000;;		err := json.Unmarshal(b, &v)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		l.val = v
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) User() LinuxSELinuxUser {
0000000000000000000000000000000000000000;;		return l.val.User
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) Role() LinuxSELinuxRole {
0000000000000000000000000000000000000000;;		return l.val.Role
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) Type() LinuxSELinuxType {
0000000000000000000000000000000000000000;;		return l.val.Type
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) Level() LinuxSELinuxLevel {
0000000000000000000000000000000000000000;;		return l.val.Level
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) multipleAllowed() bool {
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) Conflicts() []ACIdentifier {
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewLinuxSELinuxContext(selinuxUser, selinuxRole, selinuxType, selinuxLevel string) (*LinuxSELinuxContext, error) {
0000000000000000000000000000000000000000;;		l := LinuxSELinuxContext{
0000000000000000000000000000000000000000;;			linuxSELinuxValue{
0000000000000000000000000000000000000000;;				LinuxSELinuxUser(selinuxUser),
0000000000000000000000000000000000000000;;				LinuxSELinuxRole(selinuxRole),
0000000000000000000000000000000000000000;;				LinuxSELinuxType(selinuxType),
0000000000000000000000000000000000000000;;				LinuxSELinuxLevel(selinuxLevel),
0000000000000000000000000000000000000000;;			},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := l.AssertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &l, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l LinuxSELinuxContext) AsIsolator() (*Isolator, error) {
0000000000000000000000000000000000000000;;		b, err := json.Marshal(l.val)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		rm := json.RawMessage(b)
0000000000000000000000000000000000000000;;		return &Isolator{
0000000000000000000000000000000000000000;;			Name:     LinuxSELinuxContextName,
0000000000000000000000000000000000000000;;			ValueRaw: &rm,
0000000000000000000000000000000000000000;;			value:    &l,
0000000000000000000000000000000000000000;;		}, nil
0000000000000000000000000000000000000000;;	}
