0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/event_handler.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/event_handler.go][vendor/github.com/appc/spec/schema/types/event_handler.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventHandler struct {
0000000000000000000000000000000000000000;;		Name string `json:"name"`
0000000000000000000000000000000000000000;;		Exec Exec   `json:"exec"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type eventHandler EventHandler
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e EventHandler) assertValid() error {
0000000000000000000000000000000000000000;;		s := e.Name
0000000000000000000000000000000000000000;;		switch s {
0000000000000000000000000000000000000000;;		case "pre-start", "post-stop":
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;			return errors.New(`eventHandler "name" cannot be empty`)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf(`bad eventHandler "name": %q`, s)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e EventHandler) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := e.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(eventHandler(e))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *EventHandler) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var je eventHandler
0000000000000000000000000000000000000000;;		err := json.Unmarshal(data, &je)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		ne := EventHandler(je)
0000000000000000000000000000000000000000;;		if err := ne.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*e = ne
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
