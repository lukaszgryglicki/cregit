0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/annotations.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/annotations.go][vendor/github.com/appc/spec/schema/types/annotations.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Annotations []Annotation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type annotations Annotations
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Annotation struct {
0000000000000000000000000000000000000000;;		Name  ACIdentifier `json:"name"`
0000000000000000000000000000000000000000;;		Value string       `json:"value"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a Annotations) assertValid() error {
0000000000000000000000000000000000000000;;		seen := map[ACIdentifier]string{}
0000000000000000000000000000000000000000;;		for _, anno := range a {
0000000000000000000000000000000000000000;;			_, ok := seen[anno.Name]
0000000000000000000000000000000000000000;;			if ok {
0000000000000000000000000000000000000000;;				return fmt.Errorf(`duplicate annotations of name %q`, anno.Name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			seen[anno.Name] = anno.Value
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if c, ok := seen["created"]; ok {
0000000000000000000000000000000000000000;;			if _, err := NewDate(c); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if h, ok := seen["homepage"]; ok {
0000000000000000000000000000000000000000;;			if _, err := NewURL(h); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if d, ok := seen["documentation"]; ok {
0000000000000000000000000000000000000000;;			if _, err := NewURL(d); err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a Annotations) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := a.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(annotations(a))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *Annotations) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var ja annotations
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &ja); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		na := Annotations(ja)
0000000000000000000000000000000000000000;;		if err := na.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a = na
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retrieve the value of an annotation by the given name from Annotations, if
0000000000000000000000000000000000000000;;	// it exists.
0000000000000000000000000000000000000000;;	func (a Annotations) Get(name string) (val string, ok bool) {
0000000000000000000000000000000000000000;;		for _, anno := range a {
0000000000000000000000000000000000000000;;			if anno.Name.String() == name {
0000000000000000000000000000000000000000;;				return anno.Value, true
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "", false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Set sets the value of an annotation by the given name, overwriting if one already exists.
0000000000000000000000000000000000000000;;	func (a *Annotations) Set(name ACIdentifier, value string) {
0000000000000000000000000000000000000000;;		for i, anno := range *a {
0000000000000000000000000000000000000000;;			if anno.Name.Equals(name) {
0000000000000000000000000000000000000000;;				(*a)[i] = Annotation{
0000000000000000000000000000000000000000;;					Name:  name,
0000000000000000000000000000000000000000;;					Value: value,
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		anno := Annotation{
0000000000000000000000000000000000000000;;			Name:  name,
0000000000000000000000000000000000000000;;			Value: value,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a = append(*a, anno)
0000000000000000000000000000000000000000;;	}
