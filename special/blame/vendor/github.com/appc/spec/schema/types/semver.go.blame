0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/semver.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/semver.go][vendor/github.com/appc/spec/schema/types/semver.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/coreos/go-semver/semver"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrNoZeroSemVer = ACVersionError("SemVer cannot be zero")
0000000000000000000000000000000000000000;;		ErrBadSemVer    = ACVersionError("SemVer is bad")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// SemVer implements the Unmarshaler interface to define a field that must be
0000000000000000000000000000000000000000;;	// a semantic version string
0000000000000000000000000000000000000000;;	// TODO(jonboulle): extend upstream instead of wrapping?
0000000000000000000000000000000000000000;;	type SemVer semver.Version
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewSemVer generates a new SemVer from a string. If the given string does
0000000000000000000000000000000000000000;;	// not represent a valid SemVer, nil and an error are returned.
0000000000000000000000000000000000000000;;	func NewSemVer(s string) (*SemVer, error) {
0000000000000000000000000000000000000000;;		nsv, err := semver.NewVersion(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, ErrBadSemVer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v := SemVer(*nsv)
0000000000000000000000000000000000000000;;		if v.Empty() {
0000000000000000000000000000000000000000;;			return nil, ErrNoZeroSemVer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &v, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sv SemVer) LessThanMajor(versionB SemVer) bool {
0000000000000000000000000000000000000000;;		majorA := semver.Version(sv).Major
0000000000000000000000000000000000000000;;		majorB := semver.Version(versionB).Major
0000000000000000000000000000000000000000;;		if majorA < majorB {
0000000000000000000000000000000000000000;;			return true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return false
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sv SemVer) LessThanExact(versionB SemVer) bool {
0000000000000000000000000000000000000000;;		vA := semver.Version(sv)
0000000000000000000000000000000000000000;;		vB := semver.Version(versionB)
0000000000000000000000000000000000000000;;		return vA.LessThan(vB)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sv SemVer) String() string {
0000000000000000000000000000000000000000;;		s := semver.Version(sv)
0000000000000000000000000000000000000000;;		return s.String()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (sv SemVer) Empty() bool {
0000000000000000000000000000000000000000;;		return semver.Version(sv) == semver.Version{}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UnmarshalJSON implements the json.Unmarshaler interface
0000000000000000000000000000000000000000;;	func (sv *SemVer) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		v, err := NewSemVer(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*sv = *v
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MarshalJSON implements the json.Marshaler interface
0000000000000000000000000000000000000000;;	func (sv SemVer) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if sv.Empty() {
0000000000000000000000000000000000000000;;			return nil, ErrNoZeroSemVer
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(sv.String())
0000000000000000000000000000000000000000;;	}
