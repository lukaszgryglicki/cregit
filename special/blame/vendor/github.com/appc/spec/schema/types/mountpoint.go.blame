0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/mountpoint.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/mountpoint.go][vendor/github.com/appc/spec/schema/types/mountpoint.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/appc/spec/schema/common"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MountPoint is the application-side manifestation of a Volume.
0000000000000000000000000000000000000000;;	type MountPoint struct {
0000000000000000000000000000000000000000;;		Name     ACName `json:"name"`
0000000000000000000000000000000000000000;;		Path     string `json:"path"`
0000000000000000000000000000000000000000;;		ReadOnly bool   `json:"readOnly,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (mount MountPoint) assertValid() error {
0000000000000000000000000000000000000000;;		if mount.Name.Empty() {
0000000000000000000000000000000000000000;;			return errors.New("name must be set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if len(mount.Path) == 0 {
0000000000000000000000000000000000000000;;			return errors.New("path must be set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MountPointFromString takes a command line mountpoint parameter and returns a mountpoint
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// It is useful for actool patch-manifest --mounts
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example mountpoint parameters:
0000000000000000000000000000000000000000;;	// 	database,path=/tmp,readOnly=true
0000000000000000000000000000000000000000;;	func MountPointFromString(mp string) (*MountPoint, error) {
0000000000000000000000000000000000000000;;		var mount MountPoint
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		mp = "name=" + mp
0000000000000000000000000000000000000000;;		mpQuery, err := common.MakeQueryString(mp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, err := url.ParseQuery(mpQuery)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		for key, val := range v {
0000000000000000000000000000000000000000;;			if len(val) > 1 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("label %s with multiple values %q", key, val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch key {
0000000000000000000000000000000000000000;;			case "name":
0000000000000000000000000000000000000000;;				acn, err := NewACName(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mount.Name = *acn
0000000000000000000000000000000000000000;;			case "path":
0000000000000000000000000000000000000000;;				mount.Path = val[0]
0000000000000000000000000000000000000000;;			case "readOnly":
0000000000000000000000000000000000000000;;				ro, err := strconv.ParseBool(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				mount.ReadOnly = ro
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unknown mountpoint parameter %q", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		err = mount.assertValid()
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &mount, nil
0000000000000000000000000000000000000000;;	}
