0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/app.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/app.go][vendor/github.com/appc/spec/schema/types/app.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type App struct {
0000000000000000000000000000000000000000;;		Exec              Exec            `json:"exec"`
0000000000000000000000000000000000000000;;		EventHandlers     []EventHandler  `json:"eventHandlers,omitempty"`
0000000000000000000000000000000000000000;;		User              string          `json:"user"`
0000000000000000000000000000000000000000;;		Group             string          `json:"group"`
0000000000000000000000000000000000000000;;		SupplementaryGIDs []int           `json:"supplementaryGIDs,omitempty"`
0000000000000000000000000000000000000000;;		WorkingDirectory  string          `json:"workingDirectory,omitempty"`
0000000000000000000000000000000000000000;;		Environment       Environment     `json:"environment,omitempty"`
0000000000000000000000000000000000000000;;		MountPoints       []MountPoint    `json:"mountPoints,omitempty"`
0000000000000000000000000000000000000000;;		Ports             []Port          `json:"ports,omitempty"`
0000000000000000000000000000000000000000;;		Isolators         Isolators       `json:"isolators,omitempty"`
0000000000000000000000000000000000000000;;		UserAnnotations   UserAnnotations `json:"userAnnotations,omitempty"`
0000000000000000000000000000000000000000;;		UserLabels        UserLabels      `json:"userLabels,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// app is a model to facilitate extra validation during the
0000000000000000000000000000000000000000;;	// unmarshalling of the App
0000000000000000000000000000000000000000;;	type app App
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *App) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		ja := app(*a)
0000000000000000000000000000000000000000;;		err := json.Unmarshal(data, &ja)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		na := App(ja)
0000000000000000000000000000000000000000;;		if err := na.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if na.Environment == nil {
0000000000000000000000000000000000000000;;			na.Environment = make(Environment, 0)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*a = na
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a App) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := a.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(app(a))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *App) assertValid() error {
0000000000000000000000000000000000000000;;		if err := a.Exec.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a.User == "" {
0000000000000000000000000000000000000000;;			return errors.New(`user is required`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if a.Group == "" {
0000000000000000000000000000000000000000;;			return errors.New(`group is required`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if !path.IsAbs(a.WorkingDirectory) && a.WorkingDirectory != "" {
0000000000000000000000000000000000000000;;			return errors.New("workingDirectory must be an absolute path")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		eh := make(map[string]bool)
0000000000000000000000000000000000000000;;		for _, e := range a.EventHandlers {
0000000000000000000000000000000000000000;;			name := e.Name
0000000000000000000000000000000000000000;;			if eh[name] {
0000000000000000000000000000000000000000;;				return fmt.Errorf("Only one eventHandler of name %q allowed", name)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			eh[name] = true
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := a.Environment.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := a.Isolators.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
