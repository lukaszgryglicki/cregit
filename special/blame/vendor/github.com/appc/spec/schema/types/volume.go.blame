0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/volume.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/volume.go][vendor/github.com/appc/spec/schema/types/volume.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"path/filepath"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/appc/spec/schema/common"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		emptyVolumeDefaultMode = "0755"
0000000000000000000000000000000000000000;;		emptyVolumeDefaultUID  = 0
0000000000000000000000000000000000000000;;		emptyVolumeDefaultGID  = 0
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Volume encapsulates a volume which should be mounted into the filesystem
0000000000000000000000000000000000000000;;	// of all apps in a PodManifest
0000000000000000000000000000000000000000;;	type Volume struct {
0000000000000000000000000000000000000000;;		Name ACName `json:"name"`
0000000000000000000000000000000000000000;;		Kind string `json:"kind"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// currently used only by "host"
0000000000000000000000000000000000000000;;		// TODO(jonboulle): factor out?
0000000000000000000000000000000000000000;;		Source    string `json:"source,omitempty"`
0000000000000000000000000000000000000000;;		ReadOnly  *bool  `json:"readOnly,omitempty"`
0000000000000000000000000000000000000000;;		Recursive *bool  `json:"recursive,omitempty"`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// currently used only by "empty"
0000000000000000000000000000000000000000;;		Mode *string `json:"mode,omitempty"`
0000000000000000000000000000000000000000;;		UID  *int    `json:"uid,omitempty"`
0000000000000000000000000000000000000000;;		GID  *int    `json:"gid,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type volume Volume
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Volume) assertValid() error {
0000000000000000000000000000000000000000;;		if v.Name.Empty() {
0000000000000000000000000000000000000000;;			return errors.New("name must be set")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch v.Kind {
0000000000000000000000000000000000000000;;		case "empty":
0000000000000000000000000000000000000000;;			if v.Source != "" {
0000000000000000000000000000000000000000;;				return errors.New("source for empty volume must be empty")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.Mode == nil {
0000000000000000000000000000000000000000;;				return errors.New("mode for empty volume must be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.UID == nil {
0000000000000000000000000000000000000000;;				return errors.New("uid for empty volume must be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.GID == nil {
0000000000000000000000000000000000000000;;				return errors.New("gid for empty volume must be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		case "host":
0000000000000000000000000000000000000000;;			if v.Source == "" {
0000000000000000000000000000000000000000;;				return errors.New("source for host volume cannot be empty")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.Mode != nil {
0000000000000000000000000000000000000000;;				return errors.New("mode for host volume cannot be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.UID != nil {
0000000000000000000000000000000000000000;;				return errors.New("uid for host volume cannot be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if v.GID != nil {
0000000000000000000000000000000000000000;;				return errors.New("gid for host volume cannot be set")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if !filepath.IsAbs(v.Source) {
0000000000000000000000000000000000000000;;				return errors.New("source for host volume must be absolute path")
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return errors.New(`unrecognized volume kind: should be one of "empty", "host"`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v *Volume) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var vv volume
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &vv); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nv := Volume(vv)
0000000000000000000000000000000000000000;;		maybeSetDefaults(&nv)
0000000000000000000000000000000000000000;;		if err := nv.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*v = nv
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Volume) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := v.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(volume(v))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v Volume) String() string {
0000000000000000000000000000000000000000;;		s := []string{
0000000000000000000000000000000000000000;;			v.Name.String(),
0000000000000000000000000000000000000000;;			",kind=",
0000000000000000000000000000000000000000;;			v.Kind,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.Source != "" {
0000000000000000000000000000000000000000;;			s = append(s, ",source=")
0000000000000000000000000000000000000000;;			s = append(s, v.Source)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.ReadOnly != nil {
0000000000000000000000000000000000000000;;			s = append(s, ",readOnly=")
0000000000000000000000000000000000000000;;			s = append(s, strconv.FormatBool(*v.ReadOnly))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if v.Recursive != nil {
0000000000000000000000000000000000000000;;			s = append(s, ",recursive=")
0000000000000000000000000000000000000000;;			s = append(s, strconv.FormatBool(*v.Recursive))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		switch v.Kind {
0000000000000000000000000000000000000000;;		case "empty":
0000000000000000000000000000000000000000;;			if *v.Mode != emptyVolumeDefaultMode {
0000000000000000000000000000000000000000;;				s = append(s, ",mode=")
0000000000000000000000000000000000000000;;				s = append(s, *v.Mode)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if *v.UID != emptyVolumeDefaultUID {
0000000000000000000000000000000000000000;;				s = append(s, ",uid=")
0000000000000000000000000000000000000000;;				s = append(s, strconv.Itoa(*v.UID))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if *v.GID != emptyVolumeDefaultGID {
0000000000000000000000000000000000000000;;				s = append(s, ",gid=")
0000000000000000000000000000000000000000;;				s = append(s, strconv.Itoa(*v.GID))
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(s, "")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// VolumeFromString takes a command line volume parameter and returns a volume
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Example volume parameters:
0000000000000000000000000000000000000000;;	// 	database,kind=host,source=/tmp,readOnly=true,recursive=true
0000000000000000000000000000000000000000;;	func VolumeFromString(vp string) (*Volume, error) {
0000000000000000000000000000000000000000;;		vp = "name=" + vp
0000000000000000000000000000000000000000;;		vpQuery, err := common.MakeQueryString(vp)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		v, err := url.ParseQuery(vpQuery)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return VolumeFromParams(v)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func VolumeFromParams(params map[string][]string) (*Volume, error) {
0000000000000000000000000000000000000000;;		var vol Volume
0000000000000000000000000000000000000000;;		for key, val := range params {
0000000000000000000000000000000000000000;;			val := val
0000000000000000000000000000000000000000;;			if len(val) > 1 {
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("label %s with multiple values %q", key, val)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			switch key {
0000000000000000000000000000000000000000;;			case "name":
0000000000000000000000000000000000000000;;				acn, err := NewACName(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				vol.Name = *acn
0000000000000000000000000000000000000000;;			case "kind":
0000000000000000000000000000000000000000;;				vol.Kind = val[0]
0000000000000000000000000000000000000000;;			case "source":
0000000000000000000000000000000000000000;;				vol.Source = val[0]
0000000000000000000000000000000000000000;;			case "readOnly":
0000000000000000000000000000000000000000;;				ro, err := strconv.ParseBool(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				vol.ReadOnly = &ro
0000000000000000000000000000000000000000;;			case "recursive":
0000000000000000000000000000000000000000;;				rec, err := strconv.ParseBool(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				vol.Recursive = &rec
0000000000000000000000000000000000000000;;			case "mode":
0000000000000000000000000000000000000000;;				vol.Mode = &val[0]
0000000000000000000000000000000000000000;;			case "uid":
0000000000000000000000000000000000000000;;				u, err := strconv.Atoi(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				vol.UID = &u
0000000000000000000000000000000000000000;;			case "gid":
0000000000000000000000000000000000000000;;				g, err := strconv.Atoi(val[0])
0000000000000000000000000000000000000000;;				if err != nil {
0000000000000000000000000000000000000000;;					return nil, err
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;				vol.GID = &g
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return nil, fmt.Errorf("unknown volume parameter %q", key)
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		maybeSetDefaults(&vol)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := vol.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &vol, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// maybeSetDefaults sets the correct default values for certain fields on a
0000000000000000000000000000000000000000;;	// Volume if they are not already been set. These fields are not
0000000000000000000000000000000000000000;;	// pre-populated on all Volumes as the Volume type is polymorphic.
0000000000000000000000000000000000000000;;	func maybeSetDefaults(vol *Volume) {
0000000000000000000000000000000000000000;;		if vol.Kind == "empty" {
0000000000000000000000000000000000000000;;			if vol.Mode == nil {
0000000000000000000000000000000000000000;;				m := emptyVolumeDefaultMode
0000000000000000000000000000000000000000;;				vol.Mode = &m
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if vol.UID == nil {
0000000000000000000000000000000000000000;;				u := emptyVolumeDefaultUID
0000000000000000000000000000000000000000;;				vol.UID = &u
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			if vol.GID == nil {
0000000000000000000000000000000000000000;;				g := emptyVolumeDefaultGID
0000000000000000000000000000000000000000;;				vol.GID = &g
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
