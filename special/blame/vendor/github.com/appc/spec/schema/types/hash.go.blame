0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/hash.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/hash.go][vendor/github.com/appc/spec/schema/types/hash.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"crypto/sha512"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		maxHashSize = (sha512.Size / 2) + len("sha512-")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Hash encodes a hash specified in a string of the form:
0000000000000000000000000000000000000000;;	//    "<type>-<value>"
0000000000000000000000000000000000000000;;	// for example
0000000000000000000000000000000000000000;;	//    "sha512-06c733b1838136838e6d2d3e8fa5aea4c7905e92[...]"
0000000000000000000000000000000000000000;;	// Valid types are currently:
0000000000000000000000000000000000000000;;	//  * sha512
0000000000000000000000000000000000000000;;	type Hash struct {
0000000000000000000000000000000000000000;;		typ string
0000000000000000000000000000000000000000;;		Val string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHash(s string) (*Hash, error) {
0000000000000000000000000000000000000000;;		elems := strings.Split(s, "-")
0000000000000000000000000000000000000000;;		if len(elems) != 2 {
0000000000000000000000000000000000000000;;			return nil, errors.New("badly formatted hash string")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nh := Hash{
0000000000000000000000000000000000000000;;			typ: elems[0],
0000000000000000000000000000000000000000;;			Val: elems[1],
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if err := nh.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return &nh, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hash) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s-%s", h.typ, h.Val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *Hash) Set(s string) error {
0000000000000000000000000000000000000000;;		nh, err := NewHash(s)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			*h = *nh
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hash) Empty() bool {
0000000000000000000000000000000000000000;;		return reflect.DeepEqual(h, Hash{})
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hash) assertValid() error {
0000000000000000000000000000000000000000;;		switch h.typ {
0000000000000000000000000000000000000000;;		case "sha512":
0000000000000000000000000000000000000000;;		case "":
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected empty hash type")
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return fmt.Errorf("unrecognized hash type: %v", h.typ)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if h.Val == "" {
0000000000000000000000000000000000000000;;			return fmt.Errorf("unexpected empty hash value")
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h *Hash) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nh, err := NewHash(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*h = *nh
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h Hash) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := h.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(h.String())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHashSHA512(b []byte) *Hash {
0000000000000000000000000000000000000000;;		h := sha512.New()
0000000000000000000000000000000000000000;;		h.Write(b)
0000000000000000000000000000000000000000;;		nh, _ := NewHash(fmt.Sprintf("sha512-%x", h.Sum(nil)))
0000000000000000000000000000000000000000;;		return nh
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ShortHash(hash string) string {
0000000000000000000000000000000000000000;;		if len(hash) > maxHashSize {
0000000000000000000000000000000000000000;;			return hash[:maxHashSize]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return hash
0000000000000000000000000000000000000000;;	}
