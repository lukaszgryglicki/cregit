0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/dependencies.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/dependencies.go][vendor/github.com/appc/spec/schema/types/dependencies.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dependencies []Dependency
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Dependency struct {
0000000000000000000000000000000000000000;;		ImageName ACIdentifier `json:"imageName"`
0000000000000000000000000000000000000000;;		ImageID   *Hash        `json:"imageID,omitempty"`
0000000000000000000000000000000000000000;;		Labels    Labels       `json:"labels,omitempty"`
0000000000000000000000000000000000000000;;		Size      uint         `json:"size,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type dependency Dependency
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Dependency) assertValid() error {
0000000000000000000000000000000000000000;;		if len(d.ImageName) < 1 {
0000000000000000000000000000000000000000;;			return errors.New(`imageName cannot be empty`)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Dependency) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		if err := d.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return json.Marshal(dependency(d))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *Dependency) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var jd dependency
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &jd); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nd := Dependency(jd)
0000000000000000000000000000000000000000;;		if err := nd.assertValid(); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*d = nd
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
