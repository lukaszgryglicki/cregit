0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
8d973c48ce204bda083f5a578278a9cd3743f879;Godeps/_workspace/src/github.com/appc/spec/schema/types/date.go[Godeps/_workspace/src/github.com/appc/spec/schema/types/date.go][vendor/github.com/appc/spec/schema/types/date.go];	
0000000000000000000000000000000000000000;;	package types
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Date wraps time.Time to marshal/unmarshal to/from JSON strings in strict
0000000000000000000000000000000000000000;;	// accordance with RFC3339
0000000000000000000000000000000000000000;;	// TODO(jonboulle): golang's implementation seems slightly buggy here;
0000000000000000000000000000000000000000;;	// according to http://tools.ietf.org/html/rfc3339#section-5.6 , applications
0000000000000000000000000000000000000000;;	// may choose to separate the date and time with a space instead of a T
0000000000000000000000000000000000000000;;	// character (for example, `date --rfc-3339` on GNU coreutils) - but this is
0000000000000000000000000000000000000000;;	// considered an error by go's parser. File a bug?
0000000000000000000000000000000000000000;;	type Date time.Time
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDate(s string) (*Date, error) {
0000000000000000000000000000000000000000;;		t, err := time.Parse(time.RFC3339, s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("bad Date: %v", err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		d := Date(t)
0000000000000000000000000000000000000000;;		return &d, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Date) String() string {
0000000000000000000000000000000000000000;;		return time.Time(d).Format(time.RFC3339)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *Date) UnmarshalJSON(data []byte) error {
0000000000000000000000000000000000000000;;		var s string
0000000000000000000000000000000000000000;;		if err := json.Unmarshal(data, &s); err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		nd, err := NewDate(s)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		*d = *nd
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Date) MarshalJSON() ([]byte, error) {
0000000000000000000000000000000000000000;;		return json.Marshal(d.String())
0000000000000000000000000000000000000000;;	}
