0000000000000000000000000000000000000000;;	// Copyright 2015 The appc Authors
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	// you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	// You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	//     http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	// distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	// See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	// limitations under the License.
e1c97c6d3adc056ee4113e77832c622bbb62d66e;Godeps/_workspace/src/github.com/appc/spec/schema/common/common.go[Godeps/_workspace/src/github.com/appc/spec/schema/common/common.go][vendor/github.com/appc/spec/schema/common/common.go];	
0000000000000000000000000000000000000000;;	package common
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeQueryString takes a comma-separated LABEL=VALUE string and returns an
0000000000000000000000000000000000000000;;	// "&"-separated string with URL escaped values.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Examples:
0000000000000000000000000000000000000000;;	// 	version=1.0.0,label=v1+v2 -> version=1.0.0&label=v1%2Bv2
0000000000000000000000000000000000000000;;	// 	name=db,source=/tmp$1 -> name=db&source=%2Ftmp%241
0000000000000000000000000000000000000000;;	func MakeQueryString(app string) (string, error) {
0000000000000000000000000000000000000000;;		parts := strings.Split(app, ",")
0000000000000000000000000000000000000000;;		escapedParts := make([]string, len(parts))
0000000000000000000000000000000000000000;;		for i, s := range parts {
0000000000000000000000000000000000000000;;			p := strings.SplitN(s, "=", 2)
0000000000000000000000000000000000000000;;			if len(p) != 2 {
0000000000000000000000000000000000000000;;				return "", fmt.Errorf("malformed string %q - has a label without a value: %s", app, p[0])
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;			escapedParts[i] = fmt.Sprintf("%s=%s", p[0], url.QueryEscape(p[1]))
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return strings.Join(escapedParts, "&"), nil
0000000000000000000000000000000000000000;;	}
