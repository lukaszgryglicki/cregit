0000000000000000000000000000000000000000;;	// Position support for go-toml
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	package toml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Position of a document element within a TOML document.
0000000000000000000000000000000000000000;;	//
0000000000000000000000000000000000000000;;	// Line and Col are both 1-indexed positions for the element's line number and
0000000000000000000000000000000000000000;;	// column number, respectively.  Values of zero or less will cause Invalid(),
0000000000000000000000000000000000000000;;	// to return true.
0000000000000000000000000000000000000000;;	type Position struct {
0000000000000000000000000000000000000000;;		Line int // line within the document
0000000000000000000000000000000000000000;;		Col  int // column within the line
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String representation of the position.
0000000000000000000000000000000000000000;;	// Displays 1-indexed line and column numbers.
0000000000000000000000000000000000000000;;	func (p Position) String() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("(%d, %d)", p.Line, p.Col)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Invalid returns whether or not the position is valid (i.e. with negative or
0000000000000000000000000000000000000000;;	// null values)
0000000000000000000000000000000000000000;;	func (p Position) Invalid() bool {
0000000000000000000000000000000000000000;;		return p.Line <= 0 || p.Col <= 0
0000000000000000000000000000000000000000;;	}
