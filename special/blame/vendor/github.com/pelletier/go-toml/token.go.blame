0000000000000000000000000000000000000000;;	package toml
1ff933fb12f53e8c83a97bf4a48f852f030855aa;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;		"unicode"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Define tokens
0000000000000000000000000000000000000000;;	type tokenType int
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		eof = -(iota + 1)
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	const (
0000000000000000000000000000000000000000;;		tokenError tokenType = iota
0000000000000000000000000000000000000000;;		tokenEOF
0000000000000000000000000000000000000000;;		tokenComment
0000000000000000000000000000000000000000;;		tokenKey
0000000000000000000000000000000000000000;;		tokenString
0000000000000000000000000000000000000000;;		tokenInteger
0000000000000000000000000000000000000000;;		tokenTrue
0000000000000000000000000000000000000000;;		tokenFalse
0000000000000000000000000000000000000000;;		tokenFloat
0000000000000000000000000000000000000000;;		tokenEqual
0000000000000000000000000000000000000000;;		tokenLeftBracket
0000000000000000000000000000000000000000;;		tokenRightBracket
0000000000000000000000000000000000000000;;		tokenLeftCurlyBrace
0000000000000000000000000000000000000000;;		tokenRightCurlyBrace
0000000000000000000000000000000000000000;;		tokenLeftParen
0000000000000000000000000000000000000000;;		tokenRightParen
0000000000000000000000000000000000000000;;		tokenDoubleLeftBracket
0000000000000000000000000000000000000000;;		tokenDoubleRightBracket
0000000000000000000000000000000000000000;;		tokenDate
0000000000000000000000000000000000000000;;		tokenKeyGroup
0000000000000000000000000000000000000000;;		tokenKeyGroupArray
0000000000000000000000000000000000000000;;		tokenComma
0000000000000000000000000000000000000000;;		tokenColon
0000000000000000000000000000000000000000;;		tokenDollar
0000000000000000000000000000000000000000;;		tokenStar
0000000000000000000000000000000000000000;;		tokenQuestion
0000000000000000000000000000000000000000;;		tokenDot
0000000000000000000000000000000000000000;;		tokenDotDot
0000000000000000000000000000000000000000;;		tokenEOL
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var tokenTypeNames = []string{
0000000000000000000000000000000000000000;;		"Error",
0000000000000000000000000000000000000000;;		"EOF",
0000000000000000000000000000000000000000;;		"Comment",
0000000000000000000000000000000000000000;;		"Key",
0000000000000000000000000000000000000000;;		"String",
0000000000000000000000000000000000000000;;		"Integer",
0000000000000000000000000000000000000000;;		"True",
0000000000000000000000000000000000000000;;		"False",
0000000000000000000000000000000000000000;;		"Float",
0000000000000000000000000000000000000000;;		"=",
0000000000000000000000000000000000000000;;		"[",
0000000000000000000000000000000000000000;;		"]",
0000000000000000000000000000000000000000;;		"{",
0000000000000000000000000000000000000000;;		"}",
0000000000000000000000000000000000000000;;		"(",
0000000000000000000000000000000000000000;;		")",
0000000000000000000000000000000000000000;;		"]]",
0000000000000000000000000000000000000000;;		"[[",
0000000000000000000000000000000000000000;;		"Date",
0000000000000000000000000000000000000000;;		"KeyGroup",
0000000000000000000000000000000000000000;;		"KeyGroupArray",
0000000000000000000000000000000000000000;;		",",
0000000000000000000000000000000000000000;;		":",
0000000000000000000000000000000000000000;;		"$",
0000000000000000000000000000000000000000;;		"*",
0000000000000000000000000000000000000000;;		"?",
0000000000000000000000000000000000000000;;		".",
0000000000000000000000000000000000000000;;		"..",
0000000000000000000000000000000000000000;;		"EOL",
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type token struct {
0000000000000000000000000000000000000000;;		Position
0000000000000000000000000000000000000000;;		typ tokenType
0000000000000000000000000000000000000000;;		val string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (tt tokenType) String() string {
0000000000000000000000000000000000000000;;		idx := int(tt)
0000000000000000000000000000000000000000;;		if idx < len(tokenTypeNames) {
0000000000000000000000000000000000000000;;			return tokenTypeNames[idx]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return "Unknown"
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t token) Int() int {
0000000000000000000000000000000000000000;;		if result, err := strconv.Atoi(t.val); err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		} else {
0000000000000000000000000000000000000000;;			return result
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (t token) String() string {
0000000000000000000000000000000000000000;;		switch t.typ {
0000000000000000000000000000000000000000;;		case tokenEOF:
0000000000000000000000000000000000000000;;			return "EOF"
0000000000000000000000000000000000000000;;		case tokenError:
0000000000000000000000000000000000000000;;			return t.val
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%q", t.val)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isSpace(r rune) bool {
0000000000000000000000000000000000000000;;		return r == ' ' || r == '\t'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isAlphanumeric(r rune) bool {
0000000000000000000000000000000000000000;;		return unicode.IsLetter(r) || r == '_'
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isKeyChar(r rune) bool {
0000000000000000000000000000000000000000;;		// Keys start with the first character that isn't whitespace or [ and end
0000000000000000000000000000000000000000;;		// with the last non-whitespace character before the equals sign. Keys
0000000000000000000000000000000000000000;;		// cannot contain a # character."
0000000000000000000000000000000000000000;;		return !(r == '\r' || r == '\n' || r == eof || r == '=')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isKeyStartChar(r rune) bool {
0000000000000000000000000000000000000000;;		return !(isSpace(r) || r == '\r' || r == '\n' || r == eof || r == '[')
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isDigit(r rune) bool {
0000000000000000000000000000000000000000;;		return unicode.IsNumber(r)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func isHexDigit(r rune) bool {
0000000000000000000000000000000000000000;;		return isDigit(r) ||
0000000000000000000000000000000000000000;;			r == 'A' || r == 'B' || r == 'C' || r == 'D' || r == 'E' || r == 'F'
0000000000000000000000000000000000000000;;	}
