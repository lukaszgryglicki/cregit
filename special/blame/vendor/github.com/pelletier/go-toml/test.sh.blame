0000000000000000000000000000000000000000;;	#!/bin/bash
0000000000000000000000000000000000000000;;	# fail out of the script if anything here fails
0000000000000000000000000000000000000000;;	set -e
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# set the path to the present working directory
0000000000000000000000000000000000000000;;	export GOPATH=`pwd`
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	function git_clone() {
0000000000000000000000000000000000000000;;	  path=$1
0000000000000000000000000000000000000000;;	  branch=$2
0000000000000000000000000000000000000000;;	  version=$3
0000000000000000000000000000000000000000;;	  if [ ! -d "src/$path" ]; then
0000000000000000000000000000000000000000;;	    mkdir -p src/$path
0000000000000000000000000000000000000000;;	    git clone https://$path.git src/$path
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	  pushd src/$path
0000000000000000000000000000000000000000;;	  git checkout "$branch"
0000000000000000000000000000000000000000;;	  git reset --hard "$version"
0000000000000000000000000000000000000000;;	  popd
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	go get github.com/pelletier/go-buffruneio
0000000000000000000000000000000000000000;;	go get github.com/davecgh/go-spew/spew
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# get code for BurntSushi TOML validation
0000000000000000000000000000000000000000;;	# pinning all to 'HEAD' for version 0.3.x work (TODO: pin to commit hash when tests stabilize)
0000000000000000000000000000000000000000;;	git_clone github.com/BurntSushi/toml master HEAD
0000000000000000000000000000000000000000;;	git_clone github.com/BurntSushi/toml-test master HEAD #was: 0.2.0 HEAD
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# build the BurntSushi test application
0000000000000000000000000000000000000000;;	go build -o toml-test github.com/BurntSushi/toml-test
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# vendorize the current lib for testing
0000000000000000000000000000000000000000;;	# NOTE: this basically mocks an install without having to go back out to github for code
0000000000000000000000000000000000000000;;	mkdir -p src/github.com/pelletier/go-toml/cmd
0000000000000000000000000000000000000000;;	cp *.go *.toml src/github.com/pelletier/go-toml
0000000000000000000000000000000000000000;;	cp -R cmd/* src/github.com/pelletier/go-toml/cmd
0000000000000000000000000000000000000000;;	go build -o test_program_bin src/github.com/pelletier/go-toml/cmd/test_program.go
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Run basic unit tests
0000000000000000000000000000000000000000;;	go test github.com/pelletier/go-toml \
0000000000000000000000000000000000000000;;	        github.com/pelletier/go-toml/cmd/tomljson
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# run the entire BurntSushi test suite
0000000000000000000000000000000000000000;;	if [[ $# -eq 0 ]] ; then
0000000000000000000000000000000000000000;;	  echo "Running all BurntSushi tests"
0000000000000000000000000000000000000000;;	  ./toml-test ./test_program_bin | tee test_out
0000000000000000000000000000000000000000;;	else
0000000000000000000000000000000000000000;;	  # run a specific test
0000000000000000000000000000000000000000;;	  test=$1
0000000000000000000000000000000000000000;;	  test_path='src/github.com/BurntSushi/toml-test/tests'
0000000000000000000000000000000000000000;;	  valid_test="$test_path/valid/$test"
0000000000000000000000000000000000000000;;	  invalid_test="$test_path/invalid/$test"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [ -e "$valid_test.toml" ]; then
0000000000000000000000000000000000000000;;	    echo "Valid Test TOML for $test:"
0000000000000000000000000000000000000000;;	    echo "===="
0000000000000000000000000000000000000000;;	    cat "$valid_test.toml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Valid Test JSON for $test:"
0000000000000000000000000000000000000000;;	    echo "===="
0000000000000000000000000000000000000000;;	    cat "$valid_test.json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Go-TOML Output for $test:"
0000000000000000000000000000000000000000;;	    echo "===="
0000000000000000000000000000000000000000;;	    cat "$valid_test.toml" | ./test_program_bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	  if [ -e "$invalid_test.toml" ]; then
0000000000000000000000000000000000000000;;	    echo "Invalid Test TOML for $test:"
0000000000000000000000000000000000000000;;	    echo "===="
0000000000000000000000000000000000000000;;	    cat "$invalid_test.toml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    echo "Go-TOML Output for $test:"
0000000000000000000000000000000000000000;;	    echo "===="
0000000000000000000000000000000000000000;;	    echo "go-toml Output:"
0000000000000000000000000000000000000000;;	    cat "$invalid_test.toml" | ./test_program_bin
0000000000000000000000000000000000000000;;	  fi
0000000000000000000000000000000000000000;;	fi
