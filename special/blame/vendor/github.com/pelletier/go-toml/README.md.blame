0000000000000000000000000000000000000000;;	# go-toml
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Go library for the [TOML](https://github.com/mojombo/toml) format.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	This library supports TOML version
0000000000000000000000000000000000000000;;	[v0.4.0](https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.4.0.md)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	[![GoDoc](https://godoc.org/github.com/pelletier/go-toml?status.svg)](http://godoc.org/github.com/pelletier/go-toml)
0000000000000000000000000000000000000000;;	[![Build Status](https://travis-ci.org/pelletier/go-toml.svg?branch=master)](https://travis-ci.org/pelletier/go-toml)
0000000000000000000000000000000000000000;;	[![Coverage Status](https://coveralls.io/repos/github/pelletier/go-toml/badge.svg?branch=master)](https://coveralls.io/github/pelletier/go-toml?branch=master)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Features
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Go-toml provides the following features for using data parsed from TOML documents:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Load TOML documents from files and string data
0000000000000000000000000000000000000000;;	* Easily navigate TOML structure using TomlTree
0000000000000000000000000000000000000000;;	* Line & column position data for all parsed elements
0000000000000000000000000000000000000000;;	* Query support similar to JSON-Path
0000000000000000000000000000000000000000;;	* Syntax errors contain line and column numbers
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Go-toml is designed to help cover use-cases not covered by reflection-based TOML parsing:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* Semantic evaluation of parsed TOML
0000000000000000000000000000000000000000;;	* Informing a user of mistakes in the source document, after it has been parsed
0000000000000000000000000000000000000000;;	* Programatic handling of default values on a case-by-case basis
0000000000000000000000000000000000000000;;	* Using a TOML document as a flexible data-store
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Import
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    import "github.com/pelletier/go-toml"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Example
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Say you have a TOML file that looks like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```toml
0000000000000000000000000000000000000000;;	[postgres]
0000000000000000000000000000000000000000;;	user = "pelletier"
0000000000000000000000000000000000000000;;	password = "mypassword"
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Read the username and password like this:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```go
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;	    "fmt"
0000000000000000000000000000000000000000;;	    "github.com/pelletier/go-toml"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	config, err := toml.LoadFile("config.toml")
0000000000000000000000000000000000000000;;	if err != nil {
0000000000000000000000000000000000000000;;	    fmt.Println("Error ", err.Error())
0000000000000000000000000000000000000000;;	} else {
0000000000000000000000000000000000000000;;	    // retrieve data directly
0000000000000000000000000000000000000000;;	    user := config.Get("postgres.user").(string)
0000000000000000000000000000000000000000;;	    password := config.Get("postgres.password").(string)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // or using an intermediate object
0000000000000000000000000000000000000000;;	    configTree := config.Get("postgres").(*toml.TomlTree)
0000000000000000000000000000000000000000;;	    user = configTree.Get("user").(string)
0000000000000000000000000000000000000000;;	    password = configTree.Get("password").(string)
0000000000000000000000000000000000000000;;	    fmt.Println("User is ", user, ". Password is ", password)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // show where elements are in the file
0000000000000000000000000000000000000000;;	    fmt.Println("User position: %v", configTree.GetPosition("user"))
0000000000000000000000000000000000000000;;	    fmt.Println("Password position: %v", configTree.GetPosition("password"))
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    // use a query to gather elements without walking the tree
0000000000000000000000000000000000000000;;	    results, _ := config.Query("$..[user,password]")
0000000000000000000000000000000000000000;;	    for ii, item := range results.Values() {
0000000000000000000000000000000000000000;;	      fmt.Println("Query result %d: %v", ii, item)
0000000000000000000000000000000000000000;;	    }
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Documentation
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The documentation and additional examples are available at
0000000000000000000000000000000000000000;;	[godoc.org](http://godoc.org/github.com/pelletier/go-toml).
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Tools
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Go-toml provides two handy command line tools:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	* `tomll`: Reads TOML files and lint them.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	    go install github.com/pelletier/go-toml/cmd/tomll
0000000000000000000000000000000000000000;;	    tomll --help
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	* `tomljson`: Reads a TOML file and outputs its JSON representation.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	    go install github.com/pelletier/go-toml/cmd/tomjson
0000000000000000000000000000000000000000;;	    tomljson --help
0000000000000000000000000000000000000000;;	    ```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## Contribute
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Feel free to report bugs and patches using GitHub's pull requests system on
0000000000000000000000000000000000000000;;	[pelletier/go-toml](https://github.com/pelletier/go-toml). Any feedback would be
0000000000000000000000000000000000000000;;	much appreciated!
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	### Run tests
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You have to make sure two kind of tests run:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	1. The Go unit tests
0000000000000000000000000000000000000000;;	2. The TOML examples base
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	You can run both of them using `./test.sh`.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	## License
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The MIT License (MIT). Read [LICENSE](LICENSE).
