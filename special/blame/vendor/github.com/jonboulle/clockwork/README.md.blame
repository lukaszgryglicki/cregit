0000000000000000000000000000000000000000;;	clockwork
0000000000000000000000000000000000000000;;	=========
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	a simple fake clock for golang
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Usage
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Replace uses of the `time` package with the `clockwork.Clock` interface instead.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	For example, instead of using `time.Sleep` directly:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	func my_func() {
0000000000000000000000000000000000000000;;		time.Sleep(3 * time.Second)
0000000000000000000000000000000000000000;;		do_something()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	inject a clock and use its `Sleep` method instead:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	func my_func(clock clockwork.Clock) {
0000000000000000000000000000000000000000;;		clock.Sleep(3 * time.Second)
0000000000000000000000000000000000000000;;		do_something()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Now you can easily test `my_func` with a `FakeClock`:
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	func TestMyFunc(t *testing.T) {
0000000000000000000000000000000000000000;;		c := clockwork.NewFakeClock()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Start our sleepy function
0000000000000000000000000000000000000000;;		my_func(c)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Ensure we wait until my_func is sleeping
0000000000000000000000000000000000000000;;		c.BlockUntil(1)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert_state()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Advance the FakeClock forward in time
0000000000000000000000000000000000000000;;		c.Advance(3)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		assert_state()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	and in production builds, simply inject the real clock instead:
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	my_func(clockwork.NewRealClock())
0000000000000000000000000000000000000000;;	```
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See [example_test.go](example_test.go) for a full example.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	# Credits
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Inspired by @wickman's [threaded fake clock](https://gist.github.com/wickman/3840816), and the [Golang playground](http://blog.golang.org/playground#Faking time)
