0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014-2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Package find implements inventory listing and searching.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The Finder is an alternative to the object.SearchIndex FindByInventoryPath() and FindChild() methods.
0000000000000000000000000000000000000000;;	SearchIndex.FindByInventoryPath requires an absolute path, whereas the Finder also supports relative paths
0000000000000000000000000000000000000000;;	and patterns via path.Match.
0000000000000000000000000000000000000000;;	SearchIndex.FindChild requires a parent to find the child, whereas the Finder also supports an ancestor via
0000000000000000000000000000000000000000;;	recursive object traversal.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The various Finder methods accept a "path" argument, which can absolute or relative to the Folder for the object type.
0000000000000000000000000000000000000000;;	The Finder supports two modes, "list" and "find".  The "list" mode behaves like the "ls" command, only searching within
0000000000000000000000000000000000000000;;	the immediate path.  The "find" mode behaves like the "find" command, with the search starting at the immediate path but
0000000000000000000000000000000000000000;;	also recursing into sub Folders relative to the Datacenter.  The default mode is "list" if the given path contains a "/",
0000000000000000000000000000000000000000;;	otherwise "find" mode is used.
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	The exception is to use a "..." wildcard with a path to find all objects recursively underneath any root object.
0000000000000000000000000000000000000000;;	For example: VirtualMachineList("/DC1/...")
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	See also: https://github.com/vmware/govmomi/blob/master/govc/README.md#usage
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	package find
