0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/find/error.go[Godeps/_workspace/src/github.com/vmware/govmomi/find/error.go][vendor/github.com/vmware/govmomi/find/error.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package find
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type NotFoundError struct {
0000000000000000000000000000000000000000;;		kind string
0000000000000000000000000000000000000000;;		path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *NotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s '%s' not found", e.kind, e.path)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MultipleFoundError struct {
0000000000000000000000000000000000000000;;		kind string
0000000000000000000000000000000000000000;;		path string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *MultipleFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("path '%s' resolves to multiple %ss", e.path, e.kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefaultNotFoundError struct {
0000000000000000000000000000000000000000;;		kind string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e *DefaultNotFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("no default %s found", e.kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DefaultMultipleFoundError struct {
0000000000000000000000000000000000000000;;		kind string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (e DefaultMultipleFoundError) Error() string {
0000000000000000000000000000000000000000;;		return fmt.Sprintf("default %s resolves to multiple instances, please specify", e.kind)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func toDefaultError(err error) error {
0000000000000000000000000000000000000000;;		switch e := err.(type) {
0000000000000000000000000000000000000000;;		case *NotFoundError:
0000000000000000000000000000000000000000;;			return &DefaultNotFoundError{e.kind}
0000000000000000000000000000000000000000;;		case *MultipleFoundError:
0000000000000000000000000000000000000000;;			return &DefaultMultipleFoundError{e.kind}
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
