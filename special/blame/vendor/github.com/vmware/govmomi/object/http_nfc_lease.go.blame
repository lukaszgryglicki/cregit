0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/http_nfc_lease.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/http_nfc_lease.go][vendor/github.com/vmware/govmomi/object/http_nfc_lease.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/property"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLease struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHttpNfcLease(c *vim25.Client, ref types.ManagedObjectReference) *HttpNfcLease {
0000000000000000000000000000000000000000;;		return &HttpNfcLease{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpNfcLeaseAbort wraps methods.HttpNfcLeaseAbort
0000000000000000000000000000000000000000;;	func (o HttpNfcLease) HttpNfcLeaseAbort(ctx context.Context, fault *types.LocalizedMethodFault) error {
0000000000000000000000000000000000000000;;		req := types.HttpNfcLeaseAbort{
0000000000000000000000000000000000000000;;			This:  o.Reference(),
0000000000000000000000000000000000000000;;			Fault: fault,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.HttpNfcLeaseAbort(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpNfcLeaseComplete wraps methods.HttpNfcLeaseComplete
0000000000000000000000000000000000000000;;	func (o HttpNfcLease) HttpNfcLeaseComplete(ctx context.Context) error {
0000000000000000000000000000000000000000;;		req := types.HttpNfcLeaseComplete{
0000000000000000000000000000000000000000;;			This: o.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.HttpNfcLeaseComplete(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpNfcLeaseGetManifest wraps methods.HttpNfcLeaseGetManifest
0000000000000000000000000000000000000000;;	func (o HttpNfcLease) HttpNfcLeaseGetManifest(ctx context.Context) error {
0000000000000000000000000000000000000000;;		req := types.HttpNfcLeaseGetManifest{
0000000000000000000000000000000000000000;;			This: o.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.HttpNfcLeaseGetManifest(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// HttpNfcLeaseProgress wraps methods.HttpNfcLeaseProgress
0000000000000000000000000000000000000000;;	func (o HttpNfcLease) HttpNfcLeaseProgress(ctx context.Context, percent int32) error {
0000000000000000000000000000000000000000;;		req := types.HttpNfcLeaseProgress{
0000000000000000000000000000000000000000;;			This:    o.Reference(),
0000000000000000000000000000000000000000;;			Percent: percent,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.HttpNfcLeaseProgress(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (o HttpNfcLease) Wait(ctx context.Context) (*types.HttpNfcLeaseInfo, error) {
0000000000000000000000000000000000000000;;		var lease mo.HttpNfcLease
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pc := property.DefaultCollector(o.c)
0000000000000000000000000000000000000000;;		err := property.Wait(ctx, pc, o.Reference(), []string{"state", "info", "error"}, func(pc []types.PropertyChange) bool {
0000000000000000000000000000000000000000;;			done := false
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			for _, c := range pc {
0000000000000000000000000000000000000000;;				if c.Val == nil {
0000000000000000000000000000000000000000;;					continue
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;				switch c.Name {
0000000000000000000000000000000000000000;;				case "error":
0000000000000000000000000000000000000000;;					val := c.Val.(types.LocalizedMethodFault)
0000000000000000000000000000000000000000;;					lease.Error = &val
0000000000000000000000000000000000000000;;					done = true
0000000000000000000000000000000000000000;;				case "info":
0000000000000000000000000000000000000000;;					val := c.Val.(types.HttpNfcLeaseInfo)
0000000000000000000000000000000000000000;;					lease.Info = &val
0000000000000000000000000000000000000000;;				case "state":
0000000000000000000000000000000000000000;;					lease.State = c.Val.(types.HttpNfcLeaseState)
0000000000000000000000000000000000000000;;					if lease.State != types.HttpNfcLeaseStateInitializing {
0000000000000000000000000000000000000000;;						done = true
0000000000000000000000000000000000000000;;					}
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return done
0000000000000000000000000000000000000000;;		})
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lease.State == types.HttpNfcLeaseStateReady {
0000000000000000000000000000000000000000;;			return lease.Info, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if lease.Error != nil {
0000000000000000000000000000000000000000;;			return nil, errors.New(lease.Error.LocalizedMessage)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil, fmt.Errorf("unexpected nfc lease state: %s", lease.State)
0000000000000000000000000000000000000000;;	}
