0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/soap"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		types.Add("ArrayOfVirtualDiskInfo", reflect.TypeOf((*arrayOfVirtualDiskInfo)(nil)).Elem())
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		types.Add("VirtualDiskInfo", reflect.TypeOf((*VirtualDiskInfo)(nil)).Elem())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type arrayOfVirtualDiskInfo struct {
0000000000000000000000000000000000000000;;		VirtualDiskInfo []VirtualDiskInfo `xml:"VirtualDiskInfo,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type queryVirtualDiskInfoTaskRequest struct {
0000000000000000000000000000000000000000;;		This           types.ManagedObjectReference  `xml:"_this"`
0000000000000000000000000000000000000000;;		Name           string                        `xml:"name"`
0000000000000000000000000000000000000000;;		Datacenter     *types.ManagedObjectReference `xml:"datacenter,omitempty"`
0000000000000000000000000000000000000000;;		IncludeParents bool                          `xml:"includeParents"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type queryVirtualDiskInfoTaskResponse struct {
0000000000000000000000000000000000000000;;		Returnval types.ManagedObjectReference `xml:"returnval"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type queryVirtualDiskInfoTaskBody struct {
0000000000000000000000000000000000000000;;		Req *queryVirtualDiskInfoTaskRequest  `xml:"urn:internalvim25 QueryVirtualDiskInfo_Task,omitempty"`
0000000000000000000000000000000000000000;;		Res *queryVirtualDiskInfoTaskResponse `xml:"urn:vim25 QueryVirtualDiskInfo_TaskResponse,omitempty"`
0000000000000000000000000000000000000000;;		Err *soap.Fault                       `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *queryVirtualDiskInfoTaskBody) Fault() *soap.Fault { return b.Err }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func queryVirtualDiskInfoTask(ctx context.Context, r soap.RoundTripper, req *queryVirtualDiskInfoTaskRequest) (*queryVirtualDiskInfoTaskResponse, error) {
0000000000000000000000000000000000000000;;		var reqBody, resBody queryVirtualDiskInfoTaskBody
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody.Req = req
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if err := r.RoundTrip(ctx, &reqBody, &resBody); err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return resBody.Res, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskInfo struct {
0000000000000000000000000000000000000000;;		Name     string `xml:"unit>name"`
0000000000000000000000000000000000000000;;		DiskType string `xml:"diskType"`
0000000000000000000000000000000000000000;;		Parent   string `xml:"parent,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) QueryVirtualDiskInfo(ctx context.Context, name string, dc *Datacenter, includeParents bool) ([]VirtualDiskInfo, error) {
0000000000000000000000000000000000000000;;		req := queryVirtualDiskInfoTaskRequest{
0000000000000000000000000000000000000000;;			This:           m.Reference(),
0000000000000000000000000000000000000000;;			Name:           name,
0000000000000000000000000000000000000000;;			IncludeParents: includeParents,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := queryVirtualDiskInfoTask(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		info, err := NewTask(m.Client(), res.Returnval).WaitForResult(ctx, nil)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return info.Result.(arrayOfVirtualDiskInfo).VirtualDiskInfo, nil
0000000000000000000000000000000000000000;;	}
