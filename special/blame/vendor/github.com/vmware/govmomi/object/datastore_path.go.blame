0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2016 VMware, Inc. All Rights Reserved.
45473432028991b8b23cc5822fe045d9b6a279d6;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"strings"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DatastorePath contains the components of a datastore path.
0000000000000000000000000000000000000000;;	type DatastorePath struct {
0000000000000000000000000000000000000000;;		Datastore string
0000000000000000000000000000000000000000;;		Path      string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FromString parses a datastore path.
0000000000000000000000000000000000000000;;	// Returns true if the path could be parsed, false otherwise.
0000000000000000000000000000000000000000;;	func (p *DatastorePath) FromString(s string) bool {
0000000000000000000000000000000000000000;;		if len(s) == 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s = strings.TrimSpace(s)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !strings.HasPrefix(s, "[") {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		s = s[1:]
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ix := strings.Index(s, "]")
0000000000000000000000000000000000000000;;		if ix < 0 {
0000000000000000000000000000000000000000;;			return false
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		p.Datastore = s[:ix]
0000000000000000000000000000000000000000;;		p.Path = strings.TrimSpace(s[ix+1:])
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return true
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// String formats a datastore path.
0000000000000000000000000000000000000000;;	func (p *DatastorePath) String() string {
0000000000000000000000000000000000000000;;		s := fmt.Sprintf("[%s]", p.Datastore)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if p.Path == "" {
0000000000000000000000000000000000000000;;			return s
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return strings.Join([]string{s, p.Path}, " ")
0000000000000000000000000000000000000000;;	}
