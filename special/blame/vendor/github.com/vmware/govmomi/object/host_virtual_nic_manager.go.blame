0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/host_virtual_nic_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/host_virtual_nic_manager.go][vendor/github.com/vmware/govmomi/object/host_virtual_nic_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;		Host *HostSystem
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostVirtualNicManager(c *vim25.Client, ref types.ManagedObjectReference, host types.ManagedObjectReference) *HostVirtualNicManager {
0000000000000000000000000000000000000000;;		return &HostVirtualNicManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;			Host:   NewHostSystem(c, host),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVirtualNicManager) Info(ctx context.Context) (*types.HostVirtualNicManagerInfo, error) {
0000000000000000000000000000000000000000;;		var vnm mo.HostVirtualNicManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"info"}, &vnm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &vnm.Info, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVirtualNicManager) DeselectVnic(ctx context.Context, nicType string, device string) error {
0000000000000000000000000000000000000000;;		if nicType == string(types.HostVirtualNicManagerNicTypeVsan) {
0000000000000000000000000000000000000000;;			// Avoid fault.NotSupported:
0000000000000000000000000000000000000000;;			// "Error deselecting device '$device': VSAN interfaces must be deselected using vim.host.VsanSystem"
0000000000000000000000000000000000000000;;			s, err := m.Host.ConfigManager().VsanSystem(ctx)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return s.updateVnic(ctx, device, false)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := types.DeselectVnicForNicType{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			NicType: nicType,
0000000000000000000000000000000000000000;;			Device:  device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.DeselectVnicForNicType(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVirtualNicManager) SelectVnic(ctx context.Context, nicType string, device string) error {
0000000000000000000000000000000000000000;;		if nicType == string(types.HostVirtualNicManagerNicTypeVsan) {
0000000000000000000000000000000000000000;;			// Avoid fault.NotSupported:
0000000000000000000000000000000000000000;;			// "Error selecting device '$device': VSAN interfaces must be selected using vim.host.VsanSystem"
0000000000000000000000000000000000000000;;			s, err := m.Host.ConfigManager().VsanSystem(ctx)
0000000000000000000000000000000000000000;;			if err != nil {
0000000000000000000000000000000000000000;;				return err
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return s.updateVnic(ctx, device, true)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := types.SelectVnicForNicType{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			NicType: nicType,
0000000000000000000000000000000000000000;;			Device:  device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.SelectVnicForNicType(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
