0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/types.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/types.go][vendor/github.com/vmware/govmomi/object/types.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Reference interface {
0000000000000000000000000000000000000000;;		Reference() types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewReference(c *vim25.Client, e types.ManagedObjectReference) Reference {
0000000000000000000000000000000000000000;;		switch e.Type {
0000000000000000000000000000000000000000;;		case "Folder":
0000000000000000000000000000000000000000;;			return NewFolder(c, e)
0000000000000000000000000000000000000000;;		case "StoragePod":
0000000000000000000000000000000000000000;;			return &StoragePod{
0000000000000000000000000000000000000000;;				NewFolder(c, e),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case "Datacenter":
0000000000000000000000000000000000000000;;			return NewDatacenter(c, e)
0000000000000000000000000000000000000000;;		case "VirtualMachine":
0000000000000000000000000000000000000000;;			return NewVirtualMachine(c, e)
0000000000000000000000000000000000000000;;		case "VirtualApp":
0000000000000000000000000000000000000000;;			return &VirtualApp{
0000000000000000000000000000000000000000;;				NewResourcePool(c, e),
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		case "ComputeResource":
0000000000000000000000000000000000000000;;			return NewComputeResource(c, e)
0000000000000000000000000000000000000000;;		case "ClusterComputeResource":
0000000000000000000000000000000000000000;;			return NewClusterComputeResource(c, e)
0000000000000000000000000000000000000000;;		case "HostSystem":
0000000000000000000000000000000000000000;;			return NewHostSystem(c, e)
0000000000000000000000000000000000000000;;		case "Network", "OpaqueNetwork":
0000000000000000000000000000000000000000;;			return NewNetwork(c, e)
0000000000000000000000000000000000000000;;		case "ResourcePool":
0000000000000000000000000000000000000000;;			return NewResourcePool(c, e)
0000000000000000000000000000000000000000;;		case "DistributedVirtualSwitch":
0000000000000000000000000000000000000000;;			return NewDistributedVirtualSwitch(c, e)
0000000000000000000000000000000000000000;;		case "VmwareDistributedVirtualSwitch":
0000000000000000000000000000000000000000;;			return &VmwareDistributedVirtualSwitch{*NewDistributedVirtualSwitch(c, e)}
0000000000000000000000000000000000000000;;		case "DistributedVirtualPortgroup":
0000000000000000000000000000000000000000;;			return NewDistributedVirtualPortgroup(c, e)
0000000000000000000000000000000000000000;;		case "Datastore":
0000000000000000000000000000000000000000;;			return NewDatastore(c, e)
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			panic("Unknown managed entity: " + e.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
