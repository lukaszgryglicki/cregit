0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/datacenter.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/datacenter.go][vendor/github.com/vmware/govmomi/object/datacenter.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatacenterFolders struct {
0000000000000000000000000000000000000000;;		VmFolder        *Folder
0000000000000000000000000000000000000000;;		HostFolder      *Folder
0000000000000000000000000000000000000000;;		DatastoreFolder *Folder
0000000000000000000000000000000000000000;;		NetworkFolder   *Folder
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Datacenter struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewDatacenter(c *vim25.Client, ref types.ManagedObjectReference) *Datacenter {
0000000000000000000000000000000000000000;;		return &Datacenter{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *Datacenter) Folders(ctx context.Context) (*DatacenterFolders, error) {
0000000000000000000000000000000000000000;;		var md mo.Datacenter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ps := []string{"name", "vmFolder", "hostFolder", "datastoreFolder", "networkFolder"}
0000000000000000000000000000000000000000;;		err := d.Properties(ctx, d.Reference(), ps, &md)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		df := &DatacenterFolders{
0000000000000000000000000000000000000000;;			VmFolder:        NewFolder(d.c, md.VmFolder),
0000000000000000000000000000000000000000;;			HostFolder:      NewFolder(d.c, md.HostFolder),
0000000000000000000000000000000000000000;;			DatastoreFolder: NewFolder(d.c, md.DatastoreFolder),
0000000000000000000000000000000000000000;;			NetworkFolder:   NewFolder(d.c, md.NetworkFolder),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		paths := []struct {
0000000000000000000000000000000000000000;;			name string
0000000000000000000000000000000000000000;;			path *string
0000000000000000000000000000000000000000;;		}{
0000000000000000000000000000000000000000;;			{"vm", &df.VmFolder.InventoryPath},
0000000000000000000000000000000000000000;;			{"host", &df.HostFolder.InventoryPath},
0000000000000000000000000000000000000000;;			{"datastore", &df.DatastoreFolder.InventoryPath},
0000000000000000000000000000000000000000;;			{"network", &df.NetworkFolder.InventoryPath},
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, p := range paths {
0000000000000000000000000000000000000000;;			*p.path = fmt.Sprintf("/%s/%s", md.Name, p.name)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return df, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d Datacenter) Destroy(ctx context.Context) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.Destroy_Task{
0000000000000000000000000000000000000000;;			This: d.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.Destroy_Task(ctx, d.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(d.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
