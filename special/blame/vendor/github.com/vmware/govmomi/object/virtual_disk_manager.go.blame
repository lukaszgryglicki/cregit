0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/virtual_disk_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/virtual_disk_manager.go][vendor/github.com/vmware/govmomi/object/virtual_disk_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewVirtualDiskManager(c *vim25.Client) *VirtualDiskManager {
0000000000000000000000000000000000000000;;		m := VirtualDiskManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.VirtualDiskManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CopyVirtualDisk copies a virtual disk, performing conversions as specified in the spec.
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) CopyVirtualDisk(
0000000000000000000000000000000000000000;;		ctx context.Context,
0000000000000000000000000000000000000000;;		sourceName string, sourceDatacenter *Datacenter,
0000000000000000000000000000000000000000;;		destName string, destDatacenter *Datacenter,
0000000000000000000000000000000000000000;;		destSpec *types.VirtualDiskSpec, force bool) (*Task, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := types.CopyVirtualDisk_Task{
0000000000000000000000000000000000000000;;			This:       m.Reference(),
0000000000000000000000000000000000000000;;			SourceName: sourceName,
0000000000000000000000000000000000000000;;			DestName:   destName,
0000000000000000000000000000000000000000;;			DestSpec:   destSpec,
0000000000000000000000000000000000000000;;			Force:      types.NewBool(force),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sourceDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := sourceDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.SourceDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if destDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := destDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.DestDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CopyVirtualDisk_Task(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(m.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateVirtualDisk creates a new virtual disk.
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) CreateVirtualDisk(
0000000000000000000000000000000000000000;;		ctx context.Context,
0000000000000000000000000000000000000000;;		name string, datacenter *Datacenter,
0000000000000000000000000000000000000000;;		spec types.BaseVirtualDiskSpec) (*Task, error) {
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		req := types.CreateVirtualDisk_Task{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;			Spec: spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if datacenter != nil {
0000000000000000000000000000000000000000;;			ref := datacenter.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CreateVirtualDisk_Task(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(m.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MoveVirtualDisk moves a virtual disk.
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) MoveVirtualDisk(
0000000000000000000000000000000000000000;;		ctx context.Context,
0000000000000000000000000000000000000000;;		sourceName string, sourceDatacenter *Datacenter,
0000000000000000000000000000000000000000;;		destName string, destDatacenter *Datacenter,
0000000000000000000000000000000000000000;;		force bool) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.MoveVirtualDisk_Task{
0000000000000000000000000000000000000000;;			This:       m.Reference(),
0000000000000000000000000000000000000000;;			SourceName: sourceName,
0000000000000000000000000000000000000000;;			DestName:   destName,
0000000000000000000000000000000000000000;;			Force:      types.NewBool(force),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sourceDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := sourceDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.SourceDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if destDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := destDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.DestDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.MoveVirtualDisk_Task(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(m.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVirtualDisk deletes a virtual disk.
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) DeleteVirtualDisk(ctx context.Context, name string, dc *Datacenter) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.DeleteVirtualDisk_Task{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.DeleteVirtualDisk_Task(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(m.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Queries virtual disk uuid
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) QueryVirtualDiskUuid(ctx context.Context, name string, dc *Datacenter) (string, error) {
0000000000000000000000000000000000000000;;		req := types.QueryVirtualDiskUuid{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.QueryVirtualDiskUuid(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res == nil {
0000000000000000000000000000000000000000;;			return "", nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
