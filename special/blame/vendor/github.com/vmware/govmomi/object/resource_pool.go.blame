0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/resource_pool.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/resource_pool.go][vendor/github.com/vmware/govmomi/object/resource_pool.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePool struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewResourcePool(c *vim25.Client, ref types.ManagedObjectReference) *ResourcePool {
0000000000000000000000000000000000000000;;		return &ResourcePool{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) ImportVApp(ctx context.Context, spec types.BaseImportSpec, folder *Folder, host *HostSystem) (*HttpNfcLease, error) {
0000000000000000000000000000000000000000;;		req := types.ImportVApp{
0000000000000000000000000000000000000000;;			This: p.Reference(),
0000000000000000000000000000000000000000;;			Spec: spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if folder != nil {
0000000000000000000000000000000000000000;;			ref := folder.Reference()
0000000000000000000000000000000000000000;;			req.Folder = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if host != nil {
0000000000000000000000000000000000000000;;			ref := host.Reference()
0000000000000000000000000000000000000000;;			req.Host = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ImportVApp(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHttpNfcLease(p.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) Create(ctx context.Context, name string, spec types.ResourceConfigSpec) (*ResourcePool, error) {
0000000000000000000000000000000000000000;;		req := types.CreateResourcePool{
0000000000000000000000000000000000000000;;			This: p.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;			Spec: spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CreateResourcePool(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewResourcePool(p.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) CreateVApp(ctx context.Context, name string, resSpec types.ResourceConfigSpec, configSpec types.VAppConfigSpec, folder *Folder) (*VirtualApp, error) {
0000000000000000000000000000000000000000;;		req := types.CreateVApp{
0000000000000000000000000000000000000000;;			This:       p.Reference(),
0000000000000000000000000000000000000000;;			Name:       name,
0000000000000000000000000000000000000000;;			ResSpec:    resSpec,
0000000000000000000000000000000000000000;;			ConfigSpec: configSpec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if folder != nil {
0000000000000000000000000000000000000000;;			ref := folder.Reference()
0000000000000000000000000000000000000000;;			req.VmFolder = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CreateVApp(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewVirtualApp(p.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) UpdateConfig(ctx context.Context, name string, config *types.ResourceConfigSpec) error {
0000000000000000000000000000000000000000;;		req := types.UpdateConfig{
0000000000000000000000000000000000000000;;			This:   p.Reference(),
0000000000000000000000000000000000000000;;			Name:   name,
0000000000000000000000000000000000000000;;			Config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if config != nil && config.Entity == nil {
0000000000000000000000000000000000000000;;			ref := p.Reference()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Create copy of config so changes won't leak back to the caller
0000000000000000000000000000000000000000;;			newConfig := *config
0000000000000000000000000000000000000000;;			newConfig.Entity = &ref
0000000000000000000000000000000000000000;;			req.Config = &newConfig
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateConfig(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) DestroyChildren(ctx context.Context) error {
0000000000000000000000000000000000000000;;		req := types.DestroyChildren{
0000000000000000000000000000000000000000;;			This: p.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.DestroyChildren(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (p ResourcePool) Destroy(ctx context.Context) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.Destroy_Task{
0000000000000000000000000000000000000000;;			This: p.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.Destroy_Task(ctx, p.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(p.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
