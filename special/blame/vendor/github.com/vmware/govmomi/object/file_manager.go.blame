0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/file_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/file_manager.go][vendor/github.com/vmware/govmomi/object/file_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewFileManager(c *vim25.Client) *FileManager {
0000000000000000000000000000000000000000;;		f := FileManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.FileManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileManager) CopyDatastoreFile(ctx context.Context, sourceName string, sourceDatacenter *Datacenter, destinationName string, destinationDatacenter *Datacenter, force bool) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.CopyDatastoreFile_Task{
0000000000000000000000000000000000000000;;			This:            f.Reference(),
0000000000000000000000000000000000000000;;			SourceName:      sourceName,
0000000000000000000000000000000000000000;;			DestinationName: destinationName,
0000000000000000000000000000000000000000;;			Force:           types.NewBool(force),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sourceDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := sourceDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.SourceDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if destinationDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := destinationDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.DestinationDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CopyDatastoreFile_Task(ctx, f.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(f.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteDatastoreFile deletes the specified file or folder from the datastore.
0000000000000000000000000000000000000000;;	func (f FileManager) DeleteDatastoreFile(ctx context.Context, name string, dc *Datacenter) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.DeleteDatastoreFile_Task{
0000000000000000000000000000000000000000;;			This: f.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.DeleteDatastoreFile_Task(ctx, f.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(f.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// MakeDirectory creates a folder using the specified name.
0000000000000000000000000000000000000000;;	func (f FileManager) MakeDirectory(ctx context.Context, name string, dc *Datacenter, createParentDirectories bool) error {
0000000000000000000000000000000000000000;;		req := types.MakeDirectory{
0000000000000000000000000000000000000000;;			This: f.Reference(),
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;			CreateParentDirectories: types.NewBool(createParentDirectories),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.MakeDirectory(ctx, f.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (f FileManager) MoveDatastoreFile(ctx context.Context, sourceName string, sourceDatacenter *Datacenter, destinationName string, destinationDatacenter *Datacenter, force bool) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.MoveDatastoreFile_Task{
0000000000000000000000000000000000000000;;			This:            f.Reference(),
0000000000000000000000000000000000000000;;			SourceName:      sourceName,
0000000000000000000000000000000000000000;;			DestinationName: destinationName,
0000000000000000000000000000000000000000;;			Force:           types.NewBool(force),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if sourceDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := sourceDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.SourceDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if destinationDatacenter != nil {
0000000000000000000000000000000000000000;;			ref := destinationDatacenter.Reference()
0000000000000000000000000000000000000000;;			req.DestinationDatacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.MoveDatastoreFile_Task(ctx, f.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(f.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
