0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2016 VMware, Inc. All Rights Reserved.
6b9f6f4be3cae2d915f659a44b0277170981f2ec;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceSystem struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostServiceSystem(c *vim25.Client, ref types.ManagedObjectReference) *HostServiceSystem {
0000000000000000000000000000000000000000;;		return &HostServiceSystem{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s HostServiceSystem) Service(ctx context.Context) ([]types.HostService, error) {
0000000000000000000000000000000000000000;;		var ss mo.HostServiceSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := s.Properties(ctx, s.Reference(), []string{"serviceInfo.service"}, &ss)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ss.ServiceInfo.Service, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s HostServiceSystem) Start(ctx context.Context, id string) error {
0000000000000000000000000000000000000000;;		req := types.StartService{
0000000000000000000000000000000000000000;;			This: s.Reference(),
0000000000000000000000000000000000000000;;			Id:   id,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.StartService(ctx, s.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s HostServiceSystem) Stop(ctx context.Context, id string) error {
0000000000000000000000000000000000000000;;		req := types.StopService{
0000000000000000000000000000000000000000;;			This: s.Reference(),
0000000000000000000000000000000000000000;;			Id:   id,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.StopService(ctx, s.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s HostServiceSystem) Restart(ctx context.Context, id string) error {
0000000000000000000000000000000000000000;;		req := types.RestartService{
0000000000000000000000000000000000000000;;			This: s.Reference(),
0000000000000000000000000000000000000000;;			Id:   id,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RestartService(ctx, s.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s HostServiceSystem) UpdatePolicy(ctx context.Context, id string, policy string) error {
0000000000000000000000000000000000000000;;		req := types.UpdateServicePolicy{
0000000000000000000000000000000000000000;;			This:   s.Reference(),
0000000000000000000000000000000000000000;;			Id:     id,
0000000000000000000000000000000000000000;;			Policy: policy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateServicePolicy(ctx, s.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
