0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/compute_resource.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/compute_resource.go][vendor/github.com/vmware/govmomi/object/compute_resource.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/property"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResource struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewComputeResource(c *vim25.Client, ref types.ManagedObjectReference) *ComputeResource {
0000000000000000000000000000000000000000;;		return &ComputeResource{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ComputeResource) Hosts(ctx context.Context) ([]*HostSystem, error) {
0000000000000000000000000000000000000000;;		var cr mo.ComputeResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.Properties(ctx, c.Reference(), []string{"host"}, &cr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(cr.Host) == 0 {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var hs []mo.HostSystem
0000000000000000000000000000000000000000;;		pc := property.DefaultCollector(c.Client())
0000000000000000000000000000000000000000;;		err = pc.Retrieve(ctx, cr.Host, []string{"name"}, &hs)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var hosts []*HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, h := range hs {
0000000000000000000000000000000000000000;;			host := NewHostSystem(c.Client(), h.Reference())
0000000000000000000000000000000000000000;;			host.InventoryPath = path.Join(c.InventoryPath, h.Name)
0000000000000000000000000000000000000000;;			hosts = append(hosts, host)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return hosts, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ComputeResource) Datastores(ctx context.Context) ([]*Datastore, error) {
0000000000000000000000000000000000000000;;		var cr mo.ComputeResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.Properties(ctx, c.Reference(), []string{"datastore"}, &cr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var dss []*Datastore
0000000000000000000000000000000000000000;;		for _, ref := range cr.Datastore {
0000000000000000000000000000000000000000;;			ds := NewDatastore(c.c, ref)
0000000000000000000000000000000000000000;;			dss = append(dss, ds)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return dss, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ComputeResource) ResourcePool(ctx context.Context) (*ResourcePool, error) {
0000000000000000000000000000000000000000;;		var cr mo.ComputeResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := c.Properties(ctx, c.Reference(), []string{"resourcePool"}, &cr)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewResourcePool(c.c, *cr.ResourcePool), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ComputeResource) Reconfigure(ctx context.Context, spec types.BaseComputeResourceConfigSpec, modify bool) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.ReconfigureComputeResource_Task{
0000000000000000000000000000000000000000;;			This:   c.Reference(),
0000000000000000000000000000000000000000;;			Spec:   spec,
0000000000000000000000000000000000000000;;			Modify: modify,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ReconfigureComputeResource_Task(ctx, c.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(c.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (c ComputeResource) Destroy(ctx context.Context) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.Destroy_Task{
0000000000000000000000000000000000000000;;			This: c.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.Destroy_Task(ctx, c.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(c.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
