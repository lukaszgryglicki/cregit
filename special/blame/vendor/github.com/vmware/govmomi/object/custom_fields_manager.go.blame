0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/custom_fields_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/custom_fields_manager.go][vendor/github.com/vmware/govmomi/object/custom_fields_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"errors"
0000000000000000000000000000000000000000;;		"strconv"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var (
0000000000000000000000000000000000000000;;		ErrKeyNameNotFound = errors.New("key name not found")
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldsManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetCustomFieldsManager wraps NewCustomFieldsManager, returning ErrNotSupported
0000000000000000000000000000000000000000;;	// when the client is not connected to a vCenter instance.
0000000000000000000000000000000000000000;;	func GetCustomFieldsManager(c *vim25.Client) (*CustomFieldsManager, error) {
0000000000000000000000000000000000000000;;		if c.ServiceContent.CustomFieldsManager == nil {
0000000000000000000000000000000000000000;;			return nil, ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewCustomFieldsManager(c), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewCustomFieldsManager(c *vim25.Client) *CustomFieldsManager {
0000000000000000000000000000000000000000;;		m := CustomFieldsManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.CustomFieldsManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Add(ctx context.Context, name string, moType string, fieldDefPolicy *types.PrivilegePolicyDef, fieldPolicy *types.PrivilegePolicyDef) (*types.CustomFieldDef, error) {
0000000000000000000000000000000000000000;;		req := types.AddCustomFieldDef{
0000000000000000000000000000000000000000;;			This:           m.Reference(),
0000000000000000000000000000000000000000;;			Name:           name,
0000000000000000000000000000000000000000;;			MoType:         moType,
0000000000000000000000000000000000000000;;			FieldDefPolicy: fieldDefPolicy,
0000000000000000000000000000000000000000;;			FieldPolicy:    fieldPolicy,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.AddCustomFieldDef(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Remove(ctx context.Context, key int32) error {
0000000000000000000000000000000000000000;;		req := types.RemoveCustomFieldDef{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;			Key:  key,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveCustomFieldDef(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Rename(ctx context.Context, key int32, name string) error {
0000000000000000000000000000000000000000;;		req := types.RenameCustomFieldDef{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;			Key:  key,
0000000000000000000000000000000000000000;;			Name: name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RenameCustomFieldDef(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Set(ctx context.Context, entity types.ManagedObjectReference, key int32, value string) error {
0000000000000000000000000000000000000000;;		req := types.SetField{
0000000000000000000000000000000000000000;;			This:   m.Reference(),
0000000000000000000000000000000000000000;;			Entity: entity,
0000000000000000000000000000000000000000;;			Key:    key,
0000000000000000000000000000000000000000;;			Value:  value,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.SetField(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Field(ctx context.Context) ([]types.CustomFieldDef, error) {
0000000000000000000000000000000000000000;;		var fm mo.CustomFieldsManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"field"}, &fm)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fm.Field, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) FindKey(ctx context.Context, key string) (int32, error) {
0000000000000000000000000000000000000000;;		field, err := m.Field(ctx)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for _, def := range field {
0000000000000000000000000000000000000000;;			if def.Name == key {
0000000000000000000000000000000000000000;;				return def.Key, nil
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		k, err := strconv.Atoi(key)
0000000000000000000000000000000000000000;;		if err == nil {
0000000000000000000000000000000000000000;;			// assume literal int key
0000000000000000000000000000000000000000;;			return int32(k), nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return -1, ErrKeyNameNotFound
0000000000000000000000000000000000000000;;	}
