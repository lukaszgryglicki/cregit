0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/host_config_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/host_config_manager.go][vendor/github.com/vmware/govmomi/object/host_config_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostConfigManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostConfigManager(c *vim25.Client, ref types.ManagedObjectReference) *HostConfigManager {
0000000000000000000000000000000000000000;;		return &HostConfigManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) DatastoreSystem(ctx context.Context) (*HostDatastoreSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.datastoreSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostDatastoreSystem(m.c, *h.ConfigManager.DatastoreSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) NetworkSystem(ctx context.Context) (*HostNetworkSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.networkSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostNetworkSystem(m.c, *h.ConfigManager.NetworkSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) FirewallSystem(ctx context.Context) (*HostFirewallSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.firewallSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostFirewallSystem(m.c, *h.ConfigManager.FirewallSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) StorageSystem(ctx context.Context) (*HostStorageSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.storageSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostStorageSystem(m.c, *h.ConfigManager.StorageSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) VirtualNicManager(ctx context.Context) (*HostVirtualNicManager, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.virtualNicManager"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostVirtualNicManager(m.c, *h.ConfigManager.VirtualNicManager, m.Reference()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) VsanSystem(ctx context.Context) (*HostVsanSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.vsanSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Added in 5.5
0000000000000000000000000000000000000000;;		if h.ConfigManager.VsanSystem == nil {
0000000000000000000000000000000000000000;;			return nil, ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostVsanSystem(m.c, *h.ConfigManager.VsanSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) VsanInternalSystem(ctx context.Context) (*HostVsanInternalSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.vsanInternalSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Added in 5.5
0000000000000000000000000000000000000000;;		if h.ConfigManager.VsanInternalSystem == nil {
0000000000000000000000000000000000000000;;			return nil, ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostVsanInternalSystem(m.c, *h.ConfigManager.VsanInternalSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) AccountManager(ctx context.Context) (*HostAccountManager, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.accountManager"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ref := h.ConfigManager.AccountManager // Added in 6.0
0000000000000000000000000000000000000000;;		if ref == nil {
0000000000000000000000000000000000000000;;			// Versions < 5.5 can use the ServiceContent ref,
0000000000000000000000000000000000000000;;			// but we can only use it when connected directly to ESX.
0000000000000000000000000000000000000000;;			c := m.Client()
0000000000000000000000000000000000000000;;			if !c.IsVC() {
0000000000000000000000000000000000000000;;				ref = c.ServiceContent.AccountManager
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if ref == nil {
0000000000000000000000000000000000000000;;				return nil, ErrNotSupported
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostAccountManager(m.c, *ref), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) OptionManager(ctx context.Context) (*OptionManager, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.advancedOption"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewOptionManager(m.c, *h.ConfigManager.AdvancedOption), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) ServiceSystem(ctx context.Context) (*HostServiceSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.serviceSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostServiceSystem(m.c, *h.ConfigManager.ServiceSystem), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) CertificateManager(ctx context.Context) (*HostCertificateManager, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.certificateManager"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Added in 6.0
0000000000000000000000000000000000000000;;		if h.ConfigManager.CertificateManager == nil {
0000000000000000000000000000000000000000;;			return nil, ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostCertificateManager(m.c, *h.ConfigManager.CertificateManager, m.Reference()), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostConfigManager) DateTimeSystem(ctx context.Context) (*HostDateTimeSystem, error) {
0000000000000000000000000000000000000000;;		var h mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"configManager.dateTimeSystem"}, &h)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewHostDateTimeSystem(m.c, *h.ConfigManager.DateTimeSystem), nil
0000000000000000000000000000000000000000;;	}
