0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/extension_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/extension_manager.go][vendor/github.com/vmware/govmomi/object/extension_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetExtensionManager wraps NewExtensionManager, returning ErrNotSupported
0000000000000000000000000000000000000000;;	// when the client is not connected to a vCenter instance.
0000000000000000000000000000000000000000;;	func GetExtensionManager(c *vim25.Client) (*ExtensionManager, error) {
0000000000000000000000000000000000000000;;		if c.ServiceContent.ExtensionManager == nil {
0000000000000000000000000000000000000000;;			return nil, ErrNotSupported
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewExtensionManager(c), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewExtensionManager(c *vim25.Client) *ExtensionManager {
0000000000000000000000000000000000000000;;		o := ExtensionManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.ExtensionManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) List(ctx context.Context) ([]types.Extension, error) {
0000000000000000000000000000000000000000;;		var em mo.ExtensionManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"extensionList"}, &em)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return em.ExtensionList, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) Find(ctx context.Context, key string) (*types.Extension, error) {
0000000000000000000000000000000000000000;;		req := types.FindExtension{
0000000000000000000000000000000000000000;;			This:         m.Reference(),
0000000000000000000000000000000000000000;;			ExtensionKey: key,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindExtension(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) Register(ctx context.Context, extension types.Extension) error {
0000000000000000000000000000000000000000;;		req := types.RegisterExtension{
0000000000000000000000000000000000000000;;			This:      m.Reference(),
0000000000000000000000000000000000000000;;			Extension: extension,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RegisterExtension(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) SetCertificate(ctx context.Context, key string, certificatePem string) error {
0000000000000000000000000000000000000000;;		req := types.SetExtensionCertificate{
0000000000000000000000000000000000000000;;			This:           m.Reference(),
0000000000000000000000000000000000000000;;			ExtensionKey:   key,
0000000000000000000000000000000000000000;;			CertificatePem: certificatePem,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.SetExtensionCertificate(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) Unregister(ctx context.Context, key string) error {
0000000000000000000000000000000000000000;;		req := types.UnregisterExtension{
0000000000000000000000000000000000000000;;			This:         m.Reference(),
0000000000000000000000000000000000000000;;			ExtensionKey: key,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UnregisterExtension(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) Update(ctx context.Context, extension types.Extension) error {
0000000000000000000000000000000000000000;;		req := types.UpdateExtension{
0000000000000000000000000000000000000000;;			This:      m.Reference(),
0000000000000000000000000000000000000000;;			Extension: extension,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateExtension(ctx, m.c, &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
