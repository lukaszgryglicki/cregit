0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/host_system.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/host_system.go][vendor/github.com/vmware/govmomi/object/host_system.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystem struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostSystem(c *vim25.Client, ref types.ManagedObjectReference) *HostSystem {
0000000000000000000000000000000000000000;;		return &HostSystem{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) ConfigManager() *HostConfigManager {
0000000000000000000000000000000000000000;;		return NewHostConfigManager(h.c, h.Reference())
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) ResourcePool(ctx context.Context) (*ResourcePool, error) {
0000000000000000000000000000000000000000;;		var mh mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := h.Properties(ctx, h.Reference(), []string{"parent"}, &mh)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var mcr *mo.ComputeResource
0000000000000000000000000000000000000000;;		var parent interface{}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		switch mh.Parent.Type {
0000000000000000000000000000000000000000;;		case "ComputeResource":
0000000000000000000000000000000000000000;;			mcr = new(mo.ComputeResource)
0000000000000000000000000000000000000000;;			parent = mcr
0000000000000000000000000000000000000000;;		case "ClusterComputeResource":
0000000000000000000000000000000000000000;;			mcc := new(mo.ClusterComputeResource)
0000000000000000000000000000000000000000;;			mcr = &mcc.ComputeResource
0000000000000000000000000000000000000000;;			parent = mcc
0000000000000000000000000000000000000000;;		default:
0000000000000000000000000000000000000000;;			return nil, fmt.Errorf("unknown host parent type: %s", mh.Parent.Type)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = h.Properties(ctx, *mh.Parent, []string{"resourcePool"}, parent)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		pool := NewResourcePool(h.c, *mcr.ResourcePool)
0000000000000000000000000000000000000000;;		return pool, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) ManagementIPs(ctx context.Context) ([]net.IP, error) {
0000000000000000000000000000000000000000;;		var mh mo.HostSystem
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := h.Properties(ctx, h.Reference(), []string{"config.virtualNicManagerInfo.netConfig"}, &mh)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var ips []net.IP
0000000000000000000000000000000000000000;;		for _, nc := range mh.Config.VirtualNicManagerInfo.NetConfig {
0000000000000000000000000000000000000000;;			if nc.NicType == "management" && len(nc.CandidateVnic) > 0 {
0000000000000000000000000000000000000000;;				ip := net.ParseIP(nc.CandidateVnic[0].Spec.Ip.IpAddress)
0000000000000000000000000000000000000000;;				if ip != nil {
0000000000000000000000000000000000000000;;					ips = append(ips, ip)
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return ips, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) Disconnect(ctx context.Context) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.DisconnectHost_Task{
0000000000000000000000000000000000000000;;			This: h.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.DisconnectHost_Task(ctx, h.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(h.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) Reconnect(ctx context.Context, cnxSpec *types.HostConnectSpec, reconnectSpec *types.HostSystemReconnectSpec) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.ReconnectHost_Task{
0000000000000000000000000000000000000000;;			This:          h.Reference(),
0000000000000000000000000000000000000000;;			CnxSpec:       cnxSpec,
0000000000000000000000000000000000000000;;			ReconnectSpec: reconnectSpec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ReconnectHost_Task(ctx, h.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(h.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) EnterMaintenanceMode(ctx context.Context, timeout int32, evacuate bool, spec *types.HostMaintenanceSpec) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.EnterMaintenanceMode_Task{
0000000000000000000000000000000000000000;;			This:                  h.Reference(),
0000000000000000000000000000000000000000;;			Timeout:               timeout,
0000000000000000000000000000000000000000;;			EvacuatePoweredOffVms: types.NewBool(evacuate),
0000000000000000000000000000000000000000;;			MaintenanceSpec:       spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.EnterMaintenanceMode_Task(ctx, h.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(h.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (h HostSystem) ExitMaintenanceMode(ctx context.Context, timeout int32) (*Task, error) {
0000000000000000000000000000000000000000;;		req := types.ExitMaintenanceMode_Task{
0000000000000000000000000000000000000000;;			This:    h.Reference(),
0000000000000000000000000000000000000000;;			Timeout: timeout,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ExitMaintenanceMode_Task(ctx, h.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return NewTask(h.c, res.Returnval), nil
0000000000000000000000000000000000000000;;	}
