0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/soap"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DisabledMethodRequest struct {
0000000000000000000000000000000000000000;;		Method string `xml:"method"`
0000000000000000000000000000000000000000;;		Reason string `xml:"reasonId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type disableMethodsRequest struct {
0000000000000000000000000000000000000000;;		This   types.ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []types.ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Method []DisabledMethodRequest        `xml:"method"`
0000000000000000000000000000000000000000;;		Source string                         `xml:"sourceId"`
0000000000000000000000000000000000000000;;		Scope  bool                           `xml:"sessionScope,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type disableMethodsBody struct {
0000000000000000000000000000000000000000;;		Req *disableMethodsRequest `xml:"urn:internalvim25 DisableMethods,omitempty"`
0000000000000000000000000000000000000000;;		Res interface{}            `xml:"urn:vim25 DisableMethodsResponse,omitempty"`
0000000000000000000000000000000000000000;;		Err *soap.Fault            `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *disableMethodsBody) Fault() *soap.Fault { return b.Err }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) DisableMethods(ctx context.Context, entity []types.ManagedObjectReference, method []DisabledMethodRequest, source string) error {
0000000000000000000000000000000000000000;;		var reqBody, resBody disableMethodsBody
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody.Req = &disableMethodsRequest{
0000000000000000000000000000000000000000;;			This:   m.Reference(),
0000000000000000000000000000000000000000;;			Entity: entity,
0000000000000000000000000000000000000000;;			Method: method,
0000000000000000000000000000000000000000;;			Source: source,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.Client().RoundTrip(ctx, &reqBody, &resBody)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type enableMethodsRequest struct {
0000000000000000000000000000000000000000;;		This   types.ManagedObjectReference   `xml:"_this"`
0000000000000000000000000000000000000000;;		Entity []types.ManagedObjectReference `xml:"entity"`
0000000000000000000000000000000000000000;;		Method []string                       `xml:"method"`
0000000000000000000000000000000000000000;;		Source string                         `xml:"sourceId"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type enableMethodsBody struct {
0000000000000000000000000000000000000000;;		Req *enableMethodsRequest `xml:"urn:internalvim25 EnableMethods,omitempty"`
0000000000000000000000000000000000000000;;		Res interface{}           `xml:"urn:vim25 EnableMethodsResponse,omitempty"`
0000000000000000000000000000000000000000;;		Err *soap.Fault           `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault,omitempty"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (b *enableMethodsBody) Fault() *soap.Fault { return b.Err }
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) EnableMethods(ctx context.Context, entity []types.ManagedObjectReference, method []string, source string) error {
0000000000000000000000000000000000000000;;		var reqBody, resBody enableMethodsBody
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		reqBody.Req = &enableMethodsRequest{
0000000000000000000000000000000000000000;;			This:   m.Reference(),
0000000000000000000000000000000000000000;;			Entity: entity,
0000000000000000000000000000000000000000;;			Method: method,
0000000000000000000000000000000000000000;;			Source: source,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return m.Client().RoundTrip(ctx, &reqBody, &resBody)
0000000000000000000000000000000000000000;;	}
