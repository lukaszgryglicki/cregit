0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/host_network_system.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/host_network_system.go][vendor/github.com/vmware/govmomi/object/host_network_system.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkSystem struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostNetworkSystem(c *vim25.Client, ref types.ManagedObjectReference) *HostNetworkSystem {
0000000000000000000000000000000000000000;;		return &HostNetworkSystem{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddPortGroup wraps methods.AddPortGroup
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) AddPortGroup(ctx context.Context, portgrp types.HostPortGroupSpec) error {
0000000000000000000000000000000000000000;;		req := types.AddPortGroup{
0000000000000000000000000000000000000000;;			This:    o.Reference(),
0000000000000000000000000000000000000000;;			Portgrp: portgrp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.AddPortGroup(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddServiceConsoleVirtualNic wraps methods.AddServiceConsoleVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) AddServiceConsoleVirtualNic(ctx context.Context, portgroup string, nic types.HostVirtualNicSpec) (string, error) {
0000000000000000000000000000000000000000;;		req := types.AddServiceConsoleVirtualNic{
0000000000000000000000000000000000000000;;			This:      o.Reference(),
0000000000000000000000000000000000000000;;			Portgroup: portgroup,
0000000000000000000000000000000000000000;;			Nic:       nic,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.AddServiceConsoleVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddVirtualNic wraps methods.AddVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) AddVirtualNic(ctx context.Context, portgroup string, nic types.HostVirtualNicSpec) (string, error) {
0000000000000000000000000000000000000000;;		req := types.AddVirtualNic{
0000000000000000000000000000000000000000;;			This:      o.Reference(),
0000000000000000000000000000000000000000;;			Portgroup: portgroup,
0000000000000000000000000000000000000000;;			Nic:       nic,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.AddVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return "", err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// AddVirtualSwitch wraps methods.AddVirtualSwitch
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) AddVirtualSwitch(ctx context.Context, vswitchName string, spec *types.HostVirtualSwitchSpec) error {
0000000000000000000000000000000000000000;;		req := types.AddVirtualSwitch{
0000000000000000000000000000000000000000;;			This:        o.Reference(),
0000000000000000000000000000000000000000;;			VswitchName: vswitchName,
0000000000000000000000000000000000000000;;			Spec:        spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.AddVirtualSwitch(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryNetworkHint wraps methods.QueryNetworkHint
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) QueryNetworkHint(ctx context.Context, device []string) error {
0000000000000000000000000000000000000000;;		req := types.QueryNetworkHint{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.QueryNetworkHint(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RefreshNetworkSystem wraps methods.RefreshNetworkSystem
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RefreshNetworkSystem(ctx context.Context) error {
0000000000000000000000000000000000000000;;		req := types.RefreshNetworkSystem{
0000000000000000000000000000000000000000;;			This: o.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RefreshNetworkSystem(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemovePortGroup wraps methods.RemovePortGroup
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RemovePortGroup(ctx context.Context, pgName string) error {
0000000000000000000000000000000000000000;;		req := types.RemovePortGroup{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			PgName: pgName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemovePortGroup(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveServiceConsoleVirtualNic wraps methods.RemoveServiceConsoleVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RemoveServiceConsoleVirtualNic(ctx context.Context, device string) error {
0000000000000000000000000000000000000000;;		req := types.RemoveServiceConsoleVirtualNic{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveServiceConsoleVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveVirtualNic wraps methods.RemoveVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RemoveVirtualNic(ctx context.Context, device string) error {
0000000000000000000000000000000000000000;;		req := types.RemoveVirtualNic{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RemoveVirtualSwitch wraps methods.RemoveVirtualSwitch
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RemoveVirtualSwitch(ctx context.Context, vswitchName string) error {
0000000000000000000000000000000000000000;;		req := types.RemoveVirtualSwitch{
0000000000000000000000000000000000000000;;			This:        o.Reference(),
0000000000000000000000000000000000000000;;			VswitchName: vswitchName,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveVirtualSwitch(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// RestartServiceConsoleVirtualNic wraps methods.RestartServiceConsoleVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) RestartServiceConsoleVirtualNic(ctx context.Context, device string) error {
0000000000000000000000000000000000000000;;		req := types.RestartServiceConsoleVirtualNic{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RestartServiceConsoleVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateConsoleIpRouteConfig wraps methods.UpdateConsoleIpRouteConfig
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateConsoleIpRouteConfig(ctx context.Context, config types.BaseHostIpRouteConfig) error {
0000000000000000000000000000000000000000;;		req := types.UpdateConsoleIpRouteConfig{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateConsoleIpRouteConfig(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateDnsConfig wraps methods.UpdateDnsConfig
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateDnsConfig(ctx context.Context, config types.BaseHostDnsConfig) error {
0000000000000000000000000000000000000000;;		req := types.UpdateDnsConfig{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateDnsConfig(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateIpRouteConfig wraps methods.UpdateIpRouteConfig
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateIpRouteConfig(ctx context.Context, config types.BaseHostIpRouteConfig) error {
0000000000000000000000000000000000000000;;		req := types.UpdateIpRouteConfig{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateIpRouteConfig(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateIpRouteTableConfig wraps methods.UpdateIpRouteTableConfig
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateIpRouteTableConfig(ctx context.Context, config types.HostIpRouteTableConfig) error {
0000000000000000000000000000000000000000;;		req := types.UpdateIpRouteTableConfig{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Config: config,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateIpRouteTableConfig(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateNetworkConfig wraps methods.UpdateNetworkConfig
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateNetworkConfig(ctx context.Context, config types.HostNetworkConfig, changeMode string) (*types.HostNetworkConfigResult, error) {
0000000000000000000000000000000000000000;;		req := types.UpdateNetworkConfig{
0000000000000000000000000000000000000000;;			This:       o.Reference(),
0000000000000000000000000000000000000000;;			Config:     config,
0000000000000000000000000000000000000000;;			ChangeMode: changeMode,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.UpdateNetworkConfig(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePhysicalNicLinkSpeed wraps methods.UpdatePhysicalNicLinkSpeed
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdatePhysicalNicLinkSpeed(ctx context.Context, device string, linkSpeed *types.PhysicalNicLinkInfo) error {
0000000000000000000000000000000000000000;;		req := types.UpdatePhysicalNicLinkSpeed{
0000000000000000000000000000000000000000;;			This:      o.Reference(),
0000000000000000000000000000000000000000;;			Device:    device,
0000000000000000000000000000000000000000;;			LinkSpeed: linkSpeed,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdatePhysicalNicLinkSpeed(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdatePortGroup wraps methods.UpdatePortGroup
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdatePortGroup(ctx context.Context, pgName string, portgrp types.HostPortGroupSpec) error {
0000000000000000000000000000000000000000;;		req := types.UpdatePortGroup{
0000000000000000000000000000000000000000;;			This:    o.Reference(),
0000000000000000000000000000000000000000;;			PgName:  pgName,
0000000000000000000000000000000000000000;;			Portgrp: portgrp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdatePortGroup(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateServiceConsoleVirtualNic wraps methods.UpdateServiceConsoleVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateServiceConsoleVirtualNic(ctx context.Context, device string, nic types.HostVirtualNicSpec) error {
0000000000000000000000000000000000000000;;		req := types.UpdateServiceConsoleVirtualNic{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;			Nic:    nic,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateServiceConsoleVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateVirtualNic wraps methods.UpdateVirtualNic
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateVirtualNic(ctx context.Context, device string, nic types.HostVirtualNicSpec) error {
0000000000000000000000000000000000000000;;		req := types.UpdateVirtualNic{
0000000000000000000000000000000000000000;;			This:   o.Reference(),
0000000000000000000000000000000000000000;;			Device: device,
0000000000000000000000000000000000000000;;			Nic:    nic,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateVirtualNic(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// UpdateVirtualSwitch wraps methods.UpdateVirtualSwitch
0000000000000000000000000000000000000000;;	func (o HostNetworkSystem) UpdateVirtualSwitch(ctx context.Context, vswitchName string, spec types.HostVirtualSwitchSpec) error {
0000000000000000000000000000000000000000;;		req := types.UpdateVirtualSwitch{
0000000000000000000000000000000000000000;;			This:        o.Reference(),
0000000000000000000000000000000000000000;;			VswitchName: vswitchName,
0000000000000000000000000000000000000000;;			Spec:        spec,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateVirtualSwitch(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
