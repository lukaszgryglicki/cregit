0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/ovf_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/ovf_manager.go][vendor/github.com/vmware/govmomi/object/ovf_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewOvfManager(c *vim25.Client) *OvfManager {
0000000000000000000000000000000000000000;;		o := OvfManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.OvfManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &o
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateDescriptor wraps methods.CreateDescriptor
0000000000000000000000000000000000000000;;	func (o OvfManager) CreateDescriptor(ctx context.Context, obj Reference, cdp types.OvfCreateDescriptorParams) (*types.OvfCreateDescriptorResult, error) {
0000000000000000000000000000000000000000;;		req := types.CreateDescriptor{
0000000000000000000000000000000000000000;;			This: o.Reference(),
0000000000000000000000000000000000000000;;			Obj:  obj.Reference(),
0000000000000000000000000000000000000000;;			Cdp:  cdp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CreateDescriptor(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// CreateImportSpec wraps methods.CreateImportSpec
0000000000000000000000000000000000000000;;	func (o OvfManager) CreateImportSpec(ctx context.Context, ovfDescriptor string, resourcePool Reference, datastore Reference, cisp types.OvfCreateImportSpecParams) (*types.OvfCreateImportSpecResult, error) {
0000000000000000000000000000000000000000;;		req := types.CreateImportSpec{
0000000000000000000000000000000000000000;;			This:          o.Reference(),
0000000000000000000000000000000000000000;;			OvfDescriptor: ovfDescriptor,
0000000000000000000000000000000000000000;;			ResourcePool:  resourcePool.Reference(),
0000000000000000000000000000000000000000;;			Datastore:     datastore.Reference(),
0000000000000000000000000000000000000000;;			Cisp:          cisp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.CreateImportSpec(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ParseDescriptor wraps methods.ParseDescriptor
0000000000000000000000000000000000000000;;	func (o OvfManager) ParseDescriptor(ctx context.Context, ovfDescriptor string, pdp types.OvfParseDescriptorParams) (*types.OvfParseDescriptorResult, error) {
0000000000000000000000000000000000000000;;		req := types.ParseDescriptor{
0000000000000000000000000000000000000000;;			This:          o.Reference(),
0000000000000000000000000000000000000000;;			OvfDescriptor: ovfDescriptor,
0000000000000000000000000000000000000000;;			Pdp:           pdp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ParseDescriptor(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// ValidateHost wraps methods.ValidateHost
0000000000000000000000000000000000000000;;	func (o OvfManager) ValidateHost(ctx context.Context, ovfDescriptor string, host Reference, vhp types.OvfValidateHostParams) (*types.OvfValidateHostResult, error) {
0000000000000000000000000000000000000000;;		req := types.ValidateHost{
0000000000000000000000000000000000000000;;			This:          o.Reference(),
0000000000000000000000000000000000000000;;			OvfDescriptor: ovfDescriptor,
0000000000000000000000000000000000000000;;			Host:          host.Reference(),
0000000000000000000000000000000000000000;;			Vhp:           vhp,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.ValidateHost(ctx, o.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &res.Returnval, nil
0000000000000000000000000000000000000000;;	}
