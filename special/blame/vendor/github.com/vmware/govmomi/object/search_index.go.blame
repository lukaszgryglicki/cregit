0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/search_index.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/search_index.go][vendor/github.com/vmware/govmomi/object/search_index.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchIndex struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewSearchIndex(c *vim25.Client) *SearchIndex {
0000000000000000000000000000000000000000;;		s := SearchIndex{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.SearchIndex),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &s
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindByDatastorePath finds a virtual machine by its location on a datastore.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindByDatastorePath(ctx context.Context, dc *Datacenter, path string) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindByDatastorePath{
0000000000000000000000000000000000000000;;			This:       s.Reference(),
0000000000000000000000000000000000000000;;			Datacenter: dc.Reference(),
0000000000000000000000000000000000000000;;			Path:       path,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindByDatastorePath(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindByDnsName finds a virtual machine or host by DNS name.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindByDnsName(ctx context.Context, dc *Datacenter, dnsName string, vmSearch bool) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindByDnsName{
0000000000000000000000000000000000000000;;			This:     s.Reference(),
0000000000000000000000000000000000000000;;			DnsName:  dnsName,
0000000000000000000000000000000000000000;;			VmSearch: vmSearch,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindByDnsName(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindByInventoryPath finds a managed entity based on its location in the inventory.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindByInventoryPath(ctx context.Context, path string) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindByInventoryPath{
0000000000000000000000000000000000000000;;			This:          s.Reference(),
0000000000000000000000000000000000000000;;			InventoryPath: path,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindByInventoryPath(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindByIp finds a virtual machine or host by IP address.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindByIp(ctx context.Context, dc *Datacenter, ip string, vmSearch bool) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindByIp{
0000000000000000000000000000000000000000;;			This:     s.Reference(),
0000000000000000000000000000000000000000;;			Ip:       ip,
0000000000000000000000000000000000000000;;			VmSearch: vmSearch,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindByIp(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindByUuid finds a virtual machine or host by UUID.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindByUuid(ctx context.Context, dc *Datacenter, uuid string, vmSearch bool, instanceUuid *bool) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindByUuid{
0000000000000000000000000000000000000000;;			This:         s.Reference(),
0000000000000000000000000000000000000000;;			Uuid:         uuid,
0000000000000000000000000000000000000000;;			VmSearch:     vmSearch,
0000000000000000000000000000000000000000;;			InstanceUuid: instanceUuid,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		if dc != nil {
0000000000000000000000000000000000000000;;			ref := dc.Reference()
0000000000000000000000000000000000000000;;			req.Datacenter = &ref
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindByUuid(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FindChild finds a particular child based on a managed entity name.
0000000000000000000000000000000000000000;;	func (s SearchIndex) FindChild(ctx context.Context, entity Reference, name string) (Reference, error) {
0000000000000000000000000000000000000000;;		req := types.FindChild{
0000000000000000000000000000000000000000;;			This:   s.Reference(),
0000000000000000000000000000000000000000;;			Entity: entity.Reference(),
0000000000000000000000000000000000000000;;			Name:   name,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.FindChild(ctx, s.c, &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if res.Returnval == nil {
0000000000000000000000000000000000000000;;			return nil, nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		return NewReference(s.c, *res.Returnval), nil
0000000000000000000000000000000000000000;;	}
