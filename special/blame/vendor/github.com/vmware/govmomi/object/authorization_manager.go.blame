0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/object/authorization_manager.go[Godeps/_workspace/src/github.com/vmware/govmomi/object/authorization_manager.go][vendor/github.com/vmware/govmomi/object/authorization_manager.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/mo"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationManager struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAuthorizationManager(c *vim25.Client) *AuthorizationManager {
0000000000000000000000000000000000000000;;		m := AuthorizationManager{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, *c.ServiceContent.AuthorizationManager),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationRoleList []types.AuthorizationRole
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l AuthorizationRoleList) ById(id int32) *types.AuthorizationRole {
0000000000000000000000000000000000000000;;		for _, role := range l {
0000000000000000000000000000000000000000;;			if role.RoleId == id {
0000000000000000000000000000000000000000;;				return &role
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (l AuthorizationRoleList) ByName(name string) *types.AuthorizationRole {
0000000000000000000000000000000000000000;;		for _, role := range l {
0000000000000000000000000000000000000000;;			if role.Name == name {
0000000000000000000000000000000000000000;;				return &role
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RoleList(ctx context.Context) (AuthorizationRoleList, error) {
0000000000000000000000000000000000000000;;		var am mo.AuthorizationManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err := m.Properties(ctx, m.Reference(), []string{"roleList"}, &am)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return AuthorizationRoleList(am.RoleList), nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RetrieveEntityPermissions(ctx context.Context, entity types.ManagedObjectReference, inherited bool) ([]types.Permission, error) {
0000000000000000000000000000000000000000;;		req := types.RetrieveEntityPermissions{
0000000000000000000000000000000000000000;;			This:      m.Reference(),
0000000000000000000000000000000000000000;;			Entity:    entity,
0000000000000000000000000000000000000000;;			Inherited: inherited,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.RetrieveEntityPermissions(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RemoveEntityPermission(ctx context.Context, entity types.ManagedObjectReference, user string, isGroup bool) error {
0000000000000000000000000000000000000000;;		req := types.RemoveEntityPermission{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			Entity:  entity,
0000000000000000000000000000000000000000;;			User:    user,
0000000000000000000000000000000000000000;;			IsGroup: isGroup,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveEntityPermission(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) SetEntityPermissions(ctx context.Context, entity types.ManagedObjectReference, permission []types.Permission) error {
0000000000000000000000000000000000000000;;		req := types.SetEntityPermissions{
0000000000000000000000000000000000000000;;			This:       m.Reference(),
0000000000000000000000000000000000000000;;			Entity:     entity,
0000000000000000000000000000000000000000;;			Permission: permission,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.SetEntityPermissions(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RetrieveRolePermissions(ctx context.Context, id int32) ([]types.Permission, error) {
0000000000000000000000000000000000000000;;		req := types.RetrieveRolePermissions{
0000000000000000000000000000000000000000;;			This:   m.Reference(),
0000000000000000000000000000000000000000;;			RoleId: id,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.RetrieveRolePermissions(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RetrieveAllPermissions(ctx context.Context) ([]types.Permission, error) {
0000000000000000000000000000000000000000;;		req := types.RetrieveAllPermissions{
0000000000000000000000000000000000000000;;			This: m.Reference(),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.RetrieveAllPermissions(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) AddRole(ctx context.Context, name string, ids []string) (int32, error) {
0000000000000000000000000000000000000000;;		req := types.AddAuthorizationRole{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			Name:    name,
0000000000000000000000000000000000000000;;			PrivIds: ids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.AddAuthorizationRole(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return -1, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) RemoveRole(ctx context.Context, id int32, failIfUsed bool) error {
0000000000000000000000000000000000000000;;		req := types.RemoveAuthorizationRole{
0000000000000000000000000000000000000000;;			This:       m.Reference(),
0000000000000000000000000000000000000000;;			RoleId:     id,
0000000000000000000000000000000000000000;;			FailIfUsed: failIfUsed,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.RemoveAuthorizationRole(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) UpdateRole(ctx context.Context, id int32, name string, ids []string) error {
0000000000000000000000000000000000000000;;		req := types.UpdateAuthorizationRole{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			RoleId:  id,
0000000000000000000000000000000000000000;;			NewName: name,
0000000000000000000000000000000000000000;;			PrivIds: ids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		_, err := methods.UpdateAuthorizationRole(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
