0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2017 VMware, Inc. All Rights Reserved.
f6ad395f98e8f42c981d72ea247db1a4edb07eff;;	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package object
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"encoding/json"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/methods"
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystem struct {
0000000000000000000000000000000000000000;;		Common
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewHostVsanInternalSystem(c *vim25.Client, ref types.ManagedObjectReference) *HostVsanInternalSystem {
0000000000000000000000000000000000000000;;		m := HostVsanInternalSystem{
0000000000000000000000000000000000000000;;			Common: NewCommon(c, ref),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &m
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// QueryVsanObjectUuidsByFilter returns vSAN DOM object uuids by filter.
0000000000000000000000000000000000000000;;	func (m HostVsanInternalSystem) QueryVsanObjectUuidsByFilter(ctx context.Context, uuids []string, limit int32, version int32) ([]string, error) {
0000000000000000000000000000000000000000;;		req := types.QueryVsanObjectUuidsByFilter{
0000000000000000000000000000000000000000;;			This:    m.Reference(),
0000000000000000000000000000000000000000;;			Uuids:   uuids,
0000000000000000000000000000000000000000;;			Limit:   limit,
0000000000000000000000000000000000000000;;			Version: version,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.QueryVsanObjectUuidsByFilter(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanObjExtAttrs struct {
0000000000000000000000000000000000000000;;		Type  string `json:"Object type"`
0000000000000000000000000000000000000000;;		Class string `json:"Object class"`
0000000000000000000000000000000000000000;;		Size  string `json:"Object size"`
0000000000000000000000000000000000000000;;		Path  string `json:"Object path"`
0000000000000000000000000000000000000000;;		Name  string `json:"User friendly name"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *VsanObjExtAttrs) DatastorePath(dir string) string {
0000000000000000000000000000000000000000;;		l := len(dir)
0000000000000000000000000000000000000000;;		path := a.Path
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if len(path) >= l {
0000000000000000000000000000000000000000;;			path = a.Path[l:]
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if path != "" {
0000000000000000000000000000000000000000;;			return path
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return a.Name // vmnamespace
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// GetVsanObjExtAttrs is internal and intended for troubleshooting/debugging situations in the field.
0000000000000000000000000000000000000000;;	// WARNING: This API can be slow because we do IOs (reads) to all the objects.
0000000000000000000000000000000000000000;;	func (m HostVsanInternalSystem) GetVsanObjExtAttrs(ctx context.Context, uuids []string) (map[string]VsanObjExtAttrs, error) {
0000000000000000000000000000000000000000;;		req := types.GetVsanObjExtAttrs{
0000000000000000000000000000000000000000;;			This:  m.Reference(),
0000000000000000000000000000000000000000;;			Uuids: uuids,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.GetVsanObjExtAttrs(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var attrs map[string]VsanObjExtAttrs
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		err = json.Unmarshal([]byte(res.Returnval), &attrs)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return attrs, err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// DeleteVsanObjects is internal and intended for troubleshooting/debugging only.
0000000000000000000000000000000000000000;;	// WARNING: This API can be slow because we do IOs to all the objects.
0000000000000000000000000000000000000000;;	// DOM won't allow access to objects which have lost quorum. Such objects can be deleted with the optional "force" flag.
0000000000000000000000000000000000000000;;	// These objects may however re-appear with quorum if the absent components come back (network partition gets resolved, etc.)
0000000000000000000000000000000000000000;;	func (m HostVsanInternalSystem) DeleteVsanObjects(ctx context.Context, uuids []string, force *bool) ([]types.HostVsanInternalSystemDeleteVsanObjectsResult, error) {
0000000000000000000000000000000000000000;;		req := types.DeleteVsanObjects{
0000000000000000000000000000000000000000;;			This:  m.Reference(),
0000000000000000000000000000000000000000;;			Uuids: uuids,
0000000000000000000000000000000000000000;;			Force: force,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		res, err := methods.DeleteVsanObjects(ctx, m.Client(), &req)
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			return nil, err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return res.Returnval, nil
0000000000000000000000000000000000000000;;	}
