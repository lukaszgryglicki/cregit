0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/soap/error.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/soap/error.go][vendor/github.com/vmware/govmomi/vim25/soap/error.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package soap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type regularError struct {
0000000000000000000000000000000000000000;;		err error
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r regularError) Error() string {
0000000000000000000000000000000000000000;;		return r.err.Error()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type soapFaultError struct {
0000000000000000000000000000000000000000;;		fault *Fault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s soapFaultError) Error() string {
0000000000000000000000000000000000000000;;		msg := s.fault.String
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if msg == "" {
0000000000000000000000000000000000000000;;			msg = reflect.TypeOf(s.fault.Detail.Fault).Name()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return fmt.Sprintf("%s: %s", s.fault.Code, msg)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type vimFaultError struct {
0000000000000000000000000000000000000000;;		fault types.BaseMethodFault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v vimFaultError) Error() string {
0000000000000000000000000000000000000000;;		typ := reflect.TypeOf(v.fault)
0000000000000000000000000000000000000000;;		for typ.Kind() == reflect.Ptr {
0000000000000000000000000000000000000000;;			typ = typ.Elem()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return typ.Name()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (v vimFaultError) Fault() types.BaseMethodFault {
0000000000000000000000000000000000000000;;		return v.fault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Wrap(err error) error {
0000000000000000000000000000000000000000;;		switch err.(type) {
0000000000000000000000000000000000000000;;		case regularError:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		case soapFaultError:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		case vimFaultError:
0000000000000000000000000000000000000000;;			return err
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return WrapRegularError(err)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WrapRegularError(err error) error {
0000000000000000000000000000000000000000;;		return regularError{err}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsRegularError(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(regularError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ToRegularError(err error) error {
0000000000000000000000000000000000000000;;		return err.(regularError).err
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WrapSoapFault(f *Fault) error {
0000000000000000000000000000000000000000;;		return soapFaultError{f}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsSoapFault(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(soapFaultError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ToSoapFault(err error) *Fault {
0000000000000000000000000000000000000000;;		return err.(soapFaultError).fault
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func WrapVimFault(v types.BaseMethodFault) error {
0000000000000000000000000000000000000000;;		return vimFaultError{v}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func IsVimFault(err error) bool {
0000000000000000000000000000000000000000;;		_, ok := err.(vimFaultError)
0000000000000000000000000000000000000000;;		return ok
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func ToVimFault(err error) types.BaseMethodFault {
0000000000000000000000000000000000000000;;		return err.(vimFaultError).fault
0000000000000000000000000000000000000000;;	}
