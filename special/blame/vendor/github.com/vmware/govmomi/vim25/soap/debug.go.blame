0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/soap/debug.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/soap/debug.go][vendor/github.com/vmware/govmomi/vim25/soap/debug.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package soap
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"fmt"
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"net/http"
0000000000000000000000000000000000000000;;		"net/http/httputil"
0000000000000000000000000000000000000000;;		"sync/atomic"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/debug"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// teeReader wraps io.TeeReader and patches through the Close() function.
0000000000000000000000000000000000000000;;	type teeReader struct {
0000000000000000000000000000000000000000;;		io.Reader
0000000000000000000000000000000000000000;;		io.Closer
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newTeeReader(rc io.ReadCloser, w io.Writer) io.ReadCloser {
0000000000000000000000000000000000000000;;		return teeReader{
0000000000000000000000000000000000000000;;			Reader: io.TeeReader(rc, w),
0000000000000000000000000000000000000000;;			Closer: rc,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// debugRoundTrip contains state and logic needed to debug a single round trip.
0000000000000000000000000000000000000000;;	type debugRoundTrip struct {
0000000000000000000000000000000000000000;;		cn  uint64         // Client number
0000000000000000000000000000000000000000;;		rn  uint64         // Request number
0000000000000000000000000000000000000000;;		log io.WriteCloser // Request log
0000000000000000000000000000000000000000;;		cs  []io.Closer    // Files that need closing when done
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) logf(format string, a ...interface{}) {
0000000000000000000000000000000000000000;;		now := time.Now().Format("2006-01-02T15-04-05.000000000")
0000000000000000000000000000000000000000;;		fmt.Fprintf(d.log, "%s - %04d: ", now, d.rn)
0000000000000000000000000000000000000000;;		fmt.Fprintf(d.log, format, a...)
0000000000000000000000000000000000000000;;		fmt.Fprintf(d.log, "\n")
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) enabled() bool {
0000000000000000000000000000000000000000;;		return d != nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) done() {
0000000000000000000000000000000000000000;;		for _, c := range d.cs {
0000000000000000000000000000000000000000;;			c.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) newFile(suffix string) io.WriteCloser {
0000000000000000000000000000000000000000;;		return debug.NewFile(fmt.Sprintf("%d-%04d.%s", d.cn, d.rn, suffix))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) debugRequest(req *http.Request) {
0000000000000000000000000000000000000000;;		if d == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var wc io.WriteCloser
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Capture headers
0000000000000000000000000000000000000000;;		wc = d.newFile("req.headers")
0000000000000000000000000000000000000000;;		b, _ := httputil.DumpRequest(req, false)
0000000000000000000000000000000000000000;;		wc.Write(b)
0000000000000000000000000000000000000000;;		wc.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Capture body
0000000000000000000000000000000000000000;;		wc = d.newFile("req.xml")
0000000000000000000000000000000000000000;;		req.Body = newTeeReader(req.Body, wc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delay closing until marked done
0000000000000000000000000000000000000000;;		d.cs = append(d.cs, wc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugRoundTrip) debugResponse(res *http.Response) {
0000000000000000000000000000000000000000;;		if d == nil {
0000000000000000000000000000000000000000;;			return
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		var wc io.WriteCloser
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Capture headers
0000000000000000000000000000000000000000;;		wc = d.newFile("res.headers")
0000000000000000000000000000000000000000;;		b, _ := httputil.DumpResponse(res, false)
0000000000000000000000000000000000000000;;		wc.Write(b)
0000000000000000000000000000000000000000;;		wc.Close()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Capture body
0000000000000000000000000000000000000000;;		wc = d.newFile("res.xml")
0000000000000000000000000000000000000000;;		res.Body = newTeeReader(res.Body, wc)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// Delay closing until marked done
0000000000000000000000000000000000000000;;		d.cs = append(d.cs, wc)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var cn uint64 // Client counter
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// debugContainer wraps the debugging state for a single client.
0000000000000000000000000000000000000000;;	type debugContainer struct {
0000000000000000000000000000000000000000;;		cn  uint64         // Client number
0000000000000000000000000000000000000000;;		rn  uint64         // Request counter
0000000000000000000000000000000000000000;;		log io.WriteCloser // Request log
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func newDebug() *debugContainer {
0000000000000000000000000000000000000000;;		d := debugContainer{
0000000000000000000000000000000000000000;;			cn: atomic.AddUint64(&cn, 1),
0000000000000000000000000000000000000000;;			rn: 0,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		if !debug.Enabled() {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		d.log = debug.NewFile(fmt.Sprintf("%d-client.log", d.cn))
0000000000000000000000000000000000000000;;		return &d
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (d *debugContainer) newRoundTrip() *debugRoundTrip {
0000000000000000000000000000000000000000;;		if d == nil {
0000000000000000000000000000000000000000;;			return nil
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		drt := debugRoundTrip{
0000000000000000000000000000000000000000;;			cn:  d.cn,
0000000000000000000000000000000000000000;;			rn:  atomic.AddUint64(&d.rn, 1),
0000000000000000000000000000000000000000;;			log: d.log,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return &drt
0000000000000000000000000000000000000000;;	}
