0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/debug/debug.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/debug/debug.go][vendor/github.com/vmware/govmomi/vim25/debug/debug.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package debug
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"io"
0000000000000000000000000000000000000000;;		"os"
0000000000000000000000000000000000000000;;		"path"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Provider specified the interface types must implement to be used as a
0000000000000000000000000000000000000000;;	// debugging sink. Having multiple such sink implementations allows it to be
0000000000000000000000000000000000000000;;	// changed externally (for example when running tests).
0000000000000000000000000000000000000000;;	type Provider interface {
0000000000000000000000000000000000000000;;		NewFile(s string) io.WriteCloser
0000000000000000000000000000000000000000;;		Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	var currentProvider Provider = nil
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func SetProvider(p Provider) {
0000000000000000000000000000000000000000;;		if currentProvider != nil {
0000000000000000000000000000000000000000;;			currentProvider.Flush()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;		currentProvider = p
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Enabled returns whether debugging is enabled or not.
0000000000000000000000000000000000000000;;	func Enabled() bool {
0000000000000000000000000000000000000000;;		return currentProvider != nil
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// NewFile dispatches to the current provider's NewFile function.
0000000000000000000000000000000000000000;;	func NewFile(s string) io.WriteCloser {
0000000000000000000000000000000000000000;;		return currentProvider.NewFile(s)
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Flush dispatches to the current provider's Flush function.
0000000000000000000000000000000000000000;;	func Flush() {
0000000000000000000000000000000000000000;;		currentProvider.Flush()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// FileProvider implements a debugging provider that creates a real file for
0000000000000000000000000000000000000000;;	// every call to NewFile. It maintains a list of all files that it creates,
0000000000000000000000000000000000000000;;	// such that it can close them when its Flush function is called.
0000000000000000000000000000000000000000;;	type FileProvider struct {
0000000000000000000000000000000000000000;;		Path string
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		files []*os.File
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fp *FileProvider) NewFile(p string) io.WriteCloser {
0000000000000000000000000000000000000000;;		f, err := os.Create(path.Join(fp.Path, p))
0000000000000000000000000000000000000000;;		if err != nil {
0000000000000000000000000000000000000000;;			panic(err)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		fp.files = append(fp.files, f)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return f
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (fp *FileProvider) Flush() {
0000000000000000000000000000000000000000;;		for _, f := range fp.files {
0000000000000000000000000000000000000000;;			f.Close()
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
