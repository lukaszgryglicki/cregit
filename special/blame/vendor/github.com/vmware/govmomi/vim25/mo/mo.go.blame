0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014-2017 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/mo/mo.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/mo/mo.go][vendor/github.com/vmware/govmomi/vim25/mo/mo.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package mo
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"reflect"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/types"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Alarm struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info types.AlarmInfo `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Alarm"] = reflect.TypeOf((*Alarm)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AlarmManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DefaultExpression []types.BaseAlarmExpression `mo:"defaultExpression"`
0000000000000000000000000000000000000000;;		Description       types.AlarmDescription      `mo:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AlarmManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AlarmManager"] = reflect.TypeOf((*AlarmManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type AuthorizationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PrivilegeList []types.AuthorizationPrivilege `mo:"privilegeList"`
0000000000000000000000000000000000000000;;		RoleList      []types.AuthorizationRole      `mo:"roleList"`
0000000000000000000000000000000000000000;;		Description   types.AuthorizationDescription `mo:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m AuthorizationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["AuthorizationManager"] = reflect.TypeOf((*AuthorizationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CertificateManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CertificateManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CertificateManager"] = reflect.TypeOf((*CertificateManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterComputeResource struct {
0000000000000000000000000000000000000000;;		ComputeResource
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Configuration     types.ClusterConfigInfo          `mo:"configuration"`
0000000000000000000000000000000000000000;;		Recommendation    []types.ClusterRecommendation    `mo:"recommendation"`
0000000000000000000000000000000000000000;;		DrsRecommendation []types.ClusterDrsRecommendation `mo:"drsRecommendation"`
0000000000000000000000000000000000000000;;		MigrationHistory  []types.ClusterDrsMigration      `mo:"migrationHistory"`
0000000000000000000000000000000000000000;;		ActionHistory     []types.ClusterActionHistory     `mo:"actionHistory"`
0000000000000000000000000000000000000000;;		DrsFault          []types.ClusterDrsFaults         `mo:"drsFault"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterComputeResource"] = reflect.TypeOf((*ClusterComputeResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterEVCManager struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ManagedCluster types.ManagedObjectReference    `mo:"managedCluster"`
0000000000000000000000000000000000000000;;		EvcState       types.ClusterEVCManagerEVCState `mo:"evcState"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterEVCManager"] = reflect.TypeOf((*ClusterEVCManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfile struct {
0000000000000000000000000000000000000000;;		Profile
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfile"] = reflect.TypeOf((*ClusterProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ClusterProfileManager struct {
0000000000000000000000000000000000000000;;		ProfileManager
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ClusterProfileManager"] = reflect.TypeOf((*ClusterProfileManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ComputeResource struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ResourcePool       *types.ManagedObjectReference       `mo:"resourcePool"`
0000000000000000000000000000000000000000;;		Host               []types.ManagedObjectReference      `mo:"host"`
0000000000000000000000000000000000000000;;		Datastore          []types.ManagedObjectReference      `mo:"datastore"`
0000000000000000000000000000000000000000;;		Network            []types.ManagedObjectReference      `mo:"network"`
0000000000000000000000000000000000000000;;		Summary            types.BaseComputeResourceSummary    `mo:"summary"`
0000000000000000000000000000000000000000;;		EnvironmentBrowser *types.ManagedObjectReference       `mo:"environmentBrowser"`
0000000000000000000000000000000000000000;;		ConfigurationEx    types.BaseComputeResourceConfigInfo `mo:"configurationEx"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ComputeResource) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ComputeResource"] = reflect.TypeOf((*ComputeResource)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ContainerView struct {
0000000000000000000000000000000000000000;;		ManagedObjectView
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Container types.ManagedObjectReference `mo:"container"`
0000000000000000000000000000000000000000;;		Type      []string                     `mo:"type"`
0000000000000000000000000000000000000000;;		Recursive bool                         `mo:"recursive"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ContainerView"] = reflect.TypeOf((*ContainerView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Enabled bool `mo:"enabled"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CryptoManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManager"] = reflect.TypeOf((*CryptoManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CryptoManagerKmip struct {
0000000000000000000000000000000000000000;;		CryptoManager
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		KmipServers []types.KmipClusterInfo `mo:"kmipServers"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CryptoManagerKmip"] = reflect.TypeOf((*CryptoManagerKmip)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomFieldsManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Field []types.CustomFieldDef `mo:"field"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomFieldsManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomFieldsManager"] = reflect.TypeOf((*CustomFieldsManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type CustomizationSpecManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info          []types.CustomizationSpecInfo `mo:"info"`
0000000000000000000000000000000000000000;;		EncryptionKey []byte                        `mo:"encryptionKey"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m CustomizationSpecManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["CustomizationSpecManager"] = reflect.TypeOf((*CustomizationSpecManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Datacenter struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VmFolder        types.ManagedObjectReference   `mo:"vmFolder"`
0000000000000000000000000000000000000000;;		HostFolder      types.ManagedObjectReference   `mo:"hostFolder"`
0000000000000000000000000000000000000000;;		DatastoreFolder types.ManagedObjectReference   `mo:"datastoreFolder"`
0000000000000000000000000000000000000000;;		NetworkFolder   types.ManagedObjectReference   `mo:"networkFolder"`
0000000000000000000000000000000000000000;;		Datastore       []types.ManagedObjectReference `mo:"datastore"`
0000000000000000000000000000000000000000;;		Network         []types.ManagedObjectReference `mo:"network"`
0000000000000000000000000000000000000000;;		Configuration   types.DatacenterConfigInfo     `mo:"configuration"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Datacenter) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Datacenter"] = reflect.TypeOf((*Datacenter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Datastore struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info              types.BaseDatastoreInfo        `mo:"info"`
0000000000000000000000000000000000000000;;		Summary           types.DatastoreSummary         `mo:"summary"`
0000000000000000000000000000000000000000;;		Host              []types.DatastoreHostMount     `mo:"host"`
0000000000000000000000000000000000000000;;		Vm                []types.ManagedObjectReference `mo:"vm"`
0000000000000000000000000000000000000000;;		Browser           types.ManagedObjectReference   `mo:"browser"`
0000000000000000000000000000000000000000;;		Capability        types.DatastoreCapability      `mo:"capability"`
0000000000000000000000000000000000000000;;		IormConfiguration *types.StorageIORMInfo         `mo:"iormConfiguration"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Datastore) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Datastore"] = reflect.TypeOf((*Datastore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DatastoreNamespaceManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m DatastoreNamespaceManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DatastoreNamespaceManager"] = reflect.TypeOf((*DatastoreNamespaceManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DiagnosticManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m DiagnosticManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DiagnosticManager"] = reflect.TypeOf((*DiagnosticManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualPortgroup struct {
0000000000000000000000000000000000000000;;		Network
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Key      string                      `mo:"key"`
0000000000000000000000000000000000000000;;		Config   types.DVPortgroupConfigInfo `mo:"config"`
0000000000000000000000000000000000000000;;		PortKeys []string                    `mo:"portKeys"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualPortgroup"] = reflect.TypeOf((*DistributedVirtualPortgroup)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitch struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Uuid                string                         `mo:"uuid"`
0000000000000000000000000000000000000000;;		Capability          types.DVSCapability            `mo:"capability"`
0000000000000000000000000000000000000000;;		Summary             types.DVSSummary               `mo:"summary"`
0000000000000000000000000000000000000000;;		Config              types.BaseDVSConfigInfo        `mo:"config"`
0000000000000000000000000000000000000000;;		NetworkResourcePool []types.DVSNetworkResourcePool `mo:"networkResourcePool"`
0000000000000000000000000000000000000000;;		Portgroup           []types.ManagedObjectReference `mo:"portgroup"`
0000000000000000000000000000000000000000;;		Runtime             *types.DVSRuntimeInfo          `mo:"runtime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *DistributedVirtualSwitch) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitch"] = reflect.TypeOf((*DistributedVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type DistributedVirtualSwitchManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m DistributedVirtualSwitchManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["DistributedVirtualSwitchManager"] = reflect.TypeOf((*DistributedVirtualSwitchManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EnvironmentBrowser struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DatastoreBrowser *types.ManagedObjectReference `mo:"datastoreBrowser"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m EnvironmentBrowser) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EnvironmentBrowser"] = reflect.TypeOf((*EnvironmentBrowser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventHistoryCollector struct {
0000000000000000000000000000000000000000;;		HistoryCollector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LatestPage []types.BaseEvent `mo:"latestPage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventHistoryCollector"] = reflect.TypeOf((*EventHistoryCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type EventManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description  types.EventDescription `mo:"description"`
0000000000000000000000000000000000000000;;		LatestEvent  types.BaseEvent        `mo:"latestEvent"`
0000000000000000000000000000000000000000;;		MaxCollector int32                  `mo:"maxCollector"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m EventManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["EventManager"] = reflect.TypeOf((*EventManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensibleManagedObject struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Value          []types.BaseCustomFieldValue `mo:"value"`
0000000000000000000000000000000000000000;;		AvailableField []types.CustomFieldDef       `mo:"availableField"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensibleManagedObject) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensibleManagedObject"] = reflect.TypeOf((*ExtensibleManagedObject)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ExtensionManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ExtensionList []types.Extension `mo:"extensionList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ExtensionManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ExtensionManager"] = reflect.TypeOf((*ExtensionManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailoverClusterConfigurator struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DisabledConfigureMethod []string `mo:"disabledConfigureMethod"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FailoverClusterConfigurator) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailoverClusterConfigurator"] = reflect.TypeOf((*FailoverClusterConfigurator)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FailoverClusterManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DisabledClusterMethod []string `mo:"disabledClusterMethod"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FailoverClusterManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FailoverClusterManager"] = reflect.TypeOf((*FailoverClusterManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type FileManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m FileManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["FileManager"] = reflect.TypeOf((*FileManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Folder struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ChildType   []string                       `mo:"childType"`
0000000000000000000000000000000000000000;;		ChildEntity []types.ManagedObjectReference `mo:"childEntity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Folder) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Folder"] = reflect.TypeOf((*Folder)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAliasManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestAliasManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAliasManager"] = reflect.TypeOf((*GuestAliasManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestAuthManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestAuthManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestAuthManager"] = reflect.TypeOf((*GuestAuthManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestFileManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestFileManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestFileManager"] = reflect.TypeOf((*GuestFileManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestOperationsManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		AuthManager                 *types.ManagedObjectReference `mo:"authManager"`
0000000000000000000000000000000000000000;;		FileManager                 *types.ManagedObjectReference `mo:"fileManager"`
0000000000000000000000000000000000000000;;		ProcessManager              *types.ManagedObjectReference `mo:"processManager"`
0000000000000000000000000000000000000000;;		GuestWindowsRegistryManager *types.ManagedObjectReference `mo:"guestWindowsRegistryManager"`
0000000000000000000000000000000000000000;;		AliasManager                *types.ManagedObjectReference `mo:"aliasManager"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestOperationsManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestOperationsManager"] = reflect.TypeOf((*GuestOperationsManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestProcessManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestProcessManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestProcessManager"] = reflect.TypeOf((*GuestProcessManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type GuestWindowsRegistryManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m GuestWindowsRegistryManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["GuestWindowsRegistryManager"] = reflect.TypeOf((*GuestWindowsRegistryManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HealthUpdateManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HealthUpdateManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HealthUpdateManager"] = reflect.TypeOf((*HealthUpdateManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HistoryCollector struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filter types.AnyType `mo:"filter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HistoryCollector) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HistoryCollector"] = reflect.TypeOf((*HistoryCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAccessManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LockdownMode types.HostLockdownMode `mo:"lockdownMode"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostAccessManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAccessManager"] = reflect.TypeOf((*HostAccessManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostActiveDirectoryAuthentication struct {
0000000000000000000000000000000000000000;;		HostDirectoryStore
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostActiveDirectoryAuthentication"] = reflect.TypeOf((*HostActiveDirectoryAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAuthenticationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info           types.HostAuthenticationManagerInfo `mo:"info"`
0000000000000000000000000000000000000000;;		SupportedStore []types.ManagedObjectReference      `mo:"supportedStore"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostAuthenticationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAuthenticationManager"] = reflect.TypeOf((*HostAuthenticationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAuthenticationStore struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info types.BaseHostAuthenticationStoreInfo `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostAuthenticationStore) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAuthenticationStore"] = reflect.TypeOf((*HostAuthenticationStore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostAutoStartManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config types.HostAutoStartManagerConfig `mo:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostAutoStartManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostAutoStartManager"] = reflect.TypeOf((*HostAutoStartManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostBootDeviceSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostBootDeviceSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostBootDeviceSystem"] = reflect.TypeOf((*HostBootDeviceSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCacheConfigurationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CacheConfigurationInfo []types.HostCacheConfigurationInfo `mo:"cacheConfigurationInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostCacheConfigurationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCacheConfigurationManager"] = reflect.TypeOf((*HostCacheConfigurationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCertificateManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		CertificateInfo types.HostCertificateManagerCertificateInfo `mo:"certificateInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostCertificateManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCertificateManager"] = reflect.TypeOf((*HostCertificateManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostCpuSchedulerSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		HyperthreadInfo *types.HostHyperThreadScheduleInfo `mo:"hyperthreadInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostCpuSchedulerSystem"] = reflect.TypeOf((*HostCpuSchedulerSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreBrowser struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore     []types.ManagedObjectReference `mo:"datastore"`
0000000000000000000000000000000000000000;;		SupportedType []types.BaseFileQuery          `mo:"supportedType"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostDatastoreBrowser) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreBrowser"] = reflect.TypeOf((*HostDatastoreBrowser)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDatastoreSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Datastore    []types.ManagedObjectReference        `mo:"datastore"`
0000000000000000000000000000000000000000;;		Capabilities types.HostDatastoreSystemCapabilities `mo:"capabilities"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostDatastoreSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDatastoreSystem"] = reflect.TypeOf((*HostDatastoreSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDateTimeSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DateTimeInfo types.HostDateTimeInfo `mo:"dateTimeInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostDateTimeSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDateTimeSystem"] = reflect.TypeOf((*HostDateTimeSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDiagnosticSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ActivePartition *types.HostDiagnosticPartition `mo:"activePartition"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostDiagnosticSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDiagnosticSystem"] = reflect.TypeOf((*HostDiagnosticSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostDirectoryStore struct {
0000000000000000000000000000000000000000;;		HostAuthenticationStore
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostDirectoryStore"] = reflect.TypeOf((*HostDirectoryStore)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostEsxAgentHostManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConfigInfo types.HostEsxAgentHostManagerConfigInfo `mo:"configInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostEsxAgentHostManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostEsxAgentHostManager"] = reflect.TypeOf((*HostEsxAgentHostManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirewallSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		FirewallInfo *types.HostFirewallInfo `mo:"firewallInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirewallSystem"] = reflect.TypeOf((*HostFirewallSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostFirmwareSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostFirmwareSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostFirmwareSystem"] = reflect.TypeOf((*HostFirmwareSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostGraphicsManager struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		GraphicsInfo           []types.HostGraphicsInfo  `mo:"graphicsInfo"`
0000000000000000000000000000000000000000;;		GraphicsConfig         *types.HostGraphicsConfig `mo:"graphicsConfig"`
0000000000000000000000000000000000000000;;		SharedPassthruGpuTypes []string                  `mo:"sharedPassthruGpuTypes"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostGraphicsManager"] = reflect.TypeOf((*HostGraphicsManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostHealthStatusSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Runtime types.HealthSystemRuntime `mo:"runtime"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostHealthStatusSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostHealthStatusSystem"] = reflect.TypeOf((*HostHealthStatusSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostImageConfigManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostImageConfigManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostImageConfigManager"] = reflect.TypeOf((*HostImageConfigManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostKernelModuleSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostKernelModuleSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostKernelModuleSystem"] = reflect.TypeOf((*HostKernelModuleSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalAccountManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostLocalAccountManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalAccountManager"] = reflect.TypeOf((*HostLocalAccountManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostLocalAuthentication struct {
0000000000000000000000000000000000000000;;		HostAuthenticationStore
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostLocalAuthentication"] = reflect.TypeOf((*HostLocalAuthentication)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostMemorySystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ConsoleReservationInfo        *types.ServiceConsoleReservationInfo       `mo:"consoleReservationInfo"`
0000000000000000000000000000000000000000;;		VirtualMachineReservationInfo *types.VirtualMachineMemoryReservationInfo `mo:"virtualMachineReservationInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostMemorySystem"] = reflect.TypeOf((*HostMemorySystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostNetworkSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capabilities         *types.HostNetCapabilities        `mo:"capabilities"`
0000000000000000000000000000000000000000;;		NetworkInfo          *types.HostNetworkInfo            `mo:"networkInfo"`
0000000000000000000000000000000000000000;;		OffloadCapabilities  *types.HostNetOffloadCapabilities `mo:"offloadCapabilities"`
0000000000000000000000000000000000000000;;		NetworkConfig        *types.HostNetworkConfig          `mo:"networkConfig"`
0000000000000000000000000000000000000000;;		DnsConfig            types.BaseHostDnsConfig           `mo:"dnsConfig"`
0000000000000000000000000000000000000000;;		IpRouteConfig        types.BaseHostIpRouteConfig       `mo:"ipRouteConfig"`
0000000000000000000000000000000000000000;;		ConsoleIpRouteConfig types.BaseHostIpRouteConfig       `mo:"consoleIpRouteConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostNetworkSystem"] = reflect.TypeOf((*HostNetworkSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPatchManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostPatchManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPatchManager"] = reflect.TypeOf((*HostPatchManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPciPassthruSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		PciPassthruInfo     []types.BaseHostPciPassthruInfo     `mo:"pciPassthruInfo"`
0000000000000000000000000000000000000000;;		SriovDevicePoolInfo []types.BaseHostSriovDevicePoolInfo `mo:"sriovDevicePoolInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPciPassthruSystem"] = reflect.TypeOf((*HostPciPassthruSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostPowerSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capability types.PowerSystemCapability `mo:"capability"`
0000000000000000000000000000000000000000;;		Info       types.PowerSystemInfo       `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostPowerSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostPowerSystem"] = reflect.TypeOf((*HostPowerSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfile struct {
0000000000000000000000000000000000000000;;		Profile
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ReferenceHost *types.ManagedObjectReference `mo:"referenceHost"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfile"] = reflect.TypeOf((*HostProfile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostProfileManager struct {
0000000000000000000000000000000000000000;;		ProfileManager
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostProfileManager"] = reflect.TypeOf((*HostProfileManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostServiceSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServiceInfo types.HostServiceInfo `mo:"serviceInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostServiceSystem"] = reflect.TypeOf((*HostServiceSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSnmpSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Configuration types.HostSnmpConfigSpec        `mo:"configuration"`
0000000000000000000000000000000000000000;;		Limits        types.HostSnmpSystemAgentLimits `mo:"limits"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostSnmpSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSnmpSystem"] = reflect.TypeOf((*HostSnmpSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSpecificationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostSpecificationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSpecificationManager"] = reflect.TypeOf((*HostSpecificationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostStorageSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		StorageDeviceInfo    *types.HostStorageDeviceInfo   `mo:"storageDeviceInfo"`
0000000000000000000000000000000000000000;;		FileSystemVolumeInfo types.HostFileSystemVolumeInfo `mo:"fileSystemVolumeInfo"`
0000000000000000000000000000000000000000;;		SystemFile           []string                       `mo:"systemFile"`
0000000000000000000000000000000000000000;;		MultipathStateInfo   *types.HostMultipathStateInfo  `mo:"multipathStateInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostStorageSystem"] = reflect.TypeOf((*HostStorageSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostSystem struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Runtime            types.HostRuntimeInfo            `mo:"runtime"`
0000000000000000000000000000000000000000;;		Summary            types.HostListSummary            `mo:"summary"`
0000000000000000000000000000000000000000;;		Hardware           *types.HostHardwareInfo          `mo:"hardware"`
0000000000000000000000000000000000000000;;		Capability         *types.HostCapability            `mo:"capability"`
0000000000000000000000000000000000000000;;		LicensableResource types.HostLicensableResourceInfo `mo:"licensableResource"`
0000000000000000000000000000000000000000;;		ConfigManager      types.HostConfigManager          `mo:"configManager"`
0000000000000000000000000000000000000000;;		Config             *types.HostConfigInfo            `mo:"config"`
0000000000000000000000000000000000000000;;		Vm                 []types.ManagedObjectReference   `mo:"vm"`
0000000000000000000000000000000000000000;;		Datastore          []types.ManagedObjectReference   `mo:"datastore"`
0000000000000000000000000000000000000000;;		Network            []types.ManagedObjectReference   `mo:"network"`
0000000000000000000000000000000000000000;;		DatastoreBrowser   types.ManagedObjectReference     `mo:"datastoreBrowser"`
0000000000000000000000000000000000000000;;		SystemResources    *types.HostSystemResourceInfo    `mo:"systemResources"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *HostSystem) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostSystem"] = reflect.TypeOf((*HostSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVFlashManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		VFlashConfigInfo *types.HostVFlashManagerVFlashConfigInfo `mo:"vFlashConfigInfo"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVFlashManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVFlashManager"] = reflect.TypeOf((*HostVFlashManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVMotionSystem struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		NetConfig *types.HostVMotionNetConfig `mo:"netConfig"`
0000000000000000000000000000000000000000;;		IpConfig  *types.HostIpConfig         `mo:"ipConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVMotionSystem"] = reflect.TypeOf((*HostVMotionSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVStorageObjectManager struct {
0000000000000000000000000000000000000000;;		VStorageObjectManagerBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVStorageObjectManager"] = reflect.TypeOf((*HostVStorageObjectManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVirtualNicManager struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info types.HostVirtualNicManagerInfo `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVirtualNicManager"] = reflect.TypeOf((*HostVirtualNicManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanInternalSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVsanInternalSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanInternalSystem"] = reflect.TypeOf((*HostVsanInternalSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HostVsanSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config types.VsanHostConfigInfo `mo:"config"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HostVsanSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HostVsanSystem"] = reflect.TypeOf((*HostVsanSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type HttpNfcLease struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		InitializeProgress int32                       `mo:"initializeProgress"`
0000000000000000000000000000000000000000;;		Info               *types.HttpNfcLeaseInfo     `mo:"info"`
0000000000000000000000000000000000000000;;		State              types.HttpNfcLeaseState     `mo:"state"`
0000000000000000000000000000000000000000;;		Error              *types.LocalizedMethodFault `mo:"error"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m HttpNfcLease) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["HttpNfcLease"] = reflect.TypeOf((*HttpNfcLease)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type InventoryView struct {
0000000000000000000000000000000000000000;;		ManagedObjectView
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["InventoryView"] = reflect.TypeOf((*InventoryView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IoFilterManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m IoFilterManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IoFilterManager"] = reflect.TypeOf((*IoFilterManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IpPoolManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m IpPoolManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IpPoolManager"] = reflect.TypeOf((*IpPoolManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type IscsiManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m IscsiManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["IscsiManager"] = reflect.TypeOf((*IscsiManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseAssignmentManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m LicenseAssignmentManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseAssignmentManager"] = reflect.TypeOf((*LicenseAssignmentManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LicenseManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Source                   types.BaseLicenseSource            `mo:"source"`
0000000000000000000000000000000000000000;;		SourceAvailable          bool                               `mo:"sourceAvailable"`
0000000000000000000000000000000000000000;;		Diagnostics              *types.LicenseDiagnostics          `mo:"diagnostics"`
0000000000000000000000000000000000000000;;		FeatureInfo              []types.LicenseFeatureInfo         `mo:"featureInfo"`
0000000000000000000000000000000000000000;;		LicensedEdition          string                             `mo:"licensedEdition"`
0000000000000000000000000000000000000000;;		Licenses                 []types.LicenseManagerLicenseInfo  `mo:"licenses"`
0000000000000000000000000000000000000000;;		LicenseAssignmentManager *types.ManagedObjectReference      `mo:"licenseAssignmentManager"`
0000000000000000000000000000000000000000;;		Evaluation               types.LicenseManagerEvaluationInfo `mo:"evaluation"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m LicenseManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LicenseManager"] = reflect.TypeOf((*LicenseManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ListView struct {
0000000000000000000000000000000000000000;;		ManagedObjectView
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ListView"] = reflect.TypeOf((*ListView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type LocalizationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Catalog []types.LocalizationManagerMessageCatalog `mo:"catalog"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m LocalizationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["LocalizationManager"] = reflect.TypeOf((*LocalizationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedEntity struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Parent              *types.ManagedObjectReference  `mo:"parent"`
0000000000000000000000000000000000000000;;		CustomValue         []types.BaseCustomFieldValue   `mo:"customValue"`
0000000000000000000000000000000000000000;;		OverallStatus       types.ManagedEntityStatus      `mo:"overallStatus"`
0000000000000000000000000000000000000000;;		ConfigStatus        types.ManagedEntityStatus      `mo:"configStatus"`
0000000000000000000000000000000000000000;;		ConfigIssue         []types.BaseEvent              `mo:"configIssue"`
0000000000000000000000000000000000000000;;		EffectiveRole       []int32                        `mo:"effectiveRole"`
0000000000000000000000000000000000000000;;		Permission          []types.Permission             `mo:"permission"`
0000000000000000000000000000000000000000;;		Name                string                         `mo:"name"`
0000000000000000000000000000000000000000;;		DisabledMethod      []string                       `mo:"disabledMethod"`
0000000000000000000000000000000000000000;;		RecentTask          []types.ManagedObjectReference `mo:"recentTask"`
0000000000000000000000000000000000000000;;		DeclaredAlarmState  []types.AlarmState             `mo:"declaredAlarmState"`
0000000000000000000000000000000000000000;;		TriggeredAlarmState []types.AlarmState             `mo:"triggeredAlarmState"`
0000000000000000000000000000000000000000;;		AlarmActionsEnabled *bool                          `mo:"alarmActionsEnabled"`
0000000000000000000000000000000000000000;;		Tag                 []types.Tag                    `mo:"tag"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedEntity"] = reflect.TypeOf((*ManagedEntity)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ManagedObjectView struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		View []types.ManagedObjectReference `mo:"view"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ManagedObjectView) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ManagedObjectView"] = reflect.TypeOf((*ManagedObjectView)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type MessageBusProxy struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m MessageBusProxy) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["MessageBusProxy"] = reflect.TypeOf((*MessageBusProxy)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Network struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Name    string                         `mo:"name"`
0000000000000000000000000000000000000000;;		Summary types.BaseNetworkSummary       `mo:"summary"`
0000000000000000000000000000000000000000;;		Host    []types.ManagedObjectReference `mo:"host"`
0000000000000000000000000000000000000000;;		Vm      []types.ManagedObjectReference `mo:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *Network) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Network"] = reflect.TypeOf((*Network)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OpaqueNetwork struct {
0000000000000000000000000000000000000000;;		Network
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capability  *types.OpaqueNetworkCapability `mo:"capability"`
0000000000000000000000000000000000000000;;		ExtraConfig []types.BaseOptionValue        `mo:"extraConfig"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OpaqueNetwork"] = reflect.TypeOf((*OpaqueNetwork)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OptionManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SupportedOption []types.OptionDef       `mo:"supportedOption"`
0000000000000000000000000000000000000000;;		Setting         []types.BaseOptionValue `mo:"setting"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m OptionManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OptionManager"] = reflect.TypeOf((*OptionManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OverheadMemoryManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m OverheadMemoryManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OverheadMemoryManager"] = reflect.TypeOf((*OverheadMemoryManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type OvfManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		OvfImportOption []types.OvfOptionInfo `mo:"ovfImportOption"`
0000000000000000000000000000000000000000;;		OvfExportOption []types.OvfOptionInfo `mo:"ovfExportOption"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m OvfManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["OvfManager"] = reflect.TypeOf((*OvfManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PerformanceManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Description        types.PerformanceDescription `mo:"description"`
0000000000000000000000000000000000000000;;		HistoricalInterval []types.PerfInterval         `mo:"historicalInterval"`
0000000000000000000000000000000000000000;;		PerfCounter        []types.PerfCounterInfo      `mo:"perfCounter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m PerformanceManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PerformanceManager"] = reflect.TypeOf((*PerformanceManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Profile struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config           types.BaseProfileConfigInfo    `mo:"config"`
0000000000000000000000000000000000000000;;		Description      *types.ProfileDescription      `mo:"description"`
0000000000000000000000000000000000000000;;		Name             string                         `mo:"name"`
0000000000000000000000000000000000000000;;		CreatedTime      time.Time                      `mo:"createdTime"`
0000000000000000000000000000000000000000;;		ModifiedTime     time.Time                      `mo:"modifiedTime"`
0000000000000000000000000000000000000000;;		Entity           []types.ManagedObjectReference `mo:"entity"`
0000000000000000000000000000000000000000;;		ComplianceStatus string                         `mo:"complianceStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m Profile) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Profile"] = reflect.TypeOf((*Profile)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileComplianceManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ProfileComplianceManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileComplianceManager"] = reflect.TypeOf((*ProfileComplianceManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ProfileManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Profile []types.ManagedObjectReference `mo:"profile"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ProfileManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ProfileManager"] = reflect.TypeOf((*ProfileManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyCollector struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Filter []types.ManagedObjectReference `mo:"filter"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m PropertyCollector) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertyCollector"] = reflect.TypeOf((*PropertyCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type PropertyFilter struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Spec           types.PropertyFilterSpec `mo:"spec"`
0000000000000000000000000000000000000000;;		PartialUpdates bool                     `mo:"partialUpdates"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m PropertyFilter) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["PropertyFilter"] = reflect.TypeOf((*PropertyFilter)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePlanningManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ResourcePlanningManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePlanningManager"] = reflect.TypeOf((*ResourcePlanningManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ResourcePool struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Summary            types.BaseResourcePoolSummary  `mo:"summary"`
0000000000000000000000000000000000000000;;		Runtime            types.ResourcePoolRuntimeInfo  `mo:"runtime"`
0000000000000000000000000000000000000000;;		Owner              types.ManagedObjectReference   `mo:"owner"`
0000000000000000000000000000000000000000;;		ResourcePool       []types.ManagedObjectReference `mo:"resourcePool"`
0000000000000000000000000000000000000000;;		Vm                 []types.ManagedObjectReference `mo:"vm"`
0000000000000000000000000000000000000000;;		Config             types.ResourceConfigSpec       `mo:"config"`
0000000000000000000000000000000000000000;;		ChildConfiguration []types.ResourceConfigSpec     `mo:"childConfiguration"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *ResourcePool) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ResourcePool"] = reflect.TypeOf((*ResourcePool)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTask struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info types.ScheduledTaskInfo `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTask"] = reflect.TypeOf((*ScheduledTask)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ScheduledTaskManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ScheduledTask []types.ManagedObjectReference `mo:"scheduledTask"`
0000000000000000000000000000000000000000;;		Description   types.ScheduledTaskDescription `mo:"description"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ScheduledTaskManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ScheduledTaskManager"] = reflect.TypeOf((*ScheduledTaskManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SearchIndex struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m SearchIndex) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SearchIndex"] = reflect.TypeOf((*SearchIndex)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceInstance struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ServerClock time.Time            `mo:"serverClock"`
0000000000000000000000000000000000000000;;		Capability  types.Capability     `mo:"capability"`
0000000000000000000000000000000000000000;;		Content     types.ServiceContent `mo:"content"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ServiceInstance) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceInstance"] = reflect.TypeOf((*ServiceInstance)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ServiceManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Service []types.ServiceManagerServiceInfo `mo:"service"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ServiceManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ServiceManager"] = reflect.TypeOf((*ServiceManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SessionManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		SessionList         []types.UserSession `mo:"sessionList"`
0000000000000000000000000000000000000000;;		CurrentSession      *types.UserSession  `mo:"currentSession"`
0000000000000000000000000000000000000000;;		Message             *string             `mo:"message"`
0000000000000000000000000000000000000000;;		MessageLocaleList   []string            `mo:"messageLocaleList"`
0000000000000000000000000000000000000000;;		SupportedLocaleList []string            `mo:"supportedLocaleList"`
0000000000000000000000000000000000000000;;		DefaultLocale       string              `mo:"defaultLocale"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m SessionManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SessionManager"] = reflect.TypeOf((*SessionManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type SimpleCommand struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		EncodingType types.SimpleCommandEncoding     `mo:"encodingType"`
0000000000000000000000000000000000000000;;		Entity       types.ServiceManagerServiceInfo `mo:"entity"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m SimpleCommand) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["SimpleCommand"] = reflect.TypeOf((*SimpleCommand)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StoragePod struct {
0000000000000000000000000000000000000000;;		Folder
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Summary            *types.StoragePodSummary  `mo:"summary"`
0000000000000000000000000000000000000000;;		PodStorageDrsEntry *types.PodStorageDrsEntry `mo:"podStorageDrsEntry"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StoragePod"] = reflect.TypeOf((*StoragePod)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type StorageResourceManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m StorageResourceManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["StorageResourceManager"] = reflect.TypeOf((*StorageResourceManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Task struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Info types.TaskInfo `mo:"info"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["Task"] = reflect.TypeOf((*Task)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskHistoryCollector struct {
0000000000000000000000000000000000000000;;		HistoryCollector
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		LatestPage []types.TaskInfo `mo:"latestPage"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskHistoryCollector"] = reflect.TypeOf((*TaskHistoryCollector)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type TaskManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		RecentTask   []types.ManagedObjectReference `mo:"recentTask"`
0000000000000000000000000000000000000000;;		Description  types.TaskDescription          `mo:"description"`
0000000000000000000000000000000000000000;;		MaxCollector int32                          `mo:"maxCollector"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m TaskManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["TaskManager"] = reflect.TypeOf((*TaskManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type UserDirectory struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		DomainList []string `mo:"domainList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m UserDirectory) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["UserDirectory"] = reflect.TypeOf((*UserDirectory)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VStorageObjectManagerBase struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VStorageObjectManagerBase) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VStorageObjectManagerBase"] = reflect.TypeOf((*VStorageObjectManagerBase)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VcenterVStorageObjectManager struct {
0000000000000000000000000000000000000000;;		VStorageObjectManagerBase
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VcenterVStorageObjectManager"] = reflect.TypeOf((*VcenterVStorageObjectManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type View struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m View) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["View"] = reflect.TypeOf((*View)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type ViewManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ViewList []types.ManagedObjectReference `mo:"viewList"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m ViewManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["ViewManager"] = reflect.TypeOf((*ViewManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualApp struct {
0000000000000000000000000000000000000000;;		ResourcePool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ParentFolder *types.ManagedObjectReference  `mo:"parentFolder"`
0000000000000000000000000000000000000000;;		Datastore    []types.ManagedObjectReference `mo:"datastore"`
0000000000000000000000000000000000000000;;		Network      []types.ManagedObjectReference `mo:"network"`
0000000000000000000000000000000000000000;;		VAppConfig   *types.VAppConfigInfo          `mo:"vAppConfig"`
0000000000000000000000000000000000000000;;		ParentVApp   *types.ManagedObjectReference  `mo:"parentVApp"`
0000000000000000000000000000000000000000;;		ChildLink    []types.VirtualAppLinkInfo     `mo:"childLink"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualApp"] = reflect.TypeOf((*VirtualApp)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualDiskManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VirtualDiskManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualDiskManager"] = reflect.TypeOf((*VirtualDiskManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachine struct {
0000000000000000000000000000000000000000;;		ManagedEntity
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Capability           types.VirtualMachineCapability    `mo:"capability"`
0000000000000000000000000000000000000000;;		Config               *types.VirtualMachineConfigInfo   `mo:"config"`
0000000000000000000000000000000000000000;;		Layout               *types.VirtualMachineFileLayout   `mo:"layout"`
0000000000000000000000000000000000000000;;		LayoutEx             *types.VirtualMachineFileLayoutEx `mo:"layoutEx"`
0000000000000000000000000000000000000000;;		Storage              *types.VirtualMachineStorageInfo  `mo:"storage"`
0000000000000000000000000000000000000000;;		EnvironmentBrowser   types.ManagedObjectReference      `mo:"environmentBrowser"`
0000000000000000000000000000000000000000;;		ResourcePool         *types.ManagedObjectReference     `mo:"resourcePool"`
0000000000000000000000000000000000000000;;		ParentVApp           *types.ManagedObjectReference     `mo:"parentVApp"`
0000000000000000000000000000000000000000;;		ResourceConfig       *types.ResourceConfigSpec         `mo:"resourceConfig"`
0000000000000000000000000000000000000000;;		Runtime              types.VirtualMachineRuntimeInfo   `mo:"runtime"`
0000000000000000000000000000000000000000;;		Guest                *types.GuestInfo                  `mo:"guest"`
0000000000000000000000000000000000000000;;		Summary              types.VirtualMachineSummary       `mo:"summary"`
0000000000000000000000000000000000000000;;		Datastore            []types.ManagedObjectReference    `mo:"datastore"`
0000000000000000000000000000000000000000;;		Network              []types.ManagedObjectReference    `mo:"network"`
0000000000000000000000000000000000000000;;		Snapshot             *types.VirtualMachineSnapshotInfo `mo:"snapshot"`
0000000000000000000000000000000000000000;;		RootSnapshot         []types.ManagedObjectReference    `mo:"rootSnapshot"`
0000000000000000000000000000000000000000;;		GuestHeartbeatStatus types.ManagedEntityStatus         `mo:"guestHeartbeatStatus"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m *VirtualMachine) Entity() *ManagedEntity {
0000000000000000000000000000000000000000;;		return &m.ManagedEntity
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachine"] = reflect.TypeOf((*VirtualMachine)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineCompatibilityChecker struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VirtualMachineCompatibilityChecker) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineCompatibilityChecker"] = reflect.TypeOf((*VirtualMachineCompatibilityChecker)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineProvisioningChecker struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VirtualMachineProvisioningChecker) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineProvisioningChecker"] = reflect.TypeOf((*VirtualMachineProvisioningChecker)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualMachineSnapshot struct {
0000000000000000000000000000000000000000;;		ExtensibleManagedObject
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		Config        types.VirtualMachineConfigInfo `mo:"config"`
0000000000000000000000000000000000000000;;		ChildSnapshot []types.ManagedObjectReference `mo:"childSnapshot"`
0000000000000000000000000000000000000000;;		Vm            types.ManagedObjectReference   `mo:"vm"`
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualMachineSnapshot"] = reflect.TypeOf((*VirtualMachineSnapshot)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VirtualizationManager struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VirtualizationManager) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VirtualizationManager"] = reflect.TypeOf((*VirtualizationManager)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VmwareDistributedVirtualSwitch struct {
0000000000000000000000000000000000000000;;		DistributedVirtualSwitch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VmwareDistributedVirtualSwitch"] = reflect.TypeOf((*VmwareDistributedVirtualSwitch)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type VsanUpgradeSystem struct {
0000000000000000000000000000000000000000;;		Self types.ManagedObjectReference
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (m VsanUpgradeSystem) Reference() types.ManagedObjectReference {
0000000000000000000000000000000000000000;;		return m.Self
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func init() {
0000000000000000000000000000000000000000;;		t["VsanUpgradeSystem"] = reflect.TypeOf((*VsanUpgradeSystem)(nil)).Elem()
0000000000000000000000000000000000000000;;	}
