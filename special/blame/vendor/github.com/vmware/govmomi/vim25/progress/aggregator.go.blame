0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/aggregator.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/aggregator.go][vendor/github.com/vmware/govmomi/vim25/progress/aggregator.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package progress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "sync"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type Aggregator struct {
0000000000000000000000000000000000000000;;		downstream Sinker
0000000000000000000000000000000000000000;;		upstream   chan (<-chan Report)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		done chan struct{}
0000000000000000000000000000000000000000;;		w    sync.WaitGroup
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func NewAggregator(s Sinker) *Aggregator {
0000000000000000000000000000000000000000;;		a := &Aggregator{
0000000000000000000000000000000000000000;;			downstream: s,
0000000000000000000000000000000000000000;;			upstream:   make(chan (<-chan Report)),
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			done: make(chan struct{}),
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		a.w.Add(1)
0000000000000000000000000000000000000000;;		go a.loop()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return a
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *Aggregator) loop() {
0000000000000000000000000000000000000000;;		defer a.w.Done()
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		dch := a.downstream.Sink()
0000000000000000000000000000000000000000;;		defer close(dch)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			select {
0000000000000000000000000000000000000000;;			case uch := <-a.upstream:
0000000000000000000000000000000000000000;;				// Drain upstream channel
0000000000000000000000000000000000000000;;				for e := range uch {
0000000000000000000000000000000000000000;;					dch <- e
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case <-a.done:
0000000000000000000000000000000000000000;;				return
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (a *Aggregator) Sink() chan<- Report {
0000000000000000000000000000000000000000;;		ch := make(chan Report)
0000000000000000000000000000000000000000;;		a.upstream <- ch
0000000000000000000000000000000000000000;;		return ch
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Done marks the aggregator as done. No more calls to Sink() may be made and
0000000000000000000000000000000000000000;;	// the downstream progress report channel will be closed when Done() returns.
0000000000000000000000000000000000000000;;	func (a *Aggregator) Done() {
0000000000000000000000000000000000000000;;		close(a.done)
0000000000000000000000000000000000000000;;		a.w.Wait()
0000000000000000000000000000000000000000;;	}
