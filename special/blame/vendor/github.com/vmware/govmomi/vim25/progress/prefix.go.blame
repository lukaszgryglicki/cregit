0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/prefix.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/prefix.go][vendor/github.com/vmware/govmomi/vim25/progress/prefix.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package progress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import "fmt"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type prefixedReport struct {
0000000000000000000000000000000000000000;;		Report
0000000000000000000000000000000000000000;;		prefix string
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r prefixedReport) Detail() string {
0000000000000000000000000000000000000000;;		if d := r.Report.Detail(); d != "" {
0000000000000000000000000000000000000000;;			return fmt.Sprintf("%s: %s", r.prefix, d)
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r.prefix
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func prefixLoop(upstream <-chan Report, downstream chan<- Report, prefix string) {
0000000000000000000000000000000000000000;;		defer close(downstream)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for r := range upstream {
0000000000000000000000000000000000000000;;			downstream <- prefixedReport{
0000000000000000000000000000000000000000;;				Report: r,
0000000000000000000000000000000000000000;;				prefix: prefix,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Prefix(s Sinker, prefix string) Sinker {
0000000000000000000000000000000000000000;;		fn := func() chan<- Report {
0000000000000000000000000000000000000000;;			upstream := make(chan Report)
0000000000000000000000000000000000000000;;			downstream := s.Sink()
0000000000000000000000000000000000000000;;			go prefixLoop(upstream, downstream, prefix)
0000000000000000000000000000000000000000;;			return upstream
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return SinkFunc(fn)
0000000000000000000000000000000000000000;;	}
