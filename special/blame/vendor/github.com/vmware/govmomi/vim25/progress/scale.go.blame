0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2014 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/scale.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/progress/scale.go][vendor/github.com/vmware/govmomi/vim25/progress/scale.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package progress
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type scaledReport struct {
0000000000000000000000000000000000000000;;		Report
0000000000000000000000000000000000000000;;		n int
0000000000000000000000000000000000000000;;		i int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r scaledReport) Percentage() float32 {
0000000000000000000000000000000000000000;;		b := 100 * float32(r.i) / float32(r.n)
0000000000000000000000000000000000000000;;		return b + (r.Report.Percentage() / float32(r.n))
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type scaleOne struct {
0000000000000000000000000000000000000000;;		s Sinker
0000000000000000000000000000000000000000;;		n int
0000000000000000000000000000000000000000;;		i int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s scaleOne) Sink() chan<- Report {
0000000000000000000000000000000000000000;;		upstream := make(chan Report)
0000000000000000000000000000000000000000;;		downstream := s.s.Sink()
0000000000000000000000000000000000000000;;		go s.loop(upstream, downstream)
0000000000000000000000000000000000000000;;		return upstream
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s scaleOne) loop(upstream <-chan Report, downstream chan<- Report) {
0000000000000000000000000000000000000000;;		defer close(downstream)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for r := range upstream {
0000000000000000000000000000000000000000;;			downstream <- scaledReport{
0000000000000000000000000000000000000000;;				Report: r,
0000000000000000000000000000000000000000;;				n:      s.n,
0000000000000000000000000000000000000000;;				i:      s.i,
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type scaleMany struct {
0000000000000000000000000000000000000000;;		s Sinker
0000000000000000000000000000000000000000;;		n int
0000000000000000000000000000000000000000;;		i int
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func Scale(s Sinker, n int) Sinker {
0000000000000000000000000000000000000000;;		return &scaleMany{
0000000000000000000000000000000000000000;;			s: s,
0000000000000000000000000000000000000000;;			n: n,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (s *scaleMany) Sink() chan<- Report {
0000000000000000000000000000000000000000;;		if s.i == s.n {
0000000000000000000000000000000000000000;;			s.n++
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		ch := scaleOne{s: s.s, n: s.n, i: s.i}.Sink()
0000000000000000000000000000000000000000;;		s.i++
0000000000000000000000000000000000000000;;		return ch
0000000000000000000000000000000000000000;;	}
