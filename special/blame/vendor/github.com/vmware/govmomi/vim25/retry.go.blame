0000000000000000000000000000000000000000;;	/*
0000000000000000000000000000000000000000;;	Copyright (c) 2015 VMware, Inc. All Rights Reserved.
7dd1f486ff5c2ccadc83b845ee9a4cebfa98c85d;Godeps/_workspace/src/github.com/vmware/govmomi/vim25/retry.go[Godeps/_workspace/src/github.com/vmware/govmomi/vim25/retry.go][vendor/github.com/vmware/govmomi/vim25/retry.go];	
0000000000000000000000000000000000000000;;	Licensed under the Apache License, Version 2.0 (the "License");
0000000000000000000000000000000000000000;;	you may not use this file except in compliance with the License.
0000000000000000000000000000000000000000;;	You may obtain a copy of the License at
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	    http://www.apache.org/licenses/LICENSE-2.0
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	Unless required by applicable law or agreed to in writing, software
0000000000000000000000000000000000000000;;	distributed under the License is distributed on an "AS IS" BASIS,
0000000000000000000000000000000000000000;;	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0000000000000000000000000000000000000000;;	See the License for the specific language governing permissions and
0000000000000000000000000000000000000000;;	limitations under the License.
0000000000000000000000000000000000000000;;	*/
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	package vim25
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	import (
0000000000000000000000000000000000000000;;		"context"
0000000000000000000000000000000000000000;;		"net"
0000000000000000000000000000000000000000;;		"net/url"
0000000000000000000000000000000000000000;;		"time"
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		"github.com/vmware/govmomi/vim25/soap"
0000000000000000000000000000000000000000;;	)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type RetryFunc func(err error) (retry bool, delay time.Duration)
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// TemporaryNetworkError returns a RetryFunc that retries up to a maximum of n
0000000000000000000000000000000000000000;;	// times, only if the error returned by the RoundTrip function is a temporary
0000000000000000000000000000000000000000;;	// network error (for example: a connect timeout).
0000000000000000000000000000000000000000;;	func TemporaryNetworkError(n int) RetryFunc {
0000000000000000000000000000000000000000;;		return func(err error) (retry bool, delay time.Duration) {
0000000000000000000000000000000000000000;;			var nerr net.Error
0000000000000000000000000000000000000000;;			var ok bool
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Never retry if this is not a network error.
0000000000000000000000000000000000000000;;			switch rerr := err.(type) {
0000000000000000000000000000000000000000;;			case *url.Error:
0000000000000000000000000000000000000000;;				if nerr, ok = rerr.Err.(net.Error); !ok {
0000000000000000000000000000000000000000;;					return false, 0
0000000000000000000000000000000000000000;;				}
0000000000000000000000000000000000000000;;			case net.Error:
0000000000000000000000000000000000000000;;				nerr = rerr
0000000000000000000000000000000000000000;;			default:
0000000000000000000000000000000000000000;;				return false, 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			if !nerr.Temporary() {
0000000000000000000000000000000000000000;;				return false, 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Don't retry if we're out of tries.
0000000000000000000000000000000000000000;;			if n--; n <= 0 {
0000000000000000000000000000000000000000;;				return false, 0
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			return true, 0
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	type retry struct {
0000000000000000000000000000000000000000;;		roundTripper soap.RoundTripper
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		// fn is a custom function that is called when an error occurs.
0000000000000000000000000000000000000000;;		// It returns whether or not to retry, and if so, how long to
0000000000000000000000000000000000000000;;		// delay before retrying.
0000000000000000000000000000000000000000;;		fn RetryFunc
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	// Retry wraps the specified soap.RoundTripper and invokes the
0000000000000000000000000000000000000000;;	// specified RetryFunc. The RetryFunc returns whether or not to
0000000000000000000000000000000000000000;;	// retry the call, and if so, how long to wait before retrying. If
0000000000000000000000000000000000000000;;	// the result of this function is to not retry, the original error
0000000000000000000000000000000000000000;;	// is returned from the RoundTrip function.
0000000000000000000000000000000000000000;;	func Retry(roundTripper soap.RoundTripper, fn RetryFunc) soap.RoundTripper {
0000000000000000000000000000000000000000;;		r := &retry{
0000000000000000000000000000000000000000;;			roundTripper: roundTripper,
0000000000000000000000000000000000000000;;			fn:           fn,
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return r
0000000000000000000000000000000000000000;;	}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;	func (r *retry) RoundTrip(ctx context.Context, req, res soap.HasFault) error {
0000000000000000000000000000000000000000;;		var err error
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		for {
0000000000000000000000000000000000000000;;			err = r.roundTripper.RoundTrip(ctx, req, res)
0000000000000000000000000000000000000000;;			if err == nil {
0000000000000000000000000000000000000000;;				break
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			// Invoke retry function to see if another attempt should be made.
0000000000000000000000000000000000000000;;			if retry, delay := r.fn(err); retry {
0000000000000000000000000000000000000000;;				time.Sleep(delay)
0000000000000000000000000000000000000000;;				continue
0000000000000000000000000000000000000000;;			}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;			break
0000000000000000000000000000000000000000;;		}
0000000000000000000000000000000000000000;;	
0000000000000000000000000000000000000000;;		return err
0000000000000000000000000000000000000000;;	}
